{
  "cve_id": "CVE-2024-7094",
  "description": "The JS Help Desk - The Ultimate Help Desk & Support Plugin plugin for WordPress is vulnerable to **PHP Code Injection** leading to Remote Code Execution in all versions up to, and including, 2.8.6 via the storeTheme function. This is due to a **lack of sanitization** on user-supplied values, which replace values in the style.php file, along with **missing capability checks**. This makes it possible for unauthenticated attackers to execute code on the server. This issue was partially patched in 2.8.6 when the code injection issue was resolved, and fully patched in 2.8.7 when the **missing authorization** and cross-site request forgery protection was added.",
  "key_phrases": {
    "rootcause": "missing authorization",
    "weakness": [
      "PHP Code Injection",
      "lack of sanitization",
      "missing capability checks"
    ],
    "impact": [
      "Remote Code Execution",
      "execute code"
    ],
    "vector": "",
    "attacker": "unauthenticated attackers",
    "product": "The JS Help Desk - The Ultimate Help Desk & Support Plugin plugin for WordPress",
    "version": "all versions up to and including 2.8.6",
    "component": "storeTheme function"
  },
  "reference_content": "Based on the provided information, here's an analysis of CVE-2024-7094:\n\n**Root Cause of Vulnerability:**\n\n*   The vulnerability stems from a lack of sanitization of user-supplied input within the `storeTheme` function of the JS Help Desk plugin. This function takes user-provided color values and directly inserts them into the `style.php` file, a file that handles the plugin's CSS styling.\n*   Additionally, the plugin lacks capability checks and CSRF protection on the vulnerable endpoint.\n\n**Weaknesses/Vulnerabilities Present:**\n\n*   **PHP Code Injection:** Unsanitized user-supplied input is directly injected into a PHP file, allowing an attacker to insert arbitrary PHP code.\n*   **Remote Code Execution (RCE):** By injecting malicious PHP code, an attacker can execute arbitrary commands on the server, potentially gaining full control.\n*   **Missing Authorization:** The vulnerability is exploitable by unauthenticated users, as there are no checks in place to ensure that only authorized users can modify the theme settings.\n*    **Missing CSRF Protection:**  The lack of CSRF protection on the endpoint also contributes to the vulnerability and allows an attacker to perform actions on behalf of the user without their consent.\n\n**Impact of Exploitation:**\n\n*   **Complete System Compromise:** Attackers can execute arbitrary code on the server, potentially leading to complete server takeover.\n*   **Data Breach:** Attackers may access and steal sensitive data from the database or filesystem.\n*   **Website Defacement:** Attackers can modify the website's appearance or functionality.\n*   **Malware Distribution:** The compromised server can be used to distribute malware to visitors.\n\n**Attack Vectors:**\n\n*   **HTTP POST Request:** The vulnerability is triggered by sending a specially crafted POST request to the server with malicious PHP code in the color input parameters, specifically targeting the `storeTheme` function.\n\n**Required Attacker Capabilities/Position:**\n\n*   **Unauthenticated Access:** The attacker does not need to be logged in or have any user privileges.\n*   **Network Access:** The attacker needs to be able to send HTTP requests to the target server.\n\n**Additional Notes:**\n\n*   The vulnerability was partially patched in version 2.8.6 by resolving the code injection issue. However, the missing authorization and CSRF protection were only added in version 2.8.7, which is when the vulnerability was fully patched.\n*   CVE-2024-43274 is suspected to be a duplicate of this issue.\n*   Wordfence blocked 1 attack targeting this vulnerability in the past 24 hours, which shows it's actively being exploited.\n\nIn summary, CVE-2024-7094 is a critical vulnerability that allows unauthenticated remote attackers to execute arbitrary PHP code on a vulnerable WordPress server due to a lack of input sanitization, authorization, and CSRF protection.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID  | CWE Name                                                                        | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :------------------------------------------------------------------------------ | :----------- | :---------------------- | :------------------------------ | :------------------------------ |\n| CWE-94    | Improper Control of Generation of Code ('Code Injection')                      | 0.9          | Base                    | Primary                         | Allowed-with-Review             |\n| CWE-862   | Missing Authorization                                                           | 0.9          | Base                    | Secondary                       | Allowed                         |\n| CWE-184   | Incomplete List of Disallowed Inputs                                            | 0.7          | Base                    | Secondary                       | Allowed                         |\n| CWE-434   | Unrestricted Upload of File with Dangerous Type                                 | 0.7          | Base                    | Secondary                       | Allowed                         |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is **CWE-94** Improper Control of Generation of Code ('Code Injection'), indicating the direct injection of code due to a **lack of sanitization**. This is augmented by **CWE-862** Missing Authorization, allowing **unauthenticated attackers** access. **CWE-184** Incomplete List of Disallowed Inputs and **CWE-434** Unrestricted Upload of File with Dangerous Type describe the mechanism and method of the vulnerability being exploited.\n\n```mermaid\ngraph TD\n    cwe94[\"CWE-94: Improper Control of Generation of Code ('Code Injection')\"]\n    cwe862[\"CWE-862: Missing Authorization\"]\n    cwe184[\"CWE-184: Incomplete List of Disallowed Inputs\"]\n    cwe434[\"CWE-434: Unrestricted Upload of File with Dangerous Type\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements\"]\n\n    cwe94 -->|CHILDOF| cwe74\n    cwe184 -->|CANPRECEDE| cwe94\n    cwe434 -->|CANPRECEDE| cwe94\n    \n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe94 primary\n    class cwe862,cwe184,cwe434 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with **CWE-862** Missing Authorization, allowing unauthenticated access. This is followed by a **lack of sanitization** which is related to **CWE-184** Incomplete List of Disallowed Inputs, facilitating **CWE-94** Improper Control of Generation of Code ('Code Injection'). **CWE-434** Unrestricted Upload of File with Dangerous Type is a means of bypassing input validation. The ultimate impact is Remote Code Execution.\n\n## Summary of Analysis\nThe initial assessment focused on the description emphasizing \"**PHP Code Injection** due to a **lack of sanitization** on user-supplied values, which replace values in the style.php file, along with **missing capability checks**.\" The primary CWE is **CWE-94** Improper Control of Generation of Code ('Code Injection'), which is the direct result of the **lack of sanitization**. The **missing capability checks** is **CWE-862** Missing Authorization because \"**unauthenticated attackers** can execute code on the server.\"\n\nThe retriever results offered several potential CWEs, including **CWE-352** Cross-Site Request Forgery (CSRF), **CWE-79** Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'), and **CWE-89** Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection'). However, these were deemed less relevant as they did not directly address the root cause of the vulnerability, which is the injection of code due to **lack of sanitization** and **missing authorization**.\n\n**CWE-94** is selected as the primary weakness because it directly reflects the **PHP Code Injection** aspect of the vulnerability. **CWE-862** Missing Authorization is selected because the vulnerability is exploitable by **unauthenticated attackers** due to **missing capability checks**. **CWE-184** Incomplete List of Disallowed Inputs and **CWE-434** Unrestricted Upload of File with Dangerous Type support the **lack of sanitization**.\n\nRelevant CWE Information:\n*   \"The JS Help Desk - The Ultimate Help Desk & Support Plugin plugin for WordPress is vulnerable to **PHP Code Injection** leading to Remote Code Execution in all versions up to, and including, 2.8.6 via the storeTheme function. This is due to a **lack of sanitization** on user-supplied values, which replace values in the style.php file, along with **missing capability checks**. This makes it possible for **unauthenticated attackers** to execute code on the server.\"\n\nTherefore the selected CWEs accurately reflect the vulnerability at an appropriate level of specificity.",
  "analysis_with_relationships": "# Summary\n| CWE ID  | CWE Name                                                                        | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :------------------------------------------------------------------------------ | :----------- | :---------------------- | :------------------------------ | :------------------------------ |\n| CWE-94    | Improper Control of Generation of Code ('Code Injection')                      | 0.9          | Base                    | Primary                         | Allowed-with-Review             |\n| CWE-862   | Missing Authorization                                                           | 0.9          | Base                    | Secondary                       | Allowed                         |\n| CWE-184   | Incomplete List of Disallowed Inputs                                            | 0.7          | Base                    | Secondary                       | Allowed                         |\n| CWE-434   | Unrestricted Upload of File with Dangerous Type                                 | 0.7          | Base                    | Secondary                       | Allowed                         |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is **CWE-94** Improper Control of Generation of Code ('Code Injection'), indicating the direct injection of code due to a **lack of sanitization**. This is augmented by **CWE-862** Missing Authorization, allowing **unauthenticated attackers** access. **CWE-184** Incomplete List of Disallowed Inputs and **CWE-434** Unrestricted Upload of File with Dangerous Type describe the mechanism and method of the vulnerability being exploited.\n\n```mermaid\ngraph TD\n    cwe94[\"CWE-94: Improper Control of Generation of Code ('Code Injection')\"]\n    cwe862[\"CWE-862: Missing Authorization\"]\n    cwe184[\"CWE-184: Incomplete List of Disallowed Inputs\"]\n    cwe434[\"CWE-434: Unrestricted Upload of File with Dangerous Type\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements\"]\n\n    cwe94 -->|CHILDOF| cwe74\n    cwe184 -->|CANPRECEDE| cwe94\n    cwe434 -->|CANPRECEDE| cwe94\n    \n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe94 primary\n    class cwe862,cwe184,cwe434 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with **CWE-862** Missing Authorization, allowing unauthenticated access. This is followed by a **lack of sanitization** which is related to **CWE-184** Incomplete List of Disallowed Inputs, facilitating **CWE-94** Improper Control of Generation of Code ('Code Injection'). **CWE-434** Unrestricted Upload of File with Dangerous Type is a means of bypassing input validation. The ultimate impact is Remote Code Execution.\n\n## Summary of Analysis\nThe initial assessment focused on the description emphasizing \"**PHP Code Injection** due to a **lack of sanitization** on user-supplied values, which replace values in the style.php file, along with **missing capability checks**.\" The primary CWE is **CWE-94** Improper Control of Generation of Code ('Code Injection'), which is the direct result of the **lack of sanitization**. The **missing capability checks** is **CWE-862** Missing Authorization because \"**unauthenticated attackers** can execute code on the server.\"\n\nThe retriever results offered several potential CWEs, including **CWE-352** Cross-Site Request Forgery (CSRF), **CWE-79** Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'), and **CWE-89** Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection'). However, these were deemed less relevant as they did not directly address the root cause of the vulnerability, which is the injection of code due to **lack of sanitization** and **missing authorization**.\n\n**CWE-94** is selected as the primary weakness because it directly reflects the **PHP Code Injection** aspect of the vulnerability. **CWE-862** Missing Authorization is selected because the vulnerability is exploitable by **unauthenticated attackers** due to **missing capability checks**. **CWE-184** Incomplete List of Disallowed Inputs and **CWE-434** Unrestricted Upload of File with Dangerous Type support the **lack of sanitization**.\n\nRelevant CWE Information:\n*   \"The JS Help Desk - The Ultimate Help Desk & Support Plugin plugin for WordPress is vulnerable to **PHP Code Injection** leading to Remote Code Execution in all versions up to, and including, 2.8.6 via the storeTheme function. This is due to a **lack of sanitization** on user-supplied values, which replace values in the style.php file, along with **missing capability checks**. This makes it possible for **unauthenticated attackers** to execute code on the server.\"\n\nTherefore the selected CWEs accurately reflect the vulnerability at an appropriate level of specificity.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-89:**\n- 89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')) - ROOT\n\n\n**Chain starting from CWE-94:**\n- 94 (Improper Control of Generation of Code ('Code Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse",
        "original_content": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
        "keyphrase_sources": [
          {
            "id": "rootcause:missing authorization",
            "keyphrase": "missing authorization",
            "type": "rootcause"
          },
          {
            "id": "weakness:PHP Code Injection",
            "keyphrase": "PHP Code Injection",
            "type": "weakness"
          },
          {
            "id": "weakness:lack of sanitization",
            "keyphrase": "lack of sanitization",
            "type": "weakness"
          },
          {
            "id": "weakness:missing capability checks",
            "keyphrase": "missing capability checks",
            "type": "weakness"
          },
          {
            "id": "impact:Remote Code Execution",
            "keyphrase": "Remote Code Execution",
            "type": "impact"
          },
          {
            "id": "impact:execute code",
            "keyphrase": "execute code",
            "type": "impact"
          },
          {
            "id": "attacker:unauthenticated attackers",
            "keyphrase": "unauthenticated attackers",
            "type": "attacker"
          },
          {
            "id": "product:The JS Help Desk - The Ultimate Help Desk & Support Plugin plugin for WordPress",
            "keyphrase": "The JS Help Desk - The Ultimate Help Desk & Support Plugin plugin for WordPress",
            "type": "product"
          },
          {
            "id": "version:all versions up to and including 2.8.6",
            "keyphrase": "all versions up to and including 2.8.6",
            "type": "version"
          },
          {
            "id": "component:storeTheme function",
            "keyphrase": "storeTheme function",
            "type": "component"
          }
        ]
      },
      "similarity": 719.1376810885629
    },
    {
      "metadata": {
        "doc_id": "862",
        "name": "Missing Authorization",
        "source": "sparse",
        "original_content": "The product does not perform an authorization check when an actor attempts to access a resource or perform an action.",
        "keyphrase_sources": [
          {
            "id": "rootcause:missing authorization",
            "keyphrase": "missing authorization",
            "type": "rootcause"
          },
          {
            "id": "weakness:missing capability checks",
            "keyphrase": "missing capability checks",
            "type": "weakness"
          },
          {
            "id": "impact:Remote Code Execution",
            "keyphrase": "Remote Code Execution",
            "type": "impact"
          },
          {
            "id": "impact:execute code",
            "keyphrase": "execute code",
            "type": "impact"
          },
          {
            "id": "attacker:unauthenticated attackers",
            "keyphrase": "unauthenticated attackers",
            "type": "attacker"
          },
          {
            "id": "product:The JS Help Desk - The Ultimate Help Desk & Support Plugin plugin for WordPress",
            "keyphrase": "The JS Help Desk - The Ultimate Help Desk & Support Plugin plugin for WordPress",
            "type": "product"
          },
          {
            "id": "version:all versions up to and including 2.8.6",
            "keyphrase": "all versions up to and including 2.8.6",
            "type": "version"
          },
          {
            "id": "component:storeTheme function",
            "keyphrase": "storeTheme function",
            "type": "component"
          }
        ]
      },
      "similarity": 683.3352841452947
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse",
        "original_content": "The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.",
        "keyphrase_sources": [
          {
            "id": "rootcause:missing authorization",
            "keyphrase": "missing authorization",
            "type": "rootcause"
          },
          {
            "id": "weakness:PHP Code Injection",
            "keyphrase": "PHP Code Injection",
            "type": "weakness"
          },
          {
            "id": "weakness:lack of sanitization",
            "keyphrase": "lack of sanitization",
            "type": "weakness"
          },
          {
            "id": "weakness:missing capability checks",
            "keyphrase": "missing capability checks",
            "type": "weakness"
          },
          {
            "id": "impact:Remote Code Execution",
            "keyphrase": "Remote Code Execution",
            "type": "impact"
          },
          {
            "id": "impact:execute code",
            "keyphrase": "execute code",
            "type": "impact"
          },
          {
            "id": "attacker:unauthenticated attackers",
            "keyphrase": "unauthenticated attackers",
            "type": "attacker"
          },
          {
            "id": "product:The JS Help Desk - The Ultimate Help Desk & Support Plugin plugin for WordPress",
            "keyphrase": "The JS Help Desk - The Ultimate Help Desk & Support Plugin plugin for WordPress",
            "type": "product"
          },
          {
            "id": "version:all versions up to and including 2.8.6",
            "keyphrase": "all versions up to and including 2.8.6",
            "type": "version"
          },
          {
            "id": "component:storeTheme function",
            "keyphrase": "storeTheme function",
            "type": "component"
          }
        ]
      },
      "similarity": 661.725844278747
    },
    {
      "metadata": {
        "doc_id": "138",
        "name": "Improper Neutralization of Special Elements",
        "source": "sparse",
        "original_content": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.",
        "keyphrase_sources": [
          {
            "id": "rootcause:missing authorization",
            "keyphrase": "missing authorization",
            "type": "rootcause"
          },
          {
            "id": "weakness:PHP Code Injection",
            "keyphrase": "PHP Code Injection",
            "type": "weakness"
          },
          {
            "id": "weakness:lack of sanitization",
            "keyphrase": "lack of sanitization",
            "type": "weakness"
          },
          {
            "id": "weakness:missing capability checks",
            "keyphrase": "missing capability checks",
            "type": "weakness"
          },
          {
            "id": "impact:Remote Code Execution",
            "keyphrase": "Remote Code Execution",
            "type": "impact"
          },
          {
            "id": "impact:execute code",
            "keyphrase": "execute code",
            "type": "impact"
          },
          {
            "id": "attacker:unauthenticated attackers",
            "keyphrase": "unauthenticated attackers",
            "type": "attacker"
          },
          {
            "id": "product:The JS Help Desk - The Ultimate Help Desk & Support Plugin plugin for WordPress",
            "keyphrase": "The JS Help Desk - The Ultimate Help Desk & Support Plugin plugin for WordPress",
            "type": "product"
          },
          {
            "id": "version:all versions up to and including 2.8.6",
            "keyphrase": "all versions up to and including 2.8.6",
            "type": "version"
          },
          {
            "id": "component:storeTheme function",
            "keyphrase": "storeTheme function",
            "type": "component"
          }
        ]
      },
      "similarity": 654.4734476280134
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse",
        "original_content": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
        "keyphrase_sources": [
          {
            "id": "rootcause:missing authorization",
            "keyphrase": "missing authorization",
            "type": "rootcause"
          },
          {
            "id": "weakness:PHP Code Injection",
            "keyphrase": "PHP Code Injection",
            "type": "weakness"
          },
          {
            "id": "weakness:lack of sanitization",
            "keyphrase": "lack of sanitization",
            "type": "weakness"
          },
          {
            "id": "impact:Remote Code Execution",
            "keyphrase": "Remote Code Execution",
            "type": "impact"
          },
          {
            "id": "impact:execute code",
            "keyphrase": "execute code",
            "type": "impact"
          },
          {
            "id": "attacker:unauthenticated attackers",
            "keyphrase": "unauthenticated attackers",
            "type": "attacker"
          },
          {
            "id": "version:all versions up to and including 2.8.6",
            "keyphrase": "all versions up to and including 2.8.6",
            "type": "version"
          },
          {
            "id": "component:storeTheme function",
            "keyphrase": "storeTheme function",
            "type": "component"
          }
        ]
      },
      "similarity": 652.3009915484893
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "source": "sparse",
        "original_content": "The product allows the upload or transfer of dangerous file types that are automatically processed within its environment.",
        "keyphrase_sources": [
          {
            "id": "weakness:lack of sanitization",
            "keyphrase": "lack of sanitization",
            "type": "weakness"
          }
        ]
      },
      "similarity": 628.2908618660013
    },
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "sparse",
        "original_content": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
        "keyphrase_sources": [
          {
            "id": "weakness:PHP Code Injection",
            "keyphrase": "PHP Code Injection",
            "type": "weakness"
          }
        ]
      },
      "similarity": 627.9799602355889
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse",
        "original_content": "The product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check.",
        "keyphrase_sources": [
          {
            "id": "weakness:missing capability checks",
            "keyphrase": "missing capability checks",
            "type": "weakness"
          },
          {
            "id": "product:The JS Help Desk - The Ultimate Help Desk & Support Plugin plugin for WordPress",
            "keyphrase": "The JS Help Desk - The Ultimate Help Desk & Support Plugin plugin for WordPress",
            "type": "product"
          }
        ]
      },
      "similarity": 617.4263062572305
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-89",
      "CWE-94",
      "CWE-862",
      "CWE-79",
      "CWE-352",
      "CWE-74",
      "CWE-184",
      "CWE-434"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {
    "352": [
      {
        "id": "rootcause:missing authorization",
        "keyphrase": "missing authorization",
        "type": "rootcause"
      },
      {
        "id": "weakness:PHP Code Injection",
        "keyphrase": "PHP Code Injection",
        "type": "weakness"
      },
      {
        "id": "weakness:lack of sanitization",
        "keyphrase": "lack of sanitization",
        "type": "weakness"
      },
      {
        "id": "weakness:missing capability checks",
        "keyphrase": "missing capability checks",
        "type": "weakness"
      },
      {
        "id": "impact:Remote Code Execution",
        "keyphrase": "Remote Code Execution",
        "type": "impact"
      },
      {
        "id": "impact:execute code",
        "keyphrase": "execute code",
        "type": "impact"
      },
      {
        "id": "attacker:unauthenticated attackers",
        "keyphrase": "unauthenticated attackers",
        "type": "attacker"
      },
      {
        "id": "product:The JS Help Desk - The Ultimate Help Desk & Support Plugin plugin for WordPress",
        "keyphrase": "The JS Help Desk - The Ultimate Help Desk & Support Plugin plugin for WordPress",
        "type": "product"
      },
      {
        "id": "version:all versions up to and including 2.8.6",
        "keyphrase": "all versions up to and including 2.8.6",
        "type": "version"
      },
      {
        "id": "component:storeTheme function",
        "keyphrase": "storeTheme function",
        "type": "component"
      }
    ],
    "862": [
      {
        "id": "rootcause:missing authorization",
        "keyphrase": "missing authorization",
        "type": "rootcause"
      },
      {
        "id": "weakness:missing capability checks",
        "keyphrase": "missing capability checks",
        "type": "weakness"
      },
      {
        "id": "impact:Remote Code Execution",
        "keyphrase": "Remote Code Execution",
        "type": "impact"
      },
      {
        "id": "impact:execute code",
        "keyphrase": "execute code",
        "type": "impact"
      },
      {
        "id": "attacker:unauthenticated attackers",
        "keyphrase": "unauthenticated attackers",
        "type": "attacker"
      },
      {
        "id": "product:The JS Help Desk - The Ultimate Help Desk & Support Plugin plugin for WordPress",
        "keyphrase": "The JS Help Desk - The Ultimate Help Desk & Support Plugin plugin for WordPress",
        "type": "product"
      },
      {
        "id": "version:all versions up to and including 2.8.6",
        "keyphrase": "all versions up to and including 2.8.6",
        "type": "version"
      },
      {
        "id": "component:storeTheme function",
        "keyphrase": "storeTheme function",
        "type": "component"
      }
    ],
    "116": [
      {
        "id": "rootcause:missing authorization",
        "keyphrase": "missing authorization",
        "type": "rootcause"
      },
      {
        "id": "weakness:PHP Code Injection",
        "keyphrase": "PHP Code Injection",
        "type": "weakness"
      },
      {
        "id": "weakness:lack of sanitization",
        "keyphrase": "lack of sanitization",
        "type": "weakness"
      },
      {
        "id": "weakness:missing capability checks",
        "keyphrase": "missing capability checks",
        "type": "weakness"
      },
      {
        "id": "impact:Remote Code Execution",
        "keyphrase": "Remote Code Execution",
        "type": "impact"
      },
      {
        "id": "impact:execute code",
        "keyphrase": "execute code",
        "type": "impact"
      },
      {
        "id": "attacker:unauthenticated attackers",
        "keyphrase": "unauthenticated attackers",
        "type": "attacker"
      },
      {
        "id": "product:The JS Help Desk - The Ultimate Help Desk & Support Plugin plugin for WordPress",
        "keyphrase": "The JS Help Desk - The Ultimate Help Desk & Support Plugin plugin for WordPress",
        "type": "product"
      },
      {
        "id": "version:all versions up to and including 2.8.6",
        "keyphrase": "all versions up to and including 2.8.6",
        "type": "version"
      },
      {
        "id": "component:storeTheme function",
        "keyphrase": "storeTheme function",
        "type": "component"
      }
    ],
    "138": [
      {
        "id": "rootcause:missing authorization",
        "keyphrase": "missing authorization",
        "type": "rootcause"
      },
      {
        "id": "weakness:PHP Code Injection",
        "keyphrase": "PHP Code Injection",
        "type": "weakness"
      },
      {
        "id": "weakness:lack of sanitization",
        "keyphrase": "lack of sanitization",
        "type": "weakness"
      },
      {
        "id": "weakness:missing capability checks",
        "keyphrase": "missing capability checks",
        "type": "weakness"
      },
      {
        "id": "impact:Remote Code Execution",
        "keyphrase": "Remote Code Execution",
        "type": "impact"
      },
      {
        "id": "impact:execute code",
        "keyphrase": "execute code",
        "type": "impact"
      },
      {
        "id": "attacker:unauthenticated attackers",
        "keyphrase": "unauthenticated attackers",
        "type": "attacker"
      },
      {
        "id": "product:The JS Help Desk - The Ultimate Help Desk & Support Plugin plugin for WordPress",
        "keyphrase": "The JS Help Desk - The Ultimate Help Desk & Support Plugin plugin for WordPress",
        "type": "product"
      },
      {
        "id": "version:all versions up to and including 2.8.6",
        "keyphrase": "all versions up to and including 2.8.6",
        "type": "version"
      },
      {
        "id": "component:storeTheme function",
        "keyphrase": "storeTheme function",
        "type": "component"
      }
    ],
    "79": [
      {
        "id": "rootcause:missing authorization",
        "keyphrase": "missing authorization",
        "type": "rootcause"
      },
      {
        "id": "weakness:PHP Code Injection",
        "keyphrase": "PHP Code Injection",
        "type": "weakness"
      },
      {
        "id": "weakness:lack of sanitization",
        "keyphrase": "lack of sanitization",
        "type": "weakness"
      },
      {
        "id": "impact:Remote Code Execution",
        "keyphrase": "Remote Code Execution",
        "type": "impact"
      },
      {
        "id": "impact:execute code",
        "keyphrase": "execute code",
        "type": "impact"
      },
      {
        "id": "attacker:unauthenticated attackers",
        "keyphrase": "unauthenticated attackers",
        "type": "attacker"
      },
      {
        "id": "version:all versions up to and including 2.8.6",
        "keyphrase": "all versions up to and including 2.8.6",
        "type": "version"
      },
      {
        "id": "component:storeTheme function",
        "keyphrase": "storeTheme function",
        "type": "component"
      }
    ],
    "89": [
      {
        "id": "weakness:PHP Code Injection",
        "keyphrase": "PHP Code Injection",
        "type": "weakness"
      }
    ],
    "434": [
      {
        "id": "weakness:lack of sanitization",
        "keyphrase": "lack of sanitization",
        "type": "weakness"
      }
    ],
    "863": [
      {
        "id": "weakness:missing capability checks",
        "keyphrase": "missing capability checks",
        "type": "weakness"
      },
      {
        "id": "product:The JS Help Desk - The Ultimate Help Desk & Support Plugin plugin for WordPress",
        "keyphrase": "The JS Help Desk - The Ultimate Help Desk & Support Plugin plugin for WordPress",
        "type": "product"
      }
    ]
  }
}