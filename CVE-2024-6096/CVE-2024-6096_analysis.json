{
  "cve_id": "CVE-2024-6096",
  "description": "In Progress Telerik Reporting versions prior to 18.1.24.709, a code execution attack is possible through object injection via an **insecure type resolution** vulnerability.",
  "key_phrases": {
    "rootcause": "insecure type resolution",
    "weakness": "",
    "impact": [
      "code execution",
      "object injection"
    ],
    "vector": "",
    "attacker": "",
    "product": "Progress Telerik Reporting",
    "version": "prior to 18.1.24.709",
    "component": ""
  },
  "reference_content": "Based on the provided document, here's a breakdown of the vulnerability information:\n\n**CVE ID:** CVE-2024-6096\n\n**Root Cause:**\n* The vulnerability stems from an insecure type resolution within Telerik Reporting. This allows for object injection attacks.\n\n**Weaknesses/Vulnerabilities:**\n* **Object Injection:**  The core weakness is that the application is vulnerable to object injection due to insecure type resolution. This means that an attacker can inject malicious code by manipulating the type resolution mechanism.\n\n**Impact of Exploitation:**\n* The provided document does not specify the exact impact, but object injection vulnerabilities can potentially lead to a variety of severe outcomes. These could include:\n    * **Remote Code Execution (RCE):** An attacker could potentially execute arbitrary code on the server.\n    * **Denial of Service (DoS):** The injected code could be crafted to crash or significantly impair the functionality of the Telerik Reporting service.\n    * **Data Exfiltration:** It may be possible to extract sensitive data by exploiting the ability to control object instantiation.\n    * **Privilege Escalation:** In some cases, object injection can lead to the ability to gain higher access permissions.\n\n**Attack Vectors:**\n* The vulnerability can be exploited by manipulating the type resolution process in a way that injects malicious code. The exact mechanism is not detailed in the document, but it implies that the attacker can influence how objects are created.\n\n**Required Attacker Capabilities/Position:**\n* The attacker needs to be able to influence the type resolution process within Telerik Reporting. This likely involves sending malicious input to the application, but the document lacks specific details.\n\n**Additional Information:**\n* The vulnerability affects Telerik Reporting versions prior to 18.1.24.709.\n* The vulnerability has been assigned a CVSS score of 8.8, indicating a high severity.\n* The vulnerability was discovered by Markus Wulftange with CODE WHITE GmbH.\n* The vendor recommends upgrading to version 18.1.24.709 or later to remediate the vulnerability.\n* The vendor provides instructions on how to check the current Telerik Reporting version.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-502 | Deserialization of Untrusted Data | 0.9 | Base | Allowed | Primary CWE |\n| CWE-94 | Improper Control of Generation of Code ('Code Injection') | 0.6 | Base | Allowed-with-Review | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-502, which describes deserialization of untrusted data without proper validation. This can lead to code injection (CWE-94) if the deserialized data is then used to generate code. CWE-502 is a Base level CWE, and CWE-94 is also a Base level CWE. CWE-94 is a parent of CWE-95 (Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')) and CWE-96 (Improper Neutralization of Special Elements Used in Dynamically-Generated Code ('Dynamic Code Evaluation')). This parent-child relationship shows how code injection can occur through various mechanisms. The relationship between CWE-502 and CWE-94 indicates a potential vulnerability chain where deserialization of untrusted data leads to code injection.\n\n```mermaid\ngraph TD\n    cwe502[\"CWE-502: Deserialization of Untrusted Data\"]\n    cwe94[\"CWE-94: Improper Control of Generation of Code ('Code Injection')\"]\n    cwe95[\"CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\"]\n\n    cwe94 -->|PARENTOF| cwe95\n    cwe502 -->|CANPRECEDE| cwe94\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe502 primary\n    class cwe94 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the deserialization of untrusted data (CWE-502). Due to **insecure type resolution**, this leads to object injection, and subsequently to code execution. Therefore, the chain is: CWE-502 -> Object Injection -> Code Execution.\n\n## Summary of Analysis\nThe primary weakness is the **insecure type resolution** leading to object injection. Based on the evidence, the most appropriate CWE is CWE-502 (Deserialization of Untrusted Data). The CVE description states \"a code execution attack is possible through object injection via an **insecure type resolution** vulnerability.\" The **CVE Reference Links Content Summary** elaborates that \"The vulnerability stems from an insecure type resolution within Telerik Reporting. This allows for object injection attacks\" and highlights \"The core weakness is that the application is vulnerable to object injection due to **insecure type resolution**.\" This is a strong indication that untrusted data is being deserialized without proper validation, making CWE-502 the most relevant. While the vulnerability leads to code execution, the root cause is the deserialization process. CWE-94 (Improper Control of Generation of Code ('Code Injection')) is a potential secondary CWE, as it describes the consequence of the **insecure type resolution**. The Retriever Results also lists CWE-502 as the top candidate. I'm not fully confident in CWE-94 being a secondary CWE since the vulnerability description is specific about the Object Injection.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n*Explanation:* This CWE is too high-level and doesn't directly address the root cause of **insecure type resolution** during deserialization.\n\n## CWE-668: Exposure of Resource to Wrong Sphere\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-668 is high-level and is often misused as a catch-all when lower-level CWE IDs might be applicable. It is sometimes used for low-information vulnerability reports [REF-1287]. It is a level-1 Class (i.e., a child of a Pillar). It is not useful for trend analysis.\n\n*Explanation:* This CWE is too general and doesn't specifically describe the deserialization issue.\n\n## CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the product does.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Explanation:* This CWE is not relevant as the vulnerability is related to object injection and code execution, not information exposure.\n\n## CWE-917: Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of an expression language (EL) statement in a framework such as a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Explanation:* While related to injection, this CWE is specific to Expression Language, which is not mentioned in the vulnerability description.\n\n## CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\n**Abstraction Level**: Variant\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. \"eval\").\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Explanation:* This is more specific than CWE-94, but the **insecure type resolution** isn't specific to dynamic evaluation calls like 'eval'.\n\n## CWE-610: Externally Controlled Reference to a Resource in Another Sphere\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product uses an externally controlled name or reference that resolves to a resource that is outside of the intended control sphere.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n*Explanation:* While related to external control, it's not specific to deserialization or object injection.\n\n## CWE-472: External Control of Assumed-Immutable Web Parameter\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Explanation:* This is not related to deserialization or object injection.\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*Explanation:* This is not relevant as it is about output encoding, not deserialization.\n\n## CWE-13",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-502 | Deserialization of Untrusted Data | 0.9 | Base | Allowed | Primary CWE |\n| CWE-94 | Improper Control of Generation of Code ('Code Injection') | 0.6 | Base | Allowed-with-Review | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-502, which describes deserialization of untrusted data without proper validation. This can lead to code injection (CWE-94) if the deserialized data is then used to generate code. CWE-502 is a Base level CWE, and CWE-94 is also a Base level CWE. CWE-94 is a parent of CWE-95 (Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')) and CWE-96 (Improper Neutralization of Special Elements Used in Dynamically-Generated Code ('Dynamic Code Evaluation')). This parent-child relationship shows how code injection can occur through various mechanisms. The relationship between CWE-502 and CWE-94 indicates a potential vulnerability chain where deserialization of untrusted data leads to code injection.\n\n```mermaid\ngraph TD\n    cwe502[\"CWE-502: Deserialization of Untrusted Data\"]\n    cwe94[\"CWE-94: Improper Control of Generation of Code ('Code Injection')\"]\n    cwe95[\"CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\"]\n\n    cwe94 -->|PARENTOF| cwe95\n    cwe502 -->|CANPRECEDE| cwe94\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe502 primary\n    class cwe94 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the deserialization of untrusted data (CWE-502). Due to **insecure type resolution**, this leads to object injection, and subsequently to code execution. Therefore, the chain is: CWE-502 -> Object Injection -> Code Execution.\n\n## Summary of Analysis\nThe primary weakness is the **insecure type resolution** leading to object injection. Based on the evidence, the most appropriate CWE is CWE-502 (Deserialization of Untrusted Data). The CVE description states \"a code execution attack is possible through object injection via an **insecure type resolution** vulnerability.\" The **CVE Reference Links Content Summary** elaborates that \"The vulnerability stems from an insecure type resolution within Telerik Reporting. This allows for object injection attacks\" and highlights \"The core weakness is that the application is vulnerable to object injection due to **insecure type resolution**.\" This is a strong indication that untrusted data is being deserialized without proper validation, making CWE-502 the most relevant. While the vulnerability leads to code execution, the root cause is the deserialization process. CWE-94 (Improper Control of Generation of Code ('Code Injection')) is a potential secondary CWE, as it describes the consequence of the **insecure type resolution**. The Retriever Results also lists CWE-502 as the top candidate. I'm not fully confident in CWE-94 being a secondary CWE since the vulnerability description is specific about the Object Injection.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n*Explanation:* This CWE is too high-level and doesn't directly address the root cause of **insecure type resolution** during deserialization.\n\n## CWE-668: Exposure of Resource to Wrong Sphere\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-668 is high-level and is often misused as a catch-all when lower-level CWE IDs might be applicable. It is sometimes used for low-information vulnerability reports [REF-1287]. It is a level-1 Class (i.e., a child of a Pillar). It is not useful for trend analysis.\n\n*Explanation:* This CWE is too general and doesn't specifically describe the deserialization issue.\n\n## CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the product does.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Explanation:* This CWE is not relevant as the vulnerability is related to object injection and code execution, not information exposure.\n\n## CWE-917: Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of an expression language (EL) statement in a framework such as a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Explanation:* While related to injection, this CWE is specific to Expression Language, which is not mentioned in the vulnerability description.\n\n## CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\n**Abstraction Level**: Variant\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. \"eval\").\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Explanation:* This is more specific than CWE-94, but the **insecure type resolution** isn't specific to dynamic evaluation calls like 'eval'.\n\n## CWE-610: Externally Controlled Reference to a Resource in Another Sphere\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product uses an externally controlled name or reference that resolves to a resource that is outside of the intended control sphere.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n*Explanation:* While related to external control, it's not specific to deserialization or object injection.\n\n## CWE-472: External Control of Assumed-Immutable Web Parameter\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Explanation:* This is not related to deserialization or object injection.\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*Explanation:* This is not relevant as it is about output encoding, not deserialization.\n\n## CWE-13\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-502:**\n- 502 (Deserialization of Untrusted Data) - ROOT\n\n\n**Chain starting from CWE-94:**\n- 94 (Improper Control of Generation of Code ('Code Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "502",
        "name": "Deserialization of Untrusted Data",
        "source": "sparse"
      },
      "similarity": 126.86353929329715
    },
    {
      "metadata": {
        "doc_id": "639",
        "name": "Authorization Bypass Through User-Controlled Key",
        "source": "sparse"
      },
      "similarity": 124.00337908321708
    },
    {
      "metadata": {
        "doc_id": "345",
        "name": "Insufficient Verification of Data Authenticity",
        "source": "sparse"
      },
      "similarity": 123.67623506133967
    },
    {
      "metadata": {
        "doc_id": "1336",
        "name": "Improper Neutralization of Special Elements Used in a Template Engine",
        "source": "sparse"
      },
      "similarity": 121.06472132034375
    },
    {
      "metadata": {
        "doc_id": "99",
        "name": "Improper Control of Resource Identifiers ('Resource Injection')",
        "source": "sparse"
      },
      "similarity": 118.83595110547404
    },
    {
      "metadata": {
        "doc_id": "703",
        "name": "Improper Check or Handling of Exceptional Conditions",
        "source": "sparse"
      },
      "similarity": 118.4520321061781
    },
    {
      "metadata": {
        "doc_id": "94",
        "name": "Improper Control of Generation of Code ('Code Injection')",
        "source": "sparse"
      },
      "similarity": 118.05884753488706
    },
    {
      "metadata": {
        "doc_id": "88",
        "name": "Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
        "source": "sparse"
      },
      "similarity": 117.41898233283518
    },
    {
      "metadata": {
        "doc_id": "917",
        "name": "Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')",
        "type": "Base",
        "original_content": "The product constructs all or part of an expression language (EL) statement in a framework such as a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed.",
        "keyphrase_source": "rootcause:insecure type resolution",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse",
            "graph"
          ],
          "retriever_count": 3,
          "normalized_scores": {
            "dense": 0.5128678425348567,
            "sparse": 37.030409848841984,
            "graph": 2.4201504463121353
          }
        }
      },
      "similarity": 0.5128678425348567
    },
    {
      "doc_id": "73",
      "text": "CWE-73: External Control of File Name or Path",
      "score": 2.4700000000000006,
      "metadata": {
        "doc_id": "73",
        "name": "External Control of File Name or Path",
        "type": "base",
        "original_content": "CWE-73: External Control of File Name or Path",
        "relationships": [
          {
            "source_id": "73",
            "target_id": "114",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "59",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "434",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "41",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "22",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "20",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "700"
            }
          },
          {
            "source_id": "73",
            "target_id": "610",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "642",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "99",
            "target_id": "73",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "642",
            "target_id": "73",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "610",
            "target_id": "73",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "59",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "41",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "22",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "20",
            "target_id": "73",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "700"
            }
          },
          {
            "source_id": "114",
            "target_id": "73",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 0.8,
          "sequence_path": 0.8,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "94",
                  "98",
                  "CANFOLLOW"
                ],
                [
                  "98",
                  "73",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.8,
              "type": "relationship_chain",
              "source": "94"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "94",
                  "98",
                  "CANFOLLOW"
                ],
                [
                  "98",
                  "73",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "vulnerability_sequence_forward",
              "source": "94"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "98",
                  "94",
                  "CANPRECEDE"
                ],
                [
                  "73",
                  "98",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "vulnerability_sequence_backward",
              "source": "94"
            },
            "peer_relationship": {
              "path": [
                [
                  "99",
                  "73",
                  "CANALSOBE"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "99"
            }
          }
        },
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.4700000000000006
          }
        }
      },
      "similarity": 2.4700000000000006
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-502",
      "CWE-94",
      "CWE-610",
      "CWE-116",
      "CWE-917",
      "CWE-472",
      "CWE-95",
      "CWE-13",
      "CWE-74",
      "CWE-668",
      "CWE-96",
      "CWE-497"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}