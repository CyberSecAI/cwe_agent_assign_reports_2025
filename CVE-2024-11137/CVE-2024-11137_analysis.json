{
  "cve_id": "CVE-2024-11137",
  "description": "An Insecure Direct Object Reference (IDOR) vulnerability exists in the `PATCH /v1/runs/id/score` endpoint of lunary-ai/lunary version 1.6.0. This vulnerability allows an attacker to update the score data of any run by manipulating the id parameter in the request URL, which corresponds to the `runId_score` in the database. The endpoint does not sufficiently validate whether the authenticated user has permission to modify the specified runId, enabling an attacker with a valid account to modify other users runId scores by specifying different id values. This issue was fixed in version 1.6.1.",
  "key_phrases": {
    "component": "/v1/runs/id/score endpoint",
    "rootcause": "insecure direct object reference",
    "vector": "",
    "weakness": "",
    "product": "lunary-ai/lunary",
    "impact": "modify other users runId scores, update the score data of any run",
    "attacker": "authenticated attacker",
    "version": "1.6.0"
  },
  "reference_content": "Based on the provided content, this relates to CVE-2024-11137.\n\n**Root cause of vulnerability:**\nThe commit message \"fix: security patch (#651)\" indicates a security issue was addressed. The diff shows the addition of `checkProjectAccess` to verify user access to a project before allowing updates to run scores. This suggests a potential authorization bypass vulnerability existed where users could modify run scores for projects they shouldn't have access to.\n\n**Weaknesses/vulnerabilities present:**\n- Authorization bypass: Users could potentially modify run scores for projects they were not authorized to access.\n\n**Impact of exploitation:**\n- Unauthorized modification of data: An attacker could modify run scores, potentially impacting the integrity of the system or misleading analysis.\n\n**Attack vectors:**\n- API endpoint manipulation: Exploiting the lack of proper project access checks in the `runs.patch` endpoint.\n\n**Required attacker capabilities/position:**\n- Authenticated user: The attacker needs to be an authenticated user of the application.\n- Knowledge of API: The attacker needs to understand how to interact with the API endpoint.\n\n**Mitigation or fix:**\n- Added `checkProjectAccess` to the `runs.patch` endpoint to verify user access to the project before allowing updates to run scores.\n- The code now checks if the user has access to the project (`hasProjectAccess`) before allowing the update operation. If access is denied, a 401 Unauthorized error is returned.\n\nThe content provides more detail than the official CVE description would likely contain, specifically showing the code changes made to address the vulnerability.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-639 | Authorization Bypass Through User-Controlled Key | 0.9 | Base | Allowed | Primary CWE. The application's authorization **fails to prevent** a user from accessing another user's data by modifying the key identifying the data. |\n| CWE-863 | Incorrect Authorization | 0.7 | Class | Allowed-with-Review | Secondary candidate. The application performs an authorization check, but it is **incorrect**, allowing unauthorized access. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-639, which is a Base level CWE and a child of CWE-863. The application **fails to properly authorize** based on a user-controlled key, which directly aligns with CWE-639. CWE-863 is a Class-level CWE and represents a more general **incorrect authorization**.\n\n```mermaid\ngraph TD\n    cwe639[\"CWE-639: Authorization Bypass Through User-Controlled Key\"]\n    cwe863[\"CWE-863: Incorrect Authorization\"]\n    \n    cwe639 -->|CHILDOF| cwe863\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe639 primary\n    class cwe863 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **insecure direct object reference**, which leads to an **authorization bypass** because the application **fails to validate** whether the authenticated user has permission to modify the specified runId. This allows an attacker to **modify other users' runId scores**.\n  - **Root Cause:** CWE-639 Authorization Bypass Through User-Controlled Key\n  - **Weakness:** Insecure Direct Object Reference\n  - **Impact:** Modification of other users' data\n\n## Summary of Analysis\nBased on the provided evidence, the primary vulnerability is CWE-639, **Authorization Bypass Through User-Controlled Key**. The vulnerability description clearly states that an attacker can modify the `id` parameter in the request URL to update the score data of any run. The application **fails to sufficiently validate** whether the authenticated user has permission to modify the specified `runId`, which corresponds to the root cause weakness described by CWE-639 which is that \"The system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.\"\n\nThe CWEs considered, but not chosen:\n\n*   **CWE-99: Improper Control of Resource Identifiers ('Resource Injection')** - While an IDOR vulnerability involves improper control of resource identifiers, CWE-639 is more specific to the authorization bypass that occurs due to this improper control.\n*   **CWE-306: Missing Authentication for Critical Function** - This is not the root cause because authentication is present. The issue is with authorization after authentication.\n*   **CWE-862: Missing Authorization** - Authorization is present but incorrect, making CWE-863 a better fit as a secondary issue.\n*   **CWE-285: Improper Authorization** - While this is similar to CWE-863, CWE-863 is preferred, though both are class-level.\n*   **CWE-668: Exposure of Resource to Wrong Sphere** - Too general, and a Class level CWE.\n*   **CWE-732: Incorrect Permission Assignment for Critical Resource** - While related, the core issue is not the assignment of permissions but the **failure to properly authorize** access based on the provided key.\n*   **CWE-918: Server-Side Request Forgery (SSRF)** - Not relevant as the vulnerability does not involve the server making requests on behalf of the user.\n*   **CWE-612: Improper Authorization of Index Containing Sensitive Information** - Not relevant as the vulnerability is not specifically related to an index.\n\nThe final selection of CWE-639 and CWE-863 is based on the specific details of the vulnerability description and the relationship between these CWEs. CWE-639 accurately captures the root cause, while CWE-863 represents the broader issue of incorrect authorization.",
  "analysis_with_relationships": "# Summary\n\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-639 | Authorization Bypass Through User-Controlled Key | 0.9 | Base | Allowed | Primary CWE. The application's authorization **fails to prevent** a user from accessing another user's data by modifying the key identifying the data. |\n| CWE-863 | Incorrect Authorization | 0.7 | Class | Allowed-with-Review | Secondary candidate. The application performs an authorization check, but it is **incorrect**, allowing unauthorized access. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-639, which is a Base level CWE and a child of CWE-863. The application **fails to properly authorize** based on a user-controlled key, which directly aligns with CWE-639. CWE-863 is a Class-level CWE and represents a more general **incorrect authorization**.\n\n```mermaid\ngraph TD\n    cwe639[\"CWE-639: Authorization Bypass Through User-Controlled Key\"]\n    cwe863[\"CWE-863: Incorrect Authorization\"]\n    \n    cwe639 -->|CHILDOF| cwe863\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe639 primary\n    class cwe863 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **insecure direct object reference**, which leads to an **authorization bypass** because the application **fails to validate** whether the authenticated user has permission to modify the specified runId. This allows an attacker to **modify other users' runId scores**.\n  - **Root Cause:** CWE-639 Authorization Bypass Through User-Controlled Key\n  - **Weakness:** Insecure Direct Object Reference\n  - **Impact:** Modification of other users' data\n\n## Summary of Analysis\nBased on the provided evidence, the primary vulnerability is CWE-639, **Authorization Bypass Through User-Controlled Key**. The vulnerability description clearly states that an attacker can modify the `id` parameter in the request URL to update the score data of any run. The application **fails to sufficiently validate** whether the authenticated user has permission to modify the specified `runId`, which corresponds to the root cause weakness described by CWE-639 which is that \"The system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.\"\n\nThe CWEs considered, but not chosen:\n\n*   **CWE-99: Improper Control of Resource Identifiers ('Resource Injection')** - While an IDOR vulnerability involves improper control of resource identifiers, CWE-639 is more specific to the authorization bypass that occurs due to this improper control.\n*   **CWE-306: Missing Authentication for Critical Function** - This is not the root cause because authentication is present. The issue is with authorization after authentication.\n*   **CWE-862: Missing Authorization** - Authorization is present but incorrect, making CWE-863 a better fit as a secondary issue.\n*   **CWE-285: Improper Authorization** - While this is similar to CWE-863, CWE-863 is preferred, though both are class-level.\n*   **CWE-668: Exposure of Resource to Wrong Sphere** - Too general, and a Class level CWE.\n*   **CWE-732: Incorrect Permission Assignment for Critical Resource** - While related, the core issue is not the assignment of permissions but the **failure to properly authorize** access based on the provided key.\n*   **CWE-918: Server-Side Request Forgery (SSRF)** - Not relevant as the vulnerability does not involve the server making requests on behalf of the user.\n*   **CWE-612: Improper Authorization of Index Containing Sensitive Information** - Not relevant as the vulnerability is not specifically related to an index.\n\nThe final selection of CWE-639 and CWE-863 is based on the specific details of the vulnerability description and the relationship between these CWEs. CWE-639 accurately captures the root cause, while CWE-863 represents the broader issue of incorrect authorization.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-863:**\n- 863 (Incorrect Authorization) - ROOT\n\n\n**Chain starting from CWE-99:**\n- 99 (Improper Control of Resource Identifiers ('Resource Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "639",
        "name": "Authorization Bypass Through User-Controlled Key",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Insecure Direct Object Reference / IDOR",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "99",
        "name": "Improper Control of Resource Identifiers ('Resource Injection')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Insecure Direct Object Reference",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "306",
        "name": "Missing Authentication for Critical Function",
        "source": "sparse"
      },
      "similarity": 545.9863371827377
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 541.9714518947665
    },
    {
      "metadata": {
        "doc_id": "862",
        "name": "Missing Authorization",
        "source": "sparse"
      },
      "similarity": 538.3619798357897
    },
    {
      "metadata": {
        "doc_id": "285",
        "name": "Improper Authorization",
        "source": "sparse"
      },
      "similarity": 526.5430080208705
    },
    {
      "metadata": {
        "doc_id": "668",
        "name": "Exposure of Resource to Wrong Sphere",
        "source": "sparse"
      },
      "similarity": 523.6741884140744
    },
    {
      "metadata": {
        "doc_id": "732",
        "name": "Incorrect Permission Assignment for Critical Resource",
        "source": "sparse"
      },
      "similarity": 521.876972330502
    },
    {
      "metadata": {
        "doc_id": "918",
        "name": "Server-Side Request Forgery (SSRF)",
        "type": "Base",
        "original_content": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
        "keyphrase_source": "rootcause:insecure direct object reference",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.47730147480647994,
            "graph": 1.6029796899513846
          }
        }
      },
      "similarity": 0.47730147480647994
    },
    {
      "doc_id": "612",
      "text": "The product creates a search index of private or sensitive documents, but it does not properly limit index access to actors who are authorized to see the original information.",
      "score": 0.5121856786031463,
      "metadata": {
        "doc_id": "612",
        "name": "Improper Authorization of Index Containing Sensitive Information",
        "type": "Base",
        "extended_description": "Web sites and other document repositories may apply an indexing routine against a group of private documents to facilitate search. If the index's results are available to parties who do not have access to the documents being indexed, then attackers could obtain portions of the documents by conducting targeted searches and reading the results. The risk is especially dangerous if search results include surrounding text that was not part of the search query. This issue can appear in search engines that are not configured (or implemented) to ignore critical files that should remain hidden; even without permissions to download these files directly, the remote user could read them.",
        "alternate_terms": [],
        "original_content": "The product creates a search index of private or sensitive documents, but it does not properly limit index access to actors who are authorized to see the original information.",
        "relationships": [
          {
            "source_id": "612",
            "target_id": "1230",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1230",
            "target_id": "612",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "source": "graph",
        "sources": [
          "vector",
          "graph"
        ],
        "vector_score": 0.5121856786031463,
        "graph_score": 2.3295999999999997,
        "score_components": {
          "relationship_chain": 0.18,
          "explicit_mention": 1.0,
          "abstraction_path": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "863",
                  "285",
                  "CHILDOF"
                ],
                [
                  "285",
                  "1230",
                  "PARENTOF"
                ],
                [
                  "1230",
                  "612",
                  "PARENTOF"
                ]
              ],
              "score": 0.18,
              "type": "relationship_chain",
              "source": "863"
            }
          }
        },
        "is_explicit": true,
        "abstraction_level": "base",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.4723593810983049,
            "graph": 1.6026342714412583
          }
        }
      },
      "similarity": 1.6026342714412583
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-863",
      "CWE-99",
      "CWE-732",
      "CWE-862",
      "CWE-639",
      "CWE-306",
      "CWE-285",
      "CWE-668",
      "CWE-918",
      "CWE-612"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}