{
  "method": "sparse_rootcause_2",
  "query": "In the Linux kernel, the following vulnerability has been resolved KVM Use dedicated mutex to protect kvm_usage_count to avoid deadlock Use a dedicated mutex to guard kvm_usage_count to fix a potential deadlock on x86 due to a chain of locks and SRCU synchronizations. Translating the below lockdep splat, CPU1 #6 will wait on CPU0 #1, CPU0 #8 will wait on CPU2 #3, and CPU2 #7 will wait on CPU1 #4 (if theres a writer, due to the fairness of r/w semaphores). CPU0 CPU1 CPU2 1 lock(&kvm->slots_lock) 2 lock(&vcpu->mutex) 3 lock(&kvm->srcu) 4 lock(cpu_hotplug_lock) 5 lock(kvm_lock) 6 lock(&kvm->slots_lock) 7 lock(cpu_hotplug_lock) 8 sync(&kvm->srcu) Note, there are likely more potential deadlocks in KVM x86, e.g. the same pattern of taking cpu_hotplug_lock outside of kvm_lock likely exists with __kvmclock_cpufreq_notifier() cpuhp_cpufreq_online() | -> cpufreq_online() | -> cpufreq_gov_performance_limits() | -> __cpufreq_driver_target() | -> __target_index() | -> cpufreq_freq_transition_begin() | -> cpufreq_notify_transition() | -> .",
  "keyphrases": {
    "rootcause": "SRCU synchronizations"
  },
  "timestamp": "2025-07-12T05:00:23.809431",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "667",
      "name": "Improper Locking",
      "score": 675.4298334291499
    },
    {
      "doc_id": "833",
      "name": "Deadlock",
      "score": 566.5473895633604
    },
    {
      "doc_id": "412",
      "name": "Unrestricted Externally Accessible Lock",
      "score": 541.9038184469008
    },
    {
      "doc_id": "765",
      "name": "Multiple Unlocks of a Critical Resource",
      "score": 540.1528080869821
    },
    {
      "doc_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 532.2698010790057
    }
  ]
}