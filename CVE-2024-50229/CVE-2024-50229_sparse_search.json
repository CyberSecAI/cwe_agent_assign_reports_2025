{
  "retriever": "sparse",
  "query": "In the Linux kernel, the following vulnerability has been resolved nilfs2 fix potential deadlock with newly created symlinks Syzbot reported that page_symlink(), called by nilfs_symlink(), triggers memory reclamation involving the filesystem layer, which can result in circular lock dependencies among the reader/writer semaphore nilfs->ns_segctor_sem, s_writers percpu_rwsem (intwrite) and the fs_reclaim pseudo lock. This is because after commit 21fc61c73c39 (dont put symlink bodies in pagecache into highmem), the gfp flags of the page cache for symbolic links are overwritten to GFP_KERNEL via inode_nohighmem(). This is not a problem for symlinks read from the backing device, because the __GFP_FS flag is dropped after inode_nohighmem() is called. However, when a new symlink is created with nilfs_symlink(), the gfp flags remain overwritten to GFP_KERNEL. Then, memory allocation called from page_symlink() etc. triggers memory reclamation including the FS layer, which may call nilfs_evict_inode() or nilfs_dirty_inode(). And these can cause a deadlock if they are called while nilfs->ns_segctor_sem is held Fix this issue by dropping the __GFP_FS flag from the page cache GFP flags of newly created symlinks in the same way that nilfs_new_inode() and __nilfs_read_inode() do, as a workaround until we adopt nofs allocation scope consistently or improve the locking constraints.",
  "keyphrases": {
    "rootcause": [
      "circular lock dependencies among the reader",
      "writer semaphore nilfs->ns_segctor_sem",
      "s_writers percpu_rwsem (intwrite)",
      "the fs_reclaim pseudo lock"
    ]
  },
  "timestamp": "2025-07-12 05:29:30",
  "cve_id": "CVE-2024-50229",
  "result_count": 11,
  "results": [
    {
      "cwe_id": "59",
      "name": "Improper Link Resolution Before File Access ('Link Following')",
      "score": 991.0916909521753,
      "search_source": "rootcause:circular lock dependencies among the reader"
    },
    {
      "cwe_id": "61",
      "name": "UNIX Symbolic Link (Symlink) Following",
      "score": 956.4125383251281,
      "search_source": "rootcause:circular lock dependencies among the reader"
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "score": 933.8706589734472,
      "search_source": "rootcause:circular lock dependencies among the reader"
    },
    {
      "cwe_id": "833",
      "name": "Deadlock",
      "score": 918.7111497670177,
      "search_source": "rootcause:circular lock dependencies among the reader"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 912.7459492516999,
      "search_source": "rootcause:circular lock dependencies among the reader"
    },
    {
      "cwe_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "score": 882.4893628242405,
      "search_source": "rootcause:circular lock dependencies among the reader"
    },
    {
      "cwe_id": "88",
      "name": "Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
      "score": 855.9484452655364,
      "search_source": "rootcause:circular lock dependencies among the reader"
    },
    {
      "cwe_id": "401",
      "name": "Missing Release of Memory after Effective Lifetime",
      "score": 854.1829399214739,
      "search_source": "rootcause:circular lock dependencies among the reader"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 853.9187318033969,
      "search_source": "rootcause:circular lock dependencies among the reader"
    },
    {
      "cwe_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "score": 837.9551971838193,
      "search_source": "rootcause:circular lock dependencies among the reader"
    },
    {
      "cwe_id": "415",
      "name": "Double Free",
      "score": 822.7928016478162,
      "search_source": "rootcause:writer semaphore nilfs->ns_segctor_sem"
    }
  ]
}