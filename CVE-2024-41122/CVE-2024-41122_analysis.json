{
  "cve_id": "CVE-2024-41122",
  "description": "Woodpecker is a simple yet powerful CI/CD engine with great extensibility. The server allow to create any user who can trigger a pipeline run malicious workflows 1. Those workflows can either lead to a host takeover that runs the agent executing the workflow. 2. Or allow to extract the secrets who would be normally provided to the plugins whos entrypoint are overwritten. This issue has been addressed in release version 2.7.0. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "",
    "impact": [
      "host takeover",
      "extract secrets"
    ],
    "vector": "malicious workflows",
    "attacker": "any user who can trigger a pipeline run",
    "product": "Woodpecker CI/CD engine",
    "version": "before 2.7.0",
    "component": ""
  },
  "reference_content": "Based on the provided content, here's an analysis of CVE-2024-41122:\n\n**Root Cause of Vulnerability:**\n\nThe vulnerability stems from the ability to inject arbitrary environment variables into plugin executions within the Woodpecker CI system. Specifically, the lack of sanitization or filtering of environment variables provided to plugins allowed attackers to potentially overwrite environment variables that could alter the execution flow of plugins.\n\n**Weaknesses/Vulnerabilities Present:**\n\n- **Unrestricted Environment Variable Injection:** The core weakness is that Woodpecker CI allowed users to set arbitrary environment variables that were passed directly to plugin executions. This permitted the use of \"dangerous\" environment variables like `LD_PRELOAD` or `PATH` which influence how binaries and libraries are loaded and executed.\n- **Escalated Plugin Context:** The vulnerability is particularly dangerous within the context of escalated plugins, which have higher privileges than standard plugins. This means that an attacker could leverage environment variable injection to execute malicious code with elevated permissions.\n- **Bypass of Plugin Entrypoints:** By using these environment variables, an attacker could effectively bypass the intended entrypoint of a plugin and inject their own code to be executed instead.\n\n**Impact of Exploitation:**\n\nSuccessful exploitation of this vulnerability could lead to:\n\n- **Host Takeover:** Attackers could potentially achieve host takeover on the machine running the agent that executes the vulnerable pipeline steps. By using `LD_PRELOAD`, arbitrary shared objects could be loaded and executed with the agent's permissions.\n- **Secret Extraction:** Attackers could overwrite environment variables that plugins rely on, intercept secrets, or exfiltrate the provided secrets by running arbitrary commands.\n- **Arbitrary Code Execution:** In general, the attacker could achieve arbitrary code execution with the privileges of the plugin.\n\n**Attack Vectors:**\n\n- **Malicious Pipeline Configuration:** An attacker could create a malicious pipeline configuration, either directly or by contributing to a project, that sets specific environment variables designed to exploit the vulnerability.\n- **Malicious User:** A user with access to creating pipeline definitions or triggering pipelines could exploit the vulnerability through crafted workflow definitions.\n\n**Required Attacker Capabilities/Position:**\n\n- **Ability to Create/Modify Pipelines:** The attacker needs to be able to create or modify pipeline configurations within the Woodpecker CI system. This could be achieved via direct access or by contributing to a project's workflow.\n- **Low Privilege:** The required privileges to exploit the issue is considered low. The user does not need administrative access.\n- **Network Access:** The attack vector is network based.\n- **No User Interaction:** The attack requires no user interaction.\n\n**Additional Notes:**\n\n- The issue was fixed by restricting environment variables to only those starting with `PLUGIN_` and adding a blocklist of dangerous environment variables to prevent interference with plugin execution.\n- The vulnerability was present in Woodpecker CI versions prior to 2.7.0.\n- A workaround was suggested to enable the gated repo feature and review every change.\n- The vulnerability was discovered and reported by Daniel Kilimnik and Felipe Custodio Romero from Neodyme AG.\n\nThis information is more detailed than the original CVE description.",
  "similar_info": {
    "cwe_distribution": {
      "95": {
        "cwe_counts": {
          "CWE-NVD-noinfo": 1
        },
        "total_samples": 1,
        "distribution": [
          {
            "cwes": [
              "CWE-NVD-noinfo"
            ],
            "frequency": 1,
            "proportion": 1.0
          }
        ]
      },
      "90": {
        "cwe_counts": {
          "CWE-NVD-noinfo": 1
        },
        "total_samples": 1,
        "distribution": [
          {
            "cwes": [
              "CWE-NVD-noinfo"
            ],
            "frequency": 1,
            "proportion": 1.0
          }
        ]
      },
      "85": {
        "cwe_counts": {
          "CWE-NVD-noinfo": 1
        },
        "total_samples": 1,
        "distribution": [
          {
            "cwes": [
              "CWE-NVD-noinfo"
            ],
            "frequency": 1,
            "proportion": 1.0
          }
        ]
      },
      "80": {
        "cwe_counts": {
          "CWE-NVD-noinfo": 1
        },
        "total_samples": 1,
        "distribution": [
          {
            "cwes": [
              "CWE-NVD-noinfo"
            ],
            "frequency": 1,
            "proportion": 1.0
          }
        ]
      },
      "75": {
        "cwe_counts": {
          "CWE-NVD-noinfo": 1
        },
        "total_samples": 1,
        "distribution": [
          {
            "cwes": [
              "CWE-NVD-noinfo"
            ],
            "frequency": 1,
            "proportion": 1.0
          }
        ]
      },
      "70": {
        "cwe_counts": {
          "CWE-NVD-noinfo": 1
        },
        "total_samples": 1,
        "distribution": [
          {
            "cwes": [
              "CWE-NVD-noinfo"
            ],
            "frequency": 1,
            "proportion": 1.0
          }
        ]
      }
    },
    "cwe_consensus": "CWE-NVD-noinfo",
    "similarity_stats": {
      "thresholds": [
        95,
        90,
        85,
        80,
        75,
        70
      ],
      "total_samples_by_threshold": {
        "95": 1,
        "90": 1,
        "85": 1,
        "80": 1,
        "75": 1,
        "70": 1
      },
      "top_cwes_by_threshold": {
        "95": [
          [
            "CWE-NVD-noinfo",
            1
          ]
        ],
        "90": [
          [
            "CWE-NVD-noinfo",
            1
          ]
        ],
        "85": [
          [
            "CWE-NVD-noinfo",
            1
          ]
        ],
        "80": [
          [
            "CWE-NVD-noinfo",
            1
          ]
        ],
        "75": [
          [
            "CWE-NVD-noinfo",
            1
          ]
        ],
        "70": [
          [
            "CWE-NVD-noinfo",
            1
          ]
        ]
      }
    },
    "raw_matches": [
      {
        "similarity": 95,
        "cwes": [
          "NVD-noinfo"
        ],
        "total": 1,
        "frequency": 1,
        "proportion": 1.0
      },
      {
        "similarity": 90,
        "cwes": [
          "NVD-noinfo"
        ],
        "total": 1,
        "frequency": 1,
        "proportion": 1.0
      },
      {
        "similarity": 85,
        "cwes": [
          "NVD-noinfo"
        ],
        "total": 1,
        "frequency": 1,
        "proportion": 1.0
      },
      {
        "similarity": 80,
        "cwes": [
          "NVD-noinfo"
        ],
        "total": 1,
        "frequency": 1,
        "proportion": 1.0
      },
      {
        "similarity": 75,
        "cwes": [
          "NVD-noinfo"
        ],
        "total": 1,
        "frequency": 1,
        "proportion": 1.0
      },
      {
        "similarity": 70,
        "cwes": [
          "NVD-noinfo"
        ],
        "total": 1,
        "frequency": 1,
        "proportion": 1.0
      }
    ]
  },
  "similarity_summary": {
    "consensus_cwe": "CWE-NVD-noinfo",
    "top_cwes": [
      [
        "CWE-NVD-noinfo",
        6
      ]
    ],
    "confidence_levels": {
      "high": [],
      "medium": [],
      "low": []
    },
    "total_samples": 6
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-88 | Improper Neutralization of Argument Delimiters in a Command ('Argument Injection') | 0.9 | Base | Allowed | Primary CWE - Root cause |\n| CWE-78 | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | 0.7 | Base | Allowed | Secondary CWE - Impact |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is CWE-88, as the injection of arbitrary environment variables allows attackers to control command arguments. CWE-78 is a potential consequence if the injected arguments lead to OS command execution. The graph relationships confirm that CWE-88 can be related to CWE-78 via parent child relationships through CWE-74, and peer relationships. The base level of abstraction is chosen for both to accurately reflect the specific weaknesses.\n\n```mermaid\ngraph TD\n    cwe78[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"]\n    cwe88[\"CWE-88: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n    \n    cwe88 -->|CHILDOF| cwe74\n    cwe78 -->|CHILDOF| cwe74\n    cwe88 -- CANALSOBE --> cwe78\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe88 primary\n    class cwe78 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **improper neutralization of argument delimiters** (CWE-88) when constructing commands with environment variables. This leads to potential **OS command injection** (CWE-78), ultimately resulting in host takeover and secret extraction.\n\n## Summary of Analysis\nThe primary assessment is based on the CVE Reference Links Content Summary, which provides detailed evidence of the vulnerability. The key evidence is the **unrestricted environment variable injection**, which enables attackers to **overwrite environment variables** and **bypass plugin entrypoints**. The retriever results and graph relationships support mapping CWE-88 as the primary cause and CWE-78 as a potential impact.\n\nThe selected CWEs are at the optimal level of specificity because they accurately reflect the nature of the vulnerability. CWE-88 captures the root cause, while CWE-78 describes a potential consequence.\n\n**CWE Considerations:**\n\n*   **CWE-88 Improper Neutralization of Argument Delimiters in a Command ('Argument Injection'):** This is the primary CWE because the vulnerability lies in the improper handling of argument delimiters when constructing commands with environment variables. The \"CVE Reference Links Content Summary\" states: \"The core weakness is that Woodpecker CI allowed users to set arbitrary environment variables that were passed directly to plugin executions. This permitted the use of \"dangerous\" environment variables like `LD_PRELOAD` or `PATH` which influence how binaries and libraries are loaded and executed.\"\n*   **CWE-78 Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'):** This is a secondary CWE because it describes a potential impact of the vulnerability. If the injected arguments from CWE-88 are used in an OS command, it can lead to command injection. The \"CVE Reference Links Content Summary\" mentions the possibility of host takeover: \"Attackers could potentially achieve host takeover on the machine running the agent that executes the vulnerable pipeline steps.\"\n\n**CWEs Considered But Not Used:**\n\n*   **CWE-22 Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'):** While path traversal could be a consequence of improper neutralization, it is not the primary weakness in this case.\n*   **CWE-74 Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection'):** This is a broader category of injection and is less specific than CWE-88.\n*   **CWE-94 Improper Control of Generation of Code ('Code Injection'):** While code execution is a possible outcome, the root cause is related to argument injection rather than direct code injection.\n*   **CWE-285 Improper Authorization:** The issue is not directly related to authorization, but rather to the injection of arguments.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-88 | Improper Neutralization of Argument Delimiters in a Command ('Argument Injection') | 0.9 | Base | Allowed | Primary CWE - Root cause |\n| CWE-78 | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | 0.7 | Base | Allowed | Secondary CWE - Impact |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is CWE-88, as the injection of arbitrary environment variables allows attackers to control command arguments. CWE-78 is a potential consequence if the injected arguments lead to OS command execution. The graph relationships confirm that CWE-88 can be related to CWE-78 via parent child relationships through CWE-74, and peer relationships. The base level of abstraction is chosen for both to accurately reflect the specific weaknesses.\n\n```mermaid\ngraph TD\n    cwe78[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"]\n    cwe88[\"CWE-88: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n    \n    cwe88 -->|CHILDOF| cwe74\n    cwe78 -->|CHILDOF| cwe74\n    cwe88 -- CANALSOBE --> cwe78\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe88 primary\n    class cwe78 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **improper neutralization of argument delimiters** (CWE-88) when constructing commands with environment variables. This leads to potential **OS command injection** (CWE-78), ultimately resulting in host takeover and secret extraction.\n\n## Summary of Analysis\nThe primary assessment is based on the CVE Reference Links Content Summary, which provides detailed evidence of the vulnerability. The key evidence is the **unrestricted environment variable injection**, which enables attackers to **overwrite environment variables** and **bypass plugin entrypoints**. The retriever results and graph relationships support mapping CWE-88 as the primary cause and CWE-78 as a potential impact.\n\nThe selected CWEs are at the optimal level of specificity because they accurately reflect the nature of the vulnerability. CWE-88 captures the root cause, while CWE-78 describes a potential consequence.\n\n**CWE Considerations:**\n\n*   **CWE-88 Improper Neutralization of Argument Delimiters in a Command ('Argument Injection'):** This is the primary CWE because the vulnerability lies in the improper handling of argument delimiters when constructing commands with environment variables. The \"CVE Reference Links Content Summary\" states: \"The core weakness is that Woodpecker CI allowed users to set arbitrary environment variables that were passed directly to plugin executions. This permitted the use of \"dangerous\" environment variables like `LD_PRELOAD` or `PATH` which influence how binaries and libraries are loaded and executed.\"\n*   **CWE-78 Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'):** This is a secondary CWE because it describes a potential impact of the vulnerability. If the injected arguments from CWE-88 are used in an OS command, it can lead to command injection. The \"CVE Reference Links Content Summary\" mentions the possibility of host takeover: \"Attackers could potentially achieve host takeover on the machine running the agent that executes the vulnerable pipeline steps.\"\n\n**CWEs Considered But Not Used:**\n\n*   **CWE-22 Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'):** While path traversal could be a consequence of improper neutralization, it is not the primary weakness in this case.\n*   **CWE-74 Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection'):** This is a broader category of injection and is less specific than CWE-88.\n*   **CWE-94 Improper Control of Generation of Code ('Code Injection'):** While code execution is a possible outcome, the root cause is related to argument injection rather than direct code injection.\n*   **CWE-285 Improper Authorization:** The issue is not directly related to authorization, but rather to the injection of arguments.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-94:**\n- 94 (Improper Control of Generation of Code ('Code Injection')) - ROOT\n\n\n**Chain starting from CWE-88:**\n- 88 (Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 147.60009479277912
    },
    {
      "metadata": {
        "doc_id": "1333",
        "name": "Inefficient Regular Expression Complexity",
        "source": "sparse"
      },
      "similarity": 146.04603154836562
    },
    {
      "metadata": {
        "doc_id": "212",
        "name": "Improper Removal of Sensitive Information Before Storage or Transfer",
        "source": "sparse"
      },
      "similarity": 144.7806617144141
    },
    {
      "metadata": {
        "doc_id": "789",
        "name": "Memory Allocation with Excessive Size Value",
        "source": "sparse"
      },
      "similarity": 143.81088747865317
    },
    {
      "metadata": {
        "doc_id": "1336",
        "name": "Improper Neutralization of Special Elements Used in a Template Engine",
        "source": "sparse"
      },
      "similarity": 142.5339365051242
    },
    {
      "metadata": {
        "doc_id": "22",
        "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
        "source": "sparse"
      },
      "similarity": 140.59833300400018
    },
    {
      "metadata": {
        "doc_id": "214",
        "name": "Invocation of Process Using Visible Sensitive Information",
        "source": "sparse"
      },
      "similarity": 140.25448404299016
    },
    {
      "metadata": {
        "doc_id": "285",
        "name": "Improper Authorization",
        "source": "sparse"
      },
      "similarity": 139.67193287120656
    },
    {
      "metadata": {
        "doc_id": "88",
        "name": "Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
        "type": "Base",
        "original_content": "The product constructs a string for a command to be executed by a separate component\nin another control sphere, but it does not properly delimit the\nintended arguments, options, or switches within that command string.",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.4699477248410612,
            "graph": 1.6849810750676113
          }
        }
      },
      "similarity": 0.4699477248410612
    },
    {
      "doc_id": "78",
      "text": "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
      "score": 2.8418,
      "metadata": {
        "doc_id": "78",
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "type": "base",
        "original_content": "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "relationships": [
          {
            "source_id": "78",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "78",
            "target_id": "88",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "78",
            "target_id": "77",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1340"
            }
          },
          {
            "source_id": "78",
            "target_id": "77",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1305"
            }
          },
          {
            "source_id": "78",
            "target_id": "74",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "78",
            "target_id": "77",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "77",
            "target_id": "78",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "74",
            "target_id": "78",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "184",
            "target_id": "78",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 0.7,
          "abstraction_path": 0.7200000000000001,
          "sequence_path": 0.6400000000000001,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "78",
                  "88",
                  "CANALSOBE"
                ]
              ],
              "score": 0.7,
              "type": "relationship_chain",
              "source": "88"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "74",
                  "78",
                  "PARENTOF"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "abstraction_path_down",
              "source": "74"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "73",
                  "434",
                  "CANPRECEDE"
                ],
                [
                  "434",
                  "184",
                  "CANFOLLOW"
                ],
                [
                  "184",
                  "78",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.6400000000000001,
              "type": "vulnerability_sequence_forward",
              "source": "73"
            },
            "peer_relationship": {
              "path": [
                [
                  "78",
                  "88",
                  "CANALSOBE"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "88"
            }
          }
        },
        "abstraction_level": "base",
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.8418
          }
        }
      },
      "similarity": 2.8418
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-94",
      "CWE-88",
      "CWE-22",
      "CWE-74",
      "CWE-285",
      "CWE-78"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}