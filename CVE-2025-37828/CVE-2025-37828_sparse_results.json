{
  "query": "In the Linux kernel, the following vulnerability has been resolved scsi ufs mcq Add NULL check in ufshcd_mcq_abort() A race can occur between the MCQ completion path and the abort handler once a request completes, __blk_mq_free_request() sets rq->mq_hctx to NULL, meaning the subsequent ufshcd_mcq_req_to_hwq() call in ufshcd_mcq_abort() can return a NULL pointer. If this NULL pointer is dereferenced, the kernel will crash. Add a NULL check for the returned hwq pointer. If hwq is NULL, log an error and return FAILED, preventing a potential NULL-pointer dereference. As suggested by Bart, the ufshcd_cmd_inflight() check is removed. This is similar to the fix in commit 74736103fb41 (scsi ufs core Fix ufshcd_abort_one racing issue). This is found by our static analysis tool KNighter.",
  "count": 11,
  "results": [
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "abstraction": "Class",
      "score": 1000.0,
      "original_score": 1000.0,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "abstraction": "Base",
      "score": 825.9505966814055,
      "original_score": 825.9505966814055,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "252",
      "name": "Unchecked Return Value",
      "abstraction": "Base",
      "score": 763.7523896325849,
      "original_score": 763.7523896325849,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "824",
      "name": "Access of Uninitialized Pointer",
      "abstraction": "Base",
      "score": 744.4754377972301,
      "original_score": 744.4754377972301,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "908",
      "name": "Use of Uninitialized Resource",
      "abstraction": "Base",
      "score": 682.4777366778086,
      "original_score": 682.4777366778086,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "617",
      "name": "Reachable Assertion",
      "abstraction": "Base",
      "score": 676.6274095408253,
      "original_score": 676.6274095408253,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "665",
      "name": "Improper Initialization",
      "abstraction": "Class",
      "score": 670.7050088033061,
      "original_score": 670.7050088033061,
      "mapping_usage": "Discouraged"
    },
    {
      "cwe_id": "690",
      "name": "Unchecked Return Value to NULL Pointer Dereference",
      "abstraction": "Compound",
      "score": 668.5008665869284,
      "original_score": 668.5008665869284,
      "mapping_usage": "Discouraged"
    },
    {
      "cwe_id": "364",
      "name": "Signal Handler Race Condition",
      "abstraction": "Base",
      "score": 662.1521040813974,
      "original_score": 662.1521040813974,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "822",
      "name": "Untrusted Pointer Dereference",
      "abstraction": "Base",
      "score": 658.7488175854958,
      "original_score": 658.7488175854958,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "abstraction": "Class",
      "score": 589.8187707453542,
      "original_score": 589.8187707453542,
      "mapping_usage": "Allowed-with-Review"
    }
  ],
  "statistics": {
    "min": 589.8187707453542,
    "max": 1000.0,
    "mean": 722.1099216483942,
    "median": 676.6274095408253,
    "count": 11
  }
}