{
  "retriever": "sparse",
  "query": "In the Linux kernel, the following vulnerability has been resolved batman-adv Drop unmanaged ELP metric worker The ELP worker needs to calculate new metric values for all neighbors reachable over an interface. Some of the used metric sources require locks which might need to sleep. This sleep is incompatible with the RCU list iterator used for the recorded neighbors. The initial approach to work around of this problem was to queue another work item per neighbor and then run this in a new context. Even when this solved the RCU vs might_sleep() conflict, it has a major problems Nothing was stopping the work item in case it is not needed anymore - for example because one of the related interfaces was removed or the batman-adv module was unloaded - resulting in potential invalid memory accesses. Directly canceling the metric worker also has various problems * cancel_work_sync for a to-be-deactivated interface is called with rtnl_lock held. But the code in the ELP metric worker also tries to use rtnl_lock() - which will never return in this case. This also means that cancel_work_sync would never return because it is waiting for the worker to finish. * iterating over the neighbor list for the to-be-deactivated interface is currently done using the RCU specific methods. Which means that it is possible to miss items when iterating over it without the associated spinlock - a behaviour which is acceptable for a periodic metric check but not for a cleanup routine (which must stop all still running workers) The better approch is to get rid of the per interface neighbor metric worker and handle everything in the interface worker. The original problems are solved by * creating a list of neighbors which require new metric information inside the RCU protected context, gathering the metric according to the new list outside the RCU protected context * only use rcu_trylock inside metric gathering code to avoid a deadlock when the cancel_delayed_work_sync is called in the interface removal code (which is called with the rtnl_lock held)",
  "keyphrases": {
    "rootcause": [
      "incompatible sleep",
      "RCU list iterator"
    ]
  },
  "timestamp": "2025-07-12 09:55:44",
  "cve_id": "CVE-2025-21823",
  "result_count": 10,
  "results": [
    {
      "cwe_id": "863",
      "name": "Incorrect Authorization",
      "score": 1574.4170691594854,
      "search_source": "rootcause:RCU list iterator"
    },
    {
      "cwe_id": "923",
      "name": "Improper Restriction of Communication Channel to Intended Endpoints",
      "score": 1521.9305698903388,
      "search_source": "rootcause:RCU list iterator"
    },
    {
      "cwe_id": "306",
      "name": "Missing Authentication for Critical Function",
      "score": 1521.6106819573363,
      "search_source": "rootcause:RCU list iterator"
    },
    {
      "cwe_id": "212",
      "name": "Improper Removal of Sensitive Information Before Storage or Transfer",
      "score": 1516.0279940082364,
      "search_source": "rootcause:RCU list iterator"
    },
    {
      "cwe_id": "833",
      "name": "Deadlock",
      "score": 1502.3206096668148,
      "search_source": "rootcause:incompatible sleep"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 1492.2388151092662,
      "search_source": "rootcause:incompatible sleep"
    },
    {
      "cwe_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "score": 1490.1279494778498,
      "search_source": "rootcause:incompatible sleep"
    },
    {
      "cwe_id": "296",
      "name": "Improper Following of a Certificate's Chain of Trust",
      "score": 1489.0674748913852,
      "search_source": "rootcause:RCU list iterator"
    },
    {
      "cwe_id": "1188",
      "name": "Initialization of a Resource with an Insecure Default",
      "score": 1488.3014302046406,
      "search_source": "rootcause:RCU list iterator"
    },
    {
      "cwe_id": "201",
      "name": "Insertion of Sensitive Information Into Sent Data",
      "score": 1487.5608687402323,
      "search_source": "rootcause:RCU list iterator"
    }
  ]
}