{
  "method": "sparse_weakness_1",
  "query": "In the Linux kernel, the following vulnerability has been resolved exfat fix random stack corruption after get_block When get_block is called with a buffer_head allocated on the stack, such as do_mpage_readpage, stack corruption due to buffer_head UAF may occur in the following race condition situation. mpage_read_folio > do_mpage_readpage exfat_get_block bh_read __bh_read get_bh(bh) submit_bh wait_on_buffer ... end_buffer_read_sync __end_buffer_read_notouch unlock_buffer > ... ... ... ... > . . another_function > put_bh(bh) atomic_dec(bh->b_count) * stack corruption here * This patch returns -EAGAIN if a folio does not have buffers when bh_read needs to be called. By doing this, the caller can fallback to functions like block_read_full_folio(), create a buffer_head in the folio, and then call get_block again. Lets do not call bh_read() with on-stack buffer_head.",
  "keyphrases": {
    "weakness": "stack corruption"
  },
  "timestamp": "2025-07-12T10:00:54.072717",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "674",
      "name": "Uncontrolled Recursion",
      "score": 500.98381581220013
    },
    {
      "doc_id": "457",
      "name": "Use of Uninitialized Variable",
      "score": 491.0606042742614
    },
    {
      "doc_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 484.9185586050498
    },
    {
      "doc_id": "908",
      "name": "Use of Uninitialized Resource",
      "score": 471.99557302569
    },
    {
      "doc_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "score": 470.24654394074133
    }
  ]
}