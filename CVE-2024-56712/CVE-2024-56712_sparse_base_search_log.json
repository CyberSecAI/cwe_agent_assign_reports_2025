{
  "method": "sparse_base",
  "query": "In the Linux kernel, the following vulnerability has been resolved udmabuf fix memory leak on last export_udmabuf() error path In export_udmabuf(), if dma_buf_fd() fails because the FD table is full, a dma_buf owning the udmabuf has already been created but the error handling in udmabuf_create() will tear down the udmabuf without doing anything about the containing dma_buf. This leaves a dma_buf in memory that contains a dangling pointer though that doesnt seem to lead to anything bad except a memory leak. Fix it by moving the dma_buf_fd() call out of export_udmabuf() so that we can give it different error handling. Note that the shape of this code changed a lot in commit 5e72b2b41a21 (udmabuf convert udmabuf driver to use folios) but the memory leak seems to have existed since the introduction of udmabuf.",
  "keyphrases": {
    "base_query": "In the Linux kernel, the following vulnerability has been resolved udmabuf fix memory leak on last export_udmabuf() error path In export_udmabuf(), if dma_buf_fd() fails because the FD table is full, a dma_buf owning the udmabuf has already been created but the error handling in udmabuf_create() will tear down the udmabuf without doing anything about the containing dma_buf. This leaves a dma_buf in memory that contains a dangling pointer though that doesnt seem to lead to anything bad except a memory leak. Fix it by moving the dma_buf_fd() call out of export_udmabuf() so that we can give it different error handling. Note that the shape of this code changed a lot in commit 5e72b2b41a21 (udmabuf convert udmabuf driver to use folios) but the memory leak seems to have existed since the introduction of udmabuf."
  },
  "timestamp": "2025-07-12T06:43:44.118866",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "125",
      "name": "Out-of-bounds Read",
      "score": 205.3766750525144
    },
    {
      "doc_id": "415",
      "name": "Double Free",
      "score": 205.27462560377214
    },
    {
      "doc_id": "909",
      "name": "Missing Initialization of Resource",
      "score": 203.9855802541827
    },
    {
      "doc_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 203.8007678686721
    },
    {
      "doc_id": "401",
      "name": "Missing Release of Memory after Effective Lifetime",
      "score": 202.6025459596147
    }
  ]
}