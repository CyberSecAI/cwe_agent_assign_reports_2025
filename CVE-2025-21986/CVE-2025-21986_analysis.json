{
  "cve_id": "CVE-2025-21986",
  "description": "In the Linux kernel, the following vulnerability has been resolved net switchdev Convert blocking notification chain to a raw one A blocking notification chain uses a read-write semaphore to protect the integrity of the chain. The semaphore is acquired for writing when adding / removing notifiers to / from the chain and acquired for reading when traversing the chain and informing notifiers about an event. In case of the blocking switchdev notification chain, recursive notifications are possible which leads to the semaphore being acquired twice for reading and to lockdep warnings being generated [1]. Specifically, this can happen when the bridge driver processes a SWITCHDEV_BRPORT_UNOFFLOADED event which causes it to emit notifications about deferred events when calling switchdev_deferred_process(). Fix this by converting the notification chain to a raw notification chain in a similar fashion to the netdev notification chain. Protect the chain using the RTNL mutex by acquiring it when modifying the chain. Events are always informed under the RTNL mutex, but add an assertion in call_switchdev_blocking_notifiers() to make sure this is not violated in the future. Maintain the blocking prefix as events are always emitted from process context and listeners are allowed to block. [1] WARNING possible **recursive locking** detected 6.14.0-rc4-custom-g079270089484 #1 Not tainted -------------------------------------------- ip/52731 is trying to acquire lock ffffffff850918d8 ((switchdev_blocking_notif_chain).rwsem){++++}-{44}, at blocking_notifier_call_chain+0x58/0xa0 but task is already holding lock ffffffff850918d8 ((switchdev_blocking_notif_chain).rwsem){++++}-{44}, at blocking_notifier_call_chain+0x58/0xa0 other info that might help us debug this Possible unsafe locking scenario CPU0 ---- lock((switchdev_blocking_notif_chain).rwsem) lock((switchdev_blocking_notif_chain).rwsem) *** DEADLOCK *** May be due to missing lock nesting notation 3 locks held by ip/52731 #0 ffffffff84f795b0 (rtnl_mutex){+.+.}-{44}, at rtnl_newlink+0x727/0x1dc0 #1 ffffffff8731f628 (&net->rtnl_mutex){+.+.}-{44}, at rtnl_newlink+0x790/0x1dc0 #2 ffffffff850918d8 ((switchdev_blocking_notif_chain).rwsem){++++}-{44}, at blocking_notifier_call_chain+0x58/0xa0 stack backtrace ... ? __pfx_down_read+0x10/0x10 ? __pfx_mark_lock+0x10/0x10 ? __pfx_switchdev_port_attr_set_deferred+0x10/0x10 blocking_notifier_call_chain+0x58/0xa0 switchdev_port_attr_notify.constprop.0+0xb3/0x1b0 ? __pfx_switchdev_port_attr_notify.constprop.0+0x10/0x10 ? mark_held_locks+0x94/0xe0 ? switchdev_deferred_process+0x11a/0x340 switchdev_port_attr_set_deferred+0x27/0xd0 switchdev_deferred_process+0x164/0x340 br_switchdev_port_unoffload+0xc8/0x100 [bridge] br_switchdev_blocking_event+0x29f/0x580 [bridge] notifier_call_chain+0xa2/0x440 blocking_notifier_call_chain+0x6e/0xa0 switchdev_bridge_port_unoffload+0xde/0x1a0 ...",
  "key_phrases": {
    "rootcause": "",
    "weakness": "recursive locking",
    "impact": [
      "lockdep warnings being generated",
      "integrity"
    ],
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "6.14.0-rc4-custom-g079270089484",
    "component": "net switchdev"
  },
  "reference_content": null,
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-833 | Deadlock | 0.9 | Base | Primary | Allowed |\n| CWE-667 | Improper Locking | 0.7 | Class | Secondary | Allowed-with-Review |\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.6 | Class | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE selected is CWE-833 (Deadlock), a Base level CWE. It is related to CWE-667 (Improper Locking) and CWE-362 (Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')), both Class level CWEs, which are considered as contributing factors or prerequisites to the deadlock condition. CWE-833 is a more specific consequence of improper locking or race conditions. The hierarchical relationships influenced the decision to prioritize CWE-833 as it directly reflects the described deadlock scenario.\n\n```mermaid\ngraph TD\n    cwe833[\"CWE-833: Deadlock\"]\n    cwe667[\"CWE-667: Improper Locking\"]\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    \n    cwe833 -->|CAUSES| cwe667\n    cwe833 -->|CAUSES| cwe362\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe833 primary\n    class cwe667,cwe362 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **improper locking** mechanism, specifically a read-write semaphore being acquired recursively. This leads to a **race condition** where multiple threads or executable segments are waiting for each other to release a lock. The final impact is a **deadlock** condition, causing lockdep warnings and potentially system instability.\n\n## Summary of Analysis\nThe initial analysis focused on identifying the root cause and the resulting impact described in the vulnerability. The description clearly indicates a **recursive locking** issue leading to a **deadlock**. The evidence is strong due to the inclusion of a detailed stack backtrace and lockdep warnings.\n\nThe retriever results suggested CWE-667 (Improper Locking) and CWE-362 (Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')), however, the vulnerability description explicitly states \"***DEADLOCK***\" which makes CWE-833 a better, more specific fit. The relationship analysis confirmed that CWE-667 and CWE-362 can contribute to a deadlock, but the final state is best represented by CWE-833.\n\nThe selection of CWE-833 is based on the direct evidence of a deadlock and the principle of selecting the most specific CWE. The other CWEs were considered but deemed secondary as they describe contributing factors rather than the ultimate vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.81\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n**Technical Explanation:** The vulnerability description indicates a blocking notification chain using a read-write semaphore that is acquired recursively, suggesting an issue with how locks are acquired or released. This aligns with the characteristics of CWE-667. While it's a contributing factor, the end result is a deadlock, making CWE-833 a better primary choice.\n\n**Security Implications:** Improper locking can lead to race conditions, data corruption, and denial of service.\n\n**Influence of Mapping Guidance:** The \"Allowed-with-Review\" usage suggests considering more specific Base-level children, which led to the selection of CWE-833.\n\n## CWE-833: Deadlock\n**Abstraction Level**: Base\n**Similarity Score**: 0.78\n**Source**: dense\n\n**Description**:\nThe product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Technical Explanation:** The vulnerability description explicitly states \"***DEADLOCK***\" and provides a stack backtrace showing threads waiting for each other to release locks. This directly matches the definition of CWE-833.\n\n**Security Implications:** Deadlocks can lead to denial of service, system instability, and data corruption.\n\n**Influence of Mapping Guidance:** The \"Allowed\" usage and Base level of abstraction support the selection of CWE-833 as the primary CWE.\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 684.32\n**Source**: sparse\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n**Technical Explanation:** The recursive locking scenario suggests a potential race condition where multiple threads are attempting to access the same resource without proper synchronization. While the end result is a deadlock, the race condition is a contributing factor.\n\n**Security Implications:** Race conditions can lead to data corruption, unexpected behavior, and denial of service.\n\n**Influence of Mapping Guidance:** The \"Allowed-with-Review\" usage suggests considering more specific Base-level children, which led to prioritizing CWE-833.\n\n## CWE-772: Missing Release of Resource after Effective Lifetime\n**Abstraction Level**: base\n**Similarity Score**: 2.21\n**Source**: graph\n\n**Description**:\nCWE-772: Missing Release of Resource after Effective Lifetime\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Technical Explanation:** This CWE was considered because deadlocks can sometimes occur if resources are not released properly. However, the primary issue described is the recursive acquisition of locks, not a general failure to release resources.\n\n**Security Implications:** Resource leaks can lead to denial of service and system instability.\n\n**Influence of Mapping Guidance:** While relevant in some deadlock scenarios, it does not directly apply to the recursive locking described in the vulnerability, so it was not selected.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-833 | Deadlock | 0.9 | Base | Primary | Allowed |\n| CWE-667 | Improper Locking | 0.7 | Class | Secondary | Allowed-with-Review |\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.6 | Class | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE selected is CWE-833 (Deadlock), a Base level CWE. It is related to CWE-667 (Improper Locking) and CWE-362 (Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')), both Class level CWEs, which are considered as contributing factors or prerequisites to the deadlock condition. CWE-833 is a more specific consequence of improper locking or race conditions. The hierarchical relationships influenced the decision to prioritize CWE-833 as it directly reflects the described deadlock scenario.\n\n```mermaid\ngraph TD\n    cwe833[\"CWE-833: Deadlock\"]\n    cwe667[\"CWE-667: Improper Locking\"]\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    \n    cwe833 -->|CAUSES| cwe667\n    cwe833 -->|CAUSES| cwe362\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe833 primary\n    class cwe667,cwe362 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **improper locking** mechanism, specifically a read-write semaphore being acquired recursively. This leads to a **race condition** where multiple threads or executable segments are waiting for each other to release a lock. The final impact is a **deadlock** condition, causing lockdep warnings and potentially system instability.\n\n## Summary of Analysis\nThe initial analysis focused on identifying the root cause and the resulting impact described in the vulnerability. The description clearly indicates a **recursive locking** issue leading to a **deadlock**. The evidence is strong due to the inclusion of a detailed stack backtrace and lockdep warnings.\n\nThe retriever results suggested CWE-667 (Improper Locking) and CWE-362 (Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')), however, the vulnerability description explicitly states \"***DEADLOCK***\" which makes CWE-833 a better, more specific fit. The relationship analysis confirmed that CWE-667 and CWE-362 can contribute to a deadlock, but the final state is best represented by CWE-833.\n\nThe selection of CWE-833 is based on the direct evidence of a deadlock and the principle of selecting the most specific CWE. The other CWEs were considered but deemed secondary as they describe contributing factors rather than the ultimate vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.81\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n**Technical Explanation:** The vulnerability description indicates a blocking notification chain using a read-write semaphore that is acquired recursively, suggesting an issue with how locks are acquired or released. This aligns with the characteristics of CWE-667. While it's a contributing factor, the end result is a deadlock, making CWE-833 a better primary choice.\n\n**Security Implications:** Improper locking can lead to race conditions, data corruption, and denial of service.\n\n**Influence of Mapping Guidance:** The \"Allowed-with-Review\" usage suggests considering more specific Base-level children, which led to the selection of CWE-833.\n\n## CWE-833: Deadlock\n**Abstraction Level**: Base\n**Similarity Score**: 0.78\n**Source**: dense\n\n**Description**:\nThe product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Technical Explanation:** The vulnerability description explicitly states \"***DEADLOCK***\" and provides a stack backtrace showing threads waiting for each other to release locks. This directly matches the definition of CWE-833.\n\n**Security Implications:** Deadlocks can lead to denial of service, system instability, and data corruption.\n\n**Influence of Mapping Guidance:** The \"Allowed\" usage and Base level of abstraction support the selection of CWE-833 as the primary CWE.\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 684.32\n**Source**: sparse\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n**Technical Explanation:** The recursive locking scenario suggests a potential race condition where multiple threads are attempting to access the same resource without proper synchronization. While the end result is a deadlock, the race condition is a contributing factor.\n\n**Security Implications:** Race conditions can lead to data corruption, unexpected behavior, and denial of service.\n\n**Influence of Mapping Guidance:** The \"Allowed-with-Review\" usage suggests considering more specific Base-level children, which led to prioritizing CWE-833.\n\n## CWE-772: Missing Release of Resource after Effective Lifetime\n**Abstraction Level**: base\n**Similarity Score**: 2.21\n**Source**: graph\n\n**Description**:\nCWE-772: Missing Release of Resource after Effective Lifetime\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Technical Explanation:** This CWE was considered because deadlocks can sometimes occur if resources are not released properly. However, the primary issue described is the recursive acquisition of locks, not a general failure to release resources.\n\n**Security Implications:** Resource leaks can lead to denial of service and system instability.\n\n**Influence of Mapping Guidance:** While relevant in some deadlock scenarios, it does not directly apply to the recursive locking described in the vulnerability, so it was not selected.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-667:**\n- 667 (Improper Locking) - ROOT\n\n\n**Chain starting from CWE-833:**\n- 833 (Deadlock) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "667",
        "name": "Improper Locking",
        "source": "sparse"
      },
      "similarity": 1261.546547607222
    },
    {
      "metadata": {
        "doc_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "source": "sparse"
      },
      "similarity": 1143.35013766476
    },
    {
      "metadata": {
        "doc_id": "833",
        "name": "Deadlock",
        "source": "sparse"
      },
      "similarity": 1122.525341169387
    },
    {
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "source": "sparse"
      },
      "similarity": 1099.8560836143856
    },
    {
      "metadata": {
        "doc_id": "674",
        "name": "Uncontrolled Recursion",
        "source": "sparse"
      },
      "similarity": 1096.586704335002
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 1073.1098553803256
    },
    {
      "metadata": {
        "doc_id": "911",
        "name": "Improper Update of Reference Count",
        "source": "sparse"
      },
      "similarity": 1055.09993088008
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 1045.3228501496703
    },
    {
      "metadata": {
        "doc_id": "401",
        "name": "Missing Release of Memory after Effective Lifetime",
        "type": "Variant",
        "original_content": "The product does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory.",
        "keyphrase_source": "weakness:recursive locking",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.5259124296066133
          }
        }
      },
      "similarity": 0.5259124296066133
    },
    {
      "doc_id": "390",
      "text": "CWE-390: Detection of Error Condition Without Action",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "390",
        "name": "Detection of Error Condition Without Action",
        "type": "base",
        "original_content": "CWE-390: Detection of Error Condition Without Action",
        "relationships": [
          {
            "source_id": "390",
            "target_id": "401",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "390",
            "target_id": "755",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "81",
            "target_id": "390",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "755",
            "target_id": "390",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "600",
            "target_id": "390",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "401",
            "target_id": "390",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "401",
                  "390",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "401"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "401",
                  "390",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "401"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "390",
                  "401",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "401"
            }
          }
        },
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-667",
      "CWE-833",
      "CWE-362",
      "CWE-772"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}