{
  "cve_id": "CVE-2024-47679",
  "description": "In the Linux kernel, the following vulnerability has been resolved vfs fix race between evice_inodes() and find_inode()&iput() Hi, all Recently I noticed a bug[1] in btrfs, after digged it into and I believe ita race in vfs. Lets assume theres a inode (ie ino 261) with i_count 1 is called by iput(), and theres a concurrent thread calling generic_shutdown_super(). cpu0 cpu1 iput() // i_count is 1 ->spin_lock(inode) ->dec i_count to 0 ->iput_final() generic_shutdown_super() ->__inode_add_lru() ->evict_inodes() // cause some reason[2] ->if (atomic_read(inode->i_count)) continue // return before // inode 261 passed the above check // list_lru_add_obj() // and then schedule out ->spin_unlock() // note here the inode 261 // was still at sb list and hash list, // and I_FREEING|I_WILL_FREE was not been set btrfs_iget() // after some function calls ->find_inode() // found the above inode 261 ->spin_lock(inode) // check I_FREEING|I_WILL_FREE // and passed ->__iget() ->spin_unlock(inode) // schedule back ->spin_lock(inode) // check (I_NEW|I_FREEING|I_WILL_FREE) flags, // passed and set I_FREEING iput() ->spin_unlock(inode) ->spin_lock(inode) ->ev",
  "key_phrases": {
    "rootcause": "race condition",
    "weakness": "",
    "impact": "",
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": "vfs"
  },
  "reference_content": "Based on the provided content, here's an analysis of the vulnerability:\n\n**Root Cause:**\nThe root cause is a race condition in the Linux kernel's virtual file system (VFS) layer, specifically between the `evict_inodes()` function (which is called during superblock shutdown) and the combination of `find_inode()` and `iput()` functions when accessing an inode.\n\n**Vulnerabilities:**\n\n*   **Race Condition:** A race exists when an inode's reference count (`i_count`) is decremented to zero by `iput()`, and concurrently, `evict_inodes()` is iterating through inodes for eviction. Due to the timing, `evict_inodes()` can skip an inode that is about to be freed, but not yet marked as such (I_FREEING, I_WILL_FREE). Subsequently, another thread using `find_inode()` might locate this inode, increment its `i_count`, and start using it, while the original `iput()` call is also continuing the eviction process, thus leading to a double eviction.\n*  **Missing check after locking:**  The initial check in `evict_inodes()` to see if `i_count` is zero is done before acquiring the `i_lock`, this check is not atomic. Another thread could increment `i_count` after the initial check, but before the lock is acquired and the rest of eviction logic is executed.\n*   **Double Eviction:** The primary vulnerability lies in the fact that two different threads can simultaneously start evicting the same inode, which leads to a race condition in inode management.\n\n**Impact of Exploitation:**\n\n*   **Kernel BUG:** This race condition can trigger a `BUG(inode->i_state & I_CLEAR)` statement within the `clear_inode()` and `iput()` functions. This results in a kernel panic and system crash.\n*   **Data Corruption**:  While not explicitly stated in the provided content, it's plausible this double eviction could also lead to memory corruption issues.\n\n**Attack Vectors:**\n\n*   **Concurrent Operations:** The attack vector involves triggering concurrent operations on the same inode. This is achieved when an inode is being released (`iput()`), and concurrently, the superblock containing the inode is being shut down (`generic_shutdown_super()`), which in turn calls `evict_inodes()`.  The other required thread is via `btrfs_iget()`.\n*   **File System Specific:** The bug was initially discovered in the btrfs file system, and a similar path exists for other file systems, so the attacker needs to be able to trigger operations on a file system.\n\n**Required Attacker Capabilities/Position:**\n\n*   **Arbitrary File System Operations**: An attacker needs the ability to perform operations that involve creating and destroying inodes, which can lead to the triggering of the race condition.  This could be a process creating, deleting or modifying files, and/or a process unmounting file systems.\n*   **Timing Control**: While not necessarily direct timing control over threads, the attacker needs to have a means to make the race occur reliably.\n\n**Additional Details**\nThe provided content includes the specific code fix which adds a check for  `atomic_read(&inode->i_count)` after acquiring the `i_lock` to prevent the race condition:\n```c\nspin_lock(&inode->i_lock);\nif (atomic_read(&inode->i_count)) {\n    spin_unlock(&inode->i_lock);\n    continue;\n}\n```\nThis ensures that after the lock is acquired the reference count is checked again, and if the count is not zero, the eviction process will not be started for that inode.\n\nThe fix was applied to multiple kernel versions in stable branches.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 1.0 | Class | Allowed-with-Review | Primary CWE. The vulnerability is fundamentally a race condition. |\n| CWE-367 | Time-of-check Time-of-use (TOCTOU) Race Condition | 0.8 | Base | Allowed | Secondary Candidate. A specific type of race condition. |\n| CWE-667 | Improper Locking | 0.7 | Class | Allowed-with-Review | Secondary Candidate. The race condition is caused by improper locking. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-362 **Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')**, which is a class-level CWE. A more specific type of race condition is CWE-367 **Time-of-check Time-of-use (TOCTOU) Race Condition**, which is a base-level CWE and a child of CWE-362. The race condition is caused by improper locking, which is CWE-667.\n\n```mermaid\ngraph TD\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    cwe367[\"CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\"]\n    cwe667[\"CWE-667: Improper Locking\"]\n    \n    cwe367 -->|CHILDOF| cwe362\n    cwe667 -->|RELATED| cwe362\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe362 primary\n    class cwe367,cwe667 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a **race condition** (CWE-362) due to **improper synchronization** when accessing inodes. Specifically, the `evict_inodes()` function and the `iput()` function are racing. This leads to a double eviction, which causes a kernel panic. The TOCTOU (CWE-367) aspect comes from the fact that the `i_count` is checked before acquiring the lock, but can change before the lock is acquired. The improper locking (CWE-667) is the cause of the race condition.\n\n## Summary of Analysis\nThe analysis is based on the provided evidence, which includes the vulnerability description and the CVE reference links content summary. The key phrase \"race condition\" in the vulnerability description and the description of the interaction between `evict_inodes()` and `iput()` strongly support the selection of CWE-362 as the primary CWE.\n\nThe evidence includes:\n> **Root Cause:** The root cause is a **race condition** in the Linux kernel's virtual file system (VFS) layer, specifically between the `evict_inodes()` function (which is called during superblock shutdown) and the combination of `find_inode()` and `iput()` functions when accessing an inode.\n\nThe retriever results also support the selection of CWE-362 as the primary CWE.\n\nThe relationships between the CWEs influenced the final selection. CWE-367 is a more specific type of race condition, but it is not as directly applicable as CWE-362. CWE-667 is a contributing factor to the race condition, but it is not the primary weakness.\n\nThe selected CWEs are at the optimal level of specificity. CWE-362 is a class-level CWE, but it is the most accurate representation of the vulnerability. CWE-367 and CWE-667 are more specific, but they are not as essential to understanding the vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.78\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n### CWE Considerations\n\n*   CWE-775 **Missing Release of File Descriptor or Handle after Effective Lifetime**: This CWE is not appropriate because the vulnerability is not about failing to release a file descriptor or handle.\n*   CWE-364 **Signal Handler Race Condition**: This CWE is not appropriate because the vulnerability is not related to signal handlers.\n*   CWE-88 **Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')**: This CWE is not appropriate because the vulnerability is not about argument injection.\n*   CWE-476 **NULL Pointer Dereference**: This CWE is not appropriate because the vulnerability is not a null pointer dereference.\n*   CWE-863 **Incorrect Authorization**: This CWE is not appropriate because the vulnerability is not about incorrect authorization.\n*   CWE-363 **Race Condition Enabling Link Following**: This CWE is not appropriate because the vulnerability is not about link following.\n*   CWE-609 **Double-Checked Locking**: This CWE is not appropriate because the vulnerability is not about double-checked locking.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 1.0 | Class | Allowed-with-Review | Primary CWE. The vulnerability is fundamentally a race condition. |\n| CWE-367 | Time-of-check Time-of-use (TOCTOU) Race Condition | 0.8 | Base | Allowed | Secondary Candidate. A specific type of race condition. |\n| CWE-667 | Improper Locking | 0.7 | Class | Allowed-with-Review | Secondary Candidate. The race condition is caused by improper locking. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-362 **Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')**, which is a class-level CWE. A more specific type of race condition is CWE-367 **Time-of-check Time-of-use (TOCTOU) Race Condition**, which is a base-level CWE and a child of CWE-362. The race condition is caused by improper locking, which is CWE-667.\n\n```mermaid\ngraph TD\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    cwe367[\"CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\"]\n    cwe667[\"CWE-667: Improper Locking\"]\n    \n    cwe367 -->|CHILDOF| cwe362\n    cwe667 -->|RELATED| cwe362\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe362 primary\n    class cwe367,cwe667 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a **race condition** (CWE-362) due to **improper synchronization** when accessing inodes. Specifically, the `evict_inodes()` function and the `iput()` function are racing. This leads to a double eviction, which causes a kernel panic. The TOCTOU (CWE-367) aspect comes from the fact that the `i_count` is checked before acquiring the lock, but can change before the lock is acquired. The improper locking (CWE-667) is the cause of the race condition.\n\n## Summary of Analysis\nThe analysis is based on the provided evidence, which includes the vulnerability description and the CVE reference links content summary. The key phrase \"race condition\" in the vulnerability description and the description of the interaction between `evict_inodes()` and `iput()` strongly support the selection of CWE-362 as the primary CWE.\n\nThe evidence includes:\n> **Root Cause:** The root cause is a **race condition** in the Linux kernel's virtual file system (VFS) layer, specifically between the `evict_inodes()` function (which is called during superblock shutdown) and the combination of `find_inode()` and `iput()` functions when accessing an inode.\n\nThe retriever results also support the selection of CWE-362 as the primary CWE.\n\nThe relationships between the CWEs influenced the final selection. CWE-367 is a more specific type of race condition, but it is not as directly applicable as CWE-362. CWE-667 is a contributing factor to the race condition, but it is not the primary weakness.\n\nThe selected CWEs are at the optimal level of specificity. CWE-362 is a class-level CWE, but it is the most accurate representation of the vulnerability. CWE-367 and CWE-667 are more specific, but they are not as essential to understanding the vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.78\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n### CWE Considerations\n\n*   CWE-775 **Missing Release of File Descriptor or Handle after Effective Lifetime**: This CWE is not appropriate because the vulnerability is not about failing to release a file descriptor or handle.\n*   CWE-364 **Signal Handler Race Condition**: This CWE is not appropriate because the vulnerability is not related to signal handlers.\n*   CWE-88 **Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')**: This CWE is not appropriate because the vulnerability is not about argument injection.\n*   CWE-476 **NULL Pointer Dereference**: This CWE is not appropriate because the vulnerability is not a null pointer dereference.\n*   CWE-863 **Incorrect Authorization**: This CWE is not appropriate because the vulnerability is not about incorrect authorization.\n*   CWE-363 **Race Condition Enabling Link Following**: This CWE is not appropriate because the vulnerability is not about link following.\n*   CWE-609 **Double-Checked Locking**: This CWE is not appropriate because the vulnerability is not about double-checked locking.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-863:**\n- 863 (Incorrect Authorization) - ROOT\n\n\n**Chain starting from CWE-476:**\n- 476 (NULL Pointer Dereference) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Race Condition",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "775",
        "name": "Missing Release of File Descriptor or Handle after Effective Lifetime",
        "source": "sparse"
      },
      "similarity": 699.050451970638
    },
    {
      "metadata": {
        "doc_id": "367",
        "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
        "source": "sparse"
      },
      "similarity": 532.4420638599396
    },
    {
      "metadata": {
        "doc_id": "667",
        "name": "Improper Locking",
        "source": "sparse"
      },
      "similarity": 503.15305955723454
    },
    {
      "metadata": {
        "doc_id": "364",
        "name": "Signal Handler Race Condition",
        "source": "sparse"
      },
      "similarity": 480.8866089060906
    },
    {
      "metadata": {
        "doc_id": "88",
        "name": "Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
        "source": "sparse"
      },
      "similarity": 473.437078830149
    },
    {
      "metadata": {
        "doc_id": "476",
        "name": "NULL Pointer Dereference",
        "source": "sparse"
      },
      "similarity": 466.1385786411338
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 460.7027883389271
    },
    {
      "metadata": {
        "doc_id": "363",
        "name": "Race Condition Enabling Link Following",
        "type": "Base",
        "original_content": "The product checks the status of a file or directory before accessing it, which produces a race condition in which the file can be replaced with a link before the access is performed, causing the product to access the wrong file.",
        "keyphrase_source": "rootcause:race condition",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.4698383783952265
          }
        }
      },
      "similarity": 0.4698383783952265
    },
    {
      "doc_id": "609",
      "text": "CWE-609: Double-Checked Locking",
      "score": 2.8651999999999997,
      "metadata": {
        "doc_id": "609",
        "name": "Double-Checked Locking",
        "type": "base",
        "original_content": "CWE-609: Double-Checked Locking",
        "relationships": [
          {
            "source_id": "609",
            "target_id": "367",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "609",
            "target_id": "667",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "667",
            "target_id": "609",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "367",
            "target_id": "609",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "abstraction_path": 0.7200000000000001,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "367",
                  "609",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "367"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "667",
                  "609",
                  "PARENTOF"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "abstraction_path_down",
              "source": "667"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "367",
                  "609",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "367"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "609",
                  "367",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "367"
            }
          }
        },
        "abstraction_level": "base",
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.8651999999999997
          }
        }
      },
      "similarity": 2.8651999999999997
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-863",
      "CWE-476",
      "CWE-88",
      "CWE-775",
      "CWE-667",
      "CWE-363",
      "CWE-364",
      "CWE-362",
      "CWE-609",
      "CWE-367"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}