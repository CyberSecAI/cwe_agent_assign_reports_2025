{
  "cve_id": "CVE-2024-46750",
  "description": "In the Linux kernel, the following vulnerability has been resolved PCI Add **missing bridge lock** to pci_bus_lock() One of the true positives that the cfg_access_lock lockdep effort identified is this sequence WARNING CPU 14 PID 1 at drivers/pci/pci.c4886 pci_bridge_secondary_bus_reset+0x5d/0x70 RIP 0010pci_bridge_secondary_bus_reset+0x5d/0x70 Call Trace ? __warn+0x8c/0x190 ? pci_bridge_secondary_bus_reset+0x5d/0x70 ? report_bug+0x1f8/0x200 ? handle_bug+0x3c/0x70 ? exc_invalid_op+0x18/0x70 ? asm_exc_invalid_op+0x1a/0x20 ? pci_bridge_secondary_bus_reset+0x5d/0x70 pci_reset_bus+0x1d8/0x270 vmd_probe+0x778/0xa10 pci_device_probe+0x95/0x120 Where pci_reset_bus() users are triggering unlocked secondary bus resets. Ironically pci_bus_reset(), several calls down from pci_reset_bus(), uses pci_bus_lock() before issuing the reset which locks everything *but* the bridge itself. For the same motivation as adding bridge = pci_upstream_bridge(dev) if (bridge) pci_dev_lock(bridge) to pci_reset_function() for the bus and cxl_bus reset cases, add pci_dev_lock() for @bus->self to pci_bus_lock(). [bhelgaas squash in recursive locking deadlock fix from Keith Busch https//lore.kernel.org/r/20240711193650.701834-1-kbusch@meta.com]",
  "key_phrases": {
    "rootcause": "missing bridge lock",
    "weakness": "",
    "impact": "unlocked secondary bus resets",
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": "pci_bus_lock() in PCI bridge driver"
  },
  "reference_content": "Based on the provided information, here's an analysis of the vulnerability:\n\n**Root Cause:**\n\nThe root cause is a missing lock in the `pci_bus_lock()` function within the Linux kernel's PCI subsystem. Specifically, the function was locking all PCI devices on a bus, including subordinate buses, but it was neglecting to lock the bridge device itself (`bus->self`). This oversight created a race condition where a secondary bus reset could be triggered without the bridge being locked, leading to potential corruption and system instability.\n\n**Weaknesses/Vulnerabilities Present:**\n\n- **Missing Lock:** The primary weakness is the absence of a lock on the PCI bridge device within `pci_bus_lock()`.\n- **Race Condition:** This missing lock leads to a race condition where code paths, such as `pci_reset_bus()` which are users of secondary bus resets, can operate on the PCI bus hierarchy without the necessary bridge lock.\n\n**Impact of Exploitation:**\n\n- **System Instability:** Unlocked secondary bus resets can lead to system instability, potentially causing crashes or data corruption.\n- **Undefined Behavior:** Operating on the PCI bus hierarchy without proper locking could result in undefined behavior due to concurrent access.\n- **Lockdep Warnings:** The kernel's lock dependency checker (`lockdep`) identifies the issue and issues warnings.\n\n**Attack Vectors:**\n\n- **Triggering Secondary Bus Resets:** The attack vector involves triggering a secondary bus reset while the bridge is unlocked. This could occur through various mechanisms that invoke `pci_reset_bus()` or related functions.\n\n**Required Attacker Capabilities/Position:**\n\n- **Kernel-level Access:** The attacker would need to have sufficient privileges to trigger a secondary PCI bus reset, which usually requires kernel-level or device driver access.\n- **Specific Hardware:** The vulnerability is related to PCI bridge devices, so an attacker would need to interact with a system having such a bridge and be able to influence device reset operations.\n\n**Technical Details:**\n\n- The patch adds `pci_dev_lock(bus->self)` at the beginning of the `pci_bus_lock()` function to lock the bridge.\n- Corresponding `pci_dev_unlock(bus->self)` is added to `pci_bus_unlock()` and the `unlock:` label in `pci_bus_trylock()`\n- The fix also adds a similar locking of the parent bridge to `pci_slot_lock()` and `pci_slot_trylock()`.\n- The vulnerability was discovered due to the `cfg_access_lock` lockdep effort, which identified the missing lock in the following sequence leading to a warning:\n```\nWARNING: CPU: 14 PID: 1 at drivers/pci/pci.c:4886 pci_bridge_secondary_bus_reset+0x5d/0x70\nRIP: 0010:pci_bridge_secondary_bus_reset+0x5d/0x70\nCall Trace:\n<TASK>\n? __warn+0x8c/0x190\n? pci_bridge_secondary_bus_reset+0x5d/0x70\n? report_bug+0x1f8/0x200\n? handle_bug+0x3c/0x70\n? exc_invalid_op+0x18/0x70\n? asm_exc_invalid_op+0x1a/0x20\n? pci_bridge_secondary_bus_reset+0x5d/0x70\npci_reset_bus+0x1d8/0x270\nvmd_probe+0x778/0xa10\npci_device_probe+0x95/0x120\n```\nThis indicates that `pci_reset_bus()` users were triggering unlocked secondary bus resets.\n- The commit message explains that the fix mirrors the locking already in place for `pci_reset_function()` for \"bus\" and \"cxl_bus\" reset cases.\n- Additionally, a recursive locking deadlock fix was squashed in to properly lock parent buses and prevent potential deadlocks.\n\nThis analysis provides a comprehensive view of the vulnerability based on the provided content, which is consistent with the official description, if it becomes available.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-667 | Improper Locking | 1.0 | Class | Primary | Allowed-with-Review |\n| CWE-833 | Deadlock | 0.7 | Base | Secondary | Allowed |\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.6 | Class | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is **CWE-667 Improper Locking**. It is a class-level CWE, which can be related to **CWE-833 Deadlock** and **CWE-362 Race Condition**. The vulnerability description highlights a **missing bridge lock** leading to unlocked secondary bus resets, which aligns with the concept of improper locking. **CWE-833 Deadlock** and **CWE-362 Race Condition** are potential consequences of the **missing lock** because of the unlocked secondary bus resets that occurred.\n\n```mermaid\ngraph TD\n    cwe667[\"CWE-667: Improper Locking\"]\n    cwe833[\"CWE-833: Deadlock\"]\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n\n    cwe833 -->|PEEROF| cwe667\n    cwe362 -->|PEEROF| cwe667\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe667 primary\n    class cwe833,cwe362 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **missing bridge lock** (**CWE-667**), leading to unlocked secondary bus resets. This can result in a **race condition** (**CWE-362**) where multiple threads access the shared resource (PCI bus) concurrently without proper synchronization. In some cases, this could lead to a **deadlock** (**CWE-833**) if threads are waiting for each other to release locks.\n\n## Summary of Analysis\nThe primary CWE is **CWE-667 Improper Locking** because the root cause of the vulnerability is the **missing bridge lock** in the `pci_bus_lock()` function. The vulnerability description and CVE reference links content summary both explicitly mention the **missing lock** as the cause of the issue. The lockdep warnings also indicate a locking issue.\n**CWE-833 Deadlock** and **CWE-362 Race Condition** are included as potential consequences of the **missing lock**, but they are secondary to the main issue.\n\nThe CWEs that were considered but not used include **CWE-787 Out-of-bounds Write**, **CWE-119 Improper Restriction of Operations within the Bounds of a Memory Buffer**, **CWE-129 Improper Validation of Array Index**, and **CWE-1285 Improper Validation of Specified Index, Position, or Offset in Input**. These CWEs were not chosen because the vulnerability is not related to buffer overflows, array indexing, or input validation. The core issue is the **missing lock**, which allows for concurrent access to shared resources without proper synchronization.\n\nThe selected CWEs are at the optimal level of specificity because they accurately represent the root cause and potential consequences of the vulnerability. **CWE-667 Improper Locking** is a Class, but accurately reflects the **missing lock** root cause. **CWE-833 Deadlock** and **CWE-362 Race Condition** describe the potential consequences of the **missing lock**.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n**EVIDENCE:** The vulnerability description explicitly states \"**missing bridge lock**\". The description of CWE-667 states \"The product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\".\n\n## CWE-833: Deadlock\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**EVIDENCE:** The vulnerability description mentions a \"recursive locking deadlock fix\". This suggests that a deadlock could potentially occur as a result of the **missing lock**.\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n**EVIDENCE:** The CVE Reference Links Content Summary mentions \"This missing lock leads to a race condition where code paths, such as `pci_reset_bus()` which are users of secondary bus resets, can operate on the PCI bus hierarchy without the necessary bridge lock.\". The **missing lock** creates a race condition scenario.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-667 | Improper Locking | 1.0 | Class | Primary | Allowed-with-Review |\n| CWE-833 | Deadlock | 0.7 | Base | Secondary | Allowed |\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.6 | Class | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is **CWE-667 Improper Locking**. It is a class-level CWE, which can be related to **CWE-833 Deadlock** and **CWE-362 Race Condition**. The vulnerability description highlights a **missing bridge lock** leading to unlocked secondary bus resets, which aligns with the concept of improper locking. **CWE-833 Deadlock** and **CWE-362 Race Condition** are potential consequences of the **missing lock** because of the unlocked secondary bus resets that occurred.\n\n```mermaid\ngraph TD\n    cwe667[\"CWE-667: Improper Locking\"]\n    cwe833[\"CWE-833: Deadlock\"]\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n\n    cwe833 -->|PEEROF| cwe667\n    cwe362 -->|PEEROF| cwe667\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe667 primary\n    class cwe833,cwe362 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **missing bridge lock** (**CWE-667**), leading to unlocked secondary bus resets. This can result in a **race condition** (**CWE-362**) where multiple threads access the shared resource (PCI bus) concurrently without proper synchronization. In some cases, this could lead to a **deadlock** (**CWE-833**) if threads are waiting for each other to release locks.\n\n## Summary of Analysis\nThe primary CWE is **CWE-667 Improper Locking** because the root cause of the vulnerability is the **missing bridge lock** in the `pci_bus_lock()` function. The vulnerability description and CVE reference links content summary both explicitly mention the **missing lock** as the cause of the issue. The lockdep warnings also indicate a locking issue.\n**CWE-833 Deadlock** and **CWE-362 Race Condition** are included as potential consequences of the **missing lock**, but they are secondary to the main issue.\n\nThe CWEs that were considered but not used include **CWE-787 Out-of-bounds Write**, **CWE-119 Improper Restriction of Operations within the Bounds of a Memory Buffer**, **CWE-129 Improper Validation of Array Index**, and **CWE-1285 Improper Validation of Specified Index, Position, or Offset in Input**. These CWEs were not chosen because the vulnerability is not related to buffer overflows, array indexing, or input validation. The core issue is the **missing lock**, which allows for concurrent access to shared resources without proper synchronization.\n\nThe selected CWEs are at the optimal level of specificity because they accurately represent the root cause and potential consequences of the vulnerability. **CWE-667 Improper Locking** is a Class, but accurately reflects the **missing lock** root cause. **CWE-833 Deadlock** and **CWE-362 Race Condition** describe the potential consequences of the **missing lock**.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n**EVIDENCE:** The vulnerability description explicitly states \"**missing bridge lock**\". The description of CWE-667 states \"The product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\".\n\n## CWE-833: Deadlock\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**EVIDENCE:** The vulnerability description mentions a \"recursive locking deadlock fix\". This suggests that a deadlock could potentially occur as a result of the **missing lock**.\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n**EVIDENCE:** The CVE Reference Links Content Summary mentions \"This missing lock leads to a race condition where code paths, such as `pci_reset_bus()` which are users of secondary bus resets, can operate on the PCI bus hierarchy without the necessary bridge lock.\". The **missing lock** creates a race condition scenario.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-667:**\n- 667 (Improper Locking) - ROOT\n\n\n**Chain starting from CWE-833:**\n- 833 (Deadlock) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "667",
        "name": "Improper Locking",
        "source": "sparse"
      },
      "similarity": 469.1948192537649
    },
    {
      "metadata": {
        "doc_id": "1292",
        "name": "Incorrect Conversion of Security Identifiers",
        "source": "sparse"
      },
      "similarity": 465.8148912235414
    },
    {
      "metadata": {
        "doc_id": "1317",
        "name": "Improper Access Control in Fabric Bridge",
        "source": "sparse"
      },
      "similarity": 458.21049675591007
    },
    {
      "metadata": {
        "doc_id": "321",
        "name": "Use of Hard-coded Cryptographic Key",
        "source": "sparse"
      },
      "similarity": 436.77097389448966
    },
    {
      "metadata": {
        "doc_id": "732",
        "name": "Incorrect Permission Assignment for Critical Resource",
        "source": "sparse"
      },
      "similarity": 436.3349212728885
    },
    {
      "metadata": {
        "doc_id": "787",
        "name": "Out-of-bounds Write",
        "source": "sparse"
      },
      "similarity": 430.39879007875214
    },
    {
      "metadata": {
        "doc_id": "833",
        "name": "Deadlock",
        "source": "sparse"
      },
      "similarity": 426.5447512236824
    },
    {
      "metadata": {
        "doc_id": "401",
        "name": "Missing Release of Memory after Effective Lifetime",
        "source": "sparse"
      },
      "similarity": 422.5437856355965
    },
    {
      "metadata": {
        "doc_id": "1233",
        "name": "Security-Sensitive Hardware Controls with Missing Lock Bit Protection",
        "type": "Base",
        "original_content": "The product uses a register lock bit protection mechanism, but it does not ensure that the lock bit prevents modification of system registers or controls that perform changes to important hardware system configuration.",
        "keyphrase_source": "rootcause:missing bridge lock",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5374078238407181,
            "graph": 1.7182132016291622
          }
        }
      },
      "similarity": 0.5374078238407181
    },
    {
      "doc_id": "259",
      "text": "CWE-259: Use of Hard-coded Password",
      "score": 2.172,
      "metadata": {
        "doc_id": "259",
        "name": "Use of Hard-coded Password",
        "type": "variant",
        "original_content": "CWE-259: Use of Hard-coded Password",
        "relationships": [
          {
            "source_id": "259",
            "target_id": "656",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "259",
            "target_id": "257",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "259",
            "target_id": "321",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "259",
            "target_id": "798",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1340"
            }
          },
          {
            "source_id": "259",
            "target_id": "798",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1305"
            }
          },
          {
            "source_id": "259",
            "target_id": "798",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "798",
            "target_id": "259",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "656",
            "target_id": "259",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "257",
            "target_id": "259",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 0.7,
          "sequence_path": 0.8,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.2,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "259",
                  "321",
                  "PEEROF"
                ]
              ],
              "score": 0.7,
              "type": "relationship_chain",
              "source": "321"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "321",
                  "656",
                  "CANFOLLOW"
                ],
                [
                  "656",
                  "259",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "vulnerability_sequence_forward",
              "source": "321"
            },
            "peer_relationship": {
              "path": [
                [
                  "259",
                  "321",
                  "PEEROF"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "321"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.172
          }
        }
      },
      "similarity": 2.172
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-667",
      "CWE-833",
      "CWE-787",
      "CWE-1285",
      "CWE-362",
      "CWE-129",
      "CWE-119"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}