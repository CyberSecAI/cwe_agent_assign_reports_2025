{
  "cve_id": "CVE-2025-37785",
  "description": "In the Linux kernel, the following vulnerability has been resolved ext4 fix OOB read when checking dotdot dir Mounting a corrupted filesystem with directory which contains . dir entry with rec_len == block size results in out-of-bounds read (later on, when the corrupted directory is removed). ext4_empty_dir() assumes every ext4 directory contains at least . and .. as directory entries in the first data block. It first loads the . dir entry, performs sanity checks by calling ext4_check_dir_entry() and then uses its rec_len member to compute the location of .. dir entry (in ext4_next_entry). It assumes the .. dir entry fits into the same data block. If the rec_len of . is precisely one block (4KB), it slips through the sanity checks (it is considered the last directory entry in the data block) and leaves struct ext4_dir_entry_2 *de point exactly past the memory slot allocated to the data block. The following call to ext4_check_dir_entry() on new value of de then dereferences this pointer which results in out-of-bounds mem access. Fix this by extending __ext4_check_dir_entry() to check for . dir entries that reach the end of data block. Make sure to ignore the phony dir entries for checksum (by checking name_len for non-zero). Note This is reported by KASAN as **use-after-free** in case another structure was recently freed from the slot past the bound, but it is really an OOB read. This issue was found by syzkaller tool. Call Trace [ 38.594108] BUG KASAN slab-**use-after-free** in __ext4_check_dir_entry+0x67e/0x710 [ 38.594649] Read of size 2 at addr ffff88802b41a004 by task syz-executor/5375 [ 38.595158] [ 38.595288] CPU 0 UID 0 PID 5375 Comm syz-executor Not tainted 6.14.0-rc7 #1 [ 38.595298] Hardware name QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.16.3-0-ga6ed6b701f0a-prebuilt.qemu.org 04/01/2014 [ 38.595304] Call Trace [ 38.595308] [ 38.595311] dump_stack_lvl+0xa7/0xd0 [ 38.595325] print_address_description.constprop.0+0x2c/0x3f0 [ 38.595339] ? __ext4_check_dir_entry+0x67e/0x710 [ 38.595349] print_report+0xaa/0x250 [ 38.595359] ? __ext4_check_dir_entry+0x67e/0x710 [ 38.595368] ? kasan_addr_to_slab+0x9/0x90 [ 38.595378] kasan_report+0xab/0xe0 [ 38.595389] ? __ext4_check_dir_entry+0x67e/0x710 [ 38.595400] __ext4_check_dir_entry+0x67e/0x710 [ 38.595410] ext4_empty_dir+0x465/0x990 [ 38.595421] ? __pfx_ext4_empty_dir+0x10/0x10 [ 38.595432] ext4_rmdir.part.0+0x29a/0xd10 [ 38.595441] ? __dquot_initialize+0x2a7/0xbf0 [ 38.595455] ? __pfx_ext4_rmdir.part.0+0x10/0x10 [ 38.595464] ? __pfx___dquot_initialize+0x10/0x10 [ 38.595478] ? down_write+0xdb/0x140 [ 38.595487] ? __pfx_down_write+0x10/0x10 [ 38.595497] ext4_rmdir+0xee/0x140 [ 38.595506] vfs_rmdir+0x209/0x670 [ 38.595517] ? lookup_one_qstr_excl+0x3b/0x190 [ 38.595529] do_rmdir+0x363/0x3c0 [ 38.595537] ? __pfx_do_rmdir+0x10/0x10 [ 38.595544] ? strncpy_from_user+0x1ff/0x2e0 [ 38.595561] __x64_sys_unlinkat+0xf0/0x130 [ 38.595570] do_syscall_64+0x5b/0x180 [ 38.595583] entry_SYSCALL_64_after_hwframe+0x76/0x7e",
  "key_phrases": {
    "rootcause": "",
    "weakness": "use-after-free",
    "impact": "out-of-bounds read",
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": "ext4"
  },
  "reference_content": null,
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-125 | Out-of-bounds Read | 0.9 | Base | Primary | Allowed |\n| CWE-416 | Use After Free | 0.7 | Variant | Secondary Candidate | Allowed |\n| CWE-805 | Buffer Access with Incorrect Length Value | 0.6 | Base | Secondary Candidate | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary relationship that influenced the CWE selection was the hierarchical relationship. CWE-125, Out-of-bounds Read, is the direct result of dereferencing a pointer that points past the allocated memory, caused by a faulty length check on the '.' directory entry. While a **use-after-free** condition is reported, the root cause is the **out-of-bounds read**.\n\n```mermaid\ngraph TD\n    cwe125[\"CWE-125: Out-of-bounds Read\"]\n    cwe416[\"CWE-416: Use After Free\"]\n    cwe805[\"CWE-805: Buffer Access with Incorrect Length Value\"]\n\n    cwe125\n    cwe416\n    cwe805\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe125 primary\n    class cwe416,cwe805 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the incorrect calculation of the directory entry length, leading to the pointer arithmetic placing the pointer out of bounds. This out-of-bounds pointer is then dereferenced, causing an **out-of-bounds read**. In some cases, the memory past the boundary might have been recently freed leading to the KASAN report of **use-after-free**, however, the root cause remains the **out-of-bounds read**.\n\n## Summary of Analysis\nThe initial assessment focused on the reported **use-after-free** condition. However, further analysis of the vulnerability description and the call trace clearly indicates that the root cause is an **out-of-bounds read** due to an incorrect directory entry length check. The \"**use-after-free**\" is a consequence of reading from memory that may have been recently freed, but the primary issue is accessing memory outside the allocated buffer.\n\nThe vulnerability description states: \"Mounting a corrupted filesystem with directory which contains . dir entry with rec_len == block size results in **out-of-bounds read** (later on, when the corrupted directory is removed).\" and \"Note This is reported by KASAN as **use-after-free** in case another structure was recently freed from the slot past the bound, but it is really an **OOB read**.\" This evidence strongly supports the selection of CWE-125 as the primary weakness.\n\nCWE-125 is the most specific and accurate representation of the vulnerability based on the provided evidence.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-125: Out-of-bounds Read\n**Abstraction Level**: Base\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nThe product reads data past the end, or before the beginning, of the intended buffer.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-416: Use After Free\n**Abstraction Level**: Variant\n**Similarity Score**: 1.00\n**Source**: Retriever Results\n\n**Description**: The product accesses memory location after it has been freed\n\n**Mapping Guidance**:\n- Usage: Allowed\n\n## CWE-805: Buffer Access with Incorrect Length Value\n**Abstraction Level**: Base\n**Similarity Score**: 775.57\n**Source**: sparse\n\n**Description**:\nThe product uses a sequential operation to read or write a buffer, but it uses an incorrect length value that causes it to access memory that is outside of the bounds of the buffer.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-125 | Out-of-bounds Read | 0.9 | Base | Primary | Allowed |\n| CWE-416 | Use After Free | 0.7 | Variant | Secondary Candidate | Allowed |\n| CWE-805 | Buffer Access with Incorrect Length Value | 0.6 | Base | Secondary Candidate | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary relationship that influenced the CWE selection was the hierarchical relationship. CWE-125, Out-of-bounds Read, is the direct result of dereferencing a pointer that points past the allocated memory, caused by a faulty length check on the '.' directory entry. While a **use-after-free** condition is reported, the root cause is the **out-of-bounds read**.\n\n```mermaid\ngraph TD\n    cwe125[\"CWE-125: Out-of-bounds Read\"]\n    cwe416[\"CWE-416: Use After Free\"]\n    cwe805[\"CWE-805: Buffer Access with Incorrect Length Value\"]\n\n    cwe125\n    cwe416\n    cwe805\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe125 primary\n    class cwe416,cwe805 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the incorrect calculation of the directory entry length, leading to the pointer arithmetic placing the pointer out of bounds. This out-of-bounds pointer is then dereferenced, causing an **out-of-bounds read**. In some cases, the memory past the boundary might have been recently freed leading to the KASAN report of **use-after-free**, however, the root cause remains the **out-of-bounds read**.\n\n## Summary of Analysis\nThe initial assessment focused on the reported **use-after-free** condition. However, further analysis of the vulnerability description and the call trace clearly indicates that the root cause is an **out-of-bounds read** due to an incorrect directory entry length check. The \"**use-after-free**\" is a consequence of reading from memory that may have been recently freed, but the primary issue is accessing memory outside the allocated buffer.\n\nThe vulnerability description states: \"Mounting a corrupted filesystem with directory which contains . dir entry with rec_len == block size results in **out-of-bounds read** (later on, when the corrupted directory is removed).\" and \"Note This is reported by KASAN as **use-after-free** in case another structure was recently freed from the slot past the bound, but it is really an **OOB read**.\" This evidence strongly supports the selection of CWE-125 as the primary weakness.\n\nCWE-125 is the most specific and accurate representation of the vulnerability based on the provided evidence.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-125: Out-of-bounds Read\n**Abstraction Level**: Base\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nThe product reads data past the end, or before the beginning, of the intended buffer.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-416: Use After Free\n**Abstraction Level**: Variant\n**Similarity Score**: 1.00\n**Source**: Retriever Results\n\n**Description**: The product accesses memory location after it has been freed\n\n**Mapping Guidance**:\n- Usage: Allowed\n\n## CWE-805: Buffer Access with Incorrect Length Value\n**Abstraction Level**: Base\n**Similarity Score**: 775.57\n**Source**: sparse\n\n**Description**:\nThe product uses a sequential operation to read or write a buffer, but it uses an incorrect length value that causes it to access memory that is outside of the bounds of the buffer.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-416:**\n- 416 (Use After Free) - ROOT\n\n\n**Chain starting from CWE-805:**\n- 805 (Buffer Access with Incorrect Length Value) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "416",
        "name": "Use After Free",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Use-After-Free",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "805",
        "name": "Buffer Access with Incorrect Length Value",
        "source": "sparse"
      },
      "similarity": 1441.9629333002626
    },
    {
      "metadata": {
        "doc_id": "359",
        "name": "Exposure of Private Personal Information to an Unauthorized Actor",
        "source": "sparse"
      },
      "similarity": 1352.2639374346002
    },
    {
      "metadata": {
        "doc_id": "1390",
        "name": "Weak Authentication",
        "source": "sparse"
      },
      "similarity": 1308.9915188073646
    },
    {
      "metadata": {
        "doc_id": "770",
        "name": "Allocation of Resources Without Limits or Throttling",
        "source": "sparse"
      },
      "similarity": 1247.2055427949085
    },
    {
      "metadata": {
        "doc_id": "94",
        "name": "Improper Control of Generation of Code ('Code Injection')",
        "source": "sparse"
      },
      "similarity": 1232.7801992149884
    },
    {
      "metadata": {
        "doc_id": "190",
        "name": "Integer Overflow or Wraparound",
        "source": "sparse"
      },
      "similarity": 1210.6842955688214
    },
    {
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "source": "sparse"
      },
      "similarity": 1208.9573145322672
    },
    {
      "metadata": {
        "doc_id": "909",
        "name": "Missing Initialization of Resource",
        "type": "Class",
        "original_content": "The product does not initialize a critical resource.",
        "keyphrase_source": "weakness:use-after-free",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
          "comments": "Examine children of this entry to see if there is a better fit",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5498163662920618,
            "graph": 1.7624898285868928
          }
        }
      },
      "similarity": 0.5498163662920618
    },
    {
      "doc_id": "908",
      "text": "The product uses or accesses a resource that has not been initialized.",
      "score": 0.5620583990038153,
      "metadata": {
        "doc_id": "908",
        "name": "Use of Uninitialized Resource",
        "type": "Base",
        "extended_description": "When a resource has not been properly initialized, the product may behave unexpectedly. This may lead to a crash or invalid memory access, but the consequences vary depending on the type of resource and how it is used within the product.",
        "alternate_terms": [],
        "original_content": "The product uses or accesses a resource that has not been initialized.",
        "relationships": [
          {
            "source_id": "908",
            "target_id": "909",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "908",
            "target_id": "457",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "908",
            "target_id": "665",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "908",
            "target_id": "665",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "909",
            "target_id": "908",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "665",
            "target_id": "908",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "457",
            "target_id": "908",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "source": "graph",
        "sources": [
          "vector",
          "graph"
        ],
        "vector_score": 0.5620583990038153,
        "graph_score": 4.329000000000001,
        "score_components": {
          "relationship_chain": 1.0,
          "explicit_mention": 1.0,
          "abstraction_path": 0.9,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "909",
                  "908",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "909"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "909",
                  "908",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_forward",
              "source": "909"
            }
          }
        },
        "is_explicit": true,
        "abstraction_level": "base",
        "position": "after",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5310124119598378,
            "graph": 2.8222233596015265
          }
        }
      },
      "similarity": 2.8222233596015265
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-416",
      "CWE-805",
      "CWE-125"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}