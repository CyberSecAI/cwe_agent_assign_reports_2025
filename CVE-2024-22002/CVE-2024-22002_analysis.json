{
  "cve_id": "CVE-2024-22002",
  "description": "CORSAIR iCUE 5.9.105 with iCUE Murals on Windows allows unprivileged users to insert DLL files in the cuepkg-1.2.6 subdirectory of the installation directory.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "",
    "impact": "",
    "vector": "insert DLL files",
    "attacker": "unprivileged users",
    "product": "CORSAIR iCUE",
    "version": "5.9.105 with iCUE Murals",
    "component": "cuepkg-1.2.6 subdirectory"
  },
  "reference_content": "The provided content is related to CVE-2024-22002.\n\n**Root cause of vulnerability:**\nThe vulnerability is a DLL hijacking issue in CORSAIR iCUE v5.9.105 during the update process. The \"iCUEUpdateService\" service spawns \"cuepkg.exe\" with \"NT AUTHORITY\\SYSTEM\" privileges, and this process loads DLLs from the `\\cuepkg-1.2.6` directory. Since a regular user can create files in this directory, a malicious DLL can be placed there and loaded by `cuepkg.exe` with elevated privileges.\n\n**Weaknesses/vulnerabilities present:**\n- DLL Hijacking: The application loads DLLs from a user-writable directory, which allows an attacker to inject a malicious DLL.\n- Privilege Escalation: The vulnerable process runs with \"NT AUTHORITY\\SYSTEM\" privileges, enabling the attacker to gain elevated privileges by injecting a malicious DLL.\n\n**Impact of exploitation:**\nSuccessful exploitation allows an attacker to achieve local privilege escalation from a low-privileged user to SYSTEM level. This means the attacker can execute arbitrary code with the highest privileges on the system.\n\n**Attack vectors:**\nThe attack vector involves placing a malicious DLL (e.g., `MSASN1.dll`, `NTASN1.dll`, or `profapi.dll`) within the `\\cuepkg-1.2.6` directory of the iCUE installation. The vulnerable application loads these DLLs during its update process.\n\n**Required attacker capabilities/position:**\n- The attacker needs local access to the system.\n- The attacker must have write access to the `\\cuepkg-1.2.6` directory within the iCUE installation directory.\n- The attacker must be able to trigger the update process by either waiting for automatic updates or manually forcing an update check.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-427 | Uncontrolled Search Path Element | 0.9 | Base | Primary | Allowed |\n| CWE-266 | Incorrect Privilege Assignment | 0.7 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is **CWE-427 Uncontrolled Search Path Element**, where the application uses a search path that is modifiable by an unprivileged user. This allows for DLL hijacking. The secondary weakness is **CWE-266 Incorrect Privilege Assignment** because the service runs with elevated privileges (NT AUTHORITY\\SYSTEM) which is leveraged by the hijacked DLL.\n\n```mermaid\ngraph TD\n    cwe427[\"CWE-427: Uncontrolled Search Path Element\"]\n    cwe266[\"CWE-266: Incorrect Privilege Assignment\"]\n    \n    cwe427 -->|CANPRECEDE| cwe266\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe427 primary\n    class cwe266 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with the **CWE-427 Uncontrolled Search Path Element**, where an unprivileged user can write to the `cuepkg-1.2.6` directory. This allows for a malicious DLL to be placed in the directory. When `cuepkg.exe` is executed with elevated privileges (**CWE-266 Incorrect Privilege Assignment**), the malicious DLL is loaded, resulting in privilege escalation.\n\n## Summary of Analysis\nBased on the provided information, the primary root cause is **CWE-427 Uncontrolled Search Path Element** because the application uses a search path that can be modified by an unprivileged user. The CVE Reference Links Content Summary states: \"Since a regular user can create files in this directory, a malicious DLL can be placed there and loaded by `cuepkg.exe` with elevated privileges.\" The loading of the DLL with elevated privileges leads to **CWE-266 Incorrect Privilege Assignment**. This is further supported by the Retriever Results, where CWE-427 is listed as a potential match. The relationship between CWE-427 and CWE-266 is that the **uncontrolled search path** allows for the **incorrectly privileged process** to load the malicious DLL.\n\n**CWEs Considered But Not Used:**\n*   **CWE-732 Incorrect Permission Assignment for Critical Resource**: This was considered but not used as the root cause is the uncontrolled search path. While incorrect permissions are present, the ability for a low-privileged user to insert files into the directory is the primary weakness.\n*   **CWE-59 Improper Link Resolution Before File Access ('Link Following')**: This was considered because DLL hijacking can involve manipulating links. However, this vulnerability involves placing a malicious DLL directly into a directory used by the application, making CWE-427 a more accurate fit.\n*   **CWE-276 Incorrect Default Permissions**: This was considered but not used as it is not about incorrect default permissions during installation but about the permissions of a specific directory used during the update process.\n*   **CWE-73 External Control of File Name or Path**: This was considered, but the core issue isn't directly about external control of the file name or path, but the ability for an attacker to place a file in a trusted location.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-427 | Uncontrolled Search Path Element | 0.9 | Base | Primary | Allowed |\n| CWE-266 | Incorrect Privilege Assignment | 0.7 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is **CWE-427 Uncontrolled Search Path Element**, where the application uses a search path that is modifiable by an unprivileged user. This allows for DLL hijacking. The secondary weakness is **CWE-266 Incorrect Privilege Assignment** because the service runs with elevated privileges (NT AUTHORITY\\SYSTEM) which is leveraged by the hijacked DLL.\n\n```mermaid\ngraph TD\n    cwe427[\"CWE-427: Uncontrolled Search Path Element\"]\n    cwe266[\"CWE-266: Incorrect Privilege Assignment\"]\n    \n    cwe427 -->|CANPRECEDE| cwe266\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe427 primary\n    class cwe266 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with the **CWE-427 Uncontrolled Search Path Element**, where an unprivileged user can write to the `cuepkg-1.2.6` directory. This allows for a malicious DLL to be placed in the directory. When `cuepkg.exe` is executed with elevated privileges (**CWE-266 Incorrect Privilege Assignment**), the malicious DLL is loaded, resulting in privilege escalation.\n\n## Summary of Analysis\nBased on the provided information, the primary root cause is **CWE-427 Uncontrolled Search Path Element** because the application uses a search path that can be modified by an unprivileged user. The CVE Reference Links Content Summary states: \"Since a regular user can create files in this directory, a malicious DLL can be placed there and loaded by `cuepkg.exe` with elevated privileges.\" The loading of the DLL with elevated privileges leads to **CWE-266 Incorrect Privilege Assignment**. This is further supported by the Retriever Results, where CWE-427 is listed as a potential match. The relationship between CWE-427 and CWE-266 is that the **uncontrolled search path** allows for the **incorrectly privileged process** to load the malicious DLL.\n\n**CWEs Considered But Not Used:**\n*   **CWE-732 Incorrect Permission Assignment for Critical Resource**: This was considered but not used as the root cause is the uncontrolled search path. While incorrect permissions are present, the ability for a low-privileged user to insert files into the directory is the primary weakness.\n*   **CWE-59 Improper Link Resolution Before File Access ('Link Following')**: This was considered because DLL hijacking can involve manipulating links. However, this vulnerability involves placing a malicious DLL directly into a directory used by the application, making CWE-427 a more accurate fit.\n*   **CWE-276 Incorrect Default Permissions**: This was considered but not used as it is not about incorrect default permissions during installation but about the permissions of a specific directory used during the update process.\n*   **CWE-73 External Control of File Name or Path**: This was considered, but the core issue isn't directly about external control of the file name or path, but the ability for an attacker to place a file in a trusted location.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-427:**\n- 427 (Uncontrolled Search Path Element) - ROOT\n\n\n**Chain starting from CWE-732:**\n- 732 (Incorrect Permission Assignment for Critical Resource) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "732",
        "name": "Incorrect Permission Assignment for Critical Resource",
        "source": "sparse"
      },
      "similarity": 56.48242196542448
    },
    {
      "metadata": {
        "doc_id": "427",
        "name": "Uncontrolled Search Path Element",
        "source": "sparse"
      },
      "similarity": 55.39442840284953
    },
    {
      "metadata": {
        "doc_id": "276",
        "name": "Incorrect Default Permissions",
        "source": "sparse"
      },
      "similarity": 50.48903233988895
    },
    {
      "metadata": {
        "doc_id": "59",
        "name": "Improper Link Resolution Before File Access ('Link Following')",
        "source": "sparse"
      },
      "similarity": 47.81772606927362
    },
    {
      "metadata": {
        "doc_id": "379",
        "name": "Creation of Temporary File in Directory with Insecure Permissions",
        "source": "sparse"
      },
      "similarity": 45.81431206299479
    },
    {
      "metadata": {
        "doc_id": "23",
        "name": "Relative Path Traversal",
        "source": "sparse"
      },
      "similarity": 43.42233056258413
    },
    {
      "metadata": {
        "doc_id": "250",
        "name": "Execution with Unnecessary Privileges",
        "source": "sparse"
      },
      "similarity": 43.16186710972187
    },
    {
      "metadata": {
        "doc_id": "277",
        "name": "Insecure Inherited Permissions",
        "source": "sparse"
      },
      "similarity": 43.13403471000497
    },
    {
      "metadata": {
        "doc_id": "782",
        "name": "Exposed IOCTL with Insufficient Access Control",
        "type": "Variant",
        "original_content": "The product implements an IOCTL with functionality that should be restricted, but it does not properly enforce access control for the IOCTL.",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.4842041920037146
          }
        }
      },
      "similarity": 0.4842041920037146
    },
    {
      "doc_id": "73",
      "text": "The product allows user input to control or influence paths or file names that are used in filesystem operations.",
      "score": 0.5459381201332617,
      "metadata": {
        "doc_id": "73",
        "name": "External Control of File Name or Path",
        "type": "Base",
        "extended_description": "\n\nThis could allow an attacker to access or modify system files or other files that are critical to the application.\n\n\nPath manipulation errors occur when the following two conditions are met:\n\n```\n\t\t1. An attacker can specify a path used in an operation on the filesystem.\n\t\t2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.\n```\nFor example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.",
        "alternate_terms": [],
        "original_content": "The product allows user input to control or influence paths or file names that are used in filesystem operations.",
        "relationships": [
          {
            "source_id": "73",
            "target_id": "114",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "59",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "434",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "41",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "22",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "20",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "700"
            }
          },
          {
            "source_id": "73",
            "target_id": "610",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "642",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "99",
            "target_id": "73",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "642",
            "target_id": "73",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "610",
            "target_id": "73",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "59",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "41",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "22",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "20",
            "target_id": "73",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "700"
            }
          },
          {
            "source_id": "114",
            "target_id": "73",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "source": "graph",
        "sources": [
          "vector",
          "graph"
        ],
        "vector_score": 0.5459381201332617,
        "graph_score": 4.329000000000001,
        "score_components": {
          "relationship_chain": 1.0,
          "explicit_mention": 1.0,
          "abstraction_path": 0.9,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "59",
                  "73",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "59"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "59",
                  "73",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "59"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "73",
                  "59",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "59"
            }
          }
        },
        "is_explicit": true,
        "abstraction_level": "base",
        "position": "before",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.4212721062678977,
            "graph": 2.815775248053305
          }
        }
      },
      "similarity": 2.815775248053305
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-427",
      "CWE-732",
      "CWE-59",
      "CWE-73",
      "CWE-266",
      "CWE-276"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}