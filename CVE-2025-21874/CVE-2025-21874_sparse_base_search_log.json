{
  "method": "sparse_base",
  "query": "In the Linux kernel, the following vulnerability has been resolved dm-integrity Avoid divide by zero in table status in Inline mode In Inline mode, the journal is unused, and journal_sectors is zero. Calculating the journal watermark requires dividing by journal_sectors, which should be done only if the journal is configured. Otherwise, a simple table query (dmsetup table) can cause OOPS. This bug did not show on some systems, perhaps only due to compiler optimization. On my 32-bit testing machine, this reliably crashes with the following Oops divide error 0000",
  "keyphrases": {
    "base_query": "In the Linux kernel, the following vulnerability has been resolved dm-integrity Avoid divide by zero in table status in Inline mode In Inline mode, the journal is unused, and journal_sectors is zero. Calculating the journal watermark requires dividing by journal_sectors, which should be done only if the journal is configured. Otherwise, a simple table query (dmsetup table) can cause OOPS. This bug did not show on some systems, perhaps only due to compiler optimization. On my 32-bit testing machine, this reliably crashes with the following Oops divide error 0000"
  },
  "timestamp": "2025-07-12T09:57:05.204999",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "125",
      "name": "Out-of-bounds Read",
      "score": 144.48646928904338
    },
    {
      "doc_id": "401",
      "name": "Missing Release of Memory after Effective Lifetime",
      "score": 139.4869464705018
    },
    {
      "doc_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 138.11818377951545
    },
    {
      "doc_id": "190",
      "name": "Integer Overflow or Wraparound",
      "score": 134.46974341953063
    },
    {
      "doc_id": "909",
      "name": "Missing Initialization of Resource",
      "score": 131.76825905514744
    }
  ]
}