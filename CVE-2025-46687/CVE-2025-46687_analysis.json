{
  "cve_id": "CVE-2025-46687",
  "description": "quickjs-ng through 0.9.0 has a **missing length check** in JS_ReadString for a string, leading to a **heap-based buffer overflow**. QuickJS before 2025-04-26 is also affected.",
  "key_phrases": {
    "rootcause": "missing length check",
    "weakness": "heap-based buffer overflow",
    "impact": "",
    "vector": "",
    "attacker": "",
    "product": "QuickJS",
    "version": "before 2025-04-26",
    "component": ""
  },
  "reference_content": "CVE-2025-46687: PLACEHOLDER - Implement CVE description retrieval\n\nBased on the provided content, here's a breakdown of the vulnerabilities:\n\n**Vulnerability 1: Heap Buffer Overflow in String Deserialization (CVE-2025-46687 likely relates to this)**\n\n*   **Root cause:** Missing length check and bad size calculation in `JS_ReadString` when reading string data from bytecode. Specifically, an integer overflow occurs in the `get_leb128` function, leading to an incorrect length being used for memory allocation.\n*   **Weaknesses/vulnerabilities present:** Integer overflow, heap buffer overflow.\n*   **Impact of exploitation:**  Potential for arbitrary code execution due to memory corruption.\n*   **Attack vectors:** Crafted bytecode input.\n*   **Required attacker capabilities/position:** Ability to create malicious bytecode input.\n*   **Mitigation or fix:**  Add a check for potential overflow in `js_alloc_string_rt` before allocating memory.\n\n**Vulnerability 2: Heap Buffer Overflow in BigInt Deserialization (CVE-2025-46687 likely relates to this)**\n\n*   **Root cause:** Integer overflow in the LEB128 parsing within `JS_ReadBigInt`, leading to an undersized buffer allocation.\n*   **Weaknesses/vulnerabilities present:** Integer overflow, heap buffer overflow.\n*   **Impact of exploitation:** Potential for arbitrary code execution due to memory corruption.\n*   **Attack vectors:** Crafted input that triggers the integer overflow during BigInt deserialization.\n*   **Required attacker capabilities/position:** Ability to create malicious input.\n*   **Mitigation or fix:** The fix involves checking for potential overflows in the size calculation before allocating memory.\n\n**Additional Information:**\n\n*   The fixes for these vulnerabilities were cherry-picked from bellard/quickjs@1eb05e44fa and applied in quickjs-ng.\n*   The ASAN reports provide detailed information about the memory corruption occurring in both cases.\n*   The provided content indicates that the same vulnerability exists in both quickjs and quickjs-ng.\n*   The fuzzing example demonstrates how to reproduce the heap buffer overflow.\n\nThe content provides more detail than a typical CVE description, including ASAN reports, code snippets, and reproduction steps.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n\n| CWE ID  | CWE Name                                                                   | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| ------- | -------------------------------------------------------------------------- | ---------- | --------------------- | ------------------------------- | ------------------------------- |\n| CWE-122 | Heap-based Buffer Overflow                                                  | 0.9        | Variant               | Primary                         | Allowed                       |\n| CWE-190 | Integer Overflow or Wraparound                                            | 0.8        | Base                  | Secondary                       | Allowed                       |\n| CWE-131 | Incorrect Calculation of Buffer Size                                        | 0.7        | Base                  | Secondary                       | Allowed                       |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary weakness is a heap-based buffer overflow (CWE-122), which is a variant of the more general class of buffer overflows. This overflow is caused by an integer overflow (CWE-190) during the calculation of the buffer size, leading to an incorrect buffer size calculation (CWE-131). The integer overflow precedes the incorrect calculation, which in turn precedes the heap-based buffer overflow.\n\n```mermaid\ngraph TD\n    cwe190[\"CWE-190: Integer Overflow or Wraparound\"]\n    cwe131[\"CWE-131: Incorrect Calculation of Buffer Size\"]\n    cwe122[\"CWE-122: Heap-based Buffer Overflow\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations\"]\n\n    cwe122 -->|CHILDOF| cwe119\n    cwe131 -->|CHILDOF| cwe682[\"CWE-682: Incorrect Calculation\"]\n    cwe190 -->|CHILDOF| cwe682\n    cwe190 -->|CANPRECEDE| cwe131\n    cwe131 -->|CANPRECEDE| cwe122\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe122 primary\n    class cwe190,cwe131 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain begins with an integer overflow (CWE-190) during the calculation of the buffer size. This leads to an incorrect buffer size calculation (CWE-131), which subsequently results in a heap-based buffer overflow (CWE-122). The overflow can then lead to arbitrary code execution due to memory corruption.\n\n*   **CWE-190:** Integer Overflow or Wraparound (Root Cause)\n*   **CWE-131:** Incorrect Calculation of Buffer Size\n*   **CWE-122:** Heap-based Buffer Overflow (Impact)\n\n## Summary of Analysis\n\nThe primary vulnerability is a heap-based buffer overflow (CWE-122), resulting from an integer overflow (CWE-190) and subsequent incorrect buffer size calculation (CWE-131).\n\nEvidence:\n*   Vulnerability Description: \"... **missing length check** in JS_ReadString for a string, leading to a **heap-based buffer overflow**.\"\n*   CVE Reference Links Content Summary:\n    *   \"**Root cause:** Missing length check and bad size calculation in `JS_ReadString` when reading string data from bytecode. Specifically, an integer overflow occurs in the `get_leb128` function, leading to an incorrect length being used for memory allocation.\"\n    *   \"**Weaknesses/vulnerabilities present:** Integer overflow, heap buffer overflow.\"\n    *   \"**Root cause:** Integer overflow in the LEB128 parsing within `JS_ReadBigInt`, leading to an undersized buffer allocation.\"\n\nThe selection of CWE-122 is based on the clear statement of a heap-based buffer overflow in the vulnerability description and supporting details in the CVE reference. The integer overflow (CWE-190) and incorrect buffer size calculation (CWE-131) are contributing factors, and are included as secondary CWEs, because they represent the root causes leading to the overflow.\n\nThe chosen CWEs are at the optimal level of specificity because CWE-122 is a Variant that accurately describes the heap-based nature of the buffer overflow. CWE-190 and CWE-131 are Base level CWEs that represent the root causes.\n\nOther CWEs Considered but Not Used:\n\n*   CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer - This is a Class-level CWE that is too general. CWE-122, a variant of CWE-119, provides a more specific classification.\n*   CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') - This CWE is too specific as the overflow is not necessarily caused by a buffer copy operation.\n*   CWE-125: Out-of-bounds Read and CWE-787: Out-of-bounds Write - These CWEs describe the symptom of the overflow, not the root cause.\n*   CWE-1284: Improper Validation of Specified Quantity in Input - While related to the missing length check, the integer overflow and incorrect calculation are more direct causes of the overflow.\n*   CWE-193: Off-by-one Error - Not applicable as the error is not an off-by-one error.\n*   CWE-197: Numeric Truncation Error - Not applicable, as the error is an integer overflow, not truncation.\n*   CWE-130: Improper Handling of Length Parameter Inconsistency - Not applicable, as the primary issue is the incorrect calculation of the buffer size due to the integer overflow.\n*   CWE-674: Uncontrolled Recursion - Not related to this vulnerability.\n*   CWE-128: Wrap-around Error - Although similar to CWE-190, CWE-190 is a more direct match for the integer overflow condition.",
  "analysis_with_relationships": "# Summary\n\n| CWE ID  | CWE Name                                                                   | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| ------- | -------------------------------------------------------------------------- | ---------- | --------------------- | ------------------------------- | ------------------------------- |\n| CWE-122 | Heap-based Buffer Overflow                                                  | 0.9        | Variant               | Primary                         | Allowed                       |\n| CWE-190 | Integer Overflow or Wraparound                                            | 0.8        | Base                  | Secondary                       | Allowed                       |\n| CWE-131 | Incorrect Calculation of Buffer Size                                        | 0.7        | Base                  | Secondary                       | Allowed                       |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary weakness is a heap-based buffer overflow (CWE-122), which is a variant of the more general class of buffer overflows. This overflow is caused by an integer overflow (CWE-190) during the calculation of the buffer size, leading to an incorrect buffer size calculation (CWE-131). The integer overflow precedes the incorrect calculation, which in turn precedes the heap-based buffer overflow.\n\n```mermaid\ngraph TD\n    cwe190[\"CWE-190: Integer Overflow or Wraparound\"]\n    cwe131[\"CWE-131: Incorrect Calculation of Buffer Size\"]\n    cwe122[\"CWE-122: Heap-based Buffer Overflow\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations\"]\n\n    cwe122 -->|CHILDOF| cwe119\n    cwe131 -->|CHILDOF| cwe682[\"CWE-682: Incorrect Calculation\"]\n    cwe190 -->|CHILDOF| cwe682\n    cwe190 -->|CANPRECEDE| cwe131\n    cwe131 -->|CANPRECEDE| cwe122\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe122 primary\n    class cwe190,cwe131 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain begins with an integer overflow (CWE-190) during the calculation of the buffer size. This leads to an incorrect buffer size calculation (CWE-131), which subsequently results in a heap-based buffer overflow (CWE-122). The overflow can then lead to arbitrary code execution due to memory corruption.\n\n*   **CWE-190:** Integer Overflow or Wraparound (Root Cause)\n*   **CWE-131:** Incorrect Calculation of Buffer Size\n*   **CWE-122:** Heap-based Buffer Overflow (Impact)\n\n## Summary of Analysis\n\nThe primary vulnerability is a heap-based buffer overflow (CWE-122), resulting from an integer overflow (CWE-190) and subsequent incorrect buffer size calculation (CWE-131).\n\nEvidence:\n*   Vulnerability Description: \"... **missing length check** in JS_ReadString for a string, leading to a **heap-based buffer overflow**.\"\n*   CVE Reference Links Content Summary:\n    *   \"**Root cause:** Missing length check and bad size calculation in `JS_ReadString` when reading string data from bytecode. Specifically, an integer overflow occurs in the `get_leb128` function, leading to an incorrect length being used for memory allocation.\"\n    *   \"**Weaknesses/vulnerabilities present:** Integer overflow, heap buffer overflow.\"\n    *   \"**Root cause:** Integer overflow in the LEB128 parsing within `JS_ReadBigInt`, leading to an undersized buffer allocation.\"\n\nThe selection of CWE-122 is based on the clear statement of a heap-based buffer overflow in the vulnerability description and supporting details in the CVE reference. The integer overflow (CWE-190) and incorrect buffer size calculation (CWE-131) are contributing factors, and are included as secondary CWEs, because they represent the root causes leading to the overflow.\n\nThe chosen CWEs are at the optimal level of specificity because CWE-122 is a Variant that accurately describes the heap-based nature of the buffer overflow. CWE-190 and CWE-131 are Base level CWEs that represent the root causes.\n\nOther CWEs Considered but Not Used:\n\n*   CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer - This is a Class-level CWE that is too general. CWE-122, a variant of CWE-119, provides a more specific classification.\n*   CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') - This CWE is too specific as the overflow is not necessarily caused by a buffer copy operation.\n*   CWE-125: Out-of-bounds Read and CWE-787: Out-of-bounds Write - These CWEs describe the symptom of the overflow, not the root cause.\n*   CWE-1284: Improper Validation of Specified Quantity in Input - While related to the missing length check, the integer overflow and incorrect calculation are more direct causes of the overflow.\n*   CWE-193: Off-by-one Error - Not applicable as the error is not an off-by-one error.\n*   CWE-197: Numeric Truncation Error - Not applicable, as the error is an integer overflow, not truncation.\n*   CWE-130: Improper Handling of Length Parameter Inconsistency - Not applicable, as the primary issue is the incorrect calculation of the buffer size due to the integer overflow.\n*   CWE-674: Uncontrolled Recursion - Not related to this vulnerability.\n*   CWE-128: Wrap-around Error - Although similar to CWE-190, CWE-190 is a more direct match for the integer overflow condition.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-1284:**\n- 1284 (Improper Validation of Specified Quantity in Input) - ROOT\n\n\n**Chain starting from CWE-130:**\n- 130 (Improper Handling of Length Parameter Inconsistency) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "119",
        "name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Buffer Overflow",
        "match_reason": "term_in_phrase_whole_phrase"
      },
      "similarity": 800.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "190",
        "name": "Integer Overflow or Wraparound",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Overflow",
        "match_reason": "term_in_phrase_whole_phrase"
      },
      "similarity": 800.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "122",
        "name": "Heap-based Buffer Overflow",
        "source": "sparse"
      },
      "similarity": 222.42284077501253
    },
    {
      "metadata": {
        "doc_id": "1284",
        "name": "Improper Validation of Specified Quantity in Input",
        "source": "sparse"
      },
      "similarity": 221.2863189486013
    },
    {
      "metadata": {
        "doc_id": "193",
        "name": "Off-by-one Error",
        "source": "sparse"
      },
      "similarity": 213.2408572569305
    },
    {
      "metadata": {
        "doc_id": "126",
        "name": "Buffer Over-read",
        "source": "sparse"
      },
      "similarity": 208.39528750052926
    },
    {
      "metadata": {
        "doc_id": "197",
        "name": "Numeric Truncation Error",
        "source": "sparse"
      },
      "similarity": 205.71548139191242
    },
    {
      "metadata": {
        "doc_id": "130",
        "name": "Improper Handling of Length Parameter Inconsistency",
        "source": "sparse"
      },
      "similarity": 204.26432862338956
    },
    {
      "metadata": {
        "doc_id": "674",
        "name": "Uncontrolled Recursion",
        "type": "Class",
        "original_content": "The product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack.",
        "keyphrase_source": "weakness:heap-based buffer overflow",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
          "comments": "Examine children of this entry to see if there is a better fit",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.5465219546914021
          }
        }
      },
      "similarity": 0.5465219546914021
    },
    {
      "doc_id": "128",
      "text": "CWE-128: Wrap-around Error",
      "score": 2.9120000000000004,
      "metadata": {
        "doc_id": "128",
        "name": "Wrap-around Error",
        "type": "base",
        "original_content": "CWE-128: Wrap-around Error",
        "relationships": [
          {
            "source_id": "128",
            "target_id": "190",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "128",
            "target_id": "119",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "128",
            "target_id": "682",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "682",
            "target_id": "128",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "119",
            "target_id": "128",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "119",
                  "128",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "119"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "119",
                  "128",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "119"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "128",
                  "119",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "119"
            },
            "peer_relationship": {
              "path": [
                [
                  "128",
                  "190",
                  "PEEROF"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "190"
            }
          }
        },
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.9120000000000004
          }
        }
      },
      "similarity": 2.9120000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-1284",
      "CWE-130",
      "CWE-125",
      "CWE-131",
      "CWE-682",
      "CWE-787",
      "CWE-193",
      "CWE-190",
      "CWE-674",
      "CWE-122",
      "CWE-197",
      "CWE-119",
      "CWE-120",
      "CWE-128"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}