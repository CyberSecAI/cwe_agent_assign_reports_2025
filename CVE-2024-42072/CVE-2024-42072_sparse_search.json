{
  "retriever": "sparse",
  "query": "In the Linux kernel, the following vulnerability has been resolved bpf Fix may_goto with negative offset. Zacs syzbot crafted a bpf prog that exposed two bugs in may_goto. The 1st bug is the way may_goto is patched. When offset is negative it should be patched differently. The 2nd bug is in the verifier when current state may_goto_depth is equal to visited state may_goto_depth it means there is an actual infinite loop. Its not correct to prune exploration of the program at this point. Note, that this check doesnt limit the program to only one may_goto insn, since 2nd and any further may_goto will increment may_goto_depth only in the queued state pushed for future exploration. The current state will have may_goto_depth == 0 regardless of number of may_goto insns and the verifier has to explore the program until bpf_exit.",
  "keyphrases": {
    "rootcause": [
      "incorrect use of negative offset in may_goto"
    ]
  },
  "timestamp": "2025-07-12 03:38:33",
  "cve_id": "CVE-2024-42072",
  "result_count": 12,
  "results": [
    {
      "cwe_id": "197",
      "name": "Numeric Truncation Error",
      "score": 710.8986067981127,
      "search_source": "rootcause:incorrect use of negative offset in may_goto"
    },
    {
      "cwe_id": "823",
      "name": "Use of Out-of-range Pointer Offset",
      "score": 700.1696975830017,
      "search_source": "rootcause:incorrect use of negative offset in may_goto"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 666.8209968102722,
      "search_source": "rootcause:incorrect use of negative offset in may_goto"
    },
    {
      "cwe_id": "191",
      "name": "Integer Underflow (Wrap or Wraparound)",
      "score": 666.8091764537052,
      "search_source": "rootcause:incorrect use of negative offset in may_goto"
    },
    {
      "cwe_id": "1390",
      "name": "Weak Authentication",
      "score": 660.8806228025901,
      "search_source": "rootcause:incorrect use of negative offset in may_goto"
    },
    {
      "cwe_id": "125",
      "name": "Out-of-bounds Read",
      "score": 656.4206125279478,
      "search_source": "rootcause:incorrect use of negative offset in may_goto"
    },
    {
      "cwe_id": "1285",
      "name": "Improper Validation of Specified Index, Position, or Offset in Input",
      "score": 649.3176411623963,
      "search_source": "rootcause:incorrect use of negative offset in may_goto"
    },
    {
      "cwe_id": "863",
      "name": "Incorrect Authorization",
      "score": 648.9257897436519,
      "search_source": "rootcause:incorrect use of negative offset in may_goto"
    },
    {
      "cwe_id": "787",
      "name": "Out-of-bounds Write",
      "score": 641.7447744771866,
      "search_source": "rootcause:incorrect use of negative offset in may_goto"
    },
    {
      "cwe_id": "843",
      "name": "Access of Resource Using Incompatible Type ('Type Confusion')",
      "score": 639.4742635901977,
      "search_source": "rootcause:incorrect use of negative offset in may_goto"
    },
    {
      "cwe_id": "789",
      "name": "Memory Allocation with Excessive Size Value",
      "score": 205.0337337467505,
      "search_source": "base_query"
    },
    {
      "cwe_id": "674",
      "name": "Uncontrolled Recursion",
      "score": 204.7066063598215,
      "search_source": "base_query"
    }
  ]
}