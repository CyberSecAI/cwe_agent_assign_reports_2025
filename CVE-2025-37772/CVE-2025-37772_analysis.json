{
  "cve_id": "CVE-2025-37772",
  "description": "In the Linux kernel, the following vulnerability has been resolved RDMA/cma Fix workqueue crash in cma_netevent_work_handler struct rdma_cm_id has member struct work_struct net_work that is reused for enqueuing cma_netevent_work_handler()s onto cma_wq. Below crash[1] can occur if more than one call to cma_netevent_callback() occurs in quick succession, which further enqueues cma_netevent_work_handler()s for the same rdma_cm_id, overwriting any previously queued work-item(s) that was just scheduled to run i.e. there is no guarantee the queued work item may run between two successive calls to cma_netevent_callback() and the 2nd INIT_WORK would overwrite the 1st work item (for the same rdma_cm_id), despite grabbing id_table_lock during enqueue. Also drgn analysis [2] indicates the work item was likely overwritten. Fix this by moving the INIT_WORK() to __rdma_create_id(), so that it doesnt race with any existing queue_work() or its worker thread. [1] Trimmed crash stack =============================================",
  "key_phrases": {
    "rootcause": "reusing struct rdma_cm_id member struct work_struct net_work",
    "weakness": "",
    "impact": "workqueue crash",
    "vector": "more than one call to cma_netevent_callback() in quick succession",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": "RDMA/cma"
  },
  "reference_content": "UNRELATED\n\nThe provided content describes a system called Anubis designed to mitigate website scraping by AI companies. It does not relate to any vulnerability described by a CVE ID. It details a defense mechanism, not a weakness.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.8 | Class | Allowed-with-Review | Primary CWE |\n| CWE-909 | Missing Initialization of Resource | 0.6 | Class | Allowed-with-Review | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.7\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary relationship that influences the selection is the potential for **CWE-362** [Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')] to have more specific Base-level children. Also, **CWE-909** [Missing Initialization of Resource] is considered because the fix involves moving the `INIT_WORK()` to an earlier point, which could be interpreted as a form of initialization.\n\n```mermaid\ngraph TD\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    cwe909[\"CWE-909: Missing Initialization of Resource\"]\n    cwe667[\"CWE-667: Improper Locking\"]\n\n    cwe362 -->|PEEROF| cwe909\n    cwe362 -->|PEEROF| cwe667\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe362 primary\n    class cwe909 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a **reusing struct rdma_cm_id member struct work_struct net_work**, leading to a race condition where work items can be overwritten. This culminates in a workqueue crash.\n  - Root Cause: **reusing struct rdma_cm_id member struct work_struct net_work**\n  - Weakness: Race Condition\n  - Impact: Workqueue Crash\n\n## Summary of Analysis\nThe initial assessment identified a race condition due to the **reusing struct rdma_cm_id member struct work_struct net_work**. The fix involves moving the `INIT_WORK()` to prevent overwriting work items.\n\nEvidence from the vulnerability description: \"struct rdma_cm_id has member struct work_struct net_work that is reused for enqueuing cma_netevent_work_handler()s onto cma_wq... Below crash[1] can occur if more than one call to cma_netevent_callback() occurs in quick succession, which further enqueues cma_netevent_work_handler()s for the same rdma_cm_id, overwriting any previously queued work-item(s) that was just scheduled to run\".\n\n**CWE-362** [Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')] is chosen because the core issue is concurrent execution leading to data corruption. The recommendation to initialize earlier points towards **CWE-909** [Missing Initialization of Resource].\n\n**CWE-362** [Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')] is at the Class level, and a more specific Base-level child might exist, but the information provided isn't specific enough to pinpoint a more precise CWE.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-833: Deadlock\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-755: Improper Handling of Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not handle or incorrectly handles an exceptional condition.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n\n\n## CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-909: Missing Initialization of Resource\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not initialize a critical resource.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-404: Improper Resource Shutdown or Release\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product does not release or incorrectly releases a resource before it is made available for re-use.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-252: Unchecked Return Value\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-789: Memory Allocation with Excessive Size Value\n**Abstraction Level**: Variant\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-703: Improper Check or Handling of Exceptional Conditions\n**Abstraction Level**: Pillar\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is extremely high-level, a Pillar.\n\n\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 588.29\n**Source**: sparse\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\n**Abstraction Level**: Base\n**Similarity Score**: 574.23\n**Source**: sparse\n\n**Description**:\nThe product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the",
  "analysis_with_relationships": "# Summary\n\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.8 | Class | Allowed-with-Review | Primary CWE |\n| CWE-909 | Missing Initialization of Resource | 0.6 | Class | Allowed-with-Review | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.7\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary relationship that influences the selection is the potential for **CWE-362** [Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')] to have more specific Base-level children. Also, **CWE-909** [Missing Initialization of Resource] is considered because the fix involves moving the `INIT_WORK()` to an earlier point, which could be interpreted as a form of initialization.\n\n```mermaid\ngraph TD\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    cwe909[\"CWE-909: Missing Initialization of Resource\"]\n    cwe667[\"CWE-667: Improper Locking\"]\n\n    cwe362 -->|PEEROF| cwe909\n    cwe362 -->|PEEROF| cwe667\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe362 primary\n    class cwe909 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a **reusing struct rdma_cm_id member struct work_struct net_work**, leading to a race condition where work items can be overwritten. This culminates in a workqueue crash.\n  - Root Cause: **reusing struct rdma_cm_id member struct work_struct net_work**\n  - Weakness: Race Condition\n  - Impact: Workqueue Crash\n\n## Summary of Analysis\nThe initial assessment identified a race condition due to the **reusing struct rdma_cm_id member struct work_struct net_work**. The fix involves moving the `INIT_WORK()` to prevent overwriting work items.\n\nEvidence from the vulnerability description: \"struct rdma_cm_id has member struct work_struct net_work that is reused for enqueuing cma_netevent_work_handler()s onto cma_wq... Below crash[1] can occur if more than one call to cma_netevent_callback() occurs in quick succession, which further enqueues cma_netevent_work_handler()s for the same rdma_cm_id, overwriting any previously queued work-item(s) that was just scheduled to run\".\n\n**CWE-362** [Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')] is chosen because the core issue is concurrent execution leading to data corruption. The recommendation to initialize earlier points towards **CWE-909** [Missing Initialization of Resource].\n\n**CWE-362** [Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')] is at the Class level, and a more specific Base-level child might exist, but the information provided isn't specific enough to pinpoint a more precise CWE.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-833: Deadlock\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-755: Improper Handling of Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not handle or incorrectly handles an exceptional condition.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n\n\n## CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-909: Missing Initialization of Resource\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not initialize a critical resource.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-404: Improper Resource Shutdown or Release\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product does not release or incorrectly releases a resource before it is made available for re-use.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-252: Unchecked Return Value\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-789: Memory Allocation with Excessive Size Value\n**Abstraction Level**: Variant\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-703: Improper Check or Handling of Exceptional Conditions\n**Abstraction Level**: Pillar\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is extremely high-level, a Pillar.\n\n\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 588.29\n**Source**: sparse\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\n**Abstraction Level**: Base\n**Similarity Score**: 574.23\n**Source**: sparse\n\n**Description**:\nThe product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-404:**\n- 404 (Improper Resource Shutdown or Release) - ROOT\n\n\n**Chain starting from CWE-667:**\n- 667 (Improper Locking) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "source": "sparse"
      },
      "similarity": 543.7611012795921
    },
    {
      "metadata": {
        "doc_id": "125",
        "name": "Out-of-bounds Read",
        "source": "sparse"
      },
      "similarity": 536.2616022617357
    },
    {
      "metadata": {
        "doc_id": "909",
        "name": "Missing Initialization of Resource",
        "source": "sparse"
      },
      "similarity": 534.3235579737204
    },
    {
      "metadata": {
        "doc_id": "193",
        "name": "Off-by-one Error",
        "source": "sparse"
      },
      "similarity": 533.1523845337008
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 533.1318954668076
    },
    {
      "metadata": {
        "doc_id": "226",
        "name": "Sensitive Information in Resource Not Removed Before Reuse",
        "source": "sparse"
      },
      "similarity": 531.9184510136558
    },
    {
      "metadata": {
        "doc_id": "667",
        "name": "Improper Locking",
        "source": "sparse"
      },
      "similarity": 526.024239740055
    },
    {
      "metadata": {
        "doc_id": "367",
        "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
        "source": "sparse"
      },
      "similarity": 524.8012211094441
    },
    {
      "metadata": {
        "doc_id": "833",
        "name": "Deadlock",
        "type": "Base",
        "original_content": "The product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5318610528198457,
            "graph": 1.709802151399313
          }
        }
      },
      "similarity": 0.5318610528198457
    },
    {
      "doc_id": "772",
      "text": "CWE-772: Missing Release of Resource after Effective Lifetime",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "772",
        "name": "Missing Release of Resource after Effective Lifetime",
        "type": "base",
        "original_content": "CWE-772: Missing Release of Resource after Effective Lifetime",
        "relationships": [
          {
            "source_id": "772",
            "target_id": "911",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "772",
            "target_id": "775",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "772",
            "target_id": "401",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "772",
            "target_id": "1091",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "772",
            "target_id": "404",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1340"
            }
          },
          {
            "source_id": "772",
            "target_id": "404",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1305"
            }
          },
          {
            "source_id": "772",
            "target_id": "404",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "772",
            "target_id": "404",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "911",
            "target_id": "772",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "775",
            "target_id": "772",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "404",
            "target_id": "772",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "401",
            "target_id": "772",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1091",
            "target_id": "772",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "911",
                  "772",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "911"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "911",
                  "772",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_forward",
              "source": "911"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-404",
      "CWE-667",
      "CWE-833",
      "CWE-909",
      "CWE-362",
      "CWE-755",
      "CWE-252",
      "CWE-367",
      "CWE-789",
      "CWE-703"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}