{
  "retriever": "dense",
  "query": "Expr is an expression language and expression evaluation for Go. Prior to version 1.17.0, if the Expr expression parser is given an unbounded input string, it will attempt to compile the entire string and generate an Abstract Syntax Tree (AST) node for each part of the expression. In scenarios where input size isnt limited, a malicious or inadvertent extremely large expression can consume excessive memory as the parser builds a huge AST. This can ultimately lead to*excessive memory usage and an Out-Of-Memory (OOM) crash of the process. This issue is relatively uncommon and will only manifest when there are no restrictions on the input size, i.e. the expression length is allowed to grow arbitrarily large. In typical use cases where inputs are bounded or validated, this problem would not occur. The problem has been patched in the latest versions of the Expr library. The fix introduces compile-time limits on the number of AST nodes and memory usage during parsing, preventing any single expression from exhausting resources. Users should upgrade to Expr version 1.17.0 or later, as this release includes the new node budget and memory limit safeguards. Upgrading to v1.17.0 ensures that extremely deep or large expressions are detected and safely aborted during compilation, avoiding the OOM condition. For users who cannot immediately upgrade, the recommended workaround is to impose an input size restriction before parsing. In practice, this means validating or limiting the length of expression strings that your application will accept. For example, set a maximum allowable number of characters (or nodes) for any expression and reject or truncate inputs that exceed this limit. By ensuring no unbounded-length expression is ever fed into the parser, one can prevent the parser from constructing a pathologically large AST and avoid potential memory exhaustion. In short, pre-validate and cap input size as a safeguard in the absence of the patch.",
  "keyphrases": {
    "weakness": [
      "unbounded input string"
    ]
  },
  "timestamp": "2025-07-12 11:58:56",
  "cve_id": "CVE-2025-29786",
  "result_count": 20,
  "results": [
    {
      "cwe_id": "194",
      "name": "Unexpected Sign Extension",
      "type": "Variant",
      "score": 0.4100549221075939
    },
    {
      "cwe_id": "674",
      "name": "Uncontrolled Recursion",
      "type": "Class",
      "score": 0.4070586364835899
    },
    {
      "cwe_id": "625",
      "name": "Permissive Regular Expression",
      "type": "Base",
      "score": 0.4003603907384188
    },
    {
      "cwe_id": "186",
      "name": "Overly Restrictive Regular Expression",
      "type": "Base",
      "score": 0.39761619798467546
    },
    {
      "cwe_id": "776",
      "name": "Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')",
      "type": "Base",
      "score": 0.39756299198374234
    },
    {
      "cwe_id": "1333",
      "name": "Inefficient Regular Expression Complexity",
      "type": "Base",
      "score": 0.39535801125015363
    },
    {
      "cwe_id": "624",
      "name": "Executable Regular Expression Error",
      "type": "Base",
      "score": 0.3916784431963867
    },
    {
      "cwe_id": "185",
      "name": "Incorrect Regular Expression",
      "type": "Class",
      "score": 0.38910103449543443
    },
    {
      "cwe_id": "1325",
      "name": "Improperly Controlled Sequential Memory Allocation",
      "type": "Base",
      "score": 0.38803755796407396
    },
    {
      "cwe_id": "409",
      "name": "Improper Handling of Highly Compressed Data (Data Amplification)",
      "type": "Base",
      "score": 0.3837695437698188
    },
    {
      "cwe_id": "789",
      "name": "Memory Allocation with Excessive Size Value",
      "type": "Variant",
      "score": 0.369247340200775
    },
    {
      "cwe_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "type": "Base",
      "score": 0.3669430569603638
    },
    {
      "cwe_id": "917",
      "name": "Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')",
      "type": "Base",
      "score": 0.3635990898225492
    },
    {
      "cwe_id": "1176",
      "name": "Inefficient CPU Computation",
      "type": "Class",
      "score": 0.3629541179434159
    },
    {
      "cwe_id": "190",
      "name": "Integer Overflow or Wraparound",
      "type": "Base",
      "score": 0.36155551310720235
    },
    {
      "cwe_id": "777",
      "name": "Regular Expression without Anchors",
      "type": "Variant",
      "score": 0.3610322996265685
    },
    {
      "cwe_id": "783",
      "name": "Operator Precedence Logic Error",
      "type": "Base",
      "score": 0.3562789461489897
    },
    {
      "cwe_id": "14",
      "name": "Compiler Removal of Code to Clear Buffers",
      "type": "Variant",
      "score": 0.35500530771377914
    },
    {
      "cwe_id": "197",
      "name": "Numeric Truncation Error",
      "type": "Base",
      "score": 0.3516049624607773
    },
    {
      "cwe_id": "834",
      "name": "Excessive Iteration",
      "type": "Class",
      "score": 0.351004452432645
    }
  ]
}