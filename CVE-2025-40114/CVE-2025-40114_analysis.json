{
  "cve_id": "CVE-2025-40114",
  "description": "In the Linux kernel, the following vulnerability has been resolved iio light Add check for array bounds in veml6075_read_int_time_ms The array contains only 5 elements, but the index calculated by veml6075_read_int_time_index can range from 0 to 7, which could lead to out-of-bounds access. The check prevents this issue. Coverity Issue CID 1574309 (#1 of 1) **Out-of-bounds read** (OVERRUN) overrun-local Overrunning array veml6075_it_ms of 5 4-byte elements at element index 7 (byte offset 31) using index int_index (which evaluates to 7) This is hardening against potentially broken hardware. Good to have but not necessary to backport.",
  "key_phrases": {
    "rootcause": "",
    "weakness": [
      "array bounds check",
      "Out-of-bounds read"
    ],
    "impact": "out-of-bounds access",
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": ""
  },
  "reference_content": null,
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID    | CWE Name                                             | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :--------------------------------------------------- | :--------- | :-------------------- | :------------------------------ | :------------------------------ |\n| CWE-125   | Out-of-bounds Read                                   | 1.0        | Base                  | Primary                         | Allowed                       |\n| CWE-129   | Improper Validation of Array Index                   | 0.9        | Variant               | Secondary                       | Allowed                       |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.95\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is an out-of-bounds read (CWE-125). This occurs because the array index is not properly validated (CWE-129) before being used to access the array. Therefore, CWE-129 can precede CWE-125. CWE-125 is a child of CWE-119 (Improper Restriction of Operations within the Bounds of a Memory Buffer). CWE-129 is a child of CWE-20 (Improper Input Validation) and CWE-1285 (Improper Validation of Specified Index, Position, or Offset in Input).\n\n```mermaid\ngraph TD\n    cwe125[\"CWE-125: Out-of-bounds Read\"]\n    cwe129[\"CWE-129: Improper Validation of Array Index\"]\n    cwe20[\"CWE-20: Improper Input Validation\"]\n    cwe1285[\"CWE-1285: Improper Validation of Specified Index, Position, or Offset in Input\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\"]\n    \n    cwe125 -->|CHILDOF| cwe119\n    cwe129 -->|CHILDOF| cwe20\n    cwe129 -->|CHILDOF| cwe1285\n    cwe129 -->|CANPRECEDE| cwe125\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe125 primary\n    class cwe129 secondary\n    class cwe20,cwe1285,cwe119 tertiary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **improper** index calculation or **improper validation** of the calculated index, which leads to an out-of-bounds access, and finally an **out-of-bounds read**.\n  - The **root cause** is the **improper validation** of the calculated index (CWE-129)\n  - This leads to an **out-of-bounds read** (CWE-125)\n\n## Summary of Analysis\nThe vulnerability is an **out-of-bounds read** due to a missing array bounds check. The `veml6075_read_int_time_index` function calculates an index that can range from 0 to 7, but the array `veml6075_it_ms` only contains 5 elements. This can lead to an **out-of-bounds access**.\n\nThe primary CWE is CWE-125 (Out-of-bounds Read), as it directly describes the **weakness** where the product reads data past the end of the intended buffer. The evidence is the vulnerability description stating \"***Out-of-bounds read** (OVERRUN) overrun-local Overrunning array veml6075_it_ms of 5 4-byte elements at element index 7 (byte offset 31) using index int_index (which evaluates to 7)\".\n\nCWE-129 (Improper Validation of Array Index) is a secondary CWE. The vulnerability occurs because the index `int_index` is not validated to ensure it is within the bounds of the array `veml6075_it_ms`. The description states that the index can range from 0 to 7, while the array only contains 5 elements. This **lack of validation** is the reason an out-of-bounds read can occur.\n\nI considered other CWEs, such as CWE-193 (Off-by-one Error), CWE-823 (Use of Out-of-range Pointer Offset), CWE-191 (Integer Underflow (Wrap or Wraparound)), and CWE-1285 (Improper Validation of Specified Index, Position, or Offset in Input), but these are not as directly relevant as CWE-125 and CWE-129. CWE-193 is not applicable because the issue is not an off-by-one error. CWE-823 is not applicable because the issue is not related to pointer arithmetic. CWE-191 is not applicable because there is no integer underflow. CWE-1285 is related, but less specific than CWE-129.\n\nThe selected CWEs are at the optimal level of specificity. CWE-125 is a Base CWE, and CWE-129 is a Variant CWE. These are both preferred levels of abstraction for mapping to the root causes of vulnerabilities.",
  "analysis_with_relationships": "# Summary\n| CWE ID    | CWE Name                                             | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :--------------------------------------------------- | :--------- | :-------------------- | :------------------------------ | :------------------------------ |\n| CWE-125   | Out-of-bounds Read                                   | 1.0        | Base                  | Primary                         | Allowed                       |\n| CWE-129   | Improper Validation of Array Index                   | 0.9        | Variant               | Secondary                       | Allowed                       |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.95\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is an out-of-bounds read (CWE-125). This occurs because the array index is not properly validated (CWE-129) before being used to access the array. Therefore, CWE-129 can precede CWE-125. CWE-125 is a child of CWE-119 (Improper Restriction of Operations within the Bounds of a Memory Buffer). CWE-129 is a child of CWE-20 (Improper Input Validation) and CWE-1285 (Improper Validation of Specified Index, Position, or Offset in Input).\n\n```mermaid\ngraph TD\n    cwe125[\"CWE-125: Out-of-bounds Read\"]\n    cwe129[\"CWE-129: Improper Validation of Array Index\"]\n    cwe20[\"CWE-20: Improper Input Validation\"]\n    cwe1285[\"CWE-1285: Improper Validation of Specified Index, Position, or Offset in Input\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\"]\n    \n    cwe125 -->|CHILDOF| cwe119\n    cwe129 -->|CHILDOF| cwe20\n    cwe129 -->|CHILDOF| cwe1285\n    cwe129 -->|CANPRECEDE| cwe125\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe125 primary\n    class cwe129 secondary\n    class cwe20,cwe1285,cwe119 tertiary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **improper** index calculation or **improper validation** of the calculated index, which leads to an out-of-bounds access, and finally an **out-of-bounds read**.\n  - The **root cause** is the **improper validation** of the calculated index (CWE-129)\n  - This leads to an **out-of-bounds read** (CWE-125)\n\n## Summary of Analysis\nThe vulnerability is an **out-of-bounds read** due to a missing array bounds check. The `veml6075_read_int_time_index` function calculates an index that can range from 0 to 7, but the array `veml6075_it_ms` only contains 5 elements. This can lead to an **out-of-bounds access**.\n\nThe primary CWE is CWE-125 (Out-of-bounds Read), as it directly describes the **weakness** where the product reads data past the end of the intended buffer. The evidence is the vulnerability description stating \"***Out-of-bounds read** (OVERRUN) overrun-local Overrunning array veml6075_it_ms of 5 4-byte elements at element index 7 (byte offset 31) using index int_index (which evaluates to 7)\".\n\nCWE-129 (Improper Validation of Array Index) is a secondary CWE. The vulnerability occurs because the index `int_index` is not validated to ensure it is within the bounds of the array `veml6075_it_ms`. The description states that the index can range from 0 to 7, while the array only contains 5 elements. This **lack of validation** is the reason an out-of-bounds read can occur.\n\nI considered other CWEs, such as CWE-193 (Off-by-one Error), CWE-823 (Use of Out-of-range Pointer Offset), CWE-191 (Integer Underflow (Wrap or Wraparound)), and CWE-1285 (Improper Validation of Specified Index, Position, or Offset in Input), but these are not as directly relevant as CWE-125 and CWE-129. CWE-193 is not applicable because the issue is not an off-by-one error. CWE-823 is not applicable because the issue is not related to pointer arithmetic. CWE-191 is not applicable because there is no integer underflow. CWE-1285 is related, but less specific than CWE-129.\n\nThe selected CWEs are at the optimal level of specificity. CWE-125 is a Base CWE, and CWE-129 is a Variant CWE. These are both preferred levels of abstraction for mapping to the root causes of vulnerabilities.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-823:**\n- 823 (Use of Out-of-range Pointer Offset) - ROOT\n\n\n**Chain starting from CWE-125:**\n- 125 (Out-of-bounds Read) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "125",
        "name": "Out-of-bounds Read",
        "source": "sparse",
        "original_content": "The product reads data past the end, or before the beginning, of the intended buffer.",
        "keyphrase_sources": [
          {
            "id": "weakness:array bounds check",
            "keyphrase": "array bounds check",
            "type": "weakness"
          },
          {
            "id": "weakness:Out-of-bounds read",
            "keyphrase": "Out-of-bounds read",
            "type": "weakness"
          },
          {
            "id": "impact:out-of-bounds access",
            "keyphrase": "out-of-bounds access",
            "type": "impact"
          },
          {
            "id": "product:Linux kernel",
            "keyphrase": "Linux kernel",
            "type": "product"
          }
        ]
      },
      "similarity": 583.1783408410909
    },
    {
      "metadata": {
        "doc_id": "129",
        "name": "Improper Validation of Array Index",
        "source": "sparse",
        "original_content": "The product uses untrusted input when calculating or using an array index, but the product does not validate or incorrectly validates the index to ensure the index references a valid position within the array.",
        "keyphrase_sources": [
          {
            "id": "weakness:array bounds check",
            "keyphrase": "array bounds check",
            "type": "weakness"
          },
          {
            "id": "weakness:Out-of-bounds read",
            "keyphrase": "Out-of-bounds read",
            "type": "weakness"
          },
          {
            "id": "impact:out-of-bounds access",
            "keyphrase": "out-of-bounds access",
            "type": "impact"
          }
        ]
      },
      "similarity": 556.6572278850492
    },
    {
      "metadata": {
        "doc_id": "197",
        "name": "Numeric Truncation Error",
        "source": "sparse",
        "original_content": "Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion.",
        "keyphrase_sources": [
          {
            "id": "weakness:Out-of-bounds read",
            "keyphrase": "Out-of-bounds read",
            "type": "weakness"
          },
          {
            "id": "product:Linux kernel",
            "keyphrase": "Linux kernel",
            "type": "product"
          }
        ]
      },
      "similarity": 539.8509857780474
    },
    {
      "metadata": {
        "doc_id": "193",
        "name": "Off-by-one Error",
        "source": "sparse",
        "original_content": "A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.",
        "keyphrase_sources": [
          {
            "id": "weakness:array bounds check",
            "keyphrase": "array bounds check",
            "type": "weakness"
          },
          {
            "id": "weakness:Out-of-bounds read",
            "keyphrase": "Out-of-bounds read",
            "type": "weakness"
          },
          {
            "id": "impact:out-of-bounds access",
            "keyphrase": "out-of-bounds access",
            "type": "impact"
          },
          {
            "id": "product:Linux kernel",
            "keyphrase": "Linux kernel",
            "type": "product"
          }
        ]
      },
      "similarity": 535.400659757758
    },
    {
      "metadata": {
        "doc_id": "823",
        "name": "Use of Out-of-range Pointer Offset",
        "source": "sparse",
        "original_content": "The product performs pointer arithmetic on a valid pointer, but it uses an offset that can point outside of the intended range of valid memory locations for the resulting pointer.",
        "keyphrase_sources": [
          {
            "id": "weakness:array bounds check",
            "keyphrase": "array bounds check",
            "type": "weakness"
          },
          {
            "id": "weakness:Out-of-bounds read",
            "keyphrase": "Out-of-bounds read",
            "type": "weakness"
          },
          {
            "id": "impact:out-of-bounds access",
            "keyphrase": "out-of-bounds access",
            "type": "impact"
          },
          {
            "id": "product:Linux kernel",
            "keyphrase": "Linux kernel",
            "type": "product"
          }
        ]
      },
      "similarity": 528.5398100021674
    },
    {
      "metadata": {
        "doc_id": "191",
        "name": "Integer Underflow (Wrap or Wraparound)",
        "source": "sparse",
        "original_content": "The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.",
        "keyphrase_sources": [
          {
            "id": "weakness:array bounds check",
            "keyphrase": "array bounds check",
            "type": "weakness"
          }
        ]
      },
      "similarity": 521.7221589746604
    },
    {
      "metadata": {
        "doc_id": "1285",
        "name": "Improper Validation of Specified Index, Position, or Offset in Input",
        "source": "sparse",
        "original_content": "The product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties.",
        "keyphrase_sources": [
          {
            "id": "impact:out-of-bounds access",
            "keyphrase": "out-of-bounds access",
            "type": "impact"
          },
          {
            "id": "product:Linux kernel",
            "keyphrase": "Linux kernel",
            "type": "product"
          }
        ]
      },
      "similarity": 192.7966693331995
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-823",
      "CWE-125",
      "CWE-191",
      "CWE-1285",
      "CWE-193",
      "CWE-20",
      "CWE-129",
      "CWE-119"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {
    "125": [
      {
        "id": "weakness:array bounds check",
        "keyphrase": "array bounds check",
        "type": "weakness"
      },
      {
        "id": "weakness:Out-of-bounds read",
        "keyphrase": "Out-of-bounds read",
        "type": "weakness"
      },
      {
        "id": "impact:out-of-bounds access",
        "keyphrase": "out-of-bounds access",
        "type": "impact"
      },
      {
        "id": "product:Linux kernel",
        "keyphrase": "Linux kernel",
        "type": "product"
      }
    ],
    "129": [
      {
        "id": "weakness:array bounds check",
        "keyphrase": "array bounds check",
        "type": "weakness"
      },
      {
        "id": "weakness:Out-of-bounds read",
        "keyphrase": "Out-of-bounds read",
        "type": "weakness"
      },
      {
        "id": "impact:out-of-bounds access",
        "keyphrase": "out-of-bounds access",
        "type": "impact"
      }
    ],
    "193": [
      {
        "id": "weakness:array bounds check",
        "keyphrase": "array bounds check",
        "type": "weakness"
      },
      {
        "id": "weakness:Out-of-bounds read",
        "keyphrase": "Out-of-bounds read",
        "type": "weakness"
      },
      {
        "id": "impact:out-of-bounds access",
        "keyphrase": "out-of-bounds access",
        "type": "impact"
      },
      {
        "id": "product:Linux kernel",
        "keyphrase": "Linux kernel",
        "type": "product"
      }
    ],
    "823": [
      {
        "id": "weakness:array bounds check",
        "keyphrase": "array bounds check",
        "type": "weakness"
      },
      {
        "id": "weakness:Out-of-bounds read",
        "keyphrase": "Out-of-bounds read",
        "type": "weakness"
      },
      {
        "id": "impact:out-of-bounds access",
        "keyphrase": "out-of-bounds access",
        "type": "impact"
      },
      {
        "id": "product:Linux kernel",
        "keyphrase": "Linux kernel",
        "type": "product"
      }
    ],
    "191": [
      {
        "id": "weakness:array bounds check",
        "keyphrase": "array bounds check",
        "type": "weakness"
      }
    ],
    "197": [
      {
        "id": "weakness:Out-of-bounds read",
        "keyphrase": "Out-of-bounds read",
        "type": "weakness"
      },
      {
        "id": "product:Linux kernel",
        "keyphrase": "Linux kernel",
        "type": "product"
      }
    ],
    "1285": [
      {
        "id": "impact:out-of-bounds access",
        "keyphrase": "out-of-bounds access",
        "type": "impact"
      },
      {
        "id": "product:Linux kernel",
        "keyphrase": "Linux kernel",
        "type": "product"
      }
    ]
  }
}