{
  "cve_id": "CVE-2025-37850",
  "description": "In the Linux kernel, the following vulnerability has been resolved pwm mediatek Prevent divide-by-zero in pwm_mediatek_config() With CONFIG_COMPILE_TEST && !CONFIG_HAVE_CLK, pwm_mediatek_config() has a divide-by-zero in the following line do_div(resolution, clk_get_rate(pc->clk_pwms[pwm->hwpwm])) due to the fact that the !CONFIG_HAVE_CLK version of clk_get_rate() returns zero. This is presumably just a theoretical problem COMPILE_TEST overrides the dependency on RALINK which would select COMMON_CLK. Regardless its a good idea to check for the error explicitly to avoid divide-by-zero. Fixes the following warning drivers/pwm/pwm-mediatek.o warning objtool .text unexpected end of section [ukleinek s/CONFIG_CLK/CONFIG_HAVE_CLK/]",
  "key_phrases": {
    "rootcause": "Divide-by-zero in pwm_mediatek_config()",
    "weakness": "",
    "impact": "divide-by-zero error",
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": ""
  },
  "reference_content": null,
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-369 | Divide By Zero | 1.0 | Base | Primary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-369 Divide By Zero. This is a base level CWE. No other CWEs were selected.\n\n```mermaid\ngraph TD\n    cwe369[\"CWE-369: Divide By Zero\"]\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    class cwe369 primary\n```\n\n## Vulnerability Chain\nThe vulnerability chain consists of the divide by zero error. The **rootcause** is the **Divide-by-zero in pwm_mediatek_config()** due to the fact that the `!CONFIG_HAVE_CLK` version of `clk_get_rate()` returns zero.\n\n## Summary of Analysis\nThe vulnerability description clearly indicates a **divide-by-zero** error. The line `do_div(resolution, clk_get_rate(pc->clk_pwms[pwm->hwpwm]))` causes a divide by zero because `clk_get_rate()` returns zero.\n\nCWE-369 Divide By Zero is the most appropriate CWE because it directly addresses the **rootcause** of the vulnerability. The description for CWE-369 matches the vulnerability description.\n\nOther CWEs Considered:\n\n*   CWE-1335: Incorrect Bitwise Shift of Integer - While this CWE was listed first in the Retriever Results, this is not a bitwise shift error.\n*   CWE-129: Improper Validation of Array Index - This is not an array index issue.\n*   CWE-781: Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code - This vulnerability does not involve IOCTL.\n*   CWE-825: Expired Pointer Dereference - There is no pointer dereference.\n*   CWE-823: Use of Out-of-range Pointer Offset - There is no pointer offset issue.\n*   CWE-822: Untrusted Pointer Dereference - There is no untrusted pointer dereference.\n*   CWE-606: Unchecked Input for Loop Condition - No loop condition issues.\n*   CWE-1389: Incorrect Parsing of Numbers with Different Radices - Not related to number parsing\n*   CWE-1256: Improper Restriction of Software Interfaces to Hardware Features - Not related to restriction of software interfaces.\n*   CWE-703: Improper Check or Handling of Exceptional Conditions - The **rootcause** is not handling an exceptional condition, but a divide by zero.\n\nRelevant CWE Information:",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-369 | Divide By Zero | 1.0 | Base | Primary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-369 Divide By Zero. This is a base level CWE. No other CWEs were selected.\n\n```mermaid\ngraph TD\n    cwe369[\"CWE-369: Divide By Zero\"]\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    class cwe369 primary\n```\n\n## Vulnerability Chain\nThe vulnerability chain consists of the divide by zero error. The **rootcause** is the **Divide-by-zero in pwm_mediatek_config()** due to the fact that the `!CONFIG_HAVE_CLK` version of `clk_get_rate()` returns zero.\n\n## Summary of Analysis\nThe vulnerability description clearly indicates a **divide-by-zero** error. The line `do_div(resolution, clk_get_rate(pc->clk_pwms[pwm->hwpwm]))` causes a divide by zero because `clk_get_rate()` returns zero.\n\nCWE-369 Divide By Zero is the most appropriate CWE because it directly addresses the **rootcause** of the vulnerability. The description for CWE-369 matches the vulnerability description.\n\nOther CWEs Considered:\n\n*   CWE-1335: Incorrect Bitwise Shift of Integer - While this CWE was listed first in the Retriever Results, this is not a bitwise shift error.\n*   CWE-129: Improper Validation of Array Index - This is not an array index issue.\n*   CWE-781: Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code - This vulnerability does not involve IOCTL.\n*   CWE-825: Expired Pointer Dereference - There is no pointer dereference.\n*   CWE-823: Use of Out-of-range Pointer Offset - There is no pointer offset issue.\n*   CWE-822: Untrusted Pointer Dereference - There is no untrusted pointer dereference.\n*   CWE-606: Unchecked Input for Loop Condition - No loop condition issues.\n*   CWE-1389: Incorrect Parsing of Numbers with Different Radices - Not related to number parsing\n*   CWE-1256: Improper Restriction of Software Interfaces to Hardware Features - Not related to restriction of software interfaces.\n*   CWE-703: Improper Check or Handling of Exceptional Conditions - The **rootcause** is not handling an exceptional condition, but a divide by zero.\n\nRelevant CWE Information:\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-823:**\n- 823 (Use of Out-of-range Pointer Offset) - ROOT\n\n\n**Chain starting from CWE-1389:**\n- 1389 (Incorrect Parsing of Numbers with Different Radices) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "1335",
        "name": "Incorrect Bitwise Shift of Integer",
        "source": "sparse"
      },
      "similarity": 520.9459510854655
    },
    {
      "metadata": {
        "doc_id": "369",
        "name": "Divide By Zero",
        "source": "sparse"
      },
      "similarity": 500.6375017651568
    },
    {
      "metadata": {
        "doc_id": "194",
        "name": "Unexpected Sign Extension",
        "source": "sparse"
      },
      "similarity": 463.0101069066076
    },
    {
      "metadata": {
        "doc_id": "61",
        "name": "UNIX Symbolic Link (Symlink) Following",
        "source": "sparse"
      },
      "similarity": 449.9897345438444
    },
    {
      "metadata": {
        "doc_id": "125",
        "name": "Out-of-bounds Read",
        "source": "sparse"
      },
      "similarity": 449.63483508633817
    },
    {
      "metadata": {
        "doc_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "source": "sparse"
      },
      "similarity": 431.28032679908733
    },
    {
      "metadata": {
        "doc_id": "606",
        "name": "Unchecked Input for Loop Condition",
        "source": "sparse"
      },
      "similarity": 427.34489911876767
    },
    {
      "metadata": {
        "doc_id": "1389",
        "name": "Incorrect Parsing of Numbers with Different Radices",
        "source": "sparse"
      },
      "similarity": 422.14160644683795
    },
    {
      "metadata": {
        "doc_id": "1256",
        "name": "Improper Restriction of Software Interfaces to Hardware Features",
        "type": "Base",
        "original_content": "The product provides software-controllable\n\t\t\tdevice functionality for capabilities such as power and\n\t\t\tclock management, but it does not properly limit\n\t\t\tfunctionality that can lead to modification of\n\t\t\thardware memory or register bits, or the ability to\n\t\t\tobserve physical side channels.",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.48491490648767777,
            "graph": 1.6051643745442195
          }
        }
      },
      "similarity": 0.48491490648767777
    },
    {
      "doc_id": "1247",
      "text": "The device does not contain or contains incorrectly implemented circuitry or sensors to detect and mitigate voltage and clock glitches and protect sensitive information or software contained on the device.",
      "score": 0.5109604050806978,
      "metadata": {
        "doc_id": "1247",
        "name": "Improper Protection Against Voltage and Clock Glitches",
        "type": "Base",
        "extended_description": "\n\nA device might support features such as secure boot which are supplemented with hardware and firmware support. This involves establishing a chain of trust, starting with an immutable root of trust by checking the signature of the next stage (culminating with the OS and runtime software) against a golden value before transferring control. The intermediate stages typically set up the system in a secure state by configuring several access control settings. Similarly, security logic for exercising a debug or testing interface may be implemented in hardware, firmware, or both. A device needs to guard against fault attacks such as voltage glitches and clock glitches that an attacker may employ in an attempt to compromise the system.\n",
        "alternate_terms": [],
        "original_content": "The device does not contain or contains incorrectly implemented circuitry or sensors to detect and mitigate voltage and clock glitches and protect sensitive information or software contained on the device.",
        "relationships": [
          {
            "source_id": "1247",
            "target_id": "1384",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1384",
            "target_id": "1247",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1332",
            "target_id": "1247",
            "label": "PEEROF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1194"
            }
          }
        ],
        "source": "graph",
        "sources": [
          "vector",
          "graph"
        ],
        "vector_score": 0.5109604050806978,
        "graph_score": 3.6399999999999997,
        "score_components": {
          "relationship_chain": 0.7,
          "explicit_mention": 1.0,
          "abstraction_path": 0.9,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "1332",
                  "1247",
                  "PEEROF"
                ]
              ],
              "score": 0.7,
              "type": "relationship_chain",
              "source": "1332"
            },
            "peer_relationship": {
              "path": [
                [
                  "1332",
                  "1247",
                  "PEEROF"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "1332"
            }
          }
        },
        "is_explicit": true,
        "abstraction_level": "base",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.4794406947755726,
            "graph": 2.388384162032279
          }
        }
      },
      "similarity": 2.388384162032279
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-823",
      "CWE-1389",
      "CWE-369",
      "CWE-825",
      "CWE-1256",
      "CWE-781",
      "CWE-822",
      "CWE-129",
      "CWE-606",
      "CWE-703",
      "CWE-1335"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}