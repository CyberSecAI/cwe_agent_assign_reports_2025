{
  "vulnerability_info": "VulnerabilityInfo(cve_id='CVE-2025-2317', description='The Product Filter by WBW plugin for WordPress is vulnerable to **time-based SQL Injection** via the filtersDataBackend parameter in all versions up to, and including, 2.7.9 due to **insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query**. This makes it possible for unauthenticated attackers to append additional SQL queries into already existing queries that can be used to extract sensitive information from the database.', key_phrases={'rootcause': ['insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query', 'lack of sufficient preparation on existing SQL query'], 'weakness': 'time-based SQL Injection', 'impact': ['extract sensitive information from the database', 'extract sensitive information from database'], 'vector': '', 'attacker': 'unauthenticated attackers', 'product': 'Product Filter by WBW WordPress plugin', 'version': 'up to and including 2.7.9', 'component': 'filtersDataBackend parameter'}, reference_content=\"The provided content consists of the source code for the `Meta_ValuesModelWpf` class, located in the `woo-product-filter` WordPress plugin (version 2.7.8).  It appears to be a model responsible for interacting with the `meta_values` database table.\\n\\nHere's a breakdown of the relevant information:\\n\\n* **Root cause of vulnerability:**  The code itself doesn't explicitly reveal a vulnerability. However, the presence of dynamic SQL query construction (e.g., lines 38, 71, 106) combined with user-supplied input (through `$keyId`, `$keys`, `$field`, `$values`, etc.) raises a significant concern for **SQL injection**.  The `UtilsWpf::controlNumericValues` function is used in some cases (line 69, 94), but it's unclear if it adequately sanitizes all possible input types or covers all usage scenarios.  The use of `rawurlencode` (line 157) is also not sufficient to prevent SQL injection.\\n* **Weaknesses/vulnerabilities present:**\\n    * **Potential SQL Injection:**  Dynamic SQL query construction without proper sanitization of user-supplied input.\\n    * **Insufficient Input Validation:**  Reliance on potentially inadequate sanitization functions.\\n* **Impact of exploitation:**  Successful SQL injection could allow an attacker to:\\n    * Read sensitive data from the database.\\n    * Modify data in the database.\\n    * Potentially execute arbitrary code on the server (depending on database permissions and configuration).\\n* **Attack vectors:**\\n    * An attacker could manipulate the parameters passed to functions like `getKeyValueIds`, `getFieldValuesList`, `getMetaValueTerms`, `getMetaValueId`, and `getMetaValueIds` to inject malicious SQL code.\\n* **Required attacker capabilities/position:**\\n    * An attacker would need to be able to control the input parameters to the vulnerable functions. This could be through a crafted request to the WordPress site, potentially exploiting other vulnerabilities to gain control of input.\\n* **Mitigation or fix:**\\n    * **Prepared Statements:**  The most effective mitigation is to use prepared statements with parameterized queries. This prevents user input from being interpreted as SQL code.\\n    * **Input Validation:**  Thoroughly validate and sanitize all user-supplied input before using it in SQL queries.  Use appropriate escaping functions for the database being used.\\n    * **Least Privilege:** Ensure the database user account used by the plugin has only the necessary permissions.\\n\\nThe content provides significantly more detail than a typical CVE description would, as it's the actual source code.  It highlights the potential for SQL injection vulnerabilities due to the way SQL queries are constructed.\", similar_info={'cwe_distribution': {}, 'cwe_consensus': '', 'similarity_stats': {'thresholds': [], 'total_samples_by_threshold': {}, 'top_cwes_by_threshold': {}}}, similarity_summary=SimilarityInsight(consensus_cwe='', top_cwes=[], confidence_levels={}, total_samples=0), analysis='', analysis_with_relationships='', criticism='', resolution='', relevant_cwes=[{'metadata': {'doc_id': '116', 'name': 'Improper Encoding or Escaping of Output', 'source': 'sparse', 'original_content': 'The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.', 'keyphrase_sources': [{'id': 'rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query', 'keyphrase': 'insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query', 'type': 'rootcause'}, {'id': 'rootcause:lack of sufficient preparation on existing SQL query', 'keyphrase': 'lack of sufficient preparation on existing SQL query', 'type': 'rootcause'}, {'id': 'weakness:time-based SQL Injection', 'keyphrase': 'time-based SQL Injection', 'type': 'weakness'}, {'id': 'impact:extract sensitive information from the database', 'keyphrase': 'extract sensitive information from the database', 'type': 'impact'}, {'id': 'impact:extract sensitive information from database', 'keyphrase': 'extract sensitive information from database', 'type': 'impact'}, {'id': 'attacker:unauthenticated attackers', 'keyphrase': 'unauthenticated attackers', 'type': 'attacker'}, {'id': 'product:Product Filter by WBW WordPress plugin', 'keyphrase': 'Product Filter by WBW WordPress plugin', 'type': 'product'}, {'id': 'version:up to and including 2.7.9', 'keyphrase': 'up to and including 2.7.9', 'type': 'version'}, {'id': 'component:filtersDataBackend parameter', 'keyphrase': 'filtersDataBackend parameter', 'type': 'component'}]}, 'similarity': np.float64(736.9277239353679)}, {'metadata': {'doc_id': '89', 'name': \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\", 'source': 'sparse', 'original_content': 'The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.', 'keyphrase_sources': [{'id': 'rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query', 'keyphrase': 'insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query', 'type': 'rootcause'}, {'id': 'rootcause:lack of sufficient preparation on existing SQL query', 'keyphrase': 'lack of sufficient preparation on existing SQL query', 'type': 'rootcause'}, {'id': 'weakness:time-based SQL Injection', 'keyphrase': 'time-based SQL Injection', 'type': 'weakness'}, {'id': 'impact:extract sensitive information from the database', 'keyphrase': 'extract sensitive information from the database', 'type': 'impact'}, {'id': 'impact:extract sensitive information from database', 'keyphrase': 'extract sensitive information from database', 'type': 'impact'}, {'id': 'attacker:unauthenticated attackers', 'keyphrase': 'unauthenticated attackers', 'type': 'attacker'}, {'id': 'product:Product Filter by WBW WordPress plugin', 'keyphrase': 'Product Filter by WBW WordPress plugin', 'type': 'product'}, {'id': 'version:up to and including 2.7.9', 'keyphrase': 'up to and including 2.7.9', 'type': 'version'}, {'id': 'component:filtersDataBackend parameter', 'keyphrase': 'filtersDataBackend parameter', 'type': 'component'}]}, 'similarity': np.float64(714.9092151745638)}, {'metadata': {'doc_id': '90', 'name': \"Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')\", 'source': 'sparse', 'original_content': 'The product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component.', 'keyphrase_sources': [{'id': 'rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query', 'keyphrase': 'insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query', 'type': 'rootcause'}, {'id': 'rootcause:lack of sufficient preparation on existing SQL query', 'keyphrase': 'lack of sufficient preparation on existing SQL query', 'type': 'rootcause'}, {'id': 'weakness:time-based SQL Injection', 'keyphrase': 'time-based SQL Injection', 'type': 'weakness'}, {'id': 'impact:extract sensitive information from the database', 'keyphrase': 'extract sensitive information from the database', 'type': 'impact'}, {'id': 'impact:extract sensitive information from database', 'keyphrase': 'extract sensitive information from database', 'type': 'impact'}, {'id': 'attacker:unauthenticated attackers', 'keyphrase': 'unauthenticated attackers', 'type': 'attacker'}, {'id': 'product:Product Filter by WBW WordPress plugin', 'keyphrase': 'Product Filter by WBW WordPress plugin', 'type': 'product'}, {'id': 'version:up to and including 2.7.9', 'keyphrase': 'up to and including 2.7.9', 'type': 'version'}, {'id': 'component:filtersDataBackend parameter', 'keyphrase': 'filtersDataBackend parameter', 'type': 'component'}]}, 'similarity': np.float64(680.1526577839488)}, {'metadata': {'doc_id': '352', 'name': 'Cross-Site Request Forgery (CSRF)', 'source': 'sparse', 'original_content': 'The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.', 'keyphrase_sources': [{'id': 'rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query', 'keyphrase': 'insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query', 'type': 'rootcause'}, {'id': 'rootcause:lack of sufficient preparation on existing SQL query', 'keyphrase': 'lack of sufficient preparation on existing SQL query', 'type': 'rootcause'}, {'id': 'attacker:unauthenticated attackers', 'keyphrase': 'unauthenticated attackers', 'type': 'attacker'}, {'id': 'product:Product Filter by WBW WordPress plugin', 'keyphrase': 'Product Filter by WBW WordPress plugin', 'type': 'product'}, {'id': 'version:up to and including 2.7.9', 'keyphrase': 'up to and including 2.7.9', 'type': 'version'}, {'id': 'component:filtersDataBackend parameter', 'keyphrase': 'filtersDataBackend parameter', 'type': 'component'}]}, 'similarity': np.float64(656.7248295117191)}, {'metadata': {'doc_id': '20', 'name': 'Improper Input Validation', 'source': 'sparse', 'original_content': 'The product receives input or data, but it does\\n        not validate or incorrectly validates that the input has the\\n        properties that are required to process the data safely and\\n        correctly.', 'keyphrase_sources': [{'id': 'rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query', 'keyphrase': 'insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query', 'type': 'rootcause'}]}, 'similarity': np.float64(628.4454322771368)}, {'metadata': {'doc_id': '502', 'name': 'Deserialization of Untrusted Data', 'source': 'sparse', 'original_content': 'The product deserializes untrusted data without sufficiently ensuring that the resulting data will be valid.', 'keyphrase_sources': [{'id': 'rootcause:lack of sufficient preparation on existing SQL query', 'keyphrase': 'lack of sufficient preparation on existing SQL query', 'type': 'rootcause'}, {'id': 'weakness:time-based SQL Injection', 'keyphrase': 'time-based SQL Injection', 'type': 'weakness'}]}, 'similarity': np.float64(507.2732218277614)}, {'metadata': {'doc_id': '943', 'name': 'Improper Neutralization of Special Elements in Data Query Logic', 'source': 'sparse', 'original_content': 'The product generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query.', 'keyphrase_sources': [{'id': 'weakness:time-based SQL Injection', 'keyphrase': 'time-based SQL Injection', 'type': 'weakness'}, {'id': 'impact:extract sensitive information from the database', 'keyphrase': 'extract sensitive information from the database', 'type': 'impact'}, {'id': 'impact:extract sensitive information from database', 'keyphrase': 'extract sensitive information from database', 'type': 'impact'}]}, 'similarity': np.float64(433.03208054649224)}, {'metadata': {'doc_id': '862', 'name': 'Missing Authorization', 'source': 'sparse', 'original_content': 'The product does not perform an authorization check when an actor attempts to access a resource or perform an action.', 'keyphrase_sources': [{'id': 'impact:extract sensitive information from the database', 'keyphrase': 'extract sensitive information from the database', 'type': 'impact'}, {'id': 'impact:extract sensitive information from database', 'keyphrase': 'extract sensitive information from database', 'type': 'impact'}, {'id': 'product:Product Filter by WBW WordPress plugin', 'keyphrase': 'Product Filter by WBW WordPress plugin', 'type': 'product'}]}, 'similarity': np.float64(160.12568834794408)}, {'metadata': {'doc_id': '790', 'name': 'Improper Filtering of Special Elements', 'source': 'sparse', 'original_content': 'The product receives data from an upstream component, but does not filter or incorrectly filters special elements before sending it to a downstream component.', 'keyphrase_sources': [{'id': 'attacker:unauthenticated attackers', 'keyphrase': 'unauthenticated attackers', 'type': 'attacker'}, {'id': 'version:up to and including 2.7.9', 'keyphrase': 'up to and including 2.7.9', 'type': 'version'}, {'id': 'component:filtersDataBackend parameter', 'keyphrase': 'filtersDataBackend parameter', 'type': 'component'}]}, 'similarity': np.float64(148.47358338836654)}], identified_cwes={'analyzer': [], 'critic_additional': []})",
  "retrieval_results": {
    "has_multiple_keyphrases": true,
    "keyphrase_cwe_sets": {
      "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query": {
        "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
        "type": "rootcause",
        "cwes": [
          {
            "metadata": {
              "doc_id": "116",
              "name": "Improper Encoding or Escaping of Output",
              "source": "sparse",
              "original_content": "The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.",
              "keyphrase_sources": [
                {
                  "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
                  "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
                  "type": "rootcause"
                },
                {
                  "id": "rootcause:lack of sufficient preparation on existing SQL query",
                  "keyphrase": "lack of sufficient preparation on existing SQL query",
                  "type": "rootcause"
                },
                {
                  "id": "weakness:time-based SQL Injection",
                  "keyphrase": "time-based SQL Injection",
                  "type": "weakness"
                },
                {
                  "id": "impact:extract sensitive information from the database",
                  "keyphrase": "extract sensitive information from the database",
                  "type": "impact"
                },
                {
                  "id": "impact:extract sensitive information from database",
                  "keyphrase": "extract sensitive information from database",
                  "type": "impact"
                },
                {
                  "id": "attacker:unauthenticated attackers",
                  "keyphrase": "unauthenticated attackers",
                  "type": "attacker"
                },
                {
                  "id": "product:Product Filter by WBW WordPress plugin",
                  "keyphrase": "Product Filter by WBW WordPress plugin",
                  "type": "product"
                },
                {
                  "id": "version:up to and including 2.7.9",
                  "keyphrase": "up to and including 2.7.9",
                  "type": "version"
                },
                {
                  "id": "component:filtersDataBackend parameter",
                  "keyphrase": "filtersDataBackend parameter",
                  "type": "component"
                }
              ]
            },
            "similarity": 736.9277239353679
          },
          {
            "metadata": {
              "doc_id": "89",
              "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
              "source": "sparse",
              "original_content": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
              "keyphrase_sources": [
                {
                  "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
                  "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
                  "type": "rootcause"
                },
                {
                  "id": "rootcause:lack of sufficient preparation on existing SQL query",
                  "keyphrase": "lack of sufficient preparation on existing SQL query",
                  "type": "rootcause"
                },
                {
                  "id": "weakness:time-based SQL Injection",
                  "keyphrase": "time-based SQL Injection",
                  "type": "weakness"
                },
                {
                  "id": "impact:extract sensitive information from the database",
                  "keyphrase": "extract sensitive information from the database",
                  "type": "impact"
                },
                {
                  "id": "impact:extract sensitive information from database",
                  "keyphrase": "extract sensitive information from database",
                  "type": "impact"
                },
                {
                  "id": "attacker:unauthenticated attackers",
                  "keyphrase": "unauthenticated attackers",
                  "type": "attacker"
                },
                {
                  "id": "product:Product Filter by WBW WordPress plugin",
                  "keyphrase": "Product Filter by WBW WordPress plugin",
                  "type": "product"
                },
                {
                  "id": "version:up to and including 2.7.9",
                  "keyphrase": "up to and including 2.7.9",
                  "type": "version"
                },
                {
                  "id": "component:filtersDataBackend parameter",
                  "keyphrase": "filtersDataBackend parameter",
                  "type": "component"
                }
              ]
            },
            "similarity": 714.9092151745638
          },
          {
            "metadata": {
              "doc_id": "90",
              "name": "Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
              "source": "sparse",
              "original_content": "The product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component.",
              "keyphrase_sources": [
                {
                  "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
                  "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
                  "type": "rootcause"
                },
                {
                  "id": "rootcause:lack of sufficient preparation on existing SQL query",
                  "keyphrase": "lack of sufficient preparation on existing SQL query",
                  "type": "rootcause"
                },
                {
                  "id": "weakness:time-based SQL Injection",
                  "keyphrase": "time-based SQL Injection",
                  "type": "weakness"
                },
                {
                  "id": "impact:extract sensitive information from the database",
                  "keyphrase": "extract sensitive information from the database",
                  "type": "impact"
                },
                {
                  "id": "impact:extract sensitive information from database",
                  "keyphrase": "extract sensitive information from database",
                  "type": "impact"
                },
                {
                  "id": "attacker:unauthenticated attackers",
                  "keyphrase": "unauthenticated attackers",
                  "type": "attacker"
                },
                {
                  "id": "product:Product Filter by WBW WordPress plugin",
                  "keyphrase": "Product Filter by WBW WordPress plugin",
                  "type": "product"
                },
                {
                  "id": "version:up to and including 2.7.9",
                  "keyphrase": "up to and including 2.7.9",
                  "type": "version"
                },
                {
                  "id": "component:filtersDataBackend parameter",
                  "keyphrase": "filtersDataBackend parameter",
                  "type": "component"
                }
              ]
            },
            "similarity": 680.1526577839488
          },
          {
            "metadata": {
              "doc_id": "352",
              "name": "Cross-Site Request Forgery (CSRF)",
              "source": "sparse",
              "original_content": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
              "keyphrase_sources": [
                {
                  "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
                  "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
                  "type": "rootcause"
                },
                {
                  "id": "rootcause:lack of sufficient preparation on existing SQL query",
                  "keyphrase": "lack of sufficient preparation on existing SQL query",
                  "type": "rootcause"
                },
                {
                  "id": "attacker:unauthenticated attackers",
                  "keyphrase": "unauthenticated attackers",
                  "type": "attacker"
                },
                {
                  "id": "product:Product Filter by WBW WordPress plugin",
                  "keyphrase": "Product Filter by WBW WordPress plugin",
                  "type": "product"
                },
                {
                  "id": "version:up to and including 2.7.9",
                  "keyphrase": "up to and including 2.7.9",
                  "type": "version"
                },
                {
                  "id": "component:filtersDataBackend parameter",
                  "keyphrase": "filtersDataBackend parameter",
                  "type": "component"
                }
              ]
            },
            "similarity": 656.7248295117191
          },
          {
            "metadata": {
              "doc_id": "20",
              "name": "Improper Input Validation",
              "source": "sparse",
              "original_content": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
              "keyphrase_sources": [
                {
                  "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
                  "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
                  "type": "rootcause"
                }
              ]
            },
            "similarity": 628.4454322771368
          }
        ]
      },
      "rootcause:lack of sufficient preparation on existing SQL query": {
        "keyphrase": "lack of sufficient preparation on existing SQL query",
        "type": "rootcause",
        "cwes": [
          {
            "metadata": {
              "doc_id": "89",
              "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
              "source": "sparse",
              "original_content": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data."
            },
            "similarity": 593.5613195978337
          },
          {
            "metadata": {
              "doc_id": "116",
              "name": "Improper Encoding or Escaping of Output",
              "source": "sparse",
              "original_content": "The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved."
            },
            "similarity": 555.4012972202145
          },
          {
            "metadata": {
              "doc_id": "90",
              "name": "Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
              "source": "sparse",
              "original_content": "The product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component."
            },
            "similarity": 539.3160652147492
          },
          {
            "metadata": {
              "doc_id": "352",
              "name": "Cross-Site Request Forgery (CSRF)",
              "source": "sparse",
              "original_content": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request."
            },
            "similarity": 514.3269713576155
          },
          {
            "metadata": {
              "doc_id": "502",
              "name": "Deserialization of Untrusted Data",
              "source": "sparse",
              "original_content": "The product deserializes untrusted data without sufficiently ensuring that the resulting data will be valid.",
              "keyphrase_sources": [
                {
                  "id": "rootcause:lack of sufficient preparation on existing SQL query",
                  "keyphrase": "lack of sufficient preparation on existing SQL query",
                  "type": "rootcause"
                },
                {
                  "id": "weakness:time-based SQL Injection",
                  "keyphrase": "time-based SQL Injection",
                  "type": "weakness"
                }
              ]
            },
            "similarity": 507.2732218277614
          }
        ]
      },
      "weakness:time-based SQL Injection": {
        "keyphrase": "time-based SQL Injection",
        "type": "weakness",
        "cwes": [
          {
            "metadata": {
              "doc_id": "89",
              "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
              "source": "sparse",
              "original_content": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data."
            },
            "similarity": 528.2886277292463
          },
          {
            "metadata": {
              "doc_id": "116",
              "name": "Improper Encoding or Escaping of Output",
              "source": "sparse",
              "original_content": "The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved."
            },
            "similarity": 487.6659904782251
          },
          {
            "metadata": {
              "doc_id": "90",
              "name": "Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
              "source": "sparse",
              "original_content": "The product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component."
            },
            "similarity": 457.33426268662896
          },
          {
            "metadata": {
              "doc_id": "502",
              "name": "Deserialization of Untrusted Data",
              "source": "sparse",
              "original_content": "The product deserializes untrusted data without sufficiently ensuring that the resulting data will be valid."
            },
            "similarity": 447.26429958753687
          },
          {
            "metadata": {
              "doc_id": "943",
              "name": "Improper Neutralization of Special Elements in Data Query Logic",
              "source": "sparse",
              "original_content": "The product generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query.",
              "keyphrase_sources": [
                {
                  "id": "weakness:time-based SQL Injection",
                  "keyphrase": "time-based SQL Injection",
                  "type": "weakness"
                },
                {
                  "id": "impact:extract sensitive information from the database",
                  "keyphrase": "extract sensitive information from the database",
                  "type": "impact"
                },
                {
                  "id": "impact:extract sensitive information from database",
                  "keyphrase": "extract sensitive information from database",
                  "type": "impact"
                }
              ]
            },
            "similarity": 433.03208054649224
          }
        ]
      },
      "impact:extract sensitive information from the database": {
        "keyphrase": "extract sensitive information from the database",
        "type": "impact",
        "cwes": [
          {
            "metadata": {
              "doc_id": "89",
              "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
              "source": "sparse",
              "original_content": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data."
            },
            "similarity": 189.47652510558441
          },
          {
            "metadata": {
              "doc_id": "116",
              "name": "Improper Encoding or Escaping of Output",
              "source": "sparse",
              "original_content": "The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved."
            },
            "similarity": 172.6590413831472
          },
          {
            "metadata": {
              "doc_id": "90",
              "name": "Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
              "source": "sparse",
              "original_content": "The product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component."
            },
            "similarity": 172.18814210345815
          },
          {
            "metadata": {
              "doc_id": "943",
              "name": "Improper Neutralization of Special Elements in Data Query Logic",
              "source": "sparse",
              "original_content": "The product generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query."
            },
            "similarity": 160.8538668049235
          },
          {
            "metadata": {
              "doc_id": "862",
              "name": "Missing Authorization",
              "source": "sparse",
              "original_content": "The product does not perform an authorization check when an actor attempts to access a resource or perform an action.",
              "keyphrase_sources": [
                {
                  "id": "impact:extract sensitive information from the database",
                  "keyphrase": "extract sensitive information from the database",
                  "type": "impact"
                },
                {
                  "id": "impact:extract sensitive information from database",
                  "keyphrase": "extract sensitive information from database",
                  "type": "impact"
                },
                {
                  "id": "product:Product Filter by WBW WordPress plugin",
                  "keyphrase": "Product Filter by WBW WordPress plugin",
                  "type": "product"
                }
              ]
            },
            "similarity": 160.12568834794408
          }
        ]
      },
      "impact:extract sensitive information from database": {
        "keyphrase": "extract sensitive information from database",
        "type": "impact",
        "cwes": [
          {
            "metadata": {
              "doc_id": "89",
              "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
              "source": "sparse",
              "original_content": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data."
            },
            "similarity": 182.26882180092838
          },
          {
            "metadata": {
              "doc_id": "116",
              "name": "Improper Encoding or Escaping of Output",
              "source": "sparse",
              "original_content": "The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved."
            },
            "similarity": 165.5180606724557
          },
          {
            "metadata": {
              "doc_id": "90",
              "name": "Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
              "source": "sparse",
              "original_content": "The product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component."
            },
            "similarity": 165.03825518045633
          },
          {
            "metadata": {
              "doc_id": "943",
              "name": "Improper Neutralization of Special Elements in Data Query Logic",
              "source": "sparse",
              "original_content": "The product generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query."
            },
            "similarity": 153.8027389838126
          },
          {
            "metadata": {
              "doc_id": "862",
              "name": "Missing Authorization",
              "source": "sparse",
              "original_content": "The product does not perform an authorization check when an actor attempts to access a resource or perform an action."
            },
            "similarity": 153.07845527604897
          }
        ]
      },
      "attacker:unauthenticated attackers": {
        "keyphrase": "unauthenticated attackers",
        "type": "attacker",
        "cwes": [
          {
            "metadata": {
              "doc_id": "89",
              "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
              "source": "sparse",
              "original_content": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data."
            },
            "similarity": 168.07761691127422
          },
          {
            "metadata": {
              "doc_id": "116",
              "name": "Improper Encoding or Escaping of Output",
              "source": "sparse",
              "original_content": "The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved."
            },
            "similarity": 162.7705081141188
          },
          {
            "metadata": {
              "doc_id": "90",
              "name": "Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
              "source": "sparse",
              "original_content": "The product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component."
            },
            "similarity": 158.71997739628378
          },
          {
            "metadata": {
              "doc_id": "352",
              "name": "Cross-Site Request Forgery (CSRF)",
              "source": "sparse",
              "original_content": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request."
            },
            "similarity": 152.12975107830724
          },
          {
            "metadata": {
              "doc_id": "790",
              "name": "Improper Filtering of Special Elements",
              "source": "sparse",
              "original_content": "The product receives data from an upstream component, but does not filter or incorrectly filters special elements before sending it to a downstream component.",
              "keyphrase_sources": [
                {
                  "id": "attacker:unauthenticated attackers",
                  "keyphrase": "unauthenticated attackers",
                  "type": "attacker"
                },
                {
                  "id": "version:up to and including 2.7.9",
                  "keyphrase": "up to and including 2.7.9",
                  "type": "version"
                },
                {
                  "id": "component:filtersDataBackend parameter",
                  "keyphrase": "filtersDataBackend parameter",
                  "type": "component"
                }
              ]
            },
            "similarity": 148.47358338836654
          }
        ]
      },
      "product:Product Filter by WBW WordPress plugin": {
        "keyphrase": "Product Filter by WBW WordPress plugin",
        "type": "product",
        "cwes": [
          {
            "metadata": {
              "doc_id": "89",
              "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
              "source": "sparse",
              "original_content": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data."
            },
            "similarity": 186.48762402204358
          },
          {
            "metadata": {
              "doc_id": "116",
              "name": "Improper Encoding or Escaping of Output",
              "source": "sparse",
              "original_content": "The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved."
            },
            "similarity": 183.4984877843177
          },
          {
            "metadata": {
              "doc_id": "90",
              "name": "Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
              "source": "sparse",
              "original_content": "The product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component."
            },
            "similarity": 181.07405782995582
          },
          {
            "metadata": {
              "doc_id": "352",
              "name": "Cross-Site Request Forgery (CSRF)",
              "source": "sparse",
              "original_content": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request."
            },
            "similarity": 177.76383040379747
          },
          {
            "metadata": {
              "doc_id": "862",
              "name": "Missing Authorization",
              "source": "sparse",
              "original_content": "The product does not perform an authorization check when an actor attempts to access a resource or perform an action."
            },
            "similarity": 172.9932453932153
          }
        ]
      },
      "version:up to and including 2.7.9": {
        "keyphrase": "up to and including 2.7.9",
        "type": "version",
        "cwes": [
          {
            "metadata": {
              "doc_id": "116",
              "name": "Improper Encoding or Escaping of Output",
              "source": "sparse",
              "original_content": "The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved."
            },
            "similarity": 187.71435495611126
          },
          {
            "metadata": {
              "doc_id": "89",
              "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
              "source": "sparse",
              "original_content": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data."
            },
            "similarity": 187.26804039181883
          },
          {
            "metadata": {
              "doc_id": "90",
              "name": "Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
              "source": "sparse",
              "original_content": "The product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component."
            },
            "similarity": 176.55484303243688
          },
          {
            "metadata": {
              "doc_id": "352",
              "name": "Cross-Site Request Forgery (CSRF)",
              "source": "sparse",
              "original_content": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request."
            },
            "similarity": 175.69094065424073
          },
          {
            "metadata": {
              "doc_id": "790",
              "name": "Improper Filtering of Special Elements",
              "source": "sparse",
              "original_content": "The product receives data from an upstream component, but does not filter or incorrectly filters special elements before sending it to a downstream component."
            },
            "similarity": 175.59351468421946
          }
        ]
      },
      "component:filtersDataBackend parameter": {
        "keyphrase": "filtersDataBackend parameter",
        "type": "component",
        "cwes": [
          {
            "metadata": {
              "doc_id": "89",
              "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
              "source": "sparse",
              "original_content": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data."
            },
            "similarity": 170.72693681729913
          },
          {
            "metadata": {
              "doc_id": "116",
              "name": "Improper Encoding or Escaping of Output",
              "source": "sparse",
              "original_content": "The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved."
            },
            "similarity": 165.41393997313588
          },
          {
            "metadata": {
              "doc_id": "90",
              "name": "Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
              "source": "sparse",
              "original_content": "The product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component."
            },
            "similarity": 159.36361551225733
          },
          {
            "metadata": {
              "doc_id": "790",
              "name": "Improper Filtering of Special Elements",
              "source": "sparse",
              "original_content": "The product receives data from an upstream component, but does not filter or incorrectly filters special elements before sending it to a downstream component."
            },
            "similarity": 152.61472752181584
          },
          {
            "metadata": {
              "doc_id": "352",
              "name": "Cross-Site Request Forgery (CSRF)",
              "source": "sparse",
              "original_content": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request."
            },
            "similarity": 148.99755847425925
          }
        ]
      }
    },
    "keyphrase_mapping": {
      "116": [
        {
          "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
          "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
          "type": "rootcause"
        },
        {
          "id": "rootcause:lack of sufficient preparation on existing SQL query",
          "keyphrase": "lack of sufficient preparation on existing SQL query",
          "type": "rootcause"
        },
        {
          "id": "weakness:time-based SQL Injection",
          "keyphrase": "time-based SQL Injection",
          "type": "weakness"
        },
        {
          "id": "impact:extract sensitive information from the database",
          "keyphrase": "extract sensitive information from the database",
          "type": "impact"
        },
        {
          "id": "impact:extract sensitive information from database",
          "keyphrase": "extract sensitive information from database",
          "type": "impact"
        },
        {
          "id": "attacker:unauthenticated attackers",
          "keyphrase": "unauthenticated attackers",
          "type": "attacker"
        },
        {
          "id": "product:Product Filter by WBW WordPress plugin",
          "keyphrase": "Product Filter by WBW WordPress plugin",
          "type": "product"
        },
        {
          "id": "version:up to and including 2.7.9",
          "keyphrase": "up to and including 2.7.9",
          "type": "version"
        },
        {
          "id": "component:filtersDataBackend parameter",
          "keyphrase": "filtersDataBackend parameter",
          "type": "component"
        }
      ],
      "89": [
        {
          "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
          "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
          "type": "rootcause"
        },
        {
          "id": "rootcause:lack of sufficient preparation on existing SQL query",
          "keyphrase": "lack of sufficient preparation on existing SQL query",
          "type": "rootcause"
        },
        {
          "id": "weakness:time-based SQL Injection",
          "keyphrase": "time-based SQL Injection",
          "type": "weakness"
        },
        {
          "id": "impact:extract sensitive information from the database",
          "keyphrase": "extract sensitive information from the database",
          "type": "impact"
        },
        {
          "id": "impact:extract sensitive information from database",
          "keyphrase": "extract sensitive information from database",
          "type": "impact"
        },
        {
          "id": "attacker:unauthenticated attackers",
          "keyphrase": "unauthenticated attackers",
          "type": "attacker"
        },
        {
          "id": "product:Product Filter by WBW WordPress plugin",
          "keyphrase": "Product Filter by WBW WordPress plugin",
          "type": "product"
        },
        {
          "id": "version:up to and including 2.7.9",
          "keyphrase": "up to and including 2.7.9",
          "type": "version"
        },
        {
          "id": "component:filtersDataBackend parameter",
          "keyphrase": "filtersDataBackend parameter",
          "type": "component"
        }
      ],
      "90": [
        {
          "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
          "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
          "type": "rootcause"
        },
        {
          "id": "rootcause:lack of sufficient preparation on existing SQL query",
          "keyphrase": "lack of sufficient preparation on existing SQL query",
          "type": "rootcause"
        },
        {
          "id": "weakness:time-based SQL Injection",
          "keyphrase": "time-based SQL Injection",
          "type": "weakness"
        },
        {
          "id": "impact:extract sensitive information from the database",
          "keyphrase": "extract sensitive information from the database",
          "type": "impact"
        },
        {
          "id": "impact:extract sensitive information from database",
          "keyphrase": "extract sensitive information from database",
          "type": "impact"
        },
        {
          "id": "attacker:unauthenticated attackers",
          "keyphrase": "unauthenticated attackers",
          "type": "attacker"
        },
        {
          "id": "product:Product Filter by WBW WordPress plugin",
          "keyphrase": "Product Filter by WBW WordPress plugin",
          "type": "product"
        },
        {
          "id": "version:up to and including 2.7.9",
          "keyphrase": "up to and including 2.7.9",
          "type": "version"
        },
        {
          "id": "component:filtersDataBackend parameter",
          "keyphrase": "filtersDataBackend parameter",
          "type": "component"
        }
      ],
      "352": [
        {
          "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
          "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
          "type": "rootcause"
        },
        {
          "id": "rootcause:lack of sufficient preparation on existing SQL query",
          "keyphrase": "lack of sufficient preparation on existing SQL query",
          "type": "rootcause"
        },
        {
          "id": "attacker:unauthenticated attackers",
          "keyphrase": "unauthenticated attackers",
          "type": "attacker"
        },
        {
          "id": "product:Product Filter by WBW WordPress plugin",
          "keyphrase": "Product Filter by WBW WordPress plugin",
          "type": "product"
        },
        {
          "id": "version:up to and including 2.7.9",
          "keyphrase": "up to and including 2.7.9",
          "type": "version"
        },
        {
          "id": "component:filtersDataBackend parameter",
          "keyphrase": "filtersDataBackend parameter",
          "type": "component"
        }
      ],
      "20": [
        {
          "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
          "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
          "type": "rootcause"
        }
      ],
      "502": [
        {
          "id": "rootcause:lack of sufficient preparation on existing SQL query",
          "keyphrase": "lack of sufficient preparation on existing SQL query",
          "type": "rootcause"
        },
        {
          "id": "weakness:time-based SQL Injection",
          "keyphrase": "time-based SQL Injection",
          "type": "weakness"
        }
      ],
      "943": [
        {
          "id": "weakness:time-based SQL Injection",
          "keyphrase": "time-based SQL Injection",
          "type": "weakness"
        },
        {
          "id": "impact:extract sensitive information from the database",
          "keyphrase": "extract sensitive information from the database",
          "type": "impact"
        },
        {
          "id": "impact:extract sensitive information from database",
          "keyphrase": "extract sensitive information from database",
          "type": "impact"
        }
      ],
      "862": [
        {
          "id": "impact:extract sensitive information from the database",
          "keyphrase": "extract sensitive information from the database",
          "type": "impact"
        },
        {
          "id": "impact:extract sensitive information from database",
          "keyphrase": "extract sensitive information from database",
          "type": "impact"
        },
        {
          "id": "product:Product Filter by WBW WordPress plugin",
          "keyphrase": "Product Filter by WBW WordPress plugin",
          "type": "product"
        }
      ],
      "790": [
        {
          "id": "attacker:unauthenticated attackers",
          "keyphrase": "unauthenticated attackers",
          "type": "attacker"
        },
        {
          "id": "version:up to and including 2.7.9",
          "keyphrase": "up to and including 2.7.9",
          "type": "version"
        },
        {
          "id": "component:filtersDataBackend parameter",
          "keyphrase": "filtersDataBackend parameter",
          "type": "component"
        }
      ]
    },
    "relevant_cwes": [
      {
        "metadata": {
          "doc_id": "116",
          "name": "Improper Encoding or Escaping of Output",
          "source": "sparse",
          "original_content": "The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.",
          "keyphrase_sources": [
            {
              "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
              "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
              "type": "rootcause"
            },
            {
              "id": "rootcause:lack of sufficient preparation on existing SQL query",
              "keyphrase": "lack of sufficient preparation on existing SQL query",
              "type": "rootcause"
            },
            {
              "id": "weakness:time-based SQL Injection",
              "keyphrase": "time-based SQL Injection",
              "type": "weakness"
            },
            {
              "id": "impact:extract sensitive information from the database",
              "keyphrase": "extract sensitive information from the database",
              "type": "impact"
            },
            {
              "id": "impact:extract sensitive information from database",
              "keyphrase": "extract sensitive information from database",
              "type": "impact"
            },
            {
              "id": "attacker:unauthenticated attackers",
              "keyphrase": "unauthenticated attackers",
              "type": "attacker"
            },
            {
              "id": "product:Product Filter by WBW WordPress plugin",
              "keyphrase": "Product Filter by WBW WordPress plugin",
              "type": "product"
            },
            {
              "id": "version:up to and including 2.7.9",
              "keyphrase": "up to and including 2.7.9",
              "type": "version"
            },
            {
              "id": "component:filtersDataBackend parameter",
              "keyphrase": "filtersDataBackend parameter",
              "type": "component"
            }
          ]
        },
        "similarity": 736.9277239353679
      },
      {
        "metadata": {
          "doc_id": "89",
          "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
          "source": "sparse",
          "original_content": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
          "keyphrase_sources": [
            {
              "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
              "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
              "type": "rootcause"
            },
            {
              "id": "rootcause:lack of sufficient preparation on existing SQL query",
              "keyphrase": "lack of sufficient preparation on existing SQL query",
              "type": "rootcause"
            },
            {
              "id": "weakness:time-based SQL Injection",
              "keyphrase": "time-based SQL Injection",
              "type": "weakness"
            },
            {
              "id": "impact:extract sensitive information from the database",
              "keyphrase": "extract sensitive information from the database",
              "type": "impact"
            },
            {
              "id": "impact:extract sensitive information from database",
              "keyphrase": "extract sensitive information from database",
              "type": "impact"
            },
            {
              "id": "attacker:unauthenticated attackers",
              "keyphrase": "unauthenticated attackers",
              "type": "attacker"
            },
            {
              "id": "product:Product Filter by WBW WordPress plugin",
              "keyphrase": "Product Filter by WBW WordPress plugin",
              "type": "product"
            },
            {
              "id": "version:up to and including 2.7.9",
              "keyphrase": "up to and including 2.7.9",
              "type": "version"
            },
            {
              "id": "component:filtersDataBackend parameter",
              "keyphrase": "filtersDataBackend parameter",
              "type": "component"
            }
          ]
        },
        "similarity": 714.9092151745638
      },
      {
        "metadata": {
          "doc_id": "90",
          "name": "Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
          "source": "sparse",
          "original_content": "The product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component.",
          "keyphrase_sources": [
            {
              "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
              "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
              "type": "rootcause"
            },
            {
              "id": "rootcause:lack of sufficient preparation on existing SQL query",
              "keyphrase": "lack of sufficient preparation on existing SQL query",
              "type": "rootcause"
            },
            {
              "id": "weakness:time-based SQL Injection",
              "keyphrase": "time-based SQL Injection",
              "type": "weakness"
            },
            {
              "id": "impact:extract sensitive information from the database",
              "keyphrase": "extract sensitive information from the database",
              "type": "impact"
            },
            {
              "id": "impact:extract sensitive information from database",
              "keyphrase": "extract sensitive information from database",
              "type": "impact"
            },
            {
              "id": "attacker:unauthenticated attackers",
              "keyphrase": "unauthenticated attackers",
              "type": "attacker"
            },
            {
              "id": "product:Product Filter by WBW WordPress plugin",
              "keyphrase": "Product Filter by WBW WordPress plugin",
              "type": "product"
            },
            {
              "id": "version:up to and including 2.7.9",
              "keyphrase": "up to and including 2.7.9",
              "type": "version"
            },
            {
              "id": "component:filtersDataBackend parameter",
              "keyphrase": "filtersDataBackend parameter",
              "type": "component"
            }
          ]
        },
        "similarity": 680.1526577839488
      },
      {
        "metadata": {
          "doc_id": "352",
          "name": "Cross-Site Request Forgery (CSRF)",
          "source": "sparse",
          "original_content": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
          "keyphrase_sources": [
            {
              "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
              "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
              "type": "rootcause"
            },
            {
              "id": "rootcause:lack of sufficient preparation on existing SQL query",
              "keyphrase": "lack of sufficient preparation on existing SQL query",
              "type": "rootcause"
            },
            {
              "id": "attacker:unauthenticated attackers",
              "keyphrase": "unauthenticated attackers",
              "type": "attacker"
            },
            {
              "id": "product:Product Filter by WBW WordPress plugin",
              "keyphrase": "Product Filter by WBW WordPress plugin",
              "type": "product"
            },
            {
              "id": "version:up to and including 2.7.9",
              "keyphrase": "up to and including 2.7.9",
              "type": "version"
            },
            {
              "id": "component:filtersDataBackend parameter",
              "keyphrase": "filtersDataBackend parameter",
              "type": "component"
            }
          ]
        },
        "similarity": 656.7248295117191
      },
      {
        "metadata": {
          "doc_id": "20",
          "name": "Improper Input Validation",
          "source": "sparse",
          "original_content": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
          "keyphrase_sources": [
            {
              "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
              "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
              "type": "rootcause"
            }
          ]
        },
        "similarity": 628.4454322771368
      },
      {
        "metadata": {
          "doc_id": "502",
          "name": "Deserialization of Untrusted Data",
          "source": "sparse",
          "original_content": "The product deserializes untrusted data without sufficiently ensuring that the resulting data will be valid.",
          "keyphrase_sources": [
            {
              "id": "rootcause:lack of sufficient preparation on existing SQL query",
              "keyphrase": "lack of sufficient preparation on existing SQL query",
              "type": "rootcause"
            },
            {
              "id": "weakness:time-based SQL Injection",
              "keyphrase": "time-based SQL Injection",
              "type": "weakness"
            }
          ]
        },
        "similarity": 507.2732218277614
      },
      {
        "metadata": {
          "doc_id": "943",
          "name": "Improper Neutralization of Special Elements in Data Query Logic",
          "source": "sparse",
          "original_content": "The product generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query.",
          "keyphrase_sources": [
            {
              "id": "weakness:time-based SQL Injection",
              "keyphrase": "time-based SQL Injection",
              "type": "weakness"
            },
            {
              "id": "impact:extract sensitive information from the database",
              "keyphrase": "extract sensitive information from the database",
              "type": "impact"
            },
            {
              "id": "impact:extract sensitive information from database",
              "keyphrase": "extract sensitive information from database",
              "type": "impact"
            }
          ]
        },
        "similarity": 433.03208054649224
      },
      {
        "metadata": {
          "doc_id": "862",
          "name": "Missing Authorization",
          "source": "sparse",
          "original_content": "The product does not perform an authorization check when an actor attempts to access a resource or perform an action.",
          "keyphrase_sources": [
            {
              "id": "impact:extract sensitive information from the database",
              "keyphrase": "extract sensitive information from the database",
              "type": "impact"
            },
            {
              "id": "impact:extract sensitive information from database",
              "keyphrase": "extract sensitive information from database",
              "type": "impact"
            },
            {
              "id": "product:Product Filter by WBW WordPress plugin",
              "keyphrase": "Product Filter by WBW WordPress plugin",
              "type": "product"
            }
          ]
        },
        "similarity": 160.12568834794408
      },
      {
        "metadata": {
          "doc_id": "790",
          "name": "Improper Filtering of Special Elements",
          "source": "sparse",
          "original_content": "The product receives data from an upstream component, but does not filter or incorrectly filters special elements before sending it to a downstream component.",
          "keyphrase_sources": [
            {
              "id": "attacker:unauthenticated attackers",
              "keyphrase": "unauthenticated attackers",
              "type": "attacker"
            },
            {
              "id": "version:up to and including 2.7.9",
              "keyphrase": "up to and including 2.7.9",
              "type": "version"
            },
            {
              "id": "component:filtersDataBackend parameter",
              "keyphrase": "filtersDataBackend parameter",
              "type": "component"
            }
          ]
        },
        "similarity": 148.47358338836654
      }
    ],
    "enhanced_query": "# Vulnerability Description\n\n    The Product Filter by WBW plugin for WordPress is vulnerable to **time-based SQL Injection** via the filtersDataBackend parameter in all versions up to, and including, 2.7.9 due to **insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query**. This makes it possible for unauthenticated attackers to append additional SQL queries into already existing queries that can be used to extract sensitive information from the database.\n\n    # Keyphrase-Specific CWE Analysis\n    This vulnerability contains multiple keyphrases that may map to different CWEs. \n    Please analyze each keyphrase separately and determine the most appropriate CWE(s) for each.\n\n    ## ROOTCAUSE: 'insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query'\n\nRelevant CWEs for this ROOTCAUSE:\n\n### 1. CWE-116: Improper Encoding or Escaping of Output (Score: 736.93)\n\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved....\n\n### 2. CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') (Score: 714.91)\n\nThe product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal o...\n\n### 3. CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection') (Score: 680.15)\n\nThe product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component....\n\n### 4. CWE-352: Cross-Site Request Forgery (CSRF) (Score: 656.72)\n\nThe web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request....\n\n### 5. CWE-20: Improper Input Validation (Score: 628.45)\n\nThe product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly....\n\n## ROOTCAUSE: 'lack of sufficient preparation on existing SQL query'\n\nRelevant CWEs for this ROOTCAUSE:\n\n### 1. CWE-116: Improper Encoding or Escaping of Output (Score: 736.93)\n\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved....\n\n### 2. CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') (Score: 714.91)\n\nThe product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal o...\n\n### 3. CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection') (Score: 680.15)\n\nThe product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component....\n\n### 4. CWE-352: Cross-Site Request Forgery (CSRF) (Score: 656.72)\n\nThe web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request....\n\n### 5. CWE-502: Deserialization of Untrusted Data (Score: 507.27)\n\nThe product deserializes untrusted data without sufficiently ensuring that the resulting data will be valid....\n\n## WEAKNESS: 'time-based SQL Injection'\n\nRelevant CWEs for this WEAKNESS:\n\n### 1. CWE-116: Improper Encoding or Escaping of Output (Score: 736.93)\n\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved....\n\n### 2. CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') (Score: 714.91)\n\nThe product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal o...\n\n### 3. CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection') (Score: 680.15)\n\nThe product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component....\n\n### 4. CWE-502: Deserialization of Untrusted Data (Score: 507.27)\n\nThe product deserializes untrusted data without sufficiently ensuring that the resulting data will be valid....\n\n### 5. CWE-943: Improper Neutralization of Special Elements in Data Query Logic (Score: 433.03)\n\nThe product generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query....\n\n## IMPACT: 'extract sensitive information from the database'\n\nRelevant CWEs for this IMPACT:\n\n### 1. CWE-116: Improper Encoding or Escaping of Output (Score: 736.93)\n\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved....\n\n### 2. CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') (Score: 714.91)\n\nThe product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal o...\n\n### 3. CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection') (Score: 680.15)\n\nThe product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component....\n\n### 4. CWE-943: Improper Neutralization of Special Elements in Data Query Logic (Score: 433.03)\n\nThe product generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query....\n\n### 5. CWE-862: Missing Authorization (Score: 160.13)\n\nThe product does not perform an authorization check when an actor attempts to access a resource or perform an action....\n\n## IMPACT: 'extract sensitive information from database'\n\nRelevant CWEs for this IMPACT:\n\n### 1. CWE-116: Improper Encoding or Escaping of Output (Score: 736.93)\n\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved....\n\n### 2. CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') (Score: 714.91)\n\nThe product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal o...\n\n### 3. CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection') (Score: 680.15)\n\nThe product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component....\n\n### 4. CWE-943: Improper Neutralization of Special Elements in Data Query Logic (Score: 433.03)\n\nThe product generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query....\n\n### 5. CWE-862: Missing Authorization (Score: 160.13)\n\nThe product does not perform an authorization check when an actor attempts to access a resource or perform an action....\n\n## ATTACKER: 'unauthenticated attackers'\n\nRelevant CWEs for this ATTACKER:\n\n### 1. CWE-116: Improper Encoding or Escaping of Output (Score: 736.93)\n\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved....\n\n### 2. CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') (Score: 714.91)\n\nThe product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal o...\n\n### 3. CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection') (Score: 680.15)\n\nThe product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component....\n\n### 4. CWE-352: Cross-Site Request Forgery (CSRF) (Score: 656.72)\n\nThe web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request....\n\n### 5. CWE-790: Improper Filtering of Special Elements (Score: 148.47)\n\nThe product receives data from an upstream component, but does not filter or incorrectly filters special elements before sending it to a downstream component....\n\n## PRODUCT: 'Product Filter by WBW WordPress plugin'\n\nRelevant CWEs for this PRODUCT:\n\n### 1. CWE-116: Improper Encoding or Escaping of Output (Score: 736.93)\n\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved....\n\n### 2. CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') (Score: 714.91)\n\nThe product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal o...\n\n### 3. CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection') (Score: 680.15)\n\nThe product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component....\n\n### 4. CWE-352: Cross-Site Request Forgery (CSRF) (Score: 656.72)\n\nThe web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request....\n\n### 5. CWE-862: Missing Authorization (Score: 160.13)\n\nThe product does not perform an authorization check when an actor attempts to access a resource or perform an action....\n\n## VERSION: 'up to and including 2.7.9'\n\nRelevant CWEs for this VERSION:\n\n### 1. CWE-116: Improper Encoding or Escaping of Output (Score: 736.93)\n\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved....\n\n### 2. CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') (Score: 714.91)\n\nThe product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal o...\n\n### 3. CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection') (Score: 680.15)\n\nThe product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component....\n\n### 4. CWE-352: Cross-Site Request Forgery (CSRF) (Score: 656.72)\n\nThe web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request....\n\n### 5. CWE-790: Improper Filtering of Special Elements (Score: 148.47)\n\nThe product receives data from an upstream component, but does not filter or incorrectly filters special elements before sending it to a downstream component....\n\n## COMPONENT: 'filtersDataBackend parameter'\n\nRelevant CWEs for this COMPONENT:\n\n### 1. CWE-116: Improper Encoding or Escaping of Output (Score: 736.93)\n\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved....\n\n### 2. CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') (Score: 714.91)\n\nThe product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal o...\n\n### 3. CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection') (Score: 680.15)\n\nThe product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component....\n\n### 4. CWE-352: Cross-Site Request Forgery (CSRF) (Score: 656.72)\n\nThe web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request....\n\n### 5. CWE-790: Improper Filtering of Special Elements (Score: 148.47)\n\nThe product receives data from an upstream component, but does not filter or incorrectly filters special elements before sending it to a downstream component....\n\n\n    # Analysis Instructions\n    1. For each keyphrase, identify the most appropriate CWE(s) that represent the weakness.\n    2. Consider how the different keyphrases might relate to each other in the vulnerability chain.\n    3. Provide a final determination of primary CWE(s) and any secondary CWEs.\n    4. Format your response using the standard analysis template.\n\n    Please analyze how these different weaknesses interact and provide a comprehensive CWE classification.\n    "
  },
  "retrieval_time": 1.5539543628692627
}