{
  "cve_id": "CVE-2024-5642",
  "description": "CPython 3.9 and earlier doesnt disallow configuring an empty list ([]) for SSLContext.set_npn_protocols() which is an invalid value for the underlying OpenSSL API. This results in a **buffer over-read** when NPN is used (see CVE-2024-5535 for OpenSSL). This vulnerability is of low severity due to NPN being not widely used and specifying an empty list likely being uncommon in-practice (typically a protocol name would be configured).",
  "key_phrases": {
    "rootcause": "",
    "weakness": "buffer over-read",
    "impact": "",
    "vector": "",
    "attacker": "",
    "product": "CPython",
    "version": "3.9 and earlier",
    "component": "SSLContext.set_npn_protocols()"
  },
  "reference_content": "Based on the provided information, here's an analysis of CVE-2024-5642:\n\n**Root Cause of Vulnerability:**\nThe vulnerability stems from a buffer over-read in the `SSL_select_next_proto` function within OpenSSL. CPython versions 3.9 and earlier do not prevent users from configuring an empty list for `SSLContext.set_npn_protocols()`. This empty list is an invalid input for the underlying OpenSSL API, `SSL_select_next_proto`. When this invalid input is passed, `SSL_select_next_proto` attempts to read past the buffer boundary, leading to a memory over-read.\n\n**Weaknesses/Vulnerabilities Present:**\n- **Buffer Over-read:** The primary vulnerability is a buffer over-read in OpenSSL's `SSL_select_next_proto` function when handling an empty list of protocols.\n- **Improper Input Validation:** CPython failed to validate the input to `SSLContext.set_npn_protocols()`, allowing an invalid empty list to be passed to the underlying OpenSSL API.\n\n**Impact of Exploitation:**\n- **Information Disclosure:** A successful exploitation leads to the disclosure of potentially sensitive information. In the case of a client using NPN, a chunk of the client's heap memory (up to 255 bytes) is copied and sent to the server. This data is encrypted during transit but may still leak sensitive data.\n- **Memory Safety Failure:** More generally, the impact of this function returning an out-of-bounds pointer is a catastrophic memory safety failure due to the incorrect memory being copied and sent to a peer.\n\n**Attack Vectors:**\n- The vulnerability is triggered when an application using affected versions of Python calls `SSLContext.set_npn_protocols()` with an empty list `[]`.\n- The server must support NPN for the vulnerability to be exploitable.\n\n**Required Attacker Capabilities/Position:**\n- An attacker needs to control or influence the client-side application to provide an empty list to the `SSLContext.set_npn_protocols()` function.\n- The attacker does not necessarily need to be directly in the network path to exploit the vulnerability if they can influence the client-side application behavior.\n- The attacker has to be in a position where NPN is used in the communication.\n\n**Additional Notes:**\n- The severity of the vulnerability is rated as \"LOW\" due to the decline of NPN usage in favor of ALPN and because the configuration of an empty list of protocols is unlikely.\n- The vulnerability is related to CVE-2024-5535, which describes the buffer over-read in OpenSSL's `SSL_select_next_proto` function.\n- Python versions 3.10 and later removed NPN support, and are therefore not affected.\n- CPython versions 3.7 to 3.9 are only affected when using OpenSSL versions < 1.1.1.\n- A mitigation strategy is to upgrade to Python 3.10 or later or avoid setting an empty list as the NPN protocols. A further mitigation is to avoid the use of NPN completely.\n\nThis information is extracted from the provided text and provides details beyond the basic CVE description.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n\n| CWE ID    | CWE Name                                                               | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| --------- | ---------------------------------------------------------------------- | ---------- | --------------------- | ------------------------------- | ------------------------------- |\n| CWE-125   | Out-of-bounds Read                                                     | 0.9        | Base                  | Primary                         | Allowed                       |\n| CWE-1284  | Improper Validation of Specified Quantity in Input                     | 0.7        | Base                  | Secondary                       | Allowed                       |\n| CWE-20    | Improper Input Validation                                              | 0.6        | Class                 | Secondary                       | Discouraged                    |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary weakness is CWE-125 **Out-of-bounds Read**, as the vulnerability description explicitly mentions a \"**buffer over-read**\". CWE-125 is a base-level CWE, which aligns with the preferred level of abstraction. The retriever results also list CWE-125 as the top candidate.\n\nCWE-1284 **Improper Validation of Specified Quantity in Input** is considered a secondary weakness, stemming from CPython's failure to validate the input list size before passing it to OpenSSL. It is related to CWE-20, but more specific.\n\nCWE-20 **Improper Input Validation** is a high-level class. Because there is a failure to validate the input to `SSLContext.set_npn_protocols()`, allowing an invalid empty list to be passed to the underlying OpenSSL API, CWE-20 is included, but rated as discouraged.\n\n```mermaid\ngraph TD\n    cwe125[\"CWE-125: Out-of-bounds Read\"]\n    cwe1284[\"CWE-1284: Improper Validation of Specified Quantity in Input\"]\n    cwe20[\"CWE-20: Improper Input Validation\"]\n    \n    cwe1284 -->|CHILDOF| cwe20\n    cwe125 -- FLOWS_FROM --> cwe1284\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe125 primary\n    class cwe1284,cwe20 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with **Improper Input Validation** (CWE-20, Class) where CPython **fails to validate** the size of the input list passed to `SSLContext.set_npn_protocols()`. This leads to **Improper Validation of Specified Quantity in Input** (CWE-1284, Base) because the quantity (size of the list) is not validated. Consequently, an invalid empty list is passed to the OpenSSL API, triggering a **Buffer Over-read** (CWE-125, Base) in OpenSSL's `SSL_select_next_proto` function. The final impact is the disclosure of potentially sensitive information due to memory being read out of bounds.\n\n## Summary of Analysis\n\nThe vulnerability is primarily an **out-of-bounds read** (CWE-125) that occurs because the input to `SSLContext.set_npn_protocols()` is not properly validated. The vulnerability description and CVE reference links content summary confirm the **buffer over-read** caused by the **lack of input validation**.\n\nThe selection of CWE-125 is strongly supported by the vulnerability description which states \"...This results in a **buffer over-read** when NPN is used...\". The CVE Reference Links Content Summary also states \"**Buffer Over-read:** The primary vulnerability is a buffer over-read in OpenSSL's `SSL_select_next_proto` function when handling an empty list of protocols.\". This makes it very evident that the primary CWE is CWE-125.\n\nCWE-1284 is added to reflect the **Improper Validation of Specified Quantity in Input** that led to the vulnerability. The CVE Reference Links Content Summary states \"**Improper Input Validation:** CPython failed to validate the input to `SSLContext.set_npn_protocols()`, allowing an invalid empty list to be passed to the underlying OpenSSL API.\". This shows a clear lack of input validation of the input quantity.\n\nCWE-20 is added as the more general **Improper Input Validation** (parent of CWE-1284) that led to the vulnerability. The CVE Reference Links Content Summary states \"**Improper Input Validation:** CPython failed to validate the input to `SSLContext.set_npn_protocols()`, allowing an invalid empty list to be passed to the underlying OpenSSL API.\".\n\nThe chosen CWEs are at the optimal level of specificity, with CWE-125 being a base CWE representing the direct cause, and CWE-1284 and CWE-20 representing the **improper input validation** that led to the vulnerability.\n\nCWEs considered but not used:\n\n*   CWE-476 **NULL Pointer Dereference**: While possible, there is no direct mention of null pointer dereference, so it is not included.\n*   CWE-126 **Buffer Over-read**: While very similar to CWE-125, the description specifically states a read, so CWE-125 is preferred.\n*   CWE-170 **Improper Null Termination**: There is no indication of null termination issues in the description.\n*   CWE-193 **Off-by-one Error**: No evidence of an off-by-one error.\n*   CWE-617 **Reachable Assertion**: No assertions involved in this vulnerability.\n*   CWE-824 **Access of Uninitialized Pointer**: No uninitialized pointers involved.\n*   CWE-1325 **Improperly Controlled Sequential Memory Allocation**: This is not directly related to the vulnerability.\n*   CWE-327 **Use of a Broken or Risky Cryptographic Algorithm**: The vulnerability does not stem from a broken or risky cryptographic algorithm.\n*   CWE-703 **Improper Check or Handling of Exceptional Conditions** - Too high level, and doesn't precisely match the **improper input validation**.\n*   CWE-754 **Improper Check for Unusual or Exceptional Conditions** - Too high level, and doesn't precisely match the **improper input validation**.\n*   CWE-843 **Access of Resource Using Incompatible Type ('Type Confusion')** - There is no type confusion, so it is not included.\n*   CWE-212 **Improper Removal of Sensitive Information Before Storage or Transfer** - There is no sensitive information handling issue.\n*   CWE-131 **Incorrect Calculation of Buffer Size** - The issue is not an incorrect calculation of the buffer size itself but rather the lack of validation of the provided input.",
  "analysis_with_relationships": "# Summary\n\n| CWE ID    | CWE Name                                                               | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| --------- | ---------------------------------------------------------------------- | ---------- | --------------------- | ------------------------------- | ------------------------------- |\n| CWE-125   | Out-of-bounds Read                                                     | 0.9        | Base                  | Primary                         | Allowed                       |\n| CWE-1284  | Improper Validation of Specified Quantity in Input                     | 0.7        | Base                  | Secondary                       | Allowed                       |\n| CWE-20    | Improper Input Validation                                              | 0.6        | Class                 | Secondary                       | Discouraged                    |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary weakness is CWE-125 **Out-of-bounds Read**, as the vulnerability description explicitly mentions a \"**buffer over-read**\". CWE-125 is a base-level CWE, which aligns with the preferred level of abstraction. The retriever results also list CWE-125 as the top candidate.\n\nCWE-1284 **Improper Validation of Specified Quantity in Input** is considered a secondary weakness, stemming from CPython's failure to validate the input list size before passing it to OpenSSL. It is related to CWE-20, but more specific.\n\nCWE-20 **Improper Input Validation** is a high-level class. Because there is a failure to validate the input to `SSLContext.set_npn_protocols()`, allowing an invalid empty list to be passed to the underlying OpenSSL API, CWE-20 is included, but rated as discouraged.\n\n```mermaid\ngraph TD\n    cwe125[\"CWE-125: Out-of-bounds Read\"]\n    cwe1284[\"CWE-1284: Improper Validation of Specified Quantity in Input\"]\n    cwe20[\"CWE-20: Improper Input Validation\"]\n    \n    cwe1284 -->|CHILDOF| cwe20\n    cwe125 -- FLOWS_FROM --> cwe1284\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe125 primary\n    class cwe1284,cwe20 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with **Improper Input Validation** (CWE-20, Class) where CPython **fails to validate** the size of the input list passed to `SSLContext.set_npn_protocols()`. This leads to **Improper Validation of Specified Quantity in Input** (CWE-1284, Base) because the quantity (size of the list) is not validated. Consequently, an invalid empty list is passed to the OpenSSL API, triggering a **Buffer Over-read** (CWE-125, Base) in OpenSSL's `SSL_select_next_proto` function. The final impact is the disclosure of potentially sensitive information due to memory being read out of bounds.\n\n## Summary of Analysis\n\nThe vulnerability is primarily an **out-of-bounds read** (CWE-125) that occurs because the input to `SSLContext.set_npn_protocols()` is not properly validated. The vulnerability description and CVE reference links content summary confirm the **buffer over-read** caused by the **lack of input validation**.\n\nThe selection of CWE-125 is strongly supported by the vulnerability description which states \"...This results in a **buffer over-read** when NPN is used...\". The CVE Reference Links Content Summary also states \"**Buffer Over-read:** The primary vulnerability is a buffer over-read in OpenSSL's `SSL_select_next_proto` function when handling an empty list of protocols.\". This makes it very evident that the primary CWE is CWE-125.\n\nCWE-1284 is added to reflect the **Improper Validation of Specified Quantity in Input** that led to the vulnerability. The CVE Reference Links Content Summary states \"**Improper Input Validation:** CPython failed to validate the input to `SSLContext.set_npn_protocols()`, allowing an invalid empty list to be passed to the underlying OpenSSL API.\". This shows a clear lack of input validation of the input quantity.\n\nCWE-20 is added as the more general **Improper Input Validation** (parent of CWE-1284) that led to the vulnerability. The CVE Reference Links Content Summary states \"**Improper Input Validation:** CPython failed to validate the input to `SSLContext.set_npn_protocols()`, allowing an invalid empty list to be passed to the underlying OpenSSL API.\".\n\nThe chosen CWEs are at the optimal level of specificity, with CWE-125 being a base CWE representing the direct cause, and CWE-1284 and CWE-20 representing the **improper input validation** that led to the vulnerability.\n\nCWEs considered but not used:\n\n*   CWE-476 **NULL Pointer Dereference**: While possible, there is no direct mention of null pointer dereference, so it is not included.\n*   CWE-126 **Buffer Over-read**: While very similar to CWE-125, the description specifically states a read, so CWE-125 is preferred.\n*   CWE-170 **Improper Null Termination**: There is no indication of null termination issues in the description.\n*   CWE-193 **Off-by-one Error**: No evidence of an off-by-one error.\n*   CWE-617 **Reachable Assertion**: No assertions involved in this vulnerability.\n*   CWE-824 **Access of Uninitialized Pointer**: No uninitialized pointers involved.\n*   CWE-1325 **Improperly Controlled Sequential Memory Allocation**: This is not directly related to the vulnerability.\n*   CWE-327 **Use of a Broken or Risky Cryptographic Algorithm**: The vulnerability does not stem from a broken or risky cryptographic algorithm.\n*   CWE-703 **Improper Check or Handling of Exceptional Conditions** - Too high level, and doesn't precisely match the **improper input validation**.\n*   CWE-754 **Improper Check for Unusual or Exceptional Conditions** - Too high level, and doesn't precisely match the **improper input validation**.\n*   CWE-843 **Access of Resource Using Incompatible Type ('Type Confusion')** - There is no type confusion, so it is not included.\n*   CWE-212 **Improper Removal of Sensitive Information Before Storage or Transfer** - There is no sensitive information handling issue.\n*   CWE-131 **Incorrect Calculation of Buffer Size** - The issue is not an incorrect calculation of the buffer size itself but rather the lack of validation of the provided input.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-1284:**\n- 1284 (Improper Validation of Specified Quantity in Input) - ROOT\n\n\n**Chain starting from CWE-476:**\n- 476 (NULL Pointer Dereference) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "125",
        "name": "Out-of-bounds Read",
        "source": "sparse"
      },
      "similarity": 383.43945401544795
    },
    {
      "metadata": {
        "doc_id": "476",
        "name": "NULL Pointer Dereference",
        "source": "sparse"
      },
      "similarity": 364.64916103600905
    },
    {
      "metadata": {
        "doc_id": "327",
        "name": "Use of a Broken or Risky Cryptographic Algorithm",
        "source": "sparse"
      },
      "similarity": 351.00072444340617
    },
    {
      "metadata": {
        "doc_id": "1284",
        "name": "Improper Validation of Specified Quantity in Input",
        "source": "sparse"
      },
      "similarity": 345.6807226906364
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 344.47070187005534
    },
    {
      "metadata": {
        "doc_id": "20",
        "name": "Improper Input Validation",
        "source": "sparse"
      },
      "similarity": 341.84568999564823
    },
    {
      "metadata": {
        "doc_id": "126",
        "name": "Buffer Over-read",
        "source": "sparse"
      },
      "similarity": 339.7036374363146
    },
    {
      "metadata": {
        "doc_id": "22",
        "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
        "source": "sparse"
      },
      "similarity": 330.72775473621545
    },
    {
      "metadata": {
        "doc_id": "626",
        "name": "Null Byte Interaction Error (Poison Null Byte)",
        "type": "Variant",
        "original_content": "The product does not properly handle null bytes or NUL characters when passing data between different representations or components.",
        "keyphrase_source": "weakness:buffer over-read",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.48133466494251015
          }
        }
      },
      "similarity": 0.48133466494251015
    },
    {
      "doc_id": "1325",
      "text": "CWE-1325: Improperly Controlled Sequential Memory Allocation",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "1325",
        "name": "Improperly Controlled Sequential Memory Allocation",
        "type": "base",
        "original_content": "CWE-1325: Improperly Controlled Sequential Memory Allocation",
        "relationships": [
          {
            "source_id": "1325",
            "target_id": "476",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1325",
            "target_id": "789",
            "label": "PEEROF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1325",
            "target_id": "770",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "770",
            "target_id": "1325",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "476",
            "target_id": "1325",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "476",
                  "1325",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "476"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "476",
                  "1325",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "476"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "1325",
                  "476",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "476"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-1284",
      "CWE-476",
      "CWE-327",
      "CWE-125",
      "CWE-131",
      "CWE-193",
      "CWE-170",
      "CWE-843",
      "CWE-20",
      "CWE-824",
      "CWE-617",
      "CWE-754",
      "CWE-703",
      "CWE-1325",
      "CWE-212",
      "CWE-126"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}