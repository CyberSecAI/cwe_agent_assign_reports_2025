{
  "method": "sparse_base",
  "query": "In the Linux kernel, the following vulnerability has been resolved bpf Fail verification for sign-extension of packet data/data_end/data_meta syzbot reported a kernel crash due to commit 1f1e864b6555 (bpf Handle sign-extenstin ctx member accesses). The reason is due to sign-extension of 32-bit load for packet data/data_end/data_meta uapi field. The original code looks like r2 = *(s32 *)(r1 + 76) /* load __sk_buff->data */ r3 = *(u32 *)(r1 + 80) /* load __sk_buff->data_end */ r0 = r2 r0 += 8 if r3 > r0 goto +1 ... Note that __sk_buff->data load has 32-bit sign extension. After verification and convert_ctx_accesses(), the final asm code looks like r2 = *(u64 *)(r1 +208) r2 = (s32)r2 r3 = *(u64 *)(r1 +80) r0 = r2 r0 += 8 if r3 > r0 goto pc+1 ... Note that r2 = (s32)r2 may make the kernel __sk_buff->data address invalid which may cause runtime failure. Currently, in C code, typically we have void *data = (void *)(long)skb->data void *data_end = (void *)(long)skb->data_end ... and it will generate r2 = *(u64 *)(r1 +208) r3 = *(u64 *)(r1 +80) r0 = r2 r0 += 8 if r3 > r0 goto pc+1 If we allow sign-extension, void *data = (void *)(long)(int)skb->data void *data_end = (void *)(long)skb->data_end ... the generated code looks like r2 = *(u64 *)(r1 +208) r2 >= 32 r3 = *(u64 *)(r1 +80) r0 = r2 r0 += 8 if r3 > r0 goto pc+1 and this will cause verification failure since r2 data */ this patch added additional checking in is_valid_access() callback function for packet data/data_end/data_meta access. If those accesses are with sign-extenstion, the verification will fail. [1] https//lore.kernel.org/bpf/000000000000c90eee061d236d37@google.com/",
  "keyphrases": {
    "base_query": "In the Linux kernel, the following vulnerability has been resolved bpf Fail verification for sign-extension of packet data/data_end/data_meta syzbot reported a kernel crash due to commit 1f1e864b6555 (bpf Handle sign-extenstin ctx member accesses). The reason is due to sign-extension of 32-bit load for packet data/data_end/data_meta uapi field. The original code looks like r2 = *(s32 *)(r1 + 76) /* load __sk_buff->data */ r3 = *(u32 *)(r1 + 80) /* load __sk_buff->data_end */ r0 = r2 r0 += 8 if r3 > r0 goto +1 ... Note that __sk_buff->data load has 32-bit sign extension. After verification and convert_ctx_accesses(), the final asm code looks like r2 = *(u64 *)(r1 +208) r2 = (s32)r2 r3 = *(u64 *)(r1 +80) r0 = r2 r0 += 8 if r3 > r0 goto pc+1 ... Note that r2 = (s32)r2 may make the kernel __sk_buff->data address invalid which may cause runtime failure. Currently, in C code, typically we have void *data = (void *)(long)skb->data void *data_end = (void *)(long)skb->data_end ... and it will generate r2 = *(u64 *)(r1 +208) r3 = *(u64 *)(r1 +80) r0 = r2 r0 += 8 if r3 > r0 goto pc+1 If we allow sign-extension, void *data = (void *)(long)(int)skb->data void *data_end = (void *)(long)skb->data_end ... the generated code looks like r2 = *(u64 *)(r1 +208) r2 >= 32 r3 = *(u64 *)(r1 +80) r0 = r2 r0 += 8 if r3 > r0 goto pc+1 and this will cause verification failure since r2 data */ this patch added additional checking in is_valid_access() callback function for packet data/data_end/data_meta access. If those accesses are with sign-extenstion, the verification will fail. [1] https//lore.kernel.org/bpf/000000000000c90eee061d236d37@google.com/"
  },
  "timestamp": "2025-07-12T04:59:36.176912",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "120",
      "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
      "score": 411.76190066249995
    },
    {
      "doc_id": "26",
      "name": "Path Traversal: '/dir/../filename'",
      "score": 344.0671116512497
    },
    {
      "doc_id": "321",
      "name": "Use of Hard-coded Cryptographic Key",
      "score": 333.86830196148514
    },
    {
      "doc_id": "328",
      "name": "Use of Weak Hash",
      "score": 266.3942243519039
    },
    {
      "doc_id": "836",
      "name": "Use of Password Hash Instead of Password for Authentication",
      "score": 262.59940419126553
    }
  ]
}