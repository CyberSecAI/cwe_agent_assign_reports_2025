{
  "cve_id": "CVE-2024-47183",
  "description": "Parse Server is an open source backend that can be deployed to any infrastructure that can run Node.js. If the Parse Server option **allowCustomObjectId true is set**, an attacker that is allowed to create a new user can set a custom object ID for that new user that exploits the vulnerability and acquires privileges of a specific role. This vulnerability is fixed in 6.5.9 and 7.3.0.",
  "key_phrases": {
    "rootcause": "allowCustomObjectId true is set",
    "weakness": "",
    "impact": "exploits the vulnerability and acquires privileges of a specific role",
    "vector": "",
    "attacker": "attacker that is allowed to create a new user",
    "product": "Parse Server",
    "version": "before 6.5.9 and 7.3.0",
    "component": ""
  },
  "reference_content": "```\n{\n  \"guidelines\": \"1. First verify if the content relates to the CVE specified based on the official description\\n2. If the content does not relate to this CVE, respond with \\\"UNRELATED\\\"\\n3. If no useful vulnerability information is found, respond with \\\"NOINFO\\\" \\n4. For relevant content, extract:\\n   - Root cause of vulnerability\\n   - Weaknesses/vulnerabilities present\\n   - Impact of exploitation\\n   - Attack vectors\\n   - Required attacker capabilities/position\\n\\nAdditional instructions:\\n- Preserve original technical details and descriptions\\n- Remove unrelated content\\n- Translate non-English content to English\\n- Note if the content provides more detail than the official CVE description\",\n  \"response\": {\n    \"root_cause\": \"The vulnerability stems from the ability to create a user with a custom object ID that starts with `role:`, which can then be used to gain role privileges.\",\n    \"weaknesses\": [\n      \"Improper input validation of user object IDs.\",\n      \"Lack of checks for specific prefixes in object IDs during user creation and session validation.\"\n    ],\n    \"impact\": \"An attacker can acquire the privileges of a specific role by creating a user with a crafted object ID. This can lead to unauthorized access, data modification, or other malicious activities depending on the role's permissions.\",\n    \"attack_vectors\": \"The primary attack vector is through the user creation endpoint. An attacker can send a crafted request to create a new user with a specially formed objectId.\",\n    \"required_attacker_capabilities\": \"The attacker needs to be able to create new users and the server must have the `allowCustomObjectId` option enabled.\"\n  }\n}\n```",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-863 | Incorrect Authorization | 0.9 | Class | Allowed-with-Review | Primary CWE: The vulnerability stems from the ability to create a user with a custom object ID that starts with `role:`, which can then be used to gain role privileges. |\n| CWE-266 | Incorrect Privilege Assignment | 0.7 | Base | Allowed | Secondary Candidate: The attacker acquires privileges of a specific role. |\n| CWE-306 | Missing Authentication for Critical Function | 0.6 | Base | Allowed | Secondary Candidate: An attacker that is allowed to create a new user can set a custom object ID for that new user. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-863, Incorrect Authorization, because the vulnerability allows an attacker to acquire privileges of a specific role due to a flaw in authorization logic. CWE-266, Incorrect Privilege Assignment, is related because the attacker is effectively being assigned incorrect privileges. CWE-306, Missing Authentication for Critical Function, is also relevant because the attacker is able to create a new user and set a custom object ID, suggesting a potential lack of proper authentication or authorization checks during user creation.\n\n```mermaid\ngraph TD\n    cwe863[\"CWE-863: Incorrect Authorization\"]\n    cwe266[\"CWE-266: Incorrect Privilege Assignment\"]\n    cwe306[\"CWE-306: Missing Authentication for Critical Function\"]\n\n    cwe266 -->|CANPRECEDE| cwe863\n    cwe306 -->|CANPRECEDE| cwe863\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe863 primary\n    class cwe266,cwe306 secondary\n```\n\n## Vulnerability Chain\n1.  **Root Cause:** **allowCustomObjectId true is set** and **Improper input validation of user object IDs.** (from CVE Reference Links Content Summary) allows creation of users with custom object IDs.\n2.  **Weakness:** Lack of checks for specific prefixes in object IDs during user creation and session validation.\n3.  **Impact:** An attacker can acquire the privileges of a specific role by creating a user with a crafted object ID.\n\n## Summary of Analysis\nThe primary weakness is **Incorrect Authorization (CWE-863)**, as the attacker gains unauthorized privileges due to the ability to manipulate object IDs. The evidence from the CVE description and the CVE Reference Links Content Summary supports this classification. The **root cause** is the **allowCustomObjectId true is set** option and the **lack of input validation**.\n\nCWE-863 is at the Class level, and while it is preferred to have a Base or Variant level, there is no better match. CWE-266 and CWE-306 are supporting weaknesses.\n\nThe relationships between CWEs highlight the importance of considering multiple weaknesses in a vulnerability. The graph illustrates how **missing authentication** and **incorrect privilege assignment** can lead to **incorrect authorization**.\n\nThe selection of CWE-863 is based on the fact that the authorization check is performed, but it is not correctly performed because it does not properly validate the object ID.\n\nRelevant CWE Information:\n*   CWE-863: Incorrect Authorization\n*   CWE-266: Incorrect Privilege Assignment\n*   CWE-306: Missing Authentication for Critical Function",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-863 | Incorrect Authorization | 0.9 | Class | Allowed-with-Review | Primary CWE: The vulnerability stems from the ability to create a user with a custom object ID that starts with `role:`, which can then be used to gain role privileges. |\n| CWE-266 | Incorrect Privilege Assignment | 0.7 | Base | Allowed | Secondary Candidate: The attacker acquires privileges of a specific role. |\n| CWE-306 | Missing Authentication for Critical Function | 0.6 | Base | Allowed | Secondary Candidate: An attacker that is allowed to create a new user can set a custom object ID for that new user. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-863, Incorrect Authorization, because the vulnerability allows an attacker to acquire privileges of a specific role due to a flaw in authorization logic. CWE-266, Incorrect Privilege Assignment, is related because the attacker is effectively being assigned incorrect privileges. CWE-306, Missing Authentication for Critical Function, is also relevant because the attacker is able to create a new user and set a custom object ID, suggesting a potential lack of proper authentication or authorization checks during user creation.\n\n```mermaid\ngraph TD\n    cwe863[\"CWE-863: Incorrect Authorization\"]\n    cwe266[\"CWE-266: Incorrect Privilege Assignment\"]\n    cwe306[\"CWE-306: Missing Authentication for Critical Function\"]\n\n    cwe266 -->|CANPRECEDE| cwe863\n    cwe306 -->|CANPRECEDE| cwe863\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe863 primary\n    class cwe266,cwe306 secondary\n```\n\n## Vulnerability Chain\n1.  **Root Cause:** **allowCustomObjectId true is set** and **Improper input validation of user object IDs.** (from CVE Reference Links Content Summary) allows creation of users with custom object IDs.\n2.  **Weakness:** Lack of checks for specific prefixes in object IDs during user creation and session validation.\n3.  **Impact:** An attacker can acquire the privileges of a specific role by creating a user with a crafted object ID.\n\n## Summary of Analysis\nThe primary weakness is **Incorrect Authorization (CWE-863)**, as the attacker gains unauthorized privileges due to the ability to manipulate object IDs. The evidence from the CVE description and the CVE Reference Links Content Summary supports this classification. The **root cause** is the **allowCustomObjectId true is set** option and the **lack of input validation**.\n\nCWE-863 is at the Class level, and while it is preferred to have a Base or Variant level, there is no better match. CWE-266 and CWE-306 are supporting weaknesses.\n\nThe relationships between CWEs highlight the importance of considering multiple weaknesses in a vulnerability. The graph illustrates how **missing authentication** and **incorrect privilege assignment** can lead to **incorrect authorization**.\n\nThe selection of CWE-863 is based on the fact that the authorization check is performed, but it is not correctly performed because it does not properly validate the object ID.\n\nRelevant CWE Information:\n*   CWE-863: Incorrect Authorization\n*   CWE-266: Incorrect Privilege Assignment\n*   CWE-306: Missing Authentication for Critical Function\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-863:**\n- 863 (Incorrect Authorization) - ROOT\n\n\n**Chain starting from CWE-306:**\n- 306 (Missing Authentication for Critical Function) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "source": "sparse"
      },
      "similarity": 489.38091703359146
    },
    {
      "metadata": {
        "doc_id": "212",
        "name": "Improper Removal of Sensitive Information Before Storage or Transfer",
        "source": "sparse"
      },
      "similarity": 475.14184963254763
    },
    {
      "metadata": {
        "doc_id": "248",
        "name": "Uncaught Exception",
        "source": "sparse"
      },
      "similarity": 464.91137439068325
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 463.8886050385769
    },
    {
      "metadata": {
        "doc_id": "1321",
        "name": "Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')",
        "source": "sparse"
      },
      "similarity": 460.8195407221639
    },
    {
      "metadata": {
        "doc_id": "1333",
        "name": "Inefficient Regular Expression Complexity",
        "source": "sparse"
      },
      "similarity": 457.1723770211379
    },
    {
      "metadata": {
        "doc_id": "295",
        "name": "Improper Certificate Validation",
        "source": "sparse"
      },
      "similarity": 454.37576062906487
    },
    {
      "metadata": {
        "doc_id": "93",
        "name": "Improper Neutralization of CRLF Sequences ('CRLF Injection')",
        "source": "sparse"
      },
      "similarity": 441.65733867321603
    },
    {
      "metadata": {
        "doc_id": "918",
        "name": "Server-Side Request Forgery (SSRF)",
        "type": "Base",
        "original_content": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
        "keyphrase_source": "rootcause:allowCustomObjectId true is set",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.36762442249023775,
            "graph": 1.438301625117986
          }
        }
      },
      "similarity": 0.36762442249023775
    },
    {
      "doc_id": "226",
      "text": "CWE-226: Sensitive Information in Resource Not Removed Before Reuse",
      "score": 2.8651999999999997,
      "metadata": {
        "doc_id": "226",
        "name": "Sensitive Information in Resource Not Removed Before Reuse",
        "type": "base",
        "original_content": "CWE-226: Sensitive Information in Resource Not Removed Before Reuse",
        "relationships": [
          {
            "source_id": "226",
            "target_id": "244",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "226",
            "target_id": "1342",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "226",
            "target_id": "1301",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "226",
            "target_id": "1272",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "226",
            "target_id": "1239",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "226",
            "target_id": "201",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "226",
            "target_id": "212",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "226",
            "target_id": "459",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "459",
            "target_id": "226",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "244",
            "target_id": "226",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "212",
            "target_id": "226",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "201",
            "target_id": "226",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1342",
            "target_id": "226",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1194"
            }
          },
          {
            "source_id": "1342",
            "target_id": "226",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1301",
            "target_id": "226",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1272",
            "target_id": "226",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1239",
            "target_id": "226",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1194"
            }
          },
          {
            "source_id": "1239",
            "target_id": "226",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "abstraction_path": 0.7200000000000001,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "201",
                  "226",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "201"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "212",
                  "226",
                  "PARENTOF"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "abstraction_path_down",
              "source": "212"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "201",
                  "226",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "201"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "226",
                  "201",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "201"
            }
          }
        },
        "abstraction_level": "base",
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.8651999999999997
          }
        }
      },
      "similarity": 2.8651999999999997
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-863",
      "CWE-306",
      "CWE-266"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}