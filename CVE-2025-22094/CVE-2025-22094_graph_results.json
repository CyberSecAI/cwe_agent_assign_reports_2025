{
  "query": "In the Linux kernel, the following vulnerability has been resolved powerpc/perf Fix ref-counting on the PMU vpa_pmu Commit 176cda0619b6 (powerpc/perf Add perf interface to expose vpa counters) introduced vpa_pmu to expose Book3s-HV nested APIv2 provided L1L2 context switch latency counters to L1 user-space via perf-events. However the newly introduced PMU named vpa_pmu doesnt assign ownership of the PMU to the module vpa_pmu. Consequently the module vpa_pmu can be unloaded while one of the perf-events are still active, which can lead to kernel oops and panic of the form below on a Pseries-LPAR BUG Kernel NULL pointer dereference on read at 0x00000058 NIP [c000000000506cb8] event_sched_out+0x40/0x258 LR [c00000000050e8a4] __perf_remove_from_context+0x7c/0x2b0 Call Trace [c00000025fc3fc30] [c00000025f8457a8] 0xc00000025f8457a8 (unreliable) [c00000025fc3fc80] [fffffffffffffee0] 0xfffffffffffffee0 [c00000025fc3fcd0] [c000000000501e70] event_function+0xa8/0x120 Kernel panic - not syncing Aiee, killing interrupt handler! Fix this by adding the module ownership to vpa_pmu so that the module vpa_pmu is ref-counted and prevented from being unloaded when perf-events are initialized.",
  "count": 20,
  "results": [
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "abstraction": "Base",
      "score": 2.79484003700551,
      "original_score": 2.79484003700551,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "781",
      "name": "Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code",
      "abstraction": "variant",
      "score": 2.6784000000000003,
      "original_score": 2.6784000000000003,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "364",
      "name": "Signal Handler Race Condition",
      "abstraction": "base",
      "score": 2.3400000000000003,
      "original_score": 2.3400000000000003,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "393",
      "name": "Return of Wrong Status Code",
      "abstraction": "base",
      "score": 2.3295999999999997,
      "original_score": 2.3295999999999997,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "129",
      "name": "Improper Validation of Array Index",
      "abstraction": "variant",
      "score": 2.2704,
      "original_score": 2.2704,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "125",
      "name": "Out-of-bounds Read",
      "abstraction": "base",
      "score": 2.2100000000000004,
      "original_score": 2.2100000000000004,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "252",
      "name": "Unchecked Return Value",
      "abstraction": "base",
      "score": 2.2100000000000004,
      "original_score": 2.2100000000000004,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1325",
      "name": "Improperly Controlled Sequential Memory Allocation",
      "abstraction": "base",
      "score": 2.2100000000000004,
      "original_score": 2.2100000000000004,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "772",
      "name": "Missing Release of Resource after Effective Lifetime",
      "abstraction": "base",
      "score": 2.2100000000000004,
      "original_score": 2.2100000000000004,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1260",
      "name": "Improper Handling of Overlap Between Protected Memory Ranges",
      "abstraction": "Base",
      "score": 2.0547919598329814,
      "original_score": 2.0547919598329814,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "789",
      "name": "Memory Allocation with Excessive Size Value",
      "abstraction": "variant",
      "score": 2.04,
      "original_score": 2.04,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "911",
      "name": "Improper Update of Reference Count",
      "abstraction": "Base",
      "score": 1.8997100920749923,
      "original_score": 1.8997100920749923,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "456",
      "name": "Missing Initialization of a Variable",
      "abstraction": "variant",
      "score": 1.83936,
      "original_score": 1.83936,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "123",
      "name": "Write-what-where Condition",
      "abstraction": "base",
      "score": 1.7680000000000005,
      "original_score": 1.7680000000000005,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "120",
      "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
      "abstraction": "base",
      "score": 1.7680000000000005,
      "original_score": 1.7680000000000005,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "abstraction": "base",
      "score": 1.7680000000000005,
      "original_score": 1.7680000000000005,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "abstraction": "Class",
      "score": 1.7420479782581855,
      "original_score": 1.7420479782581855,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "825",
      "name": "Expired Pointer Dereference",
      "abstraction": "base",
      "score": 1.6848000000000003,
      "original_score": 1.6848000000000003,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1257",
      "name": "Improper Access Control Applied to Mirrored or Aliased Memory Regions",
      "abstraction": "base",
      "score": 1.6848000000000003,
      "original_score": 1.6848000000000003,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "128",
      "name": "Wrap-around Error",
      "abstraction": "base",
      "score": 1.6848000000000003,
      "original_score": 1.6848000000000003,
      "mapping_usage": "Allowed"
    }
  ],
  "statistics": {
    "min": 1.6848000000000003,
    "max": 2.79484003700551,
    "mean": 2.0593775033585837,
    "median": 2.047395979916491,
    "count": 20
  }
}