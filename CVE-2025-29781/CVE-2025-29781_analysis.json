{
  "cve_id": "CVE-2025-29781",
  "description": "The Bare Metal Operator (BMO) implements a Kubernetes API for managing bare metal hosts in Metal3. Baremetal Operator enables users to load Secret from arbitrary namespaces upon deployment of the namespace scoped Custom Resource `BMCEventSubscription`. Prior to versions 0.8.1 and 0.9.1, an adversary Kubernetes account with only namespace level roles (e.g. a tenant controlling a namespace) may create a `BMCEventSubscription` in his authorized namespace and then load Secrets from his unauthorized namespaces to his authorized namespace via the Baremetal Operator, causing Secret Leakage. The patch makes BMO refuse to read Secrets from other namespace than where the corresponding BMH resource is. The patch does not change the `BMCEventSubscription` API in BMO, but stricter validation will fail the request at admission time. It will also prevent the controller reading such Secrets, in case the BMCES CR has already been deployed. The issue exists for all versions of BMO, and is patched in BMO releases v0.9.1 and v0.8.1. Prior upgrading to patched BMO version, duplicate any existing Secret pointed to by `BMCEventSubscription`s `httpHeadersRef` to the same namespace where the corresponding BMH exists. After upgrade, remove the old Secrets. As a workaround, the operator can configure BMO RBAC to be namespace scoped, instead of cluster scoped, to prevent BMO from accessing Secrets from other namespaces, and/or use `WATCH_NAMESPACE` configuration option to limit BMO to single namespace.",
  "key_phrases": {
    "rootcause": "improper access control",
    "weakness": "",
    "impact": "Secret Leakage",
    "vector": "create a BMCEventSubscription",
    "attacker": "adversary Kubernetes account",
    "product": "Baremetal Operator",
    "version": "prior to versions 0.8.1 and 0.9.1",
    "component": "Kubernetes API for managing bare metal hosts"
  },
  "reference_content": "```\nRoot cause of vulnerability:\nThe Bare Metal Operator (BMO) allows users to load Secrets from arbitrary namespaces upon deployment of the `BMCEventSubscription` (BMCES) Custom Resource.\n\nWeaknesses/vulnerabilities present:\n- An adversary with namespace-level Kubernetes permissions can potentially load Secrets from unauthorized namespaces.\n- Improper access control allowing access to secrets outside the intended namespace.\n- CWE-200: Improper Input Validation\n- CWE-653: Improper Authorization\n\nImpact of exploitation:\nSecret leakage - an attacker can access secrets from namespaces they are not authorized to access.\n\nAttack vectors:\n- An attacker with Kubernetes account having only namespace level roles creates a BMCES in their authorized namespace.\n- The attacker then loads Secrets from unauthorized namespaces to their authorized namespace via the BMO controller.\n\nRequired attacker capabilities/position:\n- Kubernetes account with namespace-level roles.\n\nMitigation or fix:\n- The patch restricts BMO to read Secrets only from the same namespace as the Bare Metal Host (BMH) resource.\n- Upgrade to BMO releases v0.9.1 or v0.8.1.\n- Before upgrading, duplicate existing Secrets referenced by `BMCEventSubscription`'s `httpHeadersRef` to the same namespace as the corresponding BMH.\n- Workarounds: Configure BMO RBAC to be namespace-scoped or use the `WATCH_NAMESPACE` configuration option.\n```",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-284 | Improper Access Control | 0.85 | Class | Primary CWE | Allowed-with-Review |\n| CWE-668 | Exposure of Resource to Wrong Sphere | 0.70 | Class | Secondary Candidate | Discouraged |\n| CWE-200 | Exposure of Sensitive Information | 0.60 | Class | Secondary Candidate | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.80\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary CWE is CWE-284, \"Improper Access Control,\" which is a high-level class. While more specific CWEs like CWE-863 (\"Incorrect Authorization\") or CWE-306 (\"Missing Authentication for Critical Function\") were considered, the provided information doesn't offer enough detail to definitively pinpoint whether the issue stems from incorrect authorization logic or a complete lack of authentication. CWE-284 acts as a suitable starting point when the root cause is not immediately clear. CWE-668 (\"Exposure of Resource to Wrong Sphere\") relates to exposing resources to unintended actors, which aligns with the secret leakage aspect of the vulnerability. However, it's a higher-level class and less specific than CWE-284 for access control issues.\n\n```mermaid\ngraph TD\n    cwe284[\"CWE-284: Improper Access Control\"]\n    cwe668[\"CWE-668: Exposure of Resource to Wrong Sphere\"]\n    cwe200[\"CWE-200: Exposure of Sensitive Information\"]\n    \n    cwe668 -->|PEEROF| cwe284\n    cwe200 -->|RELATED| cwe284\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe284 primary\n    class cwe668,cwe200 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **improper access control**, leading to the ability to load Secrets from unauthorized namespaces, and culminating in **Secret Leakage**.\n\nInitial Flaw: **Improper Access Control** in BMO, allowing loading Secrets from arbitrary namespaces. (CWE-284)\n|\nV\nExploitation: An attacker creates a `BMCEventSubscription` to load Secrets from unauthorized namespaces.\n|\nV\nImpact: **Secret Leakage**, where an attacker gains access to sensitive information they should not have. (CWE-200/668)\n\n## Summary of Analysis\nThe initial assessment identified several potential CWEs. The primary concern is **improper access control**, as the vulnerability allows users to load Secrets from namespaces they should not have access to. The chosen CWEs reflect this, with CWE-284 as the primary cause and CWE-668 and CWE-200 representing the resulting exposure of sensitive information. The evidence supports the selection of CWE-284, \"Improper Access Control,\" as the root cause, although the exact mechanism of the access control failure (e.g., missing checks or incorrect logic) is not fully detailed in the provided description. The \"**rootcause: improper access control**\" phrase in the \"Vulnerability Description Key Phrases\" section supports this selection. The mitigations mentioned (restricting BMO to read Secrets only from the same namespace as the BMH resource, configuring BMO RBAC to be namespace-scoped) further reinforce this.\n\nThe selection of CWE-284 is at the Class level, which is less specific than Base or Variant levels. However, given the available information, a more specific CWE cannot be confidently assigned. While CWE-863 (\"Incorrect Authorization\") or CWE-306 (\"Missing Authentication for Critical Function\") might be applicable, there is insufficient information to determine whether the authorization logic is incorrect or whether authentication is completely missing. Therefore, CWE-284 provides a suitable starting point.\n\nThe vulnerability results in **Secret Leakage**. This can be classified as CWE-668 \"Exposure of Resource to Wrong Sphere\" or CWE-200 \"Exposure of Sensitive Information\". The choice of CWE-668 is influenced by the fact that the secret is exposed to the wrong control sphere (the attacker's namespace). CWE-200 is more general but also applies.\nThe retriever identified the following CWEs:\n\n*   CWE-923: Improper Restriction of Communication Channel to Intended Endpoints - Not applicable, as the vulnerability isn't about restricting communication channels.\n*   CWE-863: Incorrect Authorization - Potentially applicable, but insufficient evidence to confirm the authorization logic is incorrect.\n*   CWE-532: Insertion of Sensitive Information into Log File - Not applicable, as the vulnerability isn't about logging sensitive information.\n*   CWE-668: Exposure of Resource to Wrong Sphere - As described above.\n*   CWE-306: Missing Authentication for Critical Function - Potentially applicable, but insufficient evidence to confirm authentication is missing.\n*   CWE-201: Insertion of Sensitive Information Into Sent Data - Not directly applicable but related as the secrets are being leaked/exposed.\n*   CWE-285: Improper Authorization - Potentially applicable, but insufficient evidence to confirm improper authorization.\n*   CWE-347: Improper Verification of Cryptographic Signature - Not applicable, as the vulnerability isn't about cryptographic signatures.\n*   CWE-277: Insecure Inherited Permissions - Not applicable, as the vulnerability isn't about inherited permissions.\n*   CWE-322: Key Exchange without Entity Authentication - Not applicable, as the vulnerability isn't about key exchange.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-284 | Improper Access Control | 0.85 | Class | Primary CWE | Allowed-with-Review |\n| CWE-668 | Exposure of Resource to Wrong Sphere | 0.70 | Class | Secondary Candidate | Discouraged |\n| CWE-200 | Exposure of Sensitive Information | 0.60 | Class | Secondary Candidate | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.80\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary CWE is CWE-284, \"Improper Access Control,\" which is a high-level class. While more specific CWEs like CWE-863 (\"Incorrect Authorization\") or CWE-306 (\"Missing Authentication for Critical Function\") were considered, the provided information doesn't offer enough detail to definitively pinpoint whether the issue stems from incorrect authorization logic or a complete lack of authentication. CWE-284 acts as a suitable starting point when the root cause is not immediately clear. CWE-668 (\"Exposure of Resource to Wrong Sphere\") relates to exposing resources to unintended actors, which aligns with the secret leakage aspect of the vulnerability. However, it's a higher-level class and less specific than CWE-284 for access control issues.\n\n```mermaid\ngraph TD\n    cwe284[\"CWE-284: Improper Access Control\"]\n    cwe668[\"CWE-668: Exposure of Resource to Wrong Sphere\"]\n    cwe200[\"CWE-200: Exposure of Sensitive Information\"]\n    \n    cwe668 -->|PEEROF| cwe284\n    cwe200 -->|RELATED| cwe284\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe284 primary\n    class cwe668,cwe200 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **improper access control**, leading to the ability to load Secrets from unauthorized namespaces, and culminating in **Secret Leakage**.\n\nInitial Flaw: **Improper Access Control** in BMO, allowing loading Secrets from arbitrary namespaces. (CWE-284)\n|\nV\nExploitation: An attacker creates a `BMCEventSubscription` to load Secrets from unauthorized namespaces.\n|\nV\nImpact: **Secret Leakage**, where an attacker gains access to sensitive information they should not have. (CWE-200/668)\n\n## Summary of Analysis\nThe initial assessment identified several potential CWEs. The primary concern is **improper access control**, as the vulnerability allows users to load Secrets from namespaces they should not have access to. The chosen CWEs reflect this, with CWE-284 as the primary cause and CWE-668 and CWE-200 representing the resulting exposure of sensitive information. The evidence supports the selection of CWE-284, \"Improper Access Control,\" as the root cause, although the exact mechanism of the access control failure (e.g., missing checks or incorrect logic) is not fully detailed in the provided description. The \"**rootcause: improper access control**\" phrase in the \"Vulnerability Description Key Phrases\" section supports this selection. The mitigations mentioned (restricting BMO to read Secrets only from the same namespace as the BMH resource, configuring BMO RBAC to be namespace-scoped) further reinforce this.\n\nThe selection of CWE-284 is at the Class level, which is less specific than Base or Variant levels. However, given the available information, a more specific CWE cannot be confidently assigned. While CWE-863 (\"Incorrect Authorization\") or CWE-306 (\"Missing Authentication for Critical Function\") might be applicable, there is insufficient information to determine whether the authorization logic is incorrect or whether authentication is completely missing. Therefore, CWE-284 provides a suitable starting point.\n\nThe vulnerability results in **Secret Leakage**. This can be classified as CWE-668 \"Exposure of Resource to Wrong Sphere\" or CWE-200 \"Exposure of Sensitive Information\". The choice of CWE-668 is influenced by the fact that the secret is exposed to the wrong control sphere (the attacker's namespace). CWE-200 is more general but also applies.\nThe retriever identified the following CWEs:\n\n*   CWE-923: Improper Restriction of Communication Channel to Intended Endpoints - Not applicable, as the vulnerability isn't about restricting communication channels.\n*   CWE-863: Incorrect Authorization - Potentially applicable, but insufficient evidence to confirm the authorization logic is incorrect.\n*   CWE-532: Insertion of Sensitive Information into Log File - Not applicable, as the vulnerability isn't about logging sensitive information.\n*   CWE-668: Exposure of Resource to Wrong Sphere - As described above.\n*   CWE-306: Missing Authentication for Critical Function - Potentially applicable, but insufficient evidence to confirm authentication is missing.\n*   CWE-201: Insertion of Sensitive Information Into Sent Data - Not directly applicable but related as the secrets are being leaked/exposed.\n*   CWE-285: Improper Authorization - Potentially applicable, but insufficient evidence to confirm improper authorization.\n*   CWE-347: Improper Verification of Cryptographic Signature - Not applicable, as the vulnerability isn't about cryptographic signatures.\n*   CWE-277: Insecure Inherited Permissions - Not applicable, as the vulnerability isn't about inherited permissions.\n*   CWE-322: Key Exchange without Entity Authentication - Not applicable, as the vulnerability isn't about key exchange.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-863:**\n- 863 (Incorrect Authorization) - ROOT\n\n\n**Chain starting from CWE-306:**\n- 306 (Missing Authentication for Critical Function) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "923",
        "name": "Improper Restriction of Communication Channel to Intended Endpoints",
        "source": "sparse"
      },
      "similarity": 1158.6947035396618
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 1146.3451542077992
    },
    {
      "metadata": {
        "doc_id": "532",
        "name": "Insertion of Sensitive Information into Log File",
        "source": "sparse"
      },
      "similarity": 1101.5631086995045
    },
    {
      "metadata": {
        "doc_id": "668",
        "name": "Exposure of Resource to Wrong Sphere",
        "source": "sparse"
      },
      "similarity": 1054.658442223299
    },
    {
      "metadata": {
        "doc_id": "306",
        "name": "Missing Authentication for Critical Function",
        "source": "sparse"
      },
      "similarity": 1035.2509994117418
    },
    {
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "source": "sparse"
      },
      "similarity": 1025.349743873351
    },
    {
      "metadata": {
        "doc_id": "285",
        "name": "Improper Authorization",
        "source": "sparse"
      },
      "similarity": 1007.8557963238104
    },
    {
      "metadata": {
        "doc_id": "347",
        "name": "Improper Verification of Cryptographic Signature",
        "source": "sparse"
      },
      "similarity": 987.0243187742492
    },
    {
      "metadata": {
        "doc_id": "277",
        "name": "Insecure Inherited Permissions",
        "type": "Variant",
        "original_content": "A product defines a set of insecure permissions that are inherited by objects that are created by the program.",
        "keyphrase_source": "rootcause:improper access control",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.46121901305070284,
            "graph": 1.3410115047795752
          }
        }
      },
      "similarity": 0.46121901305070284
    },
    {
      "doc_id": "322",
      "text": "CWE-322: Key Exchange without Entity Authentication",
      "score": 2.8651999999999997,
      "metadata": {
        "doc_id": "322",
        "name": "Key Exchange without Entity Authentication",
        "type": "base",
        "original_content": "CWE-322: Key Exchange without Entity Authentication",
        "relationships": [
          {
            "source_id": "322",
            "target_id": "295",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "322",
            "target_id": "923",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "322",
            "target_id": "306",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "923",
            "target_id": "322",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "306",
            "target_id": "322",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "295",
            "target_id": "322",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "abstraction_path": 0.7200000000000001,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "923",
                  "322",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "923"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "306",
                  "322",
                  "PARENTOF"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "abstraction_path_down",
              "source": "306"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "923",
                  "322",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "923"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "322",
                  "923",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "923"
            }
          }
        },
        "abstraction_level": "base",
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.8651999999999997
          }
        }
      },
      "similarity": 2.8651999999999997
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-863",
      "CWE-306",
      "CWE-201",
      "CWE-923",
      "CWE-277",
      "CWE-285",
      "CWE-668",
      "CWE-347",
      "CWE-322",
      "CWE-284",
      "CWE-200",
      "CWE-532"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}