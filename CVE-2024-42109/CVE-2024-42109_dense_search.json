{
  "retriever": "dense",
  "query": "In the Linux kernel, the following vulnerability has been resolved netfilter nf_tables unconditionally flush pending work before notifier syzbot reports KASAN slab-uaf in nft_ctx_update include/net/netfilter/nf_tables.h1831 KASAN slab-uaf in nft_commit_release net/netfilter/nf_tables_api.c9530 KASAN slab-uaf int nf_tables_trans_destroy_work+0x152b/0x1750 net/netfilter/nf_tables_api.c9597 Read of size 2 at addr ffff88802b0051c4 by task kworker/11/45 [..] Workqueue events nf_tables_trans_destroy_work Call Trace nft_ctx_update include/net/netfilter/nf_tables.h1831 [inline] nft_commit_release net/netfilter/nf_tables_api.c9530 [inline] nf_tables_trans_destroy_work+0x152b/0x1750 net/netfilter/nf_tables_api.c9597 Problem is that the notifier does a conditional flush, but its possible that the table-to-be-removed is still referenced by transactions being processed by the worker, so we need to flush unconditionally. We could make the flush_work depend on whether we found a table to delete in nf-next to avoid the flush for most cases. AFAICS this problem is only exposed in nf-next, with commit e169285f8c56 (netfilter nf_tables do not store nft_ctx in transaction objects), with this commit applied there is an unconditional fetch of table->family which is whats triggering the above splat.",
  "keyphrases": {
    "weakness": [
      "KASAN slab-uaf"
    ]
  },
  "timestamp": "2025-07-12 03:39:08",
  "cve_id": "CVE-2024-42109",
  "result_count": 20,
  "results": [
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "type": "Class",
      "score": 0.5253475106726656
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "type": "Base",
      "score": 0.5221426235826236
    },
    {
      "cwe_id": "909",
      "name": "Missing Initialization of Resource",
      "type": "Class",
      "score": 0.5205771372902726
    },
    {
      "cwe_id": "401",
      "name": "Missing Release of Memory after Effective Lifetime",
      "type": "Variant",
      "score": 0.5079614914401008
    },
    {
      "cwe_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "type": "Base",
      "score": 0.4985747779854724
    },
    {
      "cwe_id": "835",
      "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
      "type": "Base",
      "score": 0.49682919179675267
    },
    {
      "cwe_id": "833",
      "name": "Deadlock",
      "type": "Base",
      "score": 0.4926753827588658
    },
    {
      "cwe_id": "191",
      "name": "Integer Underflow (Wrap or Wraparound)",
      "type": "Base",
      "score": 0.4901163109532466
    },
    {
      "cwe_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "type": "Base",
      "score": 0.4894545497441548
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "type": "Class",
      "score": 0.4874752417524408
    },
    {
      "cwe_id": "908",
      "name": "Use of Uninitialized Resource",
      "type": "Base",
      "score": 0.4627334461832522
    },
    {
      "cwe_id": "252",
      "name": "Unchecked Return Value",
      "type": "Base",
      "score": 0.46032640457642615
    },
    {
      "cwe_id": "617",
      "name": "Reachable Assertion",
      "type": "Base",
      "score": 0.460247517165616
    },
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "type": "Base",
      "score": 0.4576301862640931
    },
    {
      "cwe_id": "416",
      "name": "Use After Free",
      "type": "Variant",
      "score": 0.4572861063999464
    },
    {
      "cwe_id": "789",
      "name": "Memory Allocation with Excessive Size Value",
      "type": "Variant",
      "score": 0.4570357947335562
    },
    {
      "cwe_id": "459",
      "name": "Incomplete Cleanup",
      "type": "Base",
      "score": 0.45452751609160547
    },
    {
      "cwe_id": "125",
      "name": "Out-of-bounds Read",
      "type": "Base",
      "score": 0.45385188101435847
    },
    {
      "cwe_id": "400",
      "name": "Uncontrolled Resource Consumption",
      "type": "Class",
      "score": 0.4533812327378892
    },
    {
      "cwe_id": "122",
      "name": "Heap-based Buffer Overflow",
      "type": "Variant",
      "score": 0.45304132136343916
    }
  ]
}