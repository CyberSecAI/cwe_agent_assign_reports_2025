{
  "retriever": "graph",
  "query": "In the Linux kernel, the following vulnerability has been resolved netfilter nf_tables unconditionally flush pending work before notifier syzbot reports KASAN slab-uaf in nft_ctx_update include/net/netfilter/nf_tables.h1831 KASAN slab-uaf in nft_commit_release net/netfilter/nf_tables_api.c9530 KASAN slab-uaf int nf_tables_trans_destroy_work+0x152b/0x1750 net/netfilter/nf_tables_api.c9597 Read of size 2 at addr ffff88802b0051c4 by task kworker/11/45 [..] Workqueue events nf_tables_trans_destroy_work Call Trace nft_ctx_update include/net/netfilter/nf_tables.h1831 [inline] nft_commit_release net/netfilter/nf_tables_api.c9530 [inline] nf_tables_trans_destroy_work+0x152b/0x1750 net/netfilter/nf_tables_api.c9597 Problem is that the notifier does a conditional flush, but its possible that the table-to-be-removed is still referenced by transactions being processed by the worker, so we need to flush unconditionally. We could make the flush_work depend on whether we found a table to delete in nf-next to avoid the flush for most cases. AFAICS this problem is only exposed in nf-next, with commit e169285f8c56 (netfilter nf_tables do not store nft_ctx in transaction objects), with this commit applied there is an unconditional fetch of table->family which is whats triggering the above splat. Consider specifically these CWEs: CWE-1284 CWE-401 CWE-770 CWE-843 CWE-416 CWE-362 CWE-909 CWE-675",
  "keyphrases": {
    "original_query": "In the Linux kernel, the following vulnerability has been resolved netfilter nf_tables unconditionally flush pending work before notifier syzbot reports KASAN slab-uaf in nft_ctx_update include/net/netfilter/nf_tables.h1831 KASAN slab-uaf in nft_commit_release net/netfilter/nf_tables_api.c9530 KASAN slab-uaf int nf_tables_trans_destroy_work+0x152b/0x1750 net/netfilter/nf_tables_api.c9597 Read of size 2 at addr ffff88802b0051c4 by task kworker/11/45 [..] Workqueue events nf_tables_trans_destroy_work Call Trace nft_ctx_update include/net/netfilter/nf_tables.h1831 [inline] nft_commit_release net/netfilter/nf_tables_api.c9530 [inline] nf_tables_trans_destroy_work+0x152b/0x1750 net/netfilter/nf_tables_api.c9597 Problem is that the notifier does a conditional flush, but its possible that the table-to-be-removed is still referenced by transactions being processed by the worker, so we need to flush unconditionally. We could make the flush_work depend on whether we found a table to delete in nf-next to avoid the flush for most cases. AFAICS this problem is only exposed in nf-next, with commit e169285f8c56 (netfilter nf_tables do not store nft_ctx in transaction objects), with this commit applied there is an unconditional fetch of table->family which is whats triggering the above splat.",
    "enhanced_query": "In the Linux kernel, the following vulnerability has been resolved netfilter nf_tables unconditionally flush pending work before notifier syzbot reports KASAN slab-uaf in nft_ctx_update include/net/netfilter/nf_tables.h1831 KASAN slab-uaf in nft_commit_release net/netfilter/nf_tables_api.c9530 KASAN slab-uaf int nf_tables_trans_destroy_work+0x152b/0x1750 net/netfilter/nf_tables_api.c9597 Read of size 2 at addr ffff88802b0051c4 by task kworker/11/45 [..] Workqueue events nf_tables_trans_destroy_work Call Trace nft_ctx_update include/net/netfilter/nf_tables.h1831 [inline] nft_commit_release net/netfilter/nf_tables_api.c9530 [inline] nf_tables_trans_destroy_work+0x152b/0x1750 net/netfilter/nf_tables_api.c9597 Problem is that the notifier does a conditional flush, but its possible that the table-to-be-removed is still referenced by transactions being processed by the worker, so we need to flush unconditionally. We could make the flush_work depend on whether we found a table to delete in nf-next to avoid the flush for most cases. AFAICS this problem is only exposed in nf-next, with commit e169285f8c56 (netfilter nf_tables do not store nft_ctx in transaction objects), with this commit applied there is an unconditional fetch of table->family which is whats triggering the above splat. Consider specifically these CWEs: CWE-1284 CWE-401 CWE-770 CWE-843 CWE-416 CWE-362 CWE-909 CWE-675",
    "cwe_mentions": [
      "CWE-1284",
      "CWE-401",
      "CWE-770",
      "CWE-843",
      "CWE-416",
      "CWE-362",
      "CWE-909",
      "CWE-675"
    ],
    "search_time": 3.3379387855529785
  },
  "timestamp": "2025-07-12 03:39:11",
  "cve_id": "CVE-2024-42109",
  "result_count": 20,
  "results": [
    {
      "cwe_id": "364",
      "name": "Signal Handler Race Condition",
      "type": "base",
      "score": 2.8651999999999997,
      "relationship_count": 0
    },
    {
      "cwe_id": "843",
      "name": "Access of Resource Using Incompatible Type ('Type Confusion')",
      "type": "base",
      "score": 2.821,
      "relationship_count": 0
    },
    {
      "cwe_id": "123",
      "name": "Write-what-where Condition",
      "type": "base",
      "score": 2.7014000000000005,
      "relationship_count": 0
    },
    {
      "cwe_id": "415",
      "name": "Double Free",
      "type": "variant",
      "score": 2.68272,
      "relationship_count": 0
    },
    {
      "cwe_id": "1325",
      "name": "Improperly Controlled Sequential Memory Allocation",
      "type": "base",
      "score": 2.3400000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "120",
      "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
      "type": "base",
      "score": 2.2100000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "390",
      "name": "Detection of Error Condition Without Action",
      "type": "base",
      "score": 2.2100000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "1265",
      "name": "Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls",
      "type": "base",
      "score": 2.2100000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "456",
      "name": "Missing Initialization of a Variable",
      "type": "variant",
      "score": 2.1936,
      "relationship_count": 0
    },
    {
      "cwe_id": "416",
      "name": "Use After Free",
      "type": "Variant",
      "score": 2.143479480142449,
      "relationship_count": 0
    },
    {
      "cwe_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "type": "Base",
      "score": 2.0480460478316753,
      "relationship_count": 0
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "type": "Base",
      "score": 2.017665849980275,
      "relationship_count": 0
    },
    {
      "cwe_id": "789",
      "name": "Memory Allocation with Excessive Size Value",
      "type": "Variant",
      "score": 1.8140075787605552,
      "relationship_count": 0
    },
    {
      "cwe_id": "22",
      "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
      "type": "base",
      "score": 1.7680000000000005,
      "relationship_count": 0
    },
    {
      "cwe_id": "41",
      "name": "Improper Resolution of Path Equivalence",
      "type": "base",
      "score": 1.7680000000000005,
      "relationship_count": 0
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "type": "Class",
      "score": 1.7520226911417047,
      "relationship_count": 0
    },
    {
      "cwe_id": "190",
      "name": "Integer Overflow or Wraparound",
      "type": "base",
      "score": 1.6848000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "170",
      "name": "Improper Null Termination",
      "type": "base",
      "score": 1.6848000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "134",
      "name": "Use of Externally-Controlled Format String",
      "type": "base",
      "score": 1.6848000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "1339",
      "name": "Insufficient Precision or Accuracy of a Real Number",
      "type": "base",
      "score": 1.6848000000000003,
      "relationship_count": 0
    }
  ]
}