{
  "cve_id": "CVE-2024-6409",
  "description": "A **race condition** vulnerability was discovered in how signals are handled by OpenSSHs server (sshd). If a remote attacker does not authenticate within a set time period, then sshds SIGALRM handler is called asynchronously. However, this signal handler calls various functions that are not async-signal-safe, for example, syslog(). As a consequence of a successful attack, in the worst case scenario, an attacker may be able to perform a remote code execution (RCE) as an unprivileged user running the sshd server.",
  "key_phrases": {
    "rootcause": "race condition",
    "weakness": "use of non async-signal-safe functions in signal handler",
    "impact": "remote code execution",
    "vector": "",
    "attacker": "remote attacker",
    "product": "OpenSSH server",
    "version": "",
    "component": ""
  },
  "reference_content": "Based on the provided content, here's an analysis of the CVE-2024-6409 vulnerability:\n\n**Root cause of vulnerability:**\n- A race condition exists in OpenSSH's signal handling mechanism, specifically within the `SIGALRM` handler in the `sshd` server. This handler is invoked when a client fails to authenticate within the configured `LoginGraceTime`.\n- The vulnerability stems from the use of non-async-signal-safe functions (like `syslog()`) within the `SIGALRM` handler. Specifically, the `cleanup_exit()` function, which calls these unsafe functions (e.g., `packet_destroy_all()` which calls `free()`), is called in the signal handler.\n\n**Weaknesses/vulnerabilities present:**\n- Use of non-async-signal-safe functions within a signal handler\n- A race condition in the unprivileged privsep child process of the OpenSSH server due to calling `cleanup_exit()`.\n\n**Impact of exploitation:**\n- **Remote Code Execution (RCE):** An unauthenticated remote attacker may achieve RCE as the unprivileged user running the `sshd` server. This arises from heap corruption due to the use of `free()` in signal context and the presence of a ROP chain in shared libraries to call arbitrary code.\n- **Denial of Service (DoS):** Exploitation can also cause DoS.\n\n**Attack vectors:**\n- The vulnerability is exploitable remotely over a network by sending a crafted SSH connection to a vulnerable server, failing to authenticate and triggering the `SIGALRM` signal via timeout.\n- Triggering the vulnerability requires a connection to the SSH server where the client fails to authenticate.\n\n**Required attacker capabilities/position:**\n- A remote attacker can exploit the vulnerability.\n- The attacker must have network access to the target's SSH port.\n- The attacker has to trigger a timeout by not authenticating in order to invoke the signal handler.\n- No authentication is required.\n\n**Additional Information:**\n- The core issue stems from the incorrect use of the `cleanup_exit` function in a signal handler, particularly in Red Hat Enterprise Linux 9 and derivatives, because of a backported patch that introduces async-signal-unsafe behavior.\n- Upstream OpenSSH is not directly vulnerable since the vulnerable logic introduced by `openssh-7.6p1-audit.patch` is specific to Red Hat, but that vulnerability made it into RHEL. The upstream code does not call these problematic functions, so this issue is specific to patched versions of `openssh`.\n- The issue is present in OpenSSH versions 8.7p1 and 8.8p1.\n- A mitigation is to set `LoginGraceTime 0` which effectively prevents exploitation of the race condition, although that creates another potential avenue for DoS.\n\n- A fix involves removing `cleanup_exit()` from signal handler or changing it to use the async-signal-safe `_exit(1)` instead.\n- The attack vector involves a race condition within the privsep child process, running with reduced privileges, which reduces the immediate impact, although full RCE may still be possible.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-828 | Signal Handler with Functionality that is not Asynchronous-Safe | 0.9 | Variant | Allowed | Primary CWE |\n| CWE-366 | Race Condition within a Thread | 0.7 | Base | Allowed | Secondary Candidate |\n| CWE-479 | Signal Handler Use of a Non-reentrant Function | 0.6 | Variant | Allowed | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-828, which is a Variant of CWE-663 and CWE-479, indicating a more specific case of using unsafe functions in signal handlers. CWE-366 and CWE-362 are related as general race conditions but are less specific than CWE-828 in the context of signal handlers.\n\n```mermaid\ngraph TD\n    cwe828[\"CWE-828: Signal Handler with Functionality that is not Asynchronous-Safe\"]\n    cwe663[\"CWE-663: Use of a Non-reentrant Function in a Concurrent Context\"]\n    cwe479[\"CWE-479: Signal Handler Use of a Non-reentrant Function\"]\n    cwe366[\"CWE-366: Race Condition within a Thread\"]\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n\n    cwe828 -->|CHILDOF| cwe663\n    cwe828 -->|CHILDOF| cwe479\n    cwe366 -->|PEEROF| cwe362\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe828 primary\n    class cwe366,cwe479 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a **race condition** due to the **use of non async-signal-safe functions in the signal handler**. This leads to potential heap corruption and ultimately remote code execution. The root cause is the usage of non-reentrant functions within the signal handler, specifically `syslog()`, which is called by `cleanup_exit()`.\n\n## Summary of Analysis\nThe analysis is based on the vulnerability description and the provided CVE reference. The key evidence is the explicit mention of a **race condition** and the **use of non async-signal-safe functions** in the `SIGALRM` handler of the `sshd` server.\n\nThe choice of CWE-828 is based on its specific focus on signal handlers and asynchronous-safe functions, which aligns perfectly with the vulnerability description. CWE-366 and CWE-479 are considered as secondary candidates due to their relevance to race conditions and non-reentrant functions respectively, but CWE-828 offers a more precise characterization of the vulnerability.\n\nThe evidence directly states: \"A **race condition** vulnerability was discovered in how signals are handled by OpenSSHs server (sshd). However, this signal handler calls various functions that are not async-signal-safe, for example, syslog().\" and \"The vulnerability stems from the use of non-async-signal-safe functions (like `syslog()`) within the `SIGALRM` handler. Specifically, the `cleanup_exit()` function, which calls these unsafe functions (e.g., `packet_destroy_all()` which calls `free()`), is called in the signal handler.\"\n\nThe selected CWEs are at the optimal level of specificity, with CWE-828 being a Variant that precisely captures the essence of the vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-364: Signal Handler Race Condition\n**Abstraction Level**: Base\n**Similarity Score**: 0.80\n**Source**: dense\n\n**Description**:\nThe product uses a signal handler that introduces a race condition.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-366: Race Condition within a Thread\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nIf two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-755: Improper Handling of Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product does not handle or incorrectly handles an exceptional condition.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-208: Observable Timing Discrepancy\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nTwo separate operations in a product require different amounts of time to complete, in a way that is observable to an actor and reveals security-relevant information about the state of the product, such as whether a particular operation was successful or not.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-754: Improper Check for Unusual or Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-703: Improper Check or Handling of Exceptional Conditions\n**Abstraction Level**: Pillar\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is extremely high-level, a Pillar.\n\n\n\n## CWE-617: Reachable Assertion\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-364: Signal Handler Race Condition\n**Abstraction Level**: Base\n**Similarity Score**: 1626.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-828 | Signal Handler with Functionality that is not Asynchronous-Safe | 0.9 | Variant | Allowed | Primary CWE |\n| CWE-366 | Race Condition within a Thread | 0.7 | Base | Allowed | Secondary Candidate |\n| CWE-479 | Signal Handler Use of a Non-reentrant Function | 0.6 | Variant | Allowed | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-828, which is a Variant of CWE-663 and CWE-479, indicating a more specific case of using unsafe functions in signal handlers. CWE-366 and CWE-362 are related as general race conditions but are less specific than CWE-828 in the context of signal handlers.\n\n```mermaid\ngraph TD\n    cwe828[\"CWE-828: Signal Handler with Functionality that is not Asynchronous-Safe\"]\n    cwe663[\"CWE-663: Use of a Non-reentrant Function in a Concurrent Context\"]\n    cwe479[\"CWE-479: Signal Handler Use of a Non-reentrant Function\"]\n    cwe366[\"CWE-366: Race Condition within a Thread\"]\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n\n    cwe828 -->|CHILDOF| cwe663\n    cwe828 -->|CHILDOF| cwe479\n    cwe366 -->|PEEROF| cwe362\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe828 primary\n    class cwe366,cwe479 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a **race condition** due to the **use of non async-signal-safe functions in the signal handler**. This leads to potential heap corruption and ultimately remote code execution. The root cause is the usage of non-reentrant functions within the signal handler, specifically `syslog()`, which is called by `cleanup_exit()`.\n\n## Summary of Analysis\nThe analysis is based on the vulnerability description and the provided CVE reference. The key evidence is the explicit mention of a **race condition** and the **use of non async-signal-safe functions** in the `SIGALRM` handler of the `sshd` server.\n\nThe choice of CWE-828 is based on its specific focus on signal handlers and asynchronous-safe functions, which aligns perfectly with the vulnerability description. CWE-366 and CWE-479 are considered as secondary candidates due to their relevance to race conditions and non-reentrant functions respectively, but CWE-828 offers a more precise characterization of the vulnerability.\n\nThe evidence directly states: \"A **race condition** vulnerability was discovered in how signals are handled by OpenSSHs server (sshd). However, this signal handler calls various functions that are not async-signal-safe, for example, syslog().\" and \"The vulnerability stems from the use of non-async-signal-safe functions (like `syslog()`) within the `SIGALRM` handler. Specifically, the `cleanup_exit()` function, which calls these unsafe functions (e.g., `packet_destroy_all()` which calls `free()`), is called in the signal handler.\"\n\nThe selected CWEs are at the optimal level of specificity, with CWE-828 being a Variant that precisely captures the essence of the vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-364: Signal Handler Race Condition\n**Abstraction Level**: Base\n**Similarity Score**: 0.80\n**Source**: dense\n\n**Description**:\nThe product uses a signal handler that introduces a race condition.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-366: Race Condition within a Thread\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nIf two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-755: Improper Handling of Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product does not handle or incorrectly handles an exceptional condition.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-208: Observable Timing Discrepancy\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nTwo separate operations in a product require different amounts of time to complete, in a way that is observable to an actor and reveals security-relevant information about the state of the product, such as whether a particular operation was successful or not.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-754: Improper Check for Unusual or Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-703: Improper Check or Handling of Exceptional Conditions\n**Abstraction Level**: Pillar\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is extremely high-level, a Pillar.\n\n\n\n## CWE-617: Reachable Assertion\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-364: Signal Handler Race Condition\n**Abstraction Level**: Base\n**Similarity Score**: 1626.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-479:**\n- 479 (Signal Handler Use of a Non-reentrant Function) - ROOT\n\n\n**Chain starting from CWE-667:**\n- 667 (Improper Locking) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Race Condition",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "828",
        "name": "Signal Handler with Functionality that is not Asynchronous-Safe",
        "source": "sparse"
      },
      "similarity": 580.8276479303688
    },
    {
      "metadata": {
        "doc_id": "364",
        "name": "Signal Handler Race Condition",
        "source": "sparse"
      },
      "similarity": 580.6494634931001
    },
    {
      "metadata": {
        "doc_id": "831",
        "name": "Signal Handler Function Associated with Multiple Signals",
        "source": "sparse"
      },
      "similarity": 506.22317365594614
    },
    {
      "metadata": {
        "doc_id": "479",
        "name": "Signal Handler Use of a Non-reentrant Function",
        "source": "sparse"
      },
      "similarity": 476.3445944514063
    },
    {
      "metadata": {
        "doc_id": "367",
        "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
        "source": "sparse"
      },
      "similarity": 460.2344659907352
    },
    {
      "metadata": {
        "doc_id": "663",
        "name": "Use of a Non-reentrant Function in a Concurrent Context",
        "source": "sparse"
      },
      "similarity": 429.9469237738563
    },
    {
      "metadata": {
        "doc_id": "770",
        "name": "Allocation of Resources Without Limits or Throttling",
        "source": "sparse"
      },
      "similarity": 428.5736373435486
    },
    {
      "metadata": {
        "doc_id": "432",
        "name": "Dangerous Signal Handler not Disabled During Sensitive Operations",
        "type": "Base",
        "original_content": "The product uses a signal handler that shares state with other signal handlers, but it does not properly mask or prevent those signal handlers from being invoked while the original signal handler is still running.",
        "keyphrase_source": "weakness:use of non async-signal-safe functions in signal handler",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.49764060777691466,
            "graph": 1.6904433936425511
          }
        }
      },
      "similarity": 0.49764060777691466
    },
    {
      "doc_id": "123",
      "text": "CWE-123: Write-what-where Condition",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "123",
        "name": "Write-what-where Condition",
        "type": "base",
        "original_content": "CWE-123: Write-what-where Condition",
        "relationships": [
          {
            "source_id": "123",
            "target_id": "590",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "479",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "416",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "364",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "134",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "120",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "119",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1340"
            }
          },
          {
            "source_id": "123",
            "target_id": "119",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1305"
            }
          },
          {
            "source_id": "123",
            "target_id": "787",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "787",
            "target_id": "123",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "590",
            "target_id": "123",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "479",
            "target_id": "123",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "416",
            "target_id": "123",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "415",
            "target_id": "123",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "364",
            "target_id": "123",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "134",
            "target_id": "123",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "120",
            "target_id": "123",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "119",
            "target_id": "123",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1305"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "479",
                  "123",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "479"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "364",
                  "123",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_forward",
              "source": "364"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-479",
      "CWE-667",
      "CWE-663",
      "CWE-828",
      "CWE-364",
      "CWE-362",
      "CWE-208",
      "CWE-755",
      "CWE-617",
      "CWE-366",
      "CWE-367",
      "CWE-703",
      "CWE-754"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}