{
  "query": "In the Linux kernel, the following vulnerability has been resolved mm resolve faulty mmap_region() error path behaviour The mmap_region() function is somewhat terrifying, with spaghetti-like control flow and numerous means by which issues can arise and incomplete state, memory leaks and other unpleasantness can occur. A large amount of the complexity arises from trying to handle errors late in the process of mapping a VMA, which forms the basis of recently observed issues with resource leaks and observable inconsistent state. Taking advantage of previous patches in this series we move a number of checks earlier in the code, simplifying things by moving the core of the logic into a static internal function __mmap_region(). Doing this allows us to perform a number of checks up front before we do any real work, and allows us to unwind the writable unmap check unconditionally as required and to perform a CONFIG_DEBUG_VM_MAPLE_TREE validation unconditionally also. We move a number of things here 1. We preallocate memory for the iterator before we call the file-backed memory hook, allowing us to exit early and avoid having to perform complicated and error-prone close/free logic. We carefully free iterator state on both success and error paths. 2. The enclosing mmap_region() function handles the mapping_map_writable() logic early. Previously the logic had the mapping_map_writable() at the point of mapping a newly allocated file-backed VMA, and a matching mapping_unmap_writable() on success and error paths. We now do this unconditionally if this is a file-backed, shared writable mapping. If a driver changes the flags to eliminate VM_MAYWRITE, however doing so does not invalidate the seal check we just performed, and we in any case always decrement the counter in the wrapper. We perform a debug assert to ensure a driver does not attempt to do the opposite. 3. We also move arch_validate_flags() up into the mmap_region() function. This is only relevant on arm64 and sparc64, and the check is only meaningful for SPARC with ADI enabled. We explicitly add a warning for this arch if a driver invalidates this check, though the code ought eventually to be fixed to eliminate the need for this. With all of these measures in place, we no longer need to explicitly close the VMA on error paths, as we place all checks which might fail prior to a call to any driver mmap hook. This eliminates an entire class of errors, makes the code easier to reason about and more robust.",
  "count": 20,
  "results": [
    {
      "cwe_id": "1316",
      "name": "Fabric-Address Map Allows Programming of Unwarranted Overlaps of Protected and Unprotected Ranges",
      "abstraction": "Base",
      "score": 0.5567198747473736,
      "original_score": 0.5567198747473736,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1260",
      "name": "Improper Handling of Overlap Between Protected Memory Ranges",
      "abstraction": "Base",
      "score": 0.5556684014335201,
      "original_score": 0.5556684014335201,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "909",
      "name": "Missing Initialization of Resource",
      "abstraction": "Class",
      "score": 0.5394186322873585,
      "original_score": 0.5394186322873585,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "1274",
      "name": "Improper Access Control for Volatile Memory Containing Boot Code",
      "abstraction": "Base",
      "score": 0.5179811549603848,
      "original_score": 0.5179811549603848,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1257",
      "name": "Improper Access Control Applied to Mirrored or Aliased Memory Regions",
      "abstraction": "Base",
      "score": 0.5136590616826107,
      "original_score": 0.5136590616826107,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "abstraction": "Class",
      "score": 0.5126678357527652,
      "original_score": 0.5126678357527652,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "1342",
      "name": "Information Exposure through Microarchitectural State after Transient Execution",
      "abstraction": "Base",
      "score": 0.5031964293005295,
      "original_score": 0.5031964293005295,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1262",
      "name": "Improper Access Control for Register Interface",
      "abstraction": "Base",
      "score": 0.5022795360195443,
      "original_score": 0.5022795360195443,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "823",
      "name": "Use of Out-of-range Pointer Offset",
      "abstraction": "Base",
      "score": 0.5008390609287864,
      "original_score": 0.5008390609287864,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1222",
      "name": "Insufficient Granularity of Address Regions Protected by Register Locks",
      "abstraction": "Variant",
      "score": 0.49596133292150657,
      "original_score": 0.49596133292150657,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "591",
      "name": "Sensitive Data Storage in Improperly Locked Memory",
      "abstraction": "Variant",
      "score": 0.48741998896229544,
      "original_score": 0.48741998896229544,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "abstraction": "Class",
      "score": 0.47957272782564414,
      "original_score": 0.47957272782564414,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "126",
      "name": "Buffer Over-read",
      "abstraction": "Variant",
      "score": 0.47886835195271193,
      "original_score": 0.47886835195271193,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "908",
      "name": "Use of Uninitialized Resource",
      "abstraction": "Base",
      "score": 0.4784424133138734,
      "original_score": 0.4784424133138734,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "787",
      "name": "Out-of-bounds Write",
      "abstraction": "Base",
      "score": 0.47818227444167394,
      "original_score": 0.47818227444167394,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1285",
      "name": "Improper Validation of Specified Index, Position, or Offset in Input",
      "abstraction": "Base",
      "score": 0.4770734989943213,
      "original_score": 0.4770734989943213,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1246",
      "name": "Improper Write Handling in Limited-write Non-Volatile Memories",
      "abstraction": "Base",
      "score": 0.47584131973575766,
      "original_score": 0.47584131973575766,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "763",
      "name": "Release of Invalid Pointer or Reference",
      "abstraction": "Base",
      "score": 0.47212210896489615,
      "original_score": 0.47212210896489615,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "782",
      "name": "Exposed IOCTL with Insufficient Access Control",
      "abstraction": "Variant",
      "score": 0.47157185163604,
      "original_score": 0.47157185163604,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "190",
      "name": "Integer Overflow or Wraparound",
      "abstraction": "Base",
      "score": 0.47121774392028515,
      "original_score": 0.47121774392028515,
      "mapping_usage": "Allowed"
    }
  ],
  "statistics": {
    "min": 0.47121774392028515,
    "max": 0.5567198747473736,
    "mean": 0.4984351799890939,
    "median": 0.491690660941901,
    "count": 20
  }
}