{
  "cve_id": "CVE-2024-42091",
  "description": "In the Linux kernel, the following vulnerability has been resolved drm/xe Check pat.ops before dumping PAT settings We may leave pat.ops unset when running on brand new platform or when running as a VF. While the former is unlikely, the latter is valid (future) use case and will cause NPD when someone will try to dump PAT settings by debugfs. Its better to check pointer to pat.ops instead of specific .dump hook, as we have this hook always defined for every .ops variant.",
  "key_phrases": {
    "rootcause": "improper pointer checking",
    "weakness": "",
    "impact": "null pointer dereference",
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": "drm/xe Check pat.ops before dumping PAT settings"
  },
  "reference_content": "The provided content relates to a fix for a potential NULL pointer dereference in the Linux kernel's `xe_pat.c` driver file, specifically within the `xe_pat_dump` function. This aligns with the description of CVE-2024-42091.\n\nHere's a breakdown:\n\n**Root cause of vulnerability:**\n- The `xe_pat_dump` function in `drivers/gpu/drm/xe/xe_pat.c` attempts to access the `dump` function pointer within the `xe->pat.ops` structure without first verifying if `xe->pat.ops` itself is a valid pointer (i.e. not NULL). In situations where `pat.ops` remains unset, such as on new platforms or when running as a virtual function (VF), this can result in a NULL pointer dereference.\n\n**Weaknesses/vulnerabilities present:**\n- **NULL pointer dereference:** The primary issue is the potential for dereferencing a NULL pointer `xe->pat.ops`. This happens if `xe->pat.ops` isn't properly initialized.\n- **Lack of proper NULL check:** The original code only checked for the existence of the `dump` function within ops but not the `ops` itself.\n\n**Impact of exploitation:**\n- **Kernel crash (NPD):** A NULL pointer dereference in kernel space leads to a kernel panic, causing a denial-of-service condition. This makes the system unusable.\n\n**Attack vectors:**\n- **Debugfs interaction:** The vulnerability is triggered when a user or a program tries to dump PAT settings using debugfs interface, which leads to a call to `xe_pat_dump`.\n\n**Required attacker capabilities/position:**\n- **Ability to trigger debugfs functionality:** An attacker would need the ability to interact with debugfs and request the dumping of PAT settings for the xe driver to trigger the vulnerable code path. This typically requires at least some level of system access, however, it might be possible to trigger by other means via system calls.\n\n**Additional notes:**\n\nThe provided patches address the issue by adding a check for `xe->pat.ops` before attempting to dereference it. This ensures that the dump function is only called if the operations structure is valid. The fix replaces the check `if (!xe->pat.ops->dump)` with `if (!xe->pat.ops) return;` as the former would dereference the potentially NULL `xe->pat.ops`.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-476 | NULL Pointer Dereference | 1.0 | Base | Allowed | Primary CWE |\n| CWE-824 | Access of Uninitialized Pointer | 0.7 | Base | Allowed | Secondary Candidate |\n| CWE-252 | Unchecked Return Value | 0.6 | Base | Allowed | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship that impacted my decision was the parent-child relationship between CWE-754 (Improper Check for Unusual or Exceptional Conditions) and CWE-476 (NULL Pointer Dereference). CWE-476 is a child of CWE-754. The vulnerability description highlights a **missing check** for a NULL pointer, directly leading to a potential dereference. This direct relationship strengthens the choice of CWE-476 as the primary weakness.\n\nThe Retriever Results suggest that CWE-824 (Access of Uninitialized Pointer) and CWE-252 (Unchecked Return Value) are also relevant. While plausible, the evidence more strongly supports a direct NULL pointer dereference due to the **improper pointer checking**, making CWE-476 the most fitting primary classification.\n\n```mermaid\ngraph TD\n    cwe476[\"CWE-476: NULL Pointer Dereference\"]\n    cwe754[\"CWE-754: Improper Check for Unusual or Exceptional Conditions\"]\n    cwe824[\"CWE-824: Access of Uninitialized Pointer\"]\n    cwe252[\"CWE-252: Unchecked Return Value\"]\n    \n    cwe476 -->|CHILDOF| cwe754\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe476 primary\n    class cwe754,cwe824,cwe252 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain is relatively straightforward:\n1.  **Root Cause:** **Improper pointer checking** (Implicit in CWE-476 because the check should have happened)\n2.  **Weakness:** NULL Pointer Dereference (CWE-476)\n3.  **Impact:** Kernel crash (Denial of Service)\n\n## Summary of Analysis\nMy assessment is heavily based on the clear evidence provided in the vulnerability description and CVE reference summary. The description states: \"Its better to check pointer to pat.ops instead of specific .dump hook, as we have this hook always defined for every .ops variant.\" This directly indicates a **failure to properly check** if `pat.ops` is NULL before dereferencing it.\n\nThe CVE reference summary reinforces this by stating: \"The `xe_pat_dump` function in `drivers/gpu/drm/xe/xe_pat.c` attempts to access the `dump` function pointer within the `xe->pat.ops` structure without first verifying if `xe->pat.ops` itself is a valid pointer (i.e. not NULL).\" This confirms the **improper pointer checking** leading to a potential NULL pointer dereference.\n\nThe graph relationships influenced my decision to choose CWE-476 as the primary weakness. While other CWEs like CWE-824 (Access of Uninitialized Pointer) and CWE-252 (Unchecked Return Value) were considered, the direct evidence of a NULL pointer dereference due to a **missing check** makes CWE-476 the most accurate and specific classification.\n\nCWE-476 is at the optimal level of specificity (Base) because it precisely captures the vulnerability: a NULL pointer is dereferenced due to a **lack of proper validation**.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*Not Selected:* This CWE is not relevant because the vulnerability is not related to locking mechanisms.\n\n## CWE-824: Access of Uninitialized Pointer\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product accesses or uses a pointer that has not been initialized.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Potentially Relevant:* This could be a secondary issue if the pointer is uninitialized and then dereferenced, but the primary issue is the **lack of checking for NULL** before dereferencing, so this is a weaker match.\n\n## CWE-476: NULL Pointer Dereference\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product dereferences a pointer that it expects to be valid but is NULL.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Selected as Primary:* This perfectly matches the vulnerability description, where the code attempts to dereference a pointer (`xe->pat.ops`) without ensuring it's not NULL.\n\n## CWE-1285: Improper Validation of Specified Index, Position, or Offset in Input\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Not Selected:* This is not relevant because the vulnerability does not involve validating an index, position, or offset in input.\n\n## CWE-755: Improper Handling of Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product does not handle or incorrectly handles an exceptional condition.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n*Not Selected:* Too generic. CWE-476 is a more specific child of this CWE.\n\n## CWE-252: Unchecked Return Value\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Potentially Relevant:* While the code doesn't explicitly skip checking a return value, the **missing NULL check** serves a similar purpose - failing to validate the state of a pointer. This is a weaker match than CWE-476.\n\n## CWE-754: Improper Check for Unusual or Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*Not Selected:* Too generic. CWE-476 is a more specific child of this CWE.\n\n## CWE-822: Untrusted Pointer Dereference\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product obtains a value from an untrusted source, converts this value to a pointer, and dereferences the resulting pointer.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Not Selected:* Not directly relevant. The pointer isn't necessarily obtained from an untrusted source; it's simply not checked for NULL.\n\n## CWE-703: Improper Check or Handling of Exceptional Conditions\n**Abstraction Level**: Pillar\n**Similarity Score**: 0.73\n**Source**: dense",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-476 | NULL Pointer Dereference | 1.0 | Base | Allowed | Primary CWE |\n| CWE-824 | Access of Uninitialized Pointer | 0.7 | Base | Allowed | Secondary Candidate |\n| CWE-252 | Unchecked Return Value | 0.6 | Base | Allowed | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship that impacted my decision was the parent-child relationship between CWE-754 (Improper Check for Unusual or Exceptional Conditions) and CWE-476 (NULL Pointer Dereference). CWE-476 is a child of CWE-754. The vulnerability description highlights a **missing check** for a NULL pointer, directly leading to a potential dereference. This direct relationship strengthens the choice of CWE-476 as the primary weakness.\n\nThe Retriever Results suggest that CWE-824 (Access of Uninitialized Pointer) and CWE-252 (Unchecked Return Value) are also relevant. While plausible, the evidence more strongly supports a direct NULL pointer dereference due to the **improper pointer checking**, making CWE-476 the most fitting primary classification.\n\n```mermaid\ngraph TD\n    cwe476[\"CWE-476: NULL Pointer Dereference\"]\n    cwe754[\"CWE-754: Improper Check for Unusual or Exceptional Conditions\"]\n    cwe824[\"CWE-824: Access of Uninitialized Pointer\"]\n    cwe252[\"CWE-252: Unchecked Return Value\"]\n    \n    cwe476 -->|CHILDOF| cwe754\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe476 primary\n    class cwe754,cwe824,cwe252 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain is relatively straightforward:\n1.  **Root Cause:** **Improper pointer checking** (Implicit in CWE-476 because the check should have happened)\n2.  **Weakness:** NULL Pointer Dereference (CWE-476)\n3.  **Impact:** Kernel crash (Denial of Service)\n\n## Summary of Analysis\nMy assessment is heavily based on the clear evidence provided in the vulnerability description and CVE reference summary. The description states: \"Its better to check pointer to pat.ops instead of specific .dump hook, as we have this hook always defined for every .ops variant.\" This directly indicates a **failure to properly check** if `pat.ops` is NULL before dereferencing it.\n\nThe CVE reference summary reinforces this by stating: \"The `xe_pat_dump` function in `drivers/gpu/drm/xe/xe_pat.c` attempts to access the `dump` function pointer within the `xe->pat.ops` structure without first verifying if `xe->pat.ops` itself is a valid pointer (i.e. not NULL).\" This confirms the **improper pointer checking** leading to a potential NULL pointer dereference.\n\nThe graph relationships influenced my decision to choose CWE-476 as the primary weakness. While other CWEs like CWE-824 (Access of Uninitialized Pointer) and CWE-252 (Unchecked Return Value) were considered, the direct evidence of a NULL pointer dereference due to a **missing check** makes CWE-476 the most accurate and specific classification.\n\nCWE-476 is at the optimal level of specificity (Base) because it precisely captures the vulnerability: a NULL pointer is dereferenced due to a **lack of proper validation**.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*Not Selected:* This CWE is not relevant because the vulnerability is not related to locking mechanisms.\n\n## CWE-824: Access of Uninitialized Pointer\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product accesses or uses a pointer that has not been initialized.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Potentially Relevant:* This could be a secondary issue if the pointer is uninitialized and then dereferenced, but the primary issue is the **lack of checking for NULL** before dereferencing, so this is a weaker match.\n\n## CWE-476: NULL Pointer Dereference\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product dereferences a pointer that it expects to be valid but is NULL.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Selected as Primary:* This perfectly matches the vulnerability description, where the code attempts to dereference a pointer (`xe->pat.ops`) without ensuring it's not NULL.\n\n## CWE-1285: Improper Validation of Specified Index, Position, or Offset in Input\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Not Selected:* This is not relevant because the vulnerability does not involve validating an index, position, or offset in input.\n\n## CWE-755: Improper Handling of Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product does not handle or incorrectly handles an exceptional condition.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n*Not Selected:* Too generic. CWE-476 is a more specific child of this CWE.\n\n## CWE-252: Unchecked Return Value\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Potentially Relevant:* While the code doesn't explicitly skip checking a return value, the **missing NULL check** serves a similar purpose - failing to validate the state of a pointer. This is a weaker match than CWE-476.\n\n## CWE-754: Improper Check for Unusual or Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*Not Selected:* Too generic. CWE-476 is a more specific child of this CWE.\n\n## CWE-822: Untrusted Pointer Dereference\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product obtains a value from an untrusted source, converts this value to a pointer, and dereferences the resulting pointer.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Not Selected:* Not directly relevant. The pointer isn't necessarily obtained from an untrusted source; it's simply not checked for NULL.\n\n## CWE-703: Improper Check or Handling of Exceptional Conditions\n**Abstraction Level**: Pillar\n**Similarity Score**: 0.73\n**Source**: dense\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-476:**\n- 476 (NULL Pointer Dereference) - ROOT\n\n\n**Chain starting from CWE-667:**\n- 667 (Improper Locking) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "824",
        "name": "Access of Uninitialized Pointer",
        "source": "sparse"
      },
      "similarity": 402.6444084622339
    },
    {
      "metadata": {
        "doc_id": "1284",
        "name": "Improper Validation of Specified Quantity in Input",
        "source": "sparse"
      },
      "similarity": 375.90161580043844
    },
    {
      "metadata": {
        "doc_id": "476",
        "name": "NULL Pointer Dereference",
        "source": "sparse"
      },
      "similarity": 374.9030040963965
    },
    {
      "metadata": {
        "doc_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "source": "sparse"
      },
      "similarity": 369.1288442332266
    },
    {
      "metadata": {
        "doc_id": "367",
        "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
        "source": "sparse"
      },
      "similarity": 363.5338861597161
    },
    {
      "metadata": {
        "doc_id": "617",
        "name": "Reachable Assertion",
        "source": "sparse"
      },
      "similarity": 358.0467373539637
    },
    {
      "metadata": {
        "doc_id": "61",
        "name": "UNIX Symbolic Link (Symlink) Following",
        "source": "sparse"
      },
      "similarity": 355.2947793802628
    },
    {
      "metadata": {
        "doc_id": "754",
        "name": "Improper Check for Unusual or Exceptional Conditions",
        "source": "sparse"
      },
      "similarity": 353.1418788830592
    },
    {
      "metadata": {
        "doc_id": "1285",
        "name": "Improper Validation of Specified Index, Position, or Offset in Input",
        "type": "Base",
        "original_content": "The product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties.",
        "keyphrase_source": "rootcause:improper pointer checking",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.477076846986208
          }
        }
      },
      "similarity": 0.477076846986208
    },
    {
      "doc_id": "1299",
      "text": "The lack of protections on alternate paths to access\n                control-protected assets (such as unprotected shadow registers\n                and other external facing unguarded interfaces) allows an\n                attacker to bypass existing protections to the asset that are\n\t\tonly performed against the primary path.",
      "score": 0.5143549427089854,
      "metadata": {
        "doc_id": "1299",
        "name": "Missing Protection Mechanism for Alternate Hardware Interface",
        "type": "Base",
        "extended_description": "\n\nAn asset inside a chip might have access-control protections through one interface. However, if all paths to the asset are not protected, an attacker might compromise the asset through alternate paths. These alternate paths could be through shadow or mirror registers inside the IP core, or could be paths from other external-facing interfaces to the IP core or SoC.\n\n\nConsider an SoC with various interfaces such as UART, SMBUS, PCIe, USB, etc. If access control is implemented for SoC internal registers only over the PCIe interface, then an attacker could still modify the SoC internal registers through alternate paths by coming through interfaces such as UART, SMBUS, USB, etc. \n\n\nAlternatively, attackers might be able to bypass existing protections by exploiting unprotected, shadow registers. Shadow registers and mirror registers typically refer to registers that can be accessed from multiple addresses. Writing to or reading from the aliased/mirrored address has the same effect as writing to the address of the main register. They are typically implemented within an IP core or SoC to temporarily hold certain data. These data will later be updated to the main register, and both registers will be in synch. If the shadow registers are not access-protected, attackers could simply initiate transactions to the shadow registers and compromise system security. \n",
        "alternate_terms": [],
        "original_content": "The lack of protections on alternate paths to access\n                control-protected assets (such as unprotected shadow registers\n                and other external facing unguarded interfaces) allows an\n                attacker to bypass existing protections to the asset that are\n\t\tonly performed against the primary path.",
        "relationships": [
          {
            "source_id": "1299",
            "target_id": "288",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1299",
            "target_id": "420",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1299",
            "target_id": "1191",
            "label": "PEEROF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1194"
            }
          },
          {
            "source_id": "420",
            "target_id": "1299",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "288",
            "target_id": "1299",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1314",
            "target_id": "1299",
            "label": "PEEROF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1194"
            }
          }
        ],
        "source": "graph",
        "sources": [
          "vector",
          "graph"
        ],
        "vector_score": 0.5143549427089854,
        "graph_score": 3.6399999999999997,
        "score_components": {
          "explicit_mention": 1.0,
          "relationship_chain": 0.7,
          "abstraction_path": 0.9,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "1299",
                  "1191",
                  "PEEROF"
                ]
              ],
              "score": 0.7,
              "type": "relationship_chain",
              "source": "1191"
            },
            "peer_relationship": {
              "path": [
                [
                  "1299",
                  "1191",
                  "PEEROF"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "1191"
            }
          }
        },
        "is_explicit": true,
        "abstraction_level": "base",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.457995353775353,
            "graph": 2.389741977083594
          }
        }
      },
      "similarity": 2.389741977083594
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-476",
      "CWE-667",
      "CWE-1285",
      "CWE-755",
      "CWE-822",
      "CWE-824",
      "CWE-252",
      "CWE-703",
      "CWE-754"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}