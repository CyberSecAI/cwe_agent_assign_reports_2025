{
  "cve_id": "CVE-2024-8210",
  "description": "A vulnerability was found in D-Link DNS-120, DNR-202L, DNS-315L, DNS-320, DNS-320L, DNS-320LW, DNS-321, DNR-322L, DNS-323, DNS-325, DNS-326, DNS-327L, DNR-326, DNS-340L, DNS-343, DNS-345, DNS-726-4, DNS-1100-4, DNS-1200-05 and DNS-1550-04 up to 20240814. It has been classified as critical. This affects the function sprintf of the file /cgi-bin/hd_config.cgi. The manipulation of the argument f_mount leads to **command injection**. It is possible to initiate the attack remotely. The exploit has been disclosed to the public and may be used. NOTE This vulnerability only affects products that are no longer supported by the maintainer. NOTE Vendor was contacted early and confirmed that the product is end-of-life. It should be retired and replaced.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "command injection",
    "impact": "",
    "vector": "",
    "attacker": "",
    "product": "D-Link DNS-120, DNR-202L, DNS-315L, DNS-320, DNS-320L, DNS-320LW, DNS-321, DNR-322L, DNS-323, DNS-325, DNS-326, DNS-327L, DNR-326, DNS-340L, DNS-343, DNS-345, DNS-726-4, DNS-1100-4, DNS-1200-05 and DNS-1550-04",
    "version": "up to 20240814",
    "component": "/cgi-bin/hd_config.cgi"
  },
  "reference_content": "The provided content does not directly relate to CVE-2024-8210. However, it discusses vulnerabilities (CVE-2024-3272 and CVE-2024-3273) and other security issues in D-Link NAS devices.\n\nSpecifically, the VulDB submission #397274 provides detailed information about a command injection vulnerability:\n\n**Root Cause of Vulnerability:**\n- The `cgi_FMT_R12R5_3rd_DiskMGR` function in `/cgi-bin/hd_config.cgi` is vulnerable to command injection.\n- The `f_mount` variable from a POST request is used in a `sprintf` function which is then passed to a `system` command.\n\n**Weaknesses/Vulnerabilities Present:**\n- Command Injection. The vulnerability exists because user-controlled input (`f_mount`) is passed to a system command without sanitization.\n\n**Impact of Exploitation:**\n- Successful exploitation allows an attacker to execute arbitrary commands on the device.\n\n**Attack Vectors:**\n- Sending a crafted POST request to the vulnerable CGI script (`/cgi-bin/hd_config.cgi`) with malicious data in the `f_mount` parameter.\n\n**Required Attacker Capabilities/Position:**\n- An attacker needs to be able to send POST requests to the web interface of the affected devices. This likely requires network access to the device, although the exact network configuration (LAN, WAN, etc) is not specified in this content.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-78 | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | 1.0 | Base | Allowed | Primary CWE |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship considered was the parent-child relationship between CWE-77 (Command Injection) and CWE-78 (OS Command Injection). CWE-78 was selected as it is a more specific case of command injection, targeting OS commands. The tool's retriever results showed both as strong candidates, but since the vulnerability description explicitly mentions OS commands, CWE-78 was favored.\n\n```mermaid\ngraph TD\n    cwe78[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"]\n    cwe77[\"CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')\"]\n    cwe78 -- CHILDOF --> cwe77\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe78 primary\n    class cwe77 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **improper neutralization** of the `f_mount` argument, leading to **command injection**. The root cause is the lack of input sanitization before the input is used in a `sprintf` function, which is then passed to a `system` command. This allows for the execution of arbitrary commands on the device.\n\n## Summary of Analysis\nThe analysis is heavily based on the provided evidence, which explicitly mentions **command injection** via manipulation of the `f_mount` argument in the `/cgi-bin/hd_config.cgi` file. The **root cause** is the **lack of sanitization** of this input before it's used in a `sprintf` function and then passed to a `system` command.\n\nThe vulnerability description key phrases state: \"**weakness:** **command injection**\". The \"CVE Reference Links Content Summary\" states that the \"**f_mount** variable from a POST request is used in a **sprintf** function which is then passed to a **system** command\" and that \"**user-controlled input (`f_mount`) is passed to a system command without sanitization**.\"\n\nThe retriever results also strongly suggest CWE-77 and CWE-78, with the latter being a more specific instance of the former.\n\nThe selection of CWE-78 is at the optimal level of specificity, as it directly addresses the vulnerability involving OS commands.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.80\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: CWE-77 is often misused when OS command injection (CWE-78) was intended instead [REF-1287].\n\nI considered CWE-77, but it is a class level CWE while CWE-78 is a Base level CWE. Also the description specifically mentions OS commands so CWE-78 is a better fit. The rationale for CWE-77 states that it's often misused when OS command injection is intended, further supporting the selection of CWE-78.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-78 | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | 1.0 | Base | Allowed | Primary CWE |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship considered was the parent-child relationship between CWE-77 (Command Injection) and CWE-78 (OS Command Injection). CWE-78 was selected as it is a more specific case of command injection, targeting OS commands. The tool's retriever results showed both as strong candidates, but since the vulnerability description explicitly mentions OS commands, CWE-78 was favored.\n\n```mermaid\ngraph TD\n    cwe78[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"]\n    cwe77[\"CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')\"]\n    cwe78 -- CHILDOF --> cwe77\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe78 primary\n    class cwe77 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **improper neutralization** of the `f_mount` argument, leading to **command injection**. The root cause is the lack of input sanitization before the input is used in a `sprintf` function, which is then passed to a `system` command. This allows for the execution of arbitrary commands on the device.\n\n## Summary of Analysis\nThe analysis is heavily based on the provided evidence, which explicitly mentions **command injection** via manipulation of the `f_mount` argument in the `/cgi-bin/hd_config.cgi` file. The **root cause** is the **lack of sanitization** of this input before it's used in a `sprintf` function and then passed to a `system` command.\n\nThe vulnerability description key phrases state: \"**weakness:** **command injection**\". The \"CVE Reference Links Content Summary\" states that the \"**f_mount** variable from a POST request is used in a **sprintf** function which is then passed to a **system** command\" and that \"**user-controlled input (`f_mount`) is passed to a system command without sanitization**.\"\n\nThe retriever results also strongly suggest CWE-77 and CWE-78, with the latter being a more specific instance of the former.\n\nThe selection of CWE-78 is at the optimal level of specificity, as it directly addresses the vulnerability involving OS commands.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.80\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: CWE-77 is often misused when OS command injection (CWE-78) was intended instead [REF-1287].\n\nI considered CWE-77, but it is a class level CWE while CWE-78 is a Base level CWE. Also the description specifically mentions OS commands so CWE-78 is a better fit. The rationale for CWE-77 states that it's often misused when OS command injection is intended, further supporting the selection of CWE-78.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-77:**\n- 77 (Improper Neutralization of Special Elements used in a Command ('Command Injection')) - ROOT\n\n\n**Chain starting from CWE-78:**\n- 78 (Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "77",
        "name": "Improper Neutralization of Special Elements used in a Command ('Command Injection')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Command injection",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "78",
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: OS Command Injection",
        "match_reason": "phrase_in_term_whole_phrase"
      },
      "similarity": 700.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "346",
        "name": "Origin Validation Error",
        "source": "sparse"
      },
      "similarity": 730.1701795410645
    },
    {
      "metadata": {
        "doc_id": "330",
        "name": "Use of Insufficiently Random Values",
        "source": "sparse"
      },
      "similarity": 690.9585143169392
    },
    {
      "metadata": {
        "doc_id": "923",
        "name": "Improper Restriction of Communication Channel to Intended Endpoints",
        "source": "sparse"
      },
      "similarity": 666.7653195221482
    },
    {
      "metadata": {
        "doc_id": "359",
        "name": "Exposure of Private Personal Information to an Unauthorized Actor",
        "source": "sparse"
      },
      "similarity": 663.8908814890393
    },
    {
      "metadata": {
        "doc_id": "941",
        "name": "Incorrectly Specified Destination in a Communication Channel",
        "source": "sparse"
      },
      "similarity": 660.558442075004
    },
    {
      "metadata": {
        "doc_id": "350",
        "name": "Reliance on Reverse DNS Resolution for a Security-Critical Action",
        "source": "sparse"
      },
      "similarity": 653.4571217581647
    },
    {
      "metadata": {
        "doc_id": "121",
        "name": "Stack-based Buffer Overflow",
        "type": "Variant",
        "original_content": "A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).",
        "keyphrase_source": "weakness:command injection",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.6591991038318465
          }
        }
      },
      "similarity": 0.6591991038318465
    },
    {
      "doc_id": "1275",
      "text": "CWE-1275: Sensitive Cookie with Improper SameSite Attribute",
      "score": 2.2704,
      "metadata": {
        "doc_id": "1275",
        "name": "Sensitive Cookie with Improper SameSite Attribute",
        "type": "variant",
        "original_content": "CWE-1275: Sensitive Cookie with Improper SameSite Attribute",
        "relationships": [
          {
            "source_id": "1275",
            "target_id": "352",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1275",
            "target_id": "923",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "923",
            "target_id": "1275",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "352",
            "target_id": "1275",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 0.8,
          "abstraction_path": 0.76,
          "sequence_path": 0.8
        },
        "abstraction_factor": 1.2,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "346",
                  "352",
                  "REQUIREDBY"
                ],
                [
                  "352",
                  "1275",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.8,
              "type": "relationship_chain",
              "source": "346"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "923",
                  "1275",
                  "PARENTOF"
                ]
              ],
              "score": 0.76,
              "type": "abstraction_path_down",
              "source": "923"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "346",
                  "352",
                  "REQUIREDBY"
                ],
                [
                  "352",
                  "1275",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "vulnerability_sequence_forward",
              "source": "346"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "352",
                  "346",
                  "REQUIRES"
                ],
                [
                  "1275",
                  "352",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "vulnerability_sequence_backward",
              "source": "346"
            }
          }
        },
        "abstraction_level": "variant",
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2704
          }
        }
      },
      "similarity": 2.2704
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-77",
      "CWE-78"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}