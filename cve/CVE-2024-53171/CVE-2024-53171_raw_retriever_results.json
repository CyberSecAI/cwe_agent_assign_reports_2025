{
  "query": "In the Linux kernel, the following vulnerability has been resolved ubifs authentication Fix use-after-free in ubifs_tnc_end_commit After an insertion in TNC, the tree might split and cause a node to change its `znode->parent`. A further deletion of other nodes in the tree (which also could free the nodes), the aforementioned nodes `znode->cparent` could still point to a freed node. This `znode->cparent` may not be updated when getting nodes to commit in `ubifs_tnc_start_commit()`. This could then trigger a use-after-free when accessing the `znode->cparent` in `write_index()` in `ubifs_tnc_end_commit()`. This can be triggered by running rm -f /etc/test-file.bin dd if=/dev/urandom of=/etc/test-file.bin bs=1M count=60 conv=fsync in a loop, and with `CONFIG_UBIFS_FS_AUTHENTICATION`. KASAN then reports BUG KASAN use-after-free in ubifs_tnc_end_commit+0xa5c/0x1950 Write of size 32 at addr ffffff800a3af86c by task ubifs_bgt0_20/153 Call trace dump_backtrace+0x0/0x340 show_stack+0x18/0x24 dump_stack_lvl+0x9c/0xbc print_address_description.constprop.0+0x74/0x2b0 kasan_report+0x1d8/0x1f0 kasan_check_range+0xf8/0x1a0 memcpy+0x84/0xf4 ubifs_tnc_end_commit+0xa5c/0x1950 do_commit+0x4e0/0x1340 ubifs_bg_thread+0x234/0x2e0 kthread+0x36c/0x410 ret_from_fork+0x10/0x20 Allocated by task 401 kasan_save_stack+0x38/0x70 __kasan_kmalloc+0x8c/0xd0 __kmalloc+0x34c/0x5bc tnc_insert+0x140/0x16a4 ubifs_tnc_add+0x370/0x52c ubifs_jnl_write_data+0x5d8/0x870 do_writepage+0x36c/0x510 ubifs_writepage+0x190/0x4dc __writepage+0x58/0x154 write_cache_pages+0x394/0x830 do_writepages+0x1f0/0x5b0 filemap_fdatawrite_wbc+0x170/0x25c file_write_and_wait_range+0x140/0x190 ubifs_fsync+0xe8/0x290 vfs_fsync_range+0xc0/0x1e4 do_fsync+0x40/0x90 __arm64_sys_fsync+0x34/0x50 invoke_syscall.constprop.0+0xa8/0x260 do_el0_svc+0xc8/0x1f0 el0_svc+0x34/0x70 el0t_64_sync_handler+0x108/0x114 el0t_64_sync+0x1a4/0x1a8 Freed by task 403 kasan_save_stack+0x38/0x70 kasan_set_track+0x28/0x40 kasan_set_free_info+0x28/0x4c __kasan_slab_free+0xd4/0x13c kfree+0xc4/0x3a0 tnc_delete+0x3f4/0xe40 ubifs_tnc_remove_range+0x368/0x73c ubifs_tnc_remove_ino+0x29c/0x2e0 ubifs_jnl_delete_inode+0x150/0x260 ubifs_evict_inode+0x1d4/0x2e4 evict+0x1c8/0x450 iput+0x2a0/0x3c4 do_unlinkat+0x2cc/0x490 __arm64_sys_unlinkat+0x90/0x100 invoke_syscall.constprop.0+0xa8/0x260 do_el0_svc+0xc8/0x1f0 el0_svc+0x34/0x70 el0t_64_sync_handler+0x108/0x114 el0t_64_sync+0x1a4/0x1a8 The offending `memcpy()` in `ubifs_copy_hash()` has a use-after-free when a node becomes root in TNC but still has a `cparent` to an already freed node. More specifically, consider the following TNC zroot / / zp1 / / zn Inserting a new node `zn_new` with a key smaller then `zn` will trigger a split in `tnc_insert()` if `zp1` is full zroot / \\\\ / \\\\ zp1 zp2 / \\\\ / \\\\ zn_new zn `zn->parent` has now been moved to `zp2`, *but* `zn->cparent` still points to `zp1`. Now, consider a removal of all the nodes _except_ `zn`. Just when `tnc_delete()` is about to delete `zroot` and `zp2` zroot \\\\ \\\\ zp2 \\\\ \\\\ zn `zroot` and `zp2` get freed and the tree collapses zn `zn` now becomes the new `zroot`. `get_znodes_to_commit()` will now only find `zn`, the new `zroot`, and `write_index()` will check its `znode->cparent` that wrongly points to the already freed `zp1`. `ubifs_copy_hash()` thus gets wrongly called with `znode->cparent->zbranch[znode->iip].hash` that triggers the use-after-free! Fix this by explicitly setting `znode->cparent` to `NULL` in `get_znodes_to_commit()` for the root node. The search for the dirty nodes ---truncated---",
  "keyphrases": {
    "rootcause": [
      "use-after-free"
    ],
    "weakness": [
      "use-after-free"
    ]
  },
  "timestamp": "2025-07-13T21:44:49.001673",
  "retriever_config": {
    "weights": {
      "dense": 0.35,
      "sparse": 0.4,
      "graph": 0.25
    },
    "use_graph": true,
    "use_rag": true,
    "use_sparse": true
  },
  "raw_results": {
    "graph": [
      {
        "cwe_id": "364",
        "name": "Signal Handler Race Condition",
        "abstraction": "base",
        "score": 4.329000000000001,
        "description": "CWE-364: Signal Handler Race Condition...",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "123",
        "name": "Write-what-where Condition",
        "abstraction": "base",
        "score": 2.9120000000000004,
        "description": "CWE-123: Write-what-where Condition...",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "772",
        "name": "Missing Release of Resource after Effective Lifetime",
        "abstraction": "base",
        "score": 2.2100000000000004,
        "description": "CWE-772: Missing Release of Resource after Effective Lifetime...",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "390",
        "name": "Detection of Error Condition Without Action",
        "abstraction": "base",
        "score": 2.2100000000000004,
        "description": "CWE-390: Detection of Error Condition Without Action...",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "1322",
        "name": "Use of Blocking Code in Single-threaded, Non-blocking Context",
        "abstraction": "base",
        "score": 2.2100000000000004,
        "description": "CWE-1322: Use of Blocking Code in Single-threaded, Non-blocking Context...",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "368",
        "name": "Context Switching Race Condition",
        "abstraction": "base",
        "score": 2.1762,
        "description": "CWE-368: Context Switching Race Condition...",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "415",
        "name": "Double Free",
        "abstraction": "Variant",
        "score": 2.15303308576405,
        "description": "The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations....",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "416",
        "name": "Use After Free",
        "abstraction": "Variant",
        "score": 1.8176683952569022,
        "description": "The product reuses or references memory after it has been freed. At some point afterward, the memory may be allocated again and saved in another pointer, while the original pointer references a locati...",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "120",
        "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
        "abstraction": "base",
        "score": 1.7680000000000005,
        "description": "CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')...",
        "mapping_usage": "Allowed-with-Review"
      },
      {
        "cwe_id": "826",
        "name": "Premature Release of Resource During Expected Lifetime",
        "abstraction": "base",
        "score": 1.6848000000000003,
        "description": "CWE-826: Premature Release of Resource During Expected Lifetime...",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "562",
        "name": "Return of Stack Variable Address",
        "abstraction": "base",
        "score": 1.6848000000000003,
        "description": "CWE-562: Return of Stack Variable Address...",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "1341",
        "name": "Multiple Releases of Same Resource or Handle",
        "abstraction": "base",
        "score": 1.6848000000000003,
        "description": "CWE-1341: Multiple Releases of Same Resource or Handle...",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "1265",
        "name": "Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls",
        "abstraction": "base",
        "score": 1.6848000000000003,
        "description": "CWE-1265: Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls...",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "134",
        "name": "Use of Externally-Controlled Format String",
        "abstraction": "base",
        "score": 1.6848000000000003,
        "description": "CWE-134: Use of Externally-Controlled Format String...",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "1325",
        "name": "Improperly Controlled Sequential Memory Allocation",
        "abstraction": "base",
        "score": 1.6848000000000003,
        "description": "CWE-1325: Improperly Controlled Sequential Memory Allocation...",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "386",
        "name": "Symbolic Name not Mapping to Correct Object",
        "abstraction": "base",
        "score": 1.6744000000000003,
        "description": "CWE-386: Symbolic Name not Mapping to Correct Object...",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "590",
        "name": "Free of Memory not on the Heap",
        "abstraction": "variant",
        "score": 1.5552000000000004,
        "description": "CWE-590: Free of Memory not on the Heap...",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "abstraction": "Class",
        "score": 1.5510814243687272,
        "description": "The product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code ...",
        "mapping_usage": "Allowed-with-Review"
      },
      {
        "cwe_id": "476",
        "name": "NULL Pointer Dereference",
        "abstraction": "Base",
        "score": 1.537842521015411,
        "description": "The product dereferences a pointer that it expects to be valid but is NULL....",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "908",
        "name": "Use of Uninitialized Resource",
        "abstraction": "Base",
        "score": 1.535780184272584,
        "description": "The product uses or accesses a resource that has not been initialized....",
        "mapping_usage": "Allowed"
      }
    ],
    "dense": [
      {
        "cwe_id": "909",
        "name": "Missing Initialization of Resource",
        "abstraction": "Class",
        "score": 0.5154311136693217,
        "description": "The product does not initialize a critical resource....",
        "mapping_usage": "Allowed-with-Review"
      },
      {
        "cwe_id": "667",
        "name": "Improper Locking",
        "abstraction": "Class",
        "score": 0.511744344423454,
        "description": "The product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors....",
        "mapping_usage": "Allowed-with-Review"
      },
      {
        "cwe_id": "911",
        "name": "Improper Update of Reference Count",
        "abstraction": "Base",
        "score": 0.500558029967184,
        "description": "The product uses a reference count to manage a resource, but it does not update or incorrectly updates the reference count....",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "abstraction": "Class",
        "score": 0.4987896472473534,
        "description": "The product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code ...",
        "mapping_usage": "Allowed-with-Review"
      },
      {
        "cwe_id": "835",
        "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
        "abstraction": "Base",
        "score": 0.4889360647945637,
        "description": "The product contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop....",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "908",
        "name": "Use of Uninitialized Resource",
        "abstraction": "Base",
        "score": 0.4819603253525542,
        "description": "The product uses or accesses a resource that has not been initialized....",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "476",
        "name": "NULL Pointer Dereference",
        "abstraction": "Base",
        "score": 0.48138314875858035,
        "description": "The product dereferences a pointer that it expects to be valid but is NULL....",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "366",
        "name": "Race Condition within a Thread",
        "abstraction": "Base",
        "score": 0.48023382057440894,
        "description": "If two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined....",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "415",
        "name": "Double Free",
        "abstraction": "Variant",
        "score": 0.47922831401351895,
        "description": "The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations....",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "416",
        "name": "Use After Free",
        "abstraction": "Variant",
        "score": 0.47888084658756064,
        "description": "The product reuses or references memory after it has been freed. At some point afterward, the memory may be allocated again and saved in another pointer, while the original pointer references a locati...",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "833",
        "name": "Deadlock",
        "abstraction": "Base",
        "score": 0.4615606123067284,
        "description": "The product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock....",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "401",
        "name": "Missing Release of Memory after Effective Lifetime",
        "abstraction": "Variant",
        "score": 0.46123839316900683,
        "description": "The product does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory....",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "457",
        "name": "Use of Uninitialized Variable",
        "abstraction": "Variant",
        "score": 0.45993976748221965,
        "description": "The code uses a variable that has not been initialized, leading to unpredictable or unintended results....",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "367",
        "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
        "abstraction": "Base",
        "score": 0.45754698820294815,
        "description": "The product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can ca...",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "665",
        "name": "Improper Initialization",
        "abstraction": "Class",
        "score": 0.45616843121158046,
        "description": "The product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used....",
        "mapping_usage": "Discouraged"
      },
      {
        "cwe_id": "252",
        "name": "Unchecked Return Value",
        "abstraction": "Base",
        "score": 0.45559768890164476,
        "description": "The product does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions....",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "61",
        "name": "UNIX Symbolic Link (Symlink) Following",
        "abstraction": "Compound",
        "score": 0.45459359172350555,
        "description": "The product, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an ...",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "459",
        "name": "Incomplete Cleanup",
        "abstraction": "Base",
        "score": 0.4494842858784692,
        "description": "The product does not properly \"clean up\" and remove temporary or supporting resources after they have been used....",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "126",
        "name": "Buffer Over-read",
        "abstraction": "Variant",
        "score": 0.44787168810398914,
        "description": "The product reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer....",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "789",
        "name": "Memory Allocation with Excessive Size Value",
        "abstraction": "Variant",
        "score": 0.44410502558557563,
        "description": "The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated....",
        "mapping_usage": "Allowed"
      }
    ],
    "sparse": [
      {
        "cwe_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "abstraction": "Class",
        "score": 1473.2657425742318,
        "description": "The product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code ...",
        "mapping_usage": "Allowed-with-Review"
      },
      {
        "cwe_id": "667",
        "name": "Improper Locking",
        "abstraction": "Class",
        "score": 1412.6877768606882,
        "description": "The product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors....",
        "mapping_usage": "Allowed-with-Review"
      },
      {
        "cwe_id": "401",
        "name": "Missing Release of Memory after Effective Lifetime",
        "abstraction": "Variant",
        "score": 1390.955600340346,
        "description": "The product does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory....",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "415",
        "name": "Double Free",
        "abstraction": "Variant",
        "score": 1375.3325703779888,
        "description": "The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations....",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "364",
        "name": "Signal Handler Race Condition",
        "abstraction": "Base",
        "score": 1365.7042202974953,
        "description": "The product uses a signal handler that introduces a race condition....",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "59",
        "name": "Improper Link Resolution Before File Access ('Link Following')",
        "abstraction": "Base",
        "score": 1361.010648570057,
        "description": "The product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource....",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "1390",
        "name": "Weak Authentication",
        "abstraction": "Class",
        "score": 1360.6465466962231,
        "description": "The product uses an authentication mechanism to restrict access to specific users or identities, but the mechanism does not sufficiently prove that the claimed identity is correct....",
        "mapping_usage": "Allowed-with-Review"
      },
      {
        "cwe_id": "416",
        "name": "Use After Free",
        "abstraction": "Variant",
        "score": 1328.1719294913753,
        "description": "The product reuses or references memory after it has been freed. At some point afterward, the memory may be allocated again and saved in another pointer, while the original pointer references a locati...",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "367",
        "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
        "abstraction": "Base",
        "score": 1323.1842649791483,
        "description": "The product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can ca...",
        "mapping_usage": "Allowed"
      },
      {
        "cwe_id": "674",
        "name": "Uncontrolled Recursion",
        "abstraction": "Class",
        "score": 1315.8473977897638,
        "description": "The product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack....",
        "mapping_usage": "Allowed-with-Review"
      }
    ]
  },
  "score_statistics": {
    "dense": {
      "min": 0.44410502558557563,
      "max": 0.5154311136693217,
      "mean": 0.4732626063977084,
      "median": 0.47022072944714455,
      "count": 20
    },
    "sparse": {
      "min": 1315.8473977897638,
      "max": 1473.2657425742318,
      "mean": 1370.6806697977318,
      "median": 1363.3574344337762,
      "count": 10
    },
    "graph": {
      "min": 1.535780184272584,
      "max": 4.329000000000001,
      "mean": 1.9874502805338838,
      "median": 1.6848000000000003,
      "count": 20
    }
  }
}