{
  "cve_id": "CVE-2024-3561",
  "description": "The Custom Field Suite plugin for WordPress is vulnerable to SQL Injection via the the Term custom field in all versions up to, and including, 2.6.7 due to **insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query**. This makes it possible for authenticated attackers, with contributor-level access and above, to append additional SQL queries into already existing queries that can be used to extract sensitive information from the database.",
  "key_phrases": {
    "rootcause": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
    "weakness": "SQL injection",
    "impact": [
      "extract sensitive information from the database",
      "information disclosure"
    ],
    "vector": "",
    "attacker": "authenticated attackers",
    "product": "Custom Field Suite plugin for WordPress",
    "version": "all versions up to and including 2.6.7",
    "component": "Term custom field"
  },
  "reference_content": "Based on the provided information, here's an analysis of CVE-2024-3561:\n\n**1. Verification of CVE relevance:**\n\nThe provided content, specifically from `www.wordfence.com`, directly mentions \"CVE-2024-3561\" and describes a SQL Injection vulnerability in the \"Custom Field Suite\" WordPress plugin, which is also mentioned in the other sources. Thus the content is relevant to the CVE.\n\n**2. Vulnerability details:**\n\n*   **Root cause:** The vulnerability stems from insufficient escaping of user-supplied parameters and a lack of adequate preparation in the existing SQL query within the 'Term' custom field of the Custom Field Suite plugin.\n*   **Weaknesses/vulnerabilities present:**  SQL Injection vulnerability exists due to improper handling of user input within the SQL query.\n*   **Impact of exploitation:** Successful exploitation allows authenticated attackers to inject arbitrary SQL queries which can lead to the extraction of sensitive information from the database. The CVSS score is 8.8 (High) indicating a significant impact\n*   **Attack vectors:** The attack vector is network-based, and the vulnerability is triggered through the 'Term' custom field within the plugin.\n*   **Required attacker capabilities/position:** An attacker needs to be authenticated with at least contributor-level access to exploit this vulnerability.\n\n**3. Technical Details:**\n\n*   The vulnerability is located within the `term.php` file of the Custom Field Suite plugin, specifically line 58 as referenced in the wordfence article and confirmed in the github source file.\n*   The vulnerable code involves a SQL query that retrieves term data based on the user-provided `term_id` values. Due to lack of proper sanitization of this `term_id`, attackers can manipulate it to inject their own SQL commands.\n*   The Wordfence article explicitly states that \"This makes it possible for authenticated attackers, with contributor-level access and above, to append additional SQL queries into already existing queries that can be used to extract sensitive information from the database.\"\n\n**4. Additional Information:**\n\n* The plugin has been closed as of 20 August 2024 and is not available for download, as described on the wordpress.org page.\n* The Wordfence article states that no patch is available, thus manual mitigation may be needed and it may be best to uninstall the affected software.\n\nIn summary, CVE-2024-3561 is a high-severity SQL injection vulnerability in the Custom Field Suite plugin, affecting all versions up to 2.6.7. It allows authenticated users with contributor-level access or higher to execute arbitrary SQL queries by manipulating the `term_id` within the \"Term\" custom field.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-89 | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | 1.0 | Base | Allowed | Primary CWE. The vulnerability is due to **insufficient escaping** and **lack of preparation** in the SQL query, which allows attackers to inject malicious SQL code. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship that influenced the decision was the direct match of the vulnerability description to CWE-89, which describes the **improper neutralization** of special elements used in an SQL command. The retriever results also strongly suggested CWE-89 as the top candidate. There were no parent-child relationships or chain patterns that influenced the decision in this case, as the description clearly pointed to a classic SQL injection scenario.\n\n```mermaid\ngraph TD\n    cwe89[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"]\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    \n    class cwe89 primary\n```\n\n## Vulnerability Chain\nThe vulnerability chain is straightforward:\n1.  **Root Cause:** **Insufficient escaping** and **lack of preparation** in the SQL query.\n2.  **Weakness:** CWE-89 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection').\n3.  **Impact:** Extraction of sensitive information from the database.\n\n## Summary of Analysis\nThe analysis is based on the clear evidence provided in the vulnerability description and the CVE Reference Links Content Summary. The **root cause** is directly stated as \"**insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query**,\" which is the hallmark of SQL injection vulnerabilities.\n\nThe vulnerability description explicitly states the presence of **SQL injection** and the ability for authenticated attackers to \"**append additional SQL queries into already existing queries that can be used to extract sensitive information from the database**.\"\n\nThe retriever results strongly support the selection of CWE-89, with a score of 1.0.\n\nThe selected CWE is at the optimal level of specificity (Base) because it directly addresses the technical weakness: the **improper neutralization** of special elements in an SQL command.\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-352: Cross-Site Request Forgery (CSRF)\n**Abstraction Level**: Compound\n**Similarity Score**: 0.73\n**Source**: dense\n**Not Used:** CSRF is not applicable, as the vulnerability is due to SQL injection, not a forged request.\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 0.71\n**Source**: dense\n**Not Used:** While escaping is related, CWE-89 is more specific to SQL injection, where the lack of escaping leads to the injection itself.\n\n## CWE-425: Direct Request ('Forced Browsing')\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n**Not Used:** Forced browsing is an authorization issue. This vulnerability is an SQL Injection.\n\n## CWE-472: External Control of Assumed-Immutable Web Parameter\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n**Not Used:** Not applicable as the issue is with SQL injection, not with immutability of parameters.\n\n## CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n**Not Used:** Cross-site scripting involves injecting client-side scripts, while this vulnerability is SQL injection.\n\n## CWE-434: Unrestricted Upload of File with Dangerous Type\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n**Not Used:** Not relevant as this vulnerability is related to SQL injection, not file uploads.\n\n## CWE-502: Deserialization of Untrusted Data\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n**Not Used:** Deserialization is not related to this SQL injection vulnerability.\n\n## CWE-639: Authorization Bypass Through User-Controlled Key\n**Abstraction Level**: Base\n**Similarity Score**: 0.69\n**Source**: dense\n**Not Used:** Authorization bypass is a separate concern from SQL injection.\n\n## CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.69\n**Source**: dense\n**Used:** This is the most accurate CWE as the **root cause** is **insufficient escaping** of SQL special characters leading to potential malicious query execution.\n\n## CWE-201: Insertion of Sensitive Information Into Sent Data\n**Abstraction Level**: Base\n**Similarity Score**: 0.69\n**Source**: dense\n**Not Used:** Although sensitive information may be extracted, the **root cause** is not about inserting data into sent data.\n\n## CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 1371.67\n**Source**: sparse\n**Used:** This is the most accurate CWE as the **root cause** is **insufficient escaping** of SQL special characters leading to potential malicious query execution.\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 1356.50\n**Source**: sparse\n**Not Used:** While escaping is related, CWE-89 is more specific to SQL injection, where the **lack of escaping** leads to the injection itself.\n\n## CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 1229.50\n**Source**: sparse\n**Not Used:** LDAP Injection is not related to SQL Injection.\n\n## CWE-138: Improper Neutralization of Special Elements\n**Abstraction Level**: Class\n**Similarity Score**: 1220.74\n**Source**: sparse\n**Not Used:** Too generic. SQL Injection is much more specific.\n\n## CWE-863: Incorrect Authorization\n**Abstraction Level**: Class\n**Similarity Score**: 1213.90\n**Source**: sparse\n**Not Used:** Authorization is not the **root cause** of the vulnerability, but instead the improper handling of SQL queries.\n\n## CWE-613: Insufficient Session Expiration\n**Abstraction Level**: base\n**Similarity Score**: 4.21\n**Source**: graph\n**Not Used:** Not related to SQL Injection.\n\n## CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n**Abstraction Level**: Base\n**Similarity Score**: 2.86\n**Source**: graph\n**Not Used:** Cross-site scripting involves injecting client-side scripts, while this vulnerability is SQL injection.\n\n## CWE-471: Modification of Assumed-Immutable Data (MAID)\n**Abstraction Level**: base\n**Similarity Score**: 2.72\n**Source**: graph\n**Not Used:** Not related to SQL Injection.\n\n## CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')\n**Abstraction Level**: base\n**Similarity Score**: 2.40\n**Source**: graph\n**Not Used:** LDAP Injection is not related to SQL Injection.\n\n## CWE-425: Direct Request ('Forced Browsing')\n**Abstraction Level**: Base\n**Similarity Score**: 2.34\n**Source**: graph\n**Not Used:** Not related to SQL Injection.\n\n## CWE-184: Incomplete List of Disallowed Inputs\n**Abstraction Level**: base\n**Similarity Score**: 2.21\n**Source**: graph\n**Not Used:** Not related to SQL Injection.\n\n## CWE-494: Download of Code Without Integrity Check\n**Abstraction Level**: base\n**Similarity Score**: 2.21\n**Source**: graph\n**Not Used:** Not related to SQL Injection.\n\n## CWE-352: Cross-Site Request Forgery (CSRF)\n**Abstraction Level**: Compound\n**Similarity Score**: 2.18\n**Source**: graph\n**Not Used:** Not related to SQL Injection.\n\n## CWE-564: SQL Injection: Hibernate\n**Abstraction Level**: variant\n**Similarity Score**: 2.16\n**Source**: graph\n**Not Used:** While related to SQL injection, it's specific to Hibernate, which isn't mentioned in the vulnerability description.\n\n## CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 2.16\n**Source**: graph\n**Used:** This is the most accurate CWE as the **root cause** is **insufficient escaping** of SQL special characters leading to potential malicious query execution.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-89 | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | 1.0 | Base | Allowed | Primary CWE. The vulnerability is due to **insufficient escaping** and **lack of preparation** in the SQL query, which allows attackers to inject malicious SQL code. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship that influenced the decision was the direct match of the vulnerability description to CWE-89, which describes the **improper neutralization** of special elements used in an SQL command. The retriever results also strongly suggested CWE-89 as the top candidate. There were no parent-child relationships or chain patterns that influenced the decision in this case, as the description clearly pointed to a classic SQL injection scenario.\n\n```mermaid\ngraph TD\n    cwe89[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"]\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    \n    class cwe89 primary\n```\n\n## Vulnerability Chain\nThe vulnerability chain is straightforward:\n1.  **Root Cause:** **Insufficient escaping** and **lack of preparation** in the SQL query.\n2.  **Weakness:** CWE-89 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection').\n3.  **Impact:** Extraction of sensitive information from the database.\n\n## Summary of Analysis\nThe analysis is based on the clear evidence provided in the vulnerability description and the CVE Reference Links Content Summary. The **root cause** is directly stated as \"**insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query**,\" which is the hallmark of SQL injection vulnerabilities.\n\nThe vulnerability description explicitly states the presence of **SQL injection** and the ability for authenticated attackers to \"**append additional SQL queries into already existing queries that can be used to extract sensitive information from the database**.\"\n\nThe retriever results strongly support the selection of CWE-89, with a score of 1.0.\n\nThe selected CWE is at the optimal level of specificity (Base) because it directly addresses the technical weakness: the **improper neutralization** of special elements in an SQL command.\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-352: Cross-Site Request Forgery (CSRF)\n**Abstraction Level**: Compound\n**Similarity Score**: 0.73\n**Source**: dense\n**Not Used:** CSRF is not applicable, as the vulnerability is due to SQL injection, not a forged request.\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 0.71\n**Source**: dense\n**Not Used:** While escaping is related, CWE-89 is more specific to SQL injection, where the lack of escaping leads to the injection itself.\n\n## CWE-425: Direct Request ('Forced Browsing')\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n**Not Used:** Forced browsing is an authorization issue. This vulnerability is an SQL Injection.\n\n## CWE-472: External Control of Assumed-Immutable Web Parameter\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n**Not Used:** Not applicable as the issue is with SQL injection, not with immutability of parameters.\n\n## CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n**Not Used:** Cross-site scripting involves injecting client-side scripts, while this vulnerability is SQL injection.\n\n## CWE-434: Unrestricted Upload of File with Dangerous Type\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n**Not Used:** Not relevant as this vulnerability is related to SQL injection, not file uploads.\n\n## CWE-502: Deserialization of Untrusted Data\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n**Not Used:** Deserialization is not related to this SQL injection vulnerability.\n\n## CWE-639: Authorization Bypass Through User-Controlled Key\n**Abstraction Level**: Base\n**Similarity Score**: 0.69\n**Source**: dense\n**Not Used:** Authorization bypass is a separate concern from SQL injection.\n\n## CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.69\n**Source**: dense\n**Used:** This is the most accurate CWE as the **root cause** is **insufficient escaping** of SQL special characters leading to potential malicious query execution.\n\n## CWE-201: Insertion of Sensitive Information Into Sent Data\n**Abstraction Level**: Base\n**Similarity Score**: 0.69\n**Source**: dense\n**Not Used:** Although sensitive information may be extracted, the **root cause** is not about inserting data into sent data.\n\n## CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 1371.67\n**Source**: sparse\n**Used:** This is the most accurate CWE as the **root cause** is **insufficient escaping** of SQL special characters leading to potential malicious query execution.\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 1356.50\n**Source**: sparse\n**Not Used:** While escaping is related, CWE-89 is more specific to SQL injection, where the **lack of escaping** leads to the injection itself.\n\n## CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 1229.50\n**Source**: sparse\n**Not Used:** LDAP Injection is not related to SQL Injection.\n\n## CWE-138: Improper Neutralization of Special Elements\n**Abstraction Level**: Class\n**Similarity Score**: 1220.74\n**Source**: sparse\n**Not Used:** Too generic. SQL Injection is much more specific.\n\n## CWE-863: Incorrect Authorization\n**Abstraction Level**: Class\n**Similarity Score**: 1213.90\n**Source**: sparse\n**Not Used:** Authorization is not the **root cause** of the vulnerability, but instead the improper handling of SQL queries.\n\n## CWE-613: Insufficient Session Expiration\n**Abstraction Level**: base\n**Similarity Score**: 4.21\n**Source**: graph\n**Not Used:** Not related to SQL Injection.\n\n## CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n**Abstraction Level**: Base\n**Similarity Score**: 2.86\n**Source**: graph\n**Not Used:** Cross-site scripting involves injecting client-side scripts, while this vulnerability is SQL injection.\n\n## CWE-471: Modification of Assumed-Immutable Data (MAID)\n**Abstraction Level**: base\n**Similarity Score**: 2.72\n**Source**: graph\n**Not Used:** Not related to SQL Injection.\n\n## CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')\n**Abstraction Level**: base\n**Similarity Score**: 2.40\n**Source**: graph\n**Not Used:** LDAP Injection is not related to SQL Injection.\n\n## CWE-425: Direct Request ('Forced Browsing')\n**Abstraction Level**: Base\n**Similarity Score**: 2.34\n**Source**: graph\n**Not Used:** Not related to SQL Injection.\n\n## CWE-184: Incomplete List of Disallowed Inputs\n**Abstraction Level**: base\n**Similarity Score**: 2.21\n**Source**: graph\n**Not Used:** Not related to SQL Injection.\n\n## CWE-494: Download of Code Without Integrity Check\n**Abstraction Level**: base\n**Similarity Score**: 2.21\n**Source**: graph\n**Not Used:** Not related to SQL Injection.\n\n## CWE-352: Cross-Site Request Forgery (CSRF)\n**Abstraction Level**: Compound\n**Similarity Score**: 2.18\n**Source**: graph\n**Not Used:** Not related to SQL Injection.\n\n## CWE-564: SQL Injection: Hibernate\n**Abstraction Level**: variant\n**Similarity Score**: 2.16\n**Source**: graph\n**Not Used:** While related to SQL injection, it's specific to Hibernate, which isn't mentioned in the vulnerability description.\n\n## CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 2.16\n**Source**: graph\n**Used:** This is the most accurate CWE as the **root cause** is **insufficient escaping** of SQL special characters leading to potential malicious query execution.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-90:**\n- 90 (Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')) - ROOT\n\n\n**Chain starting from CWE-89:**\n- 89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: SQL injection",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse"
      },
      "similarity": 576.1795110814495
    },
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse"
      },
      "similarity": 533.07695954583
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 519.0187609963758
    },
    {
      "metadata": {
        "doc_id": "90",
        "name": "Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
        "source": "sparse"
      },
      "similarity": 513.157882482056
    },
    {
      "metadata": {
        "doc_id": "502",
        "name": "Deserialization of Untrusted Data",
        "source": "sparse"
      },
      "similarity": 507.10948373229803
    },
    {
      "metadata": {
        "doc_id": "790",
        "name": "Improper Filtering of Special Elements",
        "source": "sparse"
      },
      "similarity": 505.0062005282342
    },
    {
      "metadata": {
        "doc_id": "862",
        "name": "Missing Authorization",
        "source": "sparse"
      },
      "similarity": 503.26117246857393
    },
    {
      "metadata": {
        "doc_id": "564",
        "name": "SQL Injection: Hibernate",
        "type": "Variant",
        "original_content": "Using Hibernate to execute a dynamic SQL statement built with user-controlled input can allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.",
        "keyphrase_source": "rootcause:lack of sufficient preparation on the existing SQL query",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5310217414609668,
            "graph": 1.5171783321544963
          }
        }
      },
      "similarity": 0.5310217414609668
    },
    {
      "doc_id": "613",
      "text": "CWE-613: Insufficient Session Expiration",
      "score": 2.0930000000000004,
      "metadata": {
        "doc_id": "613",
        "name": "Insufficient Session Expiration",
        "type": "base",
        "original_content": "CWE-613: Insufficient Session Expiration",
        "relationships": [
          {
            "source_id": "613",
            "target_id": "352",
            "label": "REQUIREDBY",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "613",
            "target_id": "287",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "613",
            "target_id": "672",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "613",
            "target_id": "672",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "672",
            "target_id": "613",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "352",
            "target_id": "613",
            "label": "REQUIRES",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "287",
            "target_id": "613",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 0.9,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "352",
                  "613",
                  "REQUIRES"
                ]
              ],
              "score": 0.9,
              "type": "relationship_chain",
              "source": "352"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "352",
                  "613",
                  "REQUIRES"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_forward",
              "source": "352"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.0930000000000004
          }
        }
      },
      "similarity": 2.0930000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-90",
      "CWE-89",
      "CWE-502",
      "CWE-863",
      "CWE-116",
      "CWE-471",
      "CWE-494",
      "CWE-639",
      "CWE-564",
      "CWE-79",
      "CWE-201",
      "CWE-472",
      "CWE-613",
      "CWE-352",
      "CWE-138",
      "CWE-184",
      "CWE-425",
      "CWE-434"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}