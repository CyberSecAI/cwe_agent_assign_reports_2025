{
  "cve_id": "CVE-2025-3563",
  "description": "A vulnerability was found in WuzhiCMS 4.1. It has been rated as critical. Affected by this issue is the function Set of the file /index.php?m=attachment&f=index&_su=wuzhicms&v=set&submit=1 of the component Setting Handler. The manipulation of the argument Setting leads to **code injection**. The attack may be launched remotely. The exploit has been disclosed to the public and may be used. The vendor was contacted early about this disclosure but did not respond in any way.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "code injection",
    "impact": "",
    "vector": "",
    "attacker": "",
    "product": "WuzhiCMS",
    "version": "4.1",
    "component": "Setting Handler"
  },
  "reference_content": "The content relates to a vulnerability in WuzhiCMS 4.1, specifically a command execution vulnerability in the `set_cache` function. This is a more detailed description than a placeholder CVE description.\n\nHere's the extracted information:\n\n**Root cause of vulnerability:**\n\nInsufficient input filtering and validation of the `setting` parameter in the `set_cache` function. The parameter's content is directly written to a file without proper sanitization.\n\n**Weaknesses/vulnerabilities present:**\n\n*   File upload vulnerability (leading to arbitrary code execution)\n*   Lack of input validation\n*   Unsafe direct file writing\n\n**Impact of exploitation:**\n\n*   Arbitrary code execution on the server.\n*   Ability to create or overwrite files on the server.\n\n**Attack vectors:**\n\n*   HTTP GET request to `/index.php?m=attachment&f=index&_su=wuzhicms&v=set&submit=1&setting=%3C?php%20echo%20phpinfo()?%3E` (requires execution twice).\n*   Requires administrator privileges.\n\n**Required attacker capabilities/position:**\n\n*   Administrator privileges.\n*   Ability to send HTTP requests to the target server.\n\n**Mitigation or fix:**\n\nThe content does not provide specific mitigation or fix details, only that the vulnerability exists due to insufficient filtering and validation.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-96 | Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') | 1.0 | Base | Allowed | Primary CWE: The **code injection** occurs because the input is not neutralized before being saved as code. |\n| CWE-434 | Unrestricted Upload of File with Dangerous Type | 0.8 | Base | Allowed | Secondary CWE: The vulnerability can be triggered due to the ability to upload a file with a dangerous type without restrictions. |\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 0.6 | Base | Allowed | Secondary CWE: The vulnerability can be triggered due to the improper neutralization of input during web page generation. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-96, which describes the **improper neutralization of directives in statically saved code**. This is directly supported by the description of the vulnerability where input is not neutralized before being written to a file.\n\nCWE-434 is a peer of other file upload related CWEs like CWE-430 and CWE-436, and describes the unrestricted upload of files with dangerous types. This is a closely related weakness because the **code injection** is made possible by uploading a file containing malicious code.\n\nCWE-79 represents Cross-site Scripting which may occur due to improper neutralization of web page generation.\n\n```mermaid\ngraph TD\n    cwe96[\"CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')\"]\n    cwe434[\"CWE-434: Unrestricted Upload of File with Dangerous Type\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    \n    cwe96 -->|CANFOLLOW| cwe434\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe96 primary\n    class cwe434,cwe79 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **improper neutralization of input**, which leads to the possibility of **code injection** via a file upload:\n1.  The `setting` parameter is not properly validated or sanitized.\n2.  This allows an attacker to inject code into a file.\n3.  The injected code is then executed by the server.\n\nCWE-96 is the root cause, as it describes the initial coding error. CWE-434 and CWE-79 represent the means by which the code is injected.\n\n## Summary of Analysis\nThe initial assessment was based on the provided evidence, particularly the description of the vulnerability as a **\"code injection\"** vulnerability in the setting handler, and the **lack of input validation**. The retriever results pointed towards CWE-96 (Improper Neutralization of Directives in Statically Saved Code) as a potential match, and this was confirmed by the CVE Reference Links Content Summary, which stated that the root cause was \"Insufficient input filtering and validation of the setting parameter\" and that the \"parameter's content is directly written to a file without proper sanitization\". This confirms that the code is being injected into a statically saved file due to **improper neutralization**, making CWE-96 the most appropriate primary CWE. The relationship analysis further reinforced this decision.\n\nCWE-434 is included as a secondary CWE because the vulnerability is triggered by uploading a file with dangerous content, indicating that the product allows the \"Unrestricted Upload of File with Dangerous Type\".\n\nCWE-79 is also included as a secondary CWE because the injected code may result in improper neutralization of input during web page generation.\n\nThe chosen CWEs are at the Base level of abstraction, which is the preferred level for mapping to the root causes of vulnerabilities. Other CWEs were considered, such as CWE-78 (Improper Neutralization of Special Elements used in an OS Command), but were deemed less relevant because the injection does not directly involve OS commands.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-96 | Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') | 1.0 | Base | Allowed | Primary CWE: The **code injection** occurs because the input is not neutralized before being saved as code. |\n| CWE-434 | Unrestricted Upload of File with Dangerous Type | 0.8 | Base | Allowed | Secondary CWE: The vulnerability can be triggered due to the ability to upload a file with a dangerous type without restrictions. |\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 0.6 | Base | Allowed | Secondary CWE: The vulnerability can be triggered due to the improper neutralization of input during web page generation. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-96, which describes the **improper neutralization of directives in statically saved code**. This is directly supported by the description of the vulnerability where input is not neutralized before being written to a file.\n\nCWE-434 is a peer of other file upload related CWEs like CWE-430 and CWE-436, and describes the unrestricted upload of files with dangerous types. This is a closely related weakness because the **code injection** is made possible by uploading a file containing malicious code.\n\nCWE-79 represents Cross-site Scripting which may occur due to improper neutralization of web page generation.\n\n```mermaid\ngraph TD\n    cwe96[\"CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')\"]\n    cwe434[\"CWE-434: Unrestricted Upload of File with Dangerous Type\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    \n    cwe96 -->|CANFOLLOW| cwe434\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe96 primary\n    class cwe434,cwe79 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **improper neutralization of input**, which leads to the possibility of **code injection** via a file upload:\n1.  The `setting` parameter is not properly validated or sanitized.\n2.  This allows an attacker to inject code into a file.\n3.  The injected code is then executed by the server.\n\nCWE-96 is the root cause, as it describes the initial coding error. CWE-434 and CWE-79 represent the means by which the code is injected.\n\n## Summary of Analysis\nThe initial assessment was based on the provided evidence, particularly the description of the vulnerability as a **\"code injection\"** vulnerability in the setting handler, and the **lack of input validation**. The retriever results pointed towards CWE-96 (Improper Neutralization of Directives in Statically Saved Code) as a potential match, and this was confirmed by the CVE Reference Links Content Summary, which stated that the root cause was \"Insufficient input filtering and validation of the setting parameter\" and that the \"parameter's content is directly written to a file without proper sanitization\". This confirms that the code is being injected into a statically saved file due to **improper neutralization**, making CWE-96 the most appropriate primary CWE. The relationship analysis further reinforced this decision.\n\nCWE-434 is included as a secondary CWE because the vulnerability is triggered by uploading a file with dangerous content, indicating that the product allows the \"Unrestricted Upload of File with Dangerous Type\".\n\nCWE-79 is also included as a secondary CWE because the injected code may result in improper neutralization of input during web page generation.\n\nThe chosen CWEs are at the Base level of abstraction, which is the preferred level for mapping to the root causes of vulnerabilities. Other CWEs were considered, such as CWE-78 (Improper Neutralization of Special Elements used in an OS Command), but were deemed less relevant because the injection does not directly involve OS commands.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-79:**\n- 79 (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')) - ROOT\n\n\n**Chain starting from CWE-78:**\n- 78 (Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 519.3426488839393
    },
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "sparse"
      },
      "similarity": 512.7769506639902
    },
    {
      "metadata": {
        "doc_id": "1336",
        "name": "Improper Neutralization of Special Elements Used in a Template Engine",
        "source": "sparse"
      },
      "similarity": 435.62236224126826
    },
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse"
      },
      "similarity": 424.2641813182022
    },
    {
      "metadata": {
        "doc_id": "306",
        "name": "Missing Authentication for Critical Function",
        "source": "sparse"
      },
      "similarity": 423.0205601744139
    },
    {
      "metadata": {
        "doc_id": "88",
        "name": "Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
        "source": "sparse"
      },
      "similarity": 422.32491575730177
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "source": "sparse"
      },
      "similarity": 416.91044931809097
    },
    {
      "metadata": {
        "doc_id": "117",
        "name": "Improper Output Neutralization for Logs",
        "source": "sparse"
      },
      "similarity": 415.12206551646847
    },
    {
      "metadata": {
        "doc_id": "96",
        "name": "Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')",
        "type": "Base",
        "original_content": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.",
        "keyphrase_source": "weakness:code injection",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.6468220739832293,
            "graph": 1.7075222223126816
          }
        }
      },
      "similarity": 0.6468220739832293
    },
    {
      "doc_id": "425",
      "text": "The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.",
      "score": 0.6525877500144978,
      "metadata": {
        "doc_id": "425",
        "name": "Direct Request ('Forced Browsing')",
        "type": "Base",
        "extended_description": "Web applications susceptible to direct request attacks often make the false assumption that such resources can only be reached through a given navigation path and so only apply authorization at certain points in the path.",
        "alternate_terms": [
          "forced browsing"
        ],
        "original_content": "The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.",
        "relationships": [
          {
            "source_id": "425",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "425",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "425",
            "target_id": "424",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "425",
            "target_id": "288",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "425",
            "target_id": "862",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "425",
            "target_id": "862",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "425",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "862",
            "target_id": "425",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "425",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "424",
            "target_id": "425",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "288",
            "target_id": "425",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "source": "graph",
        "sources": [
          "vector",
          "graph"
        ],
        "vector_score": 0.6525877500144978,
        "graph_score": 3.4200400000000006,
        "score_components": {
          "relationship_chain": 0.6,
          "explicit_mention": 1.0,
          "abstraction_path": 0.9,
          "sequence_path": 0.5760000000000002
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "89",
                  "456",
                  "CANFOLLOW"
                ],
                [
                  "456",
                  "98",
                  "CANPRECEDE"
                ],
                [
                  "98",
                  "425",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.6,
              "type": "relationship_chain",
              "source": "89"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "79",
                  "184",
                  "CANFOLLOW"
                ],
                [
                  "184",
                  "98",
                  "CANPRECEDE"
                ],
                [
                  "98",
                  "425",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.5760000000000002,
              "type": "vulnerability_sequence_forward",
              "source": "79"
            }
          }
        },
        "is_explicit": true,
        "abstraction_level": "base",
        "position": "after",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.6116152281928147,
            "graph": 2.313059100005799
          }
        }
      },
      "similarity": 2.313059100005799
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-79",
      "CWE-78",
      "CWE-436",
      "CWE-96",
      "CWE-430",
      "CWE-434"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}