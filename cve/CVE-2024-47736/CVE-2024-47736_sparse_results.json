{
  "query": "In the Linux kernel, the following vulnerability has been resolved erofs handle overlapped pclusters out of crafted images properly syzbot reported a task hang issue due to a deadlock case where it is waiting for the folio lock of a cached folio that will be used for cache I/Os. After looking into the crafted fuzzed image, I found its formed with several overlapped big pclusters as below Ext logical offset | length physical offset | length 0 0.. 16384 | 16384 151552.. 167936 | 16384 1 16384.. 32768 | 16384 155648.. 172032 | 16384 2 32768.. 49152 | 16384 537223168.. 537239552 | 16384 ... Here, extent 0/1 are physically overlapped although its entirely _impossible_ for normal filesystem images generated by mkfs. First, managed folios containing compressed data will be marked as up-to-date and then unlocked immediately (unlike in-place folios) when compressed I/Os are complete. If physical blocks are not submitted in the incremental order, there should be separate BIOs to avoid dependency issues. However, the current code mis-arranges z_erofs_fill_bio_vec() and BIO submission which causes unexpected BIO waits. Second, managed folios will be connected to their own pclusters for efficient inter-queries. However, this is somewhat hard to implement easily if overlapped big pclusters exist. Again, these only appear in fuzzed images so lets simply fall back to temporary short-lived pages",
  "count": 10,
  "results": [
    {
      "cwe_id": "833",
      "name": "Deadlock",
      "abstraction": "Base",
      "score": 776.4095337724485,
      "original_score": 776.4095337724485,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "abstraction": "Class",
      "score": 752.5924661529974,
      "original_score": 752.5924661529974,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "abstraction": "Base",
      "score": 749.885143686351,
      "original_score": 749.885143686351,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "abstraction": "Class",
      "score": 748.392927176151,
      "original_score": 748.392927176151,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "120",
      "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
      "abstraction": "Base",
      "score": 741.3601197480627,
      "original_score": 741.3601197480627,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "125",
      "name": "Out-of-bounds Read",
      "abstraction": "Base",
      "score": 737.7824338086107,
      "original_score": 737.7824338086107,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "863",
      "name": "Incorrect Authorization",
      "abstraction": "Class",
      "score": 736.1071480026231,
      "original_score": 736.1071480026231,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "347",
      "name": "Improper Verification of Cryptographic Signature",
      "abstraction": "Base",
      "score": 732.730262578018,
      "original_score": 732.730262578018,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "190",
      "name": "Integer Overflow or Wraparound",
      "abstraction": "Base",
      "score": 730.7097669035257,
      "original_score": 730.7097669035257,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "400",
      "name": "Uncontrolled Resource Consumption",
      "abstraction": "Class",
      "score": 719.4241032610734,
      "original_score": 719.4241032610734,
      "mapping_usage": "Discouraged"
    }
  ],
  "statistics": {
    "min": 719.4241032610734,
    "max": 776.4095337724485,
    "mean": 742.5393905089861,
    "median": 739.5712767783367,
    "count": 10
  }
}