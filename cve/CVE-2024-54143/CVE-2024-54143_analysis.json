{
  "cve_id": "CVE-2024-54143",
  "description": "openwrt/asu is an image on demand server for OpenWrt based distributions. The **request hashing mechanism truncates SHA-256 hashes** to only 12 characters. This significantly reduces entropy, making it feasible for an attacker to generate collisions. By exploiting this, a previously built malicious image can be served in place of a legitimate one, allowing the attacker to poison the artifact cache and deliver compromised images to unsuspecting users. This can be combined with other attacks, such as a **command injection** in Imagebuilder that allows malicious users to inject arbitrary commands into the build process, resulting in the production of malicious firmware images signed with the legitimate build key. This has been patched with 920c8a1.",
  "key_phrases": {
    "rootcause": "request hashing mechanism truncates SHA-256 hashes",
    "weakness": "command injection",
    "impact": "deliver compromised images to unsuspecting users",
    "vector": "",
    "attacker": "attacker",
    "product": "openwrt/asu",
    "version": "",
    "component": ""
  },
  "reference_content": "The provided content relates to CVE-2024-54143.\n\n**Root Cause of Vulnerability:**\nThe vulnerability stems from two main issues: command injection in the `openwrt/imagebuilder` and the use of a truncated SHA-256 hash in the build request.\n\n**Weaknesses/Vulnerabilities Present:**\n1.  **Command Injection:** User-supplied package names were incorporated into `make` commands without proper sanitization, allowing injection of arbitrary commands.\n2.  **Insufficient Hash Length:** The SHA-256 hash of the build request was truncated to 12 characters, significantly reducing entropy and making collision generation feasible.\n\n**Impact of Exploitation:**\nAn attacker can poison the build artifact cache by generating a collision, serving a malicious firmware image instead of a legitimate one. This can lead to compromised firmware being installed on devices using the ASU service, which affects the integrity of the delivered builds.\n\n**Attack Vectors:**\nAn attacker can manipulate the package list to inject commands and generate a hash collision.\n\n**Required Attacker Capabilities/Position:**\nThe attacker needs to be able to make build requests to the ASU service and manipulate the package list in a way that leads to a hash collision and command injection.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-78 | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | 0.9 | Base | Primary | Allowed |\n| CWE-328 | Use of Weak Hash | 0.9 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-78, which is a base-level CWE describing OS Command Injection. It is related to CWE-77, a class-level CWE that describes command injection more generally. CWE-78 is a child of CWE-77. CWE-328 is a base-level CWE related to the use of weak hashes. The vulnerability description clearly indicates both command injection and the use of a weak hash (truncated SHA-256).\n\n```mermaid\ngraph TD\n    cwe78[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"]\n    cwe77[\"CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')\"]\n    cwe328[\"CWE-328: Use of Weak Hash\"]\n\n    cwe78 -->|CHILDOF| cwe77\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe78 primary\n    class cwe328 secondary\n    class cwe77 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with two independent weaknesses:\n1.  **Command Injection (CWE-78):** User input is not properly sanitized when constructing OS commands.\n2.  **Use of Weak Hash (CWE-328):** Truncated SHA-256 hashes are used, reducing entropy and enabling collisions.\n\nThe attacker exploits these weaknesses to:\n1. Inject arbitrary commands into the build process.\n2. Generate hash collisions to serve malicious images instead of legitimate ones.\n3. Deliver compromised images to unsuspecting users.\n\n## Summary of Analysis\nThis analysis identifies two key weaknesses in the openwrt/asu image on demand server: command injection and the use of a weak hash. The **request hashing mechanism truncates SHA-256 hashes** to only 12 characters. This significantly reduces entropy, making it feasible for an attacker to generate collisions. By exploiting this, a previously built malicious image can be served in place of a legitimate one, allowing the attacker to poison the artifact cache and deliver compromised images to unsuspecting users. This can be combined with other attacks, such as a **command injection** in Imagebuilder that allows malicious users to inject arbitrary commands into the build process, resulting in the production of malicious firmware images signed with the legitimate build key.\n\nCWE-78 is chosen as the primary CWE because the command injection allows malicious users to inject arbitrary commands into the build process. CWE-328 is chosen as a secondary CWE because the truncation of the SHA-256 hashes leads to collisions, which allows the attacker to serve malicious images.\n\nThe retriever results support the selection of CWE-78 and CWE-328.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\n\n## CWE-328: Use of Weak Hash\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product uses an algorithm that produces a digest (output value) that does not meet security expectations for a hash function that allows an adversary to reasonably determine the original input (preimage attack), find another input that can produce the same hash (2nd preimage attack), or find multiple inputs that evaluate to the same hash (birthday attack).\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\n**Abstraction Level**: base\n**Similarity Score**: 4.33\n**Source**: graph\n\n**Description**:\nCWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Relationships**:\n- CANFOLLOW -> CWE-184\n- CANALSOBE -> CWE-88\n- CHILDOF -> CWE-77\n- CHILDOF -> CWE-77\n- CHILDOF -> CWE-74",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-78 | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | 0.9 | Base | Primary | Allowed |\n| CWE-328 | Use of Weak Hash | 0.9 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-78, which is a base-level CWE describing OS Command Injection. It is related to CWE-77, a class-level CWE that describes command injection more generally. CWE-78 is a child of CWE-77. CWE-328 is a base-level CWE related to the use of weak hashes. The vulnerability description clearly indicates both command injection and the use of a weak hash (truncated SHA-256).\n\n```mermaid\ngraph TD\n    cwe78[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"]\n    cwe77[\"CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')\"]\n    cwe328[\"CWE-328: Use of Weak Hash\"]\n\n    cwe78 -->|CHILDOF| cwe77\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe78 primary\n    class cwe328 secondary\n    class cwe77 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with two independent weaknesses:\n1.  **Command Injection (CWE-78):** User input is not properly sanitized when constructing OS commands.\n2.  **Use of Weak Hash (CWE-328):** Truncated SHA-256 hashes are used, reducing entropy and enabling collisions.\n\nThe attacker exploits these weaknesses to:\n1. Inject arbitrary commands into the build process.\n2. Generate hash collisions to serve malicious images instead of legitimate ones.\n3. Deliver compromised images to unsuspecting users.\n\n## Summary of Analysis\nThis analysis identifies two key weaknesses in the openwrt/asu image on demand server: command injection and the use of a weak hash. The **request hashing mechanism truncates SHA-256 hashes** to only 12 characters. This significantly reduces entropy, making it feasible for an attacker to generate collisions. By exploiting this, a previously built malicious image can be served in place of a legitimate one, allowing the attacker to poison the artifact cache and deliver compromised images to unsuspecting users. This can be combined with other attacks, such as a **command injection** in Imagebuilder that allows malicious users to inject arbitrary commands into the build process, resulting in the production of malicious firmware images signed with the legitimate build key.\n\nCWE-78 is chosen as the primary CWE because the command injection allows malicious users to inject arbitrary commands into the build process. CWE-328 is chosen as a secondary CWE because the truncation of the SHA-256 hashes leads to collisions, which allows the attacker to serve malicious images.\n\nThe retriever results support the selection of CWE-78 and CWE-328.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\n\n## CWE-328: Use of Weak Hash\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product uses an algorithm that produces a digest (output value) that does not meet security expectations for a hash function that allows an adversary to reasonably determine the original input (preimage attack), find another input that can produce the same hash (2nd preimage attack), or find multiple inputs that evaluate to the same hash (birthday attack).\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\n**Abstraction Level**: base\n**Similarity Score**: 4.33\n**Source**: graph\n\n**Description**:\nCWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Relationships**:\n- CANFOLLOW -> CWE-184\n- CANALSOBE -> CWE-88\n- CHILDOF -> CWE-77\n- CHILDOF -> CWE-77\n- CHILDOF -> CWE-74\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-88:**\n- 88 (Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')) - ROOT\n\n\n**Chain starting from CWE-77:**\n- 77 (Improper Neutralization of Special Elements used in a Command ('Command Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "77",
        "name": "Improper Neutralization of Special Elements used in a Command ('Command Injection')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Command injection",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "78",
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: OS Command Injection",
        "match_reason": "phrase_in_term_whole_phrase"
      },
      "similarity": 700.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "328",
        "name": "Use of Weak Hash",
        "source": "sparse"
      },
      "similarity": 687.1574907690647
    },
    {
      "metadata": {
        "doc_id": "916",
        "name": "Use of Password Hash With Insufficient Computational Effort",
        "source": "sparse"
      },
      "similarity": 672.621887898556
    },
    {
      "metadata": {
        "doc_id": "345",
        "name": "Insufficient Verification of Data Authenticity",
        "source": "sparse"
      },
      "similarity": 642.4295715256246
    },
    {
      "metadata": {
        "doc_id": "347",
        "name": "Improper Verification of Cryptographic Signature",
        "source": "sparse"
      },
      "similarity": 624.8192670523894
    },
    {
      "metadata": {
        "doc_id": "327",
        "name": "Use of a Broken or Risky Cryptographic Algorithm",
        "source": "sparse"
      },
      "similarity": 624.5844604495634
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 623.5979684547317
    },
    {
      "metadata": {
        "doc_id": "760",
        "name": "Use of a One-Way Hash with a Predictable Salt",
        "type": "Variant",
        "original_content": "The product uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the product uses a predictable salt as part of the input.",
        "keyphrase_source": "rootcause:request hashing mechanism truncates SHA-256 hashes",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.44184602232197057,
            "graph": 1.488575938762776
          }
        }
      },
      "similarity": 0.44184602232197057
    },
    {
      "doc_id": "184",
      "text": "CWE-184: Incomplete List of Disallowed Inputs",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "184",
        "name": "Incomplete List of Disallowed Inputs",
        "type": "base",
        "original_content": "CWE-184: Incomplete List of Disallowed Inputs",
        "relationships": [
          {
            "source_id": "184",
            "target_id": "692",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "434",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "78",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "79",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "1023",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "693",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "86",
            "target_id": "184",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "78",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "693",
            "target_id": "184",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "692",
            "target_id": "184",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "692",
            "target_id": "184",
            "label": "STARTSWITH",
            "properties": {
              "view_id": "709"
            }
          },
          {
            "source_id": "625",
            "target_id": "184",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "186",
            "target_id": "184",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1023",
            "target_id": "184",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "78",
                  "184",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "78"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "78",
                  "184",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "78"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "184",
                  "78",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "78"
            }
          }
        },
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-88",
      "CWE-77",
      "CWE-184",
      "CWE-74",
      "CWE-78",
      "CWE-328"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}