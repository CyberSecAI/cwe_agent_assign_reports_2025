{
  "cve_id": "CVE-2025-44872",
  "description": "Tenda AC9 V15.03.06.42_multi was found to contain a **command injection** vulnerability in the formsetUsbUnload function via the deviceName parameter. This vulnerability allows attackers to execute arbitrary commands via a crafted request.",
  "key_phrases": {
    "component": "formsetUsbUnload function",
    "rootcause": "",
    "vector": "crafted request",
    "weakness": "command injection",
    "product": "Tenda AC9",
    "impact": "execute arbitrary commands, execute arbitrary commands",
    "attacker": "attackers",
    "version": "V15.03.06.42_multi"
  },
  "reference_content": "UNRELATED",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-78 | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | 1.0 | Base | Primary | Allowed |\n| CWE-77 | Improper Neutralization of Special Elements used in a Command ('Command Injection') | 0.7 | Class | Secondary Candidate | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship influencing the CWE selection is the ChildOf relationship between CWE-78 and CWE-77. CWE-78 is a specific type of command injection that occurs at the operating system level and is a child of the more general CWE-77. Since the vulnerability description explicitly mentions command injection in the context of the OS, CWE-78 is a more precise and appropriate classification.\n\n```mermaid\ngraph TD\n    cwe78[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"]\n    cwe77[\"CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')\"]\n    \n    cwe78 -->|CHILDOF| cwe77\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe78 primary\n    class cwe77 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **improper neutralization** of special elements in the `deviceName` parameter within the `formsetUsbUnload` function. This leads directly to the ability to execute arbitrary commands on the operating system.\n  - Root Cause: **Improper Neutralization** (CWE-78)\n  - Impact: Arbitrary command execution\n\n## Summary of Analysis\nThe initial analysis identified command injection as the root cause, supported by the vulnerability description and key phrases. The retriever results also highlighted CWE-77 and CWE-78 as top candidates. The final decision to select CWE-78 over CWE-77 is based on the specific context of the vulnerability, which involves operating system commands. CWE-78 is a base level CWE, which is the preferred level of abstraction.\n\nThe vulnerability description explicitly mentions a \"**command injection** vulnerability in the formsetUsbUnload function via the deviceName parameter. This vulnerability allows attackers to execute arbitrary commands via a crafted request.\" This clearly indicates that the root cause is related to the **improper handling of input** that leads to command execution. The evidence and the retriever results support this conclusion.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: CWE-77 is often misused when OS command injection (CWE-78) was intended instead [REF-1287].\n\n### CWE Selection Details:\n\n*   **CWE-78 Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')**\n    *   **Technical Explanation:** The vulnerability involves the **improper neutralization** of special elements within the `deviceName` parameter, allowing attackers to inject and execute arbitrary OS commands. This aligns directly with the description of CWE-78.\n    *   **Security Implications:** Attackers can execute arbitrary commands on the system, potentially leading to complete system compromise.\n    *   **Relationship and Chain Patterns:** CWE-78 is a child of CWE-77, but it's more specific because it targets OS commands.\n    *   **Mapping Guidance Influence:** The MITRE mapping guidance allows for the use of CWE-78, as it is a Base level CWE.\n    *   **Primary/Secondary:** Primary CWE.\n    *   **Confidence:** 1.0\n*   **CWE-77 Improper Neutralization of Special Elements used in a Command ('Command Injection')**\n    *   **Technical Explanation:** CWE-77 is a more general form of command injection. While it applies to the vulnerability, CWE-78 is a more precise classification.\n    *   **Security Implications:** Similar to CWE-78, but less specific to OS commands.\n    *   **Relationship and Chain Patterns:** Parent of CWE-78.\n    *   **Mapping Guidance Influence:** The MITRE mapping guidance allows for the use of CWE-77 but suggests considering CWE-78 when OS command injection is involved.\n    *   **Primary/Secondary:** Secondary Candidate.\n    *   **Confidence:** 0.7\n\n### Other CWEs Considered but Not Used:\n*   CWE-89 (SQL Injection), CWE-93 (CRLF Injection), CWE-88 (Argument Injection), CWE-1336 (Improper Neutralization of Special Elements Used in a Template Engine), CWE-79 (Cross-site Scripting), CWE-434 (Unrestricted Upload of File with Dangerous Type): These CWEs were considered but deemed not applicable because the vulnerability specifically involves command injection, not SQL queries, CRLF sequences, template engines, web page generation, or file uploads.\n*   CWE-184 (Incomplete List of Disallowed Inputs): This CWE describes a scenario where not all dangerous inputs are blocked. While this might be a contributing factor, the core issue is the **improper neutralization** of the inputs that *are* processed, making CWE-78 more accurate.\n*   CWE-425 (Direct Request ('Forced Browsing')): This CWE is related to authorization issues, which are not explicitly mentioned in the vulnerability description.\n*   CWE-259 (Use of Hard-coded Password): This CWE is related to the use of weak credentials, which is not applicable to the vulnerability.\n*   CWE-94 (Improper Control of Generation of Code ('Code Injection')): While command injection can lead to code execution, the root cause is the **improper neutralization** of input, not the code generation itself. Thus, CWE-78 is a more accurate root cause.",
  "analysis_with_relationships": "# Summary\n\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-78 | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | 1.0 | Base | Primary | Allowed |\n| CWE-77 | Improper Neutralization of Special Elements used in a Command ('Command Injection') | 0.7 | Class | Secondary Candidate | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship influencing the CWE selection is the ChildOf relationship between CWE-78 and CWE-77. CWE-78 is a specific type of command injection that occurs at the operating system level and is a child of the more general CWE-77. Since the vulnerability description explicitly mentions command injection in the context of the OS, CWE-78 is a more precise and appropriate classification.\n\n```mermaid\ngraph TD\n    cwe78[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"]\n    cwe77[\"CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')\"]\n    \n    cwe78 -->|CHILDOF| cwe77\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe78 primary\n    class cwe77 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **improper neutralization** of special elements in the `deviceName` parameter within the `formsetUsbUnload` function. This leads directly to the ability to execute arbitrary commands on the operating system.\n  - Root Cause: **Improper Neutralization** (CWE-78)\n  - Impact: Arbitrary command execution\n\n## Summary of Analysis\nThe initial analysis identified command injection as the root cause, supported by the vulnerability description and key phrases. The retriever results also highlighted CWE-77 and CWE-78 as top candidates. The final decision to select CWE-78 over CWE-77 is based on the specific context of the vulnerability, which involves operating system commands. CWE-78 is a base level CWE, which is the preferred level of abstraction.\n\nThe vulnerability description explicitly mentions a \"**command injection** vulnerability in the formsetUsbUnload function via the deviceName parameter. This vulnerability allows attackers to execute arbitrary commands via a crafted request.\" This clearly indicates that the root cause is related to the **improper handling of input** that leads to command execution. The evidence and the retriever results support this conclusion.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: CWE-77 is often misused when OS command injection (CWE-78) was intended instead [REF-1287].\n\n### CWE Selection Details:\n\n*   **CWE-78 Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')**\n    *   **Technical Explanation:** The vulnerability involves the **improper neutralization** of special elements within the `deviceName` parameter, allowing attackers to inject and execute arbitrary OS commands. This aligns directly with the description of CWE-78.\n    *   **Security Implications:** Attackers can execute arbitrary commands on the system, potentially leading to complete system compromise.\n    *   **Relationship and Chain Patterns:** CWE-78 is a child of CWE-77, but it's more specific because it targets OS commands.\n    *   **Mapping Guidance Influence:** The MITRE mapping guidance allows for the use of CWE-78, as it is a Base level CWE.\n    *   **Primary/Secondary:** Primary CWE.\n    *   **Confidence:** 1.0\n*   **CWE-77 Improper Neutralization of Special Elements used in a Command ('Command Injection')**\n    *   **Technical Explanation:** CWE-77 is a more general form of command injection. While it applies to the vulnerability, CWE-78 is a more precise classification.\n    *   **Security Implications:** Similar to CWE-78, but less specific to OS commands.\n    *   **Relationship and Chain Patterns:** Parent of CWE-78.\n    *   **Mapping Guidance Influence:** The MITRE mapping guidance allows for the use of CWE-77 but suggests considering CWE-78 when OS command injection is involved.\n    *   **Primary/Secondary:** Secondary Candidate.\n    *   **Confidence:** 0.7\n\n### Other CWEs Considered but Not Used:\n*   CWE-89 (SQL Injection), CWE-93 (CRLF Injection), CWE-88 (Argument Injection), CWE-1336 (Improper Neutralization of Special Elements Used in a Template Engine), CWE-79 (Cross-site Scripting), CWE-434 (Unrestricted Upload of File with Dangerous Type): These CWEs were considered but deemed not applicable because the vulnerability specifically involves command injection, not SQL queries, CRLF sequences, template engines, web page generation, or file uploads.\n*   CWE-184 (Incomplete List of Disallowed Inputs): This CWE describes a scenario where not all dangerous inputs are blocked. While this might be a contributing factor, the core issue is the **improper neutralization** of the inputs that *are* processed, making CWE-78 more accurate.\n*   CWE-425 (Direct Request ('Forced Browsing')): This CWE is related to authorization issues, which are not explicitly mentioned in the vulnerability description.\n*   CWE-259 (Use of Hard-coded Password): This CWE is related to the use of weak credentials, which is not applicable to the vulnerability.\n*   CWE-94 (Improper Control of Generation of Code ('Code Injection')): While command injection can lead to code execution, the root cause is the **improper neutralization** of input, not the code generation itself. Thus, CWE-78 is a more accurate root cause.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-89:**\n- 89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')) - ROOT\n\n\n**Chain starting from CWE-94:**\n- 94 (Improper Control of Generation of Code ('Code Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "77",
        "name": "Improper Neutralization of Special Elements used in a Command ('Command Injection')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Command injection",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "78",
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: OS Command Injection",
        "match_reason": "phrase_in_term_whole_phrase"
      },
      "similarity": 700.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "121",
        "name": "Stack-based Buffer Overflow",
        "source": "sparse"
      },
      "similarity": 234.66835287475382
    },
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "sparse"
      },
      "similarity": 192.35809168235812
    },
    {
      "metadata": {
        "doc_id": "93",
        "name": "Improper Neutralization of CRLF Sequences ('CRLF Injection')",
        "source": "sparse"
      },
      "similarity": 185.22224686555572
    },
    {
      "metadata": {
        "doc_id": "88",
        "name": "Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
        "source": "sparse"
      },
      "similarity": 184.1044112865273
    },
    {
      "metadata": {
        "doc_id": "138",
        "name": "Improper Neutralization of Special Elements",
        "source": "sparse"
      },
      "similarity": 181.656599038753
    },
    {
      "metadata": {
        "doc_id": "95",
        "name": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
        "source": "sparse"
      },
      "similarity": 181.13309749261148
    },
    {
      "metadata": {
        "doc_id": "259",
        "name": "Use of Hard-coded Password",
        "type": "Variant",
        "original_content": "The product contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components.",
        "keyphrase_source": "weakness:command injection",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.563273093553115
          }
        }
      },
      "similarity": 0.563273093553115
    },
    {
      "doc_id": "184",
      "text": "CWE-184: Incomplete List of Disallowed Inputs",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "184",
        "name": "Incomplete List of Disallowed Inputs",
        "type": "base",
        "original_content": "CWE-184: Incomplete List of Disallowed Inputs",
        "relationships": [
          {
            "source_id": "184",
            "target_id": "692",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "434",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "78",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "79",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "1023",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "693",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "86",
            "target_id": "184",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "78",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "693",
            "target_id": "184",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "692",
            "target_id": "184",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "692",
            "target_id": "184",
            "label": "STARTSWITH",
            "properties": {
              "view_id": "709"
            }
          },
          {
            "source_id": "625",
            "target_id": "184",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "186",
            "target_id": "184",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1023",
            "target_id": "184",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "78",
                  "184",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "78"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "78",
                  "184",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "78"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "184",
                  "78",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "78"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-89",
      "CWE-94",
      "CWE-93",
      "CWE-88",
      "CWE-77",
      "CWE-79",
      "CWE-1336",
      "CWE-78",
      "CWE-184",
      "CWE-259",
      "CWE-425",
      "CWE-434"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}