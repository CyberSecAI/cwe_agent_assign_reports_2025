{
  "query": "In the Linux kernel, the following vulnerability has been resolved block fix queue freeze vs limits lock order in sysfs store methods queue_attr_store() always freezes a device queue before calling the attribute store operation. For attributes that control queue limits, the store operation will also lock the queue limits with a call to queue_limits_start_update(). However, some drivers (e.g. SCSI sd) may need to issue commands to a device to obtain limit values from the hardware with the queue limits locked. This creates a potential ABBA deadlock situation if a user attempts to modify a limit (thus freezing the device queue) while the device driver starts a revalidation of the device queue limits. Avoid such deadlock by not freezing the queue before calling the ->store_limit() method in struct queue_sysfs_entry and instead use the queue_limits_commit_update_frozen helper to freeze the queue after taking the limits lock. This also removes taking the sysfs lock for the store_limit method as it doesnt protect anything here, but creates even more nesting. Hopefully it will go away from the actual sysfs methods entirely soon. (commit log adapted from a similar patch from Damien Le Moal)",
  "count": 11,
  "results": [
    {
      "cwe_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "abstraction": "Base",
      "score": 887.5219322494709,
      "original_score": 887.5219322494709,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "abstraction": "Class",
      "score": 883.715813778434,
      "original_score": 883.715813778434,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "606",
      "name": "Unchecked Input for Loop Condition",
      "abstraction": "Base",
      "score": 850.9289508144284,
      "original_score": 850.9289508144284,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "789",
      "name": "Memory Allocation with Excessive Size Value",
      "abstraction": "Variant",
      "score": 846.9982943236168,
      "original_score": 846.9982943236168,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "833",
      "name": "Deadlock",
      "abstraction": "Base",
      "score": 835.8672151564176,
      "original_score": 835.8672151564176,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "319",
      "name": "Cleartext Transmission of Sensitive Information",
      "abstraction": "Base",
      "score": 822.5417985096565,
      "original_score": 822.5417985096565,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "abstraction": "Class",
      "score": 821.0745407951838,
      "original_score": 821.0745407951838,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "774",
      "name": "Allocation of File Descriptors or Handles Without Limits or Throttling",
      "abstraction": "Variant",
      "score": 809.1890763085332,
      "original_score": 809.1890763085332,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1285",
      "name": "Improper Validation of Specified Index, Position, or Offset in Input",
      "abstraction": "Base",
      "score": 803.1138904946868,
      "original_score": 803.1138904946868,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "266",
      "name": "Incorrect Privilege Assignment",
      "abstraction": "Base",
      "score": 793.6633180283116,
      "original_score": 793.6633180283116,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "835",
      "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
      "abstraction": "Base",
      "score": 739.0092563979064,
      "original_score": 739.0092563979064,
      "mapping_usage": "Allowed"
    }
  ],
  "statistics": {
    "min": 739.0092563979064,
    "max": 887.5219322494709,
    "mean": 826.6930988051498,
    "median": 822.5417985096565,
    "count": 11
  }
}