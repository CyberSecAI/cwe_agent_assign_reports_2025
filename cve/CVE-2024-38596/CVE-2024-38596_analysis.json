{
  "cve_id": "CVE-2024-38596",
  "description": "In the Linux kernel, the following vulnerability has been resolvedaf_unix Fix data races in unix_release_sock/unix_stream_sendmsgA **data-race condition** has been identified in af_unix. In one data path,the write function unix_release_sock() atomically writes tosk->sk_shutdown using WRITE_ONCE. However, on the reader side,unix_stream_sendmsg() does not read it atomically. Consequently, thisissue is causing the following KCSAN splat to occur BUG KCSAN data-race in unix_release_sock / unix_stream_sendmsg write (marked) to 0xffff88867256ddbb of 1 bytes by task 7270 on cpu 28 unix_release_sock (net/unix/af_unix.c640) unix_release (net/unix/af_unix.c1050) sock_close (net/socket.c659 net/socket.c1421) __fput (fs/file_table.c422) __fput_sync (fs/file_table.c508) __se_sys_close (fs/open.c1559 fs/open.c1541) __x64_sys_close (fs/open.c1541) x64_sys_call (arch/x86/entry/syscall_64.c33) do_syscall_64 (arch/x86/entry/common.c?) entry_SYSCALL_64_after_hwframe (arch/x86/entry/entry_64.S130) read to 0xffff88867256ddbb of 1 bytes by task 989 on cpu 14 unix_stream_sendmsg (net/unix/af_unix.c2273) __sock_sendmsg (net/socket.c730 net/socket.c745) ____sys_sendmsg (net/socket.c2584) __sys_sendmmsg (net/socket.c2638 net/socket.c2724) __x64_sys_sendmmsg (net/socket.c2753 net/socket.c2750 net/socket.c2750) x64_sys_call (arch/x86/entry/syscall_64.c33) do_syscall_64 (arch/x86/entry/common.c?) entry_SYSCALL_64_after_hwframe (arch/x86/entry/entry_64.S130) value changed 0x01 -> 0x03The line numbers are related to commit dd5a440a31fa (Linux 6.9-rc7).Commit e1d09c2c2f57 (af_unix Fix data races around sk->sk_shutdown.)addressed a comparable issue in the past regarding sk->sk_shutdown.However, it overlooked resolving this particular data path.This patch only offending unix_stream_sendmsg() function, since theother reads seem to be protected by unix_state_lock() as discussed in",
  "key_phrases": {
    "rootcause": "data-race condition",
    "weakness": "",
    "impact": "KCSAN splat",
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": "af_unix"
  },
  "reference_content": "### CVE-2024-38596\n\nBased on the provided content, the vulnerability described is a **data race** in the Linux kernel's AF_UNIX socket implementation.\n\n**Root Cause:**\n- The `unix_release_sock()` function uses `WRITE_ONCE` to atomically set the `sk->sk_shutdown` flag.\n- The `unix_stream_sendmsg()` function reads the `sk->sk_shutdown` flag without atomic access.\n\n**Weaknesses/Vulnerabilities:**\n- **Data Race:** Concurrent access to the `sk->sk_shutdown` flag by `unix_release_sock()` (write) and `unix_stream_sendmsg()` (read) without proper synchronization.\n\n**Impact of Exploitation:**\n- **Kernel Crash:** The data race leads to a KCSAN splat, which indicates a potential kernel crash. This can result in a denial-of-service condition.\n- **Unpredictable Behavior:** Data races can lead to unpredictable behavior and potential memory corruption.\n\n**Attack Vectors:**\n- The vulnerability is triggered by concurrent operations on AF_UNIX sockets.\n- A process closing a socket while another process is sending a message on the same socket.\n\n**Required Attacker Capabilities/Position:**\n- The attacker needs to have the ability to create and close AF_UNIX sockets, as well as send messages on them, which is generally available to local users.\n\n**Technical Details:**\n- The `sk->sk_shutdown` flag indicates whether a socket has been shut down.\n- The `WRITE_ONCE` macro ensures that the write operation is atomic.\n- The fix involves using `READ_ONCE` in `unix_stream_sendmsg()` to ensure atomic read of the `sk->sk_shutdown` flag.\n\n**Additional Notes:**\n- This issue was previously addressed in commit e1d09c2c2f57 (\"af_unix: Fix data races around sk->sk_shutdown.\"), but that fix overlooked this specific path.\n- The vulnerability affects multiple kernel versions.\n- The provided patches use `READ_ONCE` to fix the data race.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 1.0 | Class | Primary | Allowed-with-Review |\n| CWE-366 | Race Condition within a Thread | 0.8 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship is between **CWE-362** (Class) and **CWE-366** (Base) where CWE-366 is a child of CWE-362. Since the vulnerability involves a **data race** within a thread, **CWE-366** could be a more specific mapping. However, given that the provided information doesn't explicitly delve into the specifics of thread management, I'm choosing **CWE-362** as the primary because the description focuses on the general **data race condition**. **CWE-366** is added as a secondary CWE.\n\n```mermaid\ngraph TD\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    cwe366[\"CWE-366: Race Condition within a Thread\"]\n\n    cwe366 -->|CHILDOF| cwe362\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe362 primary\n    class cwe366 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a **data race condition** due to **improper synchronization** in concurrent execution, leading to a KCSAN splat.\n\n1.  **Root Cause:** **CWE-362** Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') - The `unix_release_sock()` and `unix_stream_sendmsg()` functions concurrently access the `sk->sk_shutdown` flag without proper synchronization.\n2.  **Impact:** KCSAN splat (Kernel crash) due to the **data race**.\n\n## Summary of Analysis\nThe vulnerability description clearly states that a **data-race condition** exists in af_unix. The `unix_release_sock()` function writes to `sk->sk_shutdown` using `WRITE_ONCE`, while `unix_stream_sendmsg()` reads it without atomic access. This directly matches the description of **CWE-362** Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition').\n\nThe \"CVE Reference Links Content Summary\" section confirms the **data race** as the root cause and highlights the concurrent access to `sk->sk_shutdown` without proper synchronization.\n\nThe retriever results list **CWE-362** as the top candidate with a high score. The usage is \"Allowed-with-Review\" because it is a Class, suggesting that a more specific Base-level CWE might be appropriate. While **CWE-366** Race Condition within a Thread is a Base-level CWE and a child of **CWE-362**, the description is focused on the higher level issue of concurrent access and lack of atomicity.\n\n**CWE-367** Time-of-check Time-of-use (TOCTOU) Race Condition was considered but rejected because the vulnerability isn't related to checking the state of a resource before using it. Instead, it is about concurrent read and write operations without synchronization.\n\n**CWE-476** NULL Pointer Dereference was considered and rejected because the vulnerability description makes no mention of null pointers.\n\n**CWE-911** Improper Update of Reference Count was considered and rejected because reference counting is not part of the vulnerability description.\n\nI'm assigning **CWE-362** as the primary CWE due to the clear evidence of a **data race condition** caused by **improper synchronization** during concurrent execution. **CWE-366** is added as a secondary CWE, since the race condition occurs within a thread.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.80\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-366: Race Condition within a Thread\n**Abstraction Level**: Base\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nIf two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 1.0 | Class | Primary | Allowed-with-Review |\n| CWE-366 | Race Condition within a Thread | 0.8 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship is between **CWE-362** (Class) and **CWE-366** (Base) where CWE-366 is a child of CWE-362. Since the vulnerability involves a **data race** within a thread, **CWE-366** could be a more specific mapping. However, given that the provided information doesn't explicitly delve into the specifics of thread management, I'm choosing **CWE-362** as the primary because the description focuses on the general **data race condition**. **CWE-366** is added as a secondary CWE.\n\n```mermaid\ngraph TD\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    cwe366[\"CWE-366: Race Condition within a Thread\"]\n\n    cwe366 -->|CHILDOF| cwe362\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe362 primary\n    class cwe366 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a **data race condition** due to **improper synchronization** in concurrent execution, leading to a KCSAN splat.\n\n1.  **Root Cause:** **CWE-362** Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') - The `unix_release_sock()` and `unix_stream_sendmsg()` functions concurrently access the `sk->sk_shutdown` flag without proper synchronization.\n2.  **Impact:** KCSAN splat (Kernel crash) due to the **data race**.\n\n## Summary of Analysis\nThe vulnerability description clearly states that a **data-race condition** exists in af_unix. The `unix_release_sock()` function writes to `sk->sk_shutdown` using `WRITE_ONCE`, while `unix_stream_sendmsg()` reads it without atomic access. This directly matches the description of **CWE-362** Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition').\n\nThe \"CVE Reference Links Content Summary\" section confirms the **data race** as the root cause and highlights the concurrent access to `sk->sk_shutdown` without proper synchronization.\n\nThe retriever results list **CWE-362** as the top candidate with a high score. The usage is \"Allowed-with-Review\" because it is a Class, suggesting that a more specific Base-level CWE might be appropriate. While **CWE-366** Race Condition within a Thread is a Base-level CWE and a child of **CWE-362**, the description is focused on the higher level issue of concurrent access and lack of atomicity.\n\n**CWE-367** Time-of-check Time-of-use (TOCTOU) Race Condition was considered but rejected because the vulnerability isn't related to checking the state of a resource before using it. Instead, it is about concurrent read and write operations without synchronization.\n\n**CWE-476** NULL Pointer Dereference was considered and rejected because the vulnerability description makes no mention of null pointers.\n\n**CWE-911** Improper Update of Reference Count was considered and rejected because reference counting is not part of the vulnerability description.\n\nI'm assigning **CWE-362** as the primary CWE due to the clear evidence of a **data race condition** caused by **improper synchronization** during concurrent execution. **CWE-366** is added as a secondary CWE, since the race condition occurs within a thread.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.80\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-366: Race Condition within a Thread\n**Abstraction Level**: Base\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nIf two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-911:**\n- 911 (Improper Update of Reference Count) - ROOT\n\n\n**Chain starting from CWE-476:**\n- 476 (NULL Pointer Dereference) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Race Condition",
        "match_reason": "term_in_phrase_whole_phrase"
      },
      "similarity": 800.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "911",
        "name": "Improper Update of Reference Count",
        "source": "sparse"
      },
      "similarity": 764.5750080702921
    },
    {
      "metadata": {
        "doc_id": "476",
        "name": "NULL Pointer Dereference",
        "source": "sparse"
      },
      "similarity": 763.9745289356897
    },
    {
      "metadata": {
        "doc_id": "674",
        "name": "Uncontrolled Recursion",
        "source": "sparse"
      },
      "similarity": 749.9080970161435
    },
    {
      "metadata": {
        "doc_id": "667",
        "name": "Improper Locking",
        "source": "sparse"
      },
      "similarity": 741.3449159228949
    },
    {
      "metadata": {
        "doc_id": "367",
        "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
        "source": "sparse"
      },
      "similarity": 729.9268126595391
    },
    {
      "metadata": {
        "doc_id": "770",
        "name": "Allocation of Resources Without Limits or Throttling",
        "source": "sparse"
      },
      "similarity": 712.4715397169217
    },
    {
      "metadata": {
        "doc_id": "774",
        "name": "Allocation of File Descriptors or Handles Without Limits or Throttling",
        "source": "sparse"
      },
      "similarity": 711.7235686061546
    },
    {
      "metadata": {
        "doc_id": "366",
        "name": "Race Condition within a Thread",
        "type": "Base",
        "original_content": "If two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.",
        "keyphrase_source": "rootcause:data-race condition",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5967362937823832,
            "graph": 1.7308271041247756
          }
        }
      },
      "similarity": 0.5967362937823832
    },
    {
      "doc_id": "908",
      "text": "The product uses or accesses a resource that has not been initialized.",
      "score": 0.6114479497059216,
      "metadata": {
        "doc_id": "908",
        "name": "Use of Uninitialized Resource",
        "type": "Base",
        "extended_description": "When a resource has not been properly initialized, the product may behave unexpectedly. This may lead to a crash or invalid memory access, but the consequences vary depending on the type of resource and how it is used within the product.",
        "alternate_terms": [],
        "original_content": "The product uses or accesses a resource that has not been initialized.",
        "relationships": [
          {
            "source_id": "908",
            "target_id": "909",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "908",
            "target_id": "457",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "908",
            "target_id": "665",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "908",
            "target_id": "665",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "909",
            "target_id": "908",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "665",
            "target_id": "908",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "457",
            "target_id": "908",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "source": "graph",
        "sources": [
          "vector",
          "graph"
        ],
        "vector_score": 0.6114479497059216,
        "graph_score": 4.329000000000001,
        "score_components": {
          "relationship_chain": 1.0,
          "explicit_mention": 1.0,
          "abstraction_path": 0.9,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "909",
                  "908",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "909"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "909",
                  "908",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_forward",
              "source": "909"
            }
          }
        },
        "is_explicit": true,
        "abstraction_level": "base",
        "position": "after",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5804222385005524,
            "graph": 2.841979179882369
          }
        }
      },
      "similarity": 2.841979179882369
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-911",
      "CWE-476",
      "CWE-362",
      "CWE-366",
      "CWE-367"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}