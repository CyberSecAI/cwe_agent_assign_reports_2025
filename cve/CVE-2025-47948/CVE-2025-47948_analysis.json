{
  "cve_id": "CVE-2025-47948",
  "description": "Cocotais Bot is a QQ official robot framework based on qq-bot-sdk. Starting in version 1.5.0-test2-hotfix and prior to version 1.6.2, command echoing feature in the framework allows users to indirectly trigger privileged behavior by injecting special platform tags. Specifically, an unauthorized user can use the `/echo ` command to cause the bot to send a message that mentions all members in the chat, bypassing any permission controls. This can lead to spam, disruption, or abuse of notification systems. Version 1.6.2 contains a patch for the issue.",
  "key_phrases": {
    "component": "",
    "rootcause": "command echoing feature in framework",
    "vector": "/echo command",
    "weakness": "",
    "product": "qq-bot-sdk",
    "impact": "['spam', 'disruption', 'abuse of notification systems']",
    "attacker": "unauthorized user",
    "version": "1.5.0-test2-hotfix to 1.6.1"
  },
  "reference_content": "## Analysis of CVE-2025-47948 based on provided content\n\nThe provided content is **RELEVANT** to CVE-2025-47948. It details a command injection vulnerability in the `cocotais-bot` npm package. Here's a breakdown of the information:\n\n**Root cause of vulnerability:**\n\nThe vulnerability stems from a lack of sanitization or filtering of platform-specific control elements within the `/echo` command. Specifically, the bot doesn't prevent users from injecting tags like `<qqbot-at-everyone />`.\n\n**Weaknesses/vulnerabilities present:**\n\n*   **Command Injection:**  The `/echo` command allows indirect triggering of privileged behavior through injected platform tags.\n*   **Insufficient Input Validation:** The bot fails to sanitize user input before echoing it, leading to the execution of unintended commands.\n\n**Impact of exploitation:**\n\nAn unauthorized user can exploit the vulnerability to send a message that mentions all members in the chat (`@\u5168\u4f53\u6210\u5458`), bypassing permission controls. This can lead to:\n\n*   Spam\n*   Disruption\n*   Abuse of notification systems\n\n**Attack vectors:**\n\n*   **Network:** The vulnerability is exploitable over the network.\n*   A user sends the following message: `/echo <qqbot-at-everyone />`\n\n**Required attacker capabilities/position:**\n\n*   The attacker needs to be a regular user in the chat where the bot is present.\n*   No special permissions are required to exploit the vulnerability.\n\n**Mitigation or fix:**\n\nThe vulnerability was patched in version 1.6.2. The commit `d1cf01a` removes the `/echo` builtin command. The code diff shows the removal of the relevant section in `src/builtins.ts`.\n\n**CVSS Score:**\n\n*   **CVSS v3 overall score:** 7.2 / 10\n*   **CVSS v3 base metrics:**\n    *   Attack Vector: Network\n    *   Attack Complexity: Low\n    *   Privileges Required: None\n    *   User Interaction: None\n    *   Scope: Changed\n    *   Confidentiality: None\n    *   Integrity: Low\n    *   Availability: Low\n\n**Additional Details (more than official CVE description):**\n\n*   The vulnerability affects versions `1.5.0-test2-hotfix` and `<= 1.6.1`.\n*   A Proof of Concept (PoC) is provided, detailing the steps to reproduce the vulnerability.\n*   The vulnerability is attributed to the reporter Destroyed-Dream.\n*   The CWE associated with the vulnerability is CWE-74 (Injection).",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| **CWE-863** | **Incorrect Authorization** | 0.9 | Class | Allowed-with-Review | Primary CWE: The application performs an authorization check, but it is flawed, allowing unauthorized access. |\n| CWE-74 | Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') | 0.6 | Class | Discouraged | Secondary: The bot constructs a message using externally-influenced input, but it does not neutralize special elements. |\n| CWE-267 | Privilege Defined With Unsafe Actions | 0.5 | Base | Allowed | Secondary: The bot's privileges allow actions that should not be triggered by unauthorized users. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.7\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary relationship influencing the selection is that CWE-863 [CWE-863: Incorrect Authorization] is a class-level CWE that can be a parent to more specific authorization issues. While the vulnerability involves a specific type of injection (CWE-74 [CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')]), the core issue is that the authorization check is not correctly implemented, allowing unauthorized users to trigger privileged behavior. CWE-267 [CWE-267: Privilege Defined With Unsafe Actions] is related as the privileges granted to the bot are too broad, allowing for misuse via command injection. The abstraction levels guided the selection, favoring the class-level CWE-863 [CWE-863: Incorrect Authorization] because the specific implementation flaw isn't detailed enough to pinpoint a more specific Base-level CWE.\n\n```mermaid\ngraph TD\n    cwe863[\"CWE-863: Incorrect Authorization\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n    cwe267[\"CWE-267: Privilege Defined With Unsafe Actions\"]\n\n    cwe74 -->|CANPRECEDE| cwe863\n    cwe267 -->|RELATED| cwe863\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe863 primary\n    class cwe74,cwe267 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **incorrect authorization** (CWE-863 [CWE-863: Incorrect Authorization]) within the bot's command processing. This leads to the ability to inject special elements (CWE-74 [CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')]) into the command, triggering unintended privileged actions. The bot possessing **unsafe privileges** (CWE-267 [CWE-267: Privilege Defined With Unsafe Actions]) completes the chain, enabling the unauthorized triggering of notifications.\n  - The Primary CWE is CWE-863 [CWE-863: Incorrect Authorization]\n\n## Summary of Analysis\nThe initial assessment focused on the command injection aspect, considering CWE-78 [CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')] or CWE-74 [CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')]. However, after critical review, it became clear that the root cause is the **incorrect authorization** (CWE-863 [CWE-863: Incorrect Authorization]). The bot allows the `/echo` command to mention all members in the chat without proper validation, bypassing permission controls.\n\nThe evidence from the vulnerability description states: \"command echoing feature in the framework allows users to indirectly trigger privileged behavior by injecting special platform tags...an unauthorized user can use the `/echo` command to cause the bot to send a message that mentions all members in the chat, bypassing any permission controls.\" This clearly points to an authorization issue.\n\nThe relationship graph highlights the connection between injection and authorization, where the **improper neutralization** (CWE-74 [CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')]) can lead to the **incorrect authorization** (CWE-863 [CWE-863: Incorrect Authorization]).\n\nThe selected CWEs are at the optimal level of specificity. CWE-863 [CWE-863: Incorrect Authorization] captures the core flaw, while CWE-74 [CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')] and CWE-267 [CWE-267: Privilege Defined With Unsafe Actions] provide additional context on how the vulnerability is exploited.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-863: Incorrect Authorization\n**Abstraction Level**: Class\n**Similarity Score**: 1918.76\n**Source**: sparse\n\n**Description**:\nThe product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| **CWE-863** | **Incorrect Authorization** | 0.9 | Class | Allowed-with-Review | Primary CWE: The application performs an authorization check, but it is flawed, allowing unauthorized access. |\n| CWE-74 | Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') | 0.6 | Class | Discouraged | Secondary: The bot constructs a message using externally-influenced input, but it does not neutralize special elements. |\n| CWE-267 | Privilege Defined With Unsafe Actions | 0.5 | Base | Allowed | Secondary: The bot's privileges allow actions that should not be triggered by unauthorized users. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.7\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary relationship influencing the selection is that CWE-863 [CWE-863: Incorrect Authorization] is a class-level CWE that can be a parent to more specific authorization issues. While the vulnerability involves a specific type of injection (CWE-74 [CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')]), the core issue is that the authorization check is not correctly implemented, allowing unauthorized users to trigger privileged behavior. CWE-267 [CWE-267: Privilege Defined With Unsafe Actions] is related as the privileges granted to the bot are too broad, allowing for misuse via command injection. The abstraction levels guided the selection, favoring the class-level CWE-863 [CWE-863: Incorrect Authorization] because the specific implementation flaw isn't detailed enough to pinpoint a more specific Base-level CWE.\n\n```mermaid\ngraph TD\n    cwe863[\"CWE-863: Incorrect Authorization\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n    cwe267[\"CWE-267: Privilege Defined With Unsafe Actions\"]\n\n    cwe74 -->|CANPRECEDE| cwe863\n    cwe267 -->|RELATED| cwe863\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe863 primary\n    class cwe74,cwe267 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **incorrect authorization** (CWE-863 [CWE-863: Incorrect Authorization]) within the bot's command processing. This leads to the ability to inject special elements (CWE-74 [CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')]) into the command, triggering unintended privileged actions. The bot possessing **unsafe privileges** (CWE-267 [CWE-267: Privilege Defined With Unsafe Actions]) completes the chain, enabling the unauthorized triggering of notifications.\n  - The Primary CWE is CWE-863 [CWE-863: Incorrect Authorization]\n\n## Summary of Analysis\nThe initial assessment focused on the command injection aspect, considering CWE-78 [CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')] or CWE-74 [CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')]. However, after critical review, it became clear that the root cause is the **incorrect authorization** (CWE-863 [CWE-863: Incorrect Authorization]). The bot allows the `/echo` command to mention all members in the chat without proper validation, bypassing permission controls.\n\nThe evidence from the vulnerability description states: \"command echoing feature in the framework allows users to indirectly trigger privileged behavior by injecting special platform tags...an unauthorized user can use the `/echo` command to cause the bot to send a message that mentions all members in the chat, bypassing any permission controls.\" This clearly points to an authorization issue.\n\nThe relationship graph highlights the connection between injection and authorization, where the **improper neutralization** (CWE-74 [CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')]) can lead to the **incorrect authorization** (CWE-863 [CWE-863: Incorrect Authorization]).\n\nThe selected CWEs are at the optimal level of specificity. CWE-863 [CWE-863: Incorrect Authorization] captures the core flaw, while CWE-74 [CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')] and CWE-267 [CWE-267: Privilege Defined With Unsafe Actions] provide additional context on how the vulnerability is exploited.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-863: Incorrect Authorization\n**Abstraction Level**: Class\n**Similarity Score**: 1918.76\n**Source**: sparse\n\n**Description**:\nThe product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-863:**\n- 863 (Incorrect Authorization) - ROOT\n\n\n**Chain starting from CWE-74:**\n- 74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 512.3048282300349
    },
    {
      "metadata": {
        "doc_id": "267",
        "name": "Privilege Defined With Unsafe Actions",
        "source": "sparse"
      },
      "similarity": 506.5395647252563
    },
    {
      "metadata": {
        "doc_id": "1336",
        "name": "Improper Neutralization of Special Elements Used in a Template Engine",
        "source": "sparse"
      },
      "similarity": 500.43691713447595
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse"
      },
      "similarity": 499.0513266896356
    },
    {
      "metadata": {
        "doc_id": "184",
        "name": "Incomplete List of Disallowed Inputs",
        "source": "sparse"
      },
      "similarity": 488.92378238815985
    },
    {
      "metadata": {
        "doc_id": "285",
        "name": "Improper Authorization",
        "source": "sparse"
      },
      "similarity": 487.6472347748941
    },
    {
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "source": "sparse"
      },
      "similarity": 477.04781329898515
    },
    {
      "metadata": {
        "doc_id": "138",
        "name": "Improper Neutralization of Special Elements",
        "source": "sparse"
      },
      "similarity": 475.15262883512946
    },
    {
      "metadata": {
        "doc_id": "790",
        "name": "Improper Filtering of Special Elements",
        "type": "Class",
        "original_content": "The product receives data from an upstream component, but does not filter or incorrectly filters special elements before sending it to a downstream component.",
        "keyphrase_source": "rootcause:command echoing feature in framework",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
          "comments": "Examine children of this entry to see if there is a better fit",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.403716676399861
          }
        }
      },
      "similarity": 0.403716676399861
    },
    {
      "doc_id": "78",
      "text": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
      "score": 0.43448053948923687,
      "metadata": {
        "doc_id": "78",
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "type": "Base",
        "extended_description": "\n\nThis weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications. Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage.\n\n\nThere are at least two subtypes of OS command injection:\n\n\n  - The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system(\"nslookup [HOSTNAME]\") to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing.\n\n  - The application accepts an input that it uses to fully select which program to run, as well as which commands to use. The application simply redirects this entire command to the operating system. For example, the program might use \"exec([COMMAND])\" to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line.\n\nFrom a weakness standpoint, these variants represent distinct programmer errors. In the first variant, the programmer clearly intends that input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input.",
        "alternate_terms": [
          "Shell injection",
          "Shell metacharacters",
          "OS Command Injection"
        ],
        "original_content": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
        "relationships": [
          {
            "source_id": "78",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "78",
            "target_id": "88",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "78",
            "target_id": "77",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1340"
            }
          },
          {
            "source_id": "78",
            "target_id": "77",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1305"
            }
          },
          {
            "source_id": "78",
            "target_id": "74",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "78",
            "target_id": "77",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "77",
            "target_id": "78",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "74",
            "target_id": "78",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "184",
            "target_id": "78",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "source": "graph",
        "sources": [
          "vector",
          "graph"
        ],
        "vector_score": 0.43448053948923687,
        "graph_score": 5.031000000000001,
        "score_components": {
          "relationship_chain": 1.0,
          "explicit_mention": 1.0,
          "abstraction_path": 0.9,
          "sequence_path": 1.0,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "184",
                  "78",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "184"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "184",
                  "78",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_forward",
              "source": "184"
            },
            "peer_relationship": {
              "path": [
                [
                  "78",
                  "88",
                  "CANALSOBE"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "88"
            }
          }
        },
        "is_explicit": true,
        "abstraction_level": "base",
        "position": "after",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.38302322965453345,
            "graph": 3.192392215795695
          }
        }
      },
      "similarity": 3.192392215795695
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-863",
      "CWE-74",
      "CWE-78",
      "CWE-267"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}