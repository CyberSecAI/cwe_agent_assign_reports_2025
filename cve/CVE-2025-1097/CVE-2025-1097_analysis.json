{
  "cve_id": "CVE-2025-1097",
  "description": "A security issue was discovered in ingress-nginx https//github.com/kubernetes/ingress-nginx where the `auth-tls-match-cn` Ingress annotation can be used to inject configuration into nginx. This can lead to **arbitrary code execution** in the context of the ingress-nginx controller, and disclosure of Secrets accessible to the controller. (Note that in the default installation, the controller can access all Secrets cluster-wide.)",
  "key_phrases": {
    "component": "",
    "rootcause": "improper configuration",
    "vector": "auth-tls-match-cn Ingress annotation",
    "weakness": "arbitrary code execution",
    "product": "ingress-nginx",
    "impact": "arbitrary code execution, disclosure of Secrets",
    "attacker": "",
    "version": ""
  },
  "reference_content": "```\n- **Root cause of vulnerability:** The `auth-tls-match-cn` Ingress annotation in ingress-nginx is not properly sanitized, allowing for configuration injection.\n- **Weaknesses/vulnerabilities present:** Configuration injection, arbitrary code execution, and disclosure of Secrets.\n- **Impact of exploitation:** Arbitrary code execution in the context of the ingress-nginx controller and disclosure of Secrets accessible to the controller.\n- **Attack vectors:** Exploitation through the `auth-tls-match-cn` annotation in an Ingress resource.\n- **Required attacker capabilities/position:** An attacker with the ability to create or modify Ingress resources.\n- **Mitigation or fix:** Upgrade ingress-nginx to v1.11.5, v1.12.1, or any later version.\n```",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-94 | Improper Control of Generation of Code ('Code Injection') | 0.8 | Base | Allowed-with-Review | Primary CWE. The ingress-nginx controller **improperly controls the generation of code**, leading to **arbitrary code execution**. |\n| CWE-74 | Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') | 0.7 | Class | Discouraged | Secondary CWE. The `auth-tls-match-cn` Ingress annotation is not properly sanitized, allowing for configuration injection. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary relationship impacting the decision is the chain of events: **improper control of code generation** (CWE-94) due to **improper neutralization of special elements** (CWE-74), leading to **arbitrary code execution**. CWE-94 is the root cause, and CWE-74 contributes to the vulnerability by allowing the injection of malicious code or commands. CWE-94 is a Base level CWE while CWE-74 is a Class. The selection of CWE-94 as the primary CWE is based on the fact that it directly addresses the code injection aspect.\n\n```mermaid\ngraph TD\n    cwe94[\"CWE-94: Improper Control of Generation of Code ('Code Injection')\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n    \n    cwe74 -->|CANPRECEDE| cwe94\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe94 primary\n    class cwe74 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **improper neutralization of special elements** (CWE-74) in the `auth-tls-match-cn` Ingress annotation. This leads to **improper control of code generation** (CWE-94), which then results in **arbitrary code execution** and **disclosure of Secrets**.\n\n## Summary of Analysis\nThe initial analysis considered several CWEs from the Retriever Results, particularly those related to permissions and authentication. However, the core of the vulnerability lies in the ability to inject configuration into nginx via the `auth-tls-match-cn` annotation, leading to arbitrary code execution.\n\nThe primary CWE, CWE-94 [Improper Control of Generation of Code ('Code Injection')], accurately captures the root cause of the vulnerability, which is the **improper control of code generation**. The ingress-nginx controller **improperly controls the generation of code**, leading to **arbitrary code execution**. This is supported by the vulnerability description, which states that the `auth-tls-match-cn` Ingress annotation can be used to inject configuration into nginx, leading to arbitrary code execution.\n\nThe secondary CWE, CWE-74 [Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')], is relevant because the `auth-tls-match-cn` Ingress annotation is not properly sanitized, allowing for configuration injection. This is supported by the CVE Reference Links Content Summary, which states that the `auth-tls-match-cn` Ingress annotation in ingress-nginx is not properly sanitized, allowing for configuration injection.\n\nThe relationship analysis indicates that CWE-74 can precede CWE-94, as the improper neutralization of special elements allows for the injection of malicious code or commands that can then be executed.\n\nThe selection of CWE-94 as the primary CWE and CWE-74 as the secondary CWE is based on the evidence provided in the vulnerability description and the CVE Reference Links Content Summary, as well as the relationship analysis. The selected CWEs are at the optimal level of specificity, as they accurately capture the root cause and contributing factors of the vulnerability.\n\nThe retriever results listed many authentication and authorization related CWEs. These were deemed not a fit as they did not directly address the **improper configuration** leading to **arbitrary code execution**.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-94 | Improper Control of Generation of Code ('Code Injection') | 0.8 | Base | Allowed-with-Review | Primary CWE. The ingress-nginx controller **improperly controls the generation of code**, leading to **arbitrary code execution**. |\n| CWE-74 | Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') | 0.7 | Class | Discouraged | Secondary CWE. The `auth-tls-match-cn` Ingress annotation is not properly sanitized, allowing for configuration injection. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary relationship impacting the decision is the chain of events: **improper control of code generation** (CWE-94) due to **improper neutralization of special elements** (CWE-74), leading to **arbitrary code execution**. CWE-94 is the root cause, and CWE-74 contributes to the vulnerability by allowing the injection of malicious code or commands. CWE-94 is a Base level CWE while CWE-74 is a Class. The selection of CWE-94 as the primary CWE is based on the fact that it directly addresses the code injection aspect.\n\n```mermaid\ngraph TD\n    cwe94[\"CWE-94: Improper Control of Generation of Code ('Code Injection')\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n    \n    cwe74 -->|CANPRECEDE| cwe94\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe94 primary\n    class cwe74 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **improper neutralization of special elements** (CWE-74) in the `auth-tls-match-cn` Ingress annotation. This leads to **improper control of code generation** (CWE-94), which then results in **arbitrary code execution** and **disclosure of Secrets**.\n\n## Summary of Analysis\nThe initial analysis considered several CWEs from the Retriever Results, particularly those related to permissions and authentication. However, the core of the vulnerability lies in the ability to inject configuration into nginx via the `auth-tls-match-cn` annotation, leading to arbitrary code execution.\n\nThe primary CWE, CWE-94 [Improper Control of Generation of Code ('Code Injection')], accurately captures the root cause of the vulnerability, which is the **improper control of code generation**. The ingress-nginx controller **improperly controls the generation of code**, leading to **arbitrary code execution**. This is supported by the vulnerability description, which states that the `auth-tls-match-cn` Ingress annotation can be used to inject configuration into nginx, leading to arbitrary code execution.\n\nThe secondary CWE, CWE-74 [Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')], is relevant because the `auth-tls-match-cn` Ingress annotation is not properly sanitized, allowing for configuration injection. This is supported by the CVE Reference Links Content Summary, which states that the `auth-tls-match-cn` Ingress annotation in ingress-nginx is not properly sanitized, allowing for configuration injection.\n\nThe relationship analysis indicates that CWE-74 can precede CWE-94, as the improper neutralization of special elements allows for the injection of malicious code or commands that can then be executed.\n\nThe selection of CWE-94 as the primary CWE and CWE-74 as the secondary CWE is based on the evidence provided in the vulnerability description and the CVE Reference Links Content Summary, as well as the relationship analysis. The selected CWEs are at the optimal level of specificity, as they accurately capture the root cause and contributing factors of the vulnerability.\n\nThe retriever results listed many authentication and authorization related CWEs. These were deemed not a fit as they did not directly address the **improper configuration** leading to **arbitrary code execution**.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-74:**\n- 74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')) - ROOT\n\n\n**Chain starting from CWE-94:**\n- 94 (Improper Control of Generation of Code ('Code Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "732",
        "name": "Incorrect Permission Assignment for Critical Resource",
        "source": "sparse"
      },
      "similarity": 391.89225528310226
    },
    {
      "metadata": {
        "doc_id": "256",
        "name": "Plaintext Storage of a Password",
        "source": "sparse"
      },
      "similarity": 388.1022091449506
    },
    {
      "metadata": {
        "doc_id": "522",
        "name": "Insufficiently Protected Credentials",
        "source": "sparse"
      },
      "similarity": 383.7218745441014
    },
    {
      "metadata": {
        "doc_id": "22",
        "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
        "source": "sparse"
      },
      "similarity": 381.5121197955673
    },
    {
      "metadata": {
        "doc_id": "287",
        "name": "Improper Authentication",
        "source": "sparse"
      },
      "similarity": 380.5560002456462
    },
    {
      "metadata": {
        "doc_id": "668",
        "name": "Exposure of Resource to Wrong Sphere",
        "source": "sparse"
      },
      "similarity": 378.6047930134217
    },
    {
      "metadata": {
        "doc_id": "306",
        "name": "Missing Authentication for Critical Function",
        "source": "sparse"
      },
      "similarity": 366.9297508534816
    },
    {
      "metadata": {
        "doc_id": "319",
        "name": "Cleartext Transmission of Sensitive Information",
        "source": "sparse"
      },
      "similarity": 366.4053916562551
    },
    {
      "metadata": {
        "doc_id": "941",
        "name": "Incorrectly Specified Destination in a Communication Channel",
        "type": "Base",
        "original_content": "The product creates a communication channel to initiate an outgoing request to an actor, but it does not correctly specify the intended destination for that actor.",
        "keyphrase_source": "weakness:arbitrary code execution",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5414419755364869,
            "graph": 1.6310338696906288
          }
        }
      },
      "similarity": 0.5414419755364869
    },
    {
      "doc_id": "613",
      "text": "CWE-613: Insufficient Session Expiration",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "613",
        "name": "Insufficient Session Expiration",
        "type": "base",
        "original_content": "CWE-613: Insufficient Session Expiration",
        "relationships": [
          {
            "source_id": "613",
            "target_id": "352",
            "label": "REQUIREDBY",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "613",
            "target_id": "287",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "613",
            "target_id": "672",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "613",
            "target_id": "672",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "672",
            "target_id": "613",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "352",
            "target_id": "613",
            "label": "REQUIRES",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "287",
            "target_id": "613",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "287",
                  "613",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "287"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "287",
                  "613",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "287"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "613",
                  "287",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "287"
            }
          }
        },
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-74",
      "CWE-94"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}