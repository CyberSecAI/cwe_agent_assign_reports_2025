{
  "cve_id": "CVE-2025-4791",
  "description": "A vulnerability has been found in FreeFloat FTP Server 1.0 and classified as critical. This vulnerability affects unknown code of the component HASH Command Handler. The manipulation leads to **buffer overflow**. The attack can be initiated remotely. The exploit has been disclosed to the public and may be used.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "buffer overflow",
    "impact": "",
    "vector": "manipulation",
    "attacker": "",
    "product": "FreeFloat FTP Server",
    "version": "1",
    "component": "HASH Command Handler"
  },
  "reference_content": "## Analysis of CVE-2025-4791 Content\n\nBased on the provided content, this relates to a vulnerability in Freefloat FTP Server version 1.0. The content details a remote buffer overflow exploit targeting the 'HASH' command.\n\n**Root cause of vulnerability:**\n\nThe vulnerability is a buffer overflow in the handling of the 'HASH' command in Freefloat FTP Server 1.0. The server does not properly validate the size of the input provided with the 'HASH' command, allowing an attacker to send a larger payload than the buffer can hold, overwriting adjacent memory regions.\n\n**Weaknesses/vulnerabilities present:**\n\n*   Buffer Overflow\n*   Lack of input validation\n\n**Impact of exploitation:**\n\nSuccessful exploitation allows an attacker to overwrite the execution flow of the program, potentially leading to arbitrary code execution. The exploit author demonstrates achieving a reverse shell.\n\n**Attack vectors:**\n\n*   Remote attacker can send a crafted 'HASH' command to the FTP server.\n\n**Required attacker capabilities/position:**\n\n*   Network access to the vulnerable FTP server.\n*   Ability to send arbitrary data to the FTP server's 'HASH' command.\n\n**Mitigation or fix:**\n\nThe content does not provide information about a specific fix. However, mitigation would involve:\n\n*   Implementing proper input validation to ensure the 'HASH' command input does not exceed the buffer size.\n*   Using safe string handling functions to prevent buffer overflows.\n\n**Additional Details (more than official CVE description):**\n\n*   **Tested on:** Windows XP SP3 English\n*   **Offset:** 2006 bytes\n*   **Bad characters:** `\\x00\\x0a\\x0d`\n*   **EIP overwrite:** `0x7C86467B` (JMP ESP) - indicating the exploit aims to redirect execution to a shellcode.\n*   The exploit uses `msfvenom` to generate a shellcode and Perl to construct and send the malicious payload.\n*   The exploit script connects to the FTP server, authenticates as an anonymous user, and then sends the crafted 'HASH' command.\n*   The exploit includes a payload designed to execute a reverse TCP shell, connecting back to `192.168.232.129` on port `4444`.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-120 | Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') | 1.0 | Base | Allowed-with-Review | Primary CWE. The vulnerability is a classic buffer overflow due to not checking the size of the input when copying to a buffer. |\n| CWE-119 | Improper Restriction of Operations within the Bounds of a Memory Buffer | 0.7 | Class | Discouraged | Secondary CWE. This is a broader category that encompasses buffer overflows. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-120, which is a base level CWE and a more specific type of the class CWE-119. The vulnerability involves copying data into a buffer without checking the size of the input, leading to a buffer overflow. Therefore, CWE-120 is a more precise classification.\n\n```mermaid\ngraph TD\n    cwe120[\"CWE-120: Buffer Copy without Checking Size of Input\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\"]\n    \n    cwe120 -->|CHILDOF| cwe119\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe120 primary\n    class cwe119 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a lack of input validation, leading to a buffer overflow when copying data.\n- **Root Cause:** **Lack of input validation** in HASH command handler.\n- **Weakness:** CWE-120 Buffer Copy without Checking Size of Input\n- **Impact:** Remote code execution\n\n## Summary of Analysis\nThe primary weakness is a **buffer overflow** (CWE-120) caused by the FreeFloat FTP Server 1.0 **not checking the size of the input** provided to the HASH command handler. The provided content summary confirms this with the following quote: \"The server does not properly validate the size of the input provided with the 'HASH' command, allowing an attacker to send a larger payload than the buffer can hold, overwriting adjacent memory regions.\" The exploit is remotely triggerable and publicly available. The relationship analysis indicates that CWE-120 is a child of CWE-119, making CWE-120 the more specific and appropriate choice for this vulnerability.\n\nThe retriever results also listed CWE-119 and CWE-120 as the top candidates.\nCWE-119 is a class level of abstraction. CWE-120 is a base level of abstraction.\n\nOther CWEs Considered:\n\n*   CWE-190 (Integer Overflow or Wraparound): While integer overflows can sometimes lead to buffer overflows, the primary issue here is the lack of input validation, which directly causes the buffer overflow.\n*   CWE-125 (Out-of-bounds Read): This is related to reading data outside the intended buffer, which is not the primary issue. The primary issue is related to writing outside of the intended buffer.\n*   CWE-131 (Incorrect Calculation of Buffer Size): The root cause is not due to incorrect calculation of buffer size, but from not validating the size of the input before the buffer copy operation occurs.\n*   CWE-1284 (Improper Validation of Specified Quantity in Input): This is a close match, however CWE-120 represents the actual buffer overflow condition.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-120 | Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') | 1.0 | Base | Allowed-with-Review | Primary CWE. The vulnerability is a classic buffer overflow due to not checking the size of the input when copying to a buffer. |\n| CWE-119 | Improper Restriction of Operations within the Bounds of a Memory Buffer | 0.7 | Class | Discouraged | Secondary CWE. This is a broader category that encompasses buffer overflows. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-120, which is a base level CWE and a more specific type of the class CWE-119. The vulnerability involves copying data into a buffer without checking the size of the input, leading to a buffer overflow. Therefore, CWE-120 is a more precise classification.\n\n```mermaid\ngraph TD\n    cwe120[\"CWE-120: Buffer Copy without Checking Size of Input\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\"]\n    \n    cwe120 -->|CHILDOF| cwe119\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe120 primary\n    class cwe119 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a lack of input validation, leading to a buffer overflow when copying data.\n- **Root Cause:** **Lack of input validation** in HASH command handler.\n- **Weakness:** CWE-120 Buffer Copy without Checking Size of Input\n- **Impact:** Remote code execution\n\n## Summary of Analysis\nThe primary weakness is a **buffer overflow** (CWE-120) caused by the FreeFloat FTP Server 1.0 **not checking the size of the input** provided to the HASH command handler. The provided content summary confirms this with the following quote: \"The server does not properly validate the size of the input provided with the 'HASH' command, allowing an attacker to send a larger payload than the buffer can hold, overwriting adjacent memory regions.\" The exploit is remotely triggerable and publicly available. The relationship analysis indicates that CWE-120 is a child of CWE-119, making CWE-120 the more specific and appropriate choice for this vulnerability.\n\nThe retriever results also listed CWE-119 and CWE-120 as the top candidates.\nCWE-119 is a class level of abstraction. CWE-120 is a base level of abstraction.\n\nOther CWEs Considered:\n\n*   CWE-190 (Integer Overflow or Wraparound): While integer overflows can sometimes lead to buffer overflows, the primary issue here is the lack of input validation, which directly causes the buffer overflow.\n*   CWE-125 (Out-of-bounds Read): This is related to reading data outside the intended buffer, which is not the primary issue. The primary issue is related to writing outside of the intended buffer.\n*   CWE-131 (Incorrect Calculation of Buffer Size): The root cause is not due to incorrect calculation of buffer size, but from not validating the size of the input before the buffer copy operation occurs.\n*   CWE-1284 (Improper Validation of Specified Quantity in Input): This is a close match, however CWE-120 represents the actual buffer overflow condition.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-1284:**\n- 1284 (Improper Validation of Specified Quantity in Input) - ROOT\n\n\n**Chain starting from CWE-125:**\n- 125 (Out-of-bounds Read) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "119",
        "name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Buffer Overflow",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "190",
        "name": "Integer Overflow or Wraparound",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Overflow",
        "match_reason": "term_in_phrase_whole_phrase"
      },
      "similarity": 800.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "120",
        "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Classic Buffer Overflow",
        "match_reason": "phrase_in_term_whole_phrase"
      },
      "similarity": 700.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "sparse"
      },
      "similarity": 364.3896156696181
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 337.4136986775226
    },
    {
      "metadata": {
        "doc_id": "125",
        "name": "Out-of-bounds Read",
        "source": "sparse"
      },
      "similarity": 306.3500870666613
    },
    {
      "metadata": {
        "doc_id": "674",
        "name": "Uncontrolled Recursion",
        "source": "sparse"
      },
      "similarity": 298.87519237485725
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "source": "sparse"
      },
      "similarity": 294.1414790570906
    },
    {
      "metadata": {
        "doc_id": "121",
        "name": "Stack-based Buffer Overflow",
        "type": "Variant",
        "original_content": "A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).",
        "keyphrase_source": "weakness:buffer overflow",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5856306817227213,
            "sparse": 285.44011102733685
          }
        }
      },
      "similarity": 0.5856306817227213
    },
    {
      "doc_id": "128",
      "text": "CWE-128: Wrap-around Error",
      "score": 2.9120000000000004,
      "metadata": {
        "doc_id": "128",
        "name": "Wrap-around Error",
        "type": "base",
        "original_content": "CWE-128: Wrap-around Error",
        "relationships": [
          {
            "source_id": "128",
            "target_id": "190",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "128",
            "target_id": "119",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "128",
            "target_id": "682",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "682",
            "target_id": "128",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "119",
            "target_id": "128",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "119",
                  "128",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "119"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "119",
                  "128",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "119"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "128",
                  "119",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "119"
            },
            "peer_relationship": {
              "path": [
                [
                  "128",
                  "190",
                  "PEEROF"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "190"
            }
          }
        },
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.9120000000000004
          }
        }
      },
      "similarity": 2.9120000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-1284",
      "CWE-125",
      "CWE-131",
      "CWE-190",
      "CWE-119",
      "CWE-120"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}