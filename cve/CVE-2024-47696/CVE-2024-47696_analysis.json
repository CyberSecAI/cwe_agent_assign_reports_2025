{
  "cve_id": "CVE-2024-47696",
  "description": "In the Linux kernel, the following vulnerability has been resolved RDMA/iwcm Fix WARNINGat_kernel/workqueue.c#check_flush_dependency In the commit aee2424246f9 (RDMA/iwcm Fix a use-after-free related to destroying CM IDs), the function flush_workqueue is invoked to flush the work queue iwcm_wq. But at that time, the work queue iwcm_wq was created via the function alloc_ordered_workqueue without the flag WQ_MEM_RECLAIM. Because the current process is trying to flush the whole iwcm_wq, if iwcm_wq doesnt have the flag WQ_MEM_RECLAIM, verify that the current process is not reclaiming memory or running on a workqueue which doesnt have the flag WQ_MEM_RECLAIM as that can break forward-progress guarantee leading to a deadlock. The call trace is as below [ 125.350876][ T1430] Call Trace [ 125.356281][ T1430] [ 125.361285][ T1430] ? __warn (kernel/panic.c693) [ 125.367640][ T1430] ? check_flush_dependency (kernel/workqueue.c3706 (discriminator 9)) [ 125.375689][ T1430] ? report_bug (lib/bug.c180 lib/bug.c219) [ 125.382505][ T1430] ? handle_bug (arch/x86/kernel/traps.c239) [ 125.388987][ T1430] ? exc_invalid_op (arch/x86/kernel/traps.c260 (discriminator 1)) [ 125.395831][ T1430] ? asm_exc_invalid_op (arch/x86/include/asm/idtentry.h621) [ 125.403125][ T1430] ? check_flush_dependency (kernel/workqueue.c3706 (discriminator 9)) [ 125.410984][ T1430] ? check_flush_dependency (kernel/workqueue.c3706 (discriminator 9)) [ 125.418764][ T1430] __flush_workqueue (kernel/workqueue.c3970) [ 125.426021][ T1430] ? __pfx___might_resched (kernel/sched/core.c10151) [ 125.433431][ T1430] ? destroy_cm_id (drivers/infiniband/core/iwcm.c375) iw_cm [ 125.441209][ T1430] ? __pfx___flush_workqueue (kernel/workqueue.c3910) [ 125.473900][ T1430] ? _raw_spin_lock_irqsave (arch/x86/include/asm/atomic.h107 include/linux/atomic/atomic-arch-fallback.h2170 include/linux/atomic/atomic-instrumented.h1302 include/asm-generic/qspinlock.h111 include/linux/spinlock.h187 include/linux/spinlock_api_smp.h111 kernel/locking/spinlock.c162) [ 125.473909][ T1430] ? __pfx__raw_spin_lock_irqsave (kernel/locking/spinlock.c161) [ 125.482537][ T1430] _destroy_id (drivers/infiniband/core/cma.c2044) rdma_cm [ 125.495072][ T1430] nvme_rdma_free_queue (drivers/nvme/host/rdma.c656 drivers/nvme/host/rdma.c650) nvme_rdma [ 125.505827][ T1430] nvme_rdma_reset_ctrl_work (drivers/nvme/host/rdma.c2180) nvme_rdma [ 125.505831][ T1430] process_one_work (kernel/workqueue.c3231) [ 125.515122][ T1430] worker_thread (kernel/workqueue.c3306 kernel/workqueue.c3393) [ 125.515127][ T1430] ? __pfx_worker_thread (kernel/workqueue.c3339) [ 125.531837][ T1430] kthread (kernel/kthread.c389) [ 125.539864][ T1430] ? __pfx_kthread (kernel/kthread.c342) [ 125.550628][ T1430] ret_from_fork (arch/x86/kernel/process.c147) [ 125.558840][ T1430] ? __pfx_kthread (kernel/kthread.c342) [ 125.558844][ T1430] ret_from_fork_asm (arch/x86/entry/entry_64.S257) [ 125.566487][ T1430] [ 125.566488][ T1430] ---[ end trace 0000000000000000 ]---",
  "key_phrases": {
    "rootcause": "The workqueue iwcm_wq was created without the WQ_MEM_RECLAIM flag, leading to a potential deadlock when trying to flush it during memory reclamation.",
    "weakness": "The workqueue iwcm_wq lacks the WQ_MEM_RECLAIM flag, which is necessary for safe flushing during memory reclamation.",
    "impact": "A deadlock can occur, causing the system to become unresponsive.",
    "vector": "The vulnerability is triggered when the function flush_workqueue is invoked to flush the work queue iwcm_wq during memory reclamation. The call chain includes destroy_cm_id which is part of the RDMA subsystem's connection management, and then nvme_rdma_free_queue which is part of the NVMe RDMA driver.",
    "attacker": "An attacker cannot directly trigger this vulnerability as it's a race condition related to memory reclamation and the workqueue flush. The attacker needs to somehow trigger the call chain.",
    "product": "Linux Kernel",
    "version": "Not specified in the provided text, but it's likely a version before the fix commit aee2424246f9 was applied.",
    "component": "RDMA/iwcm (InfiniBand Connection Manager), workqueue subsystem, and NVMe RDMA driver."
  },
  "reference_content": "Based on the provided content, here's an analysis of the vulnerability:\n\n**Root Cause:**\nThe root cause lies in the incorrect initialization of the `iwcm_wq` workqueue. It was created using `alloc_ordered_workqueue` without the `WQ_MEM_RECLAIM` flag. This flag is crucial when flushing a workqueue that may be involved in memory reclamation.\n\n**Weaknesses/Vulnerabilities:**\n- **Missing `WQ_MEM_RECLAIM` flag:** The primary weakness is the omission of the `WQ_MEM_RECLAIM` flag when allocating the `iwcm_wq` workqueue. This omission means that the workqueue doesn't signal that it's safe to flush during memory reclaim operations, leading to potential deadlocks.\n- **Potential Deadlock:** When a process attempts to flush `iwcm_wq` during memory reclamation or from within a workqueue that also lacks `WQ_MEM_RECLAIM`, the `check_flush_dependency` function within the kernel's workqueue logic detects the situation, triggering a warning and potentially leading to a deadlock.\n\n**Impact of Exploitation:**\n- **Denial of Service (DoS):** The primary impact of this vulnerability is a denial of service. The deadlock prevents the system from continuing normal operations as processes get stuck trying to flush the workqueue during memory reclaim scenarios.\n- **System Instability:** The unhandled deadlock can destabilize the kernel, and the warning issued indicates a serious issue with forward progress, suggesting the possibility of other connected issues.\n\n**Attack Vectors:**\n- **Triggering Memory Reclaim Operations:** Attackers could potentially trigger this condition by forcing the system to engage in memory reclamation activities while also interacting with RDMA/iwcm functionalities.\n- **Workqueue Manipulation:** While the description doesn't suggest explicit user-space triggers, any interaction with iwcm functionalities leading to the flushing of the problematic work queue in conjunction with memory reclamation activities would expose the vulnerability.\n\n**Required Attacker Capabilities/Position:**\n- **Ability to Trigger Memory Reclaim:** The attacker would need the ability to trigger memory reclaim events within the system while simultaneously using the RDMA/iwcm subsystem or trigger it via a process that uses the affected workqueue.\n- **System Interaction:** The attacker does not necessarily need to be root, but would need to have sufficient privileges or means to interact with the RDMA/iwcm subsystem which indirectly triggers the vulnerable code path during memory reclamation.\n\n**Additional Notes:**\n- The provided commit messages fix this by adding the `WQ_MEM_RECLAIM` flag when allocating `iwcm_wq`. This flag signals the workqueue subsystem that it is safe to flush the queue, even during memory reclaim operations, thus preventing the reported deadlock.\n- The call trace is important as it reveals the specific sequence of function calls leading to the warning, thereby identifying the vulnerable execution path.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-833 | Deadlock | 0.9 | Base | Primary | Allowed |\n| CWE-909 | Missing Initialization of Resource | 0.7 | Class | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship influencing the CWE selection is the root cause of the deadlock. The **missing** `WQ_MEM_RECLAIM` flag during workqueue creation is the **rootcause**. While `CWE-909` describes the **missing** initialization, `CWE-833` more accurately captures the resulting deadlock scenario directly described in the vulnerability. `CWE-833` is a Base level CWE, which is preferred. `CWE-909` is a Class level CWE, and although it describes the **missing** initialization of a resource, it does not fully capture the deadlock itself.\n\n```mermaid\ngraph TD\n    cwe833[\"CWE-833: Deadlock\"]\n    cwe909[\"CWE-909: Missing Initialization of Resource\"]\n    \n    cwe833\n    cwe909\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe833 primary\n    class cwe909 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **missing** initialization of the `WQ_MEM_RECLAIM` flag when the `iwcm_wq` workqueue is created (`CWE-909`). This leads to a situation where flushing the workqueue during memory reclamation can cause a deadlock (`CWE-833`).\n\n`CWE-909` -> `CWE-833`\n\n## Summary of Analysis\nThe analysis focuses on identifying the **rootcause** and the resulting impact. The **rootcause** is the **missing** `WQ_MEM_RECLAIM` flag, leading to a deadlock. The evidence provided in the vulnerability description clearly points to this sequence of events. The selection of `CWE-833` as the primary CWE is based on the direct evidence of a deadlock occurring.\nThe analysis is heavily based on the provided evidence, specifically the **Vulnerability Description Key Phrases** and the **CVE Reference Links Content Summary**.\n```\n**rootcause:** The workqueue iwcm_wq was created without the WQ_MEM_RECLAIM flag, leading to a potential deadlock when trying to flush it during memory reclamation.\n**weakness:** The workqueue iwcm_wq lacks the WQ_MEM_RECLAIM flag, which is necessary for safe flushing during memory reclamation.\n**impact:** A deadlock can occur, causing the system to become unresponsive.\n```\nThe hierarchical relationships and retriever scores were considered, but the primary decision driver was the explicit mention of a deadlock and the **missing** flag. The selected CWEs are at the optimal level of specificity because `CWE-833` is a Base CWE and `CWE-909` captures the **missing** initialization aspect.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.79\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\nTechnical Explanation for CWE-833: Deadlock\n*   How the vulnerability's details match the CWE's characteristics: The vulnerability description explicitly mentions a deadlock caused by the workqueue `iwcm_wq` being flushed without the `WQ_MEM_RECLAIM` flag set, which is detected by `check_flush_dependency`.\n*   The security implications and potential impact: The deadlock leads to a denial of service, causing the system to become unresponsive.\n*   Any parent-child relationships or chain patterns that influenced your mapping: N/A\n*   Whether the weakness is primary or secondary in the vulnerability: Primary\n*   How the official MITRE mapping guidance influenced your decision: The MITRE mapping guidance allows the use of `CWE-833` with the rationale that it is at the Base level of abstraction.\n\nTechnical Explanation for CWE-909: Missing Initialization of Resource\n*   How the vulnerability's details match the CWE's characteristics: The workqueue `iwcm_wq` is created without the `WQ_MEM_RECLAIM` flag, which can be considered as a **missing** initialization.\n*   The security implications and potential impact: The **missing** initialization leads to a deadlock during memory reclamation.\n*   Any parent-child relationships or chain patterns that influenced your mapping: N/A\n*   Whether the weakness is primary or secondary in the vulnerability: Secondary\n*   How the official MITRE mapping guidance influenced your decision: The MITRE mapping guidance allows the use of `CWE-909` with review because it is a Class-level CWE.\n\nOther CWEs Considered but Not Used:\n\n*   CWE-667: Improper Locking: While locking is involved in deadlocks, the **rootcause** is the **missing** flag and not directly an improper locking mechanism.\n*   CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'): While a race condition may contribute to the deadlock, the core issue is the **missing** `WQ_MEM_RECLAIM` flag.\n*   CWE-416: Use After Free: Not applicable, as the issue is not related to use-after-free.\n*   CWE-789: Memory Allocation with Excessive Size Value: Not applicable, as the issue is not about excessive memory allocation.\n*   CWE-755: Improper Handling of Exceptional Conditions: While a deadlock is an exceptional condition, the **rootcause** is not the handling of the condition, but the **missing** flag.\n*   CWE-476: NULL Pointer Dereference: Not applicable, as the issue is not related to null pointer dereference.\n*   CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer: Not applicable, as the issue is not related to buffer operations.\n*   CWE-191: Integer Underflow (Wrap or Wraparound): Not applicable, as the issue is not related to integer underflow.\n*   CWE-824: Access of Uninitialized Pointer: Not applicable, as the issue is not related to pointer access.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-833 | Deadlock | 0.9 | Base | Primary | Allowed |\n| CWE-909 | Missing Initialization of Resource | 0.7 | Class | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship influencing the CWE selection is the root cause of the deadlock. The **missing** `WQ_MEM_RECLAIM` flag during workqueue creation is the **rootcause**. While `CWE-909` describes the **missing** initialization, `CWE-833` more accurately captures the resulting deadlock scenario directly described in the vulnerability. `CWE-833` is a Base level CWE, which is preferred. `CWE-909` is a Class level CWE, and although it describes the **missing** initialization of a resource, it does not fully capture the deadlock itself.\n\n```mermaid\ngraph TD\n    cwe833[\"CWE-833: Deadlock\"]\n    cwe909[\"CWE-909: Missing Initialization of Resource\"]\n    \n    cwe833\n    cwe909\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe833 primary\n    class cwe909 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **missing** initialization of the `WQ_MEM_RECLAIM` flag when the `iwcm_wq` workqueue is created (`CWE-909`). This leads to a situation where flushing the workqueue during memory reclamation can cause a deadlock (`CWE-833`).\n\n`CWE-909` -> `CWE-833`\n\n## Summary of Analysis\nThe analysis focuses on identifying the **rootcause** and the resulting impact. The **rootcause** is the **missing** `WQ_MEM_RECLAIM` flag, leading to a deadlock. The evidence provided in the vulnerability description clearly points to this sequence of events. The selection of `CWE-833` as the primary CWE is based on the direct evidence of a deadlock occurring.\nThe analysis is heavily based on the provided evidence, specifically the **Vulnerability Description Key Phrases** and the **CVE Reference Links Content Summary**.\n```\n**rootcause:** The workqueue iwcm_wq was created without the WQ_MEM_RECLAIM flag, leading to a potential deadlock when trying to flush it during memory reclamation.\n**weakness:** The workqueue iwcm_wq lacks the WQ_MEM_RECLAIM flag, which is necessary for safe flushing during memory reclamation.\n**impact:** A deadlock can occur, causing the system to become unresponsive.\n```\nThe hierarchical relationships and retriever scores were considered, but the primary decision driver was the explicit mention of a deadlock and the **missing** flag. The selected CWEs are at the optimal level of specificity because `CWE-833` is a Base CWE and `CWE-909` captures the **missing** initialization aspect.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.79\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\nTechnical Explanation for CWE-833: Deadlock\n*   How the vulnerability's details match the CWE's characteristics: The vulnerability description explicitly mentions a deadlock caused by the workqueue `iwcm_wq` being flushed without the `WQ_MEM_RECLAIM` flag set, which is detected by `check_flush_dependency`.\n*   The security implications and potential impact: The deadlock leads to a denial of service, causing the system to become unresponsive.\n*   Any parent-child relationships or chain patterns that influenced your mapping: N/A\n*   Whether the weakness is primary or secondary in the vulnerability: Primary\n*   How the official MITRE mapping guidance influenced your decision: The MITRE mapping guidance allows the use of `CWE-833` with the rationale that it is at the Base level of abstraction.\n\nTechnical Explanation for CWE-909: Missing Initialization of Resource\n*   How the vulnerability's details match the CWE's characteristics: The workqueue `iwcm_wq` is created without the `WQ_MEM_RECLAIM` flag, which can be considered as a **missing** initialization.\n*   The security implications and potential impact: The **missing** initialization leads to a deadlock during memory reclamation.\n*   Any parent-child relationships or chain patterns that influenced your mapping: N/A\n*   Whether the weakness is primary or secondary in the vulnerability: Secondary\n*   How the official MITRE mapping guidance influenced your decision: The MITRE mapping guidance allows the use of `CWE-909` with review because it is a Class-level CWE.\n\nOther CWEs Considered but Not Used:\n\n*   CWE-667: Improper Locking: While locking is involved in deadlocks, the **rootcause** is the **missing** flag and not directly an improper locking mechanism.\n*   CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'): While a race condition may contribute to the deadlock, the core issue is the **missing** `WQ_MEM_RECLAIM` flag.\n*   CWE-416: Use After Free: Not applicable, as the issue is not related to use-after-free.\n*   CWE-789: Memory Allocation with Excessive Size Value: Not applicable, as the issue is not about excessive memory allocation.\n*   CWE-755: Improper Handling of Exceptional Conditions: While a deadlock is an exceptional condition, the **rootcause** is not the handling of the condition, but the **missing** flag.\n*   CWE-476: NULL Pointer Dereference: Not applicable, as the issue is not related to null pointer dereference.\n*   CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer: Not applicable, as the issue is not related to buffer operations.\n*   CWE-191: Integer Underflow (Wrap or Wraparound): Not applicable, as the issue is not related to integer underflow.\n*   CWE-824: Access of Uninitialized Pointer: Not applicable, as the issue is not related to pointer access.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-416:**\n- 416 (Use After Free) - ROOT\n\n\n**Chain starting from CWE-476:**\n- 476 (NULL Pointer Dereference) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "822",
        "name": "Untrusted Pointer Dereference",
        "source": "sparse"
      },
      "similarity": 1239.5393907614875
    },
    {
      "metadata": {
        "doc_id": "125",
        "name": "Out-of-bounds Read",
        "source": "sparse"
      },
      "similarity": 1237.4956865253023
    },
    {
      "metadata": {
        "doc_id": "667",
        "name": "Improper Locking",
        "source": "sparse"
      },
      "similarity": 1081.23684496224
    },
    {
      "metadata": {
        "doc_id": "823",
        "name": "Use of Out-of-range Pointer Offset",
        "source": "sparse"
      },
      "similarity": 1060.1560751798056
    },
    {
      "metadata": {
        "doc_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "source": "sparse"
      },
      "similarity": 1014.0382056232625
    },
    {
      "metadata": {
        "doc_id": "416",
        "name": "Use After Free",
        "source": "sparse"
      },
      "similarity": 980.2174790425056
    },
    {
      "metadata": {
        "doc_id": "393",
        "name": "Return of Wrong Status Code",
        "source": "sparse"
      },
      "similarity": 979.9936063902965
    },
    {
      "metadata": {
        "doc_id": "833",
        "name": "Deadlock",
        "source": "sparse"
      },
      "similarity": 975.3327122140138
    },
    {
      "metadata": {
        "doc_id": "909",
        "name": "Missing Initialization of Resource",
        "type": "Class",
        "original_content": "The product does not initialize a critical resource.",
        "keyphrase_source": "weakness:which is necessary for safe flushing during memory reclamation.",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
          "comments": "Examine children of this entry to see if there is a better fit",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.5834515320823435
          }
        }
      },
      "similarity": 0.5834515320823435
    },
    {
      "doc_id": "364",
      "text": "CWE-364: Signal Handler Race Condition",
      "score": 2.3400000000000003,
      "metadata": {
        "doc_id": "364",
        "name": "Signal Handler Race Condition",
        "type": "base",
        "original_content": "CWE-364: Signal Handler Race Condition",
        "relationships": [
          {
            "source_id": "364",
            "target_id": "831",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "364",
            "target_id": "828",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "364",
            "target_id": "432",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "364",
            "target_id": "123",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "364",
            "target_id": "416",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "364",
            "target_id": "415",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "364",
            "target_id": "362",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "831",
            "target_id": "364",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "828",
            "target_id": "364",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "432",
            "target_id": "364",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "416",
            "target_id": "364",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "415",
            "target_id": "364",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "368",
            "target_id": "364",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "362",
            "target_id": "364",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "364",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 0.8,
          "abstraction_path": 0.7200000000000001,
          "sequence_path": 0.7200000000000001
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "362",
                  "416",
                  "CANPRECEDE"
                ],
                [
                  "416",
                  "364",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.8,
              "type": "relationship_chain",
              "source": "362"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "362",
                  "364",
                  "PARENTOF"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "abstraction_path_down",
              "source": "362"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "362",
                  "416",
                  "CANPRECEDE"
                ],
                [
                  "416",
                  "364",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "vulnerability_sequence_forward",
              "source": "362"
            }
          }
        },
        "abstraction_level": "base",
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.3400000000000003
          }
        }
      },
      "similarity": 2.3400000000000003
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-416",
      "CWE-476",
      "CWE-667",
      "CWE-833",
      "CWE-191",
      "CWE-909",
      "CWE-362",
      "CWE-755",
      "CWE-824",
      "CWE-119",
      "CWE-789"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}