{
  "retriever": "graph",
  "query": "In the Linux kernel, the following vulnerability has been resolved wifi cfg80211 init wiphy_work before allocating rfkill fails syzbort reported a uninitialize wiphy_work_lock in cfg80211_dev_free. [1] After rfkill allocation fails, the wiphy release process will be performed, which will cause cfg80211_dev_free to access the uninitialized wiphy_work related data. Move the initialization of wiphy_work to before rfkill initialization to avoid this issue. [1] INFO trying to register non-static key. The code is fine but needs lockdep annotation, or maybe you didnt initialize this object before use? turning off the locking correctness validator. CPU 0 UID 0 PID 5935 Comm syz-executor550 Not tainted 6.14.0-rc6-syzkaller-00103-g4003c9e78778 #0 Hardware name QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.16.3-debian-1.16.3-2~bpo12+1 04/01/2014 Call Trace __dump_stack lib/dump_stack.c94 [inline] dump_stack_lvl+0x116/0x1f0 lib/dump_stack.c120 assign_lock_key kernel/locking/lockdep.c983 [inline] register_lock_class+0xc39/0x1240 kernel/locking/lockdep.c1297 __lock_acquire+0x135/0x3c40 kernel/locking/lockdep.c5103 lock_acquire.part.0+0x11b/0x380 kernel/locking/lockdep.c5851 __raw_spin_lock_irqsave include/linux/spinlock_api_smp.h110 [inline] _raw_spin_lock_irqsave+0x3a/0x60 kernel/locking/spinlock.c162 cfg80211_dev_free+0x30/0x3d0 net/wireless/core.c1196 device_release+0xa1/0x240 drivers/base/core.c2568 kobject_cleanup lib/kobject.c689 [inline] kobject_release lib/kobject.c720 [inline] kref_put include/linux/kref.h65 [inline] kobject_put+0x1e4/0x5a0 lib/kobject.c737 put_device+0x1f/0x30 drivers/base/core.c3774 wiphy_free net/wireless/core.c1224 [inline] wiphy_new_nm+0x1c1f/0x2160 net/wireless/core.c562 ieee80211_alloc_hw_nm+0x1b7a/0x2260 net/mac80211/main.c835 mac80211_hwsim_new_radio+0x1d6/0x54e0 drivers/net/wireless/virtual/mac80211_hwsim.c5185 hwsim_new_radio_nl+0xb42/0x12b0 drivers/net/wireless/virtual/mac80211_hwsim.c6242 genl_family_rcv_msg_doit+0x202/0x2f0 net/netlink/genetlink.c1115 genl_family_rcv_msg net/netlink/genetlink.c1195 [inline] genl_rcv_msg+0x565/0x800 net/netlink/genetlink.c1210 netlink_rcv_skb+0x16b/0x440 net/netlink/af_netlink.c2533 genl_rcv+0x28/0x40 net/netlink/genetlink.c1219 netlink_unicast_kernel net/netlink/af_netlink.c1312 [inline] netlink_unicast+0x53c/0x7f0 net/netlink/af_netlink.c1338 netlink_sendmsg+0x8b8/0xd70 net/netlink/af_netlink.c1882 sock_sendmsg_nosec net/socket.c718 [inline] __sock_sendmsg net/socket.c733 [inline] ____sys_sendmsg+0xaaf/0xc90 net/socket.c2573 ___sys_sendmsg+0x135/0x1e0 net/socket.c2627 __sys_sendmsg+0x16e/0x220 net/socket.c2659 do_syscall_x64 arch/x86/entry/common.c52 [inline] do_syscall_64+0xcd/0x250 arch/x86/entry/common.c83 Close https//syzkaller.appspot.com/bug?extid=aaf0488c83d1d5f4f029 Consider specifically these CWEs: CWE-476 CWE-667 CWE-401 CWE-909 CWE-1285 CWE-362 CWE-415",
  "keyphrases": {
    "original_query": "In the Linux kernel, the following vulnerability has been resolved wifi cfg80211 init wiphy_work before allocating rfkill fails syzbort reported a uninitialize wiphy_work_lock in cfg80211_dev_free. [1] After rfkill allocation fails, the wiphy release process will be performed, which will cause cfg80211_dev_free to access the uninitialized wiphy_work related data. Move the initialization of wiphy_work to before rfkill initialization to avoid this issue. [1] INFO trying to register non-static key. The code is fine but needs lockdep annotation, or maybe you didnt initialize this object before use? turning off the locking correctness validator. CPU 0 UID 0 PID 5935 Comm syz-executor550 Not tainted 6.14.0-rc6-syzkaller-00103-g4003c9e78778 #0 Hardware name QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.16.3-debian-1.16.3-2~bpo12+1 04/01/2014 Call Trace __dump_stack lib/dump_stack.c94 [inline] dump_stack_lvl+0x116/0x1f0 lib/dump_stack.c120 assign_lock_key kernel/locking/lockdep.c983 [inline] register_lock_class+0xc39/0x1240 kernel/locking/lockdep.c1297 __lock_acquire+0x135/0x3c40 kernel/locking/lockdep.c5103 lock_acquire.part.0+0x11b/0x380 kernel/locking/lockdep.c5851 __raw_spin_lock_irqsave include/linux/spinlock_api_smp.h110 [inline] _raw_spin_lock_irqsave+0x3a/0x60 kernel/locking/spinlock.c162 cfg80211_dev_free+0x30/0x3d0 net/wireless/core.c1196 device_release+0xa1/0x240 drivers/base/core.c2568 kobject_cleanup lib/kobject.c689 [inline] kobject_release lib/kobject.c720 [inline] kref_put include/linux/kref.h65 [inline] kobject_put+0x1e4/0x5a0 lib/kobject.c737 put_device+0x1f/0x30 drivers/base/core.c3774 wiphy_free net/wireless/core.c1224 [inline] wiphy_new_nm+0x1c1f/0x2160 net/wireless/core.c562 ieee80211_alloc_hw_nm+0x1b7a/0x2260 net/mac80211/main.c835 mac80211_hwsim_new_radio+0x1d6/0x54e0 drivers/net/wireless/virtual/mac80211_hwsim.c5185 hwsim_new_radio_nl+0xb42/0x12b0 drivers/net/wireless/virtual/mac80211_hwsim.c6242 genl_family_rcv_msg_doit+0x202/0x2f0 net/netlink/genetlink.c1115 genl_family_rcv_msg net/netlink/genetlink.c1195 [inline] genl_rcv_msg+0x565/0x800 net/netlink/genetlink.c1210 netlink_rcv_skb+0x16b/0x440 net/netlink/af_netlink.c2533 genl_rcv+0x28/0x40 net/netlink/genetlink.c1219 netlink_unicast_kernel net/netlink/af_netlink.c1312 [inline] netlink_unicast+0x53c/0x7f0 net/netlink/af_netlink.c1338 netlink_sendmsg+0x8b8/0xd70 net/netlink/af_netlink.c1882 sock_sendmsg_nosec net/socket.c718 [inline] __sock_sendmsg net/socket.c733 [inline] ____sys_sendmsg+0xaaf/0xc90 net/socket.c2573 ___sys_sendmsg+0x135/0x1e0 net/socket.c2627 __sys_sendmsg+0x16e/0x220 net/socket.c2659 do_syscall_x64 arch/x86/entry/common.c52 [inline] do_syscall_64+0xcd/0x250 arch/x86/entry/common.c83 Close https//syzkaller.appspot.com/bug?extid=aaf0488c83d1d5f4f029",
    "enhanced_query": "In the Linux kernel, the following vulnerability has been resolved wifi cfg80211 init wiphy_work before allocating rfkill fails syzbort reported a uninitialize wiphy_work_lock in cfg80211_dev_free. [1] After rfkill allocation fails, the wiphy release process will be performed, which will cause cfg80211_dev_free to access the uninitialized wiphy_work related data. Move the initialization of wiphy_work to before rfkill initialization to avoid this issue. [1] INFO trying to register non-static key. The code is fine but needs lockdep annotation, or maybe you didnt initialize this object before use? turning off the locking correctness validator. CPU 0 UID 0 PID 5935 Comm syz-executor550 Not tainted 6.14.0-rc6-syzkaller-00103-g4003c9e78778 #0 Hardware name QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.16.3-debian-1.16.3-2~bpo12+1 04/01/2014 Call Trace __dump_stack lib/dump_stack.c94 [inline] dump_stack_lvl+0x116/0x1f0 lib/dump_stack.c120 assign_lock_key kernel/locking/lockdep.c983 [inline] register_lock_class+0xc39/0x1240 kernel/locking/lockdep.c1297 __lock_acquire+0x135/0x3c40 kernel/locking/lockdep.c5103 lock_acquire.part.0+0x11b/0x380 kernel/locking/lockdep.c5851 __raw_spin_lock_irqsave include/linux/spinlock_api_smp.h110 [inline] _raw_spin_lock_irqsave+0x3a/0x60 kernel/locking/spinlock.c162 cfg80211_dev_free+0x30/0x3d0 net/wireless/core.c1196 device_release+0xa1/0x240 drivers/base/core.c2568 kobject_cleanup lib/kobject.c689 [inline] kobject_release lib/kobject.c720 [inline] kref_put include/linux/kref.h65 [inline] kobject_put+0x1e4/0x5a0 lib/kobject.c737 put_device+0x1f/0x30 drivers/base/core.c3774 wiphy_free net/wireless/core.c1224 [inline] wiphy_new_nm+0x1c1f/0x2160 net/wireless/core.c562 ieee80211_alloc_hw_nm+0x1b7a/0x2260 net/mac80211/main.c835 mac80211_hwsim_new_radio+0x1d6/0x54e0 drivers/net/wireless/virtual/mac80211_hwsim.c5185 hwsim_new_radio_nl+0xb42/0x12b0 drivers/net/wireless/virtual/mac80211_hwsim.c6242 genl_family_rcv_msg_doit+0x202/0x2f0 net/netlink/genetlink.c1115 genl_family_rcv_msg net/netlink/genetlink.c1195 [inline] genl_rcv_msg+0x565/0x800 net/netlink/genetlink.c1210 netlink_rcv_skb+0x16b/0x440 net/netlink/af_netlink.c2533 genl_rcv+0x28/0x40 net/netlink/genetlink.c1219 netlink_unicast_kernel net/netlink/af_netlink.c1312 [inline] netlink_unicast+0x53c/0x7f0 net/netlink/af_netlink.c1338 netlink_sendmsg+0x8b8/0xd70 net/netlink/af_netlink.c1882 sock_sendmsg_nosec net/socket.c718 [inline] __sock_sendmsg net/socket.c733 [inline] ____sys_sendmsg+0xaaf/0xc90 net/socket.c2573 ___sys_sendmsg+0x135/0x1e0 net/socket.c2627 __sys_sendmsg+0x16e/0x220 net/socket.c2659 do_syscall_x64 arch/x86/entry/common.c52 [inline] do_syscall_64+0xcd/0x250 arch/x86/entry/common.c83 Close https//syzkaller.appspot.com/bug?extid=aaf0488c83d1d5f4f029 Consider specifically these CWEs: CWE-476 CWE-667 CWE-401 CWE-909 CWE-1285 CWE-362 CWE-415",
    "cwe_mentions": [
      "CWE-476",
      "CWE-667",
      "CWE-401",
      "CWE-909",
      "CWE-1285",
      "CWE-362",
      "CWE-415"
    ],
    "search_time": 3.2269856929779053
  },
  "timestamp": "2025-07-14 10:15:56",
  "cve_id": "CVE-2025-22119",
  "result_count": 20,
  "results": [
    {
      "cwe_id": "364",
      "name": "Signal Handler Race Condition",
      "type": "base",
      "score": 2.8651999999999997,
      "relationship_count": 0
    },
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "type": "Base",
      "score": 2.837044801494796,
      "relationship_count": 0
    },
    {
      "cwe_id": "123",
      "name": "Write-what-where Condition",
      "type": "base",
      "score": 2.4700000000000006,
      "relationship_count": 0
    },
    {
      "cwe_id": "129",
      "name": "Improper Validation of Array Index",
      "type": "variant",
      "score": 2.2704,
      "relationship_count": 0
    },
    {
      "cwe_id": "1325",
      "name": "Improperly Controlled Sequential Memory Allocation",
      "type": "base",
      "score": 2.2100000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "390",
      "name": "Detection of Error Condition Without Action",
      "type": "base",
      "score": 2.2100000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "789",
      "name": "Memory Allocation with Excessive Size Value",
      "type": "variant",
      "score": 2.04,
      "relationship_count": 0
    },
    {
      "cwe_id": "416",
      "name": "Use After Free",
      "type": "Variant",
      "score": 1.839129517006169,
      "relationship_count": 0
    },
    {
      "cwe_id": "415",
      "name": "Double Free",
      "type": "Variant",
      "score": 1.8368939760253051,
      "relationship_count": 0
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "type": "Class",
      "score": 1.7694784319771912,
      "relationship_count": 0
    },
    {
      "cwe_id": "120",
      "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
      "type": "base",
      "score": 1.7680000000000005,
      "relationship_count": 0
    },
    {
      "cwe_id": "1265",
      "name": "Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls",
      "type": "base",
      "score": 1.6848000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "386",
      "name": "Symbolic Name not Mapping to Correct Object",
      "type": "base",
      "score": 1.6744000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "1285",
      "name": "Improper Validation of Specified Index, Position, or Offset in Input",
      "type": "Base",
      "score": 1.6370557480026684,
      "relationship_count": 0
    },
    {
      "cwe_id": "61",
      "name": "UNIX Symbolic Link (Symlink) Following",
      "type": "compound",
      "score": 1.61,
      "relationship_count": 0
    },
    {
      "cwe_id": "609",
      "name": "Double-Checked Locking",
      "type": "base",
      "score": 1.5912000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "908",
      "name": "Use of Uninitialized Resource",
      "type": "Base",
      "score": 1.5627206617539233,
      "relationship_count": 0
    },
    {
      "cwe_id": "252",
      "name": "Unchecked Return Value",
      "type": "Base",
      "score": 1.5587932671494735,
      "relationship_count": 0
    },
    {
      "cwe_id": "456",
      "name": "Missing Initialization of a Variable",
      "type": "variant",
      "score": 1.51536,
      "relationship_count": 0
    },
    {
      "cwe_id": "823",
      "name": "Use of Out-of-range Pointer Offset",
      "type": "base",
      "score": 1.3676000000000001,
      "relationship_count": 0
    }
  ]
}