{
  "cve_id": "CVE-2024-3056",
  "description": "A flaw was found in Podman. This issue may allow an attacker to create a specially crafted container that, when configured to share the same IPC with at least one other container, can create a large number of IPC resources in /dev/shm. The malicious container will continue to exhaust resources until it is out-of-memory (OOM) killed. While the malicious containers cgroup will be removed, the IPC resources it created are not. Those resources are tied to the IPC namespace that will not be removed until all containers using it are stopped, and one non-malicious container is holding the namespace open. The malicious container is restarted, either automatically or by attacker control, repeating the process and increasing the amount of memory consumed. With a container configured to restart always, such as `podman run --restart=always`, this can result in a memory-based denial of service of the system.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "",
    "impact": "denial of service",
    "vector": "specially crafted container",
    "attacker": "attacker",
    "product": "Podman",
    "version": "",
    "component": ""
  },
  "reference_content": "Based on the provided content, here's a breakdown of the vulnerability information related to CVE-2024-3056:\n\n**Root Cause of Vulnerability:**\n- The vulnerability stems from how shared memory resources are handled within containerized environments using shared IPC namespaces. When a container that allocates IPC resources (specifically shared memory in `/dev/shm`) is killed, its cgroup is removed, but the allocated IPC resources are not. These resources remain tied to the IPC namespace.\n- If the malicious container is restarted (either automatically or through attacker control), it can allocate more IPC resources. This causes a memory leak because the old IPC resources are not cleaned up, leading to a progressive increase in memory consumption.\n- The memory allocated is assigned to the container's cgroup which has a memory limit. When that limit is reached the kernel refuses to allocate more memory for the container. However, when the container exits, the shared memory is not freed and is still allocated to the first cgroup. The cgroup is no longer accessible from userspace, but it is still referenced internally in the kernel. This creates a memory leak.\n\n**Weaknesses/Vulnerabilities Present:**\n- **Resource Leak:** Shared memory resources are not properly released when a container is terminated, leading to memory leaks.\n- **Cgroup Management Issue:** The kernel's cgroup management does not account for shared memory resources allocated by terminated cgroups, leaving orphaned allocations in the IPC namespace.\n- **Lack of Resource Migration:** Memory allocated in the destroyed cgroup is not migrated to another cgroup using the same IPC.\n\n**Impact of Exploitation:**\n- **Denial of Service (DoS):** Repeatedly restarting a malicious container that creates IPC resources can exhaust the system's memory, leading to a denial-of-service condition.\n- **System Instability:** Continuous memory exhaustion can cause system instability.\n\n**Attack Vectors:**\n- **Malicious Container:** An attacker can create a specially crafted container that exploits the shared IPC namespace vulnerability.\n- **Shared IPC Namespace:** Containers must be configured to share an IPC namespace.\n- **Container Restart:** The malicious container must restart either automatically or by attacker control.\n\n**Required Attacker Capabilities/Position:**\n- **Ability to Deploy Container:** The attacker needs the ability to deploy and run a malicious container in the target environment.\n- **Shared IPC Namespace Configuration:** The attacker must target environments where containers are configured to share an IPC namespace.\n- **Restart Control:** The attacker benefits from having the ability to cause the malicious container to restart, or relies on the container configuration (such as `podman run --restart=always`) to have it automatically restart.\n- **Limited Privilege:** The vulnerability can be triggered by a container running with limited user privileges.\n\n**Additional Notes**\n- The bug report mentions that this issue is applicable to Podman, and likely also to Kubernetes, Docker, and other container runtimes that utilize shared IPC namespaces.\n- NetApp has stated that it is investigating the vulnerability and does not have any affected products at this time.\n- The vulnerability is triggered by a container that allocates IPC resources which are not freed when that container exits.\n- The issue is related to the kernel not properly tracking and releasing the allocated IPC resources tied to the cgroup of a container that has been destroyed.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-401 | Missing Release of Memory after Effective Lifetime | 0.9 | Variant | Allowed | Primary CWE |\n| CWE-770 | Allocation of Resources Without Limits or Throttling | 0.7 | Base | Allowed | Secondary Candidate |\n| CWE-400 | Uncontrolled Resource Consumption | 0.6 | Class | Discouraged | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE selected is CWE-401 (Missing Release of Memory after Effective Lifetime), which is a Variant. This choice reflects the specific issue of memory not being released. CWE-770 (Allocation of Resources Without Limits or Throttling) is a related Base CWE, as the vulnerability involves uncontrolled allocation. CWE-400 (Uncontrolled Resource Consumption) is a higher-level Class CWE that describes the impact of resource exhaustion.\n\n```mermaid\ngraph TD\n    cwe401[\"CWE-401: Missing Release of Memory after Effective Lifetime\"]\n    cwe770[\"CWE-770: Allocation of Resources Without Limits or Throttling\"]\n    cwe400[\"CWE-400: Uncontrolled Resource Consumption\"]\n    \n    cwe401 -->|CHILDOF| cwe400\n    cwe770 -->|PARENT OF| cwe401\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe401 primary\n    class cwe770,cwe400 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **missing release of memory** (CWE-401) after a container is terminated. This leads to an **uncontrolled allocation of resources** (CWE-770) as the malicious container is restarted, eventually resulting in **uncontrolled resource consumption** (CWE-400) and a denial-of-service condition.\n\n## Summary of Analysis\nThe initial assessment focused on identifying the root cause of the vulnerability, which is the **failure to release shared memory resources** when a container terminates. The evidence provided in the \"CVE Reference Links Content Summary\" clearly supports this, stating that \"Shared memory resources are not properly released when a container is terminated, leading to memory leaks.\" The retriever results highlighted CWE-401, CWE-770, and CWE-400 as potential candidates.\n\nCWE-401 (Missing Release of Memory after Effective Lifetime) was selected as the primary CWE because it directly addresses the root cause. CWE-770 (Allocation of Resources Without Limits or Throttling) is a contributing factor, as the vulnerability relies on the ability to allocate resources without proper limits. CWE-400 (Uncontrolled Resource Consumption) describes the impact, but it is a discouraged CWE. The graph relationships helped clarify the sequence of events, with CWE-401 leading to CWE-400. The selected CWEs are at the optimal level of specificity, with CWE-401 being a Variant and CWE-770 being a Base.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-789: Memory Allocation with Excessive Size Value\n**Abstraction Level**: Variant\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-404: Improper Resource Shutdown or Release\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product does not release or incorrectly releases a resource before it is made available for re-use.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-401: Missing Release of Memory after Effective Lifetime\n**Abstraction Level**: Variant\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Technical Explanation for CWE-401:**\n\n*   How the vulnerability's details match the CWE's characteristics: The vulnerability involves a container allocating shared memory resources but failing to release them upon termination. This directly aligns with CWE-401's description of a **missing release of memory** after it has been used.\n*   The security implications and potential impact: The impact is a memory leak that leads to resource exhaustion and a denial-of-service condition. This occurs because the allocated memory is not freed, eventually consuming all available system memory.\n*   Any parent-child relationships or chain patterns that influenced your mapping: CWE-401 is a Variant of CWE-400 (Uncontrolled Resource Consumption), which describes the broader impact of resource exhaustion. It can also be related to CWE-770 (Allocation of Resources Without Limits or Throttling) as the **lack of resource management** contributes to the issue.\n*   Whether the weakness is primary or secondary in the vulnerability: CWE-401 is the primary weakness because it is the root cause of the memory leak.\n*   How the official MITRE mapping guidance influenced your decision: The MITRE mapping guidance allows for the use of Variant-level CWEs, which supports the selection of CWE-401.\n\n**Technical Explanation for CWE-770:**\n\n*   How the vulnerability's details match the CWE's characteristics: The container can allocate IPC resources without any restrictions on the amount, which leads to resource exhaustion.\n*   The security implications and potential impact: This can lead to a denial of service.\n*   Any parent-child relationships or chain patterns that influenced your mapping: CWE-770 is a Base level CWE.\n*   Whether the weakness is primary or secondary in the vulnerability: CWE-770 is a secondary weakness because it is a condition that allows the primary weakness to happen.\n*   How the official MITRE mapping guidance influenced your decision: The MITRE mapping guidance allows for the use of Base-level CWEs, which supports the selection of CWE-770.\n\n**Technical Explanation for CWE-400:**\n\n*   How the vulnerability's details match the CWE's characteristics: The vulnerability leads to an uncontrolled consumption of system memory, which aligns with CWE-400's description.\n*   The security implications and potential impact: The impact is a denial-of-service condition due to resource exhaustion.\n*   Any parent-child relationships or chain patterns that influenced your mapping: CWE-400 is a Class level CWE.\n*   Whether the weakness is primary or secondary in the vulnerability: CWE-400 describes the impact of the primary weakness.\n*   How the official MITRE mapping guidance influenced your decision: The MITRE mapping guidance discourages using CWE-400.\n\n**CWEs Considered But Not Used:**\n\n*   CWE-789 (Memory Allocation with Excessive Size Value): While the vulnerability does involve memory allocation, the root cause is not specifically related to the size of the allocation but rather the failure to release the allocated memory.\n*   CWE-404 (Improper Resource Shutdown or Release): Similar to CWE-401, but more general. CWE-401 is more specific to memory and is thus a better fit.\n*   CWE-190 (Integer Overflow or Wraparound): This CWE is not relevant as there is no integer overflow involved in the vulnerability.\n*   CWE-212 (Improper Removal of Sensitive Information Before Storage or Transfer): This CWE is not relevant as the vulnerability does not involve sensitive information.\n*   CWE-863 (Incorrect Authorization): This CWE is not relevant as the vulnerability is not related to authorization.\n*   CWE-1325 (Improperly Controlled Sequential Memory Allocation): This CWE is not directly relevant because the core issue is the failure to release memory, rather than the sequential allocation itself.\n*   CWE-22 (Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')): This CWE is not relevant as the vulnerability does not involve path traversal.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-401 | Missing Release of Memory after Effective Lifetime | 0.9 | Variant | Allowed | Primary CWE |\n| CWE-770 | Allocation of Resources Without Limits or Throttling | 0.7 | Base | Allowed | Secondary Candidate |\n| CWE-400 | Uncontrolled Resource Consumption | 0.6 | Class | Discouraged | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE selected is CWE-401 (Missing Release of Memory after Effective Lifetime), which is a Variant. This choice reflects the specific issue of memory not being released. CWE-770 (Allocation of Resources Without Limits or Throttling) is a related Base CWE, as the vulnerability involves uncontrolled allocation. CWE-400 (Uncontrolled Resource Consumption) is a higher-level Class CWE that describes the impact of resource exhaustion.\n\n```mermaid\ngraph TD\n    cwe401[\"CWE-401: Missing Release of Memory after Effective Lifetime\"]\n    cwe770[\"CWE-770: Allocation of Resources Without Limits or Throttling\"]\n    cwe400[\"CWE-400: Uncontrolled Resource Consumption\"]\n    \n    cwe401 -->|CHILDOF| cwe400\n    cwe770 -->|PARENT OF| cwe401\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe401 primary\n    class cwe770,cwe400 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **missing release of memory** (CWE-401) after a container is terminated. This leads to an **uncontrolled allocation of resources** (CWE-770) as the malicious container is restarted, eventually resulting in **uncontrolled resource consumption** (CWE-400) and a denial-of-service condition.\n\n## Summary of Analysis\nThe initial assessment focused on identifying the root cause of the vulnerability, which is the **failure to release shared memory resources** when a container terminates. The evidence provided in the \"CVE Reference Links Content Summary\" clearly supports this, stating that \"Shared memory resources are not properly released when a container is terminated, leading to memory leaks.\" The retriever results highlighted CWE-401, CWE-770, and CWE-400 as potential candidates.\n\nCWE-401 (Missing Release of Memory after Effective Lifetime) was selected as the primary CWE because it directly addresses the root cause. CWE-770 (Allocation of Resources Without Limits or Throttling) is a contributing factor, as the vulnerability relies on the ability to allocate resources without proper limits. CWE-400 (Uncontrolled Resource Consumption) describes the impact, but it is a discouraged CWE. The graph relationships helped clarify the sequence of events, with CWE-401 leading to CWE-400. The selected CWEs are at the optimal level of specificity, with CWE-401 being a Variant and CWE-770 being a Base.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-789: Memory Allocation with Excessive Size Value\n**Abstraction Level**: Variant\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-404: Improper Resource Shutdown or Release\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product does not release or incorrectly releases a resource before it is made available for re-use.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-401: Missing Release of Memory after Effective Lifetime\n**Abstraction Level**: Variant\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Technical Explanation for CWE-401:**\n\n*   How the vulnerability's details match the CWE's characteristics: The vulnerability involves a container allocating shared memory resources but failing to release them upon termination. This directly aligns with CWE-401's description of a **missing release of memory** after it has been used.\n*   The security implications and potential impact: The impact is a memory leak that leads to resource exhaustion and a denial-of-service condition. This occurs because the allocated memory is not freed, eventually consuming all available system memory.\n*   Any parent-child relationships or chain patterns that influenced your mapping: CWE-401 is a Variant of CWE-400 (Uncontrolled Resource Consumption), which describes the broader impact of resource exhaustion. It can also be related to CWE-770 (Allocation of Resources Without Limits or Throttling) as the **lack of resource management** contributes to the issue.\n*   Whether the weakness is primary or secondary in the vulnerability: CWE-401 is the primary weakness because it is the root cause of the memory leak.\n*   How the official MITRE mapping guidance influenced your decision: The MITRE mapping guidance allows for the use of Variant-level CWEs, which supports the selection of CWE-401.\n\n**Technical Explanation for CWE-770:**\n\n*   How the vulnerability's details match the CWE's characteristics: The container can allocate IPC resources without any restrictions on the amount, which leads to resource exhaustion.\n*   The security implications and potential impact: This can lead to a denial of service.\n*   Any parent-child relationships or chain patterns that influenced your mapping: CWE-770 is a Base level CWE.\n*   Whether the weakness is primary or secondary in the vulnerability: CWE-770 is a secondary weakness because it is a condition that allows the primary weakness to happen.\n*   How the official MITRE mapping guidance influenced your decision: The MITRE mapping guidance allows for the use of Base-level CWEs, which supports the selection of CWE-770.\n\n**Technical Explanation for CWE-400:**\n\n*   How the vulnerability's details match the CWE's characteristics: The vulnerability leads to an uncontrolled consumption of system memory, which aligns with CWE-400's description.\n*   The security implications and potential impact: The impact is a denial-of-service condition due to resource exhaustion.\n*   Any parent-child relationships or chain patterns that influenced your mapping: CWE-400 is a Class level CWE.\n*   Whether the weakness is primary or secondary in the vulnerability: CWE-400 describes the impact of the primary weakness.\n*   How the official MITRE mapping guidance influenced your decision: The MITRE mapping guidance discourages using CWE-400.\n\n**CWEs Considered But Not Used:**\n\n*   CWE-789 (Memory Allocation with Excessive Size Value): While the vulnerability does involve memory allocation, the root cause is not specifically related to the size of the allocation but rather the failure to release the allocated memory.\n*   CWE-404 (Improper Resource Shutdown or Release): Similar to CWE-401, but more general. CWE-401 is more specific to memory and is thus a better fit.\n*   CWE-190 (Integer Overflow or Wraparound): This CWE is not relevant as there is no integer overflow involved in the vulnerability.\n*   CWE-212 (Improper Removal of Sensitive Information Before Storage or Transfer): This CWE is not relevant as the vulnerability does not involve sensitive information.\n*   CWE-863 (Incorrect Authorization): This CWE is not relevant as the vulnerability is not related to authorization.\n*   CWE-1325 (Improperly Controlled Sequential Memory Allocation): This CWE is not directly relevant because the core issue is the failure to release memory, rather than the sequential allocation itself.\n*   CWE-22 (Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')): This CWE is not relevant as the vulnerability does not involve path traversal.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-863:**\n- 863 (Incorrect Authorization) - ROOT\n\n\n**Chain starting from CWE-400:**\n- 400 (Uncontrolled Resource Consumption) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "770",
        "name": "Allocation of Resources Without Limits or Throttling",
        "source": "sparse"
      },
      "similarity": 305.7877806714426
    },
    {
      "metadata": {
        "doc_id": "400",
        "name": "Uncontrolled Resource Consumption",
        "source": "sparse"
      },
      "similarity": 299.4023467292829
    },
    {
      "metadata": {
        "doc_id": "401",
        "name": "Missing Release of Memory after Effective Lifetime",
        "source": "sparse"
      },
      "similarity": 294.47781700531124
    },
    {
      "metadata": {
        "doc_id": "668",
        "name": "Exposure of Resource to Wrong Sphere",
        "source": "sparse"
      },
      "similarity": 281.0362534047957
    },
    {
      "metadata": {
        "doc_id": "190",
        "name": "Integer Overflow or Wraparound",
        "source": "sparse"
      },
      "similarity": 280.6165886612891
    },
    {
      "metadata": {
        "doc_id": "789",
        "name": "Memory Allocation with Excessive Size Value",
        "source": "sparse"
      },
      "similarity": 280.0352692963524
    },
    {
      "metadata": {
        "doc_id": "212",
        "name": "Improper Removal of Sensitive Information Before Storage or Transfer",
        "source": "sparse"
      },
      "similarity": 279.0631172993907
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 278.5880620011372
    },
    {
      "metadata": {
        "doc_id": "1325",
        "name": "Improperly Controlled Sequential Memory Allocation",
        "type": "Base",
        "original_content": "The product manages a group of objects or resources and performs a separate memory allocation for each object, but it does not properly limit the total amount of memory that is consumed by all of the combined objects.",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5148363062762971,
            "graph": 2.8611931079906103
          }
        }
      },
      "similarity": 0.5148363062762971
    },
    {
      "doc_id": "22",
      "text": "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
      "score": 2.4232000000000005,
      "metadata": {
        "doc_id": "22",
        "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
        "type": "base",
        "original_content": "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
        "relationships": [
          {
            "source_id": "22",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "22",
            "target_id": "36",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "22",
            "target_id": "23",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "22",
            "target_id": "20",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "22",
            "target_id": "172",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "22",
            "target_id": "668",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "22",
            "target_id": "706",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "22",
            "target_id": "706",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "22",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "706",
            "target_id": "22",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "668",
            "target_id": "22",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "36",
            "target_id": "22",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1340"
            }
          },
          {
            "source_id": "36",
            "target_id": "22",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1305"
            }
          },
          {
            "source_id": "36",
            "target_id": "22",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "23",
            "target_id": "22",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1340"
            }
          },
          {
            "source_id": "23",
            "target_id": "22",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1305"
            }
          },
          {
            "source_id": "23",
            "target_id": "22",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "20",
            "target_id": "22",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "172",
            "target_id": "22",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 0.8,
          "abstraction_path": 0.7200000000000001,
          "sequence_path": 0.8
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "770",
                  "20",
                  "CANFOLLOW"
                ],
                [
                  "20",
                  "22",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "relationship_chain",
              "source": "770"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "668",
                  "22",
                  "PARENTOF"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "abstraction_path_down",
              "source": "668"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "770",
                  "20",
                  "CANFOLLOW"
                ],
                [
                  "20",
                  "22",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "vulnerability_sequence_forward",
              "source": "770"
            }
          }
        },
        "abstraction_level": "base",
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.4232000000000005
          }
        }
      },
      "similarity": 2.4232000000000005
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-863",
      "CWE-400",
      "CWE-770",
      "CWE-404",
      "CWE-22",
      "CWE-401",
      "CWE-190",
      "CWE-789",
      "CWE-1325",
      "CWE-212"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}