{
  "cve_id": "CVE-2024-47805",
  "description": "Jenkins Credentials Plugin 1380.va_435002fa_924 and earlier, except 1371.1373.v4eb_fa_b_7161e9, does not redact encrypted values of credentials using the `SecretBytes` type when accessing item `config.xml` via REST API or CLI.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "",
    "impact": "redact encrypted values of credentials",
    "vector": "accessing item config.xml",
    "attacker": "",
    "product": "Jenkins Credentials Plugin",
    "version": "1380.va_435002fa_924 and earlier",
    "component": "REST API or CLI"
  },
  "reference_content": "Based on the provided content, here's the breakdown of CVE-2024-47805:\n\n**Root Cause of Vulnerability:**\nThe Credentials Plugin did not redact encrypted values of credentials using the `SecretBytes` type when accessing item `config.xml` via REST API or CLI.\n\n**Weaknesses/Vulnerabilities Present:**\n- Exposure of encrypted credentials: The plugin failed to properly redact encrypted `SecretBytes` values when accessed through the REST API or CLI, specifically when retrieving an item's `config.xml`.\n- Lack of proper data sanitization or redaction: The plugin didn't sanitize or redact sensitive encrypted credential data before exposing it to users.\n\n**Impact of Exploitation:**\n- Information Disclosure: Attackers with Item/Extended Read permission can view the encrypted values of `SecretBytes` type credentials, such as certificate credentials or secret file credentials. This could lead to the compromise of the system/application protected by these credentials.\n\n**Attack Vectors:**\n- REST API access: By making API calls to retrieve the `config.xml` of an item.\n- CLI access: By using the Jenkins CLI to retrieve the `config.xml` of an item.\n\n**Required Attacker Capabilities/Position:**\n- Must have Item/Extended Read permission within Jenkins.\n- Must be able to access the Jenkins instance (network access).\n\n**Affected plugin and versions:**\n- `credentials` plugin versions up to and including 1380.va\\_435002fa\\_924, except 1371.1373.v4eb\\_fa\\_b\\_7161e9.\n\n**Fixed plugin version:**\n- `credentials` plugin version 1381.v2c3a\\_12074da\\_b\\_\n\n**Additional notes:**\n- The fix for this issue is only fully effective on Jenkins 2.479 and newer, or LTS 2.462.3 and newer. While the patched Credentials Plugin can be installed on older Jenkins versions, the encrypted values will not be redacted.\n- This issue is similar to an older vulnerability (SECURITY-266) that affected inline secrets and some credential types.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n\n| CWE ID  | CWE Name                                                        | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :------- | :-------------------------------------------------------------- | :--------- | :-------------------- | :------------------------------ | :------------------------------ |\n| CWE-532 | Insertion of Sensitive Information into Log File                | 0.8        | Base                  | Allowed                         | Primary CWE                     |\n| CWE-312 | Cleartext Storage of Sensitive Information                      | 0.6        | Base                  | Allowed                         | Secondary Candidate             |\n| CWE-256 | Plaintext Storage of a Password                                 | 0.5        | Base                  | Allowed                         | Secondary Candidate             |\n| CWE-522 | Insufficiently Protected Credentials                            | 0.4        | Class                 | Allowed-with-Review             | Secondary Candidate             |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.7\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\n\nThe primary relationship that influenced the decision was the hierarchical relationship between CWE-532 (Insertion of Sensitive Information into Log File) and its parent CWEs. While the vulnerability specifically exposes encrypted values, the fact that these values are not properly redacted when accessing the `config.xml` file through the REST API or CLI aligns well with the concept of inserting sensitive information into a location (the `config.xml` file) where it should not be.\n\n```mermaid\ngraph TD\n    cwe532[\"CWE-532: Insertion of Sensitive Information into Log File\"]\n    cwe200[\"CWE-200: Information Exposure\"]\n    cwe538[\"CWE-538: Insertion of Sensitive Information into Externally-Accessible File or Directory\"]\n\n    cwe532 -->|CHILDOF| cwe200\n    cwe532 -->|CHILDOF| cwe538\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe532 primary\n    class cwe200,cwe538 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with the **improper** handling of sensitive information leading to information exposure.\n\n1.  **Root Cause:** The Credentials Plugin does not properly redact encrypted values of credentials using the `SecretBytes` type. This is a form of **improper** handling of sensitive data.\n2.  The sensitive information (`SecretBytes` values) is then inserted into the `config.xml` file.\n3.  Exposure: The `config.xml` file is accessible via REST API or CLI, leading to potential exposure of the sensitive information to unauthorized users with Item/Extended Read permissions.\n\n## Summary of Analysis\n\nThe initial analysis focused on identifying the root cause of the vulnerability and mapping it to the most appropriate CWE. The primary evidence supporting this analysis comes from the \"CVE Reference Links Content Summary,\" which explicitly states that the plugin \"did not redact encrypted values of credentials using the `SecretBytes` type.\" This indicates a failure to properly handle sensitive data, which aligns with the description of CWE-532.\n\nThe retriever results also suggested CWE-256 (Plaintext Storage of a Password) and CWE-522 (Insufficiently Protected Credentials). However, the vulnerability is not about storing passwords in plaintext or generally insufficient protection of credentials. Instead, it's about exposing encrypted values due to a lack of proper redaction during access.\n\nThe selection of CWE-532 is based on the evidence that the plugin **inserts** sensitive, albeit encrypted, information into a file (`config.xml`) that is then accessible through specific channels (REST API/CLI). While the information is encrypted, the lack of redaction means that it's still considered exposed.\n\nOther CWEs Considered:\n\n*   CWE-256 (Plaintext Storage of a Password): While related to credential storage, this CWE doesn't accurately reflect the vulnerability because the credentials are not stored in plaintext. They are encrypted, but the encrypted values are exposed due to a **lack** of redaction.\n*   CWE-522 (Insufficiently Protected Credentials): This is a broader category, and while it could apply, CWE-532 provides a more specific description of the vulnerability.\n*   CWE-312 (Cleartext Storage of Sensitive Information): Similar to CWE-256, this doesn't fit because the data is not stored in cleartext.\n\nUltimately, CWE-532 was chosen because it best captures the essence of the vulnerability: the **insertion** of sensitive information (encrypted credential values) into a location where it can be improperly accessed due to a **lack** of redaction.\n\n#",
  "analysis_with_relationships": "# Summary\n\n| CWE ID  | CWE Name                                                        | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :------- | :-------------------------------------------------------------- | :--------- | :-------------------- | :------------------------------ | :------------------------------ |\n| CWE-532 | Insertion of Sensitive Information into Log File                | 0.8        | Base                  | Allowed                         | Primary CWE                     |\n| CWE-312 | Cleartext Storage of Sensitive Information                      | 0.6        | Base                  | Allowed                         | Secondary Candidate             |\n| CWE-256 | Plaintext Storage of a Password                                 | 0.5        | Base                  | Allowed                         | Secondary Candidate             |\n| CWE-522 | Insufficiently Protected Credentials                            | 0.4        | Class                 | Allowed-with-Review             | Secondary Candidate             |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.7\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\n\nThe primary relationship that influenced the decision was the hierarchical relationship between CWE-532 (Insertion of Sensitive Information into Log File) and its parent CWEs. While the vulnerability specifically exposes encrypted values, the fact that these values are not properly redacted when accessing the `config.xml` file through the REST API or CLI aligns well with the concept of inserting sensitive information into a location (the `config.xml` file) where it should not be.\n\n```mermaid\ngraph TD\n    cwe532[\"CWE-532: Insertion of Sensitive Information into Log File\"]\n    cwe200[\"CWE-200: Information Exposure\"]\n    cwe538[\"CWE-538: Insertion of Sensitive Information into Externally-Accessible File or Directory\"]\n\n    cwe532 -->|CHILDOF| cwe200\n    cwe532 -->|CHILDOF| cwe538\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe532 primary\n    class cwe200,cwe538 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with the **improper** handling of sensitive information leading to information exposure.\n\n1.  **Root Cause:** The Credentials Plugin does not properly redact encrypted values of credentials using the `SecretBytes` type. This is a form of **improper** handling of sensitive data.\n2.  The sensitive information (`SecretBytes` values) is then inserted into the `config.xml` file.\n3.  Exposure: The `config.xml` file is accessible via REST API or CLI, leading to potential exposure of the sensitive information to unauthorized users with Item/Extended Read permissions.\n\n## Summary of Analysis\n\nThe initial analysis focused on identifying the root cause of the vulnerability and mapping it to the most appropriate CWE. The primary evidence supporting this analysis comes from the \"CVE Reference Links Content Summary,\" which explicitly states that the plugin \"did not redact encrypted values of credentials using the `SecretBytes` type.\" This indicates a failure to properly handle sensitive data, which aligns with the description of CWE-532.\n\nThe retriever results also suggested CWE-256 (Plaintext Storage of a Password) and CWE-522 (Insufficiently Protected Credentials). However, the vulnerability is not about storing passwords in plaintext or generally insufficient protection of credentials. Instead, it's about exposing encrypted values due to a lack of proper redaction during access.\n\nThe selection of CWE-532 is based on the evidence that the plugin **inserts** sensitive, albeit encrypted, information into a file (`config.xml`) that is then accessible through specific channels (REST API/CLI). While the information is encrypted, the lack of redaction means that it's still considered exposed.\n\nOther CWEs Considered:\n\n*   CWE-256 (Plaintext Storage of a Password): While related to credential storage, this CWE doesn't accurately reflect the vulnerability because the credentials are not stored in plaintext. They are encrypted, but the encrypted values are exposed due to a **lack** of redaction.\n*   CWE-522 (Insufficiently Protected Credentials): This is a broader category, and while it could apply, CWE-532 provides a more specific description of the vulnerability.\n*   CWE-312 (Cleartext Storage of Sensitive Information): Similar to CWE-256, this doesn't fit because the data is not stored in cleartext.\n\nUltimately, CWE-532 was chosen because it best captures the essence of the vulnerability: the **insertion** of sensitive information (encrypted credential values) into a location where it can be improperly accessed due to a **lack** of redaction.\n\n#\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-538:**\n- 538 (Insertion of Sensitive Information into Externally-Accessible File or Directory) - ROOT\n\n\n**Chain starting from CWE-256:**\n- 256 (Plaintext Storage of a Password) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "256",
        "name": "Plaintext Storage of a Password",
        "source": "sparse"
      },
      "similarity": 59.72840009358451
    },
    {
      "metadata": {
        "doc_id": "522",
        "name": "Insufficiently Protected Credentials",
        "source": "sparse"
      },
      "similarity": 59.7255375702711
    },
    {
      "metadata": {
        "doc_id": "532",
        "name": "Insertion of Sensitive Information into Log File",
        "source": "sparse"
      },
      "similarity": 58.64388174969925
    },
    {
      "metadata": {
        "doc_id": "862",
        "name": "Missing Authorization",
        "source": "sparse"
      },
      "similarity": 55.50641157159235
    },
    {
      "metadata": {
        "doc_id": "549",
        "name": "Missing Password Field Masking",
        "source": "sparse"
      },
      "similarity": 51.981188021558346
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 50.569778024632846
    },
    {
      "metadata": {
        "doc_id": "257",
        "name": "Storing Passwords in a Recoverable Format",
        "source": "sparse"
      },
      "similarity": 46.69440577431018
    },
    {
      "metadata": {
        "doc_id": "538",
        "name": "Insertion of Sensitive Information into Externally-Accessible File or Directory",
        "source": "sparse"
      },
      "similarity": 46.09241405082089
    },
    {
      "metadata": {
        "doc_id": "260",
        "name": "Password in Configuration File",
        "type": "Base",
        "original_content": "The product stores a password in a configuration file that might be accessible to actors who do not know the password.",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.4795117470001391,
            "graph": 1.7062918218526895
          }
        }
      },
      "similarity": 0.4795117470001391
    },
    {
      "doc_id": "555",
      "text": "The J2EE application stores a plaintext password in a configuration file.",
      "score": 0.5271573037023148,
      "metadata": {
        "doc_id": "555",
        "name": "J2EE Misconfiguration: Plaintext Password in Configuration File",
        "type": "Variant",
        "extended_description": "Storing a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resource, making it an easy target for attackers.",
        "alternate_terms": [],
        "original_content": "The J2EE application stores a plaintext password in a configuration file.",
        "relationships": [
          {
            "source_id": "555",
            "target_id": "260",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "260",
            "target_id": "555",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "source": "graph",
        "sources": [
          "vector",
          "graph"
        ],
        "vector_score": 0.5271573037023148,
        "graph_score": 2.1624,
        "score_components": {
          "relationship_chain": 0.3,
          "explicit_mention": 1.0,
          "abstraction_path": 0.76
        },
        "abstraction_factor": 1.2,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "260",
                  "555",
                  "PARENTOF"
                ]
              ],
              "score": 0.3,
              "type": "relationship_chain",
              "source": "260"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "260",
                  "555",
                  "PARENTOF"
                ]
              ],
              "score": 0.76,
              "type": "abstraction_path_down",
              "source": "260"
            }
          }
        },
        "is_explicit": true,
        "abstraction_level": "variant",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.4565717272075157,
            "graph": 1.5083029214809258
          }
        }
      },
      "similarity": 1.5083029214809258
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-538",
      "CWE-256",
      "CWE-312",
      "CWE-522",
      "CWE-200",
      "CWE-532"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}