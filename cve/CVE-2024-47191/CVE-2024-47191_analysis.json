{
  "cve_id": "CVE-2024-47191",
  "description": "pam_oath.so in oath-toolkit 2.6.7 through 2.6.11 before 2.6.12 allows root privilege escalation because, in the context of PAM code running as root, it **mishandles usersfile access**, such as by calling fchown in the presence of a symlink.",
  "key_phrases": {
    "rootcause": "mishandles usersfile access",
    "weakness": "",
    "impact": "root privilege escalation",
    "vector": "symlink attack",
    "attacker": "",
    "product": "oath-toolkit",
    "version": "2.6.7 through 2.6.11 before 2.6.12",
    "component": "pam_oath.so"
  },
  "reference_content": "Based on the provided content, here's an analysis of CVE-2024-47191:\n\n**Root Cause of Vulnerability:**\n\nThe vulnerability stems from the `pam_oath.so` PAM module and its associated `liboath` library, specifically the `oath_authenticate_usersfile()` function, which handles the reading and writing of the usersfile. The core issue lies in the usage of `fopen(\"w\")` to create lock and new files without verifying the path, allowing symbolic links to be followed, coupled with not dropping privileges when accessing user-controlled paths. This allows for arbitrary file overwrites when `${HOME}` is used in the `usersfile` configuration.\n\n**Weaknesses/Vulnerabilities Present:**\n\n*   **Time-of-Check Time-of-Use (TOCTOU) Pattern:** Although not a classic race condition, using `fopen(\"w\")` on a path controlled by the user allows the user to manipulate the path between the time the path is \"checked\" and when it is opened for writing.\n*   **Unsafe File Operations:** The code uses `fopen()` with \"w\" mode, which truncates existing files, and follows symlinks.\n*   **Privilege Escalation:** The PAM module runs as root, and the vulnerable code doesn't drop privileges before operating on user-controlled files.\n*   **Insecure Lockfile Handling:** The lockfile is created using `fopen(\"w\")`, which can overwrite existing symlinks, and then deleted after usage which could lead to race conditions with other processes.\n*   **Lack of Path Sanitization:**  The code does not properly validate or sanitize file paths, allowing the usage of `${HOME}` to access arbitrary files.\n*   **Insecure File Ownership:**  After writing the temporary file it uses `fchown()` to set the file ownership, which when combined with the ability to write to any file via a symlink allows a user to change the ownership of arbitrary files.\n\n**Impact of Exploitation:**\n\n*   **Local Privilege Escalation:** A local user can overwrite arbitrary files, including critical system files like `/etc/shadow`, gaining root privileges.\n*   **Arbitrary File Overwrite:** Users can overwrite the content of any file they can create a symlink to.\n*   **Denial of Service:**  Users might be able to prevent the PAM module from obtaining necessary locks, causing denial of service.\n*   **Data Corruption:**  By overwriting critical files, an attacker can cause data corruption or instability of the system.\n\n**Attack Vectors:**\n\n*   **Symbolic Link Manipulation:** A malicious user creates a symbolic link (e.g., `ln -s /etc/shadow $HOME/user.oath.new`) pointing to a privileged file in the user's home directory.\n*   **Vulnerable Configuration:** The `pam_oath.so` module is configured with `usersfile=${HOME}/some/path`, which makes it vulnerable to symlink attacks.\n\n**Required Attacker Capabilities/Position:**\n\n*   **Local User Access:** The attacker must have local user access to the system.\n*   **Ability to Create Symlinks:** The attacker must be able to create symbolic links in their home directory (or any path used in `usersfile` that is under their control)\n*   **PAM Authentication Trigger:** The attacker needs to trigger a PAM authentication attempt that uses the vulnerable `pam_oath.so` module (e.g., by logging in via a service configured to use the pam_oath.so module).\n\n**Additional Details:**\n\n*   **Affected Versions:** OATH Toolkit `pam_oath` and `liboath` versions 2.6.7 to 2.6.11 are affected.\n*   **Fixed Version:** The vulnerability is fixed in OATH Toolkit version 2.6.12.\n*   **Mitigation:** Applying the patch from version 2.6.12 or the SUSE patch (with added hardening) to earlier versions will prevent exploitation.\n*   **SUSE Patch:** The SUSE patch includes additional hardening, such as using the `*at` family of system calls, dropping privileges to the file owner and using the usersfile itself for locking. It is less portable as it utilizes Linux-specific features.\n*   **Upstream Patch:** The upstream patch aims for portability and uses `fopen(wx)` to prevent opening of existing files. It also drops privileges to the PAM user being authenticated.\n*   **`fopen(wx)`:** The upstream fix uses `fopen(wx)`, which is an exclusive create mode, preventing the overwrite of a symlink. It utilizes gnulib for cross-platform support of `fopen(wx)`.\n\nThis vulnerability highlights the importance of secure file handling, especially in privileged contexts, and the risks associated with using user-provided paths without proper validation. The use of  `fopen(\"w\")` is also problematic and should be avoided.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID    | CWE Name                                                              | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :---------- | :-------------------------------------------------------------------- | :--------- | :-------------------- | :------------------------------ | :------------------------------ |\n| CWE-59      | Improper Link Resolution Before File Access ('Link Following')        | 0.95       | Base                  | Primary                         | Allowed                       |\n| CWE-266     | Incorrect Privilege Assignment                                        | 0.75       | Base                  | Secondary                       | Allowed                       |\n| CWE-367     | Time-of-check Time-of-use (TOCTOU) Race Condition                    | 0.7        | Base                  | Secondary                       | Allowed                       |\n| CWE-272     | Least Privilege Violation                                           | 0.65       | Base                  | Secondary                       | Allowed                       |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-59, representing the core issue of improper link resolution. CWE-367 is linked via a CANPRECEDE relationship to CWE-59. There is a CHILDOF relationship between CWE-61, CWE-363, and CWE-59. The other CWEs such as CWE-266 and CWE-272 are related to the privilege escalation aspect of the vulnerability.\n\n```mermaid\ngraph TD\n    cwe59[\"CWE-59: Improper Link Resolution Before File Access ('Link Following')\"]\n    cwe367[\"CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\"]\n    cwe266[\"CWE-266: Incorrect Privilege Assignment\"]\n    cwe272[\"CWE-272: Least Privilege Violation\"]\n    cwe61[\"CWE-61: UNIX Symbolic Link (Symlink) Following\"]\n    cwe363[\"CWE-363: Race Condition Enabling Link Following\"]\n    \n    cwe61 -->|CHILDOF| cwe59\n    cwe363 -->|CHILDOF| cwe367\n    cwe367 -->|CANPRECEDE| cwe59\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe59 primary\n    class cwe367,cwe266,cwe272,cwe61,cwe363 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with the **mishandling of usersfile access** (CWE-59). The `fopen(\"w\")` call without proper validation allows symlinks to be followed. This, combined with the PAM module running as root without dropping privileges and incorrect permission assignment, leads to arbitrary file overwrites and ultimately root privilege escalation.\n1.  **CWE-59**: Improper Link Resolution Before File Access ('Link Following') - Root cause.\n2.  **CWE-367**: Time-of-check Time-of-use (TOCTOU) Race Condition - Due to the time gap between path check and file opening.\n3.  **CWE-266**: Incorrect Privilege Assignment - PAM module running as root.\n4.  Impact: Root privilege escalation.\n\n## Summary of Analysis\nThe analysis indicates that the primary vulnerability lies in the **mishandling of usersfile access**, specifically the improper resolution of symbolic links (CWE-59). The CVE description and summary clearly state that the code does not properly prevent filenames from identifying a link or shortcut that resolves to an unintended resource. This is compounded by the fact that the PAM module runs as root, leading to privilege escalation. The `fopen(\"w\")` usage and lack of path sanitization are key contributing factors. The selection of CWE-59 is further supported by its high score in the retriever results. The other CWEs were selected based on the additional contributing factors.\n\n*   **CWE-59**: The core issue is the improper handling of symbolic links, as the program does not validate the path and allows symlinks to be followed. This leads to writing to unintended locations.\n    *   *\"The product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.\"*\n*   **CWE-266**: The PAM module runs as root, and this privilege is incorrectly assigned during file operations.\n    *   *\"A product incorrectly assigns a privilege to a particular actor, creating an unintended sphere of control for that actor.\"*\n*   **CWE-367**: The race condition exists between the check for the path and the use of the path (opening the file for writing).\n    *   *\"The product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check.\"*\n*   **CWE-272**: The process runs with higher than necessary privileges.\n    *   *\"The program is running with more privileges than it needs.\"*\n\nOther CWEs Considered:\n*   CWE-732: Incorrect Permission Assignment for Critical Resource - While the vulnerability does lead to writing to critical resources, the root cause is not incorrect permission assignment but rather the ability to write to arbitrary files due to symlink following and running as root.\n*   CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') - While there is a TOCTOU vulnerability, the core issue is not a general race condition on a shared resource but rather the specific TOCTOU related to file path validation.\n*   CWE-306: Missing Authentication for Critical Function - Authentication is not the issue here. The issue arises after the user has been authenticated, during file handling operations.\n*   CWE-250: Execution with Unnecessary Privileges - Similar to CWE-272, it is related to incorrect privilege assignment.\n\nThe selected CWEs are at the optimal level of specificity, providing a detailed and accurate representation of the vulnerability's root cause and contributing factors.",
  "analysis_with_relationships": "# Summary\n| CWE ID    | CWE Name                                                              | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :---------- | :-------------------------------------------------------------------- | :--------- | :-------------------- | :------------------------------ | :------------------------------ |\n| CWE-59      | Improper Link Resolution Before File Access ('Link Following')        | 0.95       | Base                  | Primary                         | Allowed                       |\n| CWE-266     | Incorrect Privilege Assignment                                        | 0.75       | Base                  | Secondary                       | Allowed                       |\n| CWE-367     | Time-of-check Time-of-use (TOCTOU) Race Condition                    | 0.7        | Base                  | Secondary                       | Allowed                       |\n| CWE-272     | Least Privilege Violation                                           | 0.65       | Base                  | Secondary                       | Allowed                       |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-59, representing the core issue of improper link resolution. CWE-367 is linked via a CANPRECEDE relationship to CWE-59. There is a CHILDOF relationship between CWE-61, CWE-363, and CWE-59. The other CWEs such as CWE-266 and CWE-272 are related to the privilege escalation aspect of the vulnerability.\n\n```mermaid\ngraph TD\n    cwe59[\"CWE-59: Improper Link Resolution Before File Access ('Link Following')\"]\n    cwe367[\"CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\"]\n    cwe266[\"CWE-266: Incorrect Privilege Assignment\"]\n    cwe272[\"CWE-272: Least Privilege Violation\"]\n    cwe61[\"CWE-61: UNIX Symbolic Link (Symlink) Following\"]\n    cwe363[\"CWE-363: Race Condition Enabling Link Following\"]\n    \n    cwe61 -->|CHILDOF| cwe59\n    cwe363 -->|CHILDOF| cwe367\n    cwe367 -->|CANPRECEDE| cwe59\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe59 primary\n    class cwe367,cwe266,cwe272,cwe61,cwe363 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with the **mishandling of usersfile access** (CWE-59). The `fopen(\"w\")` call without proper validation allows symlinks to be followed. This, combined with the PAM module running as root without dropping privileges and incorrect permission assignment, leads to arbitrary file overwrites and ultimately root privilege escalation.\n1.  **CWE-59**: Improper Link Resolution Before File Access ('Link Following') - Root cause.\n2.  **CWE-367**: Time-of-check Time-of-use (TOCTOU) Race Condition - Due to the time gap between path check and file opening.\n3.  **CWE-266**: Incorrect Privilege Assignment - PAM module running as root.\n4.  Impact: Root privilege escalation.\n\n## Summary of Analysis\nThe analysis indicates that the primary vulnerability lies in the **mishandling of usersfile access**, specifically the improper resolution of symbolic links (CWE-59). The CVE description and summary clearly state that the code does not properly prevent filenames from identifying a link or shortcut that resolves to an unintended resource. This is compounded by the fact that the PAM module runs as root, leading to privilege escalation. The `fopen(\"w\")` usage and lack of path sanitization are key contributing factors. The selection of CWE-59 is further supported by its high score in the retriever results. The other CWEs were selected based on the additional contributing factors.\n\n*   **CWE-59**: The core issue is the improper handling of symbolic links, as the program does not validate the path and allows symlinks to be followed. This leads to writing to unintended locations.\n    *   *\"The product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.\"*\n*   **CWE-266**: The PAM module runs as root, and this privilege is incorrectly assigned during file operations.\n    *   *\"A product incorrectly assigns a privilege to a particular actor, creating an unintended sphere of control for that actor.\"*\n*   **CWE-367**: The race condition exists between the check for the path and the use of the path (opening the file for writing).\n    *   *\"The product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check.\"*\n*   **CWE-272**: The process runs with higher than necessary privileges.\n    *   *\"The program is running with more privileges than it needs.\"*\n\nOther CWEs Considered:\n*   CWE-732: Incorrect Permission Assignment for Critical Resource - While the vulnerability does lead to writing to critical resources, the root cause is not incorrect permission assignment but rather the ability to write to arbitrary files due to symlink following and running as root.\n*   CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') - While there is a TOCTOU vulnerability, the core issue is not a general race condition on a shared resource but rather the specific TOCTOU related to file path validation.\n*   CWE-306: Missing Authentication for Critical Function - Authentication is not the issue here. The issue arises after the user has been authenticated, during file handling operations.\n*   CWE-250: Execution with Unnecessary Privileges - Similar to CWE-272, it is related to incorrect privilege assignment.\n\nThe selected CWEs are at the optimal level of specificity, providing a detailed and accurate representation of the vulnerability's root cause and contributing factors.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-732:**\n- 732 (Incorrect Permission Assignment for Critical Resource) - ROOT\n\n\n**Chain starting from CWE-59:**\n- 59 (Improper Link Resolution Before File Access ('Link Following')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "250",
        "name": "Execution with Unnecessary Privileges",
        "source": "sparse"
      },
      "similarity": 255.23696495213184
    },
    {
      "metadata": {
        "doc_id": "287",
        "name": "Improper Authentication",
        "source": "sparse"
      },
      "similarity": 250.78682478308093
    },
    {
      "metadata": {
        "doc_id": "367",
        "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
        "source": "sparse"
      },
      "similarity": 245.13075794361964
    },
    {
      "metadata": {
        "doc_id": "269",
        "name": "Improper Privilege Management",
        "source": "sparse"
      },
      "similarity": 244.81584919646164
    },
    {
      "metadata": {
        "doc_id": "59",
        "name": "Improper Link Resolution Before File Access ('Link Following')",
        "source": "sparse"
      },
      "similarity": 240.9761302948128
    },
    {
      "metadata": {
        "doc_id": "732",
        "name": "Incorrect Permission Assignment for Critical Resource",
        "source": "sparse"
      },
      "similarity": 240.96695881447698
    },
    {
      "metadata": {
        "doc_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "source": "sparse"
      },
      "similarity": 239.65173979996177
    },
    {
      "metadata": {
        "doc_id": "61",
        "name": "UNIX Symbolic Link (Symlink) Following",
        "source": "sparse"
      },
      "similarity": 238.58360794582865
    },
    {
      "metadata": {
        "doc_id": "272",
        "name": "Least Privilege Violation",
        "type": "Base",
        "original_content": "The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.",
        "keyphrase_source": "rootcause:mishandles usersfile access",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.4577374419407049,
            "graph": 1.4793684477586642
          }
        }
      },
      "similarity": 0.4577374419407049
    },
    {
      "doc_id": "363",
      "text": "CWE-363: Race Condition Enabling Link Following",
      "score": 2.8651999999999997,
      "metadata": {
        "doc_id": "363",
        "name": "Race Condition Enabling Link Following",
        "type": "base",
        "original_content": "CWE-363: Race Condition Enabling Link Following",
        "relationships": [
          {
            "source_id": "363",
            "target_id": "59",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "363",
            "target_id": "367",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "59",
            "target_id": "363",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "367",
            "target_id": "363",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "abstraction_path": 0.7200000000000001,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "59",
                  "363",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "59"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "367",
                  "363",
                  "PARENTOF"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "abstraction_path_down",
              "source": "367"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "59",
                  "363",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "59"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "363",
                  "59",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "59"
            }
          }
        },
        "abstraction_level": "base",
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.8651999999999997
          }
        }
      },
      "similarity": 2.8651999999999997
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-732",
      "CWE-59",
      "CWE-272",
      "CWE-306",
      "CWE-363",
      "CWE-362",
      "CWE-250",
      "CWE-266",
      "CWE-367",
      "CWE-61"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}