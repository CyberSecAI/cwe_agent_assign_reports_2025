{
  "cve_id": "CVE-2025-4006",
  "description": "A vulnerability classified as critical has been found in youyiio BeyongCms 1.6.0. Affected is an unknown function of the file /admin/theme/Upload.html of the component Document Management Page. The manipulation of the argument File leads to **unrestricted upload**. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "unrestricted upload",
    "impact": "",
    "vector": "File argument",
    "attacker": "",
    "product": "youyiio BeyongCms",
    "version": "1.6.0",
    "component": "/admin/theme/Upload.html"
  },
  "reference_content": "Here's the analysis of the provided content:\n\n**Content from wiki.shikangsi.com_47c9003e_20250624_173018.html (text)**\n\n*   **Relevance:** The content directly relates to CVE-2025-4006.\n*   **Extraction:**\n\n    *   **Weaknesses/vulnerabilities present:** Two file upload vulnerabilities exist in BeyongCms 1.6.0.\n        *   The first vulnerability is in the admin/controller/Theme upload method. An attacker can upload a zip file containing a malicious PHP file via the document management section after logging into the backend. The file is then extracted based on a file ID. An attacker can exploit this by crafting a request to the /admin/theme/upload.html endpoint with a known or bruteforced fileId, leading to arbitrary file upload and remote code execution (RCE).\n        *   The second vulnerability is in the common/controller/File upload method, utilizing the ThinkPHP native file upload function. While file extensions are restricted, the `exts` parameter in the request allows an attacker to specify the allowed file extensions, bypassing the original restrictions. An attacker can upload a file with an extension like `.html` by setting the `exts` parameter to html via a POST request. If the server supports parsing of the uploaded extension, this can lead to remote code execution (RCE).\n    *   **Impact of exploitation:** Remote Code Execution (RCE).\n    *   **Attack vectors:**\n        *   Exploiting the admin/controller/Theme upload method involves uploading a malicious ZIP file containing a PHP file and then sending a crafted GET request to the `/admin/theme/upload.html` endpoint.\n        *   Exploiting the common/controller/File upload method involves crafting a POST request to the /admin/file/upload.html endpoint, including the `exts` parameter, to specify a desired file extension like HTML.\n    *   **Required attacker capabilities/position:** The attacker requires administrative access to the BeyongCms backend in the first vulnerability and the ability to make POST requests in the second one.\n    *   **Mitigation or fix:** The content does not mention mitigations or fixes.\n    *   **More detail than the official CVE description:** This content offers significantly more detail, including the specific file upload locations, code snippets, and attack request examples to exploit the described vulnerabilities.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-434 | Unrestricted Upload of File with Dangerous Type | 1.0 | Base | Allowed | Primary CWE |\n| CWE-94 | Improper Control of Generation of Code ('Code Injection') | 0.5 | Base | Allowed-with-Review | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.75\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary relationship that influenced the selection was the direct match of the \"**unrestricted upload**\" to CWE-434. While CWE-94 is a parent, the details provided in the vulnerability description point more directly to a dangerous file upload issue than generic code injection. The retriever results supported this, with CWE-434 having a high relevance score.\n\n```mermaid\ngraph TD\n    cwe434[\"CWE-434: Unrestricted Upload of File with Dangerous Type\"]\n    cwe94[\"CWE-94: Improper Control of Generation of Code ('Code Injection')\"]\n    cwe943[\"CWE-943: Improper Neutralization of Special Elements in Archive File\"]\n    \n    cwe943 -->|CHILDOF| cwe434\n    cwe94 -->|PARENTOF| cwe434\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe434 primary\n    class cwe94 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **unrestricted upload** (CWE-434), which allows an attacker to upload a malicious file. If the server executes this file, it leads to code execution.\n\n## Summary of Analysis\nThe initial assessment strongly points to CWE-434 due to the direct mention of \"**unrestricted upload**\" in the vulnerability description, and the CVE reference further details how this leads to remote code execution. The retriever results also support this, with CWE-434 having a high relevance score.\n\nThe evidence from the \"Vulnerability Description Key Phrases\" section is:\n*   **weakness:** **unrestricted upload**\n\nThe evidence from the \"CVE Reference Links Content Summary\" section is:\n*   Two file upload vulnerabilities exist in BeyongCms 1.6.0.\n*   The first vulnerability is in the admin/controller/Theme upload method. An attacker can upload a zip file containing a malicious PHP file via the document management section after logging into the backend. The file is then extracted based on a file ID. An attacker can exploit this by crafting a request to the /admin/theme/upload.html endpoint with a known or bruteforced fileId, leading to arbitrary file upload and remote code execution (RCE).\n*   The second vulnerability is in the common/controller/File upload method, utilizing the ThinkPHP native file upload function. While file extensions are restricted, the `exts` parameter in the request allows an attacker to specify the allowed file extensions, bypassing the original restrictions. An attacker can upload a file with an extension like `.html` by setting the `exts` parameter to html via a POST request. If the server supports parsing of the uploaded extension, this can lead to remote code execution (RCE).\n\nCWE-94 was considered because an \"**unrestricted upload**\" of a file can lead to code injection/execution. However, without further information explicitly detailing code injection, CWE-434 is the more accurate and specific classification. I am including CWE-94 as a secondary candidate with a lower confidence.\n\nRelevant CWE Information:\n\n## CWE-434: Unrestricted Upload of File with Dangerous Type\n**Technical Explanation:** The vulnerability allows an attacker to upload files without proper restrictions on the file type. This can lead to the execution of malicious code on the server if the uploaded file is a script or executable.\n**Security Implications:** Remote code execution, server compromise.\n**Relationship Analysis:** CWE-434 is a base-level CWE.\n**Mapping Guidance Influence:** The MITRE mapping guidance allows the use of this CWE.\n\n## CWE-94: Improper Control of Generation of Code ('Code Injection')\n**Technical Explanation:** The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.\n**Security Implications:** Code Injection.\n**Relationship Analysis:** ParentOf CWE-96, CWE-95, CWE-1336\n**Mapping Guidance Influence:** Usage: Allowed-with-Review - This entry is frequently misused for vulnerabilities with a technical impact of \"code execution,\" which does not by itself indicate a root cause weakness, since dozens of weaknesses can enable code execution.\n\n## Other CWEs Considered But Not Used:\nCWE-79, CWE-89, CWE-1336, CWE-306, and CWE-425 were considered but not ultimately selected because they did not directly describe the **unrestricted file upload** aspect of the vulnerability as clearly as CWE-434. They represent potential consequences or related weaknesses but are not the primary root cause.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-434 | Unrestricted Upload of File with Dangerous Type | 1.0 | Base | Allowed | Primary CWE |\n| CWE-94 | Improper Control of Generation of Code ('Code Injection') | 0.5 | Base | Allowed-with-Review | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.75\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary relationship that influenced the selection was the direct match of the \"**unrestricted upload**\" to CWE-434. While CWE-94 is a parent, the details provided in the vulnerability description point more directly to a dangerous file upload issue than generic code injection. The retriever results supported this, with CWE-434 having a high relevance score.\n\n```mermaid\ngraph TD\n    cwe434[\"CWE-434: Unrestricted Upload of File with Dangerous Type\"]\n    cwe94[\"CWE-94: Improper Control of Generation of Code ('Code Injection')\"]\n    cwe943[\"CWE-943: Improper Neutralization of Special Elements in Archive File\"]\n    \n    cwe943 -->|CHILDOF| cwe434\n    cwe94 -->|PARENTOF| cwe434\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe434 primary\n    class cwe94 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **unrestricted upload** (CWE-434), which allows an attacker to upload a malicious file. If the server executes this file, it leads to code execution.\n\n## Summary of Analysis\nThe initial assessment strongly points to CWE-434 due to the direct mention of \"**unrestricted upload**\" in the vulnerability description, and the CVE reference further details how this leads to remote code execution. The retriever results also support this, with CWE-434 having a high relevance score.\n\nThe evidence from the \"Vulnerability Description Key Phrases\" section is:\n*   **weakness:** **unrestricted upload**\n\nThe evidence from the \"CVE Reference Links Content Summary\" section is:\n*   Two file upload vulnerabilities exist in BeyongCms 1.6.0.\n*   The first vulnerability is in the admin/controller/Theme upload method. An attacker can upload a zip file containing a malicious PHP file via the document management section after logging into the backend. The file is then extracted based on a file ID. An attacker can exploit this by crafting a request to the /admin/theme/upload.html endpoint with a known or bruteforced fileId, leading to arbitrary file upload and remote code execution (RCE).\n*   The second vulnerability is in the common/controller/File upload method, utilizing the ThinkPHP native file upload function. While file extensions are restricted, the `exts` parameter in the request allows an attacker to specify the allowed file extensions, bypassing the original restrictions. An attacker can upload a file with an extension like `.html` by setting the `exts` parameter to html via a POST request. If the server supports parsing of the uploaded extension, this can lead to remote code execution (RCE).\n\nCWE-94 was considered because an \"**unrestricted upload**\" of a file can lead to code injection/execution. However, without further information explicitly detailing code injection, CWE-434 is the more accurate and specific classification. I am including CWE-94 as a secondary candidate with a lower confidence.\n\nRelevant CWE Information:\n\n## CWE-434: Unrestricted Upload of File with Dangerous Type\n**Technical Explanation:** The vulnerability allows an attacker to upload files without proper restrictions on the file type. This can lead to the execution of malicious code on the server if the uploaded file is a script or executable.\n**Security Implications:** Remote code execution, server compromise.\n**Relationship Analysis:** CWE-434 is a base-level CWE.\n**Mapping Guidance Influence:** The MITRE mapping guidance allows the use of this CWE.\n\n## CWE-94: Improper Control of Generation of Code ('Code Injection')\n**Technical Explanation:** The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.\n**Security Implications:** Code Injection.\n**Relationship Analysis:** ParentOf CWE-96, CWE-95, CWE-1336\n**Mapping Guidance Influence:** Usage: Allowed-with-Review - This entry is frequently misused for vulnerabilities with a technical impact of \"code execution,\" which does not by itself indicate a root cause weakness, since dozens of weaknesses can enable code execution.\n\n## Other CWEs Considered But Not Used:\nCWE-79, CWE-89, CWE-1336, CWE-306, and CWE-425 were considered but not ultimately selected because they did not directly describe the **unrestricted file upload** aspect of the vulnerability as clearly as CWE-434. They represent potential consequences or related weaknesses but are not the primary root cause.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-89:**\n- 89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')) - ROOT\n\n\n**Chain starting from CWE-94:**\n- 94 (Improper Control of Generation of Code ('Code Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "sparse"
      },
      "similarity": 462.86519948010704
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "source": "sparse"
      },
      "similarity": 453.1304491943491
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 446.50591411968264
    },
    {
      "metadata": {
        "doc_id": "306",
        "name": "Missing Authentication for Critical Function",
        "source": "sparse"
      },
      "similarity": 375.67340313787764
    },
    {
      "metadata": {
        "doc_id": "1336",
        "name": "Improper Neutralization of Special Elements Used in a Template Engine",
        "source": "sparse"
      },
      "similarity": 371.5753857581937
    },
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse"
      },
      "similarity": 361.15912786882376
    },
    {
      "metadata": {
        "doc_id": "705",
        "name": "Incorrect Control Flow Scoping",
        "source": "sparse"
      },
      "similarity": 358.1928251107513
    },
    {
      "metadata": {
        "doc_id": "1391",
        "name": "Use of Weak Credentials",
        "source": "sparse"
      },
      "similarity": 355.1677956314723
    },
    {
      "metadata": {
        "doc_id": "425",
        "name": "Direct Request ('Forced Browsing')",
        "type": "Base",
        "original_content": "The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.",
        "keyphrase_source": "weakness:unrestricted upload",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse",
            "graph"
          ],
          "retriever_count": 3,
          "normalized_scores": {
            "dense": 0.5862468353034462,
            "sparse": 346.72480971230846,
            "graph": 2.2997203836539755
          }
        }
      },
      "similarity": 0.5862468353034462
    },
    {
      "doc_id": "94",
      "text": "CWE-94: Improper Control of Generation of Code ('Code Injection')",
      "score": 2.2776000000000005,
      "metadata": {
        "doc_id": "94",
        "name": "Improper Control of Generation of Code ('Code Injection')",
        "type": "base",
        "original_content": "CWE-94: Improper Control of Generation of Code ('Code Injection')",
        "relationships": [
          {
            "source_id": "94",
            "target_id": "98",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "94",
            "target_id": "96",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "94",
            "target_id": "95",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "94",
            "target_id": "1336",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "94",
            "target_id": "913",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "94",
            "target_id": "74",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "94",
            "target_id": "74",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "94",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "96",
            "target_id": "94",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "95",
            "target_id": "94",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "913",
            "target_id": "94",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "74",
            "target_id": "94",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1336",
            "target_id": "94",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 0.8,
          "abstraction_path": 0.5599999999999999,
          "sequence_path": 0.8
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_up",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "425",
                  "98",
                  "CANPRECEDE"
                ],
                [
                  "98",
                  "94",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "relationship_chain",
              "source": "425"
            },
            "abstraction_path_up": {
              "path": [
                [
                  "96",
                  "94",
                  "CHILDOF"
                ]
              ],
              "score": 0.5599999999999999,
              "type": "abstraction_path_up",
              "source": "96"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "425",
                  "98",
                  "CANPRECEDE"
                ],
                [
                  "98",
                  "94",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "vulnerability_sequence_forward",
              "source": "425"
            }
          }
        },
        "abstraction_level": "base",
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This entry is frequently misused for vulnerabilities with a technical impact of \"code execution,\" which does not by itself indicate a root cause weakness, since dozens of weaknesses can enable code execution.",
          "comments": "This weakness only applies when the product's functionality intentionally constructs all or part of a code segment. It could be that executing code could be the result of other weaknesses that do not involve the construction of code segments.",
          "reasons": [
            "Frequent Misuse",
            "Frequent Misinterpretation"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2776000000000005
          }
        }
      },
      "similarity": 2.2776000000000005
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-89",
      "CWE-94",
      "CWE-79",
      "CWE-1336",
      "CWE-306",
      "CWE-95",
      "CWE-96",
      "CWE-943",
      "CWE-425",
      "CWE-434"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}