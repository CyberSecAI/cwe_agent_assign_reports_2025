{
  "retriever": "sparse",
  "query": "In the Linux kernel, the following vulnerability has been resolved wifi carl9170 re-fix fortified-memset warning The carl9170_tx_release() function sometimes triggers a fortified-memset warning in my randconfig builds In file included from include/linux/string.h254, from drivers/net/wireless/ath/carl9170/tx.c40 In function fortify_memset_chk, inlined from carl9170_tx_release at drivers/net/wireless/ath/carl9170/tx.c2832, inlined from kref_put at include/linux/kref.h653, inlined from carl9170_tx_put_skb at drivers/net/wireless/ath/carl9170/tx.c3429 include/linux/fortify-string.h49325 error call to __write_overflow_field declared with attribute warning detected write beyond size of field (1st parameter) maybe use struct_group()? [-Werror=attribute-warning] 493 | __write_overflow_field(p_size_field, size) Kees previously tried to avoid this by using memset_after(), but it seems this does not fully address the problem. I noticed that the memset_after() here is done on a different part of the union (status) than the original cast was from (rate_driver_data), which may confuse the compiler. Unfortunately, the memset_after() trick does not work on driver_rates[] because that is part of an anonymous struct, and I could not get struct_group() to do this either. Using two separate memset() calls on the two members does address the warning though.",
  "keyphrases": {
    "rootcause": [
      "improper use of memset_after() function"
    ],
    "weakness": [
      "write beyond size of field"
    ]
  },
  "timestamp": "2025-07-13 10:47:16",
  "cve_id": "CVE-2024-38616",
  "result_count": 11,
  "results": [
    {
      "cwe_id": "457",
      "name": "Use of Uninitialized Variable",
      "score": 749.444015717067,
      "search_source": "rootcause:improper use of memset_after() function"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 735.8818888844152,
      "search_source": "rootcause:improper use of memset_after() function"
    },
    {
      "cwe_id": "95",
      "name": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
      "score": 712.2256529764528,
      "search_source": "rootcause:improper use of memset_after() function"
    },
    {
      "cwe_id": "909",
      "name": "Missing Initialization of Resource",
      "score": 711.3506292391382,
      "search_source": "rootcause:improper use of memset_after() function"
    },
    {
      "cwe_id": "226",
      "name": "Sensitive Information in Resource Not Removed Before Reuse",
      "score": 711.018119234859,
      "search_source": "rootcause:improper use of memset_after() function"
    },
    {
      "cwe_id": "863",
      "name": "Incorrect Authorization",
      "score": 710.9632365301586,
      "search_source": "rootcause:improper use of memset_after() function"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 709.4888420968616,
      "search_source": "rootcause:improper use of memset_after() function"
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "score": 704.9623219509969,
      "search_source": "rootcause:improper use of memset_after() function"
    },
    {
      "cwe_id": "401",
      "name": "Missing Release of Memory after Effective Lifetime",
      "score": 703.7567426806343,
      "search_source": "rootcause:improper use of memset_after() function"
    },
    {
      "cwe_id": "347",
      "name": "Improper Verification of Cryptographic Signature",
      "score": 699.16971598723,
      "search_source": "rootcause:improper use of memset_after() function"
    },
    {
      "cwe_id": "125",
      "name": "Out-of-bounds Read",
      "score": 664.2036399997096,
      "search_source": "weakness:write beyond size of field"
    }
  ]
}