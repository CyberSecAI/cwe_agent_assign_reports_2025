{
  "cve_id": "CVE-2025-46721",
  "description": "nosurf is cross-site request forgery (CSRF) protection middleware for Go. A vulnerability in versions prior to 1.2.0 allows an attacker who controls content on the target site, or on a subdomain of the target site (either via **XSS**, or otherwise) to **bypass CSRF checks** and issue requests on users behalf. Due to misuse of the Go `net/http` library, nosurf categorizes all incoming requests as plain-text HTTP requests, in which case the `Referer` header is not checked to have the same origin as the target webpage. If the attacker has control over HTML contents on either the target website (e.g. `example.com`), or on a website hosted on a subdomain of the target (e.g. `attacker.example.com`), they will also be able to manipulate cookies set for the target website. By acquiring the secret CSRF token from the cookie, or overriding the cookie with a new token known to the attacker, `attacker.example.com` is able to craft cross-site requests to `example.com`. A patch for the issue was released in nosurf 1.2.0. In lieu of upgrading to a patched version of nosurf, users may additionally use another HTTP middleware to ensure that a non-safe HTTP request is coming from the same origin (e.g. by requiring a `Sec-Fetch-Site same-origin` header in the request).",
  "key_phrases": {
    "rootcause": "misuse of the Go net/http library",
    "weakness": [
      "bypass CSRF checks",
      "XSS"
    ],
    "impact": [
      "bypass CSRF checks",
      "manipulate cookies"
    ],
    "vector": "",
    "attacker": "",
    "product": "nosurf",
    "version": "prior to 1.2.0",
    "component": ""
  },
  "reference_content": "Here's an analysis of the provided content related to CVE-2025-46721:\n\n**Content from github.com_753e0f66_20250624_211006.html (stripped)**\n\n*   **Root cause of vulnerability:** Due to misuse of the Go `net/http` library, nosurf categorizes all incoming requests as plain-text HTTP requests, in which case the Referer header is not checked to have the same origin as the target webpage.\n*   **Weaknesses/vulnerabilities present:** CSRF (Cross-Site Request Forgery)\n*   **Impact of exploitation:** This vulnerability allows an attacker who has gained XSS on a subdomain or top level domain to perform authenticated form submissions against gorilla/csrf protected targets that share the same top level domain.\n*   **Attack vectors:**  An attacker who controls content on the target site, or on a subdomain of the target site.\n*   **Required attacker capabilities/position:** The attacker needs to have gained XSS on a subdomain or top-level domain.\n*   **Mitigation or fix:** A patch for the issue was released in nosurf 1.2.0.\n\n**Content from github.com_b1dcb76b_20250624_211007.html (stripped)**\n\n*   **Root cause of vulnerability:** All versions of nosurf before 1.2.0 failed to apply same-origin checks for incoming requests. This happened due to relying on the `.URL.Scheme` field on Go standard library's `net/http.Request` type to first ensure that the request is served over HTTPS, and only then apply same-origin checks. The aforementioned `Scheme` field is not filled out by the Go HTTP server on incoming requests.\n*   **Impact of exploitation:** This may allow attackers to issue non-[safe](https://developer.mozilla.org/en-US/docs/Glossary/Safe/HTTP) cross-origin requests to your website.\n*   **Attack vectors:**  The attacker also needs control over the contents of a page on your website, or on a subdomain of your website. This can be achieved via XSS, or if you intentionally give control of the HTML content for users on your website\n*   **Required attacker capabilities/position:**  The attacker also needs control over the contents of a page on your website, or on a subdomain of your website.\n*   **Mitigation or fix:** A fix for this issue was released in [nosurf 1.2.0](https://github.com/justinas/nosurf/releases/tag/v1.2.0).\n\n**Content from github.com_b8d3d6de_20250624_194006.html (stripped)**\n\n*   **Mitigation or fix:** This is a *security* release for nosurf. It mainly addresses [CVE-2025-46721](https://github.com/justinas/nosurf-cve-2025-46721). This release technically includes breaking changes, as nosurf starts applying same-origin checks that were not previously enforced. In most cases, users will not need to make any changes to their code. However, it is recommended to read [the documentation on nosurf's trusted origin checks](https://github.com/justinas/nosurf/blob/master/docs/origin-checks.md) before upgrading.\n\n**Content from github.com_b8d3d6de_20250624_211008.html (stripped)**\n\n*   **Mitigation or fix:** This is a *security* release for nosurf. It mainly addresses [CVE-2025-46721](https://github.com/justinas/nosurf-cve-2025-46721). This release technically includes breaking changes, as nosurf starts applying same-origin checks that were not previously enforced. In most cases, users will not need to make any changes to their code. However, it is recommended to read [the documentation on nosurf's trusted origin checks](https://github.com/justinas/nosurf/blob/master/docs/origin-checks.md) before upgrading.\n\n**Content from github.com_b1dcb76b_20250624_211009.html (stripped)**\n\n*   **Root cause of vulnerability:** All versions of nosurf before 1.2.0 failed to apply same-origin checks for incoming requests. This happened due to relying on the `.URL.Scheme` field on Go standard library's `net/http.Request` type to first ensure that the request is served over HTTPS, and only then apply same-origin checks. The aforementioned `Scheme` field is not filled out by the Go HTTP server on incoming requests.\n*   **Impact of exploitation:** This may allow attackers to issue non-[safe](https://developer.mozilla.org/en-US/docs/Glossary/Safe/HTTP) cross-origin requests to your website.\n*   **Attack vectors:**  The attacker also needs control over the contents of a page on your website, or on a subdomain of your website. This can be achieved via XSS, or if you intentionally give control of the HTML content for users on your website\n*   **Required attacker capabilities/position:**  The attacker also needs control over the contents of a page on your website, or on a subdomain of your website.\n*   **Mitigation or fix:** A fix for this issue was released in [nosurf 1.2.0](https://github.com/justinas/nosurf/releases/tag/v1.2.0).\n\n**Content from github.com_d27804e4_20250624_194002.html (stripped)**\n\n*   **Root cause of vulnerability:** gorilla/csrf does not validate the Origin header against an allowlist. Its executes its validation of the Referer header for cross-origin requests only when it believes the request is being served over TLS. It determines this by inspecting the `r.URL.Scheme` value. However, this value is never populated for \"server\" requests [per the Go spec](https://pkg.go.dev/net/http#Request), and so this check does not run in practice.\n*   **Weaknesses/vulnerabilities present:**  CSRF (Cross-Site Request Forgery)\n*   **Impact of exploitation:** This vulnerability allows an attacker who has gained XSS on a subdomain or top level domain to perform authenticated form submissions against gorilla/csrf protected targets that share the same top level domain.\n*   **Attack vectors:** An attacker who has gained XSS on a subdomain or top level domain.\n*   **Required attacker capabilities/position:** The attacker needs to have gained XSS on a subdomain or top-level domain.\n*   **Mitigation or fix:** A fix for this issue was released in gorilla/csrf 1.7.3.\n\n**Content from github.com_d6911fa0_20250624_194005.html (stripped)**\n\n*   **Root cause of vulnerability:**  Rework origin checks ([#74](https://github.com/justinas/nosurf/pull/74))Addresses [CVE-2025-46721](https://github.com/advisories/GHSA-w9hf-35q4-vcjw \"CVE-2025-46721\").\n*   **Mitigation or fix:**  This commit introduces new origin checks for the nosurf library.\n\n**Content from github.com_f9bbbb8a_20250624_194007.html (stripped)**\n\n*   **Root cause of vulnerability:** Due to misuse of the Go `net/http` library, nosurf categorizes all incoming requests as plain-text HTTP requests, in which case the `Referer` header is not checked to have the same origin as the target webpage.\n*   **Weaknesses/vulnerabilities present:** CSRF (Cross-Site Request Forgery)\n*   **Impact of exploitation:** This vulnerability allows an attacker who controls content on the target site, or on a subdomain of the target site (either via XSS, or otherwise) to bypass Cross-Site Request Forgery checks and issue requests on user's behalf.\n*   **Attack vectors:**  An attacker who controls content on the target site, or on a subdomain of the target site.\n*   **Required attacker capabilities/position:** The attacker needs to have control over content on the target site, or on a subdomain of the target site (either via XSS, or otherwise).\n*   **Mitigation or fix:** A patch for the issue was released in nosurf 1.2.0.\n\n**Note:**  The content from github.com\\_d6911fa0\\_20250624\\_194005.html provides more detail than the official CVE description.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID  | CWE Name                                                                    | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :-------------------------------------------------------------------------- | :--------- | :-------------------- | :------------------------------ | :------------------------------ |\n| CWE-352   | Cross-Site Request Forgery (CSRF)                                         | 0.9        | Compound              | Primary                         | Allowed                         |\n| CWE-79    | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 0.7        | Base                  | Secondary                       | Allowed                         |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary CWE, CWE-352 [Cross-Site Request Forgery (CSRF)], is a compound weakness. The vulnerability description clearly indicates a **bypass of CSRF checks**, making it the most relevant classification. The secondary CWE, CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')], is related because **XSS** can be used to exploit CSRF. There is also a dependency between CWE-352 and CWE-346 [Origin Validation Error] due to the improper origin validation, which could lead to CSRF.\n\n```mermaid\ngraph TD\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    cwe346[\"CWE-346: Origin Validation Error\"]\n    \n    cwe352 -->|REQUIRES| cwe346\n    cwe79 -->|CANPRECEDE| cwe352\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe352 primary\n    class cwe79,cwe346 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain begins with a **misuse of the Go `net/http` library**, leading to the categorization of all incoming requests as plain-text HTTP requests. This leads to the **bypass of CSRF checks**. An attacker leverages **XSS** or control over a subdomain to **manipulate cookies** and craft cross-site requests. The final impact is the ability to **bypass CSRF checks** and issue requests on users' behalf.\n\n**Root Cause:** Misuse of the Go `net/http` library\n**Weakness 1:** **Bypass CSRF checks** due to improper request categorization\n**Weakness 2:** Leveraging **XSS** or subdomain control to **manipulate cookies**.\n**Impact:** Issuing requests on behalf of users.\n\n## Summary of Analysis\n\nThe primary classification is CWE-352 [Cross-Site Request Forgery (CSRF)] due to the explicit mention of **bypassing CSRF checks**. This aligns directly with the definition of CWE-352, which involves insufficient verification of the request's origin. The vulnerability description states, \"A vulnerability in versions prior to 1.2.0 allows an attacker who controls content on the target site, or on a subdomain of the target site (either via **XSS**, or otherwise) to **bypass CSRF checks** and issue requests on users behalf.\"\n\nCWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')] is considered a secondary weakness because **XSS** is one of the methods used to exploit the CSRF vulnerability. The description mentions that an attacker can control content on the target site via **XSS**, which is a prerequisite for exploiting the CSRF vulnerability.\n\nCWE-346 [Origin Validation Error] was considered because the description mentions that the `Referer` header is not checked, and also because CWE-352 REQUIRES CWE-346. However, since there is already a **bypass of CSRF checks**, and **XSS** involved, CWE-346 is not considered.\n\nThe selected CWEs are at the optimal level of specificity. CWE-352 is a compound weakness that accurately represents the high-level issue, while CWE-79 captures the method used to facilitate the attack.",
  "analysis_with_relationships": "# Summary\n| CWE ID  | CWE Name                                                                    | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :-------------------------------------------------------------------------- | :--------- | :-------------------- | :------------------------------ | :------------------------------ |\n| CWE-352   | Cross-Site Request Forgery (CSRF)                                         | 0.9        | Compound              | Primary                         | Allowed                         |\n| CWE-79    | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 0.7        | Base                  | Secondary                       | Allowed                         |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary CWE, CWE-352 [Cross-Site Request Forgery (CSRF)], is a compound weakness. The vulnerability description clearly indicates a **bypass of CSRF checks**, making it the most relevant classification. The secondary CWE, CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')], is related because **XSS** can be used to exploit CSRF. There is also a dependency between CWE-352 and CWE-346 [Origin Validation Error] due to the improper origin validation, which could lead to CSRF.\n\n```mermaid\ngraph TD\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    cwe346[\"CWE-346: Origin Validation Error\"]\n    \n    cwe352 -->|REQUIRES| cwe346\n    cwe79 -->|CANPRECEDE| cwe352\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe352 primary\n    class cwe79,cwe346 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain begins with a **misuse of the Go `net/http` library**, leading to the categorization of all incoming requests as plain-text HTTP requests. This leads to the **bypass of CSRF checks**. An attacker leverages **XSS** or control over a subdomain to **manipulate cookies** and craft cross-site requests. The final impact is the ability to **bypass CSRF checks** and issue requests on users' behalf.\n\n**Root Cause:** Misuse of the Go `net/http` library\n**Weakness 1:** **Bypass CSRF checks** due to improper request categorization\n**Weakness 2:** Leveraging **XSS** or subdomain control to **manipulate cookies**.\n**Impact:** Issuing requests on behalf of users.\n\n## Summary of Analysis\n\nThe primary classification is CWE-352 [Cross-Site Request Forgery (CSRF)] due to the explicit mention of **bypassing CSRF checks**. This aligns directly with the definition of CWE-352, which involves insufficient verification of the request's origin. The vulnerability description states, \"A vulnerability in versions prior to 1.2.0 allows an attacker who controls content on the target site, or on a subdomain of the target site (either via **XSS**, or otherwise) to **bypass CSRF checks** and issue requests on users behalf.\"\n\nCWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')] is considered a secondary weakness because **XSS** is one of the methods used to exploit the CSRF vulnerability. The description mentions that an attacker can control content on the target site via **XSS**, which is a prerequisite for exploiting the CSRF vulnerability.\n\nCWE-346 [Origin Validation Error] was considered because the description mentions that the `Referer` header is not checked, and also because CWE-352 REQUIRES CWE-346. However, since there is already a **bypass of CSRF checks**, and **XSS** involved, CWE-346 is not considered.\n\nThe selected CWEs are at the optimal level of specificity. CWE-352 is a compound weakness that accurately represents the high-level issue, while CWE-79 captures the method used to facilitate the attack.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-352:**\n- 352 (Cross-Site Request Forgery (CSRF)) - ROOT\n\n\n**Chain starting from CWE-79:**\n- 79 (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse",
        "original_content": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
        "keyphrase_sources": [
          {
            "id": "rootcause:misuse of the Go net/http library",
            "keyphrase": "misuse of the Go net/http library",
            "type": "rootcause"
          },
          {
            "id": "weakness:bypass CSRF checks",
            "keyphrase": "bypass CSRF checks",
            "type": "weakness"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "impact:bypass CSRF checks",
            "keyphrase": "bypass CSRF checks",
            "type": "impact"
          },
          {
            "id": "impact:manipulate cookies",
            "keyphrase": "manipulate cookies",
            "type": "impact"
          },
          {
            "id": "product:nosurf",
            "keyphrase": "nosurf",
            "type": "product"
          },
          {
            "id": "version:prior to 1.2.0",
            "keyphrase": "prior to 1.2.0",
            "type": "version"
          }
        ]
      },
      "similarity": 1421.0225819130908
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse",
        "original_content": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
        "keyphrase_sources": [
          {
            "id": "rootcause:misuse of the Go net/http library",
            "keyphrase": "misuse of the Go net/http library",
            "type": "rootcause"
          },
          {
            "id": "weakness:bypass CSRF checks",
            "keyphrase": "bypass CSRF checks",
            "type": "weakness"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "impact:bypass CSRF checks",
            "keyphrase": "bypass CSRF checks",
            "type": "impact"
          },
          {
            "id": "impact:manipulate cookies",
            "keyphrase": "manipulate cookies",
            "type": "impact"
          },
          {
            "id": "product:nosurf",
            "keyphrase": "nosurf",
            "type": "product"
          },
          {
            "id": "version:prior to 1.2.0",
            "keyphrase": "prior to 1.2.0",
            "type": "version"
          }
        ]
      },
      "similarity": 1392.254533883958
    },
    {
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "source": "sparse",
        "original_content": "The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.",
        "keyphrase_sources": [
          {
            "id": "rootcause:misuse of the Go net/http library",
            "keyphrase": "misuse of the Go net/http library",
            "type": "rootcause"
          },
          {
            "id": "weakness:bypass CSRF checks",
            "keyphrase": "bypass CSRF checks",
            "type": "weakness"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "impact:bypass CSRF checks",
            "keyphrase": "bypass CSRF checks",
            "type": "impact"
          },
          {
            "id": "impact:manipulate cookies",
            "keyphrase": "manipulate cookies",
            "type": "impact"
          },
          {
            "id": "product:nosurf",
            "keyphrase": "nosurf",
            "type": "product"
          },
          {
            "id": "version:prior to 1.2.0",
            "keyphrase": "prior to 1.2.0",
            "type": "version"
          }
        ]
      },
      "similarity": 1388.701108492094
    },
    {
      "metadata": {
        "doc_id": "918",
        "name": "Server-Side Request Forgery (SSRF)",
        "source": "sparse",
        "original_content": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
        "keyphrase_sources": [
          {
            "id": "rootcause:misuse of the Go net/http library",
            "keyphrase": "misuse of the Go net/http library",
            "type": "rootcause"
          },
          {
            "id": "weakness:bypass CSRF checks",
            "keyphrase": "bypass CSRF checks",
            "type": "weakness"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "impact:bypass CSRF checks",
            "keyphrase": "bypass CSRF checks",
            "type": "impact"
          },
          {
            "id": "impact:manipulate cookies",
            "keyphrase": "manipulate cookies",
            "type": "impact"
          },
          {
            "id": "product:nosurf",
            "keyphrase": "nosurf",
            "type": "product"
          },
          {
            "id": "version:prior to 1.2.0",
            "keyphrase": "prior to 1.2.0",
            "type": "version"
          }
        ]
      },
      "similarity": 1374.9311573594105
    },
    {
      "metadata": {
        "doc_id": "346",
        "name": "Origin Validation Error",
        "source": "sparse",
        "original_content": "The product does not properly verify that the source of data or communication is valid.",
        "keyphrase_sources": [
          {
            "id": "rootcause:misuse of the Go net/http library",
            "keyphrase": "misuse of the Go net/http library",
            "type": "rootcause"
          },
          {
            "id": "weakness:bypass CSRF checks",
            "keyphrase": "bypass CSRF checks",
            "type": "weakness"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "impact:bypass CSRF checks",
            "keyphrase": "bypass CSRF checks",
            "type": "impact"
          },
          {
            "id": "impact:manipulate cookies",
            "keyphrase": "manipulate cookies",
            "type": "impact"
          },
          {
            "id": "product:nosurf",
            "keyphrase": "nosurf",
            "type": "product"
          },
          {
            "id": "version:prior to 1.2.0",
            "keyphrase": "prior to 1.2.0",
            "type": "version"
          }
        ]
      },
      "similarity": 1355.5399960035397
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-352",
      "CWE-79",
      "CWE-346"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {
    "352": [
      {
        "id": "rootcause:misuse of the Go net/http library",
        "keyphrase": "misuse of the Go net/http library",
        "type": "rootcause"
      },
      {
        "id": "weakness:bypass CSRF checks",
        "keyphrase": "bypass CSRF checks",
        "type": "weakness"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "impact:bypass CSRF checks",
        "keyphrase": "bypass CSRF checks",
        "type": "impact"
      },
      {
        "id": "impact:manipulate cookies",
        "keyphrase": "manipulate cookies",
        "type": "impact"
      },
      {
        "id": "product:nosurf",
        "keyphrase": "nosurf",
        "type": "product"
      },
      {
        "id": "version:prior to 1.2.0",
        "keyphrase": "prior to 1.2.0",
        "type": "version"
      }
    ],
    "79": [
      {
        "id": "rootcause:misuse of the Go net/http library",
        "keyphrase": "misuse of the Go net/http library",
        "type": "rootcause"
      },
      {
        "id": "weakness:bypass CSRF checks",
        "keyphrase": "bypass CSRF checks",
        "type": "weakness"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "impact:bypass CSRF checks",
        "keyphrase": "bypass CSRF checks",
        "type": "impact"
      },
      {
        "id": "impact:manipulate cookies",
        "keyphrase": "manipulate cookies",
        "type": "impact"
      },
      {
        "id": "product:nosurf",
        "keyphrase": "nosurf",
        "type": "product"
      },
      {
        "id": "version:prior to 1.2.0",
        "keyphrase": "prior to 1.2.0",
        "type": "version"
      }
    ],
    "201": [
      {
        "id": "rootcause:misuse of the Go net/http library",
        "keyphrase": "misuse of the Go net/http library",
        "type": "rootcause"
      },
      {
        "id": "weakness:bypass CSRF checks",
        "keyphrase": "bypass CSRF checks",
        "type": "weakness"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "impact:bypass CSRF checks",
        "keyphrase": "bypass CSRF checks",
        "type": "impact"
      },
      {
        "id": "impact:manipulate cookies",
        "keyphrase": "manipulate cookies",
        "type": "impact"
      },
      {
        "id": "product:nosurf",
        "keyphrase": "nosurf",
        "type": "product"
      },
      {
        "id": "version:prior to 1.2.0",
        "keyphrase": "prior to 1.2.0",
        "type": "version"
      }
    ],
    "918": [
      {
        "id": "rootcause:misuse of the Go net/http library",
        "keyphrase": "misuse of the Go net/http library",
        "type": "rootcause"
      },
      {
        "id": "weakness:bypass CSRF checks",
        "keyphrase": "bypass CSRF checks",
        "type": "weakness"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "impact:bypass CSRF checks",
        "keyphrase": "bypass CSRF checks",
        "type": "impact"
      },
      {
        "id": "impact:manipulate cookies",
        "keyphrase": "manipulate cookies",
        "type": "impact"
      },
      {
        "id": "product:nosurf",
        "keyphrase": "nosurf",
        "type": "product"
      },
      {
        "id": "version:prior to 1.2.0",
        "keyphrase": "prior to 1.2.0",
        "type": "version"
      }
    ],
    "346": [
      {
        "id": "rootcause:misuse of the Go net/http library",
        "keyphrase": "misuse of the Go net/http library",
        "type": "rootcause"
      },
      {
        "id": "weakness:bypass CSRF checks",
        "keyphrase": "bypass CSRF checks",
        "type": "weakness"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "impact:bypass CSRF checks",
        "keyphrase": "bypass CSRF checks",
        "type": "impact"
      },
      {
        "id": "impact:manipulate cookies",
        "keyphrase": "manipulate cookies",
        "type": "impact"
      },
      {
        "id": "product:nosurf",
        "keyphrase": "nosurf",
        "type": "product"
      },
      {
        "id": "version:prior to 1.2.0",
        "keyphrase": "prior to 1.2.0",
        "type": "version"
      }
    ]
  }
}