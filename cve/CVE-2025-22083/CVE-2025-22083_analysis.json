{
  "cve_id": "CVE-2025-22083",
  "description": "In the Linux kernel, the following vulnerability has been resolved vhost-scsi Fix handling of multiple calls to vhost_scsi_set_endpoint If vhost_scsi_set_endpoint is called multiple times without a vhost_scsi_clear_endpoint between them, we can hit multiple bugs found by Haoran Zhang 1. **Use-after-free** when no tpgs are found This fixes a **use after free** that occurs when vhost_scsi_set_endpoint is called more than once and calls after the first call do not find any tpgs to add to the vs_tpg. When vhost_scsi_set_endpoint first finds tpgs to add to the vs_tpg array match=true, so we will do vhost_vq_set_backend(vq, vs_tpg) ... kfree(vs->vs_tpg) vs->vs_tpg = vs_tpg If vhost_scsi_set_endpoint is called again and no tpgs are found match=false so we skip the vhost_vq_set_backend call leaving the pointer to the vs_tpg we then free via kfree(vs->vs_tpg) vs->vs_tpg = vs_tpg If a scsi request is then sent we do vhost_scsi_handle_vq -> vhost_scsi_get_req -> vhost_vq_get_backend which sees the vs_tpg we just did a kfree on. 2. **Tpg dir removal hang** This patch fixes an issue where we cannot remove a LIO/target layer tpg (and structs above it like the target) dir due to the refcount dropping to -1. The problem is that if vhost_scsi_set_endpoint detects a tpg is already in the vs->vs_tpg array or if the tpg has been removed so target_depend_item fails, the undepend goto handler will do target_undepend_item on all tpgs in the vs_tpg array dropping their refcount to 0. At this time vs_tpg contains both the tpgs we have added in the current vhost_scsi_set_endpoint call as well as tpgs we added in previous calls which are also in vs->vs_tpg. Later, when vhost_scsi_clear_endpoint runs it will do target_undepend_item on all the tpgs in the vs->vs_tpg which will drop their refcount to -1. Userspace will then not be able to remove the tpg and will hang when it tries to do rmdir on the tpg dir. 3. **Tpg leak** This fixes a bug where we can leak tpgs and cause them to be un-removable because the target name is overwritten when vhost_scsi_set_endpoint is called multiple times but with different target names. The bug occurs if a user has called VHOST_SCSI_SET_ENDPOINT and setup a vhost-scsi device to target/tpg mapping, then calls VHOST_SCSI_SET_ENDPOINT again with a new target name that has tpgs we havent seen before (target1 has tpg1 but target2 has tpg2). When this happens we dont teardown the old target tpg mapping and just overwrite the target name and the vs->vs_tpg array. Later when we do vhost_scsi_clear_endpoint, we are passed in either target1 or target2s name and we will only match that targets tpgs when we loop over the vs->vs_tpg. We will then return from the function without doing target_undepend_item on the tpgs. Because of all these bugs, it looks like being able to call vhost_scsi_set_endpoint multiple times was never supported. The major user, QEMU, already has checks to prevent this use case. So to fix the issues, this patch prevents vhost_scsi_set_endpoint from being called if its already successfully added tpgs. To add, remove or change the tpg config or target name, you must do a vhost_scsi_clear_endpoint first.",
  "key_phrases": {
    "rootcause": [
      "Tpg dir removal hang",
      "use after free",
      "Use-after-free",
      "Tpg leak"
    ],
    "weakness": "use-after-free",
    "impact": "",
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": "vhost-scsi"
  },
  "reference_content": "UNRELATED",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "```markdown\n# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-416 | Use After Free | 0.9 | Variant | Primary | Allowed |\n| CWE-415 | Double Free | 0.6 | Variant | Secondary | Allowed |\n| CWE-667 | Improper Locking | 0.5 | Class | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is a **use-after-free**, which is a type of memory corruption. CWE-416 (Use After Free) is a variant-level CWE that directly describes this condition. We also considered CWE-415 (Double Free) as a secondary issue, because a double free can lead to a use-after-free. CWE-667 (Improper Locking) was also considered as a potential contributing factor if a race condition allowed the memory to be freed while another thread still had access to it.\n\n```mermaid\ngraph TD\n    cwe416[\"CWE-416: Use After Free\"]\n    cwe415[\"CWE-415: Double Free\"]\n    cwe667[\"CWE-667: Improper Locking\"]\n    cwe666[\"CWE-666: Operation on Resource in Wrong Phase of Lifetime\"]\n    \n    cwe416 -->|CHILDOF| cwe666\n    cwe415 -->|CHILDOF| cwe666\n    cwe415 -->|CANPRECEDE| cwe416\n    cwe667 -->|CANPRECEDE| cwe416\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe416 primary\n    class cwe415,cwe667 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with multiple calls to `vhost_scsi_set_endpoint` without an intervening `vhost_scsi_clear_endpoint`. This leads to several problems:\n\n1.  **Use-after-free**: A pointer to `vs_tpg` is freed, but the pointer is still used later. This is the primary weakness.\n2.  **Tpg dir removal hang**: The refcount of a tpg drops to -1, preventing its removal.\n3.  **Tpg leak**: Target names are overwritten, leading to un-removable tpgs.\n\nThe primary root cause is the **improper state management** when `vhost_scsi_set_endpoint` is called multiple times. This leads to the **use-after-free** as the immediate consequence, and further issues like the hang and leak.\n\n## Summary of Analysis\nThe primary weakness is a **use-after-free** vulnerability in the Linux kernel's vhost-scsi component. This occurs when the `vhost_scsi_set_endpoint` function is called multiple times without an intervening call to `vhost_scsi_clear_endpoint`, leading to a freed pointer being accessed later. The vulnerability description explicitly mentions \"This fixes a **use after free** that occurs when vhost_scsi_set_endpoint is called more than once...\". This clearly points to **CWE-416: Use After Free** as the primary CWE.\n\n**CWE-416: Use After Free** is the most specific and accurate representation of the vulnerability. The vulnerability description clearly states the **use-after-free** condition, making CWE-416 the most appropriate choice.\n\nThe graph relationships helped confirm that **CWE-416** is the most appropriate primary weakness.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n**Why Not Selected**: While a race condition *could* contribute, the primary issue is the **use-after-free**, not necessarily a locking problem. Thus, this is a secondary consideration.\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n**Why Not Selected**: Similar to CWE-667, concurrency might play a role, but the core issue is the **use-after-free**.\n\n## CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Why Not Selected**: This CWE is not relevant to the vulnerability description. The issue is not about sensitive information.\n\n## CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Why Not Selected**: The vulnerability isn't a TOCTOU issue. There's no check performed before the use.\n\n## CWE-824: Access of Uninitialized Pointer\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product accesses or uses a pointer that has not been initialized.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Why Not Selected**: The issue is that the pointer was freed, not that it was uninitialized.\n\n## CWE-755: Improper Handling of Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product does not handle or incorrectly handles an exceptional condition.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n**Why Not Selected**: This CWE is too generic. The vulnerability is a specific type of memory corruption.\n\n## CWE-404: Improper Resource Shutdown or Release\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not release or incorrectly releases a resource before it is made available for re-use.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n**Why Not Selected**: This is related, but **CWE-416** is more specific, because it focuses on the *use* after the release.\n\n## CWE-754: Improper Check for Unusual or Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n**Why Not Selected**: The issue isn't a missing check, but rather using memory after it's been freed.\n\n## CWE-59: Improper Link Resolution Before File Access ('Link Following')\n**Abstraction Level**:",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-416 | Use After Free | 0.9 | Variant | Primary | Allowed |\n| CWE-415 | Double Free | 0.6 | Variant | Secondary | Allowed |\n| CWE-667 | Improper Locking | 0.5 | Class | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is a **use-after-free**, which is a type of memory corruption. CWE-416 (Use After Free) is a variant-level CWE that directly describes this condition. We also considered CWE-415 (Double Free) as a secondary issue, because a double free can lead to a use-after-free. CWE-667 (Improper Locking) was also considered as a potential contributing factor if a race condition allowed the memory to be freed while another thread still had access to it.mermaid\n```mermaid\ngraph TD\n    cwe416[\"CWE-416: Use After Free\"]\n    cwe415[\"CWE-415: Double Free\"]\n    cwe667[\"CWE-667: Improper Locking\"]\n    cwe666[\"CWE-666: Operation on Resource in Wrong Phase of Lifetime\"]\n    \n    cwe416 -->|CHILDOF| cwe666\n    cwe415 -->|CHILDOF| cwe666\n    cwe415 -->|CANPRECEDE| cwe416\n    cwe667 -->|CANPRECEDE| cwe416\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe416 primary\n    class cwe415,cwe667 secondary\n\n```\n\n\n## Vulnerability Chain\nThe vulnerability chain starts with multiple calls to `vhost_scsi_set_endpoint` without an intervening `vhost_scsi_clear_endpoint`. This leads to several problems:\n\n1.  **Use-after-free**: A pointer to `vs_tpg` is freed, but the pointer is still used later. This is the primary weakness.\n2.  **Tpg dir removal hang**: The refcount of a tpg drops to -1, preventing its removal.\n3.  **Tpg leak**: Target names are overwritten, leading to un-removable tpgs.\n\nThe primary root cause is the **improper state management** when `vhost_scsi_set_endpoint` is called multiple times. This leads to the **use-after-free** as the immediate consequence, and further issues like the hang and leak.\n\n## Summary of Analysis\nThe primary weakness is a **use-after-free** vulnerability in the Linux kernel's vhost-scsi component. This occurs when the `vhost_scsi_set_endpoint` function is called multiple times without an intervening call to `vhost_scsi_clear_endpoint`, leading to a freed pointer being accessed later. The vulnerability description explicitly mentions \"This fixes a **use after free** that occurs when vhost_scsi_set_endpoint is called more than once...\". This clearly points to **CWE-416: Use After Free** as the primary CWE.\n\n**CWE-416: Use After Free** is the most specific and accurate representation of the vulnerability. The vulnerability description clearly states the **use-after-free** condition, making CWE-416 the most appropriate choice.\n\nThe graph relationships helped confirm that **CWE-416** is the most appropriate primary weakness.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n**Why Not Selected**: While a race condition *could* contribute, the primary issue is the **use-after-free**, not necessarily a locking problem. Thus, this is a secondary consideration.\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n**Why Not Selected**: Similar to CWE-667, concurrency might play a role, but the core issue is the **use-after-free**.\n\n## CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Why Not Selected**: This CWE is not relevant to the vulnerability description. The issue is not about sensitive information.\n\n## CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Why Not Selected**: The vulnerability isn't a TOCTOU issue. There's no check performed before the use.\n\n## CWE-824: Access of Uninitialized Pointer\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product accesses or uses a pointer that has not been initialized.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Why Not Selected**: The issue is that the pointer was freed, not that it was uninitialized.\n\n## CWE-755: Improper Handling of Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product does not handle or incorrectly handles an exceptional condition.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n**Why Not Selected**: This CWE is too generic. The vulnerability is a specific type of memory corruption.\n\n## CWE-404: Improper Resource Shutdown or Release\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not release or incorrectly releases a resource before it is made available for re-use.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n**Why Not Selected**: This is related, but **CWE-416** is more specific, because it focuses on the *use* after the release.\n\n## CWE-754: Improper Check for Unusual or Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n**Why Not Selected**: The issue isn't a missing check, but rather using memory after it's been freed.\n\n## CWE-59: Improper Link Resolution Before File Access ('Link Following')\n**Abstraction Level**:\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-416:**\n- 416 (Use After Free) - ROOT\n\n\n**Chain starting from CWE-404:**\n- 404 (Improper Resource Shutdown or Release) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "212",
        "name": "Improper Removal of Sensitive Information Before Storage or Transfer",
        "source": "sparse",
        "original_content": "The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.",
        "keyphrase_sources": [
          {
            "id": "rootcause:Tpg dir removal hang",
            "keyphrase": "Tpg dir removal hang",
            "type": "rootcause"
          },
          {
            "id": "rootcause:use after free",
            "keyphrase": "use after free",
            "type": "rootcause"
          },
          {
            "id": "rootcause:Use-after-free",
            "keyphrase": "Use-after-free",
            "type": "rootcause"
          },
          {
            "id": "rootcause:Tpg leak",
            "keyphrase": "Tpg leak",
            "type": "rootcause"
          },
          {
            "id": "weakness:use-after-free",
            "keyphrase": "use-after-free",
            "type": "weakness"
          },
          {
            "id": "product:Linux kernel",
            "keyphrase": "Linux kernel",
            "type": "product"
          },
          {
            "id": "component:vhost-scsi",
            "keyphrase": "vhost-scsi",
            "type": "component"
          }
        ]
      },
      "similarity": 2225.6889286931864
    },
    {
      "metadata": {
        "doc_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "source": "sparse",
        "original_content": "The product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.",
        "keyphrase_sources": [
          {
            "id": "rootcause:Tpg dir removal hang",
            "keyphrase": "Tpg dir removal hang",
            "type": "rootcause"
          },
          {
            "id": "rootcause:use after free",
            "keyphrase": "use after free",
            "type": "rootcause"
          },
          {
            "id": "rootcause:Use-after-free",
            "keyphrase": "Use-after-free",
            "type": "rootcause"
          },
          {
            "id": "rootcause:Tpg leak",
            "keyphrase": "Tpg leak",
            "type": "rootcause"
          },
          {
            "id": "weakness:use-after-free",
            "keyphrase": "use-after-free",
            "type": "weakness"
          },
          {
            "id": "product:Linux kernel",
            "keyphrase": "Linux kernel",
            "type": "product"
          },
          {
            "id": "component:vhost-scsi",
            "keyphrase": "vhost-scsi",
            "type": "component"
          }
        ]
      },
      "similarity": 2201.393450942219
    },
    {
      "metadata": {
        "doc_id": "415",
        "name": "Double Free",
        "source": "sparse",
        "original_content": "The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations.",
        "keyphrase_sources": [
          {
            "id": "rootcause:Tpg dir removal hang",
            "keyphrase": "Tpg dir removal hang",
            "type": "rootcause"
          },
          {
            "id": "rootcause:use after free",
            "keyphrase": "use after free",
            "type": "rootcause"
          },
          {
            "id": "rootcause:Use-after-free",
            "keyphrase": "Use-after-free",
            "type": "rootcause"
          },
          {
            "id": "rootcause:Tpg leak",
            "keyphrase": "Tpg leak",
            "type": "rootcause"
          },
          {
            "id": "weakness:use-after-free",
            "keyphrase": "use-after-free",
            "type": "weakness"
          },
          {
            "id": "product:Linux kernel",
            "keyphrase": "Linux kernel",
            "type": "product"
          },
          {
            "id": "component:vhost-scsi",
            "keyphrase": "vhost-scsi",
            "type": "component"
          }
        ]
      },
      "similarity": 2200.9327411647555
    },
    {
      "metadata": {
        "doc_id": "1284",
        "name": "Improper Validation of Specified Quantity in Input",
        "source": "sparse",
        "original_content": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.",
        "keyphrase_sources": [
          {
            "id": "rootcause:Tpg dir removal hang",
            "keyphrase": "Tpg dir removal hang",
            "type": "rootcause"
          },
          {
            "id": "rootcause:use after free",
            "keyphrase": "use after free",
            "type": "rootcause"
          },
          {
            "id": "rootcause:Use-after-free",
            "keyphrase": "Use-after-free",
            "type": "rootcause"
          },
          {
            "id": "rootcause:Tpg leak",
            "keyphrase": "Tpg leak",
            "type": "rootcause"
          },
          {
            "id": "weakness:use-after-free",
            "keyphrase": "use-after-free",
            "type": "weakness"
          },
          {
            "id": "product:Linux kernel",
            "keyphrase": "Linux kernel",
            "type": "product"
          },
          {
            "id": "component:vhost-scsi",
            "keyphrase": "vhost-scsi",
            "type": "component"
          }
        ]
      },
      "similarity": 2181.3940798653457
    },
    {
      "metadata": {
        "doc_id": "367",
        "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
        "source": "sparse",
        "original_content": "The product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.",
        "keyphrase_sources": [
          {
            "id": "rootcause:use after free",
            "keyphrase": "use after free",
            "type": "rootcause"
          },
          {
            "id": "rootcause:Use-after-free",
            "keyphrase": "Use-after-free",
            "type": "rootcause"
          },
          {
            "id": "weakness:use-after-free",
            "keyphrase": "use-after-free",
            "type": "weakness"
          },
          {
            "id": "product:Linux kernel",
            "keyphrase": "Linux kernel",
            "type": "product"
          }
        ]
      },
      "similarity": 2178.453212232806
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse",
        "original_content": "The product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check.",
        "keyphrase_sources": [
          {
            "id": "rootcause:Tpg dir removal hang",
            "keyphrase": "Tpg dir removal hang",
            "type": "rootcause"
          }
        ]
      },
      "similarity": 2163.2320996048943
    },
    {
      "metadata": {
        "doc_id": "61",
        "name": "UNIX Symbolic Link (Symlink) Following",
        "source": "sparse",
        "original_content": "The product, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.",
        "keyphrase_sources": [
          {
            "id": "rootcause:Tpg leak",
            "keyphrase": "Tpg leak",
            "type": "rootcause"
          },
          {
            "id": "component:vhost-scsi",
            "keyphrase": "vhost-scsi",
            "type": "component"
          }
        ]
      },
      "similarity": 2162.1764470076932
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-416",
      "CWE-404",
      "CWE-666",
      "CWE-667",
      "CWE-59",
      "CWE-362",
      "CWE-755",
      "CWE-824",
      "CWE-367",
      "CWE-415",
      "CWE-212",
      "CWE-754"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {
    "212": [
      {
        "id": "rootcause:Tpg dir removal hang",
        "keyphrase": "Tpg dir removal hang",
        "type": "rootcause"
      },
      {
        "id": "rootcause:use after free",
        "keyphrase": "use after free",
        "type": "rootcause"
      },
      {
        "id": "rootcause:Use-after-free",
        "keyphrase": "Use-after-free",
        "type": "rootcause"
      },
      {
        "id": "rootcause:Tpg leak",
        "keyphrase": "Tpg leak",
        "type": "rootcause"
      },
      {
        "id": "weakness:use-after-free",
        "keyphrase": "use-after-free",
        "type": "weakness"
      },
      {
        "id": "product:Linux kernel",
        "keyphrase": "Linux kernel",
        "type": "product"
      },
      {
        "id": "component:vhost-scsi",
        "keyphrase": "vhost-scsi",
        "type": "component"
      }
    ],
    "362": [
      {
        "id": "rootcause:Tpg dir removal hang",
        "keyphrase": "Tpg dir removal hang",
        "type": "rootcause"
      },
      {
        "id": "rootcause:use after free",
        "keyphrase": "use after free",
        "type": "rootcause"
      },
      {
        "id": "rootcause:Use-after-free",
        "keyphrase": "Use-after-free",
        "type": "rootcause"
      },
      {
        "id": "rootcause:Tpg leak",
        "keyphrase": "Tpg leak",
        "type": "rootcause"
      },
      {
        "id": "weakness:use-after-free",
        "keyphrase": "use-after-free",
        "type": "weakness"
      },
      {
        "id": "product:Linux kernel",
        "keyphrase": "Linux kernel",
        "type": "product"
      },
      {
        "id": "component:vhost-scsi",
        "keyphrase": "vhost-scsi",
        "type": "component"
      }
    ],
    "415": [
      {
        "id": "rootcause:Tpg dir removal hang",
        "keyphrase": "Tpg dir removal hang",
        "type": "rootcause"
      },
      {
        "id": "rootcause:use after free",
        "keyphrase": "use after free",
        "type": "rootcause"
      },
      {
        "id": "rootcause:Use-after-free",
        "keyphrase": "Use-after-free",
        "type": "rootcause"
      },
      {
        "id": "rootcause:Tpg leak",
        "keyphrase": "Tpg leak",
        "type": "rootcause"
      },
      {
        "id": "weakness:use-after-free",
        "keyphrase": "use-after-free",
        "type": "weakness"
      },
      {
        "id": "product:Linux kernel",
        "keyphrase": "Linux kernel",
        "type": "product"
      },
      {
        "id": "component:vhost-scsi",
        "keyphrase": "vhost-scsi",
        "type": "component"
      }
    ],
    "1284": [
      {
        "id": "rootcause:Tpg dir removal hang",
        "keyphrase": "Tpg dir removal hang",
        "type": "rootcause"
      },
      {
        "id": "rootcause:use after free",
        "keyphrase": "use after free",
        "type": "rootcause"
      },
      {
        "id": "rootcause:Use-after-free",
        "keyphrase": "Use-after-free",
        "type": "rootcause"
      },
      {
        "id": "rootcause:Tpg leak",
        "keyphrase": "Tpg leak",
        "type": "rootcause"
      },
      {
        "id": "weakness:use-after-free",
        "keyphrase": "use-after-free",
        "type": "weakness"
      },
      {
        "id": "product:Linux kernel",
        "keyphrase": "Linux kernel",
        "type": "product"
      },
      {
        "id": "component:vhost-scsi",
        "keyphrase": "vhost-scsi",
        "type": "component"
      }
    ],
    "863": [
      {
        "id": "rootcause:Tpg dir removal hang",
        "keyphrase": "Tpg dir removal hang",
        "type": "rootcause"
      }
    ],
    "367": [
      {
        "id": "rootcause:use after free",
        "keyphrase": "use after free",
        "type": "rootcause"
      },
      {
        "id": "rootcause:Use-after-free",
        "keyphrase": "Use-after-free",
        "type": "rootcause"
      },
      {
        "id": "weakness:use-after-free",
        "keyphrase": "use-after-free",
        "type": "weakness"
      },
      {
        "id": "product:Linux kernel",
        "keyphrase": "Linux kernel",
        "type": "product"
      }
    ],
    "61": [
      {
        "id": "rootcause:Tpg leak",
        "keyphrase": "Tpg leak",
        "type": "rootcause"
      },
      {
        "id": "component:vhost-scsi",
        "keyphrase": "vhost-scsi",
        "type": "component"
      }
    ]
  }
}