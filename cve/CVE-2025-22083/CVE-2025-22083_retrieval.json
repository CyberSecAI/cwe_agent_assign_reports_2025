{
  "vulnerability_info": "VulnerabilityInfo(cve_id='CVE-2025-22083', description='In the Linux kernel, the following vulnerability has been resolved vhost-scsi Fix handling of multiple calls to vhost_scsi_set_endpoint If vhost_scsi_set_endpoint is called multiple times without a vhost_scsi_clear_endpoint between them, we can hit multiple bugs found by Haoran Zhang 1. **Use-after-free** when no tpgs are found This fixes a **use after free** that occurs when vhost_scsi_set_endpoint is called more than once and calls after the first call do not find any tpgs to add to the vs_tpg. When vhost_scsi_set_endpoint first finds tpgs to add to the vs_tpg array match=true, so we will do vhost_vq_set_backend(vq, vs_tpg) ... kfree(vs->vs_tpg) vs->vs_tpg = vs_tpg If vhost_scsi_set_endpoint is called again and no tpgs are found match=false so we skip the vhost_vq_set_backend call leaving the pointer to the vs_tpg we then free via kfree(vs->vs_tpg) vs->vs_tpg = vs_tpg If a scsi request is then sent we do vhost_scsi_handle_vq -> vhost_scsi_get_req -> vhost_vq_get_backend which sees the vs_tpg we just did a kfree on. 2. **Tpg dir removal hang** This patch fixes an issue where we cannot remove a LIO/target layer tpg (and structs above it like the target) dir due to the refcount dropping to -1. The problem is that if vhost_scsi_set_endpoint detects a tpg is already in the vs->vs_tpg array or if the tpg has been removed so target_depend_item fails, the undepend goto handler will do target_undepend_item on all tpgs in the vs_tpg array dropping their refcount to 0. At this time vs_tpg contains both the tpgs we have added in the current vhost_scsi_set_endpoint call as well as tpgs we added in previous calls which are also in vs->vs_tpg. Later, when vhost_scsi_clear_endpoint runs it will do target_undepend_item on all the tpgs in the vs->vs_tpg which will drop their refcount to -1. Userspace will then not be able to remove the tpg and will hang when it tries to do rmdir on the tpg dir. 3. **Tpg leak** This fixes a bug where we can leak tpgs and cause them to be un-removable because the target name is overwritten when vhost_scsi_set_endpoint is called multiple times but with different target names. The bug occurs if a user has called VHOST_SCSI_SET_ENDPOINT and setup a vhost-scsi device to target/tpg mapping, then calls VHOST_SCSI_SET_ENDPOINT again with a new target name that has tpgs we havent seen before (target1 has tpg1 but target2 has tpg2). When this happens we dont teardown the old target tpg mapping and just overwrite the target name and the vs->vs_tpg array. Later when we do vhost_scsi_clear_endpoint, we are passed in either target1 or target2s name and we will only match that targets tpgs when we loop over the vs->vs_tpg. We will then return from the function without doing target_undepend_item on the tpgs. Because of all these bugs, it looks like being able to call vhost_scsi_set_endpoint multiple times was never supported. The major user, QEMU, already has checks to prevent this use case. So to fix the issues, this patch prevents vhost_scsi_set_endpoint from being called if its already successfully added tpgs. To add, remove or change the tpg config or target name, you must do a vhost_scsi_clear_endpoint first.', key_phrases={'rootcause': ['Tpg dir removal hang', 'use after free', 'Use-after-free', 'Tpg leak'], 'weakness': 'use-after-free', 'impact': '', 'vector': '', 'attacker': '', 'product': 'Linux kernel', 'version': '', 'component': 'vhost-scsi'}, reference_content='UNRELATED', similar_info={'cwe_distribution': {}, 'cwe_consensus': '', 'similarity_stats': {'thresholds': [], 'total_samples_by_threshold': {}, 'top_cwes_by_threshold': {}}}, similarity_summary=SimilarityInsight(consensus_cwe='', top_cwes=[], confidence_levels={}, total_samples=0), analysis='', analysis_with_relationships='', criticism='', resolution='', relevant_cwes=[{'metadata': {'doc_id': '212', 'name': 'Improper Removal of Sensitive Information Before Storage or Transfer', 'source': 'sparse', 'original_content': 'The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.', 'keyphrase_sources': [{'id': 'rootcause:Tpg dir removal hang', 'keyphrase': 'Tpg dir removal hang', 'type': 'rootcause'}, {'id': 'rootcause:use after free', 'keyphrase': 'use after free', 'type': 'rootcause'}, {'id': 'rootcause:Use-after-free', 'keyphrase': 'Use-after-free', 'type': 'rootcause'}, {'id': 'rootcause:Tpg leak', 'keyphrase': 'Tpg leak', 'type': 'rootcause'}, {'id': 'weakness:use-after-free', 'keyphrase': 'use-after-free', 'type': 'weakness'}, {'id': 'product:Linux kernel', 'keyphrase': 'Linux kernel', 'type': 'product'}, {'id': 'component:vhost-scsi', 'keyphrase': 'vhost-scsi', 'type': 'component'}]}, 'similarity': np.float64(2225.6889286931864)}, {'metadata': {'doc_id': '362', 'name': \"Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\", 'source': 'sparse', 'original_content': 'The product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.', 'keyphrase_sources': [{'id': 'rootcause:Tpg dir removal hang', 'keyphrase': 'Tpg dir removal hang', 'type': 'rootcause'}, {'id': 'rootcause:use after free', 'keyphrase': 'use after free', 'type': 'rootcause'}, {'id': 'rootcause:Use-after-free', 'keyphrase': 'Use-after-free', 'type': 'rootcause'}, {'id': 'rootcause:Tpg leak', 'keyphrase': 'Tpg leak', 'type': 'rootcause'}, {'id': 'weakness:use-after-free', 'keyphrase': 'use-after-free', 'type': 'weakness'}, {'id': 'product:Linux kernel', 'keyphrase': 'Linux kernel', 'type': 'product'}, {'id': 'component:vhost-scsi', 'keyphrase': 'vhost-scsi', 'type': 'component'}]}, 'similarity': np.float64(2201.393450942219)}, {'metadata': {'doc_id': '415', 'name': 'Double Free', 'source': 'sparse', 'original_content': 'The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations.', 'keyphrase_sources': [{'id': 'rootcause:Tpg dir removal hang', 'keyphrase': 'Tpg dir removal hang', 'type': 'rootcause'}, {'id': 'rootcause:use after free', 'keyphrase': 'use after free', 'type': 'rootcause'}, {'id': 'rootcause:Use-after-free', 'keyphrase': 'Use-after-free', 'type': 'rootcause'}, {'id': 'rootcause:Tpg leak', 'keyphrase': 'Tpg leak', 'type': 'rootcause'}, {'id': 'weakness:use-after-free', 'keyphrase': 'use-after-free', 'type': 'weakness'}, {'id': 'product:Linux kernel', 'keyphrase': 'Linux kernel', 'type': 'product'}, {'id': 'component:vhost-scsi', 'keyphrase': 'vhost-scsi', 'type': 'component'}]}, 'similarity': np.float64(2200.9327411647555)}, {'metadata': {'doc_id': '1284', 'name': 'Improper Validation of Specified Quantity in Input', 'source': 'sparse', 'original_content': 'The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.', 'keyphrase_sources': [{'id': 'rootcause:Tpg dir removal hang', 'keyphrase': 'Tpg dir removal hang', 'type': 'rootcause'}, {'id': 'rootcause:use after free', 'keyphrase': 'use after free', 'type': 'rootcause'}, {'id': 'rootcause:Use-after-free', 'keyphrase': 'Use-after-free', 'type': 'rootcause'}, {'id': 'rootcause:Tpg leak', 'keyphrase': 'Tpg leak', 'type': 'rootcause'}, {'id': 'weakness:use-after-free', 'keyphrase': 'use-after-free', 'type': 'weakness'}, {'id': 'product:Linux kernel', 'keyphrase': 'Linux kernel', 'type': 'product'}, {'id': 'component:vhost-scsi', 'keyphrase': 'vhost-scsi', 'type': 'component'}]}, 'similarity': np.float64(2181.3940798653457)}, {'metadata': {'doc_id': '367', 'name': 'Time-of-check Time-of-use (TOCTOU) Race Condition', 'source': 'sparse', 'original_content': \"The product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.\", 'keyphrase_sources': [{'id': 'rootcause:use after free', 'keyphrase': 'use after free', 'type': 'rootcause'}, {'id': 'rootcause:Use-after-free', 'keyphrase': 'Use-after-free', 'type': 'rootcause'}, {'id': 'weakness:use-after-free', 'keyphrase': 'use-after-free', 'type': 'weakness'}, {'id': 'product:Linux kernel', 'keyphrase': 'Linux kernel', 'type': 'product'}]}, 'similarity': np.float64(2178.453212232806)}, {'metadata': {'doc_id': '863', 'name': 'Incorrect Authorization', 'source': 'sparse', 'original_content': 'The product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check.', 'keyphrase_sources': [{'id': 'rootcause:Tpg dir removal hang', 'keyphrase': 'Tpg dir removal hang', 'type': 'rootcause'}]}, 'similarity': np.float64(2163.2320996048943)}, {'metadata': {'doc_id': '61', 'name': 'UNIX Symbolic Link (Symlink) Following', 'source': 'sparse', 'original_content': 'The product, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.', 'keyphrase_sources': [{'id': 'rootcause:Tpg leak', 'keyphrase': 'Tpg leak', 'type': 'rootcause'}, {'id': 'component:vhost-scsi', 'keyphrase': 'vhost-scsi', 'type': 'component'}]}, 'similarity': np.float64(2162.1764470076932)}], identified_cwes={'analyzer': [], 'critic_additional': []})",
  "retrieval_results": {
    "has_multiple_keyphrases": true,
    "keyphrase_cwe_sets": {
      "rootcause:Tpg dir removal hang": {
        "keyphrase": "Tpg dir removal hang",
        "type": "rootcause",
        "cwes": [
          {
            "metadata": {
              "doc_id": "212",
              "name": "Improper Removal of Sensitive Information Before Storage or Transfer",
              "source": "sparse",
              "original_content": "The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.",
              "keyphrase_sources": [
                {
                  "id": "rootcause:Tpg dir removal hang",
                  "keyphrase": "Tpg dir removal hang",
                  "type": "rootcause"
                },
                {
                  "id": "rootcause:use after free",
                  "keyphrase": "use after free",
                  "type": "rootcause"
                },
                {
                  "id": "rootcause:Use-after-free",
                  "keyphrase": "Use-after-free",
                  "type": "rootcause"
                },
                {
                  "id": "rootcause:Tpg leak",
                  "keyphrase": "Tpg leak",
                  "type": "rootcause"
                },
                {
                  "id": "weakness:use-after-free",
                  "keyphrase": "use-after-free",
                  "type": "weakness"
                },
                {
                  "id": "product:Linux kernel",
                  "keyphrase": "Linux kernel",
                  "type": "product"
                },
                {
                  "id": "component:vhost-scsi",
                  "keyphrase": "vhost-scsi",
                  "type": "component"
                }
              ]
            },
            "similarity": 2225.6889286931864
          },
          {
            "metadata": {
              "doc_id": "362",
              "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
              "source": "sparse",
              "original_content": "The product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.",
              "keyphrase_sources": [
                {
                  "id": "rootcause:Tpg dir removal hang",
                  "keyphrase": "Tpg dir removal hang",
                  "type": "rootcause"
                },
                {
                  "id": "rootcause:use after free",
                  "keyphrase": "use after free",
                  "type": "rootcause"
                },
                {
                  "id": "rootcause:Use-after-free",
                  "keyphrase": "Use-after-free",
                  "type": "rootcause"
                },
                {
                  "id": "rootcause:Tpg leak",
                  "keyphrase": "Tpg leak",
                  "type": "rootcause"
                },
                {
                  "id": "weakness:use-after-free",
                  "keyphrase": "use-after-free",
                  "type": "weakness"
                },
                {
                  "id": "product:Linux kernel",
                  "keyphrase": "Linux kernel",
                  "type": "product"
                },
                {
                  "id": "component:vhost-scsi",
                  "keyphrase": "vhost-scsi",
                  "type": "component"
                }
              ]
            },
            "similarity": 2201.393450942219
          },
          {
            "metadata": {
              "doc_id": "415",
              "name": "Double Free",
              "source": "sparse",
              "original_content": "The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations.",
              "keyphrase_sources": [
                {
                  "id": "rootcause:Tpg dir removal hang",
                  "keyphrase": "Tpg dir removal hang",
                  "type": "rootcause"
                },
                {
                  "id": "rootcause:use after free",
                  "keyphrase": "use after free",
                  "type": "rootcause"
                },
                {
                  "id": "rootcause:Use-after-free",
                  "keyphrase": "Use-after-free",
                  "type": "rootcause"
                },
                {
                  "id": "rootcause:Tpg leak",
                  "keyphrase": "Tpg leak",
                  "type": "rootcause"
                },
                {
                  "id": "weakness:use-after-free",
                  "keyphrase": "use-after-free",
                  "type": "weakness"
                },
                {
                  "id": "product:Linux kernel",
                  "keyphrase": "Linux kernel",
                  "type": "product"
                },
                {
                  "id": "component:vhost-scsi",
                  "keyphrase": "vhost-scsi",
                  "type": "component"
                }
              ]
            },
            "similarity": 2200.9327411647555
          },
          {
            "metadata": {
              "doc_id": "1284",
              "name": "Improper Validation of Specified Quantity in Input",
              "source": "sparse",
              "original_content": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.",
              "keyphrase_sources": [
                {
                  "id": "rootcause:Tpg dir removal hang",
                  "keyphrase": "Tpg dir removal hang",
                  "type": "rootcause"
                },
                {
                  "id": "rootcause:use after free",
                  "keyphrase": "use after free",
                  "type": "rootcause"
                },
                {
                  "id": "rootcause:Use-after-free",
                  "keyphrase": "Use-after-free",
                  "type": "rootcause"
                },
                {
                  "id": "rootcause:Tpg leak",
                  "keyphrase": "Tpg leak",
                  "type": "rootcause"
                },
                {
                  "id": "weakness:use-after-free",
                  "keyphrase": "use-after-free",
                  "type": "weakness"
                },
                {
                  "id": "product:Linux kernel",
                  "keyphrase": "Linux kernel",
                  "type": "product"
                },
                {
                  "id": "component:vhost-scsi",
                  "keyphrase": "vhost-scsi",
                  "type": "component"
                }
              ]
            },
            "similarity": 2181.3940798653457
          },
          {
            "metadata": {
              "doc_id": "863",
              "name": "Incorrect Authorization",
              "source": "sparse",
              "original_content": "The product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check.",
              "keyphrase_sources": [
                {
                  "id": "rootcause:Tpg dir removal hang",
                  "keyphrase": "Tpg dir removal hang",
                  "type": "rootcause"
                }
              ]
            },
            "similarity": 2163.2320996048943
          }
        ]
      },
      "rootcause:use after free": {
        "keyphrase": "use after free",
        "type": "rootcause",
        "cwes": [
          {
            "metadata": {
              "doc_id": "415",
              "name": "Double Free",
              "source": "sparse",
              "original_content": "The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations."
            },
            "similarity": 2249.411426582996
          },
          {
            "metadata": {
              "doc_id": "362",
              "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
              "source": "sparse",
              "original_content": "The product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently."
            },
            "similarity": 2227.9435191399525
          },
          {
            "metadata": {
              "doc_id": "212",
              "name": "Improper Removal of Sensitive Information Before Storage or Transfer",
              "source": "sparse",
              "original_content": "The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors."
            },
            "similarity": 2187.6743151947776
          },
          {
            "metadata": {
              "doc_id": "367",
              "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
              "source": "sparse",
              "original_content": "The product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.",
              "keyphrase_sources": [
                {
                  "id": "rootcause:use after free",
                  "keyphrase": "use after free",
                  "type": "rootcause"
                },
                {
                  "id": "rootcause:Use-after-free",
                  "keyphrase": "Use-after-free",
                  "type": "rootcause"
                },
                {
                  "id": "weakness:use-after-free",
                  "keyphrase": "use-after-free",
                  "type": "weakness"
                },
                {
                  "id": "product:Linux kernel",
                  "keyphrase": "Linux kernel",
                  "type": "product"
                }
              ]
            },
            "similarity": 2178.453212232806
          },
          {
            "metadata": {
              "doc_id": "1284",
              "name": "Improper Validation of Specified Quantity in Input",
              "source": "sparse",
              "original_content": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties."
            },
            "similarity": 2176.771905104416
          }
        ]
      },
      "rootcause:Use-after-free": {
        "keyphrase": "Use-after-free",
        "type": "rootcause",
        "cwes": [
          {
            "metadata": {
              "doc_id": "415",
              "name": "Double Free",
              "source": "sparse",
              "original_content": "The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations."
            },
            "similarity": 2249.411426582996
          },
          {
            "metadata": {
              "doc_id": "362",
              "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
              "source": "sparse",
              "original_content": "The product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently."
            },
            "similarity": 2227.9435191399525
          },
          {
            "metadata": {
              "doc_id": "212",
              "name": "Improper Removal of Sensitive Information Before Storage or Transfer",
              "source": "sparse",
              "original_content": "The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors."
            },
            "similarity": 2187.6743151947776
          },
          {
            "metadata": {
              "doc_id": "367",
              "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
              "source": "sparse",
              "original_content": "The product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state."
            },
            "similarity": 2178.453212232806
          },
          {
            "metadata": {
              "doc_id": "1284",
              "name": "Improper Validation of Specified Quantity in Input",
              "source": "sparse",
              "original_content": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties."
            },
            "similarity": 2176.771905104416
          }
        ]
      },
      "rootcause:Tpg leak": {
        "keyphrase": "Tpg leak",
        "type": "rootcause",
        "cwes": [
          {
            "metadata": {
              "doc_id": "415",
              "name": "Double Free",
              "source": "sparse",
              "original_content": "The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations."
            },
            "similarity": 2200.9327411647555
          },
          {
            "metadata": {
              "doc_id": "212",
              "name": "Improper Removal of Sensitive Information Before Storage or Transfer",
              "source": "sparse",
              "original_content": "The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors."
            },
            "similarity": 2183.547929091248
          },
          {
            "metadata": {
              "doc_id": "362",
              "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
              "source": "sparse",
              "original_content": "The product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently."
            },
            "similarity": 2183.1459808955583
          },
          {
            "metadata": {
              "doc_id": "1284",
              "name": "Improper Validation of Specified Quantity in Input",
              "source": "sparse",
              "original_content": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties."
            },
            "similarity": 2169.002868392073
          },
          {
            "metadata": {
              "doc_id": "61",
              "name": "UNIX Symbolic Link (Symlink) Following",
              "source": "sparse",
              "original_content": "The product, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.",
              "keyphrase_sources": [
                {
                  "id": "rootcause:Tpg leak",
                  "keyphrase": "Tpg leak",
                  "type": "rootcause"
                },
                {
                  "id": "component:vhost-scsi",
                  "keyphrase": "vhost-scsi",
                  "type": "component"
                }
              ]
            },
            "similarity": 2162.1764470076932
          }
        ]
      },
      "weakness:use-after-free": {
        "keyphrase": "use-after-free",
        "type": "weakness",
        "cwes": [
          {
            "metadata": {
              "doc_id": "415",
              "name": "Double Free",
              "source": "sparse",
              "original_content": "The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations."
            },
            "similarity": 2099.450664810796
          },
          {
            "metadata": {
              "doc_id": "362",
              "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
              "source": "sparse",
              "original_content": "The product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently."
            },
            "similarity": 2079.413951197289
          },
          {
            "metadata": {
              "doc_id": "212",
              "name": "Improper Removal of Sensitive Information Before Storage or Transfer",
              "source": "sparse",
              "original_content": "The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors."
            },
            "similarity": 2041.8293608484587
          },
          {
            "metadata": {
              "doc_id": "367",
              "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
              "source": "sparse",
              "original_content": "The product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state."
            },
            "similarity": 2033.222998083952
          },
          {
            "metadata": {
              "doc_id": "1284",
              "name": "Improper Validation of Specified Quantity in Input",
              "source": "sparse",
              "original_content": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties."
            },
            "similarity": 2031.6537780974545
          }
        ]
      },
      "product:Linux kernel": {
        "keyphrase": "Linux kernel",
        "type": "product",
        "cwes": [
          {
            "metadata": {
              "doc_id": "415",
              "name": "Double Free",
              "source": "sparse",
              "original_content": "The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations."
            },
            "similarity": 745.8326454141671
          },
          {
            "metadata": {
              "doc_id": "362",
              "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
              "source": "sparse",
              "original_content": "The product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently."
            },
            "similarity": 740.4911187238848
          },
          {
            "metadata": {
              "doc_id": "212",
              "name": "Improper Removal of Sensitive Information Before Storage or Transfer",
              "source": "sparse",
              "original_content": "The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors."
            },
            "similarity": 732.4872449155177
          },
          {
            "metadata": {
              "doc_id": "1284",
              "name": "Improper Validation of Specified Quantity in Input",
              "source": "sparse",
              "original_content": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties."
            },
            "similarity": 731.6311607063469
          },
          {
            "metadata": {
              "doc_id": "367",
              "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
              "source": "sparse",
              "original_content": "The product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state."
            },
            "similarity": 726.6086407218482
          }
        ]
      },
      "component:vhost-scsi": {
        "keyphrase": "vhost-scsi",
        "type": "component",
        "cwes": [
          {
            "metadata": {
              "doc_id": "415",
              "name": "Double Free",
              "source": "sparse",
              "original_content": "The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations."
            },
            "similarity": 733.6442470549185
          },
          {
            "metadata": {
              "doc_id": "212",
              "name": "Improper Removal of Sensitive Information Before Storage or Transfer",
              "source": "sparse",
              "original_content": "The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors."
            },
            "similarity": 727.8493096970826
          },
          {
            "metadata": {
              "doc_id": "362",
              "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
              "source": "sparse",
              "original_content": "The product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently."
            },
            "similarity": 725.5439814991443
          },
          {
            "metadata": {
              "doc_id": "1284",
              "name": "Improper Validation of Specified Quantity in Input",
              "source": "sparse",
              "original_content": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties."
            },
            "similarity": 723.0009561306911
          },
          {
            "metadata": {
              "doc_id": "61",
              "name": "UNIX Symbolic Link (Symlink) Following",
              "source": "sparse",
              "original_content": "The product, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files."
            },
            "similarity": 717.7783709359006
          }
        ]
      }
    },
    "keyphrase_mapping": {
      "212": [
        {
          "id": "rootcause:Tpg dir removal hang",
          "keyphrase": "Tpg dir removal hang",
          "type": "rootcause"
        },
        {
          "id": "rootcause:use after free",
          "keyphrase": "use after free",
          "type": "rootcause"
        },
        {
          "id": "rootcause:Use-after-free",
          "keyphrase": "Use-after-free",
          "type": "rootcause"
        },
        {
          "id": "rootcause:Tpg leak",
          "keyphrase": "Tpg leak",
          "type": "rootcause"
        },
        {
          "id": "weakness:use-after-free",
          "keyphrase": "use-after-free",
          "type": "weakness"
        },
        {
          "id": "product:Linux kernel",
          "keyphrase": "Linux kernel",
          "type": "product"
        },
        {
          "id": "component:vhost-scsi",
          "keyphrase": "vhost-scsi",
          "type": "component"
        }
      ],
      "362": [
        {
          "id": "rootcause:Tpg dir removal hang",
          "keyphrase": "Tpg dir removal hang",
          "type": "rootcause"
        },
        {
          "id": "rootcause:use after free",
          "keyphrase": "use after free",
          "type": "rootcause"
        },
        {
          "id": "rootcause:Use-after-free",
          "keyphrase": "Use-after-free",
          "type": "rootcause"
        },
        {
          "id": "rootcause:Tpg leak",
          "keyphrase": "Tpg leak",
          "type": "rootcause"
        },
        {
          "id": "weakness:use-after-free",
          "keyphrase": "use-after-free",
          "type": "weakness"
        },
        {
          "id": "product:Linux kernel",
          "keyphrase": "Linux kernel",
          "type": "product"
        },
        {
          "id": "component:vhost-scsi",
          "keyphrase": "vhost-scsi",
          "type": "component"
        }
      ],
      "415": [
        {
          "id": "rootcause:Tpg dir removal hang",
          "keyphrase": "Tpg dir removal hang",
          "type": "rootcause"
        },
        {
          "id": "rootcause:use after free",
          "keyphrase": "use after free",
          "type": "rootcause"
        },
        {
          "id": "rootcause:Use-after-free",
          "keyphrase": "Use-after-free",
          "type": "rootcause"
        },
        {
          "id": "rootcause:Tpg leak",
          "keyphrase": "Tpg leak",
          "type": "rootcause"
        },
        {
          "id": "weakness:use-after-free",
          "keyphrase": "use-after-free",
          "type": "weakness"
        },
        {
          "id": "product:Linux kernel",
          "keyphrase": "Linux kernel",
          "type": "product"
        },
        {
          "id": "component:vhost-scsi",
          "keyphrase": "vhost-scsi",
          "type": "component"
        }
      ],
      "1284": [
        {
          "id": "rootcause:Tpg dir removal hang",
          "keyphrase": "Tpg dir removal hang",
          "type": "rootcause"
        },
        {
          "id": "rootcause:use after free",
          "keyphrase": "use after free",
          "type": "rootcause"
        },
        {
          "id": "rootcause:Use-after-free",
          "keyphrase": "Use-after-free",
          "type": "rootcause"
        },
        {
          "id": "rootcause:Tpg leak",
          "keyphrase": "Tpg leak",
          "type": "rootcause"
        },
        {
          "id": "weakness:use-after-free",
          "keyphrase": "use-after-free",
          "type": "weakness"
        },
        {
          "id": "product:Linux kernel",
          "keyphrase": "Linux kernel",
          "type": "product"
        },
        {
          "id": "component:vhost-scsi",
          "keyphrase": "vhost-scsi",
          "type": "component"
        }
      ],
      "863": [
        {
          "id": "rootcause:Tpg dir removal hang",
          "keyphrase": "Tpg dir removal hang",
          "type": "rootcause"
        }
      ],
      "367": [
        {
          "id": "rootcause:use after free",
          "keyphrase": "use after free",
          "type": "rootcause"
        },
        {
          "id": "rootcause:Use-after-free",
          "keyphrase": "Use-after-free",
          "type": "rootcause"
        },
        {
          "id": "weakness:use-after-free",
          "keyphrase": "use-after-free",
          "type": "weakness"
        },
        {
          "id": "product:Linux kernel",
          "keyphrase": "Linux kernel",
          "type": "product"
        }
      ],
      "61": [
        {
          "id": "rootcause:Tpg leak",
          "keyphrase": "Tpg leak",
          "type": "rootcause"
        },
        {
          "id": "component:vhost-scsi",
          "keyphrase": "vhost-scsi",
          "type": "component"
        }
      ]
    },
    "relevant_cwes": [
      {
        "metadata": {
          "doc_id": "212",
          "name": "Improper Removal of Sensitive Information Before Storage or Transfer",
          "source": "sparse",
          "original_content": "The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.",
          "keyphrase_sources": [
            {
              "id": "rootcause:Tpg dir removal hang",
              "keyphrase": "Tpg dir removal hang",
              "type": "rootcause"
            },
            {
              "id": "rootcause:use after free",
              "keyphrase": "use after free",
              "type": "rootcause"
            },
            {
              "id": "rootcause:Use-after-free",
              "keyphrase": "Use-after-free",
              "type": "rootcause"
            },
            {
              "id": "rootcause:Tpg leak",
              "keyphrase": "Tpg leak",
              "type": "rootcause"
            },
            {
              "id": "weakness:use-after-free",
              "keyphrase": "use-after-free",
              "type": "weakness"
            },
            {
              "id": "product:Linux kernel",
              "keyphrase": "Linux kernel",
              "type": "product"
            },
            {
              "id": "component:vhost-scsi",
              "keyphrase": "vhost-scsi",
              "type": "component"
            }
          ]
        },
        "similarity": 2225.6889286931864
      },
      {
        "metadata": {
          "doc_id": "362",
          "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
          "source": "sparse",
          "original_content": "The product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.",
          "keyphrase_sources": [
            {
              "id": "rootcause:Tpg dir removal hang",
              "keyphrase": "Tpg dir removal hang",
              "type": "rootcause"
            },
            {
              "id": "rootcause:use after free",
              "keyphrase": "use after free",
              "type": "rootcause"
            },
            {
              "id": "rootcause:Use-after-free",
              "keyphrase": "Use-after-free",
              "type": "rootcause"
            },
            {
              "id": "rootcause:Tpg leak",
              "keyphrase": "Tpg leak",
              "type": "rootcause"
            },
            {
              "id": "weakness:use-after-free",
              "keyphrase": "use-after-free",
              "type": "weakness"
            },
            {
              "id": "product:Linux kernel",
              "keyphrase": "Linux kernel",
              "type": "product"
            },
            {
              "id": "component:vhost-scsi",
              "keyphrase": "vhost-scsi",
              "type": "component"
            }
          ]
        },
        "similarity": 2201.393450942219
      },
      {
        "metadata": {
          "doc_id": "415",
          "name": "Double Free",
          "source": "sparse",
          "original_content": "The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations.",
          "keyphrase_sources": [
            {
              "id": "rootcause:Tpg dir removal hang",
              "keyphrase": "Tpg dir removal hang",
              "type": "rootcause"
            },
            {
              "id": "rootcause:use after free",
              "keyphrase": "use after free",
              "type": "rootcause"
            },
            {
              "id": "rootcause:Use-after-free",
              "keyphrase": "Use-after-free",
              "type": "rootcause"
            },
            {
              "id": "rootcause:Tpg leak",
              "keyphrase": "Tpg leak",
              "type": "rootcause"
            },
            {
              "id": "weakness:use-after-free",
              "keyphrase": "use-after-free",
              "type": "weakness"
            },
            {
              "id": "product:Linux kernel",
              "keyphrase": "Linux kernel",
              "type": "product"
            },
            {
              "id": "component:vhost-scsi",
              "keyphrase": "vhost-scsi",
              "type": "component"
            }
          ]
        },
        "similarity": 2200.9327411647555
      },
      {
        "metadata": {
          "doc_id": "1284",
          "name": "Improper Validation of Specified Quantity in Input",
          "source": "sparse",
          "original_content": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.",
          "keyphrase_sources": [
            {
              "id": "rootcause:Tpg dir removal hang",
              "keyphrase": "Tpg dir removal hang",
              "type": "rootcause"
            },
            {
              "id": "rootcause:use after free",
              "keyphrase": "use after free",
              "type": "rootcause"
            },
            {
              "id": "rootcause:Use-after-free",
              "keyphrase": "Use-after-free",
              "type": "rootcause"
            },
            {
              "id": "rootcause:Tpg leak",
              "keyphrase": "Tpg leak",
              "type": "rootcause"
            },
            {
              "id": "weakness:use-after-free",
              "keyphrase": "use-after-free",
              "type": "weakness"
            },
            {
              "id": "product:Linux kernel",
              "keyphrase": "Linux kernel",
              "type": "product"
            },
            {
              "id": "component:vhost-scsi",
              "keyphrase": "vhost-scsi",
              "type": "component"
            }
          ]
        },
        "similarity": 2181.3940798653457
      },
      {
        "metadata": {
          "doc_id": "367",
          "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
          "source": "sparse",
          "original_content": "The product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.",
          "keyphrase_sources": [
            {
              "id": "rootcause:use after free",
              "keyphrase": "use after free",
              "type": "rootcause"
            },
            {
              "id": "rootcause:Use-after-free",
              "keyphrase": "Use-after-free",
              "type": "rootcause"
            },
            {
              "id": "weakness:use-after-free",
              "keyphrase": "use-after-free",
              "type": "weakness"
            },
            {
              "id": "product:Linux kernel",
              "keyphrase": "Linux kernel",
              "type": "product"
            }
          ]
        },
        "similarity": 2178.453212232806
      },
      {
        "metadata": {
          "doc_id": "863",
          "name": "Incorrect Authorization",
          "source": "sparse",
          "original_content": "The product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check.",
          "keyphrase_sources": [
            {
              "id": "rootcause:Tpg dir removal hang",
              "keyphrase": "Tpg dir removal hang",
              "type": "rootcause"
            }
          ]
        },
        "similarity": 2163.2320996048943
      },
      {
        "metadata": {
          "doc_id": "61",
          "name": "UNIX Symbolic Link (Symlink) Following",
          "source": "sparse",
          "original_content": "The product, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.",
          "keyphrase_sources": [
            {
              "id": "rootcause:Tpg leak",
              "keyphrase": "Tpg leak",
              "type": "rootcause"
            },
            {
              "id": "component:vhost-scsi",
              "keyphrase": "vhost-scsi",
              "type": "component"
            }
          ]
        },
        "similarity": 2162.1764470076932
      }
    ],
    "enhanced_query": "# Vulnerability Description\n\n    In the Linux kernel, the following vulnerability has been resolved vhost-scsi Fix handling of multiple calls to vhost_scsi_set_endpoint If vhost_scsi_set_endpoint is called multiple times without a vhost_scsi_clear_endpoint between them, we can hit multiple bugs found by Haoran Zhang 1. **Use-after-free** when no tpgs are found This fixes a **use after free** that occurs when vhost_scsi_set_endpoint is called more than once and calls after the first call do not find any tpgs to add to the vs_tpg. When vhost_scsi_set_endpoint first finds tpgs to add to the vs_tpg array match=true, so we will do vhost_vq_set_backend(vq, vs_tpg) ... kfree(vs->vs_tpg) vs->vs_tpg = vs_tpg If vhost_scsi_set_endpoint is called again and no tpgs are found match=false so we skip the vhost_vq_set_backend call leaving the pointer to the vs_tpg we then free via kfree(vs->vs_tpg) vs->vs_tpg = vs_tpg If a scsi request is then sent we do vhost_scsi_handle_vq -> vhost_scsi_get_req -> vhost_vq_get_backend which sees the vs_tpg we just did a kfree on. 2. **Tpg dir removal hang** This patch fixes an issue where we cannot remove a LIO/target layer tpg (and structs above it like the target) dir due to the refcount dropping to -1. The problem is that if vhost_scsi_set_endpoint detects a tpg is already in the vs->vs_tpg array or if the tpg has been removed so target_depend_item fails, the undepend goto handler will do target_undepend_item on all tpgs in the vs_tpg array dropping their refcount to 0. At this time vs_tpg contains both the tpgs we have added in the current vhost_scsi_set_endpoint call as well as tpgs we added in previous calls which are also in vs->vs_tpg. Later, when vhost_scsi_clear_endpoint runs it will do target_undepend_item on all the tpgs in the vs->vs_tpg which will drop their refcount to -1. Userspace will then not be able to remove the tpg and will hang when it tries to do rmdir on the tpg dir. 3. **Tpg leak** This fixes a bug where we can leak tpgs and cause them to be un-removable because the target name is overwritten when vhost_scsi_set_endpoint is called multiple times but with different target names. The bug occurs if a user has called VHOST_SCSI_SET_ENDPOINT and setup a vhost-scsi device to target/tpg mapping, then calls VHOST_SCSI_SET_ENDPOINT again with a new target name that has tpgs we havent seen before (target1 has tpg1 but target2 has tpg2). When this happens we dont teardown the old target tpg mapping and just overwrite the target name and the vs->vs_tpg array. Later when we do vhost_scsi_clear_endpoint, we are passed in either target1 or target2s name and we will only match that targets tpgs when we loop over the vs->vs_tpg. We will then return from the function without doing target_undepend_item on the tpgs. Because of all these bugs, it looks like being able to call vhost_scsi_set_endpoint multiple times was never supported. The major user, QEMU, already has checks to prevent this use case. So to fix the issues, this patch prevents vhost_scsi_set_endpoint from being called if its already successfully added tpgs. To add, remove or change the tpg config or target name, you must do a vhost_scsi_clear_endpoint first.\n\n    # Keyphrase-Specific CWE Analysis\n    This vulnerability contains multiple keyphrases that may map to different CWEs. \n    Please analyze each keyphrase separately and determine the most appropriate CWE(s) for each.\n\n    ## ROOTCAUSE: 'Tpg dir removal hang'\n\nRelevant CWEs for this ROOTCAUSE:\n\n### 1. CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer (Score: 2225.69)\n\nThe product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors....\n\n### 2. CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') (Score: 2201.39)\n\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently....\n\n### 3. CWE-415: Double Free (Score: 2200.93)\n\nThe product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations....\n\n### 4. CWE-1284: Improper Validation of Specified Quantity in Input (Score: 2181.39)\n\nThe product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties....\n\n### 5. CWE-863: Incorrect Authorization (Score: 2163.23)\n\nThe product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check....\n\n## ROOTCAUSE: 'use after free'\n\nRelevant CWEs for this ROOTCAUSE:\n\n### 1. CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer (Score: 2225.69)\n\nThe product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors....\n\n### 2. CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') (Score: 2201.39)\n\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently....\n\n### 3. CWE-415: Double Free (Score: 2200.93)\n\nThe product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations....\n\n### 4. CWE-1284: Improper Validation of Specified Quantity in Input (Score: 2181.39)\n\nThe product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties....\n\n### 5. CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition (Score: 2178.45)\n\nThe product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state....\n\n## ROOTCAUSE: 'Use-after-free'\n\nRelevant CWEs for this ROOTCAUSE:\n\n### 1. CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer (Score: 2225.69)\n\nThe product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors....\n\n### 2. CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') (Score: 2201.39)\n\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently....\n\n### 3. CWE-415: Double Free (Score: 2200.93)\n\nThe product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations....\n\n### 4. CWE-1284: Improper Validation of Specified Quantity in Input (Score: 2181.39)\n\nThe product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties....\n\n### 5. CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition (Score: 2178.45)\n\nThe product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state....\n\n## ROOTCAUSE: 'Tpg leak'\n\nRelevant CWEs for this ROOTCAUSE:\n\n### 1. CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer (Score: 2225.69)\n\nThe product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors....\n\n### 2. CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') (Score: 2201.39)\n\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently....\n\n### 3. CWE-415: Double Free (Score: 2200.93)\n\nThe product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations....\n\n### 4. CWE-1284: Improper Validation of Specified Quantity in Input (Score: 2181.39)\n\nThe product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties....\n\n### 5. CWE-61: UNIX Symbolic Link (Symlink) Following (Score: 2162.18)\n\nThe product, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files....\n\n## WEAKNESS: 'use-after-free'\n\nRelevant CWEs for this WEAKNESS:\n\n### 1. CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer (Score: 2225.69)\n\nThe product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors....\n\n### 2. CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') (Score: 2201.39)\n\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently....\n\n### 3. CWE-415: Double Free (Score: 2200.93)\n\nThe product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations....\n\n### 4. CWE-1284: Improper Validation of Specified Quantity in Input (Score: 2181.39)\n\nThe product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties....\n\n### 5. CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition (Score: 2178.45)\n\nThe product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state....\n\n## PRODUCT: 'Linux kernel'\n\nRelevant CWEs for this PRODUCT:\n\n### 1. CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer (Score: 2225.69)\n\nThe product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors....\n\n### 2. CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') (Score: 2201.39)\n\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently....\n\n### 3. CWE-415: Double Free (Score: 2200.93)\n\nThe product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations....\n\n### 4. CWE-1284: Improper Validation of Specified Quantity in Input (Score: 2181.39)\n\nThe product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties....\n\n### 5. CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition (Score: 2178.45)\n\nThe product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state....\n\n## COMPONENT: 'vhost-scsi'\n\nRelevant CWEs for this COMPONENT:\n\n### 1. CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer (Score: 2225.69)\n\nThe product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors....\n\n### 2. CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') (Score: 2201.39)\n\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently....\n\n### 3. CWE-415: Double Free (Score: 2200.93)\n\nThe product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations....\n\n### 4. CWE-1284: Improper Validation of Specified Quantity in Input (Score: 2181.39)\n\nThe product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties....\n\n### 5. CWE-61: UNIX Symbolic Link (Symlink) Following (Score: 2162.18)\n\nThe product, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files....\n\n\n    # Analysis Instructions\n    1. For each keyphrase, identify the most appropriate CWE(s) that represent the weakness.\n    2. Consider how the different keyphrases might relate to each other in the vulnerability chain.\n    3. Provide a final determination of primary CWE(s) and any secondary CWEs.\n    4. Format your response using the standard analysis template.\n\n    Please analyze how these different weaknesses interact and provide a comprehensive CWE classification.\n    "
  },
  "retrieval_time": 3.066228151321411
}