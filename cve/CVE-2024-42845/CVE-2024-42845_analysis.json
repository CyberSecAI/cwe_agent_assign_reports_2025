{
  "cve_id": "CVE-2024-42845",
  "description": "An **eval Injection** vulnerability in the component invesalius/reader/dicom.py of InVesalius 3.1.99991 through 3.1.99998 allows attackers to execute arbitrary code via loading a crafted DICOM file.",
  "key_phrases": {
    "rootcause": "eval Injection",
    "weakness": "",
    "impact": "execute arbitrary code",
    "vector": "",
    "attacker": "attackers",
    "product": "InVesalius",
    "version": "3.1.99991 through 3.1.99998",
    "component": "invesalius/reader/dicom.py"
  },
  "reference_content": "Based on the provided content, here's an analysis of the vulnerability described:\n\n**Root cause of vulnerability:**\n- The vulnerability stems from the use of the `eval()` function on user-controlled data within the `GetImagePosition` function in the `invesalius/reader/dicom.py` file. This function processes data extracted from the DICOM file's tag at position `(0x020, 0x032)`.\n\n**Weaknesses/vulnerabilities present:**\n- **Unsafe use of `eval()`:** The core issue is the direct use of `eval()` on data extracted from a DICOM file. This allows an attacker to inject arbitrary Python code by crafting malicious data into the DICOM file's tag.\n- **Lack of input sanitization:** The code attempts to replace commas with periods, but it does not sanitize other malicious inputs that could be used in the payload.\n\n**Impact of exploitation:**\n- **Remote Code Execution (RCE):** An attacker can achieve arbitrary code execution on the victim's machine by importing a crafted DICOM file containing a malicious Python payload. The payload will be executed with the same privileges as the Invesalius application.\n\n**Attack vectors:**\n- **Crafted DICOM file:** The attacker needs to create a malicious DICOM file with a specific tag (0x0020, 0x0032) containing the malicious Python payload.\n\n**Required attacker capabilities/position:**\n- The attacker needs the ability to create or modify DICOM files.\n- The attacker needs to lure a victim into importing the crafted DICOM file into their Invesalius application.\n\n**Technical Details:**\n- The vulnerable code is located within the `GetImagePosition` function in the `invesalius/reader/dicom.py` script file.\n- The vulnerable code block is as follows:\n```python\ndef GetImagePosition(self):\n    try:\n        data = self.data_image[str(0x020)][str(0x032)].replace(\",\", \".\")\n    except KeyError:\n        return \"\"\n    if data:\n        return [eval(value) for value in data.split(\"\\\\\")]\n        return \"\"\n```\n- The image position is calculated using coordinates separated by `\\` characters. For instance, coordinates might appear as `5.1\\4.3\\3.2`.\n- An attacker can append a malicious Python payload after the last coordinate, also delimited by a backslash. This payload will be executed using the `eval()` function.\n- The vulnerability affects Invesalius3 versions from 3.1.99991 to 3.1.99998.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-95 | Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') | 1.0 | Variant | Allowed | Primary CWE. The vulnerability stems from the use of the `eval()` function on user-controlled data. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary identified CWE is CWE-95, which is a Variant level weakness. This is a good level of specificity. CWE-95 is a child of CWE-94 (Improper Control of Generation of Code) which is a more general case of code injection. There are no other relationships to consider in this case.\n\n```mermaid\ngraph TD\n    cwe95[\"CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\"]\n    cwe94[\"CWE-94: Improper Control of Generation of Code ('Code Injection')\"]\n    \n    cwe95 -->|CHILDOF| cwe94\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe95 primary\n    class cwe94 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **improper use of the `eval()` function (CWE-95)** on user-controlled data, leading to arbitrary code execution.\n\n## Summary of Analysis\nThe initial analysis correctly identifies **eval Injection** as the root cause, which leads to arbitrary code execution. This is supported by the provided evidence, particularly the \"CVE Reference Links Content Summary\" section, which states: \"The vulnerability stems from the use of the `eval()` function on user-controlled data\" and \"allows an attacker to inject arbitrary Python code.\" The technical details section provides the code snippet where `eval()` is used.\n\nThe selection of CWE-95 is optimal as it is a Variant-level CWE, providing a specific classification for the vulnerability. The retriever results also list CWE-95 as the top candidate. Other CWEs such as CWE-94, CWE-78, and CWE-89 were considered, but they are not as specific to the **eval injection** vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\n**Abstraction Level**: Variant\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. \"eval\").\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-95 | Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') | 1.0 | Variant | Allowed | Primary CWE. The vulnerability stems from the use of the `eval()` function on user-controlled data. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary identified CWE is CWE-95, which is a Variant level weakness. This is a good level of specificity. CWE-95 is a child of CWE-94 (Improper Control of Generation of Code) which is a more general case of code injection. There are no other relationships to consider in this case.\n\n```mermaid\ngraph TD\n    cwe95[\"CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\"]\n    cwe94[\"CWE-94: Improper Control of Generation of Code ('Code Injection')\"]\n    \n    cwe95 -->|CHILDOF| cwe94\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe95 primary\n    class cwe94 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **improper use of the `eval()` function (CWE-95)** on user-controlled data, leading to arbitrary code execution.\n\n## Summary of Analysis\nThe initial analysis correctly identifies **eval Injection** as the root cause, which leads to arbitrary code execution. This is supported by the provided evidence, particularly the \"CVE Reference Links Content Summary\" section, which states: \"The vulnerability stems from the use of the `eval()` function on user-controlled data\" and \"allows an attacker to inject arbitrary Python code.\" The technical details section provides the code snippet where `eval()` is used.\n\nThe selection of CWE-95 is optimal as it is a Variant-level CWE, providing a specific classification for the vulnerability. The retriever results also list CWE-95 as the top candidate. Other CWEs such as CWE-94, CWE-78, and CWE-89 were considered, but they are not as specific to the **eval injection** vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\n**Abstraction Level**: Variant\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. \"eval\").\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-89:**\n- 89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')) - ROOT\n\n\n**Chain starting from CWE-94:**\n- 94 (Improper Control of Generation of Code ('Code Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "95",
        "name": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
        "source": "sparse"
      },
      "similarity": 202.32521236725398
    },
    {
      "metadata": {
        "doc_id": "94",
        "name": "Improper Control of Generation of Code ('Code Injection')",
        "source": "sparse"
      },
      "similarity": 192.33989138875583
    },
    {
      "metadata": {
        "doc_id": "78",
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "source": "sparse"
      },
      "similarity": 148.92531700921788
    },
    {
      "metadata": {
        "doc_id": "625",
        "name": "Permissive Regular Expression",
        "source": "sparse"
      },
      "similarity": 148.55981979069838
    },
    {
      "metadata": {
        "doc_id": "835",
        "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
        "source": "sparse"
      },
      "similarity": 147.85580904568928
    },
    {
      "metadata": {
        "doc_id": "790",
        "name": "Improper Filtering of Special Elements",
        "source": "sparse"
      },
      "similarity": 146.15721276165743
    },
    {
      "metadata": {
        "doc_id": "1336",
        "name": "Improper Neutralization of Special Elements Used in a Template Engine",
        "source": "sparse"
      },
      "similarity": 145.05566927484006
    },
    {
      "metadata": {
        "doc_id": "502",
        "name": "Deserialization of Untrusted Data",
        "source": "sparse"
      },
      "similarity": 144.51635444620052
    },
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "type": "Base",
        "original_content": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
        "keyphrase_source": "rootcause:eval Injection",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5174580055246137,
            "graph": 1.8897108745694857
          }
        }
      },
      "similarity": 0.5174580055246137
    },
    {
      "doc_id": "184",
      "text": "CWE-184: Incomplete List of Disallowed Inputs",
      "score": 2.9120000000000004,
      "metadata": {
        "doc_id": "184",
        "name": "Incomplete List of Disallowed Inputs",
        "type": "base",
        "original_content": "CWE-184: Incomplete List of Disallowed Inputs",
        "relationships": [
          {
            "source_id": "184",
            "target_id": "692",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "434",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "78",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "79",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "1023",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "693",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "86",
            "target_id": "184",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "78",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "693",
            "target_id": "184",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "692",
            "target_id": "184",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "692",
            "target_id": "184",
            "label": "STARTSWITH",
            "properties": {
              "view_id": "709"
            }
          },
          {
            "source_id": "625",
            "target_id": "184",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "186",
            "target_id": "184",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1023",
            "target_id": "184",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "79",
                  "184",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "79"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "78",
                  "184",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "78"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "184",
                  "78",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "78"
            },
            "peer_relationship": {
              "path": [
                [
                  "625",
                  "184",
                  "PEEROF"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "625"
            }
          }
        },
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.9120000000000004
          }
        }
      },
      "similarity": 2.9120000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-89",
      "CWE-94",
      "CWE-78",
      "CWE-95"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}