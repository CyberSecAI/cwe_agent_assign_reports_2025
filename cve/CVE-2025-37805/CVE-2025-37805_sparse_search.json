{
  "retriever": "sparse",
  "query": "In the Linux kernel, the following vulnerability has been resolved sound/virtio Fix cancel_sync warnings on uninitialized work_structs Betty reported hitting the following warning [ 8.709131][ T221] WARNING CPU 2 PID 221 at kernel/workqueue.c4182 ... [ 8.713282][ T221] Call trace [ 8.713365][ T221] __flush_work+0x8d0/0x914 [ 8.713468][ T221] __cancel_work_sync+0xac/0xfc [ 8.713570][ T221] cancel_work_sync+0x24/0x34 [ 8.713667][ T221] virtsnd_remove+0xa8/0xf8 [virtio_snd ab15f34d0dd772f6d11327e08a81d46dc9c36276] [ 8.713868][ T221] virtsnd_probe+0x48c/0x664 [virtio_snd ab15f34d0dd772f6d11327e08a81d46dc9c36276] [ 8.714035][ T221] virtio_dev_probe+0x28c/0x390 [ 8.714139][ T221] really_probe+0x1bc/0x4c8 ... It seems were hitting the error path in virtsnd_probe(), which triggers a virtsnd_remove() which iterates over the substreams calling cancel_work_sync() on the elapsed_period work_struct. Looking at the code, from earlier in virtsnd_probe()->virtsnd_build_devs()->virtsnd_pcm_parse_cfg() We set snd->nsubstreams, allocate the snd->substreams, and if we then hit an error on the info allocation or something in virtsnd_ctl_query_info() fails, we will exit without having initialized the elapsed_period work_struct. When that error path unwinds we then call virtsnd_remove() which as long as the substreams array is allocated, will iterate through calling cancel_work_sync() on the uninitialized work struct hitting this warning. Takashi Iwai suggested this fix, which initializes the substreams structure right after allocation, so that if we hit the error paths we avoid trying to cleanup uninitialized data. Note I have not yet managed to reproduce the issue myself, so this patch has had limited testing. Feedback or thoughts would be appreciated!",
  "keyphrases": {
    "rootcause": [
      "uninitialized data"
    ],
    "weakness": [
      "uninitialized work_struct"
    ]
  },
  "timestamp": "2025-07-14 21:27:33",
  "cve_id": "CVE-2025-37805",
  "result_count": 11,
  "results": [
    {
      "cwe_id": "909",
      "name": "Missing Initialization of Resource",
      "score": 809.2532434766595,
      "search_source": "rootcause:uninitialized data"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 793.9073693501041,
      "search_source": "rootcause:uninitialized data"
    },
    {
      "cwe_id": "824",
      "name": "Access of Uninitialized Pointer",
      "score": 767.9888224076545,
      "search_source": "rootcause:uninitialized data"
    },
    {
      "cwe_id": "95",
      "name": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
      "score": 752.0557360023696,
      "search_source": "rootcause:uninitialized data"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 750.3226766683547,
      "search_source": "rootcause:uninitialized data"
    },
    {
      "cwe_id": "617",
      "name": "Reachable Assertion",
      "score": 741.0874305329147,
      "search_source": "rootcause:uninitialized data"
    },
    {
      "cwe_id": "125",
      "name": "Out-of-bounds Read",
      "score": 736.9530145384388,
      "search_source": "rootcause:uninitialized data"
    },
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "score": 733.8723746552496,
      "search_source": "rootcause:uninitialized data"
    },
    {
      "cwe_id": "61",
      "name": "UNIX Symbolic Link (Symlink) Following",
      "score": 725.1903840294246,
      "search_source": "rootcause:uninitialized data"
    },
    {
      "cwe_id": "863",
      "name": "Incorrect Authorization",
      "score": 724.0894840416346,
      "search_source": "rootcause:uninitialized data"
    },
    {
      "cwe_id": "212",
      "name": "Improper Removal of Sensitive Information Before Storage or Transfer",
      "score": 240.70034202564426,
      "search_source": "base_query"
    }
  ]
}