{
  "cve_id": "CVE-2024-8392",
  "description": "The WordPress Post Grid Layouts with Pagination - Sogrid plugin for WordPress is vulnerable to Local File Inclusion in all versions up to, and including, 1.5.2 via the tab parameter. This makes it possible for authenticated attackers, with Administrator-level access and above, to include and execute arbitrary files on the server, allowing the execution of any PHP code in those files. This can be used to bypass access controls, obtain sensitive data, or achieve code execution in cases where images and other safe file types can be uploaded and included. This can also be exploited via CSRF techniques.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "local file inclusion",
    "impact": [
      "bypass access controls",
      "obtain sensitive data",
      "code execution"
    ],
    "vector": "tab parameter",
    "attacker": "authenticated attackers",
    "product": "WordPress Post Grid Layouts with Pagination - Sogrid plugin",
    "version": "all versions up to and including 1.5.2",
    "component": ""
  },
  "reference_content": "Based on the provided information, here's an analysis of CVE-2024-8392:\n\n**Root Cause of Vulnerability:**\nThe vulnerability stems from an improper control of the filename used in an include/require statement within the `panel.php` file of the Sogrid WordPress plugin. Specifically, the plugin uses the `$_GET['tab']` parameter to determine which file to include, without sufficient sanitization.\n\n**Weaknesses/Vulnerabilities Present:**\n- **Local File Inclusion (LFI):** The plugin uses user-controlled input (`$_GET['tab']`) to construct the path to a file to include. Even though the `sanitize_file_name` function is used, it is not enough to prevent a directory traversal attack, because the function does not remove `..` sequences.\n- **Lack of proper input validation/sanitization:** The `sanitize_file_name` function is insufficient to prevent attackers from including arbitrary local files.\n\n**Impact of Exploitation:**\n- **Arbitrary code execution:** Attackers can include and execute arbitrary PHP files on the server. This could lead to complete server compromise.\n- **Bypass access controls:** Attackers can execute code outside the intended plugin functionality.\n- **Data breach:** Attackers can obtain sensitive data from the server.\n\n**Attack Vectors:**\n- **HTTP GET parameter:** The `tab` parameter in the URL is used to specify the file to include. For example: `wp-admin/admin.php?page=sogrid&tab=../../../../wp-config.php` (this is just an example and may require more traversal depending on the location of the plugin)\n- **Cross-Site Request Forgery (CSRF):** According to the information, this can be exploited through CSRF, meaning an attacker could craft a malicious link or page and trick an administrator into triggering the vulnerability.\n\n**Required Attacker Capabilities/Position:**\n- **Authenticated Administrator-level access or higher:**  The attacker must be logged in as a WordPress administrator or a user with higher privileges to access the vulnerable page.\n- **Knowledge of the plugin's structure:** The attacker needs to know the location of the vulnerable `panel.php` file.\n- **Knowledge of server file paths:**  The attacker needs to know or guess the paths of local files on the server.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-98 | Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion') | 1.0 | Variant | Primary | Allowed |\n| CWE-352 | Cross-Site Request Forgery (CSRF) | 0.7 | Compound | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.85\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE, CWE-98, is a variant of CWE-73 (External Control of File Name or Path). The vulnerability involves an improper control of the filename used in an include/require statement, which directly aligns with CWE-98. CWE-352 (CSRF) is listed as a potential attack vector, which means it can facilitate the exploitation of the primary weakness. CWE-425 Direct Request ('Forced Browsing') is also related as it can CANPRECEDE CWE-98. The abstraction levels were considered, and CWE-98 at the Variant level provides the most specific description of the vulnerability.\n\n```mermaid\ngraph TD\n    cwe98[\"CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')\"]\n    cwe73[\"CWE-73: External Control of File Name or Path\"]\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n    cwe425[\"CWE-425: Direct Request ('Forced Browsing')\"]\n\n    cwe98 -->|CHILDOF| cwe73\n    cwe425 -->|CANPRECEDE| cwe98\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe98 primary\n    class cwe352,cwe73,cwe425 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **improper control of the filename** (CWE-98), leading to potential **Local File Inclusion**. This then allows attackers to **bypass access controls**, **obtain sensitive data**, and achieve **code execution**. The CSRF (CWE-352) can be an attack vector to exploit the LFI.\n\n## Summary of Analysis\nThe primary assessment is based on the evidence provided in the \"CVE Reference Links Content Summary,\" which explicitly states that the vulnerability stems from **improper control of the filename** used in an include/require statement. The plugin uses the `$_GET['tab']` parameter without sufficient sanitization, leading to Local File Inclusion. This aligns perfectly with CWE-98.\n\n> Root Cause of Vulnerability:\n> The vulnerability stems from an **improper control of the filename** used in an include/require statement within the `panel.php` file of the Sogrid WordPress plugin. Specifically, the plugin uses the `$_GET['tab']` parameter to determine which file to include, without sufficient sanitization.\n\nThe retriever results also show that CWE-98 is the top candidate with a score of 1.0. While other CWEs like CWE-22 (Path Traversal) and CWE-434 (Unrestricted File Upload) were considered, they do not accurately represent the root cause. CWE-22 could be a means of exploiting CWE-98, but is not the root cause. CWE-434 is not relevant as there is no file upload involved. CWE-352 is a secondary weakness as it can be an attack vector.\n\nCWE-98 is at the Variant level, which is the most specific and appropriate level of abstraction for this vulnerability.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-98 | Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion') | 1.0 | Variant | Primary | Allowed |\n| CWE-352 | Cross-Site Request Forgery (CSRF) | 0.7 | Compound | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.85\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE, CWE-98, is a variant of CWE-73 (External Control of File Name or Path). The vulnerability involves an improper control of the filename used in an include/require statement, which directly aligns with CWE-98. CWE-352 (CSRF) is listed as a potential attack vector, which means it can facilitate the exploitation of the primary weakness. CWE-425 Direct Request ('Forced Browsing') is also related as it can CANPRECEDE CWE-98. The abstraction levels were considered, and CWE-98 at the Variant level provides the most specific description of the vulnerability.\n\n```mermaid\ngraph TD\n    cwe98[\"CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')\"]\n    cwe73[\"CWE-73: External Control of File Name or Path\"]\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n    cwe425[\"CWE-425: Direct Request ('Forced Browsing')\"]\n\n    cwe98 -->|CHILDOF| cwe73\n    cwe425 -->|CANPRECEDE| cwe98\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe98 primary\n    class cwe352,cwe73,cwe425 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **improper control of the filename** (CWE-98), leading to potential **Local File Inclusion**. This then allows attackers to **bypass access controls**, **obtain sensitive data**, and achieve **code execution**. The CSRF (CWE-352) can be an attack vector to exploit the LFI.\n\n## Summary of Analysis\nThe primary assessment is based on the evidence provided in the \"CVE Reference Links Content Summary,\" which explicitly states that the vulnerability stems from **improper control of the filename** used in an include/require statement. The plugin uses the `$_GET['tab']` parameter without sufficient sanitization, leading to Local File Inclusion. This aligns perfectly with CWE-98.\n\n> Root Cause of Vulnerability:\n> The vulnerability stems from an **improper control of the filename** used in an include/require statement within the `panel.php` file of the Sogrid WordPress plugin. Specifically, the plugin uses the `$_GET['tab']` parameter to determine which file to include, without sufficient sanitization.\n\nThe retriever results also show that CWE-98 is the top candidate with a score of 1.0. While other CWEs like CWE-22 (Path Traversal) and CWE-434 (Unrestricted File Upload) were considered, they do not accurately represent the root cause. CWE-22 could be a means of exploiting CWE-98, but is not the root cause. CWE-434 is not relevant as there is no file upload involved. CWE-352 is a secondary weakness as it can be an attack vector.\n\nCWE-98 is at the Variant level, which is the most specific and appropriate level of abstraction for this vulnerability.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-22:**\n- 22 (Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')) - ROOT\n\n\n**Chain starting from CWE-73:**\n- 73 (External Control of File Name or Path) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "98",
        "name": "Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Local file inclusion",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "source": "sparse"
      },
      "similarity": 568.8244992010378
    },
    {
      "metadata": {
        "doc_id": "22",
        "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
        "source": "sparse"
      },
      "similarity": 546.9897788396264
    },
    {
      "metadata": {
        "doc_id": "306",
        "name": "Missing Authentication for Critical Function",
        "source": "sparse"
      },
      "similarity": 545.0667718343087
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 543.2878061080021
    },
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse"
      },
      "similarity": 541.0584058435188
    },
    {
      "metadata": {
        "doc_id": "862",
        "name": "Missing Authorization",
        "source": "sparse"
      },
      "similarity": 537.9771546879812
    },
    {
      "metadata": {
        "doc_id": "23",
        "name": "Relative Path Traversal",
        "source": "sparse"
      },
      "similarity": 535.9461170431662
    },
    {
      "metadata": {
        "doc_id": "96",
        "name": "Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')",
        "type": "Base",
        "original_content": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.",
        "keyphrase_source": "weakness:local file inclusion",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.49464121915585324
          }
        }
      },
      "similarity": 0.49464121915585324
    },
    {
      "doc_id": "79",
      "text": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
      "score": 0.5028867821920293,
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "type": "Base",
        "extended_description": "\n\nCross-site scripting (XSS) vulnerabilities occur when:\n\n\n  1. Untrusted data enters a web application, typically from a web request.\n\n  1. The web application dynamically generates a web page that contains this untrusted data.\n\n  1. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc.\n\n  1. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data.\n\n  1. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain.\n\n  1. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain.\n\nThere are three main kinds of XSS:\n\n  -  **Type 1: Reflected XSS (or Non-Persistent)**  - The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.\n\n  -  **Type 2: Stored XSS (or Persistent)**  - The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs. \n\n  -  **Type 0: DOM-Based XSS**  - In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible. \n\nOnce the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as \"drive-by hacking.\"\n\nIn many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.\n",
        "alternate_terms": [
          "XSS",
          "HTML Injection",
          "CSS"
        ],
        "original_content": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
        "relationships": [
          {
            "source_id": "79",
            "target_id": "87",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "86",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "85",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "84",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "83",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "81",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "80",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "113",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "352",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "494",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "74",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "79",
            "target_id": "74",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "87",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "86",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "85",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "84",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "83",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "81",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "80",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "74",
            "target_id": "79",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "494",
            "target_id": "79",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "79",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "113",
            "target_id": "79",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "source": "graph",
        "sources": [
          "vector",
          "graph"
        ],
        "vector_score": 0.5028867821920293,
        "graph_score": 4.472,
        "score_components": {
          "relationship_chain": 0.7,
          "explicit_mention": 1.0,
          "abstraction_path": 0.9,
          "sequence_path": 0.8,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "79",
                  "352",
                  "PEEROF"
                ]
              ],
              "score": 0.7,
              "type": "relationship_chain",
              "source": "352"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "434",
                  "184",
                  "CANFOLLOW"
                ],
                [
                  "184",
                  "79",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "vulnerability_sequence_forward",
              "source": "434"
            },
            "peer_relationship": {
              "path": [
                [
                  "79",
                  "352",
                  "PEEROF"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "352"
            }
          }
        },
        "is_explicit": true,
        "abstraction_level": "base",
        "position": "after",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.4661158337080217,
            "graph": 2.884354712876812
          }
        }
      },
      "similarity": 2.884354712876812
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-22",
      "CWE-73",
      "CWE-98",
      "CWE-352",
      "CWE-425",
      "CWE-434"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}