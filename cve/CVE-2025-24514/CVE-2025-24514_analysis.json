{
  "cve_id": "CVE-2025-24514",
  "description": "A security issue was discovered in ingress-nginx https//github.com/kubernetes/ingress-nginx where the `auth-url` Ingress annotation can be used to inject configuration into nginx. This can lead to arbitrary code execution in the context of the ingress-nginx controller, and disclosure of Secrets accessible to the controller. (Note that in the default installation, the controller can access all Secrets cluster-wide.)",
  "key_phrases": {
    "component": "",
    "rootcause": "",
    "vector": "ingress-nginx auth-url Ingress annotation",
    "weakness": "",
    "product": "ingress-nginx",
    "impact": "['arbitrary code execution', 'disclosure of Secrets']",
    "attacker": "",
    "version": ""
  },
  "reference_content": "## Analysis of CVE-2025-24514 Content\n\nThis content **IS RELATED** to CVE-2025-24514. It provides detailed information about the vulnerability.\n\n**Root cause of vulnerability:**\n\nThe `auth-url` Ingress annotation in ingress-nginx can be used to inject configuration into nginx.\n\n**Weaknesses/vulnerabilities present:**\n\n*   Configuration injection\n*   Arbitrary code execution in the context of the ingress-nginx controller.\n*   Disclosure of Secrets accessible to the controller (potentially all cluster-wide Secrets in default installations).\n\n**Impact of exploitation:**\n\n*   Arbitrary code execution\n*   Secret disclosure\n\n**Attack vectors:**\n\n*   Exploitation through a crafted `auth-url` annotation within an Ingress resource.\n\n**Required attacker capabilities/position:**\n\n*   Low privilege access to modify Ingress resources.\n\n**Mitigation or fix:**\n\n*   **Upgrade:** Upgrade ingress-nginx to v1.11.5, v1.12.1, or any later version.\n*   **CLI Argument:** Enable the `enable-annotation-validation` CLI argument set to \u201ctrue\u201d prior to upgrading.\n*   **Detection:** Monitor for suspicious data within the `auth-url` annotation of Ingress resources.\n\n**Additional Details (more than official CVE description):**\n\n*   **CVSS Score:** 8.8 (High) - CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H\n*   **Affected Versions:** < v1.11.0, v1.11.0 - 1.11.4, v1.12.0\n*   **Fixed Version:** ingress-nginx [main@ab470eb](https://github.com/kubernetes/ingress-nginx/pull/13068/commits/ab470eb920924d62a197ebddd8a4cc3031a77ddf)\n*   **Acknowledgements:**  The vulnerability was reported by Nir Ohfeld, Ronen Shustin and Sagi Tzadik from Wiz and fixed/coordinated by Marco Ebert, James Strong, Tabitha Sable, and the Kubernetes Security Response Committee.\n*   **Detection:** Suspicious data within the `auth-url` annotation of an Ingress resource.\n*   **Contact:** security@kubernetes.io if exploitation is suspected.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-94 | Improper Control of Generation of Code ('Code Injection') | 0.9 | Base | Allowed-with-Review | Primary CWE |\n| CWE-20 | Improper Input Validation | 0.7 | Base | Allowed | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-94, which is a base-level CWE. It has hierarchical relationships as a child of CWE-913 (execution within a control sphere) and parent to CWE-96, CWE-95, and CWE-1336, showing different types of code injection. CWE-20 relates as a potential cause, and can precede CWE-94. The abstraction levels influenced the selection, preferring the Base level for the root cause.\n\n```mermaid\ngraph TD\n    cwe94[\"CWE-94: Improper Control of Generation of Code ('Code Injection')\"]\n    cwe20[\"CWE-20: Improper Input Validation\"]\n    cwe913[\"CWE-913: Improper Control of Dynamically-Managed Code Resources\"]\n    cwe96[\"CWE-96: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\"]\n    cwe95[\"CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\"]\n    cwe1336[\"CWE-1336: Improper Neutralization of Code Syntax\"]\n\n    cwe94 -->|CHILDOF| cwe913\n    cwe94 -->|PARENTOF| cwe96\n    cwe94 -->|PARENTOF| cwe95\n    cwe94 -->|PARENTOF| cwe1336\n    cwe20 -->|CANPRECEDE| cwe94\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe94 primary\n    class cwe20 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with **improper input validation** (potentially CWE-20), which leads to **improper control of code generation** (CWE-94), resulting in **arbitrary code execution** and **disclosure of secrets**.\n\n## Summary of Analysis\nThe analysis indicates that the primary weakness is CWE-94, **Improper Control of Generation of Code ('Code Injection')**, due to the `auth-url` Ingress annotation allowing configuration injection into nginx, leading to arbitrary code execution. The vulnerability description clearly states that the `auth-url` Ingress annotation can be used to inject configuration into nginx, leading to arbitrary code execution. This aligns directly with the description of CWE-94. CWE-20, **Improper Input Validation**, is a secondary candidate as it can often precede CWE-94.\n\nThe evidence provided in the \"CVE Reference Links Content Summary\" section supports this classification. Specifically, it states that the root cause of the vulnerability is that the `auth-url` Ingress annotation in ingress-nginx can be used to inject configuration into nginx. This directly implies that the product **does not properly control the generation of code**, which is the core characteristic of CWE-94.\n\nThe selection of CWE-94 is at the optimal level of specificity because it directly addresses the root cause, which is the **improper control of code generation** due to the injectable `auth-url` annotation. While other CWEs like CWE-74 (**Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')**) and CWE-20 (**Improper Input Validation**) were considered, CWE-94 is more specific to the code injection aspect of the vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n## CWE-20: Improper Input Validation\n**Abstraction Level**: Base\n**Similarity Score**: 3.65\n**Source**: graph\n\n**Description**:\nThe product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-94: Improper Control of Generation of Code ('Code Injection')\n**Abstraction Level**: base\n**Similarity Score**: 2.02\n**Source**: graph\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This entry is frequently misused for vulnerabilities with a technical impact of \"code execution,\" which does not by itself indicate a root cause weakness, since dozens of weaknesses can enable code execution.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-94 | Improper Control of Generation of Code ('Code Injection') | 0.9 | Base | Allowed-with-Review | Primary CWE |\n| CWE-20 | Improper Input Validation | 0.7 | Base | Allowed | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-94, which is a base-level CWE. It has hierarchical relationships as a child of CWE-913 (execution within a control sphere) and parent to CWE-96, CWE-95, and CWE-1336, showing different types of code injection. CWE-20 relates as a potential cause, and can precede CWE-94. The abstraction levels influenced the selection, preferring the Base level for the root cause.\n\n```mermaid\ngraph TD\n    cwe94[\"CWE-94: Improper Control of Generation of Code ('Code Injection')\"]\n    cwe20[\"CWE-20: Improper Input Validation\"]\n    cwe913[\"CWE-913: Improper Control of Dynamically-Managed Code Resources\"]\n    cwe96[\"CWE-96: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\"]\n    cwe95[\"CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\"]\n    cwe1336[\"CWE-1336: Improper Neutralization of Code Syntax\"]\n\n    cwe94 -->|CHILDOF| cwe913\n    cwe94 -->|PARENTOF| cwe96\n    cwe94 -->|PARENTOF| cwe95\n    cwe94 -->|PARENTOF| cwe1336\n    cwe20 -->|CANPRECEDE| cwe94\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe94 primary\n    class cwe20 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with **improper input validation** (potentially CWE-20), which leads to **improper control of code generation** (CWE-94), resulting in **arbitrary code execution** and **disclosure of secrets**.\n\n## Summary of Analysis\nThe analysis indicates that the primary weakness is CWE-94, **Improper Control of Generation of Code ('Code Injection')**, due to the `auth-url` Ingress annotation allowing configuration injection into nginx, leading to arbitrary code execution. The vulnerability description clearly states that the `auth-url` Ingress annotation can be used to inject configuration into nginx, leading to arbitrary code execution. This aligns directly with the description of CWE-94. CWE-20, **Improper Input Validation**, is a secondary candidate as it can often precede CWE-94.\n\nThe evidence provided in the \"CVE Reference Links Content Summary\" section supports this classification. Specifically, it states that the root cause of the vulnerability is that the `auth-url` Ingress annotation in ingress-nginx can be used to inject configuration into nginx. This directly implies that the product **does not properly control the generation of code**, which is the core characteristic of CWE-94.\n\nThe selection of CWE-94 is at the optimal level of specificity because it directly addresses the root cause, which is the **improper control of code generation** due to the injectable `auth-url` annotation. While other CWEs like CWE-74 (**Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')**) and CWE-20 (**Improper Input Validation**) were considered, CWE-94 is more specific to the code injection aspect of the vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n## CWE-20: Improper Input Validation\n**Abstraction Level**: Base\n**Similarity Score**: 3.65\n**Source**: graph\n\n**Description**:\nThe product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-94: Improper Control of Generation of Code ('Code Injection')\n**Abstraction Level**: base\n**Similarity Score**: 2.02\n**Source**: graph\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This entry is frequently misused for vulnerabilities with a technical impact of \"code execution,\" which does not by itself indicate a root cause weakness, since dozens of weaknesses can enable code execution.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-94:**\n- 94 (Improper Control of Generation of Code ('Code Injection')) - ROOT\n\n\n**Chain starting from CWE-1336:**\n- 1336 (Improper Neutralization of Special Elements Used in a Template Engine) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "1007",
        "name": "Insufficient Visual Distinction of Homoglyphs Presented to User",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Homograph Attack",
        "match_reason": "phrase_in_term_compound_part_1"
      },
      "similarity": 700.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "1021",
        "name": "Improper Restriction of Rendered UI Layers or Frames",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Clickjacking",
        "match_reason": "phrase_in_term_compound_part_1"
      },
      "similarity": 700.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "1022",
        "name": "Use of Web Link to Untrusted Target with window.opener Access",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: tabnabbing",
        "match_reason": "phrase_in_term_compound_part_1"
      },
      "similarity": 700.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "732",
        "name": "Incorrect Permission Assignment for Critical Resource",
        "source": "sparse"
      },
      "similarity": 127.64363211197534
    },
    {
      "metadata": {
        "doc_id": "256",
        "name": "Plaintext Storage of a Password",
        "source": "sparse"
      },
      "similarity": 126.56523013480093
    },
    {
      "metadata": {
        "doc_id": "522",
        "name": "Insufficiently Protected Credentials",
        "source": "sparse"
      },
      "similarity": 126.07003248426159
    },
    {
      "metadata": {
        "doc_id": "668",
        "name": "Exposure of Resource to Wrong Sphere",
        "source": "sparse"
      },
      "similarity": 124.10678042637402
    },
    {
      "metadata": {
        "doc_id": "287",
        "name": "Improper Authentication",
        "source": "sparse"
      },
      "similarity": 122.53139353867059
    },
    {
      "metadata": {
        "doc_id": "306",
        "name": "Missing Authentication for Critical Function",
        "type": "Base",
        "original_content": "The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse",
            "graph"
          ],
          "retriever_count": 3,
          "normalized_scores": {
            "dense": 0.5209764174688134,
            "sparse": 119.81962464865421,
            "graph": 1.7083570630799234
          }
        }
      },
      "similarity": 0.5209764174688134
    },
    {
      "doc_id": "942",
      "text": "CWE-942: Permissive Cross-domain Policy with Untrusted Domains",
      "score": 2.6784000000000003,
      "metadata": {
        "doc_id": "942",
        "name": "Permissive Cross-domain Policy with Untrusted Domains",
        "type": "variant",
        "original_content": "CWE-942: Permissive Cross-domain Policy with Untrusted Domains",
        "relationships": [
          {
            "source_id": "942",
            "target_id": "668",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "942",
            "target_id": "183",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "942",
            "target_id": "923",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "942",
            "target_id": "863",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "923",
            "target_id": "942",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "863",
            "target_id": "942",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "668",
            "target_id": "942",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "183",
            "target_id": "942",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "abstraction_path": 0.76,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.2,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "668",
                  "942",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "668"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "863",
                  "942",
                  "PARENTOF"
                ]
              ],
              "score": 0.76,
              "type": "abstraction_path_down",
              "source": "863"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "668",
                  "942",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "668"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "942",
                  "668",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "668"
            }
          }
        },
        "abstraction_level": "variant",
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.6784000000000003
          }
        }
      },
      "similarity": 2.6784000000000003
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-94",
      "CWE-1336",
      "CWE-95",
      "CWE-913",
      "CWE-74",
      "CWE-20",
      "CWE-96"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}