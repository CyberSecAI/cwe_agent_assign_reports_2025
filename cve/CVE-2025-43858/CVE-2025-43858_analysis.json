{
  "cve_id": "CVE-2025-43858",
  "description": "YoutubeDLSharp is a wrapper for the command-line video downloaders youtube-dl and yt-dlp. In versions starting from 1.0.0-beta4 and prior to 1.1.2, an **unsafe conversion of arguments** allows the injection of a malicious commands when starting `yt-dlp` from a commands prompt running on Windows OS with the `UseWindowsEncodingWorkaround` value defined to true (default behavior). If a user is using built-in methods from the YoutubeDL.cs file, the value is true by default and a user cannot disable it from these methods. This issue has been patched in version 1.1.2.",
  "key_phrases": {
    "rootcause": "unsafe conversion of arguments",
    "weakness": "command injection",
    "impact": "",
    "vector": "",
    "attacker": "",
    "product": "YoutubeDLSharp",
    "version": "1.0.0-beta4 to 1.1.2",
    "component": "yt-dlp"
  },
  "reference_content": "## Analysis of CVE-2025-43858 based on provided content\n\nThe provided content details a command injection vulnerability (CVE-2025-43858) in YoutubeDLSharp, specifically affecting versions >= 1.0.0-beta4 and patched in version 1.1.2.\n\n**Root cause of vulnerability:**\n\nThe vulnerability stems from an unsafe conversion of arguments when starting `yt-dlp` on Windows systems. A commit introduced a method to start `yt-dlp` via `cmd.exe` to support Unicode characters, but it failed to sanitize user-provided arguments before passing them to the command prompt.\n\n**Weaknesses/vulnerabilities present:**\n\n*   **Command Injection:**  Unsanitized user input is directly incorporated into a command executed by the system shell (cmd.exe).\n*   **CWE-20:** Improper Input Validation\n*   **CWE-77:** Command Injection\n*   **CWE-78:** Improper Neutralization of Special Elements used in an OS Command ('Command Injection')\n\n**Impact of exploitation:**\n\nAn attacker can inject malicious commands that will be executed on the system with the privileges of the user running the YoutubeDLSharp application. The severity is rated as Critical (CVSS score 9.2).\n\n**Attack vectors:**\n\n*   The vulnerability is triggered by providing a malicious URL or other arguments to YoutubeDLSharp methods that utilize the vulnerable code path.\n*   The PoC demonstrates injecting a command to start `calc.exe` and `msinfo32`.\n\n**Required attacker capabilities/position:**\n\n*   The attacker needs to be able to control the input provided to the YoutubeDLSharp library (e.g., through a URL or other parameters).\n*   The attack is particularly dangerous if the application is accepting input from a network or the internet.\n\n**Mitigation or fix:**\n\n*   **Upgrade:** Upgrade to version 1.1.2 or higher of YoutubeDLSharp. This version removes the `UseWindowsEncodingWorkaround` property, which was the source of the vulnerability.\n*   **Workaround (for older versions):**\n    *   Disable `UseWindowsEncodingWorkaround` when using `YoutubeDLProcess` directly (at the cost of Unicode character support).\n    *   Manually sanitize user-provided URLs and other arguments before passing them to the library. The provided code snippet demonstrates URL sanitization using `Uri.TryCreate` and `AbsoluteUri`, but it's noted that this may not be sufficient for all cases.\n\n**Additional Details (more than official CVE description):**\n\n*   The vulnerability was introduced in commit `fdf3256` approximately 3 years ago.\n*   The vulnerable code is located in `YoutubeDLSharp/YoutubeDLSharp/YoutubeDLProcess.cs` (lines 87-109 in the provided diff).\n*   The `ConvertToArgs` method is responsible for constructing the command string without proper sanitization.\n*   The vulnerability only applies to Windows operating systems.\n*   The advisory provides a detailed PoC demonstrating the exploitation of the vulnerability.\n*   The advisory credits @kitsumed for reporting the vulnerability and @alxnull for developing the remediation.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n\n| CWE ID  | CWE Name                                                                               | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :------------------------------------------------------------------------------------- | :--------- | :---------------------- | :------------------------------ | :-------------------------------- |\n| CWE-78  | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | 1.0        | Base                    | Primary                         | Allowed                           |\n| CWE-88  | Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')          | 0.7        | Base                    | Secondary                       | Allowed                           |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary CWE selected is CWE-78, which is a base-level CWE and a specific type of command injection. CWE-78 is a `CHILDOF` CWE-77 (Improper Neutralization of Special Elements used in a Command ('Command Injection')), which is a more general Class-level CWE. CWE-88 (Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')) is a `CANALSOBE` CWE-78, indicating a peer relationship and an alternative, but potentially less precise, classification. The choice of CWE-78 reflects the OS command context, making it more accurate than CWE-77.\n\n```mermaid\ngraph TD\n    cwe78[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"]\n    cwe77[\"CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')\"]\n    cwe88[\"CWE-88: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')\"]\n    \n    cwe78 -->|CHILDOF| cwe77\n    cwe78 -->|CANALSOBE| cwe88\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe78 primary\n    class cwe77,cwe88 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with the **unsafe conversion of arguments** within YoutubeDLSharp when starting `yt-dlp` on Windows, leading to **command injection** (CWE-78). The initial flaw allows attackers to inject malicious commands via user-controlled input, which are then executed by the system shell. The chain progresses from initial input to command execution, making CWE-78 a direct consequence of the improper neutralization.\n\n## Summary of Analysis\n\nThe primary assessment is based on the provided evidence, specifically the \"**unsafe conversion of arguments**\" that leads to \"**command injection**.\" The CVE Reference Links Content Summary confirms this by stating, \"Unsanitized user input is directly incorporated into a command executed by the system shell (cmd.exe).\" This strongly supports the selection of CWE-78 as the primary weakness because the root cause is the **improper neutralization** of special elements used in an OS command.\n\nThe graph relationships influenced the decision to choose CWE-78 over CWE-77 because CWE-78 is a more specific instance of command injection related to OS commands. The retriever scores also support this, with CWE-77 and CWE-78 being top candidates.\n\nThe selected CWEs are at the optimal level of specificity because CWE-78 accurately describes the nature of the vulnerability, while CWE-88 provides additional context regarding argument delimiters, which is a contributing factor.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*Not Used:* This CWE is related to output encoding, but the vulnerability is due to improper input handling and neutralization of special elements in a command, not output encoding issues.\n\n## CWE-88: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product constructs a string for a command to be executed by a separate component\nin another control sphere, but it does not properly delimit the\nintended arguments, options, or switches within that command string.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Used:* This CWE is relevant because the vulnerability involves the improper handling of arguments passed to the `yt-dlp` command. The **unsafe conversion of arguments** can lead to delimiters being misinterpreted, resulting in command injection.\n\n## CWE-59: Improper Link Resolution Before File Access ('Link Following')\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Not Used:* This CWE is not relevant, as the vulnerability does not involve improper link resolution.\n\n## CWE-138: Improper Neutralization of Special Elements\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n*Not Used:* This CWE is a high-level class and more specific CWEs like CWE-78 are more appropriate.\n\n## CWE-451: User Interface (UI) Misrepresentation of Critical Information\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*Not Used:* This vulnerability does not involve UI misrepresentation.\n\n## CWE-184: Incomplete List of Disallowed Inputs\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Not Used:* While input validation is a factor, there isn't an explicit mechanism based on a list of disallowed inputs, making this less applicable than command injection CWEs.\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n*Not Used:* This is a high-level class, and more specific CWEs such as CWE-78 are a better fit.\n\n## CWE-125: Out-of-bounds Read\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product reads data past the end, or before the beginning, of the intended buffer.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Not Used:* This vulnerability does not involve out-of-bounds reads.\n\n## CWE-427: Uncontrolled Search Path Element\n**Abstraction Level**: Base\n**Similarity Score**: 0.71",
  "analysis_with_relationships": "# Summary\n\n| CWE ID  | CWE Name                                                                               | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :------------------------------------------------------------------------------------- | :--------- | :---------------------- | :------------------------------ | :-------------------------------- |\n| CWE-78  | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | 1.0        | Base                    | Primary                         | Allowed                           |\n| CWE-88  | Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')          | 0.7        | Base                    | Secondary                       | Allowed                           |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary CWE selected is CWE-78, which is a base-level CWE and a specific type of command injection. CWE-78 is a `CHILDOF` CWE-77 (Improper Neutralization of Special Elements used in a Command ('Command Injection')), which is a more general Class-level CWE. CWE-88 (Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')) is a `CANALSOBE` CWE-78, indicating a peer relationship and an alternative, but potentially less precise, classification. The choice of CWE-78 reflects the OS command context, making it more accurate than CWE-77.\n\n```mermaid\ngraph TD\n    cwe78[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"]\n    cwe77[\"CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')\"]\n    cwe88[\"CWE-88: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')\"]\n    \n    cwe78 -->|CHILDOF| cwe77\n    cwe78 -->|CANALSOBE| cwe88\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe78 primary\n    class cwe77,cwe88 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with the **unsafe conversion of arguments** within YoutubeDLSharp when starting `yt-dlp` on Windows, leading to **command injection** (CWE-78). The initial flaw allows attackers to inject malicious commands via user-controlled input, which are then executed by the system shell. The chain progresses from initial input to command execution, making CWE-78 a direct consequence of the improper neutralization.\n\n## Summary of Analysis\n\nThe primary assessment is based on the provided evidence, specifically the \"**unsafe conversion of arguments**\" that leads to \"**command injection**.\" The CVE Reference Links Content Summary confirms this by stating, \"Unsanitized user input is directly incorporated into a command executed by the system shell (cmd.exe).\" This strongly supports the selection of CWE-78 as the primary weakness because the root cause is the **improper neutralization** of special elements used in an OS command.\n\nThe graph relationships influenced the decision to choose CWE-78 over CWE-77 because CWE-78 is a more specific instance of command injection related to OS commands. The retriever scores also support this, with CWE-77 and CWE-78 being top candidates.\n\nThe selected CWEs are at the optimal level of specificity because CWE-78 accurately describes the nature of the vulnerability, while CWE-88 provides additional context regarding argument delimiters, which is a contributing factor.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*Not Used:* This CWE is related to output encoding, but the vulnerability is due to improper input handling and neutralization of special elements in a command, not output encoding issues.\n\n## CWE-88: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product constructs a string for a command to be executed by a separate component\nin another control sphere, but it does not properly delimit the\nintended arguments, options, or switches within that command string.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Used:* This CWE is relevant because the vulnerability involves the improper handling of arguments passed to the `yt-dlp` command. The **unsafe conversion of arguments** can lead to delimiters being misinterpreted, resulting in command injection.\n\n## CWE-59: Improper Link Resolution Before File Access ('Link Following')\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Not Used:* This CWE is not relevant, as the vulnerability does not involve improper link resolution.\n\n## CWE-138: Improper Neutralization of Special Elements\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n*Not Used:* This CWE is a high-level class and more specific CWEs like CWE-78 are more appropriate.\n\n## CWE-451: User Interface (UI) Misrepresentation of Critical Information\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*Not Used:* This vulnerability does not involve UI misrepresentation.\n\n## CWE-184: Incomplete List of Disallowed Inputs\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Not Used:* While input validation is a factor, there isn't an explicit mechanism based on a list of disallowed inputs, making this less applicable than command injection CWEs.\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n*Not Used:* This is a high-level class, and more specific CWEs such as CWE-78 are a better fit.\n\n## CWE-125: Out-of-bounds Read\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product reads data past the end, or before the beginning, of the intended buffer.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Not Used:* This vulnerability does not involve out-of-bounds reads.\n\n## CWE-427: Uncontrolled Search Path Element\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-427:**\n- 427 (Uncontrolled Search Path Element) - ROOT\n\n\n**Chain starting from CWE-116:**\n- 116 (Improper Encoding or Escaping of Output) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "77",
        "name": "Improper Neutralization of Special Elements used in a Command ('Command Injection')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Command injection",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "78",
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: OS Command Injection",
        "match_reason": "phrase_in_term_whole_phrase"
      },
      "similarity": 700.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "88",
        "name": "Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
        "source": "sparse"
      },
      "similarity": 546.4582518127552
    },
    {
      "metadata": {
        "doc_id": "94",
        "name": "Improper Control of Generation of Code ('Code Injection')",
        "source": "sparse"
      },
      "similarity": 529.0335667648534
    },
    {
      "metadata": {
        "doc_id": "1333",
        "name": "Inefficient Regular Expression Complexity",
        "source": "sparse"
      },
      "similarity": 524.6320332370959
    },
    {
      "metadata": {
        "doc_id": "269",
        "name": "Improper Privilege Management",
        "source": "sparse"
      },
      "similarity": 523.2718666112222
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 520.3144046645708
    },
    {
      "metadata": {
        "doc_id": "502",
        "name": "Deserialization of Untrusted Data",
        "source": "sparse"
      },
      "similarity": 518.5507965925636
    },
    {
      "metadata": {
        "doc_id": "1427",
        "name": "Improper Neutralization of Input Used for LLM Prompting",
        "type": "Base",
        "original_content": "The product uses externally-provided data to build prompts provided to\nlarge language models (LLMs), but the way these prompts are constructed\ncauses the LLM to fail to distinguish between user-supplied inputs and\ndeveloper provided system directives.",
        "keyphrase_source": "weakness:command injection",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Ensure that the weakness being identified involves improper neutralization during prompt generation. A different CWE might be needed if the core concern is related to inadvertent insertion of sensitive information, generating prompts from third-party sources that should not have been trusted (as may occur with indirect prompt injection), or jailbreaking, then the root cause might be a different weakness.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.4004239359430539,
            "graph": 1.647158323966331
          }
        }
      },
      "similarity": 0.4004239359430539
    },
    {
      "doc_id": "98",
      "text": "CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')",
      "score": 2.4936000000000003,
      "metadata": {
        "doc_id": "98",
        "name": "Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')",
        "type": "variant",
        "original_content": "CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')",
        "relationships": [
          {
            "source_id": "98",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "473",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "456",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "425",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "426",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "94",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "829",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "706",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "94",
            "target_id": "98",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "829",
            "target_id": "98",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "706",
            "target_id": "98",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "473",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "456",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "425",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0,
          "peer_group": 0.63
        },
        "abstraction_factor": 1.2,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "94",
                  "98",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "94"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "94",
                  "98",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "94"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "98",
                  "94",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "94"
            },
            "peer_relationship": {
              "path": [
                [
                  "426",
                  "427",
                  "PEEROF"
                ],
                [
                  "98",
                  "426",
                  "CANALSOBE"
                ]
              ],
              "score": 0.63,
              "type": "peer_relationship",
              "source": "427"
            }
          }
        },
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.4936000000000003
          }
        }
      },
      "similarity": 2.4936000000000003
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-427",
      "CWE-116",
      "CWE-88",
      "CWE-77",
      "CWE-125",
      "CWE-59",
      "CWE-184",
      "CWE-74",
      "CWE-78",
      "CWE-138",
      "CWE-451"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}