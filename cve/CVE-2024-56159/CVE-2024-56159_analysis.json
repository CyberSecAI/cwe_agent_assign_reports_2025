{
  "cve_id": "CVE-2024-56159",
  "description": "Astro is a web framework for content-driven websites. A bug in the build process allows any unauthenticated user to read parts of the server source code. During build, along with client assets such as css and font files, the sourcemap files **for the server code** are moved to a publicly-accessible folder. Any outside party can read them with an unauthorized HTTP GET request to the same server hosting the rest of the website. While some server files are hashed, making their access obscure, the files corresponding to the file system router (those in `src/pages`) are predictably named. For example. the sourcemap file for `src/pages/index.astro` gets named `dist/client/pages/index.astro.mjs.map`. This vulnerability is the root cause of issue #12703, which links to a simple stackblitz project demonstrating the vulnerability. Upon build, notice the contents of the `dist/client` (referred to as `config.build.client` in astro code) folder. All astro servers make the folder in question accessible to the public internet without any authentication. It contains `.map` files corresponding to the code that runs on the server. All **server-output** projects on Astro 5 versions **v5.0.3** through **v5.0.7**, that have **sourcemaps enabled**, either directly or through an add-on such as `sentry`, are affected. The fix for **server-output** projects was released in **astro@5.0.8**. Additionally, all **static-output** projects built using Astro 4 versions **4.16.17 or older**, or Astro 5 versions **5.0.8 or older**, that have **sourcemaps enabled** are also affected. The fix for **static-output** projects was released in **astro@5.0.9**, and backported to Astro v4 in **astro@4.16.18**. The immediate impact is limited to source code. Any secrets or environment variables are not exposed unless they are present verbatim in the source code. There is no immediate loss of integrity within the the vulnerable server. However, it is possible to subsequently discover another vulnerability via the revealed source code . There is no immediate impact to availability of the vulnerable server. However, the presence of an unsafe regular expression, for example, can quickly be exploited to subsequently compromise the availability. The fix for **server-output** projects was released in **astro@5.0.8**, and the fix for **static-output** projects was released in **astro@5.0.9** and backported to Astro v4 in **astro@4.16.18**. Users are advised to update immediately if they are using sourcemaps or an integration that enables sourcemaps.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "",
    "impact": [
      "read parts of the server source code",
      "read sourcemap files",
      "loss of integrity",
      "availability"
    ],
    "vector": "",
    "attacker": "any unauthenticated user",
    "product": [
      "'Astro static-output']",
      "['Astro server-output'"
    ],
    "version": [
      "['5.0.3 through 5.0.7'",
      "'4.16.17 or older'",
      "'5.0.8 or older']"
    ],
    "component": ""
  },
  "reference_content": "Based on the provided information, here's an analysis of the vulnerability described in CVE-2024-56159:\n\n**Root Cause of Vulnerability:**\nThe vulnerability stems from a flaw in the build process of the Astro framework, where sourcemap files for server-side code are unintentionally moved to a publicly accessible directory.\n\n**Weaknesses/Vulnerabilities Present:**\n- **Public Exposure of Sourcemaps:** The core weakness is that the build process places server-side sourcemap files in a location accessible to any unauthenticated user.\n- **Predictable File Names:** While some server files are hashed, files associated with the file system router (typically located in `src/pages`) have predictable names, making them easier to locate and access.\n- **Insecure Asset Handling:** The `ssrMoveAssets` function in `static-build.ts` is responsible for moving these assets, but it incorrectly places server-side sourcemaps in the public directory.\n\n**Impact of Exploitation:**\n- **Source Code Disclosure:** Attackers can reconstruct the server-side source code by accessing the exposed `.map` files and using tools like `source-map-visualization`. This allows an attacker to see the application's logic and implementation details.\n- **Potential for Further Vulnerability Discovery:** The revealed source code can be analyzed to identify other vulnerabilities, such as insecure regular expressions or logic flaws, that can then be exploited.\n- **Limited direct Exposure:** Secrets and environment variables are not directly exposed unless they are present verbatim in the source code itself.\n- **Potential Availability Issues:** While there's no immediate impact on availability, the discovery of vulnerabilities via source code can lead to availability issues, such as exploiting an unsafe regular expression.\n\n**Attack Vectors:**\n- **Network:** The attack vector is network-based. An attacker can send an HTTP GET request to retrieve the sourcemap files.\n\n**Required Attacker Capabilities/Position:**\n- **No Privileges Required:** The attacker does not need any authentication or authorization to access the files.\n- **No User Interaction Required:** The attacker does not need any interaction from the legitimate users of the website.\n- **Low Attack Complexity:** The attacker only needs to send an HTTP request, and the location of files are relatively easy to guess.\n\n**Additional Details:**\n- **Affected Versions:**\n    - Astro 5 versions `v5.0.3` through `v5.0.6` (inclusive) for server-output projects, and `5.0.7` or older for static-output projects.\n    - Astro 4 versions `4.16.17` or older for static-output projects.\n- **Patched Versions:**\n    - Astro `5.0.7` fixes the issue for server-output projects.\n    - Astro `5.0.8` and `4.16.18` (backported) fixes for static-output projects.\n- **Mitigation:** The fix involves preventing the sourcemap files from being moved to the publicly accessible folder.\n- **Sentry Integration:** The Sentry integration for Astro can enable sourcemaps, which could expose the vulnerability if not correctly configured or if the Astro version is vulnerable.\n\n**CVSS Metrics:**\n\nCVSS:4.0/AV:N/AC:L/AT:N/PR:N/UI:N/VC:L/VI:N/VA:N/SC:H/SI:L/SA:L\n\n*   **AV:N (Attack Vector: Network):** The vulnerability can be exploited over a network.\n*   **AC:L (Attack Complexity: Low):** The attack is easily executed.\n*   **AT:N (Attack Requirements: None):** No special conditions are needed for the attack.\n*  **PR:N (Privileges Required: None):** No special privileges are required to exploit.\n*   **UI:N (User Interaction: None):** No user interaction is needed.\n*  **VC:L (Vulnerable System Confidentiality: Low):** Limited information can be obtained from the vulnerable system.\n*   **VI:N (Vulnerable System Integrity: None):** The vulnerable system's integrity is not impacted.\n*   **VA:N (Vulnerable System Availability: None):** The vulnerable system's availability is not impacted.\n*   **SC:H (Subsequent System Confidentiality: High):** The attacker can potentially find other vulnerabilities leading to sensitive information disclosure.\n*  **SI:L (Subsequent System Integrity: Low):** The attacker can potentially compromise the integrity of the system.\n*   **SA:L (Subsequent System Availability: Low):** The attacker can potentially impact system availability by exploiting the discovered information.\n\nThis vulnerability allows an attacker to access server-side source code, and though it does not directly leak sensitive data such as environment variables, it enables the potential discovery of other vulnerabilities.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-201 | Insertion of Sensitive Information Into Sent Data | 0.8 | Base | Allowed | Primary CWE. The sourcemap files, which contain sensitive source code information, are being sent to a publicly accessible folder. |\n| CWE-497 | Exposure of Sensitive System Information to an Unauthorized Control Sphere | 0.6 | Base | Allowed | Secondary candidate. The vulnerability results in the exposure of system information (server-side source code) to an unauthorized control sphere. |\n| CWE-306 | Missing Authentication for Critical Function | 0.5 | Base | Allowed | Secondary candidate. The affected folder containing the sourcemaps is publicly accessible without any authentication. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.7\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-201, which focuses on the insertion of sensitive information into sent data. The sourcemaps, containing server source code, are moved to a publicly accessible directory, effectively sending sensitive information to unauthorized users. CWE-497, Exposure of Sensitive System Information to an Unauthorized Control Sphere, is considered because the exposed sourcemaps reveal system internals. CWE-306, Missing Authentication for Critical Function, is related because the directory containing the sourcemaps lacks authentication, allowing unauthenticated access.\n\n```mermaid\ngraph TD\n    cwe201[\"CWE-201: Insertion of Sensitive Information Into Sent Data\"]\n    cwe497[\"CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\"]\n    cwe306[\"CWE-306: Missing Authentication for Critical Function\"]\n    cwe668[\"CWE-668: Exposure of Resource to Wrong Sphere\"]\n\n    cwe497 -->|CHILDOF| cwe668\n    cwe201 -->|CANFOLLOW| cwe497\n    cwe306 -->|CANPRECEDE| cwe201\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe201 primary\n    class cwe497,cwe306 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **incorrect** placement of server-side sourcemaps into a publicly accessible directory. This leads to the exposure of sensitive source code (CWE-201). Because the directory is publicly available, there is a **missing authentication** for critical function (CWE-306) in accessing the sourcemaps. This combination allows any unauthenticated user to read parts of the server source code which can be classified as exposure of sensitive system information (CWE-497). The chain is as follows: Missing Authentication (CWE-306) -> Insertion of Sensitive Information (CWE-201) -> Exposure of Sensitive System Information (CWE-497).\n\n## Summary of Analysis\nThe primary focus is on the **exposure** of source code due to its **insertion** into a publicly accessible location. The decision to prioritize CWE-201 is based on the vulnerability's description highlighting that sourcemap files containing sensitive source code are moved to a publicly accessible directory. The evidence for this is found in the \"Vulnerability Description\" and \"CVE Reference Links Content Summary\" sections. This is a direct **insertion** of sensitive information into a location where it can be sent to unauthorized parties.\n\nCWE-497 is a valid secondary consideration because the exposure of sourcemaps leads to exposure of sensitive system information. However, CWE-201 more precisely captures the root cause: the act of placing sensitive information (source code) in a location accessible to unauthorized parties.\n\nCWE-306 is also considered as a secondary factor because the public directory holding sourcemaps lacks any form of authentication, exacerbating the risk associated with the placement of source code.\n\nThe selection of CWE-201 as the primary weakness is at the optimal level of specificity because it precisely describes the **root cause** of the vulnerability: the **insertion** of sensitive data into a location where it can be sent to unauthorized parties. The related CWEs, CWE-497 and CWE-306, help paint a complete picture of the vulnerability's context and contributing factors, but CWE-201 remains the core issue.",
  "analysis_with_relationships": "# Summary\n\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-201 | Insertion of Sensitive Information Into Sent Data | 0.8 | Base | Allowed | Primary CWE. The sourcemap files, which contain sensitive source code information, are being sent to a publicly accessible folder. |\n| CWE-497 | Exposure of Sensitive System Information to an Unauthorized Control Sphere | 0.6 | Base | Allowed | Secondary candidate. The vulnerability results in the exposure of system information (server-side source code) to an unauthorized control sphere. |\n| CWE-306 | Missing Authentication for Critical Function | 0.5 | Base | Allowed | Secondary candidate. The affected folder containing the sourcemaps is publicly accessible without any authentication. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.7\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-201, which focuses on the insertion of sensitive information into sent data. The sourcemaps, containing server source code, are moved to a publicly accessible directory, effectively sending sensitive information to unauthorized users. CWE-497, Exposure of Sensitive System Information to an Unauthorized Control Sphere, is considered because the exposed sourcemaps reveal system internals. CWE-306, Missing Authentication for Critical Function, is related because the directory containing the sourcemaps lacks authentication, allowing unauthenticated access.\n\n```mermaid\ngraph TD\n    cwe201[\"CWE-201: Insertion of Sensitive Information Into Sent Data\"]\n    cwe497[\"CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\"]\n    cwe306[\"CWE-306: Missing Authentication for Critical Function\"]\n    cwe668[\"CWE-668: Exposure of Resource to Wrong Sphere\"]\n\n    cwe497 -->|CHILDOF| cwe668\n    cwe201 -->|CANFOLLOW| cwe497\n    cwe306 -->|CANPRECEDE| cwe201\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe201 primary\n    class cwe497,cwe306 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **incorrect** placement of server-side sourcemaps into a publicly accessible directory. This leads to the exposure of sensitive source code (CWE-201). Because the directory is publicly available, there is a **missing authentication** for critical function (CWE-306) in accessing the sourcemaps. This combination allows any unauthenticated user to read parts of the server source code which can be classified as exposure of sensitive system information (CWE-497). The chain is as follows: Missing Authentication (CWE-306) -> Insertion of Sensitive Information (CWE-201) -> Exposure of Sensitive System Information (CWE-497).\n\n## Summary of Analysis\nThe primary focus is on the **exposure** of source code due to its **insertion** into a publicly accessible location. The decision to prioritize CWE-201 is based on the vulnerability's description highlighting that sourcemap files containing sensitive source code are moved to a publicly accessible directory. The evidence for this is found in the \"Vulnerability Description\" and \"CVE Reference Links Content Summary\" sections. This is a direct **insertion** of sensitive information into a location where it can be sent to unauthorized parties.\n\nCWE-497 is a valid secondary consideration because the exposure of sourcemaps leads to exposure of sensitive system information. However, CWE-201 more precisely captures the root cause: the act of placing sensitive information (source code) in a location accessible to unauthorized parties.\n\nCWE-306 is also considered as a secondary factor because the public directory holding sourcemaps lacks any form of authentication, exacerbating the risk associated with the placement of source code.\n\nThe selection of CWE-201 as the primary weakness is at the optimal level of specificity because it precisely describes the **root cause** of the vulnerability: the **insertion** of sensitive data into a location where it can be sent to unauthorized parties. The related CWEs, CWE-497 and CWE-306, help paint a complete picture of the vulnerability's context and contributing factors, but CWE-201 remains the core issue.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-306:**\n- 306 (Missing Authentication for Critical Function) - ROOT\n\n\n**Chain starting from CWE-201:**\n- 201 (Insertion of Sensitive Information Into Sent Data) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 659.5015815997527
    },
    {
      "metadata": {
        "doc_id": "61",
        "name": "UNIX Symbolic Link (Symlink) Following",
        "source": "sparse"
      },
      "similarity": 657.6570007895922
    },
    {
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "source": "sparse"
      },
      "similarity": 657.3350418901096
    },
    {
      "metadata": {
        "doc_id": "306",
        "name": "Missing Authentication for Critical Function",
        "source": "sparse"
      },
      "similarity": 655.7719876988285
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 655.3132894331106
    },
    {
      "metadata": {
        "doc_id": "22",
        "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
        "source": "sparse"
      },
      "similarity": 653.2179724119028
    },
    {
      "metadata": {
        "doc_id": "94",
        "name": "Improper Control of Generation of Code ('Code Injection')",
        "source": "sparse"
      },
      "similarity": 652.7542265916102
    },
    {
      "metadata": {
        "doc_id": "285",
        "name": "Improper Authorization",
        "source": "sparse"
      },
      "similarity": 651.7472908374065
    },
    {
      "metadata": {
        "doc_id": "918",
        "name": "Server-Side Request Forgery (SSRF)",
        "type": "Base",
        "original_content": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5931314147211337,
            "graph": 1.6531676248294893
          }
        }
      },
      "similarity": 0.5931314147211337
    },
    {
      "doc_id": "73",
      "text": "CWE-73: External Control of File Name or Path",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "73",
        "name": "External Control of File Name or Path",
        "type": "base",
        "original_content": "CWE-73: External Control of File Name or Path",
        "relationships": [
          {
            "source_id": "73",
            "target_id": "114",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "59",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "434",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "41",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "22",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "20",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "700"
            }
          },
          {
            "source_id": "73",
            "target_id": "610",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "642",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "99",
            "target_id": "73",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "642",
            "target_id": "73",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "610",
            "target_id": "73",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "59",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "41",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "22",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "20",
            "target_id": "73",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "700"
            }
          },
          {
            "source_id": "114",
            "target_id": "73",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "22",
                  "73",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "22"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "22",
                  "73",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "22"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "73",
                  "22",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "22"
            }
          }
        },
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-306",
      "CWE-201",
      "CWE-497",
      "CWE-668"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}