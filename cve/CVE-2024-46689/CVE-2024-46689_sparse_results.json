{
  "query": "In the Linux kernel, the following vulnerability has been resolved soc qcom cmd-db Map shared memory as WC, not WB Linux does not write into cmd-db region. This region of memory is write protected by XPU. XPU may sometime falsely detect clean cache eviction as write into the write protected region leading to secure interrupt which causes an endless loop somewhere in Trust Zone. The only reason it is working right now is because Qualcomm Hypervisor maps the same region as Non-Cacheable memory in Stage 2 translation tables. The issue manifests if we want to use another hypervisor (like Xen or KVM), which does not know anything about those specific mappings. Changing the mapping of cmd-db memory from MEMREMAP_WB to MEMREMAP_WT/WC removes dependency on correct mappings in Stage 2 tables. This patch fixes the issue by updating the mapping to MEMREMAP_WC. I tested this on SA8155P with Xen.",
  "count": 11,
  "results": [
    {
      "cwe_id": "404",
      "name": "Improper Resource Shutdown or Release",
      "abstraction": "Class",
      "score": 755.0793701450756,
      "original_score": 755.0793701450756,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "abstraction": "Base",
      "score": 718.0959573961507,
      "original_score": 718.0959573961507,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "abstraction": "Class",
      "score": 656.1264469999841,
      "original_score": 656.1264469999841,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "1257",
      "name": "Improper Access Control Applied to Mirrored or Aliased Memory Regions",
      "abstraction": "Base",
      "score": 656.0632766804599,
      "original_score": 656.0632766804599,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "61",
      "name": "UNIX Symbolic Link (Symlink) Following",
      "abstraction": "Compound",
      "score": 636.8123509879022,
      "original_score": 636.8123509879022,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "abstraction": "Class",
      "score": 632.0041870560076,
      "original_score": 632.0041870560076,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "863",
      "name": "Incorrect Authorization",
      "abstraction": "Class",
      "score": 627.3376298908189,
      "original_score": 627.3376298908189,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "125",
      "name": "Out-of-bounds Read",
      "abstraction": "Base",
      "score": 621.0903787155909,
      "original_score": 621.0903787155909,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "787",
      "name": "Out-of-bounds Write",
      "abstraction": "Base",
      "score": 618.3802684711112,
      "original_score": 618.3802684711112,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "190",
      "name": "Integer Overflow or Wraparound",
      "abstraction": "Base",
      "score": 618.2025146282169,
      "original_score": 618.2025146282169,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "754",
      "name": "Improper Check for Unusual or Exceptional Conditions",
      "abstraction": "Class",
      "score": 201.57181183433576,
      "original_score": 201.57181183433576,
      "mapping_usage": "Allowed-with-Review"
    }
  ],
  "statistics": {
    "min": 201.57181183433576,
    "max": 755.0793701450756,
    "mean": 612.7967448005139,
    "median": 632.0041870560076,
    "count": 11
  }
}