{
  "cve_id": "CVE-2024-36399",
  "description": "Kanboard is project management software that focuses on the Kanban methodology. The vuln is in app/Controller/ProjectPermissionController.php function addUser(). The **users permission to add users to a project only get checked on the URL parameter project_id**. If the user is authorized to add users to this project the request gets processed. The users permission for the POST BODY parameter project_id does not get checked again while processing. An attacker with the Project Manager on a single project may take over any other project. The vulnerability is fixed in 1.2.37.",
  "key_phrases": {
    "rootcause": "users permission to add users to a project only get checked on the URL parameter project_id",
    "weakness": "not properly validating user permissions",
    "impact": "take over any other project",
    "vector": "crafted request to addUser() function",
    "attacker": "attacker with Project Manager role",
    "product": "Kanboard",
    "version": "prior to 1.2.37",
    "component": "app/Controller/ProjectPermissionController.php function addUser()"
  },
  "reference_content": "Based on the provided content, here's a breakdown of the vulnerability:\n\n**Root Cause:**\n\nThe vulnerability stems from an Insecure Direct Object Reference (IDOR) in the `ProjectPermissionController.php` file, specifically within the `addUser()` function. The application only checks the user's permission to add users based on the `project_id` in the URL parameters. However, it fails to re-verify the user's permission based on the `project_id` provided in the POST request body. This allows an attacker to manipulate the project ID in the request body to gain access to projects they are not authorized to manage.\n\n**Weaknesses/Vulnerabilities Present:**\n\n*   **IDOR (Insecure Direct Object Reference):** The application uses the `project_id` parameter directly without proper authorization checks based on the body parameter.\n*   **Missing CSRF Check (in original report):** Although not the root cause of the IDOR, the original report also mentioned that the `addUser()` function does not verify the CSRF token, but the provided patch does address this.\n\n**Impact of Exploitation:**\n\n*   **Project Takeover:** An attacker with \"Project Manager\" role on one project can gain full control over any other project.\n*   **Unauthorized Access:** Access to sensitive information in projects the attacker should not have access to.\n*   **Data Manipulation:** Ability to change user access, delete/edit tickets, delete projects, etc.\n\n**Attack Vectors:**\n\n*   **Network:** The attack can be performed remotely over the network\n*   **HTTP Request Manipulation:** An attacker modifies the `project_id` parameter in the POST request body via a proxy (e.g., Burp Suite)\n\n**Required Attacker Capabilities/Position:**\n\n*   **Low Privileges:** The attacker needs to have a \"Project Manager\" role on at least one project.\n*   **Network Access:** The attacker needs to be able to send HTTP requests to the application.\n*   **HTTP Interception:** The attacker would ideally use a proxy to intercept and modify the POST request.\n\n**Additional Notes:**\n\n*   The provided commit fixes the vulnerability by adding a CSRF check and removing the `project_id` form value. The CSRF check was missing in the original version.\n*   The vulnerability is present in versions `<= 1.2.36` and is fixed in version `>= 1.2.37`.\n\nThis description is more detailed than the information provided in the initial CVE description.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-863 | Incorrect Authorization | 0.9 | Class | Allowed-with-Review | Primary CWE. The authorization check is present but flawed. |\n| CWE-639 | Authorization Bypass Through User-Controlled Key | 0.7 | Base | Allowed | Secondary CWE. An attacker is able to modify the key value identifying the data. |\n| CWE-472 | External Control of Assumed-Immutable Web Parameter | 0.6 | Base | Allowed | Secondary CWE. The application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as the `project_id` in the POST body. |\n| CWE-862 | Missing Authorization | 0.5 | Class | Allowed-with-Review | The authorization check based on the POST BODY parameter project_id is missing. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is **Incorrect Authorization (CWE-863)**, because the application attempts to perform authorization but does it incorrectly. The vulnerability also exhibits characteristics of **Authorization Bypass Through User-Controlled Key (CWE-639)** because the attacker modifies the `project_id` parameter in the POST request body to bypass authorization. **External Control of Assumed-Immutable Web Parameter (CWE-472)** is also applicable because the `project_id` is assumed to be immutable but can be controlled by the user. The **Missing Authorization (CWE-862)** is also applicable because the application does not perform an authorization check based on the POST BODY parameter `project_id`.\n\n```mermaid\ngraph TD\n    cwe863[\"CWE-863: Incorrect Authorization\"]\n    cwe639[\"CWE-639: Authorization Bypass Through User-Controlled Key\"]\n    cwe472[\"CWE-472: External Control of Assumed-Immutable Web Parameter\"]\n    cwe862[\"CWE-862: Missing Authorization\"]\n    \n    cwe639 -->|CHILDOF| cwe863\n    cwe472 -->|CANPRECEDE| cwe863\n    cwe862 -->|PEEROF| cwe863\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe863 primary\n    class cwe639,cwe472,cwe862 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **incorrect or missing authorization** (CWE-863, CWE-862) in the `addUser()` function, which leads to the **authorization bypass through user-controlled key** (CWE-639) and the **external control of assumed-immutable web parameter** (CWE-472). The final impact is the ability to **take over any other project**.\n\n## Summary of Analysis\nThe analysis is primarily based on the provided evidence, which includes the vulnerability description and the CVE reference links content summary. The vulnerability lies in the `addUser()` function of the `ProjectPermissionController.php` file, where the application **only checks the user's permission based on the `project_id` in the URL parameters** but **fails to re-verify the user's permission based on the `project_id` provided in the POST request body**. This allows an attacker to manipulate the project ID in the request body to gain access to projects they are not authorized to manage.\n\nThe graph relationships influenced the final selection by highlighting the connections between the different CWEs. **CWE-863** is the primary weakness because the authorization check is present but flawed. **CWE-639** and **CWE-472** are secondary weaknesses because they contribute to the authorization bypass. **CWE-862** also applies because the authorization check based on the POST BODY parameter project_id is missing.\n\nThe selected CWEs are at the optimal level of specificity. **CWE-863** is a Class-level CWE, but it is the most appropriate choice because it accurately reflects the nature of the vulnerability. **CWE-639** and **CWE-472** are Base-level CWEs, which provide more specific details about the authorization bypass.\n\nThe **CWE-285 Improper Authorization** was considered, but it was deemed less appropriate than **CWE-863 Incorrect Authorization**. While both CWEs deal with authorization issues, **CWE-863** is more specific in that it highlights the fact that the authorization check is present but flawed. **CWE-285** is more general and could apply to cases where there is no authorization check at all.\n\n**CWE-306: Missing Authentication for Critical Function** was considered, but authentication is not mentioned in the provided text.\n\nRelevant CWE Information:\n* CWE-863: Incorrect Authorization\n* CWE-285: Improper Authorization\n* CWE-862: Missing Authorization\n* CWE-201: Insertion of Sensitive Information Into Sent Data\n* CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n* CWE-639: Authorization Bypass Through User-Controlled Key\n* CWE-306: Missing Authentication for Critical Function\n* CWE-425: Direct Request ('Forced Browsing')\n* CWE-286: Incorrect User Management\n* CWE-494: Download of Code Without Integrity Check",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-863 | Incorrect Authorization | 0.9 | Class | Allowed-with-Review | Primary CWE. The authorization check is present but flawed. |\n| CWE-639 | Authorization Bypass Through User-Controlled Key | 0.7 | Base | Allowed | Secondary CWE. An attacker is able to modify the key value identifying the data. |\n| CWE-472 | External Control of Assumed-Immutable Web Parameter | 0.6 | Base | Allowed | Secondary CWE. The application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as the `project_id` in the POST body. |\n| CWE-862 | Missing Authorization | 0.5 | Class | Allowed-with-Review | The authorization check based on the POST BODY parameter project_id is missing. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is **Incorrect Authorization (CWE-863)**, because the application attempts to perform authorization but does it incorrectly. The vulnerability also exhibits characteristics of **Authorization Bypass Through User-Controlled Key (CWE-639)** because the attacker modifies the `project_id` parameter in the POST request body to bypass authorization. **External Control of Assumed-Immutable Web Parameter (CWE-472)** is also applicable because the `project_id` is assumed to be immutable but can be controlled by the user. The **Missing Authorization (CWE-862)** is also applicable because the application does not perform an authorization check based on the POST BODY parameter `project_id`.\n\n```mermaid\ngraph TD\n    cwe863[\"CWE-863: Incorrect Authorization\"]\n    cwe639[\"CWE-639: Authorization Bypass Through User-Controlled Key\"]\n    cwe472[\"CWE-472: External Control of Assumed-Immutable Web Parameter\"]\n    cwe862[\"CWE-862: Missing Authorization\"]\n    \n    cwe639 -->|CHILDOF| cwe863\n    cwe472 -->|CANPRECEDE| cwe863\n    cwe862 -->|PEEROF| cwe863\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe863 primary\n    class cwe639,cwe472,cwe862 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **incorrect or missing authorization** (CWE-863, CWE-862) in the `addUser()` function, which leads to the **authorization bypass through user-controlled key** (CWE-639) and the **external control of assumed-immutable web parameter** (CWE-472). The final impact is the ability to **take over any other project**.\n\n## Summary of Analysis\nThe analysis is primarily based on the provided evidence, which includes the vulnerability description and the CVE reference links content summary. The vulnerability lies in the `addUser()` function of the `ProjectPermissionController.php` file, where the application **only checks the user's permission based on the `project_id` in the URL parameters** but **fails to re-verify the user's permission based on the `project_id` provided in the POST request body**. This allows an attacker to manipulate the project ID in the request body to gain access to projects they are not authorized to manage.\n\nThe graph relationships influenced the final selection by highlighting the connections between the different CWEs. **CWE-863** is the primary weakness because the authorization check is present but flawed. **CWE-639** and **CWE-472** are secondary weaknesses because they contribute to the authorization bypass. **CWE-862** also applies because the authorization check based on the POST BODY parameter project_id is missing.\n\nThe selected CWEs are at the optimal level of specificity. **CWE-863** is a Class-level CWE, but it is the most appropriate choice because it accurately reflects the nature of the vulnerability. **CWE-639** and **CWE-472** are Base-level CWEs, which provide more specific details about the authorization bypass.\n\nThe **CWE-285 Improper Authorization** was considered, but it was deemed less appropriate than **CWE-863 Incorrect Authorization**. While both CWEs deal with authorization issues, **CWE-863** is more specific in that it highlights the fact that the authorization check is present but flawed. **CWE-285** is more general and could apply to cases where there is no authorization check at all.\n\n**CWE-306: Missing Authentication for Critical Function** was considered, but authentication is not mentioned in the provided text.\n\nRelevant CWE Information:\n* CWE-863: Incorrect Authorization\n* CWE-285: Improper Authorization\n* CWE-862: Missing Authorization\n* CWE-201: Insertion of Sensitive Information Into Sent Data\n* CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n* CWE-639: Authorization Bypass Through User-Controlled Key\n* CWE-306: Missing Authentication for Critical Function\n* CWE-425: Direct Request ('Forced Browsing')\n* CWE-286: Incorrect User Management\n* CWE-494: Download of Code Without Integrity Check\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-863:**\n- 863 (Incorrect Authorization) - ROOT\n\n\n**Chain starting from CWE-494:**\n- 494 (Download of Code Without Integrity Check) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 694.9291760800082
    },
    {
      "metadata": {
        "doc_id": "285",
        "name": "Improper Authorization",
        "source": "sparse"
      },
      "similarity": 648.8185805522962
    },
    {
      "metadata": {
        "doc_id": "862",
        "name": "Missing Authorization",
        "source": "sparse"
      },
      "similarity": 637.8247633687406
    },
    {
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "source": "sparse"
      },
      "similarity": 634.3290776312604
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 622.2852736434488
    },
    {
      "metadata": {
        "doc_id": "639",
        "name": "Authorization Bypass Through User-Controlled Key",
        "source": "sparse"
      },
      "similarity": 614.5179271404068
    },
    {
      "metadata": {
        "doc_id": "306",
        "name": "Missing Authentication for Critical Function",
        "source": "sparse"
      },
      "similarity": 601.9857312946326
    },
    {
      "metadata": {
        "doc_id": "425",
        "name": "Direct Request ('Forced Browsing')",
        "source": "sparse"
      },
      "similarity": 594.983664924711
    },
    {
      "metadata": {
        "doc_id": "286",
        "name": "Incorrect User Management",
        "type": "Class",
        "original_content": "The product does not properly manage a user within its environment.",
        "keyphrase_source": "weakness:not properly validating user permissions",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
          "comments": "Examine children of this entry to see if there is a better fit",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.42569228017637245
          }
        }
      },
      "similarity": 0.42569228017637245
    },
    {
      "doc_id": "494",
      "text": "CWE-494: Download of Code Without Integrity Check",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "494",
        "name": "Download of Code Without Integrity Check",
        "type": "base",
        "original_content": "CWE-494: Download of Code Without Integrity Check",
        "relationships": [
          {
            "source_id": "494",
            "target_id": "79",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "494",
            "target_id": "669",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "494",
            "target_id": "669",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "494",
            "target_id": "345",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "494",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "669",
            "target_id": "494",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "345",
            "target_id": "494",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "79",
                  "494",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "79"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "79",
                  "494",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_forward",
              "source": "79"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-863",
      "CWE-494",
      "CWE-862",
      "CWE-639",
      "CWE-306",
      "CWE-201",
      "CWE-79",
      "CWE-472",
      "CWE-286",
      "CWE-285",
      "CWE-425"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}