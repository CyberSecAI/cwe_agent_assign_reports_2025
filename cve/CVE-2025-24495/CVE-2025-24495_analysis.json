{
  "cve_id": "CVE-2025-24495",
  "description": "Incorrect initialization of resource in the branch prediction unit for some Intel(R) Core Ultra Processors may allow an authenticated user to potentially enable information disclosure via local access.",
  "key_phrases": {
    "component": "branch prediction unit",
    "rootcause": "incorrect initialization of resource",
    "vector": "local access",
    "weakness": "",
    "product": "Intel(R) Core Ultra Processors",
    "impact": "information disclosure, potentially enable information disclosure",
    "attacker": "authenticated user",
    "version": ""
  },
  "reference_content": "## Analysis of CVE-2025-24495 Content\n\nThis content is **RELEVANT** to CVE-2025-24495. It provides detailed information about a security advisory from Intel concerning potential vulnerabilities in Intel\u00ae Core\u2122 Ultra Processors.\n\nHere's an extraction of the relevant information:\n\n**Root cause of vulnerability:**\n\n*   Incorrect initialization of resource in the branch prediction unit for some Intel\u00ae Core\u2122 Ultra Processors.\n*   Incorrect behavior order for some Intel\u00ae Core\u2122 Ultra Processors.\n\n**Weaknesses/vulnerabilities present:**\n\n*   Information Disclosure\n\n**Impact of exploitation:**\n\n*   Potential information disclosure.\n\n**Attack vectors:**\n\n*   Local access (for CVE-2025-24495)\n*   Physical access (for CVE-2025-20012)\n\n**Required attacker capabilities/position:**\n\n*   Authenticated user with local access (CVE-2025-24495)\n*   Unauthenticated user with physical access (CVE-2025-20012)\n\n**Mitigation or fix:**\n\n*   Intel recommends updating to the latest version provided by the system manufacturer that addresses these issues.\n*   Microcode updates are being released to mitigate the vulnerabilities.\n\n**CVSS Scores:**\n\n*   **CVE-2025-24495:**\n    *   CVSS Base Score 3.1: 5.6 (Medium)\n    *   CVSS Vector 3.1: CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N\n    *   CVSS Base Score 4.0: 6.8 (Medium)\n    *   CVSS Vector 4.0: CVSS:4.0/AV:L/AC:H/AT:P/PR:L/UI:N/VC:H/VI:N/VA:N/SC:H/SI:N/SA:N\n*   **CVE-2025-20012:**\n    *   CVSS Base Score 3.1: 4.9 (Medium)\n    *   CVSS Vector 3.1: CVSS:3.1/AV:P/AC:H/PR:N/UI:N/S:C/C:H/I:N/A:N\n    *   CVSS Base Score 4.0: 4.1 (Medium)\n    *   CVSS Vector 4.0: CVSS:4.0/AV:P/AC:H/AT:P/PR:N/UI:N/VC:H/VI:N/VA:N/SC:N/SI:N/SA:N\n\n**Affected Products:**\n\n*   Intel\u00ae Core\u2122 Ultra 5, 7, 9 (Mobile, Desktop, Mobile Embedded) with specific CPU IDs and Platform IDs.\n\n**Additional Details:**\n\nThis content provides more detail than the official CVE description would likely contain, including CVSS scores, affected product details, and specific recommendations. It also acknowledges the researchers who reported the vulnerabilities.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-1419 | Incorrect Initialization of Resource | 0.9 | Class | Primary | Allowed-with-Review |\n| CWE-1342 | Information Exposure through Microarchitectural State after Transient Execution | 0.7 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship influencing my decision is the direct match of the vulnerability description to the definition of **CWE-1419 Incorrect Initialization of Resource**. The vulnerability involves an **incorrect initialization of resource** in the branch prediction unit.\nAlso, since the impact of the vulnerability is information disclosure, **CWE-1342 Information Exposure through Microarchitectural State after Transient Execution** is a possible secondary weakness because transient execution could result in information exposure.\n\n```mermaid\ngraph TD\n    cwe1419[\"CWE-1419: Incorrect Initialization of Resource\"]\n    cwe1342[\"CWE-1342: Information Exposure through Microarchitectural State after Transient Execution\"]\n    \n    cwe1342 -->|RESULTED_FROM| cwe1419\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe1419 primary\n    class cwe1342 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **incorrect initialization of resource** within the branch prediction unit (**CWE-1419**). This leads to a state where sensitive information can be accessed, resulting in potential information disclosure (**CWE-1342**).\n\n## Summary of Analysis\nThe analysis strongly supports classifying the vulnerability as **CWE-1419 Incorrect Initialization of Resource** due to the explicit mention of \"**incorrect initialization of resource** in the branch prediction unit\" in the vulnerability description. This aligns directly with the definition of **CWE-1419**. The resulting impact is **CWE-1342 Information Exposure through Microarchitectural State after Transient Execution**, due to the potential information disclosure.\n**CWE-1419** is the root cause.\n**CWE-1342** is the impact.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-665: Improper Initialization\n**Abstraction Level**: Class\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n## CWE-1342: Information Exposure through Microarchitectural State after Transient Execution\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe processor does not properly clear microarchitectural state after incorrect microcode assists or speculative execution, resulting in transient execution.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-824: Access of Uninitialized Pointer\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product accesses or uses a pointer that has not been initialized.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-1285: Improper Validation of Specified Index, Position, or Offset in Input\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-703: Improper Check or Handling of Exceptional Conditions\n**Abstraction Level**: Pillar\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is extremely high-level, a Pillar.\n\n## CWE-755: Improper Handling of Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product does not handle or incorrectly handles an exceptional condition.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n## CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the product does.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-252: Unchecked Return Value\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-1037: Processor Optimization Removal or Modification of Security-critical Code\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe developer builds a security-critical protection mechanism into the software, but the processor optimizes the execution of the program such that the mechanism is removed or modified.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-173: Improper Handling of Alternate Encoding\n**Abstraction Level**: Variant\n**Similarity Score**: 924.34\n**Source**: sparse\n\n**Description**:\nThe product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\n**Abstraction Level**: Base\n**Similarity Score**: 874.43\n**Source**: sparse\n\n**Description**:\nThe product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-347: Improper Verification of Cryptographic Signature\n**Abstraction Level**: Base\n**Similarity Score**: 864.41\n**Source**: sparse\n\n**Description**:\nThe product does not verify, or incorrectly verifies, the cryptographic signature for data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-611: Improper Restriction of XML External Entity Reference\n**Abstraction Level**: Base\n**Similarity Score**:",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-1419 | Incorrect Initialization of Resource | 0.9 | Class | Primary | Allowed-with-Review |\n| CWE-1342 | Information Exposure through Microarchitectural State after Transient Execution | 0.7 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship influencing my decision is the direct match of the vulnerability description to the definition of **CWE-1419 Incorrect Initialization of Resource**. The vulnerability involves an **incorrect initialization of resource** in the branch prediction unit.\nAlso, since the impact of the vulnerability is information disclosure, **CWE-1342 Information Exposure through Microarchitectural State after Transient Execution** is a possible secondary weakness because transient execution could result in information exposure.\n\n```mermaid\ngraph TD\n    cwe1419[\"CWE-1419: Incorrect Initialization of Resource\"]\n    cwe1342[\"CWE-1342: Information Exposure through Microarchitectural State after Transient Execution\"]\n    \n    cwe1342 -->|RESULTED_FROM| cwe1419\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe1419 primary\n    class cwe1342 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **incorrect initialization of resource** within the branch prediction unit (**CWE-1419**). This leads to a state where sensitive information can be accessed, resulting in potential information disclosure (**CWE-1342**).\n\n## Summary of Analysis\nThe analysis strongly supports classifying the vulnerability as **CWE-1419 Incorrect Initialization of Resource** due to the explicit mention of \"**incorrect initialization of resource** in the branch prediction unit\" in the vulnerability description. This aligns directly with the definition of **CWE-1419**. The resulting impact is **CWE-1342 Information Exposure through Microarchitectural State after Transient Execution**, due to the potential information disclosure.\n**CWE-1419** is the root cause.\n**CWE-1342** is the impact.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-665: Improper Initialization\n**Abstraction Level**: Class\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n## CWE-1342: Information Exposure through Microarchitectural State after Transient Execution\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe processor does not properly clear microarchitectural state after incorrect microcode assists or speculative execution, resulting in transient execution.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-824: Access of Uninitialized Pointer\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product accesses or uses a pointer that has not been initialized.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-1285: Improper Validation of Specified Index, Position, or Offset in Input\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-703: Improper Check or Handling of Exceptional Conditions\n**Abstraction Level**: Pillar\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is extremely high-level, a Pillar.\n\n## CWE-755: Improper Handling of Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product does not handle or incorrectly handles an exceptional condition.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n## CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the product does.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-252: Unchecked Return Value\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-1037: Processor Optimization Removal or Modification of Security-critical Code\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe developer builds a security-critical protection mechanism into the software, but the processor optimizes the execution of the program such that the mechanism is removed or modified.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-173: Improper Handling of Alternate Encoding\n**Abstraction Level**: Variant\n**Similarity Score**: 924.34\n**Source**: sparse\n\n**Description**:\nThe product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\n**Abstraction Level**: Base\n**Similarity Score**: 874.43\n**Source**: sparse\n\n**Description**:\nThe product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-347: Improper Verification of Cryptographic Signature\n**Abstraction Level**: Base\n**Similarity Score**: 864.41\n**Source**: sparse\n\n**Description**:\nThe product does not verify, or incorrectly verifies, the cryptographic signature for data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-611: Improper Restriction of XML External Entity Reference\n**Abstraction Level**: Base\n**Similarity Score**:\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-1419:**\n- 1419 (Incorrect Initialization of Resource) - ROOT\n\n\n**Chain starting from CWE-611:**\n- 611 (Improper Restriction of XML External Entity Reference) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "691",
        "name": "Insufficient Control Flow Management",
        "source": "sparse"
      },
      "similarity": 240.42087337921288
    },
    {
      "metadata": {
        "doc_id": "453",
        "name": "Insecure Default Variable Initialization",
        "source": "sparse"
      },
      "similarity": 225.29957180326068
    },
    {
      "metadata": {
        "doc_id": "1037",
        "name": "Processor Optimization Removal or Modification of Security-critical Code",
        "source": "sparse"
      },
      "similarity": 204.4027590683948
    },
    {
      "metadata": {
        "doc_id": "693",
        "name": "Protection Mechanism Failure",
        "source": "sparse"
      },
      "similarity": 197.51398911352362
    },
    {
      "metadata": {
        "doc_id": "284",
        "name": "Improper Access Control",
        "source": "sparse"
      },
      "similarity": 193.39093372636654
    },
    {
      "metadata": {
        "doc_id": "248",
        "name": "Uncaught Exception",
        "source": "sparse"
      },
      "similarity": 193.15794121868117
    },
    {
      "metadata": {
        "doc_id": "277",
        "name": "Insecure Inherited Permissions",
        "source": "sparse"
      },
      "similarity": 180.47481914638465
    },
    {
      "metadata": {
        "doc_id": "1342",
        "name": "Information Exposure through Microarchitectural State after Transient Execution",
        "source": "sparse"
      },
      "similarity": 178.76607934112192
    },
    {
      "metadata": {
        "doc_id": "1419",
        "name": "Incorrect Initialization of Resource",
        "type": "Class",
        "original_content": "The product attempts to initialize a resource but does not correctly do so, which might leave the resource in an unexpected, incorrect, or insecure state when it is accessed.",
        "keyphrase_source": "rootcause:incorrect initialization of resource",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
          "comments": "Examine children of this entry to see if there is a better fit",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.6250706205739479
          }
        }
      },
      "similarity": 0.6250706205739479
    },
    {
      "doc_id": "1423",
      "text": "Shared microarchitectural predictor state may allow code to influence\n\t\t\t\ttransient execution across a hardware boundary, potentially exposing\n\t\t\t\tdata that is accessible beyond the boundary over a covert channel.\n\t\t\t",
      "score": 0.6611211906580663,
      "metadata": {
        "doc_id": "1423",
        "name": "Exposure of Sensitive Information caused by Shared Microarchitectural Predictor State that Influences Transient Execution",
        "type": "Base",
        "extended_description": "\n\nMany commodity processors have Instruction Set Architecture (ISA) features that protect software components from one another. These features can include memory segmentation, virtual memory, privilege rings, trusted execution environments, and virtual machines, among others. For example, virtual memory provides each process with its own address space, which prevents processes from accessing each other's private data. Many of these features can be used to form hardware-enforced security boundaries between software components.\n\n\nWhen separate software components (for example, two processes) share microarchitectural predictor state across a hardware boundary, code in one component may be able to influence microarchitectural predictor behavior in another component. If the predictor can cause transient execution, the shared predictor state may allow an attacker to influence transient execution in a victim, and in a manner that could allow the attacker to infer private data from the victim by monitoring observable discrepancies (CWE-203) in a covert channel [REF-1400].\n\n\nPredictor state may be shared when the processor transitions from one component to another (for example, when a process makes a system call to enter the kernel). Many commodity processors have features which prevent microarchitectural predictions that occur before a boundary from influencing predictions that occur after the boundary.\n\n\nPredictor state may also be shared between hardware threads, for example, sibling hardware threads on a processor that supports simultaneous multithreading (SMT). This sharing may be benign if the hardware threads are simultaneously executing in the same software component, or it could expose a weakness if one sibling is a malicious software component, and the other sibling is a victim software component. Processors that share microarchitectural predictors between hardware threads may have features which prevent microarchitectural predictions that occur on one hardware thread from influencing predictions that occur on another hardware thread.\n\n\nFeatures that restrict predictor state sharing across transitions or between hardware threads may be always-on, on by default, or may require opt-in from software.\n",
        "alternate_terms": [],
        "original_content": "Shared microarchitectural predictor state may allow code to influence\n\t\t\t\ttransient execution across a hardware boundary, potentially exposing\n\t\t\t\tdata that is accessible beyond the boundary over a covert channel.\n\t\t\t",
        "relationships": [
          {
            "source_id": "1423",
            "target_id": "1420",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1194"
            }
          },
          {
            "source_id": "1423",
            "target_id": "1420",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1420",
            "target_id": "1423",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "source": "graph",
        "sources": [
          "vector",
          "graph"
        ],
        "vector_score": 0.6611211906580663,
        "graph_score": 2.3998000000000004,
        "score_components": {
          "relationship_chain": 0.24,
          "explicit_mention": 1.0,
          "abstraction_path": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "1421",
                  "1420",
                  "CHILDOF"
                ],
                [
                  "1420",
                  "1423",
                  "PARENTOF"
                ]
              ],
              "score": 0.24,
              "type": "relationship_chain",
              "source": "1421"
            }
          }
        },
        "is_explicit": true,
        "abstraction_level": "base",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities",
          "comments": "Use only when the weakness allows code in one processor context to influence the predictions of code in another processor context via predictor state that is shared between the two contexts. For example, Branch Target Injection, an instance of CWE-1423, can be mitigated by tagging each indirect branch predictor entry according to the processor context in which the entry was created, thus preventing entries created in one context from being used in a different context. However, the mitigated indirect branch predictor can still expose different weaknesses where malicious predictor entries created in one context are used later in the same context (context tags cannot prevent this). One such example is Intra-mode Branch Target Injection. Weaknesses of this sort can map to CWE-1420.",
          "reasons": [
            "Acceptable-Use"
          ],
          "suggestions": [
            {
              "CweID": "1420",
              "Comment": "If a weakness involves a microarchitectural predictor whose state is not shared across processor contexts, then CWE-1420 may be more appropriate for the mapping task."
            }
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.6185575170840651,
            "graph": 1.704328476263227
          }
        }
      },
      "similarity": 1.704328476263227
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-1419",
      "CWE-611",
      "CWE-497",
      "CWE-173",
      "CWE-22",
      "CWE-667",
      "CWE-1285",
      "CWE-1342",
      "CWE-347",
      "CWE-1037",
      "CWE-755",
      "CWE-824",
      "CWE-252",
      "CWE-703",
      "CWE-665"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}