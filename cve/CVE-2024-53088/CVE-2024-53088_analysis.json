{
  "cve_id": "CVE-2024-53088",
  "description": "In the Linux kernel, the following vulnerability has been resolved i40e fix **race condition** by adding filters intermediate sync state Fix a **race condition** in the i40e driver that leads to MAC/VLAN filters becoming corrupted and leaking. Address the issue that occurs under heavy load when multiple threads are concurrently modifying MAC/VLAN filters by setting mac and port VLAN. 1. Thread T0 allocates a filter in i40e_add_filter() within i40e_ndo_set_vf_port_vlan(). 2. Thread T1 concurrently frees the filter in __i40e_del_filter() within i40e_ndo_set_vf_mac(). 3. Subsequently, i40e_service_task() calls i40e_sync_vsi_filters(), which refers to the already freed filter memory, causing corruption. Reproduction steps 1. Spawn multiple VFs. 2. Apply a concurrent heavy load by running parallel operations to change MAC addresses on the VFs and change port VLANs on the host. 3. Observe errors in dmesg Error I40E_AQ_RC_ENOSPC adding RX filters on VF XX, please set promiscuous on manually for VF XX. Exact code for stable reproduction Intel cant open-source now. The fix involves implementing a new intermediate filter state, I40E_FILTER_NEW_SYNC, for the time when a filter is on a tmp_add_list. These filters cannot be deleted from the hash list directly but must be removed using the full process.",
  "key_phrases": {
    "rootcause": "race condition",
    "weakness": "",
    "impact": "MAC/VLAN filters becoming corrupted and leaking",
    "vector": "multiple threads concurrently modifying MAC/VLAN filters",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": "i40e driver"
  },
  "reference_content": "Based on the provided content, here's a breakdown of the vulnerability:\n\n**Root Cause:**\nThe vulnerability is caused by a race condition in the i40e driver when handling MAC/VLAN filter modifications. Specifically, it occurs when multiple threads concurrently try to modify these filters.\n\n**Weaknesses/Vulnerabilities Present:**\n- **Race Condition:** Concurrent modification of MAC/VLAN filters without proper synchronization leads to data corruption.\n- **Use-After-Free:** A filter can be freed by one thread while another thread is still referencing it, leading to a use-after-free vulnerability.\n\n**Impact of Exploitation:**\n- **Filter Corruption:** MAC/VLAN filters become corrupted.\n- **Filter Leaking:**  Corrupted filters can leak, potentially exposing network traffic.\n- **RX Filter Errors:** The system logs errors indicating issues with adding RX filters, and suggests setting promiscuous mode manually on affected VFs.\n\n**Attack Vectors:**\n- **Concurrent Operations:** The attack involves triggering concurrent modifications of MAC/VLAN filters. This occurs when multiple threads are setting MAC addresses on Virtual Functions (VFs) and changing port VLANs on the host simultaneously.\n\n**Required Attacker Capabilities/Position:**\n- **Multiple VFs:**  The attacker needs to be able to spawn multiple Virtual Functions (VFs).\n- **Control over VF MAC Addresses:** The attacker needs to be able to change MAC addresses on the spawned VFs.\n- **Control over Host VLANs:** The attacker needs to be able to change port VLANs on the host.\n- **Heavy Load:** The attacker needs to generate a heavy load by running these operations in parallel to expose the race condition.\n\n**Technical Details:**\n- The vulnerability occurs when:\n    - Thread T0 allocates a filter in `i40e_add_filter()` within `i40e_ndo_set_vf_port_vlan()`.\n    - Thread T1 concurrently frees the filter in `__i40e_del_filter()` within `i40e_ndo_set_vf_mac()`.\n    - Subsequently, `i40e_service_task()` calls `i40e_sync_vsi_filters()`, which then tries to access the freed filter memory, leading to corruption.\n\n**Fix:**\nThe fix introduces a new intermediate filter state, `I40E_FILTER_NEW_SYNC`. When a filter is in the process of being added and is present on the temporary list (`tmp_add_list`), it will be set to this new state, preventing premature deletion.  Filters in this state can only be removed by the full synchronization process.\n\nThis information is more detailed than a typical CVE description, providing specific function names and a clear explanation of the race condition.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.9 | Class | Allowed-with-Review | Primary CWE: The core issue is a **race condition** due to concurrent access to shared resources. |\n| CWE-416 | Use After Free | 0.7 | Base | Allowed | Secondary: The race condition leads to a use-after-free vulnerability when a filter is freed by one thread while another thread is still referencing it. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship is that CWE-416 Use After Free can be a consequence of CWE-362 Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'). CWE-362 is a Class, while CWE-416 is a Base. While CWE-367 Time-of-check Time-of-use (TOCTOU) Race Condition is related to CWE-362, the vulnerability description doesn't explicitly mention a TOCTOU condition, making CWE-362 a more appropriate fit.\n\n```mermaid\ngraph TD\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    cwe416[\"CWE-416: Use After Free\"]\n    \n    cwe416 -->|CANFOLLOW| cwe362\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe362 primary\n    class cwe416 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a **race condition** (CWE-362) that leads to a use-after-free vulnerability (CWE-416).\n\n1.  **Race Condition (CWE-362):** Multiple threads concurrently modify MAC/VLAN filters without proper synchronization.\n2.  **Use-After-Free (CWE-416):** A filter is freed by one thread while another thread is still referencing it.\n3.  **Corruption and Leaking:** The use-after-free results in corrupted MAC/VLAN filters and potential data leakage.\n\n## Summary of Analysis\nThe analysis is based on the provided vulnerability description and CVE reference content summary. The core of the vulnerability is a **race condition** (CWE-362) in the i40e driver, where multiple threads concurrently modify MAC/VLAN filters. This leads to a use-after-free condition (CWE-416) because one thread can free a filter while another thread is still referencing it.\n\nThe evidence is strong, with clear descriptions of the **race condition**, the involved components (i40e driver), and the resulting filter corruption and leaking.\n\nThe relationship analysis shows that CWE-416 is a consequence of CWE-362, fitting the vulnerability chain pattern.\n\nThe selection of CWE-362 and CWE-416 is based on the provided evidence, relationship analysis, and the abstraction levels of the CWEs. CWE-362 is selected as the primary CWE because it represents the root cause of the vulnerability and is one of the top hits in the Retriever Results. CWE-416 is chosen as a secondary CWE because it represents a direct consequence of the **race condition**, as outlined in the vulnerability description.\n\nCWE-367 Time-of-check Time-of-use (TOCTOU) Race Condition was considered but not selected because, while related to race conditions, the vulnerability description doesn't explicitly mention a TOCTOU condition. Similarly, CWE-667 Improper Locking was considered but not selected because the description doesn't explicitly state that the **race condition** is caused by improper locking.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.78\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\n**Abstraction Level**: Base\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nThe product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-366: Race Condition within a Thread\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nIf two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-755: Improper Handling of Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not handle or incorrectly handles an exceptional condition.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n## CWE-696: Incorrect Behavior Order\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product performs multiple related behaviors, but the behaviors are performed in the wrong order in ways which may produce resultant weaknesses.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-824: Access of Uninitialized Pointer\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product accesses or uses a pointer that has not been initialized.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-1285: Improper Validation of Specified Index, Position, or Offset in Input\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product allocates or initializes a resource such as a pointer, object, or variable using one type, but it later accesses that resource using a type that is incompatible with the original type.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-754: Improper Check for Unusual or Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.9 | Class | Allowed-with-Review | Primary CWE: The core issue is a **race condition** due to concurrent access to shared resources. |\n| CWE-416 | Use After Free | 0.7 | Base | Allowed | Secondary: The race condition leads to a use-after-free vulnerability when a filter is freed by one thread while another thread is still referencing it. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship is that CWE-416 Use After Free can be a consequence of CWE-362 Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'). CWE-362 is a Class, while CWE-416 is a Base. While CWE-367 Time-of-check Time-of-use (TOCTOU) Race Condition is related to CWE-362, the vulnerability description doesn't explicitly mention a TOCTOU condition, making CWE-362 a more appropriate fit.\n\n```mermaid\ngraph TD\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    cwe416[\"CWE-416: Use After Free\"]\n    \n    cwe416 -->|CANFOLLOW| cwe362\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe362 primary\n    class cwe416 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a **race condition** (CWE-362) that leads to a use-after-free vulnerability (CWE-416).\n\n1.  **Race Condition (CWE-362):** Multiple threads concurrently modify MAC/VLAN filters without proper synchronization.\n2.  **Use-After-Free (CWE-416):** A filter is freed by one thread while another thread is still referencing it.\n3.  **Corruption and Leaking:** The use-after-free results in corrupted MAC/VLAN filters and potential data leakage.\n\n## Summary of Analysis\nThe analysis is based on the provided vulnerability description and CVE reference content summary. The core of the vulnerability is a **race condition** (CWE-362) in the i40e driver, where multiple threads concurrently modify MAC/VLAN filters. This leads to a use-after-free condition (CWE-416) because one thread can free a filter while another thread is still referencing it.\n\nThe evidence is strong, with clear descriptions of the **race condition**, the involved components (i40e driver), and the resulting filter corruption and leaking.\n\nThe relationship analysis shows that CWE-416 is a consequence of CWE-362, fitting the vulnerability chain pattern.\n\nThe selection of CWE-362 and CWE-416 is based on the provided evidence, relationship analysis, and the abstraction levels of the CWEs. CWE-362 is selected as the primary CWE because it represents the root cause of the vulnerability and is one of the top hits in the Retriever Results. CWE-416 is chosen as a secondary CWE because it represents a direct consequence of the **race condition**, as outlined in the vulnerability description.\n\nCWE-367 Time-of-check Time-of-use (TOCTOU) Race Condition was considered but not selected because, while related to race conditions, the vulnerability description doesn't explicitly mention a TOCTOU condition. Similarly, CWE-667 Improper Locking was considered but not selected because the description doesn't explicitly state that the **race condition** is caused by improper locking.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.78\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\n**Abstraction Level**: Base\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nThe product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-366: Race Condition within a Thread\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nIf two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-755: Improper Handling of Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not handle or incorrectly handles an exceptional condition.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n## CWE-696: Incorrect Behavior Order\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product performs multiple related behaviors, but the behaviors are performed in the wrong order in ways which may produce resultant weaknesses.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-824: Access of Uninitialized Pointer\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product accesses or uses a pointer that has not been initialized.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-1285: Improper Validation of Specified Index, Position, or Offset in Input\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product allocates or initializes a resource such as a pointer, object, or variable using one type, but it later accesses that resource using a type that is incompatible with the original type.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-754: Improper Check for Unusual or Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-416:**\n- 416 (Use After Free) - ROOT\n\n\n**Chain starting from CWE-667:**\n- 667 (Improper Locking) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Race Condition",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "367",
        "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
        "source": "sparse"
      },
      "similarity": 875.235410311437
    },
    {
      "metadata": {
        "doc_id": "667",
        "name": "Improper Locking",
        "source": "sparse"
      },
      "similarity": 872.3691365112509
    },
    {
      "metadata": {
        "doc_id": "364",
        "name": "Signal Handler Race Condition",
        "source": "sparse"
      },
      "similarity": 855.6223444906339
    },
    {
      "metadata": {
        "doc_id": "184",
        "name": "Incomplete List of Disallowed Inputs",
        "source": "sparse"
      },
      "similarity": 828.5914665387224
    },
    {
      "metadata": {
        "doc_id": "833",
        "name": "Deadlock",
        "source": "sparse"
      },
      "similarity": 757.9508194257483
    },
    {
      "metadata": {
        "doc_id": "754",
        "name": "Improper Check for Unusual or Exceptional Conditions",
        "source": "sparse"
      },
      "similarity": 751.4374613822981
    },
    {
      "metadata": {
        "doc_id": "401",
        "name": "Missing Release of Memory after Effective Lifetime",
        "source": "sparse"
      },
      "similarity": 745.276121050034
    },
    {
      "metadata": {
        "doc_id": "1331",
        "name": "Improper Isolation of Shared Resources in Network On Chip (NoC)",
        "type": "Base",
        "original_content": "The Network On Chip (NoC) does not isolate or incorrectly isolates its on-chip-fabric and internal resources such that they are shared between trusted and untrusted agents, creating timing channels.",
        "keyphrase_source": "rootcause:race condition",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.4769558098877019
          }
        }
      },
      "similarity": 0.4769558098877019
    },
    {
      "doc_id": "609",
      "text": "CWE-609: Double-Checked Locking",
      "score": 2.8651999999999997,
      "metadata": {
        "doc_id": "609",
        "name": "Double-Checked Locking",
        "type": "base",
        "original_content": "CWE-609: Double-Checked Locking",
        "relationships": [
          {
            "source_id": "609",
            "target_id": "367",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "609",
            "target_id": "667",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "667",
            "target_id": "609",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "367",
            "target_id": "609",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "abstraction_path": 0.7200000000000001,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "367",
                  "609",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "367"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "667",
                  "609",
                  "PARENTOF"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "abstraction_path_down",
              "source": "667"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "367",
                  "609",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "367"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "609",
                  "367",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "367"
            }
          }
        },
        "abstraction_level": "base",
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.8651999999999997
          }
        }
      },
      "similarity": 2.8651999999999997
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-416",
      "CWE-667",
      "CWE-1285",
      "CWE-843",
      "CWE-696",
      "CWE-362",
      "CWE-755",
      "CWE-824",
      "CWE-366",
      "CWE-367",
      "CWE-754"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}