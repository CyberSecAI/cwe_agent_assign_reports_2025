{
  "query": "In the Linux kernel, the following vulnerability has been resolved bpf Avoid uninitialized value in BPF_CORE_READ_BITFIELD [Changes from V1 - Use a default branch in the switch statement to initialize `val.] GCC warns that `val may be used uninitialized in the BPF_CRE_READ_BITFIELD macro, defined in bpf_core_read.h as [...] unsigned long long val \\ [...] \\ switch (__CORE_RELO(s, field, BYTE_SIZE)) { \\ case 1 val = *(const unsigned char *)p break \\ case 2 val = *(const unsigned short *)p break \\ case 4 val = *(const unsigned int *)p break \\ case 8 val = *(const unsigned long long *)p break \\ } \\ [...] val \\ } \\ This patch adds a default entry in the switch statement that sets `val to zero in order to avoid the warning, and random values to be used in case __builtin_preserve_field_info returns unexpected values for BPF_FIELD_BYTE_SIZE. Tested in bpf-next master. No regressions.",
  "count": 11,
  "results": [
    {
      "cwe_id": "908",
      "name": "Use of Uninitialized Resource",
      "abstraction": "Base",
      "score": 599.700717772974,
      "original_score": 599.700717772974,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "681",
      "name": "Incorrect Conversion between Numeric Types",
      "abstraction": "Base",
      "score": 568.1577255981236,
      "original_score": 568.1577255981236,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "abstraction": "Base",
      "score": 566.2967608525654,
      "original_score": 566.2967608525654,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "abstraction": "Base",
      "score": 564.91292342155,
      "original_score": 564.91292342155,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "191",
      "name": "Integer Underflow (Wrap or Wraparound)",
      "abstraction": "Base",
      "score": 554.8165940398969,
      "original_score": 554.8165940398969,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "197",
      "name": "Numeric Truncation Error",
      "abstraction": "Base",
      "score": 543.9680518116882,
      "original_score": 543.9680518116882,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "909",
      "name": "Missing Initialization of Resource",
      "abstraction": "Class",
      "score": 520.9904109790511,
      "original_score": 520.9904109790511,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "194",
      "name": "Unexpected Sign Extension",
      "abstraction": "Variant",
      "score": 516.0430513461109,
      "original_score": 516.0430513461109,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "457",
      "name": "Use of Uninitialized Variable",
      "abstraction": "Variant",
      "score": 511.5240033632392,
      "original_score": 511.5240033632392,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "327",
      "name": "Use of a Broken or Risky Cryptographic Algorithm",
      "abstraction": "Class",
      "score": 498.92417554870576,
      "original_score": 498.92417554870576,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "789",
      "name": "Memory Allocation with Excessive Size Value",
      "abstraction": "Variant",
      "score": 161.90634236525716,
      "original_score": 161.90634236525716,
      "mapping_usage": "Allowed"
    }
  ],
  "statistics": {
    "min": 161.90634236525716,
    "max": 599.700717772974,
    "mean": 509.74915973628737,
    "median": 543.9680518116882,
    "count": 11
  }
}