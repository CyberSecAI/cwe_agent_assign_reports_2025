{
  "method": "sparse_base",
  "query": "In the Linux kernel, the following vulnerability has been resolved bpf Avoid uninitialized value in BPF_CORE_READ_BITFIELD [Changes from V1 - Use a default branch in the switch statement to initialize `val.] GCC warns that `val may be used uninitialized in the BPF_CRE_READ_BITFIELD macro, defined in bpf_core_read.h as [...] unsigned long long val \\ [...] \\ switch (__CORE_RELO(s, field, BYTE_SIZE)) { \\ case 1 val = *(const unsigned char *)p break \\ case 2 val = *(const unsigned short *)p break \\ case 4 val = *(const unsigned int *)p break \\ case 8 val = *(const unsigned long long *)p break \\ } \\ [...] val \\ } \\ This patch adds a default entry in the switch statement that sets `val to zero in order to avoid the warning, and random values to be used in case __builtin_preserve_field_info returns unexpected values for BPF_FIELD_BYTE_SIZE. Tested in bpf-next master. No regressions.",
  "keyphrases": {
    "base_query": "In the Linux kernel, the following vulnerability has been resolved bpf Avoid uninitialized value in BPF_CORE_READ_BITFIELD [Changes from V1 - Use a default branch in the switch statement to initialize `val.] GCC warns that `val may be used uninitialized in the BPF_CRE_READ_BITFIELD macro, defined in bpf_core_read.h as [...] unsigned long long val \\ [...] \\ switch (__CORE_RELO(s, field, BYTE_SIZE)) { \\ case 1 val = *(const unsigned char *)p break \\ case 2 val = *(const unsigned short *)p break \\ case 4 val = *(const unsigned int *)p break \\ case 8 val = *(const unsigned long long *)p break \\ } \\ [...] val \\ } \\ This patch adds a default entry in the switch statement that sets `val to zero in order to avoid the warning, and random values to be used in case __builtin_preserve_field_info returns unexpected values for BPF_FIELD_BYTE_SIZE. Tested in bpf-next master. No regressions."
  },
  "timestamp": "2025-07-13T13:47:17.976582",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "908",
      "name": "Use of Uninitialized Resource",
      "score": 191.09749938326328
    },
    {
      "doc_id": "681",
      "name": "Incorrect Conversion between Numeric Types",
      "score": 186.84246614568565
    },
    {
      "doc_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 186.35453237971473
    },
    {
      "doc_id": "191",
      "name": "Integer Underflow (Wrap or Wraparound)",
      "score": 183.15404401950818
    },
    {
      "doc_id": "476",
      "name": "NULL Pointer Dereference",
      "score": 182.03871499612913
    }
  ]
}