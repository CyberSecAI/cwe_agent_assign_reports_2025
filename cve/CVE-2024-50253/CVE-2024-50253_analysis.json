{
  "cve_id": "CVE-2024-50253",
  "description": "In the Linux kernel, the following vulnerability has been resolved bpf Check the validity of nr_words in bpf_iter_bits_new() Check the validity of nr_words in bpf_iter_bits_new(). Without this check, when multiplication **overflow** occurs for nr_bits (e.g., when nr_words = 0x0400-0001, nr_bits becomes 64), **stack corruption** may occur due to bpf_probe_read_kernel_common(..., nr_bytes = 0x2000-0008). Fix it by limiting the maximum value of nr_words to 511. The value is derived from the current implementation of BPF memory allocator. To ensure compatibility if the BPF memory allocators size limitation changes in the future, use the helper bpf_mem_alloc_check_size() to check whether nr_bytes is too larger. And return -E2BIG instead of -ENOMEM for oversized nr_bytes.",
  "key_phrases": {
    "rootcause": "multiplication overflow in nr_bits",
    "weakness": [
      "overflow",
      "stack corruption"
    ],
    "impact": "",
    "vector": "bpf_probe_read_kernel_common",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": ""
  },
  "reference_content": "The provided content relates to CVE-2024-50253.\n\n**Root cause of vulnerability:**\nThe vulnerability arises from a missing check on the `nr_words` parameter in the `bpf_iter_bits_new()` function. When `nr_words` is excessively large, a multiplication overflow can occur during the calculation of `nr_bits`, which in turn leads to an out-of-bounds read in `bpf_probe_read_kernel_common()` due to a very large value of `nr_bytes`.\n\n**Weaknesses/vulnerabilities present:**\n- Integer overflow: Lack of input validation on `nr_words` leads to potential integer overflow during calculation of `nr_bits`\n- Out-of-bounds read: The calculated large `nr_bytes` value results in a `bpf_probe_read_kernel_common` read outside the intended memory area, potentially causing a crash.\n\n**Impact of exploitation:**\n- Stack corruption: Due to the out-of-bounds read, stack corruption may occur.\n- Kernel crash: The incorrect memory access can lead to a kernel crash.\n\n**Attack vectors:**\n- BPF programs: A malicious BPF program can pass an oversized `nr_words` value to `bpf_iter_bits_new()`, triggering the vulnerability.\n\n**Required attacker capabilities/position:**\n- The attacker needs the ability to load and execute BPF programs on the target system.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-190 | Integer Overflow or Wraparound | 1.0 | Base | Primary | Allowed |\n| CWE-1284 | Improper Validation of Specified Quantity in Input | 0.7 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.85\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship identified is that CWE-190 is a specific type of calculation error. The vulnerability description explicitly mentions \"multiplication **overflow**\" which directly aligns with CWE-190. CWE-1284 is included as a secondary weakness because the **overflow** could have been prevented with proper input validation. The relationship between CWE-190 and CWE-1284 is that **improper** validation can lead to conditions where an integer **overflow** occurs.\n\n```mermaid\ngraph TD\n    cwe190[\"CWE-190: Integer Overflow or Wraparound\"]\n    cwe1284[\"CWE-1284: Improper Validation of Specified Quantity in Input\"]\n\n    cwe190 -- CANPRECEDE --> cwe1284\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe190 primary\n    class cwe1284 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with the **integer overflow** (CWE-190) in the calculation of `nr_bits`. This leads to a buffer overflow when `bpf_probe_read_kernel_common` is called with an **incorrect** `nr_bytes` value, ultimately resulting in **stack corruption**. A contributing factor is the **lack of** validation of `nr_words` (CWE-1284).\n\n## Summary of Analysis\nThe analysis is based on the provided vulnerability description, which highlights an **integer overflow** during a multiplication operation and subsequent **stack corruption**. The description explicitly mentions a **missing** check for the validity of `nr_words`, which could have prevented the **overflow**.\n\nThe selection of CWE-190 is based on the direct reference to \"multiplication **overflow**\". The inclusion of CWE-1284 is based on the **lack of** input validation, which contributed to the vulnerability. These CWEs are at the Base level of abstraction, which is the preferred level.\n\nThe provided evidence strongly supports the classification of CWE-190 as the primary weakness due to the explicit mention of \"**overflow**\". The secondary classification of CWE-1284 is also supported by the text, which indicates the **lack of** validation.\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-191: Integer Underflow (Wrap or Wraparound)\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Reason for not selecting*: The vulnerability description mentions **overflow**, not underflow.\n\n## CWE-131: Incorrect Calculation of Buffer Size\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Reason for not selecting*: While the **incorrect** calculation of `nr_bits` leads to **stack corruption**, the root cause is the **integer overflow**, not the buffer size calculation itself.\n\n## CWE-682: Incorrect Calculation\n**Abstraction Level**: Pillar\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product performs a calculation that generates incorrect or unintended results that are later used in security-critical decisions or resource management.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is extremely high-level, a Pillar. In many cases, lower-level children or descendants are more appropriate. However, sometimes this weakness is forced to be used due to the lack of in-depth weakness research. See Research Gaps.\n\n*Reason for not selecting*: CWE-682 is a high-level category. CWE-190, Integer **Overflow** or Wraparound, is a more specific and appropriate choice.\n\n## CWE-824: Access of Uninitialized Pointer\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product accesses or uses a pointer that has not been initialized.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Reason for not selecting*: The vulnerability description does not mention anything about uninitialized pointers.\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*Reason for not selecting*: The vulnerability description does not mention anything about improper locking.\n\n## CWE-703: Improper Check or Handling of Exceptional Conditions\n**Abstraction Level**: Pillar\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is extremely high-level, a Pillar.\n\n*Reason for not selecting*: The vulnerability description focuses on an **integer overflow** and **lack of** input validation, making CWE-190 and CWE-1284 more suitable.\n\n## CWE-1285: Improper Validation of Specified Index, Position, or Offset in Input\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Reason for not selecting*: While validation is a factor, the specific issue is related to quantity, not index, position or offset.\n\n## CWE-252: Unchecked Return Value\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Reason for not selecting*: The vulnerability description does not mention anything about unchecked return values.\n\n## CWE-681: Incorrect Conversion between Numeric Types\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nWhen converting from one data type to another, such as long to integer, data can be omitted or translated in a way that produces unexpected values. If the resulting values are used in a sensitive context, then dangerous behaviors may occur.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Reason for not selecting*: The vulnerability description does not explicitly indicate an **incorrect** conversion between numeric types.\n\n## CWE-754: Improper Check for Unusual or Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*Reason for not selecting*: The root cause is the **integer overflow** due to the **lack of** input validation.\n\n## CWE-19",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-190 | Integer Overflow or Wraparound | 1.0 | Base | Primary | Allowed |\n| CWE-1284 | Improper Validation of Specified Quantity in Input | 0.7 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.85\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship identified is that CWE-190 is a specific type of calculation error. The vulnerability description explicitly mentions \"multiplication **overflow**\" which directly aligns with CWE-190. CWE-1284 is included as a secondary weakness because the **overflow** could have been prevented with proper input validation. The relationship between CWE-190 and CWE-1284 is that **improper** validation can lead to conditions where an integer **overflow** occurs.\n\n```mermaid\ngraph TD\n    cwe190[\"CWE-190: Integer Overflow or Wraparound\"]\n    cwe1284[\"CWE-1284: Improper Validation of Specified Quantity in Input\"]\n\n    cwe190 -- CANPRECEDE --> cwe1284\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe190 primary\n    class cwe1284 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with the **integer overflow** (CWE-190) in the calculation of `nr_bits`. This leads to a buffer overflow when `bpf_probe_read_kernel_common` is called with an **incorrect** `nr_bytes` value, ultimately resulting in **stack corruption**. A contributing factor is the **lack of** validation of `nr_words` (CWE-1284).\n\n## Summary of Analysis\nThe analysis is based on the provided vulnerability description, which highlights an **integer overflow** during a multiplication operation and subsequent **stack corruption**. The description explicitly mentions a **missing** check for the validity of `nr_words`, which could have prevented the **overflow**.\n\nThe selection of CWE-190 is based on the direct reference to \"multiplication **overflow**\". The inclusion of CWE-1284 is based on the **lack of** input validation, which contributed to the vulnerability. These CWEs are at the Base level of abstraction, which is the preferred level.\n\nThe provided evidence strongly supports the classification of CWE-190 as the primary weakness due to the explicit mention of \"**overflow**\". The secondary classification of CWE-1284 is also supported by the text, which indicates the **lack of** validation.\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-191: Integer Underflow (Wrap or Wraparound)\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Reason for not selecting*: The vulnerability description mentions **overflow**, not underflow.\n\n## CWE-131: Incorrect Calculation of Buffer Size\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Reason for not selecting*: While the **incorrect** calculation of `nr_bits` leads to **stack corruption**, the root cause is the **integer overflow**, not the buffer size calculation itself.\n\n## CWE-682: Incorrect Calculation\n**Abstraction Level**: Pillar\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product performs a calculation that generates incorrect or unintended results that are later used in security-critical decisions or resource management.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is extremely high-level, a Pillar. In many cases, lower-level children or descendants are more appropriate. However, sometimes this weakness is forced to be used due to the lack of in-depth weakness research. See Research Gaps.\n\n*Reason for not selecting*: CWE-682 is a high-level category. CWE-190, Integer **Overflow** or Wraparound, is a more specific and appropriate choice.\n\n## CWE-824: Access of Uninitialized Pointer\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product accesses or uses a pointer that has not been initialized.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Reason for not selecting*: The vulnerability description does not mention anything about uninitialized pointers.\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*Reason for not selecting*: The vulnerability description does not mention anything about improper locking.\n\n## CWE-703: Improper Check or Handling of Exceptional Conditions\n**Abstraction Level**: Pillar\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is extremely high-level, a Pillar.\n\n*Reason for not selecting*: The vulnerability description focuses on an **integer overflow** and **lack of** input validation, making CWE-190 and CWE-1284 more suitable.\n\n## CWE-1285: Improper Validation of Specified Index, Position, or Offset in Input\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Reason for not selecting*: While validation is a factor, the specific issue is related to quantity, not index, position or offset.\n\n## CWE-252: Unchecked Return Value\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Reason for not selecting*: The vulnerability description does not mention anything about unchecked return values.\n\n## CWE-681: Incorrect Conversion between Numeric Types\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nWhen converting from one data type to another, such as long to integer, data can be omitted or translated in a way that produces unexpected values. If the resulting values are used in a sensitive context, then dangerous behaviors may occur.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Reason for not selecting*: The vulnerability description does not explicitly indicate an **incorrect** conversion between numeric types.\n\n## CWE-754: Improper Check for Unusual or Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*Reason for not selecting*: The root cause is the **integer overflow** due to the **lack of** input validation.\n\n## CWE-19\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-1284:**\n- 1284 (Improper Validation of Specified Quantity in Input) - ROOT\n\n\n**Chain starting from CWE-681:**\n- 681 (Incorrect Conversion between Numeric Types) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "190",
        "name": "Integer Overflow or Wraparound",
        "source": "sparse",
        "original_content": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number.",
        "keyphrase_sources": [
          {
            "id": "rootcause:multiplication overflow in nr_bits",
            "keyphrase": "multiplication overflow in nr_bits",
            "type": "rootcause"
          },
          {
            "id": "weakness:overflow",
            "keyphrase": "overflow",
            "type": "weakness"
          },
          {
            "id": "weakness:stack corruption",
            "keyphrase": "stack corruption",
            "type": "weakness"
          },
          {
            "id": "vector:bpf_probe_read_kernel_common",
            "keyphrase": "bpf_probe_read_kernel_common",
            "type": "vector"
          },
          {
            "id": "product:Linux kernel",
            "keyphrase": "Linux kernel",
            "type": "product"
          }
        ]
      },
      "similarity": 617.6747121236486
    },
    {
      "metadata": {
        "doc_id": "197",
        "name": "Numeric Truncation Error",
        "source": "sparse",
        "original_content": "Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion.",
        "keyphrase_sources": [
          {
            "id": "rootcause:multiplication overflow in nr_bits",
            "keyphrase": "multiplication overflow in nr_bits",
            "type": "rootcause"
          },
          {
            "id": "weakness:overflow",
            "keyphrase": "overflow",
            "type": "weakness"
          },
          {
            "id": "weakness:stack corruption",
            "keyphrase": "stack corruption",
            "type": "weakness"
          },
          {
            "id": "vector:bpf_probe_read_kernel_common",
            "keyphrase": "bpf_probe_read_kernel_common",
            "type": "vector"
          },
          {
            "id": "product:Linux kernel",
            "keyphrase": "Linux kernel",
            "type": "product"
          }
        ]
      },
      "similarity": 606.8999258066799
    },
    {
      "metadata": {
        "doc_id": "1284",
        "name": "Improper Validation of Specified Quantity in Input",
        "source": "sparse",
        "original_content": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.",
        "keyphrase_sources": [
          {
            "id": "rootcause:multiplication overflow in nr_bits",
            "keyphrase": "multiplication overflow in nr_bits",
            "type": "rootcause"
          },
          {
            "id": "weakness:overflow",
            "keyphrase": "overflow",
            "type": "weakness"
          },
          {
            "id": "weakness:stack corruption",
            "keyphrase": "stack corruption",
            "type": "weakness"
          },
          {
            "id": "vector:bpf_probe_read_kernel_common",
            "keyphrase": "bpf_probe_read_kernel_common",
            "type": "vector"
          },
          {
            "id": "product:Linux kernel",
            "keyphrase": "Linux kernel",
            "type": "product"
          }
        ]
      },
      "similarity": 604.5914846663482
    },
    {
      "metadata": {
        "doc_id": "194",
        "name": "Unexpected Sign Extension",
        "source": "sparse",
        "original_content": "The product performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses.",
        "keyphrase_sources": [
          {
            "id": "rootcause:multiplication overflow in nr_bits",
            "keyphrase": "multiplication overflow in nr_bits",
            "type": "rootcause"
          },
          {
            "id": "weakness:overflow",
            "keyphrase": "overflow",
            "type": "weakness"
          },
          {
            "id": "weakness:stack corruption",
            "keyphrase": "stack corruption",
            "type": "weakness"
          },
          {
            "id": "vector:bpf_probe_read_kernel_common",
            "keyphrase": "bpf_probe_read_kernel_common",
            "type": "vector"
          },
          {
            "id": "product:Linux kernel",
            "keyphrase": "Linux kernel",
            "type": "product"
          }
        ]
      },
      "similarity": 597.423398304346
    },
    {
      "metadata": {
        "doc_id": "682",
        "name": "Incorrect Calculation",
        "source": "sparse",
        "original_content": "The product performs a calculation that generates incorrect or unintended results that are later used in security-critical decisions or resource management.",
        "keyphrase_sources": [
          {
            "id": "rootcause:multiplication overflow in nr_bits",
            "keyphrase": "multiplication overflow in nr_bits",
            "type": "rootcause"
          },
          {
            "id": "weakness:overflow",
            "keyphrase": "overflow",
            "type": "weakness"
          },
          {
            "id": "weakness:stack corruption",
            "keyphrase": "stack corruption",
            "type": "weakness"
          },
          {
            "id": "vector:bpf_probe_read_kernel_common",
            "keyphrase": "bpf_probe_read_kernel_common",
            "type": "vector"
          },
          {
            "id": "product:Linux kernel",
            "keyphrase": "Linux kernel",
            "type": "product"
          }
        ]
      },
      "similarity": 568.0403401726708
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-1284",
      "CWE-681",
      "CWE-131",
      "CWE-191",
      "CWE-682",
      "CWE-667",
      "CWE-1285",
      "CWE-190",
      "CWE-19",
      "CWE-824",
      "CWE-252",
      "CWE-703",
      "CWE-754"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {
    "190": [
      {
        "id": "rootcause:multiplication overflow in nr_bits",
        "keyphrase": "multiplication overflow in nr_bits",
        "type": "rootcause"
      },
      {
        "id": "weakness:overflow",
        "keyphrase": "overflow",
        "type": "weakness"
      },
      {
        "id": "weakness:stack corruption",
        "keyphrase": "stack corruption",
        "type": "weakness"
      },
      {
        "id": "vector:bpf_probe_read_kernel_common",
        "keyphrase": "bpf_probe_read_kernel_common",
        "type": "vector"
      },
      {
        "id": "product:Linux kernel",
        "keyphrase": "Linux kernel",
        "type": "product"
      }
    ],
    "197": [
      {
        "id": "rootcause:multiplication overflow in nr_bits",
        "keyphrase": "multiplication overflow in nr_bits",
        "type": "rootcause"
      },
      {
        "id": "weakness:overflow",
        "keyphrase": "overflow",
        "type": "weakness"
      },
      {
        "id": "weakness:stack corruption",
        "keyphrase": "stack corruption",
        "type": "weakness"
      },
      {
        "id": "vector:bpf_probe_read_kernel_common",
        "keyphrase": "bpf_probe_read_kernel_common",
        "type": "vector"
      },
      {
        "id": "product:Linux kernel",
        "keyphrase": "Linux kernel",
        "type": "product"
      }
    ],
    "1284": [
      {
        "id": "rootcause:multiplication overflow in nr_bits",
        "keyphrase": "multiplication overflow in nr_bits",
        "type": "rootcause"
      },
      {
        "id": "weakness:overflow",
        "keyphrase": "overflow",
        "type": "weakness"
      },
      {
        "id": "weakness:stack corruption",
        "keyphrase": "stack corruption",
        "type": "weakness"
      },
      {
        "id": "vector:bpf_probe_read_kernel_common",
        "keyphrase": "bpf_probe_read_kernel_common",
        "type": "vector"
      },
      {
        "id": "product:Linux kernel",
        "keyphrase": "Linux kernel",
        "type": "product"
      }
    ],
    "194": [
      {
        "id": "rootcause:multiplication overflow in nr_bits",
        "keyphrase": "multiplication overflow in nr_bits",
        "type": "rootcause"
      },
      {
        "id": "weakness:overflow",
        "keyphrase": "overflow",
        "type": "weakness"
      },
      {
        "id": "weakness:stack corruption",
        "keyphrase": "stack corruption",
        "type": "weakness"
      },
      {
        "id": "vector:bpf_probe_read_kernel_common",
        "keyphrase": "bpf_probe_read_kernel_common",
        "type": "vector"
      },
      {
        "id": "product:Linux kernel",
        "keyphrase": "Linux kernel",
        "type": "product"
      }
    ],
    "682": [
      {
        "id": "rootcause:multiplication overflow in nr_bits",
        "keyphrase": "multiplication overflow in nr_bits",
        "type": "rootcause"
      },
      {
        "id": "weakness:overflow",
        "keyphrase": "overflow",
        "type": "weakness"
      },
      {
        "id": "weakness:stack corruption",
        "keyphrase": "stack corruption",
        "type": "weakness"
      },
      {
        "id": "vector:bpf_probe_read_kernel_common",
        "keyphrase": "bpf_probe_read_kernel_common",
        "type": "vector"
      },
      {
        "id": "product:Linux kernel",
        "keyphrase": "Linux kernel",
        "type": "product"
      }
    ]
  }
}