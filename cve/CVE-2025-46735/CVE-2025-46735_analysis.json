{
  "cve_id": "CVE-2025-46735",
  "description": "Terraform WinDNS Provider allows users to manage their Windows DNS server resources through Terraform. A security issue has been found in Terraform WinDNS Provider before version `1.0.5`. The `windns_record` resource **did not sanitize the input variables**. This could lead to authenticated command injection in the underlyding powershell command prompt. Version 1.0.5 contains a fix for the issue.",
  "key_phrases": {
    "rootcause": "did not sanitize the input variables",
    "weakness": "",
    "impact": "command injection",
    "vector": "",
    "attacker": "authenticated users",
    "product": "Terraform WinDNS Provider",
    "version": "before version 1.0.5",
    "component": "windns_record resource"
  },
  "reference_content": "CVE-2025-46735\n\n**Root cause of vulnerability:**\nThe `windns_record` resource did not sanitize the input variables.\n\n**Weaknesses/vulnerabilities present:**\nImproper input sanitization leading to authenticated command injection in the underlying PowerShell command prompt. (CWE-77)\n\n**Impact of exploitation:**\nAuthenticated command injection.\n\n**Attack vectors:**\nExploitation occurs through crafted input variables to the `windns_record` resource.\n\n**Required attacker capabilities/position:**\nAuthenticated user.\n\n**Mitigation or fix:**\nThe vulnerability was patched in version 1.0.5 with commit `83ef736 (fix: better input validation)`.  The fix includes sanitizing input strings using `SanitizeInputString` and `SanitiseTFInput` functions, and escaping PowerShell input.\n\n**Additional details:**\nThe provided content includes test cases demonstrating the vulnerability and the fix, including a test case specifically for illegal characters. The vulnerability affects versions <= 1.0.4.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-78 | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | 1 | Base | Primary | Allowed |\n| CWE-116 | Improper Encoding or Escaping of Output | 0.7 | Class | Secondary | Allowed-with-Review |\n| CWE-1286 | Improper Validation of Syntactic Correctness of Input | 0.7 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is CWE-78, which is a base-level CWE detailing the specific type of injection occurring. CWE-78 is a child of CWE-77 (Improper Neutralization of Special Elements used in a Command), and also a child of CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')). The relationship shows that this is a specific type of command injection that is caused by **improper neutralization of special elements**. CWE-116 is a Class-level CWE that could contribute to the root cause, by failing to encode or escape the output. CWE-1286 is a base level CWE that could also contribute to the root cause by failing to validate the input.\n\n```mermaid\ngraph TD\n    cwe78[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"]\n    cwe77[\"CWE-77: Improper Neutralization of Special Elements used in a Command\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n    cwe116[\"CWE-116: Improper Encoding or Escaping of Output\"]\n    cwe1286[\"CWE-1286: Improper Validation of Syntactic Correctness of Input\"]\n\n    cwe78 -->|CHILDOF| cwe77\n    cwe78 -->|CHILDOF| cwe74\n    cwe116 -->|RELATED| cwe78\n    cwe1286 -->|RELATED| cwe78\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe78 primary\n    class cwe77,cwe74,cwe116,cwe1286 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **lack of input sanitization** in the `windns_record` resource. This leads to the possibility of injecting OS commands via crafted input variables. The final impact is authenticated command injection in the underlying PowerShell command prompt.\n\nRoot Cause: **Improper input sanitization** (CWE-Other) -> **Improper Neutralization of Special Elements used in an OS Command** (CWE-78) -> Command Injection\n\n## Summary of Analysis\nThe primary CWE is CWE-78 because the **root cause of the vulnerability** is that the `windns_record` resource **did not sanitize the input variables**, leading to OS Command Injection. This is supported by the \"Vulnerability Description Key Phrases\" section, which explicitly mentions \"**did not sanitize the input variables**\". The \"CVE Reference Links Content Summary\" also supports this by stating: \"The `windns_record` resource did not sanitize the input variables\" and \"Improper input sanitization leading to authenticated command injection in the underlying PowerShell command prompt (CWE-77)\".\n\nThe retriever results also list CWE-78 as a candidate.\n\nCWE-116 (Improper Encoding or Escaping of Output) and CWE-1286 (Improper Validation of Syntactic Correctness of Input) are included as contributing factors.\n\nThe evidence and retriever results strongly support CWE-78 as the primary weakness.\n\nCWEs Considered but Not Used:\n\n*   CWE-77 (Improper Neutralization of Special Elements used in a Command): While mentioned in the CVE summary, CWE-78 is a more specific child of CWE-77 and accurately reflects the OS command injection.\n*   CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')): While a parent of CWE-78, it's a more general \"Injection\" weakness and less descriptive than CWE-78.\n*   CWE-89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')), CWE-90 (Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')), CWE-93 (Improper Neutralization of CRLF Sequences ('CRLF Injection')): These are all specific types of injection, but they are not relevant to the OS command injection vulnerability described.\n*   CWE-94 (Improper Control of Generation of Code ('Code Injection')): This is a more general weakness related to code injection and less specific than the OS command injection described.\n*   CWE-201 (Insertion of Sensitive Information Into Sent Data), CWE-212 (Improper Removal of Sensitive Information Before Storage or Transfer), CWE-226 (Sensitive Information in Resource Not Removed Before Reuse), CWE-497 (Exposure of Sensitive System Information to an Unauthorized Control Sphere): These are all related to information exposure and are not relevant to the command injection vulnerability described.\n*   CWE-346 (Origin Validation Error), CWE-350 (Reliance on Reverse DNS Resolution for a Security-Critical Action), CWE-863 (Incorrect Authorization), CWE-923 (Improper Restriction of Communication Channel to Intended Endpoints): These relate to authentication and authorization issues, which are not central to this vulnerability.\n*   CWE-117 (Improper Output Neutralization for Logs): This relates to logging, which is not relevant to the command injection vulnerability described.\n*   CWE-138 (Improper Neutralization of Special Elements): This is a higher-level class that could apply, but CWE-78 is a more specific and accurate base-level CWE.\n*   CWE-178 (Improper Handling of Case Sensitivity): Not directly related to the command injection aspect of this vulnerability.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-78 | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | 1 | Base | Primary | Allowed |\n| CWE-116 | Improper Encoding or Escaping of Output | 0.7 | Class | Secondary | Allowed-with-Review |\n| CWE-1286 | Improper Validation of Syntactic Correctness of Input | 0.7 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is CWE-78, which is a base-level CWE detailing the specific type of injection occurring. CWE-78 is a child of CWE-77 (Improper Neutralization of Special Elements used in a Command), and also a child of CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')). The relationship shows that this is a specific type of command injection that is caused by **improper neutralization of special elements**. CWE-116 is a Class-level CWE that could contribute to the root cause, by failing to encode or escape the output. CWE-1286 is a base level CWE that could also contribute to the root cause by failing to validate the input.\n\n```mermaid\ngraph TD\n    cwe78[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"]\n    cwe77[\"CWE-77: Improper Neutralization of Special Elements used in a Command\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n    cwe116[\"CWE-116: Improper Encoding or Escaping of Output\"]\n    cwe1286[\"CWE-1286: Improper Validation of Syntactic Correctness of Input\"]\n\n    cwe78 -->|CHILDOF| cwe77\n    cwe78 -->|CHILDOF| cwe74\n    cwe116 -->|RELATED| cwe78\n    cwe1286 -->|RELATED| cwe78\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe78 primary\n    class cwe77,cwe74,cwe116,cwe1286 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **lack of input sanitization** in the `windns_record` resource. This leads to the possibility of injecting OS commands via crafted input variables. The final impact is authenticated command injection in the underlying PowerShell command prompt.\n\nRoot Cause: **Improper input sanitization** (CWE-Other) -> **Improper Neutralization of Special Elements used in an OS Command** (CWE-78) -> Command Injection\n\n## Summary of Analysis\nThe primary CWE is CWE-78 because the **root cause of the vulnerability** is that the `windns_record` resource **did not sanitize the input variables**, leading to OS Command Injection. This is supported by the \"Vulnerability Description Key Phrases\" section, which explicitly mentions \"**did not sanitize the input variables**\". The \"CVE Reference Links Content Summary\" also supports this by stating: \"The `windns_record` resource did not sanitize the input variables\" and \"Improper input sanitization leading to authenticated command injection in the underlying PowerShell command prompt (CWE-77)\".\n\nThe retriever results also list CWE-78 as a candidate.\n\nCWE-116 (Improper Encoding or Escaping of Output) and CWE-1286 (Improper Validation of Syntactic Correctness of Input) are included as contributing factors.\n\nThe evidence and retriever results strongly support CWE-78 as the primary weakness.\n\nCWEs Considered but Not Used:\n\n*   CWE-77 (Improper Neutralization of Special Elements used in a Command): While mentioned in the CVE summary, CWE-78 is a more specific child of CWE-77 and accurately reflects the OS command injection.\n*   CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')): While a parent of CWE-78, it's a more general \"Injection\" weakness and less descriptive than CWE-78.\n*   CWE-89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')), CWE-90 (Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')), CWE-93 (Improper Neutralization of CRLF Sequences ('CRLF Injection')): These are all specific types of injection, but they are not relevant to the OS command injection vulnerability described.\n*   CWE-94 (Improper Control of Generation of Code ('Code Injection')): This is a more general weakness related to code injection and less specific than the OS command injection described.\n*   CWE-201 (Insertion of Sensitive Information Into Sent Data), CWE-212 (Improper Removal of Sensitive Information Before Storage or Transfer), CWE-226 (Sensitive Information in Resource Not Removed Before Reuse), CWE-497 (Exposure of Sensitive System Information to an Unauthorized Control Sphere): These are all related to information exposure and are not relevant to the command injection vulnerability described.\n*   CWE-346 (Origin Validation Error), CWE-350 (Reliance on Reverse DNS Resolution for a Security-Critical Action), CWE-863 (Incorrect Authorization), CWE-923 (Improper Restriction of Communication Channel to Intended Endpoints): These relate to authentication and authorization issues, which are not central to this vulnerability.\n*   CWE-117 (Improper Output Neutralization for Logs): This relates to logging, which is not relevant to the command injection vulnerability described.\n*   CWE-138 (Improper Neutralization of Special Elements): This is a higher-level class that could apply, but CWE-78 is a more specific and accurate base-level CWE.\n*   CWE-178 (Improper Handling of Case Sensitivity): Not directly related to the command injection aspect of this vulnerability.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-94:**\n- 94 (Improper Control of Generation of Code ('Code Injection')) - ROOT\n\n\n**Chain starting from CWE-93:**\n- 93 (Improper Neutralization of CRLF Sequences ('CRLF Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "source": "sparse"
      },
      "similarity": 344.6496870537966
    },
    {
      "metadata": {
        "doc_id": "138",
        "name": "Improper Neutralization of Special Elements",
        "source": "sparse"
      },
      "similarity": 314.41097485734736
    },
    {
      "metadata": {
        "doc_id": "93",
        "name": "Improper Neutralization of CRLF Sequences ('CRLF Injection')",
        "source": "sparse"
      },
      "similarity": 313.573506436733
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse"
      },
      "similarity": 312.9574652618923
    },
    {
      "metadata": {
        "doc_id": "94",
        "name": "Improper Control of Generation of Code ('Code Injection')",
        "source": "sparse"
      },
      "similarity": 299.57732117286844
    },
    {
      "metadata": {
        "doc_id": "78",
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "source": "sparse"
      },
      "similarity": 297.501138070024
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 292.21141696851697
    },
    {
      "metadata": {
        "doc_id": "90",
        "name": "Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
        "source": "sparse"
      },
      "similarity": 290.1055127588355
    },
    {
      "metadata": {
        "doc_id": "350",
        "name": "Reliance on Reverse DNS Resolution for a Security-Critical Action",
        "type": "Variant",
        "original_content": "The product performs reverse DNS resolution on an IP address to obtain the hostname and make a security decision, but it does not properly ensure that the IP address is truly associated with the hostname.",
        "keyphrase_source": "rootcause:did not sanitize the input variables",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.47124758754284357
          }
        }
      },
      "similarity": 0.47124758754284357
    },
    {
      "doc_id": "117",
      "text": "CWE-117: Improper Output Neutralization for Logs",
      "score": 2.8651999999999997,
      "metadata": {
        "doc_id": "117",
        "name": "Improper Output Neutralization for Logs",
        "type": "base",
        "original_content": "CWE-117: Improper Output Neutralization for Logs",
        "relationships": [
          {
            "source_id": "117",
            "target_id": "93",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "117",
            "target_id": "20",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "700"
            }
          },
          {
            "source_id": "117",
            "target_id": "116",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "93",
            "target_id": "117",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "20",
            "target_id": "117",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "700"
            }
          },
          {
            "source_id": "116",
            "target_id": "117",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "abstraction_path": 0.7200000000000001,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "93",
                  "117",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "93"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "116",
                  "117",
                  "PARENTOF"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "abstraction_path_down",
              "source": "116"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "93",
                  "117",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_forward",
              "source": "93"
            }
          }
        },
        "abstraction_level": "base",
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.8651999999999997
          }
        }
      },
      "similarity": 2.8651999999999997
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-94",
      "CWE-93",
      "CWE-226",
      "CWE-1286",
      "CWE-350",
      "CWE-201",
      "CWE-74",
      "CWE-117",
      "CWE-90",
      "CWE-89",
      "CWE-77",
      "CWE-346",
      "CWE-863",
      "CWE-923",
      "CWE-178",
      "CWE-78",
      "CWE-138",
      "CWE-212",
      "CWE-116",
      "CWE-497"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}