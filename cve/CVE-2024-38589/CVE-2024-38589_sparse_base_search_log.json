{
  "method": "sparse_base",
  "query": "In the Linux kernel, the following vulnerability has been resolved netrom fix possible dead-lock in nr_rt_ioctl() syzbot loves netrom, and found a possible deadlock in nr_rt_ioctl [1] Make sure we always acquire nr_node_list_lock before nr_node_lock(nr_node) [1] WARNING possible circular locking dependency detected 6.9.0-rc7-syzkaller-02147-g654de42f3fc6 #0 Not tainted ------------------------------------------------------ syz-executor350/5129 is trying to acquire lock ffff8880186e2070 (&nr_node->node_lock){+...}-{22}, at spin_lock_bh include/linux/spinlock.h356 [inline] ffff8880186e2070 (&nr_node->node_lock){+...}-{22}, at nr_node_lock include/net/netrom.h152 [inline] ffff8880186e2070 (&nr_node->node_lock){+...}-{22}, at nr_dec_obs net/netrom/nr_route.c464 [inline] ffff8880186e2070 (&nr_node->node_lock){+...}-{22}, at nr_rt_ioctl+0x1bb/0x1090 net/netrom/nr_route.c697 but task is already holding lock ffffffff8f7053b8 (nr_node_list_lock){+...}-{22}, at spin_lock_bh include/linux/spinlock.h356 [inline] ffffffff8f7053b8 (nr_node_list_lock){+...}-{22}, at nr_dec_obs net/netrom/nr_route.c462 [inline] ffffffff8f7053b8 (nr_node_list_lock){+...}-{22}, at nr_rt_ioctl+0x10a/0x1090 net/netrom/nr_route.c697 which lock already depends on the new lock. the existing dependency chain (in reverse order) is -> #1 (nr_node_list_lock){+...}-{22} lock_acquire+0x1ed/0x550 kernel/locking/lockdep.c5754 __raw_spin_lock_bh include/linux/spin",
  "keyphrases": {
    "base_query": "In the Linux kernel, the following vulnerability has been resolved netrom fix possible dead-lock in nr_rt_ioctl() syzbot loves netrom, and found a possible deadlock in nr_rt_ioctl [1] Make sure we always acquire nr_node_list_lock before nr_node_lock(nr_node) [1] WARNING possible circular locking dependency detected 6.9.0-rc7-syzkaller-02147-g654de42f3fc6 #0 Not tainted ------------------------------------------------------ syz-executor350/5129 is trying to acquire lock ffff8880186e2070 (&nr_node->node_lock){+...}-{22}, at spin_lock_bh include/linux/spinlock.h356 [inline] ffff8880186e2070 (&nr_node->node_lock){+...}-{22}, at nr_node_lock include/net/netrom.h152 [inline] ffff8880186e2070 (&nr_node->node_lock){+...}-{22}, at nr_dec_obs net/netrom/nr_route.c464 [inline] ffff8880186e2070 (&nr_node->node_lock){+...}-{22}, at nr_rt_ioctl+0x1bb/0x1090 net/netrom/nr_route.c697 but task is already holding lock ffffffff8f7053b8 (nr_node_list_lock){+...}-{22}, at spin_lock_bh include/linux/spinlock.h356 [inline] ffffffff8f7053b8 (nr_node_list_lock){+...}-{22}, at nr_dec_obs net/netrom/nr_route.c462 [inline] ffffffff8f7053b8 (nr_node_list_lock){+...}-{22}, at nr_rt_ioctl+0x10a/0x1090 net/netrom/nr_route.c697 which lock already depends on the new lock. the existing dependency chain (in reverse order) is -> #1 (nr_node_list_lock){+...}-{22} lock_acquire+0x1ed/0x550 kernel/locking/lockdep.c5754 __raw_spin_lock_bh include/linux/spin"
  },
  "timestamp": "2025-07-13T10:45:06.913217",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "667",
      "name": "Improper Locking",
      "score": 184.9076628710515
    },
    {
      "doc_id": "833",
      "name": "Deadlock",
      "score": 145.07328541825277
    },
    {
      "doc_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "score": 144.20101027631728
    },
    {
      "doc_id": "409",
      "name": "Improper Handling of Highly Compressed Data (Data Amplification)",
      "score": 141.76492324060322
    },
    {
      "doc_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 139.52455481770343
    }
  ]
}