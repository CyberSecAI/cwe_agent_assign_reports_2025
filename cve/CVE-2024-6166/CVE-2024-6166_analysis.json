{
  "cve_id": "CVE-2024-6166",
  "description": "The Unlimited Elements For Elementor (Free Widgets, Addons, Templates) plugin for WordPress is vulnerable to **time-based SQL Injection** via the addons_order parameter in all versions up to, and including, 1.5.112 due to **insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query**. This makes it possible for authenticated attackers, with Contributor-level access and above and granted plugin setting edit permissions by an administrator, to append additional SQL queries into already existing queries that can be used to extract sensitive information from the database.",
  "key_phrases": {
    "rootcause": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
    "weakness": "time-based SQL Injection",
    "impact": "extract sensitive information from the database",
    "vector": "",
    "attacker": "authenticated attackers with Contributor-level access and above",
    "product": [
      "Unlimited Elements For Elementor (Free Widgets",
      "Addons",
      "Templates) plugin for WordPress"
    ],
    "version": "up to and including 1.5.112",
    "component": "addons_order parameter"
  },
  "reference_content": "Based on the provided information, here's an analysis of CVE-2024-6166:\n\n**1. Verification of CVE Relevance:**\n\n   - The provided content, especially from Wordfence, explicitly states that the vulnerability is related to **\"Unlimited Elements For Elementor (Free Widgets, Addons, Templates) <= 1.5.112 - Authenticated (Contributor+) Time-Based SQL Injection\"**, which aligns with the CVE description.\n\n**2. Root Cause of Vulnerability:**\n\n   - **Insufficient input sanitization/escaping:** The plugin fails to properly sanitize/escape user-supplied input, specifically the `addons_order` parameter.\n   - **Lack of Prepared Statements:** The SQL query is not properly prepared, allowing for the injection of malicious SQL code.\n\n**3. Weaknesses/Vulnerabilities Present:**\n\n   - **Time-based SQL Injection:** The vulnerability is a time-based SQL injection, meaning an attacker can use time delays to infer information from the database by injecting malicious queries that cause delays.\n\n**4. Impact of Exploitation:**\n\n   - **Sensitive Data Extraction:** An attacker can potentially extract sensitive information from the database by injecting SQL queries that are designed to retrieve data.\n   - **Full Database Access:** In some cases, SQL injection can lead to full access to the database.\n\n**5. Attack Vectors:**\n\n   - The vulnerability is exposed through the `addons_order` parameter.\n\n**6. Required Attacker Capabilities/Position:**\n\n   - **Authentication:** The attacker needs to be an authenticated user on the WordPress site with at least **Contributor-level** access or higher.\n  - **Plugin edit permission:**  The attacker needs to have been granted the permission to edit plugin settings by an administrator.\n\n**Additional Details:**\n\n- The provided Trac changelog (3112307) and the Wordfence article indicates the vulnerability was fixed in version **1.5.113** of the plugin. The changelog mentions \"fixed some small security issues found by wordfence\".\n- The vulnerability is located in the file: `unlimited-elements-for-elementor/trunk/inc_php/unitecreator_addons.class.php#L79`. The vulnerable code appears to be related to how addon orders are handled.\n- The Wordfence article provides a CVSS score of 8.8 which is high, as well as details about the affected versions and where the patch is located.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-89 | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | 1 | Base | Allowed | Primary CWE |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship that influenced the CWE selection was the ChildOf relationship between CWE-89 and CWE-74. While CWE-74 is a broader class of injection vulnerabilities, the specific vulnerability description clearly indicates SQL injection, making CWE-89 the more appropriate and specific choice.\n\n```mermaid\ngraph TD\n    cwe89[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n\n    cwe89 -->|CHILDOF| cwe74\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe89 primary\n    class cwe74 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **insufficient escaping** and **lack of sufficient preparation** of the SQL query, leading to the **time-based SQL Injection** vulnerability. The ultimate impact is the ability to extract sensitive information from the database.\n\n## Summary of Analysis\nThe analysis is based on the provided evidence, which includes the vulnerability description, key phrases, and CVE reference links content summary. The vulnerability description explicitly mentions **\"time-based SQL Injection\"** and attributes it to **\"insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query\"**. The CVE reference links content summary further confirms that the root cause is **insufficient input sanitization/escaping** and **lack of prepared statements**, resulting in a time-based SQL injection vulnerability that allows for sensitive data extraction. The retriever results also strongly suggest CWE-89 as the most relevant CWE.\n\nThe selected CWE, CWE-89, is at the optimal level of specificity as it directly addresses the identified SQL injection vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.80\n**Source**: alternate_terms\n\n**Description**:\nThe product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n# Complete CWE Specifications\n\nCWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\n**Abstraction Level**: base\n\n**Description**:\nCWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Relationships**:\n- PARENTOF -> CWE-564\n- CANFOLLOW -> CWE-456\n- CHILDOF -> CWE-74\n- CHILDOF -> CWE-943\n- PARENTOF -> CWE-89\n\nThe vulnerability description clearly points to an SQL Injection vulnerability due to **insufficient escaping** and **lack of sufficient preparation** on the SQL query. Therefore, CWE-89 is the most appropriate choice.\n\nCWEs Considered but Not Used:\n\n*   CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') - While this is a parent of CWE-89, it is too general for this specific case of SQL Injection.\n*   CWE-116: Improper Encoding or Escaping of Output - This is related to the **insufficient escaping**, but CWE-89 more accurately captures the vulnerability.\n*   CWE-863: Incorrect Authorization and CWE-862: Missing Authorization - These CWEs are related to authorization issues, but the vulnerability is primarily due to SQL injection.\n*   CWE-91: XML Injection (aka Blind XPath Injection) - This is specific to XML injection, which is not the case here.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-89 | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | 1 | Base | Allowed | Primary CWE |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship that influenced the CWE selection was the ChildOf relationship between CWE-89 and CWE-74. While CWE-74 is a broader class of injection vulnerabilities, the specific vulnerability description clearly indicates SQL injection, making CWE-89 the more appropriate and specific choice.\n\n```mermaid\ngraph TD\n    cwe89[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n\n    cwe89 -->|CHILDOF| cwe74\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe89 primary\n    class cwe74 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **insufficient escaping** and **lack of sufficient preparation** of the SQL query, leading to the **time-based SQL Injection** vulnerability. The ultimate impact is the ability to extract sensitive information from the database.\n\n## Summary of Analysis\nThe analysis is based on the provided evidence, which includes the vulnerability description, key phrases, and CVE reference links content summary. The vulnerability description explicitly mentions **\"time-based SQL Injection\"** and attributes it to **\"insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query\"**. The CVE reference links content summary further confirms that the root cause is **insufficient input sanitization/escaping** and **lack of prepared statements**, resulting in a time-based SQL injection vulnerability that allows for sensitive data extraction. The retriever results also strongly suggest CWE-89 as the most relevant CWE.\n\nThe selected CWE, CWE-89, is at the optimal level of specificity as it directly addresses the identified SQL injection vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.80\n**Source**: alternate_terms\n\n**Description**:\nThe product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n# Complete CWE Specifications\n\nCWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\n**Abstraction Level**: base\n\n**Description**:\nCWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Relationships**:\n- PARENTOF -> CWE-564\n- CANFOLLOW -> CWE-456\n- CHILDOF -> CWE-74\n- CHILDOF -> CWE-943\n- PARENTOF -> CWE-89\n\nThe vulnerability description clearly points to an SQL Injection vulnerability due to **insufficient escaping** and **lack of sufficient preparation** on the SQL query. Therefore, CWE-89 is the most appropriate choice.\n\nCWEs Considered but Not Used:\n\n*   CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') - While this is a parent of CWE-89, it is too general for this specific case of SQL Injection.\n*   CWE-116: Improper Encoding or Escaping of Output - This is related to the **insufficient escaping**, but CWE-89 more accurately captures the vulnerability.\n*   CWE-863: Incorrect Authorization and CWE-862: Missing Authorization - These CWEs are related to authorization issues, but the vulnerability is primarily due to SQL injection.\n*   CWE-91: XML Injection (aka Blind XPath Injection) - This is specific to XML injection, which is not the case here.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-89:**\n- 89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')) - ROOT\n\n\n**Chain starting from CWE-863:**\n- 863 (Incorrect Authorization) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: SQL injection",
        "match_reason": "term_in_phrase_whole_phrase"
      },
      "similarity": 800.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse"
      },
      "similarity": 621.5953837817431
    },
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse"
      },
      "similarity": 589.598791575431
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 572.3819852454351
    },
    {
      "metadata": {
        "doc_id": "90",
        "name": "Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
        "source": "sparse"
      },
      "similarity": 565.029189647117
    },
    {
      "metadata": {
        "doc_id": "862",
        "name": "Missing Authorization",
        "source": "sparse"
      },
      "similarity": 562.4215459060216
    },
    {
      "metadata": {
        "doc_id": "502",
        "name": "Deserialization of Untrusted Data",
        "source": "sparse"
      },
      "similarity": 555.6013825513834
    },
    {
      "metadata": {
        "doc_id": "284",
        "name": "Improper Access Control",
        "source": "sparse"
      },
      "similarity": 554.0869222688324
    },
    {
      "metadata": {
        "doc_id": "91",
        "name": "XML Injection (aka Blind XPath Injection)",
        "type": "Base",
        "original_content": "The product does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system.",
        "keyphrase_source": "rootcause:lack of sufficient preparation on the existing SQL query",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5219165604725244,
            "graph": 1.6662114477320733
          }
        }
      },
      "similarity": 0.5219165604725244
    },
    {
      "doc_id": "613",
      "text": "CWE-613: Insufficient Session Expiration",
      "score": 2.0930000000000004,
      "metadata": {
        "doc_id": "613",
        "name": "Insufficient Session Expiration",
        "type": "base",
        "original_content": "CWE-613: Insufficient Session Expiration",
        "relationships": [
          {
            "source_id": "613",
            "target_id": "352",
            "label": "REQUIREDBY",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "613",
            "target_id": "287",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "613",
            "target_id": "672",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "613",
            "target_id": "672",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "672",
            "target_id": "613",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "352",
            "target_id": "613",
            "label": "REQUIRES",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "287",
            "target_id": "613",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 0.9,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "352",
                  "613",
                  "REQUIRES"
                ]
              ],
              "score": 0.9,
              "type": "relationship_chain",
              "source": "352"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "352",
                  "613",
                  "REQUIRES"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_forward",
              "source": "352"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.0930000000000004
          }
        }
      },
      "similarity": 2.0930000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-89",
      "CWE-863",
      "CWE-564",
      "CWE-116",
      "CWE-91",
      "CWE-862",
      "CWE-74",
      "CWE-943",
      "CWE-456"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}