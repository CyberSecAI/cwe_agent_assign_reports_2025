{
  "cve_id": "CVE-2025-21876",
  "description": "In the Linux kernel, the following vulnerability has been resolved iommu/vt-d Fix suspicious **RCU usage** Commit (iommu/vt-d Allocate DMAR fault interrupts locally) moved the call to enable_drhd_fault_handling() to a code path that does not hold any lock while traversing the drhd list. Fix it by ensuring the dmar_global_lock lock is held when traversing the drhd list. Without this fix, the following warning is triggered ============================= WARNING suspicious **RCU usage** 6.14.0-rc3 #55 Not tainted ----------------------------- drivers/iommu/intel/dmar.c2046 RCU-list traversed in non-reader section!! other info that might help us debug this rcu_scheduler_active = 1, debug_locks = 1 2 locks held by cpuhp/1/23 #0 ffffffff84a67c50 (cpu_hotplug_lock){++++}-{00}, at cpuhp_thread_fun+0x87/0x2c0 #1 ffffffff84a6a380 (cpuhp_state-up){+.+.}-{00}, at cpuhp_thread_fun+0x87/0x2c0 stack backtrace CPU 1 UID 0 PID 23 Comm cpuhp/1 Not tainted 6.14.0-rc3 #55 Call Trace dump_stack_lvl+0xb7/0xd0 lockdep_rcu_suspicious+0x159/0x1f0 ? __pfx_enable_drhd_fault_handling+0x10/0x10 enable_drhd_fault_handling+0x151/0x180 cpuhp_invoke_callback+0x1df/0x990 cpuhp_thread_fun+0x1ea/0x2c0 smpboot_thread_fn+0x1f5/0x2e0 ? __pfx_smpboot_thread_fn+0x10/0x10 kthread+0x12a/0x2d0 ? __pfx_kthread+0x10/0x10 ret_from_fork+0x4a/0x60 ? __pfx_kthread+0x10/0x10 ret_from_fork_asm+0x1a/0x30 Holding the lock in enable_drhd_fault_handling() triggers a lockdep splat about a possible deadlock between dmar_global_lock and cpu_hotplug_lock. This is avoided by not holding dmar_global_lock when calling iommu_device_register(), which initiates the device probe process.",
  "key_phrases": {
    "rootcause": "improper synchronization",
    "weakness": "RCU usage",
    "impact": "",
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": "iommu/vt-d"
  },
  "reference_content": null,
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-667 | Improper Locking | 0.9 | Class | Allowed-with-Review | Primary CWE. The vulnerability is caused by improper locking during RCU usage, leading to a potential deadlock. |\n| CWE-833 | Deadlock | 0.7 | Base | Allowed | Secondary candidate. The **improper locking** can lead to a deadlock situation. |\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.6 | Class | Allowed-with-Review | Secondary candidate. The **improper locking** is a form of **improper synchronization** which causes a race condition. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary weakness is **CWE-667 (Improper Locking)**, a Class-level CWE. **CWE-833 (Deadlock)** and **CWE-362 (Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'))** are related to **CWE-667** as potential consequences of **improper locking**.\n```mermaid\ngraph TD\n    cwe667[\"CWE-667: Improper Locking\"]\n    cwe833[\"CWE-833: Deadlock\"]\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    \n    cwe833 -- CANRESULTIN --> cwe667\n    cwe362 -- CANRESULTIN --> cwe667\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe667 primary\n    class cwe833,cwe362 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **improper locking (CWE-667)**, which leads to a potential **deadlock (CWE-833)** or a **race condition (CWE-362)** due to **improper synchronization**.\n\n## Summary of Analysis\nThe vulnerability involves **improper locking** in the Linux kernel's iommu/vt-d component, leading to a potential deadlock. The analysis is based on the provided vulnerability description, which highlights the **suspicious RCU usage** and the need to hold the `dmar_global_lock` when traversing the `drhd` list. This confirms **improper synchronization**. The retriever results also point towards **CWE-667 (Improper Locking)** as the most relevant CWE. The confidence is high because the vulnerability description explicitly mentions the locking issue. The selection of **CWE-667** is appropriate because it directly addresses the root cause of the vulnerability. While **CWE-833 (Deadlock)** is a possible consequence, **CWE-667** represents the underlying weakness. The evidence is sufficient to identify **CWE-667** as the primary CWE.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.80\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-833: Deadlock\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\nCWEs Considered but not Used:\n\n*   CWE-770: Allocation of Resources Without Limits or Throttling - Not applicable as the vulnerability is related to locking issues and not resource allocation.\n*   CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop') - Not applicable as the vulnerability is related to locking issues and not infinite loops.\n*   CWE-400: Uncontrolled Resource Consumption - Not applicable as the vulnerability is related to locking issues and not resource consumption.\n*   CWE-863: Incorrect Authorization - Not applicable as the vulnerability is related to locking issues and not authorization.\n*   CWE-401: Missing Release of Memory after Effective Lifetime - Not applicable as the vulnerability is related to locking issues and not memory management.\n*   CWE-1284: Improper Validation of Specified Quantity in Input - Not applicable as the vulnerability is related to locking issues and not input validation.\n*   CWE-909: Missing Initialization of Resource - Not applicable as the vulnerability is related to locking issues and not resource initialization.\n*   CWE-1325: Improperly Controlled Sequential Memory Allocation - Not applicable as the vulnerability is related to locking issues and not memory allocation.",
  "analysis_with_relationships": "# Summary\n\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-667 | Improper Locking | 0.9 | Class | Allowed-with-Review | Primary CWE. The vulnerability is caused by improper locking during RCU usage, leading to a potential deadlock. |\n| CWE-833 | Deadlock | 0.7 | Base | Allowed | Secondary candidate. The **improper locking** can lead to a deadlock situation. |\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.6 | Class | Allowed-with-Review | Secondary candidate. The **improper locking** is a form of **improper synchronization** which causes a race condition. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary weakness is **CWE-667 (Improper Locking)**, a Class-level CWE. **CWE-833 (Deadlock)** and **CWE-362 (Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'))** are related to **CWE-667** as potential consequences of **improper locking**.\n```mermaid\ngraph TD\n    cwe667[\"CWE-667: Improper Locking\"]\n    cwe833[\"CWE-833: Deadlock\"]\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    \n    cwe833 -- CANRESULTIN --> cwe667\n    cwe362 -- CANRESULTIN --> cwe667\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe667 primary\n    class cwe833,cwe362 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **improper locking (CWE-667)**, which leads to a potential **deadlock (CWE-833)** or a **race condition (CWE-362)** due to **improper synchronization**.\n\n## Summary of Analysis\nThe vulnerability involves **improper locking** in the Linux kernel's iommu/vt-d component, leading to a potential deadlock. The analysis is based on the provided vulnerability description, which highlights the **suspicious RCU usage** and the need to hold the `dmar_global_lock` when traversing the `drhd` list. This confirms **improper synchronization**. The retriever results also point towards **CWE-667 (Improper Locking)** as the most relevant CWE. The confidence is high because the vulnerability description explicitly mentions the locking issue. The selection of **CWE-667** is appropriate because it directly addresses the root cause of the vulnerability. While **CWE-833 (Deadlock)** is a possible consequence, **CWE-667** represents the underlying weakness. The evidence is sufficient to identify **CWE-667** as the primary CWE.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.80\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-833: Deadlock\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\nCWEs Considered but not Used:\n\n*   CWE-770: Allocation of Resources Without Limits or Throttling - Not applicable as the vulnerability is related to locking issues and not resource allocation.\n*   CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop') - Not applicable as the vulnerability is related to locking issues and not infinite loops.\n*   CWE-400: Uncontrolled Resource Consumption - Not applicable as the vulnerability is related to locking issues and not resource consumption.\n*   CWE-863: Incorrect Authorization - Not applicable as the vulnerability is related to locking issues and not authorization.\n*   CWE-401: Missing Release of Memory after Effective Lifetime - Not applicable as the vulnerability is related to locking issues and not memory management.\n*   CWE-1284: Improper Validation of Specified Quantity in Input - Not applicable as the vulnerability is related to locking issues and not input validation.\n*   CWE-909: Missing Initialization of Resource - Not applicable as the vulnerability is related to locking issues and not resource initialization.\n*   CWE-1325: Improperly Controlled Sequential Memory Allocation - Not applicable as the vulnerability is related to locking issues and not memory allocation.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-863:**\n- 863 (Incorrect Authorization) - ROOT\n\n\n**Chain starting from CWE-1284:**\n- 1284 (Improper Validation of Specified Quantity in Input) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "667",
        "name": "Improper Locking",
        "source": "sparse"
      },
      "similarity": 688.9879907330222
    },
    {
      "metadata": {
        "doc_id": "770",
        "name": "Allocation of Resources Without Limits or Throttling",
        "source": "sparse"
      },
      "similarity": 625.020041082753
    },
    {
      "metadata": {
        "doc_id": "835",
        "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
        "source": "sparse"
      },
      "similarity": 620.6166851912925
    },
    {
      "metadata": {
        "doc_id": "400",
        "name": "Uncontrolled Resource Consumption",
        "source": "sparse"
      },
      "similarity": 613.7127093704066
    },
    {
      "metadata": {
        "doc_id": "833",
        "name": "Deadlock",
        "source": "sparse"
      },
      "similarity": 602.9063250573676
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 600.0178526047545
    },
    {
      "metadata": {
        "doc_id": "401",
        "name": "Missing Release of Memory after Effective Lifetime",
        "source": "sparse"
      },
      "similarity": 598.8595912989894
    },
    {
      "metadata": {
        "doc_id": "1284",
        "name": "Improper Validation of Specified Quantity in Input",
        "source": "sparse"
      },
      "similarity": 598.0286830761457
    },
    {
      "metadata": {
        "doc_id": "909",
        "name": "Missing Initialization of Resource",
        "type": "Class",
        "original_content": "The product does not initialize a critical resource.",
        "keyphrase_source": "weakness:RCU usage",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
          "comments": "Examine children of this entry to see if there is a better fit",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.5518737898190789
          }
        }
      },
      "similarity": 0.5518737898190789
    },
    {
      "doc_id": "1325",
      "text": "CWE-1325: Improperly Controlled Sequential Memory Allocation",
      "score": 2.3400000000000003,
      "metadata": {
        "doc_id": "1325",
        "name": "Improperly Controlled Sequential Memory Allocation",
        "type": "base",
        "original_content": "CWE-1325: Improperly Controlled Sequential Memory Allocation",
        "relationships": [
          {
            "source_id": "1325",
            "target_id": "476",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1325",
            "target_id": "789",
            "label": "PEEROF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1325",
            "target_id": "770",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "770",
            "target_id": "1325",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "476",
            "target_id": "1325",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 0.8,
          "abstraction_path": 0.7200000000000001,
          "sequence_path": 0.7200000000000001
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "362",
                  "476",
                  "CANPRECEDE"
                ],
                [
                  "476",
                  "1325",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.8,
              "type": "relationship_chain",
              "source": "362"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "770",
                  "1325",
                  "PARENTOF"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "abstraction_path_down",
              "source": "770"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "362",
                  "476",
                  "CANPRECEDE"
                ],
                [
                  "476",
                  "1325",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "vulnerability_sequence_forward",
              "source": "362"
            }
          }
        },
        "abstraction_level": "base",
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.3400000000000003
          }
        }
      },
      "similarity": 2.3400000000000003
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-863",
      "CWE-1284",
      "CWE-400",
      "CWE-770",
      "CWE-667",
      "CWE-833",
      "CWE-401",
      "CWE-909",
      "CWE-835",
      "CWE-362",
      "CWE-1325"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}