{
  "query": "In the Linux kernel, the following vulnerability has been resolved clk bcm dvp Assign ->num before accessing ->hws Commit f316cdff8d67 (clk Annotate struct clk_hw_onecell_data with __counted_by) annotated the hws member of struct clk_hw_onecell_data with __counted_by, which informs the bounds sanitizer about the number of elements in hws, so that it can warn when hws is accessed out of bounds. As noted in that change, the __counted_by member must be initialized with the number of elements before the first array access happens, otherwise there will be a warning from each access prior to the initialization because the number of elements is zero. This occurs in clk_dvp_probe() due to ->num being assigned after ->hws has been accessed UBSAN array-index-out-of-bounds in drivers/clk/bcm/clk-bcm2711-dvp.c592 index 0 is out of range for type struct clk_hw *[] __counted_by(num) (aka struct clk_hw *[]) Move the ->num initialization to before the first access of ->hws, which clears up the warning.",
  "count": 12,
  "results": [
    {
      "cwe_id": "125",
      "name": "Out-of-bounds Read",
      "abstraction": "Base",
      "score": 773.7034688720851,
      "original_score": 773.7034688720851,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "191",
      "name": "Integer Underflow (Wrap or Wraparound)",
      "abstraction": "Base",
      "score": 765.2433353577214,
      "original_score": 765.2433353577214,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "824",
      "name": "Access of Uninitialized Pointer",
      "abstraction": "Base",
      "score": 763.3304170112448,
      "original_score": 763.3304170112448,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "abstraction": "Base",
      "score": 760.3310342454872,
      "original_score": 760.3310342454872,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "908",
      "name": "Use of Uninitialized Resource",
      "abstraction": "Base",
      "score": 757.6363009935216,
      "original_score": 757.6363009935216,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "823",
      "name": "Use of Out-of-range Pointer Offset",
      "abstraction": "Base",
      "score": 753.423539669993,
      "original_score": 753.423539669993,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "909",
      "name": "Missing Initialization of Resource",
      "abstraction": "Class",
      "score": 744.6448339120229,
      "original_score": 744.6448339120229,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "abstraction": "Base",
      "score": 739.5266201051963,
      "original_score": 739.5266201051963,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "abstraction": "Class",
      "score": 727.4829510094204,
      "original_score": 727.4829510094204,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "401",
      "name": "Missing Release of Memory after Effective Lifetime",
      "abstraction": "Variant",
      "score": 703.9479399627019,
      "original_score": 703.9479399627019,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1285",
      "name": "Improper Validation of Specified Index, Position, or Offset in Input",
      "abstraction": "Base",
      "score": 692.4662689748674,
      "original_score": 692.4662689748674,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "119",
      "name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
      "abstraction": "Class",
      "score": 688.4036154903808,
      "original_score": 688.4036154903808,
      "mapping_usage": "Discouraged"
    }
  ],
  "statistics": {
    "min": 688.4036154903808,
    "max": 773.7034688720851,
    "mean": 739.1783604670536,
    "median": 749.034186791008,
    "count": 12
  }
}