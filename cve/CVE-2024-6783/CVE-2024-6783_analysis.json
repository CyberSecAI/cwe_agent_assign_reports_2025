{
  "cve_id": "CVE-2024-6783",
  "description": "A vulnerability has been discovered in Vue, that allows an attacker to perform **XSS** via **prototype pollution**. The attacker could change the prototype chain of some properties such as `Object.prototype.staticClass` or `Object.prototype.staticStyle` to execute arbitrary JavaScript code.",
  "key_phrases": {
    "rootcause": "prototype pollution",
    "weakness": [
      "XSS",
      "cross-site scripting"
    ],
    "impact": "execute arbitrary JavaScript code",
    "vector": "",
    "attacker": "attacker",
    "product": "Vue",
    "version": "",
    "component": ""
  },
  "reference_content": "Based on the provided content, here's a breakdown of the vulnerability:\n\n**Root Cause:**\n\n- The vulnerability stems from insufficient sanitization within the Vue 2 template compiler's AST (Abstract Syntax Tree) codegen pathway. Specifically, the compiler doesn't properly handle properties that are initially unset, leading to potential prototype pollution.\n- The template compiler creates a string of code to be executed which turns component templates into render functions. These render functions are evaluated by Vue within a stringified eval statement.\n\n**Weaknesses/Vulnerabilities:**\n\n- **Prototype Pollution:** An attacker can manipulate the prototype chain of `Object.prototype` properties, such as `staticClass` or `staticStyle`, due to missing checks for `hasOwnProperty` or explicit setting to `undefined` during AST node creation.\n- **Client-Side XSS:** By polluting the prototype, an attacker can inject and execute arbitrary JavaScript code within the browser when a vulnerable component is rendered.\n\n**Impact of Exploitation:**\n\n- **Arbitrary Code Execution:** Successful exploitation allows an attacker to execute malicious JavaScript code within the context of the victim's browser. This can lead to various impacts, such as:\n    - Data theft (accessing cookies, local storage, session data)\n    - Session hijacking\n    - Redirecting users to malicious sites\n    - Defacing the website\n    - Performing actions on behalf of the user\n\n**Attack Vectors:**\n\n- **Network:** The vulnerability can be exploited remotely through the network.\n- **In-browser template compilation:** The vulnerability is present in the in-browser Vue template compiler, which is responsible for creating render functions from string templates.\n\n**Required Attacker Capabilities/Position:**\n\n- **Low Privileges:** The attacker does not need high privileges to exploit this vulnerability.\n- **Ability to influence template compilation:** The attacker needs to be able to influence the content of a Vue template in a way that will trigger the vulnerable code path. This could be through direct manipulation of the template string or by controlling the data that is used to populate the template.\n- **No user interaction:** This vulnerability does not require user interaction.\n\n**Additional Details:**\n\n- The vulnerability is present in the \"full build\" of Vue 2, which includes the in-browser template compiler.\n- The `staticClass` property is vulnerable when a template string uses the `class` attribute with a non-dynamic class.\n- The issue is related to how properties of `ASTElement` are handled during codegen.\n- The vulnerability is considered to be of \"Medium\" severity.\n\n**Affected Versions:**\n\n- Vue versions >= 2.0.0 and < 3.0.0.\n\n**Patched Versions:**\n\n- This vulnerability is fixed in Vue 3.0.0 and later.\n- HeroDevs also provides a patched version for Vue 2 called \"Vue 2 NES\" in versions v2.6.17 and v2.7.19.\n\nThe provided content gives a good overview of the vulnerability, its root cause, how it can be exploited, and its impact. It also provides specific technical details, such as the vulnerable properties and code examples to reproduce it.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-1321 | Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution') | 1.0 | Variant | Primary | Allowed |\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 0.9 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.95\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is **CWE-1321 (Variant)**, which directly addresses the **prototype pollution** vulnerability. **CWE-79 (Base)** is a secondary weakness, representing the resulting **XSS** vulnerability, which is the impact of the prototype pollution. **CWE-1321** can precede **CWE-79** in a vulnerability chain, where the uncontrolled modification of object prototypes leads to the execution of arbitrary JavaScript code, resulting in **cross-site scripting**. The abstraction levels are appropriate, with **CWE-1321** as a Variant providing a specific root cause, and **CWE-79** as a Base offering a clear description of the resulting XSS.\n\n```mermaid\ngraph TD\n    cwe1321[\"CWE-1321: Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    \n    cwe1321 -->|CANPRECEDE| cwe79\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe1321 primary\n    class cwe79 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **CWE-1321**, the **improperly controlled modification of object prototype attributes** (**prototype pollution**). This leads to the ability to **execute arbitrary JavaScript code**, which manifests as **CWE-79**, **Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')**. The initial flaw is the **lack of control over object prototype modifications**, and the final impact is the **execution of arbitrary JavaScript code via XSS**.\n\n## Summary of Analysis\nThe analysis strongly suggests that **CWE-1321** is the primary cause, as the vulnerability description explicitly mentions **prototype pollution**. The evidence is the statement \"The attacker could change the prototype chain of some properties such as `Object.prototype.staticClass` or `Object.prototype.staticStyle` to execute arbitrary JavaScript code.\" This directly aligns with the description of **CWE-1321**.\n\n**CWE-79** is a secondary weakness because the **XSS** vulnerability is the result of the **prototype pollution**. The attacker modifies object prototypes to inject malicious script, which is then executed in the user's browser.\n\nThe graph relationships support the selection, as **CWE-1321** can precede **CWE-79** in a vulnerability chain. This indicates that the **prototype pollution** is the root cause, leading to the **XSS** vulnerability.\n\nThe selected CWEs are at the optimal level of specificity. **CWE-1321** is a Variant that specifically addresses **prototype pollution**, while **CWE-79** is a Base CWE that clearly describes the resulting **XSS** vulnerability.\n\nOther CWEs Considered:\n\n*   **CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)**: While related to XSS, it doesn't address the root cause of **prototype pollution**.\n*   **CWE-116: Improper Encoding or Escaping of Output**: This is related to output handling, but the core issue is the **prototype pollution** allowing arbitrary code execution.\n*   **CWE-352: Cross-Site Request Forgery (CSRF)**: This is a different type of web vulnerability and doesn't apply to the given description.\n*   **CWE-502: Deserialization of Untrusted Data**: This is related to deserialization issues, but not relevant to the **prototype pollution** described.\n*   **CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')**: While it involves type issues, it is not the primary issue of prototype modification.\n*   **CWE-1188: Initialization of a Resource with an Insecure Default**: This is not the core issue; the vulnerability is about modifying existing prototypes.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-1321 | Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution') | 1.0 | Variant | Primary | Allowed |\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 0.9 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.95\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is **CWE-1321 (Variant)**, which directly addresses the **prototype pollution** vulnerability. **CWE-79 (Base)** is a secondary weakness, representing the resulting **XSS** vulnerability, which is the impact of the prototype pollution. **CWE-1321** can precede **CWE-79** in a vulnerability chain, where the uncontrolled modification of object prototypes leads to the execution of arbitrary JavaScript code, resulting in **cross-site scripting**. The abstraction levels are appropriate, with **CWE-1321** as a Variant providing a specific root cause, and **CWE-79** as a Base offering a clear description of the resulting XSS.\n\n```mermaid\ngraph TD\n    cwe1321[\"CWE-1321: Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    \n    cwe1321 -->|CANPRECEDE| cwe79\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe1321 primary\n    class cwe79 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **CWE-1321**, the **improperly controlled modification of object prototype attributes** (**prototype pollution**). This leads to the ability to **execute arbitrary JavaScript code**, which manifests as **CWE-79**, **Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')**. The initial flaw is the **lack of control over object prototype modifications**, and the final impact is the **execution of arbitrary JavaScript code via XSS**.\n\n## Summary of Analysis\nThe analysis strongly suggests that **CWE-1321** is the primary cause, as the vulnerability description explicitly mentions **prototype pollution**. The evidence is the statement \"The attacker could change the prototype chain of some properties such as `Object.prototype.staticClass` or `Object.prototype.staticStyle` to execute arbitrary JavaScript code.\" This directly aligns with the description of **CWE-1321**.\n\n**CWE-79** is a secondary weakness because the **XSS** vulnerability is the result of the **prototype pollution**. The attacker modifies object prototypes to inject malicious script, which is then executed in the user's browser.\n\nThe graph relationships support the selection, as **CWE-1321** can precede **CWE-79** in a vulnerability chain. This indicates that the **prototype pollution** is the root cause, leading to the **XSS** vulnerability.\n\nThe selected CWEs are at the optimal level of specificity. **CWE-1321** is a Variant that specifically addresses **prototype pollution**, while **CWE-79** is a Base CWE that clearly describes the resulting **XSS** vulnerability.\n\nOther CWEs Considered:\n\n*   **CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)**: While related to XSS, it doesn't address the root cause of **prototype pollution**.\n*   **CWE-116: Improper Encoding or Escaping of Output**: This is related to output handling, but the core issue is the **prototype pollution** allowing arbitrary code execution.\n*   **CWE-352: Cross-Site Request Forgery (CSRF)**: This is a different type of web vulnerability and doesn't apply to the given description.\n*   **CWE-502: Deserialization of Untrusted Data**: This is related to deserialization issues, but not relevant to the **prototype pollution** described.\n*   **CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')**: While it involves type issues, it is not the primary issue of prototype modification.\n*   **CWE-1188: Initialization of a Resource with an Insecure Default**: This is not the core issue; the vulnerability is about modifying existing prototypes.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-502:**\n- 502 (Deserialization of Untrusted Data) - ROOT\n\n\n**Chain starting from CWE-116:**\n- 116 (Improper Encoding or Escaping of Output) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "1321",
        "name": "Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')",
        "source": "sparse",
        "original_content": "The product receives input from an upstream component that specifies attributes that are to be initialized or updated in an object, but it does not properly control modifications of attributes of the object prototype.",
        "keyphrase_sources": [
          {
            "id": "rootcause:prototype pollution",
            "keyphrase": "prototype pollution",
            "type": "rootcause"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "impact:execute arbitrary JavaScript code",
            "keyphrase": "execute arbitrary JavaScript code",
            "type": "impact"
          },
          {
            "id": "attacker:attacker",
            "keyphrase": "attacker",
            "type": "attacker"
          },
          {
            "id": "product:Vue",
            "keyphrase": "Vue",
            "type": "product"
          }
        ]
      },
      "similarity": 565.3215025645275
    },
    {
      "metadata": {
        "doc_id": "1188",
        "name": "Initialization of a Resource with an Insecure Default",
        "source": "sparse",
        "original_content": "The product initializes or sets a resource with a default that is intended to be changed by the administrator, but the default is not secure.",
        "keyphrase_sources": [
          {
            "id": "rootcause:prototype pollution",
            "keyphrase": "prototype pollution",
            "type": "rootcause"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "impact:execute arbitrary JavaScript code",
            "keyphrase": "execute arbitrary JavaScript code",
            "type": "impact"
          },
          {
            "id": "attacker:attacker",
            "keyphrase": "attacker",
            "type": "attacker"
          },
          {
            "id": "product:Vue",
            "keyphrase": "Vue",
            "type": "product"
          }
        ]
      },
      "similarity": 300.9273540250434
    },
    {
      "metadata": {
        "doc_id": "843",
        "name": "Access of Resource Using Incompatible Type ('Type Confusion')",
        "source": "sparse",
        "original_content": "The product allocates or initializes a resource such as a pointer, object, or variable using one type, but it later accesses that resource using a type that is incompatible with the original type.",
        "keyphrase_sources": [
          {
            "id": "rootcause:prototype pollution",
            "keyphrase": "prototype pollution",
            "type": "rootcause"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "impact:execute arbitrary JavaScript code",
            "keyphrase": "execute arbitrary JavaScript code",
            "type": "impact"
          },
          {
            "id": "attacker:attacker",
            "keyphrase": "attacker",
            "type": "attacker"
          },
          {
            "id": "product:Vue",
            "keyphrase": "Vue",
            "type": "product"
          }
        ]
      },
      "similarity": 277.66694716168575
    },
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse",
        "original_content": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
        "keyphrase_sources": [
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          }
        ]
      },
      "similarity": 276.39878477993204
    },
    {
      "metadata": {
        "doc_id": "80",
        "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
        "source": "sparse",
        "original_content": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as \"<\", \">\", and \"&\" that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.",
        "keyphrase_sources": [
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          }
        ]
      },
      "similarity": 251.9022840955235
    },
    {
      "metadata": {
        "doc_id": "335",
        "name": "Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG)",
        "source": "sparse",
        "original_content": "The product uses a Pseudo-Random Number Generator (PRNG) but does not correctly manage seeds.",
        "keyphrase_sources": [
          {
            "id": "rootcause:prototype pollution",
            "keyphrase": "prototype pollution",
            "type": "rootcause"
          },
          {
            "id": "attacker:attacker",
            "keyphrase": "attacker",
            "type": "attacker"
          },
          {
            "id": "product:Vue",
            "keyphrase": "Vue",
            "type": "product"
          }
        ]
      },
      "similarity": 247.93399662565201
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse",
        "original_content": "The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.",
        "keyphrase_sources": [
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          }
        ]
      },
      "similarity": 210.34874557776672
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse",
        "original_content": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
        "keyphrase_sources": [
          {
            "id": "rootcause:prototype pollution",
            "keyphrase": "prototype pollution",
            "type": "rootcause"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "impact:execute arbitrary JavaScript code",
            "keyphrase": "execute arbitrary JavaScript code",
            "type": "impact"
          },
          {
            "id": "attacker:attacker",
            "keyphrase": "attacker",
            "type": "attacker"
          }
        ]
      },
      "similarity": 206.4477182358936
    },
    {
      "metadata": {
        "doc_id": "502",
        "name": "Deserialization of Untrusted Data",
        "source": "sparse",
        "original_content": "The product deserializes untrusted data without sufficiently ensuring that the resulting data will be valid.",
        "keyphrase_sources": [
          {
            "id": "impact:execute arbitrary JavaScript code",
            "keyphrase": "execute arbitrary JavaScript code",
            "type": "impact"
          }
        ]
      },
      "similarity": 82.30076953753567
    },
    {
      "metadata": {
        "doc_id": "707",
        "name": "Improper Neutralization",
        "source": "sparse",
        "original_content": "The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.",
        "keyphrase_sources": [
          {
            "id": "product:Vue",
            "keyphrase": "Vue",
            "type": "product"
          }
        ]
      },
      "similarity": 70.92776587120963
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-502",
      "CWE-116",
      "CWE-1321",
      "CWE-80",
      "CWE-79",
      "CWE-352",
      "CWE-843",
      "CWE-1188"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {
    "1321": [
      {
        "id": "rootcause:prototype pollution",
        "keyphrase": "prototype pollution",
        "type": "rootcause"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "impact:execute arbitrary JavaScript code",
        "keyphrase": "execute arbitrary JavaScript code",
        "type": "impact"
      },
      {
        "id": "attacker:attacker",
        "keyphrase": "attacker",
        "type": "attacker"
      },
      {
        "id": "product:Vue",
        "keyphrase": "Vue",
        "type": "product"
      }
    ],
    "1188": [
      {
        "id": "rootcause:prototype pollution",
        "keyphrase": "prototype pollution",
        "type": "rootcause"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "impact:execute arbitrary JavaScript code",
        "keyphrase": "execute arbitrary JavaScript code",
        "type": "impact"
      },
      {
        "id": "attacker:attacker",
        "keyphrase": "attacker",
        "type": "attacker"
      },
      {
        "id": "product:Vue",
        "keyphrase": "Vue",
        "type": "product"
      }
    ],
    "843": [
      {
        "id": "rootcause:prototype pollution",
        "keyphrase": "prototype pollution",
        "type": "rootcause"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "impact:execute arbitrary JavaScript code",
        "keyphrase": "execute arbitrary JavaScript code",
        "type": "impact"
      },
      {
        "id": "attacker:attacker",
        "keyphrase": "attacker",
        "type": "attacker"
      },
      {
        "id": "product:Vue",
        "keyphrase": "Vue",
        "type": "product"
      }
    ],
    "335": [
      {
        "id": "rootcause:prototype pollution",
        "keyphrase": "prototype pollution",
        "type": "rootcause"
      },
      {
        "id": "attacker:attacker",
        "keyphrase": "attacker",
        "type": "attacker"
      },
      {
        "id": "product:Vue",
        "keyphrase": "Vue",
        "type": "product"
      }
    ],
    "79": [
      {
        "id": "rootcause:prototype pollution",
        "keyphrase": "prototype pollution",
        "type": "rootcause"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "impact:execute arbitrary JavaScript code",
        "keyphrase": "execute arbitrary JavaScript code",
        "type": "impact"
      },
      {
        "id": "attacker:attacker",
        "keyphrase": "attacker",
        "type": "attacker"
      }
    ],
    "116": [
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      }
    ],
    "352": [
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      }
    ],
    "80": [
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      }
    ],
    "502": [
      {
        "id": "impact:execute arbitrary JavaScript code",
        "keyphrase": "execute arbitrary JavaScript code",
        "type": "impact"
      }
    ],
    "707": [
      {
        "id": "product:Vue",
        "keyphrase": "Vue",
        "type": "product"
      }
    ]
  }
}