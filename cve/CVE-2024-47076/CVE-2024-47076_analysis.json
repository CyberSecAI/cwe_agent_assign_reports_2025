{
  "cve_id": "CVE-2024-47076",
  "description": "CUPS is a standards-based, open-source printing system, and `libcupsfilters` contains the code of the filters of the former `cups-filters` package as library functions to be used for the data format conversion tasks needed in Printer Applications. The `cfGetPrinterAttributes5` function in `libcupsfilters` **does not sanitize IPP attributes** returned from an IPP server. When these IPP attributes are used, for instance, to generate a PPD file, this can lead to attacker controlled data to be provided to the rest of the CUPS system.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "does not sanitize IPP attributes",
    "impact": "attacker controlled data",
    "vector": "",
    "attacker": "",
    "product": "libcupsfilters",
    "version": "",
    "component": "cfGetPrinterAttributes5 function"
  },
  "reference_content": "Based on the provided content, here's an analysis of CVE-2024-47076:\n\n**Verification:**\n\nThe provided content directly mentions CVE-2024-47076, specifically in the context of `libcupsfilters` and its function `cfGetPrinterAttributes5`. The content also details the exploit chain that includes this vulnerability, confirming its relevance.\n\n**Vulnerability Details:**\n\n*   **Root Cause:** The `cfGetPrinterAttributes5` function within `libcupsfilters` fails to sanitize IPP attributes received from an IPP server. This lack of sanitization allows an attacker to inject arbitrary data through these attributes.\n*   **Weaknesses/Vulnerabilities Present:**\n    *   **Lack of Input Sanitization:** The primary weakness is the absence of proper sanitization of IPP attributes in `cfGetPrinterAttributes5`. This means that any data provided by a malicious IPP server is blindly accepted.\n    *   **Improper Data Handling**: The vulnerability allows for injection of arbitrary data into a PPD file.\n*  **Impact of Exploitation:** When combined with other vulnerabilities in the CUPS printing system, this lack of sanitization leads to arbitrary code execution on the target machine. Specifically, the injected data can be used to insert malicious commands into a PPD file, which are later executed.\n*   **Attack Vectors:**\n    *   **Network-based:** An attacker can exploit this vulnerability by setting up a malicious IPP server, then advertising that server as a printer over the network, either locally or remotely.\n    *   **UDP Packet:** A specifically crafted UDP packet sent to the target system on port 631 will trigger the vulnerability. The packet includes a URL pointing to the malicious IPP server.\n*   **Required Attacker Capabilities/Position:**\n    *   **Network Access:** The attacker needs to be able to send UDP packets to the target system (either on the local network or over the internet if port 631 is exposed).\n    *   **Malicious IPP Server:** The attacker must have a malicious IPP server to provide the crafted, unsanitized attributes.\n\n**Additional Details:**\n\n*   **Exploit Chain:** The content describes how this vulnerability is part of a larger exploit chain. It requires a series of vulnerabilities across different components of the CUPS printing system to achieve remote code execution:\n    1.  **cups-browsed:**  Listens on UDP port 631 and accepts arbitrary URLs, which can point to an attacker-controlled IPP server.\n    2.  **libcupsfilters:** The vulnerable `cfGetPrinterAttributes5` function fetches unsanitized IPP attributes from the malicious server.\n    3.  **libppd:** `ppdCreatePPDFromIPP2` function then takes the unsanitized attributes and injects them into a temporary PPD file.\n    4.  **cups-filters:** `foomatic-rip` filter executes arbitrary commands defined in the PPD file (through the `FoomaticRIPCommandLine` directive).\n*   **Affected versions:** The vulnerability affects versions of `libcupsfilters` up to and including 2.1b1.\n*   **Patch Status:** No patches were available at the time of writing.\n*   **Severity:** The vulnerability is considered low in isolation, but as part of a chain, it leads to a high severity vulnerability, remote code execution, as described in the `cups-browsed` advisory.\n*   **CVE ID:** The CVE ID for this specific vulnerability is **CVE-2024-47076**, but it's tied to CVE-2024-47176, CVE-2024-47175 and CVE-2024-47177, which represent the full RCE chain.\n*   **Credits:** The vulnerability was reported by \"evilsocket.\"\n\n**Summary**\nCVE-2024-47076 is a vulnerability in libcupsfilters where the cfGetPrinterAttributes5 function does not sanitize IPP attributes returned from an IPP server. This vulnerability allows for the injection of malicious data that, when combined with other vulnerabilities, enables remote code execution through the CUPS printing system.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-791 | Incomplete Filtering of Special Elements | 0.8 | Base | Allowed | Primary CWE. The **lack of sanitization of IPP attributes** is the root cause. |\n| CWE-94 | Improper Control of Generation of Code ('Code Injection') | 0.6 | Base | Allowed-with-Review | Secondary CWE. The **attacker controlled data** is provided to the rest of the CUPS system, which enables code injection. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.7\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary CWE is CWE-791, \"Incomplete Filtering of Special Elements,\" because the root cause of the vulnerability is the **lack of sanitization** of IPP attributes. CWE-94, \"Improper Control of Generation of Code ('Code Injection')\" is a secondary CWE because the unsanitized input leads to code injection in the CUPS printing system. CWE-791 is a base level CWE, which is the preferred level of abstraction.\n\n```mermaid\ngraph TD\n    cwe791[\"CWE-791: Incomplete Filtering of Special Elements\"]\n    cwe94[\"CWE-94: Improper Control of Generation of Code ('Code Injection')\"]\n    cwe77[\"CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')\"]\n    cwe78[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n    cwe917[\"CWE-917: Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')\"]\n    \n    cwe78 -->|CHILDOF| cwe77\n    cwe917 -->|CHILDOF| cwe77\n    cwe791 -->|CANPRECEDE| cwe94\n    cwe78 -->|CHILDOF| cwe74\n    cwe917 -->|CHILDOF| cwe74\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe791 primary\n    class cwe94 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **lack of sanitization** of IPP attributes (CWE-791) by `cfGetPrinterAttributes5`. This leads to **attacker controlled data** being used to generate a PPD file, which can then be used to inject arbitrary commands (CWE-94).\n\n## Summary of Analysis\nThe primary weakness is the **lack of input sanitization** in the `cfGetPrinterAttributes5` function, which allows for the injection of arbitrary data. This matches CWE-791, \"Incomplete Filtering of Special Elements.\" The injected data then leads to code injection, making CWE-94, \"Improper Control of Generation of Code ('Code Injection')\" a secondary weakness.\n\nThe vulnerability description states: \"The `cfGetPrinterAttributes5` function in `libcupsfilters` **does not sanitize IPP attributes** returned from an IPP server. When these IPP attributes are used, for instance, to generate a PPD file, this can lead to attacker controlled data to be provided to the rest of the CUPS system.\" This is direct evidence that the root cause is the **lack of sanitization**, and the impact is **attacker controlled data** being injected.\n\nThe retriever results also support the selection of CWE-791, with a dense score of 0.395.\n\nCWE-78 \"Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\" and CWE-79 \"Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\" were considered but not used as they are more specific cases of injection that do not fully represent the general problem of **incomplete filtering of special elements**.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-791 | Incomplete Filtering of Special Elements | 0.8 | Base | Allowed | Primary CWE. The **lack of sanitization of IPP attributes** is the root cause. |\n| CWE-94 | Improper Control of Generation of Code ('Code Injection') | 0.6 | Base | Allowed-with-Review | Secondary CWE. The **attacker controlled data** is provided to the rest of the CUPS system, which enables code injection. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.7\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary CWE is CWE-791, \"Incomplete Filtering of Special Elements,\" because the root cause of the vulnerability is the **lack of sanitization** of IPP attributes. CWE-94, \"Improper Control of Generation of Code ('Code Injection')\" is a secondary CWE because the unsanitized input leads to code injection in the CUPS printing system. CWE-791 is a base level CWE, which is the preferred level of abstraction.\n\n```mermaid\ngraph TD\n    cwe791[\"CWE-791: Incomplete Filtering of Special Elements\"]\n    cwe94[\"CWE-94: Improper Control of Generation of Code ('Code Injection')\"]\n    cwe77[\"CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')\"]\n    cwe78[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n    cwe917[\"CWE-917: Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')\"]\n    \n    cwe78 -->|CHILDOF| cwe77\n    cwe917 -->|CHILDOF| cwe77\n    cwe791 -->|CANPRECEDE| cwe94\n    cwe78 -->|CHILDOF| cwe74\n    cwe917 -->|CHILDOF| cwe74\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe791 primary\n    class cwe94 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **lack of sanitization** of IPP attributes (CWE-791) by `cfGetPrinterAttributes5`. This leads to **attacker controlled data** being used to generate a PPD file, which can then be used to inject arbitrary commands (CWE-94).\n\n## Summary of Analysis\nThe primary weakness is the **lack of input sanitization** in the `cfGetPrinterAttributes5` function, which allows for the injection of arbitrary data. This matches CWE-791, \"Incomplete Filtering of Special Elements.\" The injected data then leads to code injection, making CWE-94, \"Improper Control of Generation of Code ('Code Injection')\" a secondary weakness.\n\nThe vulnerability description states: \"The `cfGetPrinterAttributes5` function in `libcupsfilters` **does not sanitize IPP attributes** returned from an IPP server. When these IPP attributes are used, for instance, to generate a PPD file, this can lead to attacker controlled data to be provided to the rest of the CUPS system.\" This is direct evidence that the root cause is the **lack of sanitization**, and the impact is **attacker controlled data** being injected.\n\nThe retriever results also support the selection of CWE-791, with a dense score of 0.395.\n\nCWE-78 \"Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\" and CWE-79 \"Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\" were considered but not used as they are more specific cases of injection that do not fully represent the general problem of **incomplete filtering of special elements**.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-94:**\n- 94 (Improper Control of Generation of Code ('Code Injection')) - ROOT\n\n\n**Chain starting from CWE-77:**\n- 77 (Improper Neutralization of Special Elements used in a Command ('Command Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "1321",
        "name": "Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')",
        "source": "sparse"
      },
      "similarity": 472.4165072297158
    },
    {
      "metadata": {
        "doc_id": "917",
        "name": "Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')",
        "source": "sparse"
      },
      "similarity": 436.7445398583923
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse"
      },
      "similarity": 435.28976626412015
    },
    {
      "metadata": {
        "doc_id": "138",
        "name": "Improper Neutralization of Special Elements",
        "source": "sparse"
      },
      "similarity": 434.4009825330131
    },
    {
      "metadata": {
        "doc_id": "94",
        "name": "Improper Control of Generation of Code ('Code Injection')",
        "source": "sparse"
      },
      "similarity": 432.28508077936533
    },
    {
      "metadata": {
        "doc_id": "639",
        "name": "Authorization Bypass Through User-Controlled Key",
        "source": "sparse"
      },
      "similarity": 422.50287455379856
    },
    {
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "source": "sparse"
      },
      "similarity": 422.4463598471447
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 417.4755507642934
    },
    {
      "metadata": {
        "doc_id": "791",
        "name": "Incomplete Filtering of Special Elements",
        "type": "Base",
        "original_content": "The product receives data from an upstream component, but does not completely filter special elements before sending it to a downstream component.",
        "keyphrase_source": "weakness:does not sanitize IPP attributes",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.3950202063436522,
            "graph": 1.4520734086876672
          }
        }
      },
      "similarity": 0.3950202063436522
    },
    {
      "doc_id": "471",
      "text": "CWE-471: Modification of Assumed-Immutable Data (MAID)",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "471",
        "name": "Modification of Assumed-Immutable Data (MAID)",
        "type": "base",
        "original_content": "CWE-471: Modification of Assumed-Immutable Data (MAID)",
        "relationships": [
          {
            "source_id": "471",
            "target_id": "621",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "607",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "602",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "473",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "472",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "425",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "291",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "1321",
            "label": "CANFOLLOW",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "1282",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "664",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "664",
            "target_id": "471",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "621",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "607",
            "target_id": "471",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "602",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "473",
            "target_id": "471",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "472",
            "target_id": "471",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "425",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "291",
            "target_id": "471",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1321",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1282",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "1321",
                  "471",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "1321"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "1321",
                  "471",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_forward",
              "source": "1321"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-94",
      "CWE-77",
      "CWE-917",
      "CWE-79",
      "CWE-791",
      "CWE-74",
      "CWE-78"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}