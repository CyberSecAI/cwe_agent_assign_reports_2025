{
  "query": "In the Linux kernel, the following vulnerability has been resolved platform/x86 dell-uart-backlight fix serdev race The dell_uart_bl_serdev_probe() function calls devm_serdev_device_open() before setting the client ops via serdev_device_set_client_ops(). This ordering can trigger a NULL pointer dereference in the serdev controllers receive_buf handler, as it assumes serdev->ops is valid when SERPORT_ACTIVE is set. This is similar to the issue fixed in commit 5e700b384ec1 (platform/chrome cros_ec_uart properly fix race condition) where devm_serdev_device_open() was called before fully initializing the device. Fix the race by ensuring client ops are set before enabling the port via devm_serdev_device_open(). Note, serdev_device_set_baudrate() and serdev_device_set_flow_control() calls should be after the devm_serdev_device_open() call.",
  "count": 12,
  "results": [
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "abstraction": "Class",
      "score": 1000.0,
      "original_score": 1000.0,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "abstraction": "Base",
      "score": 515.0864391986545,
      "original_score": 515.0864391986545,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "abstraction": "Base",
      "score": 514.5708806696651,
      "original_score": 514.5708806696651,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "364",
      "name": "Signal Handler Race Condition",
      "abstraction": "Base",
      "score": 513.2083314276317,
      "original_score": 513.2083314276317,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "abstraction": "Class",
      "score": 504.40372819037384,
      "original_score": 504.40372819037384,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "415",
      "name": "Double Free",
      "abstraction": "Variant",
      "score": 490.8694538976979,
      "original_score": 490.8694538976979,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "252",
      "name": "Unchecked Return Value",
      "abstraction": "Base",
      "score": 481.35420245148555,
      "original_score": 481.35420245148555,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "824",
      "name": "Access of Uninitialized Pointer",
      "abstraction": "Base",
      "score": 464.38487663061153,
      "original_score": 464.38487663061153,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "125",
      "name": "Out-of-bounds Read",
      "abstraction": "Base",
      "score": 459.82409275682596,
      "original_score": 459.82409275682596,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "abstraction": "Base",
      "score": 458.2604392466298,
      "original_score": 458.2604392466298,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "665",
      "name": "Improper Initialization",
      "abstraction": "Class",
      "score": 444.297341054969,
      "original_score": 444.297341054969,
      "mapping_usage": "Discouraged"
    },
    {
      "cwe_id": "617",
      "name": "Reachable Assertion",
      "abstraction": "Base",
      "score": 441.1935964756639,
      "original_score": 441.1935964756639,
      "mapping_usage": "Allowed"
    }
  ],
  "statistics": {
    "min": 441.1935964756639,
    "max": 1000.0,
    "mean": 523.9544485000175,
    "median": 486.1118281745917,
    "count": 12
  }
}