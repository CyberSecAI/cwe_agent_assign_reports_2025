{
  "cve_id": "CVE-2025-3048",
  "description": "After completing a build with AWS Serverless Application Model Command Line Interface (SAM CLI) which include symlinks, the content of those symlinks are copied to the cache of the local workspace as regular files or directories. As a result, a user who does not have access to those symlinks outside of the Docker container would now have access via the local workspace. Users should upgrade to version 1.134.0 and ensure any forked or derivative code is patched to incorporate the new fixes. After upgrading, users must re-build their applications using the sam build --use-container to update the symlinks.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "symlinks copied to cache as regular files",
    "impact": "gain access to symlinks",
    "vector": "",
    "attacker": "unauthorized user",
    "product": "AWS Serverless Application Model Command Line Interface",
    "version": "prior to 1.134.0",
    "component": ""
  },
  "reference_content": "## Analysis of CVE-2025-3048 based on provided content:\n\nThe provided content details a path traversal vulnerability in AWS SAM CLI. Here's a breakdown of the relevant information:\n\n**Root cause of vulnerability:**\n\nThe vulnerability occurs because, after a build with AWS SAM CLI that includes symlinks, the content of those symlinks is copied to the local workspace cache as regular files or directories. This allows a user without access to the original symlink targets outside the Docker container to access them through the local workspace.\n\n**Weaknesses/vulnerabilities present:**\n\n*   Path Traversal (CWE-22)\n*   Improper handling of symlinks during the build process.\n\n**Impact of exploitation:**\n\n*   Potential access to content of linked files in the SAM CLI cache that the user would not normally have access to.\n*   The issue is limited to the local workspace and does not affect AWS services, production environments, or cross-account resources.\n\n**Attack vectors:**\n\n*   Exploitation occurs during the `sam build --use-container` process when symlinks are present in the build files.\n\n**Required attacker capabilities/position:**\n\n*   The attacker needs to be a user who can execute the `sam build --use-container` command with files containing symlinks.\n*   No special privileges are required.\n\n**Mitigation or fix:**\n\n*   Upgrade to AWS SAM CLI version 1.134.0 or newer.\n*   After upgrading, rebuild applications using `sam build --use-container` to update the symlinks.\n\n**Additional Details (more detail than official CVE description):**\n\n*   The vulnerability affects versions <= AWS SAM CLI v1.133.0.\n*   There is no recommended workaround; upgrading is the advised solution.\n*   Credit is given to Kevin Backhouse of the GitHub Security Lab for discovering and reporting the vulnerability.\n*   CVSS v3 score: 6.5 (Moderate)\n*   CVSS vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N\n\nThe content provides a comprehensive description of the vulnerability, its impact, and how to mitigate it.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-59 | Improper Link Resolution Before File Access ('Link Following') | 0.85 | Base | Allowed | Primary CWE - Addresses the **improper handling of symbolic links** during file access. |\n| CWE-367 | Time-of-check Time-of-use (TOCTOU) Race Condition | 0.65 | Base | Allowed | Secondary CWE - A race condition could theoretically exist during the copying of symlink contents. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.75\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary CWE, CWE-59, describes the core issue of **improperly handling symlinks**. CWE-367, a secondary consideration, represents a potential race condition that *could* occur during the symlink processing. The relationship between these CWEs is that CWE-367 (Time-of-check Time-of-use Race Condition) can precede CWE-59 (Improper Link Resolution Before File Access ('Link Following')). CWE-59 is at the Base level of abstraction, which is a preferred level.\n\n```mermaid\ngraph TD\n    cwe59[\"CWE-59: Improper Link Resolution Before File Access\"]\n    cwe367[\"CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\"]\n\n    cwe367 -->|CANPRECEDE| cwe59\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe59 primary\n    class cwe367 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the AWS SAM CLI **improperly handling symlinks** during the build process, leading to the content of these symlinks being copied to the local workspace cache as regular files/directories. This results in unauthorized users gaining access to the symlink content.\n\n## Summary of Analysis\nThe initial analysis focused on identifying the root cause of the vulnerability. The description clearly states that the issue lies in how AWS SAM CLI handles symlinks. After building an application with symlinks, it copies the content of the symlinks to the local workspace cache as regular files or directories. This copying action allows users without the necessary permissions outside the Docker container to access these files, representing a significant security risk.\n\nThe primary CWE selected is **CWE-59: Improper Link Resolution Before File Access ('Link Following')**. This is because the vulnerability stems from the product's failure to properly prevent a filename from identifying a link or shortcut that resolves to an unintended resource, as evidenced by:\n\n*   \"After completing a build with AWS Serverless Application Model Command Line Interface (SAM CLI) which include symlinks, the content of those symlinks are copied to the cache of the local workspace as regular files or directories.\"\n*   \"As a result, a user who does not have access to those symlinks outside of the Docker container would now have access via the local workspace.\"\n\nCWE-59 accurately describes the **improper handling of symbolic links** during file access, which is the core issue.\n\nCWE-367 (Time-of-check Time-of-use (TOCTOU) Race Condition) was considered as a secondary CWE because there *could* be a race condition during the copying of the symlink content, but there is not sufficient evidence in the vulnerability description to confirm this. It is included because the Retriever results identified it as a potential issue and this can precede CWE-59.\n\nCWE-61 (UNIX Symbolic Link (Symlink) Following) was considered but not selected as the primary CWE because it is a compound weakness. The root cause is the **improper handling of the symlink**, which is better captured by CWE-59.\n\nThe selected CWEs are at the optimal level of specificity, with CWE-59 being a Base level CWE. This provides a clear and accurate representation of the vulnerability.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-59 | Improper Link Resolution Before File Access ('Link Following') | 0.85 | Base | Allowed | Primary CWE - Addresses the **improper handling of symbolic links** during file access. |\n| CWE-367 | Time-of-check Time-of-use (TOCTOU) Race Condition | 0.65 | Base | Allowed | Secondary CWE - A race condition could theoretically exist during the copying of symlink contents. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.75\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary CWE, CWE-59, describes the core issue of **improperly handling symlinks**. CWE-367, a secondary consideration, represents a potential race condition that *could* occur during the symlink processing. The relationship between these CWEs is that CWE-367 (Time-of-check Time-of-use Race Condition) can precede CWE-59 (Improper Link Resolution Before File Access ('Link Following')). CWE-59 is at the Base level of abstraction, which is a preferred level.\n\n```mermaid\ngraph TD\n    cwe59[\"CWE-59: Improper Link Resolution Before File Access\"]\n    cwe367[\"CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\"]\n\n    cwe367 -->|CANPRECEDE| cwe59\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe59 primary\n    class cwe367 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the AWS SAM CLI **improperly handling symlinks** during the build process, leading to the content of these symlinks being copied to the local workspace cache as regular files/directories. This results in unauthorized users gaining access to the symlink content.\n\n## Summary of Analysis\nThe initial analysis focused on identifying the root cause of the vulnerability. The description clearly states that the issue lies in how AWS SAM CLI handles symlinks. After building an application with symlinks, it copies the content of the symlinks to the local workspace cache as regular files or directories. This copying action allows users without the necessary permissions outside the Docker container to access these files, representing a significant security risk.\n\nThe primary CWE selected is **CWE-59: Improper Link Resolution Before File Access ('Link Following')**. This is because the vulnerability stems from the product's failure to properly prevent a filename from identifying a link or shortcut that resolves to an unintended resource, as evidenced by:\n\n*   \"After completing a build with AWS Serverless Application Model Command Line Interface (SAM CLI) which include symlinks, the content of those symlinks are copied to the cache of the local workspace as regular files or directories.\"\n*   \"As a result, a user who does not have access to those symlinks outside of the Docker container would now have access via the local workspace.\"\n\nCWE-59 accurately describes the **improper handling of symbolic links** during file access, which is the core issue.\n\nCWE-367 (Time-of-check Time-of-use (TOCTOU) Race Condition) was considered as a secondary CWE because there *could* be a race condition during the copying of the symlink content, but there is not sufficient evidence in the vulnerability description to confirm this. It is included because the Retriever results identified it as a potential issue and this can precede CWE-59.\n\nCWE-61 (UNIX Symbolic Link (Symlink) Following) was considered but not selected as the primary CWE because it is a compound weakness. The root cause is the **improper handling of the symlink**, which is better captured by CWE-59.\n\nThe selected CWEs are at the optimal level of specificity, with CWE-59 being a Base level CWE. This provides a clear and accurate representation of the vulnerability.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-59:**\n- 59 (Improper Link Resolution Before File Access ('Link Following')) - ROOT\n\n\n**Chain starting from CWE-367:**\n- 367 (Time-of-check Time-of-use (TOCTOU) Race Condition) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "59",
        "name": "Improper Link Resolution Before File Access ('Link Following')",
        "source": "sparse"
      },
      "similarity": 606.0538411243897
    },
    {
      "metadata": {
        "doc_id": "61",
        "name": "UNIX Symbolic Link (Symlink) Following",
        "source": "sparse"
      },
      "similarity": 590.6500611264224
    },
    {
      "metadata": {
        "doc_id": "668",
        "name": "Exposure of Resource to Wrong Sphere",
        "source": "sparse"
      },
      "similarity": 522.6296883073244
    },
    {
      "metadata": {
        "doc_id": "732",
        "name": "Incorrect Permission Assignment for Critical Resource",
        "source": "sparse"
      },
      "similarity": 504.28480272109726
    },
    {
      "metadata": {
        "doc_id": "276",
        "name": "Incorrect Default Permissions",
        "source": "sparse"
      },
      "similarity": 501.9023759323729
    },
    {
      "metadata": {
        "doc_id": "367",
        "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
        "source": "sparse"
      },
      "similarity": 501.4346900837866
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 491.8140134316961
    },
    {
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "source": "sparse"
      },
      "similarity": 490.0235635647656
    },
    {
      "metadata": {
        "doc_id": "277",
        "name": "Insecure Inherited Permissions",
        "type": "Variant",
        "original_content": "A product defines a set of insecure permissions that are inherited by objects that are created by the program.",
        "keyphrase_source": "weakness:symlinks copied to cache as regular files",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.43097103283633653,
            "graph": 1.4858210975727664
          }
        }
      },
      "similarity": 0.43097103283633653
    },
    {
      "doc_id": "363",
      "text": "CWE-363: Race Condition Enabling Link Following",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "363",
        "name": "Race Condition Enabling Link Following",
        "type": "base",
        "original_content": "CWE-363: Race Condition Enabling Link Following",
        "relationships": [
          {
            "source_id": "363",
            "target_id": "59",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "363",
            "target_id": "367",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "59",
            "target_id": "363",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "367",
            "target_id": "363",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "59",
                  "363",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "59"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "59",
                  "363",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "59"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "363",
                  "59",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "59"
            }
          }
        },
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-59",
      "CWE-367",
      "CWE-61"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}