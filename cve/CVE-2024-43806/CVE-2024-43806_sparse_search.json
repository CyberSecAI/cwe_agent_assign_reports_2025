{
  "retriever": "sparse",
  "query": "Rustix is a set of safe Rust bindings to POSIX-ish APIs. When using `rustixfsDir` using the `linux_raw` backend, its possible for the iterator to get stuck when an IO error is encountered. Combined with a memory over-allocation issue in `rustixfsDirread_more`, this can cause quick and unbounded memory explosion (gigabytes in a few seconds if used on a hot path) and eventually lead to an OOM crash of the application. The symptoms were initially discovered in https//github.com/imsnif/bandwhich/issues/284. That post has lots of details of our investigation. Full details can be read on the GHSA-c827-hfw6-qwvm repo advisory. If a program tries to access a directory with its file descriptor after the file has been unlinked (or any other action that leaves the `Dir` iterator in the stuck state), and the implementation does not break after seeing an error, it can cause a memory explosion. As an example, Linuxs various virtual file systems (e.g. `/proc`, `/sys`) can contain directories that spontaneously pop in and out of existence. Attempting to iterate over them using `rustixfsDir` directly or indirectly (e.g. with the `procfs` crate) can trigger this fault condition if the implementation decides to continue on errors. An attacker knowledgeable about the implementation details of a vulnerable target can therefore try to trigger this fault condition via any one or a combination of several available APIs. If successful, the application host will quickly run out of m",
  "keyphrases": {
    "rootcause": [
      "memory over-allocation"
    ]
  },
  "timestamp": "2025-07-13 15:15:37",
  "cve_id": "CVE-2024-43806",
  "result_count": 11,
  "results": [
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 1237.924391441624,
      "search_source": "rootcause:memory over-allocation"
    },
    {
      "cwe_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "score": 1183.9915024763377,
      "search_source": "rootcause:memory over-allocation"
    },
    {
      "cwe_id": "125",
      "name": "Out-of-bounds Read",
      "score": 1180.9242010372018,
      "search_source": "rootcause:memory over-allocation"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 1174.3374526145583,
      "search_source": "rootcause:memory over-allocation"
    },
    {
      "cwe_id": "401",
      "name": "Missing Release of Memory after Effective Lifetime",
      "score": 1173.54318107105,
      "search_source": "rootcause:memory over-allocation"
    },
    {
      "cwe_id": "789",
      "name": "Memory Allocation with Excessive Size Value",
      "score": 1168.4292932020737,
      "search_source": "rootcause:memory over-allocation"
    },
    {
      "cwe_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "score": 1155.9407478357866,
      "search_source": "rootcause:memory over-allocation"
    },
    {
      "cwe_id": "190",
      "name": "Integer Overflow or Wraparound",
      "score": 1151.1998430389697,
      "search_source": "rootcause:memory over-allocation"
    },
    {
      "cwe_id": "200",
      "name": "Exposure of Sensitive Information to an Unauthorized Actor",
      "score": 1149.411199385009,
      "search_source": "rootcause:memory over-allocation"
    },
    {
      "cwe_id": "22",
      "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
      "score": 1145.2552714493224,
      "search_source": "rootcause:memory over-allocation"
    },
    {
      "cwe_id": "863",
      "name": "Incorrect Authorization",
      "score": 378.5334110811425,
      "search_source": "base_query"
    }
  ]
}