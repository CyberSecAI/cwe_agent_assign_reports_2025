{
  "cve_id": "CVE-2024-42950",
  "description": "Tenda FH1201 v1.2.0.14 (408) was discovered to contain a **stack overflow** via the Go parameter in the fromSafeClientFilter function. This vulnerability allows attackers to cause a Denial of Service (DoS) via a crafted POST request.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "stack overflow",
    "impact": "Denial of Service",
    "vector": "crafted POST request",
    "attacker": "attackers",
    "product": "Tenda FH1201",
    "version": "v1.2.0.14 (408)",
    "component": "fromSafeClientFilter function"
  },
  "reference_content": "- **Root cause of vulnerability**: The `fromSafeClientFilter` function in Tenda FH1201 firmware copies a user-supplied parameter `Go` into a fixed-size buffer using `strcpy`.\n- **Weaknesses/vulnerabilities present**: Stack-based buffer overflow.\n- **Impact of exploitation**: A successful exploit can lead to a denial of service (DoS) or potentially arbitrary code execution on the device.\n- **Attack vectors**: Sending a POST request to `/goform/SafeClientFilter` with an oversized `Go` parameter.\n- **Required attacker capabilities/position**: The attacker needs to be able to send HTTP requests to the vulnerable device. This often means being on the same local network as the router.",
  "similar_info": {
    "cwe_distribution": {
      "95": {
        "cwe_counts": {
          "CWE-787": 8
        },
        "total_samples": 8,
        "distribution": [
          {
            "cwes": [
              "CWE-787"
            ],
            "frequency": 8,
            "proportion": 1.0
          }
        ]
      },
      "90": {
        "cwe_counts": {
          "CWE-787": 29
        },
        "total_samples": 29,
        "distribution": [
          {
            "cwes": [
              "CWE-787"
            ],
            "frequency": 29,
            "proportion": 1.0
          }
        ]
      },
      "85": {
        "cwe_counts": {
          "CWE-787": 29
        },
        "total_samples": 29,
        "distribution": [
          {
            "cwes": [
              "CWE-787"
            ],
            "frequency": 29,
            "proportion": 1.0
          }
        ]
      },
      "80": {
        "cwe_counts": {
          "CWE-787": 21,
          "CWE-120": 4
        },
        "total_samples": 25,
        "distribution": [
          {
            "cwes": [
              "CWE-787"
            ],
            "frequency": 21,
            "proportion": 0.84
          },
          {
            "cwes": [
              "CWE-120"
            ],
            "frequency": 4,
            "proportion": 0.16
          }
        ]
      },
      "75": {
        "cwe_counts": {
          "CWE-787": 35
        },
        "total_samples": 35,
        "distribution": [
          {
            "cwes": [
              "CWE-787"
            ],
            "frequency": 35,
            "proportion": 1.0
          }
        ]
      },
      "70": {
        "cwe_counts": {
          "CWE-787": 30
        },
        "total_samples": 31,
        "distribution": [
          {
            "cwes": [
              "CWE-787"
            ],
            "frequency": 30,
            "proportion": 0.968
          },
          {
            "cwes": [],
            "frequency": 1,
            "proportion": 0.032
          }
        ]
      }
    },
    "cwe_consensus": "CWE-787",
    "similarity_stats": {
      "thresholds": [
        95,
        90,
        85,
        80,
        75,
        70
      ],
      "total_samples_by_threshold": {
        "95": 8,
        "90": 29,
        "85": 29,
        "80": 25,
        "75": 35,
        "70": 31
      },
      "top_cwes_by_threshold": {
        "95": [
          [
            "CWE-787",
            8
          ]
        ],
        "90": [
          [
            "CWE-787",
            29
          ]
        ],
        "85": [
          [
            "CWE-787",
            29
          ]
        ],
        "80": [
          [
            "CWE-787",
            21
          ],
          [
            "CWE-120",
            4
          ]
        ],
        "75": [
          [
            "CWE-787",
            35
          ]
        ],
        "70": [
          [
            "CWE-787",
            30
          ]
        ]
      }
    },
    "raw_matches": [
      {
        "similarity": 95,
        "cwes": [
          "787"
        ],
        "total": 8,
        "frequency": 8,
        "proportion": 1.0
      },
      {
        "similarity": 90,
        "cwes": [
          "787"
        ],
        "total": 29,
        "frequency": 29,
        "proportion": 1.0
      },
      {
        "similarity": 85,
        "cwes": [
          "787"
        ],
        "total": 29,
        "frequency": 29,
        "proportion": 1.0
      },
      {
        "similarity": 80,
        "cwes": [
          "787"
        ],
        "total": 25,
        "frequency": 21,
        "proportion": 0.84
      },
      {
        "similarity": 80,
        "cwes": [
          "120"
        ],
        "total": 25,
        "frequency": 4,
        "proportion": 0.16
      },
      {
        "similarity": 75,
        "cwes": [
          "787"
        ],
        "total": 35,
        "frequency": 35,
        "proportion": 1.0
      },
      {
        "similarity": 70,
        "cwes": [
          "787"
        ],
        "total": 31,
        "frequency": 30,
        "proportion": 0.968
      },
      {
        "similarity": 70,
        "cwes": [],
        "total": 31,
        "frequency": 1,
        "proportion": 0.032
      }
    ]
  },
  "similarity_summary": {
    "consensus_cwe": "CWE-787",
    "top_cwes": [
      [
        "CWE-787",
        152
      ],
      [
        "CWE-120",
        4
      ]
    ],
    "confidence_levels": {
      "high": [],
      "medium": [],
      "low": []
    },
    "total_samples": 157
  },
  "analysis": "# Summary\n\n| CWE ID  | CWE Name                                                                  | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :------- | :------------------------------------------------------------------------ | :--------- | :---------------------- | :------------------------------ | :------------------------------ |\n| CWE-121  | Stack-based Buffer Overflow                                               | 1.0        | Variant               | Primary                         | Allowed                       |\n| CWE-787 | Out-of-bounds Write                                         | 0.8        | Base               | Secondary                       | Allowed                      |\n| CWE-119 | Improper Restriction of Operations within the Bounds of a Memory Buffer | 0.6        | Class                 | Secondary                       | Discouraged                     |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary CWE is CWE-121 (Stack-based Buffer Overflow), a variant of CWE-119 (Improper Restriction of Operations within the Bounds of a Memory Buffer), which in turn is a child of CWE-20 (Improper Input Validation). CWE-121 is a more specific type of buffer overflow, focusing on overflows occurring on the stack. CWE-787 (Out-of-bounds Write) is a parent of CWE-121 and represents the broader category of writing data beyond the intended buffer boundaries. The relationship helps to narrow down the root cause of the vulnerability.\n\n```mermaid\ngraph TD\n    cwe121[\"CWE-121: Stack-based Buffer Overflow\"]\n    cwe787[\"CWE-787: Out-of-bounds Write\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations\"]\n    cwe20[\"CWE-20: Improper Input Validation\"]\n\n    cwe121 -->|CHILDOF| cwe787\n    cwe787 -->|CHILDOF| cwe119\n    cwe119 -->|CHILDOF| cwe20\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe121 primary\n    class cwe787,cwe119 secondary\n    class cwe20 tertiary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with the lack of input validation (potentially CWE-20), leading to an out-of-bounds write (CWE-787), which specifically manifests as a stack-based buffer overflow (CWE-121). This overflow then causes a denial of service (DoS).\n\n## Summary of Analysis\n\nThe analysis indicates that the vulnerability is a stack-based buffer overflow (CWE-121) caused by **copying a user-supplied parameter \"Go\" into a fixed-size buffer without proper bounds checking**. The `fromSafeClientFilter` function is **vulnerable** because it uses `strcpy` to copy the `Go` parameter, which can lead to a **buffer overflow** if the parameter exceeds the buffer's size. The evidence from \"CVE Reference Links Content Summary\" explicitly states the root cause and weakness.\n\nCWE-121 is the most specific and accurate representation of the vulnerability. It aligns with the \"Vulnerability Description Key Phrases\" that highlight the **stack overflow**. The Retriever Results also list CWE-121 as the top candidate CWE.\n\nCWE-787 (Out-of-bounds Write) is considered a secondary candidate because it is a broader category that encompasses stack-based buffer overflows. While accurate, it is less specific than CWE-121.\n\nCWE-119 (Improper Restriction of Operations within the Bounds of a Memory Buffer) is also considered as a possible CWE, but is discouraged by MITRE when more specific information is available.\n\nThe decision to prioritize CWE-121 is based on the specific details of the vulnerability (stack-based), the evidence in the description, and the guidance to choose the most specific CWE.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-121: Stack-based Buffer Overflow\n**Abstraction Level**: Variant\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nA stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Explanation:** CWE-121 is a strong candidate since the vulnerability is explicitly described as a \"stack overflow.\" The description aligns perfectly with CWE-121's definition.\n\n## CWE-190: Integer Overflow or Wraparound\n**Abstraction Level**: Base\n**Similarity Score**: 726.28\n**Source**: sparse\n\n**Description**:\nThe product performs a calculation that can produce an integer overflow or wraparound when the logic assumes that the resulting value will always be larger than the original value. This occurs when an integer value is incremented to a value that is too large to store in the associated representation. When this occurs, the value may become a very small or negative number.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Explanation:** While listed in the retriever results, this CWE doesn't fit the vulnerability description, which clearly points to a buffer overflow, not an integer overflow.\n\n## CWE-1284: Improper Validation of Specified Quantity in Input\n**Abstraction Level**: Base\n**Similarity Score**: 679.92\n**Source**: sparse\n\n**Description**:\nThe product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Explanation:** This could be a contributing factor but is not the primary cause. The **improper validation** could lead to the **stack overflow**, but the overflow itself is the more direct weakness.\n\n## CWE-125: Out-of-bounds Read\n**Abstraction Level**: Base\n**Similarity Score**: 661.67\n**Source**: sparse\n\n**Description**:\nThe product reads data past the end, or before the beginning, of the intended buffer.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Explanation:** This is not related to the vulnerability description which specifies a **stack overflow** via a crafted POST request.\n\n## CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\n**Abstraction Level**: base\n**Similarity Score**: 3.80\n**Source**: graph\n\n**Description**:\nCWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: There are some indications that this CWE ID might be misused and selected simply because it mentions \"buffer overflow\" - an increasingly vague term. This CWE entry is only appropriate for \"Buffer Copy\" operations (not buffer reads), in which where there is no \"Checking [the] Size of Input\", and (by implication of the copy) writing past the end of the buffer.\n\n**Explanation:** This CWE describes a classic buffer overflow due to unchecked copy operations. While it aligns with the general concept, CWE-121 is more specific because it identifies the location of the buffer (stack). Also, CWE-120 is only appropriate for \"Buffer Copy\" operations, in which there is no \"Checking [the] Size of Input\", and (by implication of the copy) writing past the end of the buffer.",
  "analysis_with_relationships": "# Summary\n\n| CWE ID  | CWE Name                                                                  | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :------- | :------------------------------------------------------------------------ | :--------- | :---------------------- | :------------------------------ | :------------------------------ |\n| CWE-121  | Stack-based Buffer Overflow                                               | 1.0        | Variant               | Primary                         | Allowed                       |\n| CWE-787 | Out-of-bounds Write                                         | 0.8        | Base               | Secondary                       | Allowed                      |\n| CWE-119 | Improper Restriction of Operations within the Bounds of a Memory Buffer | 0.6        | Class                 | Secondary                       | Discouraged                     |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary CWE is CWE-121 (Stack-based Buffer Overflow), a variant of CWE-119 (Improper Restriction of Operations within the Bounds of a Memory Buffer), which in turn is a child of CWE-20 (Improper Input Validation). CWE-121 is a more specific type of buffer overflow, focusing on overflows occurring on the stack. CWE-787 (Out-of-bounds Write) is a parent of CWE-121 and represents the broader category of writing data beyond the intended buffer boundaries. The relationship helps to narrow down the root cause of the vulnerability.\n\n```mermaid\ngraph TD\n    cwe121[\"CWE-121: Stack-based Buffer Overflow\"]\n    cwe787[\"CWE-787: Out-of-bounds Write\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations\"]\n    cwe20[\"CWE-20: Improper Input Validation\"]\n\n    cwe121 -->|CHILDOF| cwe787\n    cwe787 -->|CHILDOF| cwe119\n    cwe119 -->|CHILDOF| cwe20\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe121 primary\n    class cwe787,cwe119 secondary\n    class cwe20 tertiary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with the lack of input validation (potentially CWE-20), leading to an out-of-bounds write (CWE-787), which specifically manifests as a stack-based buffer overflow (CWE-121). This overflow then causes a denial of service (DoS).\n\n## Summary of Analysis\n\nThe analysis indicates that the vulnerability is a stack-based buffer overflow (CWE-121) caused by **copying a user-supplied parameter \"Go\" into a fixed-size buffer without proper bounds checking**. The `fromSafeClientFilter` function is **vulnerable** because it uses `strcpy` to copy the `Go` parameter, which can lead to a **buffer overflow** if the parameter exceeds the buffer's size. The evidence from \"CVE Reference Links Content Summary\" explicitly states the root cause and weakness.\n\nCWE-121 is the most specific and accurate representation of the vulnerability. It aligns with the \"Vulnerability Description Key Phrases\" that highlight the **stack overflow**. The Retriever Results also list CWE-121 as the top candidate CWE.\n\nCWE-787 (Out-of-bounds Write) is considered a secondary candidate because it is a broader category that encompasses stack-based buffer overflows. While accurate, it is less specific than CWE-121.\n\nCWE-119 (Improper Restriction of Operations within the Bounds of a Memory Buffer) is also considered as a possible CWE, but is discouraged by MITRE when more specific information is available.\n\nThe decision to prioritize CWE-121 is based on the specific details of the vulnerability (stack-based), the evidence in the description, and the guidance to choose the most specific CWE.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-121: Stack-based Buffer Overflow\n**Abstraction Level**: Variant\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nA stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Explanation:** CWE-121 is a strong candidate since the vulnerability is explicitly described as a \"stack overflow.\" The description aligns perfectly with CWE-121's definition.\n\n## CWE-190: Integer Overflow or Wraparound\n**Abstraction Level**: Base\n**Similarity Score**: 726.28\n**Source**: sparse\n\n**Description**:\nThe product performs a calculation that can produce an integer overflow or wraparound when the logic assumes that the resulting value will always be larger than the original value. This occurs when an integer value is incremented to a value that is too large to store in the associated representation. When this occurs, the value may become a very small or negative number.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Explanation:** While listed in the retriever results, this CWE doesn't fit the vulnerability description, which clearly points to a buffer overflow, not an integer overflow.\n\n## CWE-1284: Improper Validation of Specified Quantity in Input\n**Abstraction Level**: Base\n**Similarity Score**: 679.92\n**Source**: sparse\n\n**Description**:\nThe product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Explanation:** This could be a contributing factor but is not the primary cause. The **improper validation** could lead to the **stack overflow**, but the overflow itself is the more direct weakness.\n\n## CWE-125: Out-of-bounds Read\n**Abstraction Level**: Base\n**Similarity Score**: 661.67\n**Source**: sparse\n\n**Description**:\nThe product reads data past the end, or before the beginning, of the intended buffer.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Explanation:** This is not related to the vulnerability description which specifies a **stack overflow** via a crafted POST request.\n\n## CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\n**Abstraction Level**: base\n**Similarity Score**: 3.80\n**Source**: graph\n\n**Description**:\nCWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: There are some indications that this CWE ID might be misused and selected simply because it mentions \"buffer overflow\" - an increasingly vague term. This CWE entry is only appropriate for \"Buffer Copy\" operations (not buffer reads), in which where there is no \"Checking [the] Size of Input\", and (by implication of the copy) writing past the end of the buffer.\n\n**Explanation:** This CWE describes a classic buffer overflow due to unchecked copy operations. While it aligns with the general concept, CWE-121 is more specific because it identifies the location of the buffer (stack). Also, CWE-120 is only appropriate for \"Buffer Copy\" operations, in which there is no \"Checking [the] Size of Input\", and (by implication of the copy) writing past the end of the buffer.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-121:**\n- 121 (Stack-based Buffer Overflow) - ROOT\n\n\n**Chain starting from CWE-1284:**\n- 1284 (Improper Validation of Specified Quantity in Input) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "121",
        "name": "Stack-based Buffer Overflow",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Stack Overflow",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "190",
        "name": "Integer Overflow or Wraparound",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Overflow",
        "match_reason": "term_in_phrase_whole_phrase"
      },
      "similarity": 800.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "674",
        "name": "Uncontrolled Recursion",
        "source": "sparse"
      },
      "similarity": 252.92743781340073
    },
    {
      "metadata": {
        "doc_id": "770",
        "name": "Allocation of Resources Without Limits or Throttling",
        "source": "sparse"
      },
      "similarity": 227.41671028998078
    },
    {
      "metadata": {
        "doc_id": "1284",
        "name": "Improper Validation of Specified Quantity in Input",
        "source": "sparse"
      },
      "similarity": 220.9125716811827
    },
    {
      "metadata": {
        "doc_id": "122",
        "name": "Heap-based Buffer Overflow",
        "source": "sparse"
      },
      "similarity": 217.62762368793452
    },
    {
      "metadata": {
        "doc_id": "125",
        "name": "Out-of-bounds Read",
        "source": "sparse"
      },
      "similarity": 216.3732226202536
    },
    {
      "metadata": {
        "doc_id": "119",
        "name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
        "source": "sparse"
      },
      "similarity": 215.62057500124547
    },
    {
      "metadata": {
        "doc_id": "78",
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "type": "Base",
        "original_content": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
        "keyphrase_source": "weakness:stack overflow",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse",
            "graph"
          ],
          "retriever_count": 3,
          "normalized_scores": {
            "dense": 0.553958701461281,
            "sparse": 72.88155913404141,
            "graph": 1.6333400675290868
          }
        }
      },
      "similarity": 0.553958701461281
    },
    {
      "doc_id": "128",
      "text": "CWE-128: Wrap-around Error",
      "score": 2.2698,
      "metadata": {
        "doc_id": "128",
        "name": "Wrap-around Error",
        "type": "base",
        "original_content": "CWE-128: Wrap-around Error",
        "relationships": [
          {
            "source_id": "128",
            "target_id": "190",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "128",
            "target_id": "119",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "128",
            "target_id": "682",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "682",
            "target_id": "128",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "119",
            "target_id": "128",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 0.7,
          "sequence_path": 0.7200000000000001,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "128",
                  "190",
                  "PEEROF"
                ]
              ],
              "score": 0.7,
              "type": "relationship_chain",
              "source": "190"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "190",
                  "119",
                  "CANPRECEDE"
                ],
                [
                  "119",
                  "128",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "vulnerability_sequence_forward",
              "source": "190"
            },
            "peer_relationship": {
              "path": [
                [
                  "128",
                  "190",
                  "PEEROF"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "190"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2698
          }
        }
      },
      "similarity": 2.2698
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-121",
      "CWE-1284",
      "CWE-125",
      "CWE-787",
      "CWE-190",
      "CWE-20",
      "CWE-119",
      "CWE-120"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}