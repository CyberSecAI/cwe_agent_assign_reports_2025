{
  "cve_id": "CVE-2024-55663",
  "description": "XWiki Platform is a generic wiki platform. Starting in version 11.10.6 and prior to versions 13.10.5 and 14.3-rc-1, in `getdocument.vm` the ordering of the returned documents is defined from an **unsanitized request parameter** (request.sort) and can allow any user to inject HQL. Depending on the used database backend, the attacker may be able to not only obtain confidential information such as password hashes from the database, but also execute UPDATE/INSERT/DELETE queries. This has been patched in 13.10.5 and 14.3-rc-1. There is no known workaround, other than upgrading XWiki.",
  "key_phrases": {
    "rootcause": "unsanitized request parameter",
    "weakness": "",
    "impact": [
      "obtain confidential information",
      "execute UPDATE/INSERT/DELETE queries"
    ],
    "vector": "",
    "attacker": "any user",
    "product": "XWiki Platform",
    "version": "11.10.6 to 13.10.5 and 14.3-rc-1",
    "component": "getdocument.vm"
  },
  "reference_content": "Based on the provided information, here's a breakdown of the vulnerability:\n\n**CVE ID:** CVE-2024-55663\n\n**Root Cause of Vulnerability:**\nThe vulnerability stems from the `getdocuments.vm` template in XWiki, where the ordering of returned documents is determined by an unsanitized request parameter (`request.sort`). This allows an attacker to inject Hibernate Query Language (HQL) through this parameter.\n\n**Weaknesses/Vulnerabilities Present:**\n- **HQL Injection:** The primary vulnerability is the ability to inject arbitrary HQL code due to the lack of sanitization of the `request.sort` parameter.\n- **Unsanitized Input:** The `sort` parameter is directly used to construct the HQL query, creating the injection point.\n\n**Impact of Exploitation:**\n- **Information Disclosure:** Attackers can potentially extract sensitive information from the database, such as password hashes.\n- **Data Manipulation:** Attackers may be able to perform `UPDATE`, `INSERT`, and `DELETE` queries, thereby modifying or corrupting data.\n- **Potential for complete system compromise**: By breaking out of the HQL context, attackers might achieve more significant control over the underlying database system.\n\n**Attack Vectors:**\n- The attack vector is network-based.\n- The vulnerability is triggered by sending a crafted request to the `getdocuments.vm` template with a malicious `sort` parameter.\n\n**Required Attacker Capabilities/Position:**\n- **No special privileges required:** The vulnerability can be exploited by any user, with no prior authentication needed.\n- **No user interaction required**: The attack can be executed solely by the attacker.\n- **Network access** An attacker needs network access to the vulnerable XWiki instance.\n\n**Additional Details:**\n\n*   The vulnerability is present in XWiki versions 6.3-milestone-2 and later, and was patched in versions 13.10.5 and 14.3-rc-1.\n*   The fix involved adding a regex check to validate the `sort` parameter, preventing HQL injection.\n*   The vulnerability is considered critical, as the impact includes high confidentiality, integrity, and availability risks.\n* The fix is implemented in commit `673076e2e8b88a36cdeaf7007843aa9ca1a068a0`.\n* The vulnerability is assigned CWE-116, which relates to improper encoding of output.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n\n| CWE ID  | CWE Name                                                                                   | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :----------------------------------------------------------------------------------------- | :--------- | :---------------------- | :------------------------------ | :------------------------------ |\n| CWE-943   | Improper Neutralization of Special Elements in Data Query Logic                         | 0.90       | Class                   | Primary CWE                     | Allowed-with-Review             |\n| CWE-89    | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | 0.75       | Base                    | Secondary Candidate             | Allowed                       |\n| CWE-201   | Insertion of Sensitive Information Into Sent Data                                       | 0.65       | Base                    | Secondary Candidate             | Allowed                       |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.80\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary CWE selected is CWE-943, a Class-level weakness describing **improper neutralization of special elements in data query logic**. This vulnerability exhibits the characteristics of this weakness by allowing injection of HQL commands. While CWE-943 is a Class, it is more specific to the data query context than its parents.\n\nCWE-89 is a Base-level weakness and a child of CWE-74, describing **improper neutralization of special elements used in an SQL command ('SQL Injection')**. While HQL is not SQL, the underlying principle of injecting code into a query language applies.\n\nCWE-201 is a Base-level weakness describing **insertion of sensitive information into sent data**. This relates to the impact of the vulnerability, where an attacker can extract sensitive data.\n\n```mermaid\ngraph TD\n    cwe943[\"CWE-943: Improper Neutralization of Special Elements in Data Query Logic\"]\n    cwe89[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"]\n    cwe201[\"CWE-201: Insertion of Sensitive Information Into Sent Data\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Data Query Logic\"]\n    \n    cwe89 -->|CHILDOF| cwe74\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe943 primary\n    class cwe89,cwe201 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with the **unsanitized request parameter** which leads to HQL injection, ultimately resulting in information disclosure and potential data manipulation.\n\n1.  **Root Cause:** **Unsanitized request parameter** (`request.sort`)\n2.  **Weakness:** CWE-943 Improper Neutralization of Special Elements in Data Query Logic\n3.  **Impact:** Information Disclosure (password hashes) and Data Manipulation (UPDATE/INSERT/DELETE queries)\n4.  **Result:** Potential for complete system compromise\n\n## Summary of Analysis\n\nThe primary vulnerability is the **improper neutralization** of the `request.sort` parameter, which allows for HQL injection. The CVE description states: \"the ordering of the returned documents is defined from an **unsanitized request parameter** (request.sort) and can allow any user to inject HQL.\"\n\nThe most appropriate CWE is CWE-943 Improper Neutralization of Special Elements in Data Query Logic. Although CWE-943 is a Class, it's more specific to data query logic than its parent and accurately captures the nature of the vulnerability.\n\nCWE-89 (SQL Injection) was considered because HQL injection is similar in principle to SQL injection. However, since it's HQL and not SQL, CWE-943 is more appropriate, as it's more generalized to any data query logic.\n\nCWE-201 (Insertion of Sensitive Information Into Sent Data) reflects the potential impact of the vulnerability, where sensitive information can be extracted from the database. This could be considered a secondary weakness.\n\nThe final selection is based on the root cause - the **improper neutralization** leading to HQL injection (CWE-943), with the impact being potential information disclosure (CWE-201) and data manipulation (CWE-89). The selected CWEs are at an appropriate level of specificity, focusing on the core weakness and its immediate consequences.",
  "analysis_with_relationships": "# Summary\n\n| CWE ID  | CWE Name                                                                                   | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :----------------------------------------------------------------------------------------- | :--------- | :---------------------- | :------------------------------ | :------------------------------ |\n| CWE-943   | Improper Neutralization of Special Elements in Data Query Logic                         | 0.90       | Class                   | Primary CWE                     | Allowed-with-Review             |\n| CWE-89    | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | 0.75       | Base                    | Secondary Candidate             | Allowed                       |\n| CWE-201   | Insertion of Sensitive Information Into Sent Data                                       | 0.65       | Base                    | Secondary Candidate             | Allowed                       |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.80\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary CWE selected is CWE-943, a Class-level weakness describing **improper neutralization of special elements in data query logic**. This vulnerability exhibits the characteristics of this weakness by allowing injection of HQL commands. While CWE-943 is a Class, it is more specific to the data query context than its parents.\n\nCWE-89 is a Base-level weakness and a child of CWE-74, describing **improper neutralization of special elements used in an SQL command ('SQL Injection')**. While HQL is not SQL, the underlying principle of injecting code into a query language applies.\n\nCWE-201 is a Base-level weakness describing **insertion of sensitive information into sent data**. This relates to the impact of the vulnerability, where an attacker can extract sensitive data.\n\n```mermaid\ngraph TD\n    cwe943[\"CWE-943: Improper Neutralization of Special Elements in Data Query Logic\"]\n    cwe89[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"]\n    cwe201[\"CWE-201: Insertion of Sensitive Information Into Sent Data\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Data Query Logic\"]\n    \n    cwe89 -->|CHILDOF| cwe74\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe943 primary\n    class cwe89,cwe201 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with the **unsanitized request parameter** which leads to HQL injection, ultimately resulting in information disclosure and potential data manipulation.\n\n1.  **Root Cause:** **Unsanitized request parameter** (`request.sort`)\n2.  **Weakness:** CWE-943 Improper Neutralization of Special Elements in Data Query Logic\n3.  **Impact:** Information Disclosure (password hashes) and Data Manipulation (UPDATE/INSERT/DELETE queries)\n4.  **Result:** Potential for complete system compromise\n\n## Summary of Analysis\n\nThe primary vulnerability is the **improper neutralization** of the `request.sort` parameter, which allows for HQL injection. The CVE description states: \"the ordering of the returned documents is defined from an **unsanitized request parameter** (request.sort) and can allow any user to inject HQL.\"\n\nThe most appropriate CWE is CWE-943 Improper Neutralization of Special Elements in Data Query Logic. Although CWE-943 is a Class, it's more specific to data query logic than its parent and accurately captures the nature of the vulnerability.\n\nCWE-89 (SQL Injection) was considered because HQL injection is similar in principle to SQL injection. However, since it's HQL and not SQL, CWE-943 is more appropriate, as it's more generalized to any data query logic.\n\nCWE-201 (Insertion of Sensitive Information Into Sent Data) reflects the potential impact of the vulnerability, where sensitive information can be extracted from the database. This could be considered a secondary weakness.\n\nThe final selection is based on the root cause - the **improper neutralization** leading to HQL injection (CWE-943), with the impact being potential information disclosure (CWE-201) and data manipulation (CWE-89). The selected CWEs are at an appropriate level of specificity, focusing on the core weakness and its immediate consequences.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-89:**\n- 89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')) - ROOT\n\n\n**Chain starting from CWE-201:**\n- 201 (Insertion of Sensitive Information Into Sent Data) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse"
      },
      "similarity": 669.5455513645607
    },
    {
      "metadata": {
        "doc_id": "202",
        "name": "Exposure of Sensitive Information Through Data Queries",
        "source": "sparse"
      },
      "similarity": 633.7986973542172
    },
    {
      "metadata": {
        "doc_id": "1336",
        "name": "Improper Neutralization of Special Elements Used in a Template Engine",
        "source": "sparse"
      },
      "similarity": 598.3763341315484
    },
    {
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "source": "sparse"
      },
      "similarity": 594.89098464076
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 590.8981833141723
    },
    {
      "metadata": {
        "doc_id": "552",
        "name": "Files or Directories Accessible to External Parties",
        "source": "sparse"
      },
      "similarity": 590.478971002177
    },
    {
      "metadata": {
        "doc_id": "328",
        "name": "Use of Weak Hash",
        "source": "sparse"
      },
      "similarity": 579.2941595122229
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 569.3368639564013
    },
    {
      "metadata": {
        "doc_id": "943",
        "name": "Improper Neutralization of Special Elements in Data Query Logic",
        "type": "Class",
        "original_content": "The product generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query.",
        "keyphrase_source": "rootcause:unsanitized request parameter",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
          "comments": "Examine children of this entry to see if there is a better fit",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5253385952501752,
            "graph": 1.0700832956721622
          }
        }
      },
      "similarity": 0.5253385952501752
    },
    {
      "doc_id": "226",
      "text": "CWE-226: Sensitive Information in Resource Not Removed Before Reuse",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "226",
        "name": "Sensitive Information in Resource Not Removed Before Reuse",
        "type": "base",
        "original_content": "CWE-226: Sensitive Information in Resource Not Removed Before Reuse",
        "relationships": [
          {
            "source_id": "226",
            "target_id": "244",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "226",
            "target_id": "1342",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "226",
            "target_id": "1301",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "226",
            "target_id": "1272",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "226",
            "target_id": "1239",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "226",
            "target_id": "201",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "226",
            "target_id": "212",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "226",
            "target_id": "459",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "459",
            "target_id": "226",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "244",
            "target_id": "226",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "212",
            "target_id": "226",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "201",
            "target_id": "226",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1342",
            "target_id": "226",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1194"
            }
          },
          {
            "source_id": "1342",
            "target_id": "226",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1301",
            "target_id": "226",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1272",
            "target_id": "226",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1239",
            "target_id": "226",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1194"
            }
          },
          {
            "source_id": "1239",
            "target_id": "226",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "201",
                  "226",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "201"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "201",
                  "226",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "201"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "226",
                  "201",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "201"
            }
          }
        },
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-89",
      "CWE-201",
      "CWE-74",
      "CWE-943"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}