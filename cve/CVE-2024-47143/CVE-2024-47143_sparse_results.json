{
  "query": "In the Linux kernel, the following vulnerability has been resolved dma-debug fix a possible deadlock on radix_lock radix_lock() shouldnt be held while holding dma_hash_entry[idx].lock otherwise, theres a possible deadlock scenario when dma debug API is called holding rq_lock() CPU0 CPU1 CPU2 dma_free_attrs() check_unmap() add_dma_entry() __schedule() //out (A) rq_lock() get_hash_bucket() (A) dma_entry_hash check_sync() (A) radix_lock() (W) dma_entry_hash dma_entry_free() (W) radix_lock() // CPU2s one (W) rq_lock() CPU1 situation can happen when it extending radix tree and it tries to wake up kswapd via wake_all_kswapd(). CPU2 situation can happen while perf_event_task_sched_out() (i.e. dma sync operation is called while deleting perf_event using etm and etr tmc which are Arm Coresight hwtracing driver backends). To remove this possible situation, call dma_entry_free() after put_hash_bucket() in check_unmap().",
  "count": 12,
  "results": [
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "abstraction": "Class",
      "score": 509.14882129415264,
      "original_score": 509.14882129415264,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "833",
      "name": "Deadlock",
      "abstraction": "Base",
      "score": 504.5659272698069,
      "original_score": 504.5659272698069,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "abstraction": "Class",
      "score": 473.52644632415365,
      "original_score": 473.52644632415365,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "abstraction": "Base",
      "score": 469.99143573463675,
      "original_score": 469.99143573463675,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "abstraction": "Base",
      "score": 442.00944870814885,
      "original_score": 442.00944870814885,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1251",
      "name": "Mirrored Regions with Different Values",
      "abstraction": "Base",
      "score": 420.7756000439013,
      "original_score": 420.7756000439013,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "807",
      "name": "Reliance on Untrusted Inputs in a Security Decision",
      "abstraction": "Base",
      "score": 407.0835766574322,
      "original_score": 407.0835766574322,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "663",
      "name": "Use of a Non-reentrant Function in a Concurrent Context",
      "abstraction": "Base",
      "score": 397.20294656897335,
      "original_score": 397.20294656897335,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "122",
      "name": "Heap-based Buffer Overflow",
      "abstraction": "Variant",
      "score": 397.1337221380071,
      "original_score": 397.1337221380071,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "674",
      "name": "Uncontrolled Recursion",
      "abstraction": "Class",
      "score": 393.6140292773122,
      "original_score": 393.6140292773122,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "125",
      "name": "Out-of-bounds Read",
      "abstraction": "Base",
      "score": 345.9518477462616,
      "original_score": 345.9518477462616,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "787",
      "name": "Out-of-bounds Write",
      "abstraction": "Base",
      "score": 122.30859201846351,
      "original_score": 122.30859201846351,
      "mapping_usage": "Allowed"
    }
  ],
  "statistics": {
    "min": 122.30859201846351,
    "max": 509.14882129415264,
    "mean": 406.9426994817709,
    "median": 413.9295883506668,
    "count": 12
  }
}