{
  "cve_id": "CVE-2024-50378",
  "description": "Airflow versions before 2.10.3 have a vulnerability that allows authenticated users with audit log access to see sensitive values in audit logs which they should not see.When sensitive variables were set via airflow CLI, values of those variables appeared in the audit log and were stored unencrypted in the Airflow database. While this risk is limited to users with audit log access, it is recommended to upgrade to Airflow 2.10.3 or a later version, which addresses this issue. Users who previously used the CLI to set secret variables should manually delete entries with those variables from the log table.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "information disclosure",
    "impact": "see sensitive values in audit logs",
    "vector": "setting sensitive variables via airflow CLI",
    "attacker": "authenticated users with audit log access",
    "product": "Airflow",
    "version": "before 2.10.3",
    "component": ""
  },
  "reference_content": "Based on the provided information, here's an analysis of CVE-2024-50378:\n\n**Root cause of vulnerability:**\n- When sensitive variables were set via the Airflow CLI, their values were not masked and were included in the audit log and stored unencrypted in the Airflow database.\n\n**Weaknesses/vulnerabilities present:**\n- **Information Exposure:** Sensitive variable values were exposed in audit logs and stored unencrypted, violating the principle of least privilege and exposing potentially confidential data.\n- **Lack of Input Sanitization/Masking:** The Airflow CLI did not properly mask or sanitize sensitive data before logging or storing it.\n- **Insecure storage:** Sensitive data stored unencrypted in the database.\n\n**Impact of exploitation:**\n- Authenticated users with access to the audit log could view sensitive variable values they should not have access to.\n- Exposure of potentially sensitive data, such as passwords, API keys, or other secrets.\n\n**Attack vectors:**\n- Attackers would need to have valid credentials and access to the Airflow audit logs.\n- The vulnerability is triggered when sensitive variables are set via the Airflow CLI.\n\n**Required attacker capabilities/position:**\n- The attacker needs to be an authenticated user with access to the audit log.\n- The attacker must be able to view the audit log, typically through the Airflow UI or database.\n\n**Additional details:**\n- The vulnerability was fixed in Airflow version 2.10.3.\n- The fix involved masking the sensitive values in the audit logs.\n- Users who previously used the CLI to set secret variables should manually delete entries with those variables from the log table.\n- The fix was implemented in pull request #43123.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-532 | Insertion of Sensitive Information into Log File | 1.0 | Base | Allowed | Primary CWE |\n| CWE-256 | Plaintext Storage of a Password | 0.8 | Base | Allowed | Secondary Candidate |\n| CWE-200 | Exposure of Sensitive Information to an Unauthorized Actor | 0.6 | Class | Discouraged | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship that influenced the CWE selection was the parent-child relationship, particularly how CWE-532 relates to CWE-200. While CWE-200 is a broader category, CWE-532 specifically addresses the **insertion of sensitive information into log files**, which is precisely what the vulnerability description details. This specific focus makes CWE-532 a more accurate and granular representation of the **root cause**.\n\n```mermaid\ngraph TD\n    cwe532[\"CWE-532: Insertion of Sensitive Information into Log File\"]\n    cwe200[\"CWE-200: Exposure of Sensitive Information to an Unauthorized Actor\"]\n    cwe256[\"CWE-256: Plaintext Storage of a Password\"]\n\n    cwe532 -->|CHILDOF| cwe200\n    cwe256 -->|CHILDOF| cwe522[\"CWE-522: Insufficiently Protected Credentials\"]\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe532 primary\n    class cwe200,cwe256 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **improper handling of sensitive variables** via the Airflow CLI. This leads directly to **CWE-532 (Insertion of Sensitive Information into Log File)**, as the sensitive data is written to the audit logs. The data is also stored unencrypted. The final impact is the **exposure of this sensitive information to unauthorized actors** with access to the audit logs.\n\n## Summary of Analysis\nThe initial analysis identified several candidate CWEs based on the vulnerability description. After careful review, **CWE-532 (Insertion of Sensitive Information into Log File)** was selected as the primary CWE because it best represents the **root cause** of the vulnerability. The vulnerability description clearly states that sensitive variables, when set via the Airflow CLI, are written to the audit log. The evidence includes: \"values of those variables appeared in the audit log and were stored unencrypted in the Airflow database.\" This directly aligns with the CWE-532 description: \"The product writes sensitive information to a log file.\"\n\nCWE-200 (Exposure of Sensitive Information to an Unauthorized Actor) was considered, and while it accurately describes the impact of the vulnerability, it is a more general CWE. The mapping guidance for CWE-200 discourages its use as a primary CWE, as it represents the technical impact rather than the root cause.\n\nCWE-256 (Plaintext Storage of a Password) was also considered, given the unencrypted storage of the variables in the Airflow database. While this is a contributing factor, the immediate cause of the vulnerability is the logging of sensitive information.\n\nUltimately, **CWE-532** was chosen as the primary CWE due to its specific match with the vulnerability's root cause, its appropriate level of abstraction (Base), and its allowed usage according to MITRE mapping guidance.\n\nRelevant CWE Information:\n\n**CWE-532: Insertion of Sensitive Information into Log File**\n\n*   **Technical Explanation:** The Airflow application logs sensitive variables without proper sanitization or masking. This means that when sensitive data is set via the CLI, the actual values are recorded in the audit logs.\n*   **Security Implications:** Unauthorized users with access to the audit logs can view sensitive information, such as passwords, API keys, or other confidential data.\n*   **Relationship Analysis:** This CWE is a child of CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor).\n*   **Mapping Guidance:** The usage is \"Allowed,\" and the rationale states that this CWE is at the Base level of abstraction, which is preferred for mapping root causes.\n*   **Justification:** The vulnerability description explicitly mentions the logging of sensitive variables, directly matching the CWE description.\n\n**CWE-256: Plaintext Storage of a Password**\n\n*   **Technical Explanation:** The sensitive variables are stored unencrypted in the Airflow database.\n*   **Security Implications:** If the database is compromised, the sensitive variables will be exposed.\n*   **Relationship Analysis:** This CWE is a child of CWE-522 (Insufficiently Protected Credentials).\n*   **Mapping Guidance:** The usage is \"Allowed,\" and the rationale states that this CWE is at the Base level of abstraction, which is preferred for mapping root causes.\n*   **Justification:** The vulnerability description explicitly mentions \"stored unencrypted in the Airflow database.\"\n\n**CWE-200: Exposure of Sensitive Information to an Unauthorized Actor**\n\n*   **Technical Explanation:** The vulnerability results in the exposure of sensitive variable values to unauthorized users who have access to the audit logs.\n*   **Security Implications:** Sensitive information can be accessed by unintended parties, leading to potential data breaches or misuse of credentials.\n*   **Relationship Analysis:** This CWE is a parent of many CWEs, including CWE-532.\n*   **Mapping Guidance:** The usage is \"Discouraged\" because it represents the impact rather than the root cause.\n*   **Justification:** While the vulnerability does lead to the exposure of sensitive information, this CWE is too high-level to represent the specific weakness.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-532 | Insertion of Sensitive Information into Log File | 1.0 | Base | Allowed | Primary CWE |\n| CWE-256 | Plaintext Storage of a Password | 0.8 | Base | Allowed | Secondary Candidate |\n| CWE-200 | Exposure of Sensitive Information to an Unauthorized Actor | 0.6 | Class | Discouraged | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship that influenced the CWE selection was the parent-child relationship, particularly how CWE-532 relates to CWE-200. While CWE-200 is a broader category, CWE-532 specifically addresses the **insertion of sensitive information into log files**, which is precisely what the vulnerability description details. This specific focus makes CWE-532 a more accurate and granular representation of the **root cause**.\n\n```mermaid\ngraph TD\n    cwe532[\"CWE-532: Insertion of Sensitive Information into Log File\"]\n    cwe200[\"CWE-200: Exposure of Sensitive Information to an Unauthorized Actor\"]\n    cwe256[\"CWE-256: Plaintext Storage of a Password\"]\n\n    cwe532 -->|CHILDOF| cwe200\n    cwe256 -->|CHILDOF| cwe522[\"CWE-522: Insufficiently Protected Credentials\"]\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe532 primary\n    class cwe200,cwe256 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **improper handling of sensitive variables** via the Airflow CLI. This leads directly to **CWE-532 (Insertion of Sensitive Information into Log File)**, as the sensitive data is written to the audit logs. The data is also stored unencrypted. The final impact is the **exposure of this sensitive information to unauthorized actors** with access to the audit logs.\n\n## Summary of Analysis\nThe initial analysis identified several candidate CWEs based on the vulnerability description. After careful review, **CWE-532 (Insertion of Sensitive Information into Log File)** was selected as the primary CWE because it best represents the **root cause** of the vulnerability. The vulnerability description clearly states that sensitive variables, when set via the Airflow CLI, are written to the audit log. The evidence includes: \"values of those variables appeared in the audit log and were stored unencrypted in the Airflow database.\" This directly aligns with the CWE-532 description: \"The product writes sensitive information to a log file.\"\n\nCWE-200 (Exposure of Sensitive Information to an Unauthorized Actor) was considered, and while it accurately describes the impact of the vulnerability, it is a more general CWE. The mapping guidance for CWE-200 discourages its use as a primary CWE, as it represents the technical impact rather than the root cause.\n\nCWE-256 (Plaintext Storage of a Password) was also considered, given the unencrypted storage of the variables in the Airflow database. While this is a contributing factor, the immediate cause of the vulnerability is the logging of sensitive information.\n\nUltimately, **CWE-532** was chosen as the primary CWE due to its specific match with the vulnerability's root cause, its appropriate level of abstraction (Base), and its allowed usage according to MITRE mapping guidance.\n\nRelevant CWE Information:\n\n**CWE-532: Insertion of Sensitive Information into Log File**\n\n*   **Technical Explanation:** The Airflow application logs sensitive variables without proper sanitization or masking. This means that when sensitive data is set via the CLI, the actual values are recorded in the audit logs.\n*   **Security Implications:** Unauthorized users with access to the audit logs can view sensitive information, such as passwords, API keys, or other confidential data.\n*   **Relationship Analysis:** This CWE is a child of CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor).\n*   **Mapping Guidance:** The usage is \"Allowed,\" and the rationale states that this CWE is at the Base level of abstraction, which is preferred for mapping root causes.\n*   **Justification:** The vulnerability description explicitly mentions the logging of sensitive variables, directly matching the CWE description.\n\n**CWE-256: Plaintext Storage of a Password**\n\n*   **Technical Explanation:** The sensitive variables are stored unencrypted in the Airflow database.\n*   **Security Implications:** If the database is compromised, the sensitive variables will be exposed.\n*   **Relationship Analysis:** This CWE is a child of CWE-522 (Insufficiently Protected Credentials).\n*   **Mapping Guidance:** The usage is \"Allowed,\" and the rationale states that this CWE is at the Base level of abstraction, which is preferred for mapping root causes.\n*   **Justification:** The vulnerability description explicitly mentions \"stored unencrypted in the Airflow database.\"\n\n**CWE-200: Exposure of Sensitive Information to an Unauthorized Actor**\n\n*   **Technical Explanation:** The vulnerability results in the exposure of sensitive variable values to unauthorized users who have access to the audit logs.\n*   **Security Implications:** Sensitive information can be accessed by unintended parties, leading to potential data breaches or misuse of credentials.\n*   **Relationship Analysis:** This CWE is a parent of many CWEs, including CWE-532.\n*   **Mapping Guidance:** The usage is \"Discouraged\" because it represents the impact rather than the root cause.\n*   **Justification:** While the vulnerability does lead to the exposure of sensitive information, this CWE is too high-level to represent the specific weakness.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-522:**\n- 522 (Insufficiently Protected Credentials) - ROOT\n\n\n**Chain starting from CWE-200:**\n- 200 (Exposure of Sensitive Information to an Unauthorized Actor) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "200",
        "name": "Exposure of Sensitive Information to an Unauthorized Actor",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Information Disclosure",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "532",
        "name": "Insertion of Sensitive Information into Log File",
        "source": "sparse"
      },
      "similarity": 662.1022388569493
    },
    {
      "metadata": {
        "doc_id": "1188",
        "name": "Initialization of a Resource with an Insecure Default",
        "source": "sparse"
      },
      "similarity": 552.1237267939857
    },
    {
      "metadata": {
        "doc_id": "277",
        "name": "Insecure Inherited Permissions",
        "source": "sparse"
      },
      "similarity": 548.9162506325181
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 528.3443206670638
    },
    {
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "source": "sparse"
      },
      "similarity": 525.1260471512549
    },
    {
      "metadata": {
        "doc_id": "256",
        "name": "Plaintext Storage of a Password",
        "source": "sparse"
      },
      "similarity": 522.484741748077
    },
    {
      "metadata": {
        "doc_id": "526",
        "name": "Cleartext Storage of Sensitive Information in an Environment Variable",
        "source": "sparse"
      },
      "similarity": 511.0277516217198
    },
    {
      "metadata": {
        "doc_id": "522",
        "name": "Insufficiently Protected Credentials",
        "type": "Class",
        "original_content": "The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.",
        "keyphrase_source": "weakness:information disclosure",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
          "comments": "Examine children of this entry to see if there is a better fit",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse",
            "graph"
          ],
          "retriever_count": 3,
          "normalized_scores": {
            "dense": 0.463823442064513,
            "sparse": 504.9329457107901,
            "graph": 1.039030855819558
          }
        }
      },
      "similarity": 0.463823442064513
    },
    {
      "doc_id": "1272",
      "text": "CWE-1272: Sensitive Information Uncleared Before Debug/Power State Transition",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "1272",
        "name": "Sensitive Information Uncleared Before Debug/Power State Transition",
        "type": "base",
        "original_content": "CWE-1272: Sensitive Information Uncleared Before Debug/Power State Transition",
        "relationships": [
          {
            "source_id": "1272",
            "target_id": "200",
            "label": "CANPRECEDE",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1272",
            "target_id": "226",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "226",
            "target_id": "1272",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "200",
            "target_id": "1272",
            "label": "CANFOLLOW",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "200",
                  "1272",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "200"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "200",
                  "1272",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "200"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "1272",
                  "200",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "200"
            }
          }
        },
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-522",
      "CWE-200",
      "CWE-256",
      "CWE-532"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}