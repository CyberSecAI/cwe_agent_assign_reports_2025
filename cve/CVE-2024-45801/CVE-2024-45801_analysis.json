{
  "cve_id": "CVE-2024-45801",
  "description": "DOMPurify is a DOM-only, super-fast, uber-tolerant **XSS** sanitizer for HTML, MathML and SVG. It has been discovered that malicious HTML using special nesting techniques can bypass the depth checking added to DOMPurify in recent releases. It was also possible to use Prototype Pollution to weaken the depth check. This renders dompurify unable to avoid cross site scripting (**XSS**) attacks. This issue has been addressed in versions 2.5.4 and 3.1.3 of DOMPurify. All users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "key_phrases": {
    "rootcause": "",
    "weakness": [
      "XSS",
      "cross-site scripting"
    ],
    "impact": "bypass depth check",
    "vector": "malicious HTML",
    "attacker": "",
    "product": "DOMPurify",
    "version": "before 2.5.4 and 3.1.3",
    "component": ""
  },
  "reference_content": "Based on the provided information, here's a breakdown of the vulnerability:\n\n**CVE ID:** CVE-2024-45801\n\n**Root Cause of Vulnerability:**\n- The vulnerability stems from a combination of two weaknesses:\n    1.  Malicious HTML using special nesting techniques can bypass the depth checking mechanism implemented in DOMPurify.\n    2.  Prototype pollution could be used to weaken the depth check, making it ineffective.\n- This combination could allow attackers to bypass DOMPurify's sanitization and execute Cross-Site Scripting (XSS) attacks.\n\n**Weaknesses/Vulnerabilities Present:**\n- **Bypass of Depth Checking:** The primary vulnerability is the ability to bypass the depth-checking mechanism implemented to prevent excessive nesting, which can lead to mXSS.\n- **Prototype Pollution:** The vulnerability is further exacerbated by the ability to use prototype pollution to weaken the depth check.\n\n**Impact of Exploitation:**\n- **XSS Attack:** Successful exploitation of this vulnerability allows attackers to inject and execute malicious scripts in the context of the vulnerable application, leading to XSS.\n- **Loss of Confidentiality, Integrity and Availability**: Specifically, this can result in a low impact to confidentiality, high impact to integrity and low impact to availability.\n\n**Attack Vectors:**\n- **Network:** The attack vector is via the network, meaning the attacker can exploit this vulnerability remotely.\n\n**Required Attacker Capabilities/Position:**\n- The attacker does not require any privileges or user interaction to exploit this vulnerability.\n- **Attack Complexity:** The attack complexity is considered high.\n- The attacker needs to craft specific malicious HTML with special nesting techniques and possibly use prototype pollution to weaken the depth check\n\n**Additional Information:**\n- **Affected Versions:** Versions of `dompurify` prior to 2.5.4 and 3.1.3 are affected.\n- **Patched Versions:** The vulnerability is fixed in versions 2.5.4 and 3.1.3 of `dompurify`.\n- **Fix Commit:** The fix was implemented in commit [1e52026](https://github.com/cure53/DOMPurify/commit/1e520262bf4c66b5efda49e2316d6d1246ca7b21) (3.x branch) and [26e1d69](https://github.com/cure53/DOMPurify/commit/26e1d69ca7f769f5c558619d644d90dd8bf26ebc) (2.x branch).\n- **CWE:** CWE-1321\n\nThis analysis provides a detailed understanding of the vulnerability, its causes, impact, and how it can be exploited, which aligns with the information provided in the GitHub Security Advisory.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID    | CWE Name                                                                         | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :------------------------------------------------------------------------------- | :--------- | :---------------------- | :------------------------------ | :------------------------------ |\n| CWE-79    | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 0.9        | Base                    | Primary CWE                  | Allowed                       |\n| CWE-1321  | Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution') | 0.8        | Variant                 | Secondary Candidate       | Allowed                       |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is CWE-79, which stems from the **improper neutralization** of input. CWE-1321 contributes by weakening the defenses, allowing for easier exploitation of the XSS vulnerability. CWE-1321 can be viewed as a prerequisite or enabler for CWE-79 in this specific case. Both are related to **improper handling** of input but at different stages: CWE-1321 affects the program's state, while CWE-79 directly causes the **XSS**.\n\n```mermaid\ngraph TD\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    cwe1321[\"CWE-1321: Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')\"]\n    cwe116[\"CWE-116: Improper Encoding or Escaping of Output\"]\n    \n    cwe1321 -->|CANPRECEDE| cwe79\n    cwe79 -->|PEEROF| cwe116\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe79 primary\n    class cwe1321 secondary\n    class cwe116 tertiary\n```\n\n## Vulnerability Chain\n1.  **Root Cause:** CWE-1321 (Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')) allows an attacker to weaken the depth check.\n2.  **Weakness:** CWE-79 (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')) occurs because the input is not properly sanitized due to the weakened depth check.\n3.  **Impact:** Cross-site scripting (**XSS**) vulnerability allows an attacker to execute arbitrary code in the user's browser.\n\n## Summary of Analysis\nThe initial analysis identified CWE-79 as the primary candidate due to the presence of **XSS**. However, the additional detail regarding the \"bypass depth check\" and \"Prototype Pollution\" suggests that CWE-1321 is also relevant. The prototype pollution allows the depth check to be bypassed, making the **XSS** vulnerability possible.\n\nThe evidence for CWE-79 is strong, with multiple keyphrases pointing to it. The evidence for CWE-1321 is also substantial.\n\nCWE-116 (Improper Encoding or Escaping of Output) was considered but not selected as the primary CWE, because the description focuses more on the **improper neutralization** aspect (CWE-79) and the weakening of the depth check (CWE-1321) rather than encoding issues. CWE-434 (Unrestricted Upload of File with Dangerous Type) and CWE-352 (Cross-Site Request Forgery) were also considered but deemed irrelevant, as they do not align with the vulnerability's description.\n\nBased on the evidence and relationship analysis, CWE-79 and CWE-1321 are the most appropriate CWEs for this vulnerability. CWE-79 is the primary weakness that allows for **XSS**, and CWE-1321 weakens the defenses of DOMPurify.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\n**Abstraction Level**: Variant\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as \"<\", \">\", and \"&\" that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-138: Improper Neutralization of Special Elements\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n\n\n## CWE-184: Incomplete List of Disallowed Inputs\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n\n\n## CWE-451: User Interface (UI) Misrepresentation of Critical Information\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-41: Improper Resolution of Path Equivalence\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product is vulnerable to file system contents disclosure through path equivalence. Path equivalence involves the use of special characters in file and directory names. The associated manipulations are intended to generate multiple names for the same object.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-472: External Control of Assumed-Immutable Web Parameter\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to",
  "analysis_with_relationships": "# Summary\n| CWE ID    | CWE Name                                                                         | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :------------------------------------------------------------------------------- | :--------- | :---------------------- | :------------------------------ | :------------------------------ |\n| CWE-79    | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 0.9        | Base                    | Primary CWE                  | Allowed                       |\n| CWE-1321  | Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution') | 0.8        | Variant                 | Secondary Candidate       | Allowed                       |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is CWE-79, which stems from the **improper neutralization** of input. CWE-1321 contributes by weakening the defenses, allowing for easier exploitation of the XSS vulnerability. CWE-1321 can be viewed as a prerequisite or enabler for CWE-79 in this specific case. Both are related to **improper handling** of input but at different stages: CWE-1321 affects the program's state, while CWE-79 directly causes the **XSS**.\n\n```mermaid\ngraph TD\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    cwe1321[\"CWE-1321: Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')\"]\n    cwe116[\"CWE-116: Improper Encoding or Escaping of Output\"]\n    \n    cwe1321 -->|CANPRECEDE| cwe79\n    cwe79 -->|PEEROF| cwe116\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe79 primary\n    class cwe1321 secondary\n    class cwe116 tertiary\n```\n\n## Vulnerability Chain\n1.  **Root Cause:** CWE-1321 (Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')) allows an attacker to weaken the depth check.\n2.  **Weakness:** CWE-79 (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')) occurs because the input is not properly sanitized due to the weakened depth check.\n3.  **Impact:** Cross-site scripting (**XSS**) vulnerability allows an attacker to execute arbitrary code in the user's browser.\n\n## Summary of Analysis\nThe initial analysis identified CWE-79 as the primary candidate due to the presence of **XSS**. However, the additional detail regarding the \"bypass depth check\" and \"Prototype Pollution\" suggests that CWE-1321 is also relevant. The prototype pollution allows the depth check to be bypassed, making the **XSS** vulnerability possible.\n\nThe evidence for CWE-79 is strong, with multiple keyphrases pointing to it. The evidence for CWE-1321 is also substantial.\n\nCWE-116 (Improper Encoding or Escaping of Output) was considered but not selected as the primary CWE, because the description focuses more on the **improper neutralization** aspect (CWE-79) and the weakening of the depth check (CWE-1321) rather than encoding issues. CWE-434 (Unrestricted Upload of File with Dangerous Type) and CWE-352 (Cross-Site Request Forgery) were also considered but deemed irrelevant, as they do not align with the vulnerability's description.\n\nBased on the evidence and relationship analysis, CWE-79 and CWE-1321 are the most appropriate CWEs for this vulnerability. CWE-79 is the primary weakness that allows for **XSS**, and CWE-1321 weakens the defenses of DOMPurify.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\n**Abstraction Level**: Variant\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as \"<\", \">\", and \"&\" that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-138: Improper Neutralization of Special Elements\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n\n\n## CWE-184: Incomplete List of Disallowed Inputs\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n\n\n## CWE-451: User Interface (UI) Misrepresentation of Critical Information\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-41: Improper Resolution of Path Equivalence\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product is vulnerable to file system contents disclosure through path equivalence. Path equivalence involves the use of special characters in file and directory names. The associated manipulations are intended to generate multiple names for the same object.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-472: External Control of Assumed-Immutable Web Parameter\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-116:**\n- 116 (Improper Encoding or Escaping of Output) - ROOT\n\n\n**Chain starting from CWE-1321:**\n- 1321 (Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse",
        "original_content": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
        "keyphrase_sources": [
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "impact:bypass depth check",
            "keyphrase": "bypass depth check",
            "type": "impact"
          },
          {
            "id": "vector:malicious HTML",
            "keyphrase": "malicious HTML",
            "type": "vector"
          },
          {
            "id": "product:DOMPurify",
            "keyphrase": "DOMPurify",
            "type": "product"
          },
          {
            "id": "version:before 2.5.4 and 3.1.3",
            "keyphrase": "before 2.5.4 and 3.1.3",
            "type": "version"
          }
        ]
      },
      "similarity": 492.6172649604515
    },
    {
      "metadata": {
        "doc_id": "1321",
        "name": "Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')",
        "source": "sparse",
        "original_content": "The product receives input from an upstream component that specifies attributes that are to be initialized or updated in an object, but it does not properly control modifications of attributes of the object prototype.",
        "keyphrase_sources": [
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "impact:bypass depth check",
            "keyphrase": "bypass depth check",
            "type": "impact"
          },
          {
            "id": "vector:malicious HTML",
            "keyphrase": "malicious HTML",
            "type": "vector"
          },
          {
            "id": "product:DOMPurify",
            "keyphrase": "DOMPurify",
            "type": "product"
          },
          {
            "id": "version:before 2.5.4 and 3.1.3",
            "keyphrase": "before 2.5.4 and 3.1.3",
            "type": "version"
          }
        ]
      },
      "similarity": 471.6514820876299
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse",
        "original_content": "The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.",
        "keyphrase_sources": [
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "impact:bypass depth check",
            "keyphrase": "bypass depth check",
            "type": "impact"
          },
          {
            "id": "vector:malicious HTML",
            "keyphrase": "malicious HTML",
            "type": "vector"
          },
          {
            "id": "product:DOMPurify",
            "keyphrase": "DOMPurify",
            "type": "product"
          },
          {
            "id": "version:before 2.5.4 and 3.1.3",
            "keyphrase": "before 2.5.4 and 3.1.3",
            "type": "version"
          }
        ]
      },
      "similarity": 460.3547540097445
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "source": "sparse",
        "original_content": "The product allows the upload or transfer of dangerous file types that are automatically processed within its environment.",
        "keyphrase_sources": [
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "impact:bypass depth check",
            "keyphrase": "bypass depth check",
            "type": "impact"
          },
          {
            "id": "vector:malicious HTML",
            "keyphrase": "malicious HTML",
            "type": "vector"
          },
          {
            "id": "product:DOMPurify",
            "keyphrase": "DOMPurify",
            "type": "product"
          },
          {
            "id": "version:before 2.5.4 and 3.1.3",
            "keyphrase": "before 2.5.4 and 3.1.3",
            "type": "version"
          }
        ]
      },
      "similarity": 438.7851624109291
    },
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse",
        "original_content": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
        "keyphrase_sources": [
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "impact:bypass depth check",
            "keyphrase": "bypass depth check",
            "type": "impact"
          }
        ]
      },
      "similarity": 432.3647566077524
    },
    {
      "metadata": {
        "doc_id": "1333",
        "name": "Inefficient Regular Expression Complexity",
        "source": "sparse",
        "original_content": "The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles.",
        "keyphrase_sources": [
          {
            "id": "version:before 2.5.4 and 3.1.3",
            "keyphrase": "before 2.5.4 and 3.1.3",
            "type": "version"
          }
        ]
      },
      "similarity": 169.99973873435573
    },
    {
      "metadata": {
        "doc_id": "138",
        "name": "Improper Neutralization of Special Elements",
        "source": "sparse",
        "original_content": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.",
        "keyphrase_sources": [
          {
            "id": "vector:malicious HTML",
            "keyphrase": "malicious HTML",
            "type": "vector"
          },
          {
            "id": "product:DOMPurify",
            "keyphrase": "DOMPurify",
            "type": "product"
          }
        ]
      },
      "similarity": 156.6742077339054
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-116",
      "CWE-1321",
      "CWE-80",
      "CWE-41",
      "CWE-79",
      "CWE-472",
      "CWE-352",
      "CWE-74",
      "CWE-138",
      "CWE-451",
      "CWE-184",
      "CWE-212",
      "CWE-434"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {
    "79": [
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "impact:bypass depth check",
        "keyphrase": "bypass depth check",
        "type": "impact"
      },
      {
        "id": "vector:malicious HTML",
        "keyphrase": "malicious HTML",
        "type": "vector"
      },
      {
        "id": "product:DOMPurify",
        "keyphrase": "DOMPurify",
        "type": "product"
      },
      {
        "id": "version:before 2.5.4 and 3.1.3",
        "keyphrase": "before 2.5.4 and 3.1.3",
        "type": "version"
      }
    ],
    "1321": [
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "impact:bypass depth check",
        "keyphrase": "bypass depth check",
        "type": "impact"
      },
      {
        "id": "vector:malicious HTML",
        "keyphrase": "malicious HTML",
        "type": "vector"
      },
      {
        "id": "product:DOMPurify",
        "keyphrase": "DOMPurify",
        "type": "product"
      },
      {
        "id": "version:before 2.5.4 and 3.1.3",
        "keyphrase": "before 2.5.4 and 3.1.3",
        "type": "version"
      }
    ],
    "116": [
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "impact:bypass depth check",
        "keyphrase": "bypass depth check",
        "type": "impact"
      },
      {
        "id": "vector:malicious HTML",
        "keyphrase": "malicious HTML",
        "type": "vector"
      },
      {
        "id": "product:DOMPurify",
        "keyphrase": "DOMPurify",
        "type": "product"
      },
      {
        "id": "version:before 2.5.4 and 3.1.3",
        "keyphrase": "before 2.5.4 and 3.1.3",
        "type": "version"
      }
    ],
    "434": [
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "impact:bypass depth check",
        "keyphrase": "bypass depth check",
        "type": "impact"
      },
      {
        "id": "vector:malicious HTML",
        "keyphrase": "malicious HTML",
        "type": "vector"
      },
      {
        "id": "product:DOMPurify",
        "keyphrase": "DOMPurify",
        "type": "product"
      },
      {
        "id": "version:before 2.5.4 and 3.1.3",
        "keyphrase": "before 2.5.4 and 3.1.3",
        "type": "version"
      }
    ],
    "352": [
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "impact:bypass depth check",
        "keyphrase": "bypass depth check",
        "type": "impact"
      }
    ],
    "138": [
      {
        "id": "vector:malicious HTML",
        "keyphrase": "malicious HTML",
        "type": "vector"
      },
      {
        "id": "product:DOMPurify",
        "keyphrase": "DOMPurify",
        "type": "product"
      }
    ],
    "1333": [
      {
        "id": "version:before 2.5.4 and 3.1.3",
        "keyphrase": "before 2.5.4 and 3.1.3",
        "type": "version"
      }
    ]
  }
}