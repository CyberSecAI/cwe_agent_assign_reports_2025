{
  "query": "In the Linux kernel, the following vulnerability has been resolved udmabuf fix memory leak on last export_udmabuf() error path In export_udmabuf(), if dma_buf_fd() fails because the FD table is full, a dma_buf owning the udmabuf has already been created but the error handling in udmabuf_create() will tear down the udmabuf without doing anything about the containing dma_buf. This leaves a dma_buf in memory that contains a dangling pointer though that doesnt seem to lead to anything bad except a memory leak. Fix it by moving the dma_buf_fd() call out of export_udmabuf() so that we can give it different error handling. Note that the shape of this code changed a lot in commit 5e72b2b41a21 (udmabuf convert udmabuf driver to use folios) but the memory leak seems to have existed since the introduction of udmabuf.",
  "count": 11,
  "results": [
    {
      "cwe_id": "401",
      "name": "Missing Release of Memory after Effective Lifetime",
      "abstraction": "Variant",
      "score": 1000.0,
      "original_score": 1000.0,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "909",
      "name": "Missing Initialization of Resource",
      "abstraction": "Class",
      "score": 591.352908978426,
      "original_score": 591.352908978426,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "125",
      "name": "Out-of-bounds Read",
      "abstraction": "Base",
      "score": 591.06302895203,
      "original_score": 591.06302895203,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "415",
      "name": "Double Free",
      "abstraction": "Variant",
      "score": 582.6933320314484,
      "original_score": 582.6933320314484,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "abstraction": "Class",
      "score": 580.6369421151818,
      "original_score": 580.6369421151818,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "abstraction": "Class",
      "score": 568.0540640220736,
      "original_score": 568.0540640220736,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "abstraction": "Base",
      "score": 566.1178836035349,
      "original_score": 566.1178836035349,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "787",
      "name": "Out-of-bounds Write",
      "abstraction": "Base",
      "score": 558.9564903594238,
      "original_score": 558.9564903594238,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "193",
      "name": "Off-by-one Error",
      "abstraction": "Base",
      "score": 558.4067532842297,
      "original_score": 558.4067532842297,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "209",
      "name": "Generation of Error Message Containing Sensitive Information",
      "abstraction": "Base",
      "score": 555.0348742593628,
      "original_score": 555.0348742593628,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "abstraction": "Base",
      "score": 194.61221410415436,
      "original_score": 194.61221410415436,
      "mapping_usage": "Allowed"
    }
  ],
  "statistics": {
    "min": 194.61221410415436,
    "max": 1000.0,
    "mean": 576.9934992463513,
    "median": 568.0540640220736,
    "count": 11
  }
}