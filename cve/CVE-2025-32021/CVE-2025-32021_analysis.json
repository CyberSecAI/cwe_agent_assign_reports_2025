{
  "cve_id": "CVE-2025-32021",
  "description": "Weblate is a web based localization tool. Prior to version 5.11, when creating a new component from an existing component that has a source code repository URL specified in settings, this URL is included in the clients URL parameters during the creation process. If, for example, the source code repository URL contains GitHub credentials, the confidential PAT and username are shown in plaintext and get saved into browser history. Moreover, if the request URL is logged, the credentials are written to logs in plaintext. If using Weblate official Docker image, nginx logs the URL and the token in plaintext. This issue is patched in version 5.11.",
  "key_phrases": {
    "rootcause": "including source code repository URL in client URL parameters during component creation",
    "weakness": "",
    "impact": "plaintext display of GitHub credentials",
    "vector": "creation of new component from existing component",
    "attacker": "",
    "product": "Weblate",
    "version": "prior to 5.11",
    "component": ""
  },
  "reference_content": "## Analysis of CVE-2025-32021 based on provided content:\n\nThe provided content is directly related to CVE-2025-32021 and provides more detail than the placeholder description. Here's a breakdown of the vulnerability information extracted from the content:\n\n**Root cause of vulnerability:**\n\nThe vulnerability stems from including the source code repository URL (which may contain GitHub credentials like PAT and username) in the client's URL parameters during component creation, specifically when creating a new component from an existing one.\n\n**Weaknesses/vulnerabilities present:**\n\n*   **CWE-598:** Exposure of sensitive information in logging and browser history.\n*   Insecure handling of sensitive data (GitHub PAT and username) in URL parameters.\n\n**Impact of exploitation:**\n\n*   **Compromised server logs:** If server logs are accessed by an attacker, they could gain access to private repositories.\n*   **Browser history exposure:**  The credentials are saved in browser history, making them accessible to malicious browser extensions or other actors with access to the browser profile.\n\n**Attack vectors:**\n\n*   Exploitation occurs during the component creation process in Weblate.\n*   Access to server logs.\n*   Access to the victim's browser history.\n\n**Required attacker capabilities/position:**\n\n*   An attacker needs to be able to observe the URL parameters during the component creation process.\n*   Access to server logs or the victim's browser history.\n*   No specific privileges are required to trigger the vulnerability, but access to logs or browser history is needed for exploitation.\n\n**Mitigation or fix:**\n\n*   The vulnerability is patched in Weblate version 5.11.  Updating to this version resolves the issue.\n*   The fix involves preventing the inclusion of sensitive credentials in URL parameters.\n\n**Additional Details:**\n\n*   **Affected Software:** Weblate (pip package) versions less than 5.11.\n*   **CVSS Score:** 2.2 / 10 (Low severity)\n*   **CVSS Vector:** CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:L/I:N/A:N\n*   **EPSS Score:** 0.067% (21st percentile)\n*   The content includes examples of the vulnerable URL and nginx log entries demonstrating the exposure of credentials.\n*   The vulnerability was reported by joonashak and remediated by nijel, with review by gersona.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-598 | Use of GET Request Method With Sensitive Query Strings | 0.9 | Variant |  | Allowed |\n| CWE-201 | Insertion of Sensitive Information Into Sent Data | 0.7 | Base |  | Allowed |\n| CWE-522 | Insufficiently Protected Credentials | 0.6 | Class |  | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship influencing the CWE selection is a combination of direct matching to the vulnerability description and hierarchical context. CWE-598 is a variant that exposes sensitive information via GET requests. CWE-201 is a broader base class, indicating the insertion of sensitive information into sent data. These two CWEs effectively capture the specific weakness. CWE-522, Insufficiently Protected Credentials, while relevant, is a higher-level classification and thus less specific than CWE-598 and CWE-201.\n\n```mermaid\ngraph TD\n    cwe598[\"CWE-598: Use of GET Request Method With Sensitive Query Strings\"]\n    cwe201[\"CWE-201: Insertion of Sensitive Information Into Sent Data\"]\n    cwe522[\"CWE-522: Insufficiently Protected Credentials\"]\n    \n    cwe598 -->|PeerOf| cwe201\n    cwe201 -->|ParentOf| cwe598\n    cwe522 -->|Broader| cwe201\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe598 primary\n    class cwe201,cwe522 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **rootcause**, which is the inclusion of the source code repository URL in the client's URL parameters during component creation. This leads to the exposure of sensitive information such as GitHub credentials in plaintext via the GET request (CWE-598). This information then gets logged, further exacerbating the problem.\n\n## Summary of Analysis\nThe analysis is strongly based on the provided evidence, particularly the \"Vulnerability Description Key Phrases\" and \"CVE Reference Links Content Summary\". The key phrase \"including source code repository URL in client URL parameters during component creation\" clearly points to the **rootcause**. The \"impact: plaintext display of GitHub credentials\" directly supports the selection of CWE-598 (Use of GET Request Method With Sensitive Query Strings) and CWE-201 (Insertion of Sensitive Information Into Sent Data).\n\nCWE-598 is selected as the primary CWE because it accurately captures how the sensitive data is exposed, namely through the GET request. CWE-201 supplements this by highlighting the general issue of sensitive data being included in sent data.\n\nOther CWEs were considered but deemed less appropriate:\n*   CWE-79 (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')): Not applicable, as the vulnerability isn't related to web page generation or XSS.\n*   CWE-639 (Authorization Bypass Through User-Controlled Key): Irrelevant, as the issue isn't about bypassing authorization.\n*   CWE-88 (Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')): Not applicable, as this isn't related to command injection.\n*   CWE-918 (Server-Side Request Forgery (SSRF)): Irrelevant, as this isn't about SSRF.\n*   CWE-209 (Generation of Error Message Containing Sensitive Information): While sensitive information is exposed, it's not specifically through error messages, making this less relevant.\n*   CWE-540 (Inclusion of Sensitive Information in Source Code): While the URL *could* be considered source code, the core problem is the transmission via URL, not inclusion in source.\n*   CWE-78 (Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')): Irrelevant, as this isn't about OS command injection.\n\nThe selected CWEs are at the optimal level of specificity, providing a clear and accurate representation of the vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-1286: Improper Validation of Syntactic Correctness of Input\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product receives input that is expected to be well-formed - i.e., to comply with a certain syntax - but it does not validate or incorrectly validates that the input complies with the syntax.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-201: Insertion of Sensitive Information Into Sent Data\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-209: Generation of Error Message Containing Sensitive Information\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product generates an error message that includes sensitive information about its environment, users, or associated data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\n**Abstraction Level**: Variant\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as \"<\", \">\", and \"&\" that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n\n\n## CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-598 | Use of GET Request Method With Sensitive Query Strings | 0.9 | Variant |  | Allowed |\n| CWE-201 | Insertion of Sensitive Information Into Sent Data | 0.7 | Base |  | Allowed |\n| CWE-522 | Insufficiently Protected Credentials | 0.6 | Class |  | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship influencing the CWE selection is a combination of direct matching to the vulnerability description and hierarchical context. CWE-598 is a variant that exposes sensitive information via GET requests. CWE-201 is a broader base class, indicating the insertion of sensitive information into sent data. These two CWEs effectively capture the specific weakness. CWE-522, Insufficiently Protected Credentials, while relevant, is a higher-level classification and thus less specific than CWE-598 and CWE-201.\n\n```mermaid\ngraph TD\n    cwe598[\"CWE-598: Use of GET Request Method With Sensitive Query Strings\"]\n    cwe201[\"CWE-201: Insertion of Sensitive Information Into Sent Data\"]\n    cwe522[\"CWE-522: Insufficiently Protected Credentials\"]\n    \n    cwe598 -->|PeerOf| cwe201\n    cwe201 -->|ParentOf| cwe598\n    cwe522 -->|Broader| cwe201\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe598 primary\n    class cwe201,cwe522 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **rootcause**, which is the inclusion of the source code repository URL in the client's URL parameters during component creation. This leads to the exposure of sensitive information such as GitHub credentials in plaintext via the GET request (CWE-598). This information then gets logged, further exacerbating the problem.\n\n## Summary of Analysis\nThe analysis is strongly based on the provided evidence, particularly the \"Vulnerability Description Key Phrases\" and \"CVE Reference Links Content Summary\". The key phrase \"including source code repository URL in client URL parameters during component creation\" clearly points to the **rootcause**. The \"impact: plaintext display of GitHub credentials\" directly supports the selection of CWE-598 (Use of GET Request Method With Sensitive Query Strings) and CWE-201 (Insertion of Sensitive Information Into Sent Data).\n\nCWE-598 is selected as the primary CWE because it accurately captures how the sensitive data is exposed, namely through the GET request. CWE-201 supplements this by highlighting the general issue of sensitive data being included in sent data.\n\nOther CWEs were considered but deemed less appropriate:\n*   CWE-79 (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')): Not applicable, as the vulnerability isn't related to web page generation or XSS.\n*   CWE-639 (Authorization Bypass Through User-Controlled Key): Irrelevant, as the issue isn't about bypassing authorization.\n*   CWE-88 (Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')): Not applicable, as this isn't related to command injection.\n*   CWE-918 (Server-Side Request Forgery (SSRF)): Irrelevant, as this isn't about SSRF.\n*   CWE-209 (Generation of Error Message Containing Sensitive Information): While sensitive information is exposed, it's not specifically through error messages, making this less relevant.\n*   CWE-540 (Inclusion of Sensitive Information in Source Code): While the URL *could* be considered source code, the core problem is the transmission via URL, not inclusion in source.\n*   CWE-78 (Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')): Irrelevant, as this isn't about OS command injection.\n\nThe selected CWEs are at the optimal level of specificity, providing a clear and accurate representation of the vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-1286: Improper Validation of Syntactic Correctness of Input\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product receives input that is expected to be well-formed - i.e., to comply with a certain syntax - but it does not validate or incorrectly validates that the input complies with the syntax.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-201: Insertion of Sensitive Information Into Sent Data\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-209: Generation of Error Message Containing Sensitive Information\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product generates an error message that includes sensitive information about its environment, users, or associated data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\n**Abstraction Level**: Variant\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as \"<\", \">\", and \"&\" that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n\n\n## CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-116:**\n- 116 (Improper Encoding or Escaping of Output) - ROOT\n\n\n**Chain starting from CWE-540:**\n- 540 (Inclusion of Sensitive Information in Source Code) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 678.5409759857921
    },
    {
      "metadata": {
        "doc_id": "639",
        "name": "Authorization Bypass Through User-Controlled Key",
        "source": "sparse"
      },
      "similarity": 676.3611253703666
    },
    {
      "metadata": {
        "doc_id": "88",
        "name": "Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
        "source": "sparse"
      },
      "similarity": 669.6117630579406
    },
    {
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "source": "sparse"
      },
      "similarity": 664.7030748453436
    },
    {
      "metadata": {
        "doc_id": "598",
        "name": "Use of GET Request Method With Sensitive Query Strings",
        "source": "sparse"
      },
      "similarity": 655.3635882679711
    },
    {
      "metadata": {
        "doc_id": "918",
        "name": "Server-Side Request Forgery (SSRF)",
        "source": "sparse"
      },
      "similarity": 642.5490566152162
    },
    {
      "metadata": {
        "doc_id": "209",
        "name": "Generation of Error Message Containing Sensitive Information",
        "source": "sparse"
      },
      "similarity": 639.202913693197
    },
    {
      "metadata": {
        "doc_id": "522",
        "name": "Insufficiently Protected Credentials",
        "source": "sparse"
      },
      "similarity": 631.685847352284
    },
    {
      "metadata": {
        "doc_id": "540",
        "name": "Inclusion of Sensitive Information in Source Code",
        "type": "Base",
        "original_content": "Source code on a web server or repository often contains sensitive information and should generally not be accessible to users.",
        "keyphrase_source": "rootcause:including source code repository URL in client URL parameters during component creation",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.4563461358421447,
            "graph": 1.6891930841226548
          }
        }
      },
      "similarity": 0.4563461358421447
    },
    {
      "doc_id": "78",
      "text": "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
      "score": 2.4700000000000006,
      "metadata": {
        "doc_id": "78",
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "type": "base",
        "original_content": "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "relationships": [
          {
            "source_id": "78",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "78",
            "target_id": "88",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "78",
            "target_id": "77",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1340"
            }
          },
          {
            "source_id": "78",
            "target_id": "77",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1305"
            }
          },
          {
            "source_id": "78",
            "target_id": "74",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "78",
            "target_id": "77",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "77",
            "target_id": "78",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "74",
            "target_id": "78",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "184",
            "target_id": "78",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 0.8,
          "sequence_path": 0.8,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "79",
                  "184",
                  "CANFOLLOW"
                ],
                [
                  "184",
                  "78",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "relationship_chain",
              "source": "79"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "79",
                  "184",
                  "CANFOLLOW"
                ],
                [
                  "184",
                  "78",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "vulnerability_sequence_forward",
              "source": "79"
            },
            "peer_relationship": {
              "path": [
                [
                  "78",
                  "88",
                  "CANALSOBE"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "88"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.4700000000000006
          }
        }
      },
      "similarity": 2.4700000000000006
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-116",
      "CWE-540",
      "CWE-88",
      "CWE-639",
      "CWE-80",
      "CWE-212",
      "CWE-79",
      "CWE-201",
      "CWE-1286",
      "CWE-93",
      "CWE-74",
      "CWE-78",
      "CWE-598",
      "CWE-522",
      "CWE-918",
      "CWE-209"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}