{
  "cve_id": "CVE-2024-52286",
  "description": "Stirling-PDF is a locally hosted web application that allows you to perform various operations on PDF files. In affected versions the Merge functionality takes untrusted user input (file name) and uses it directly in the creation of HTML pages allowing any unauthenticated to execute JavaScript code in the context of the user. The issue stems to the code starting at `Line 24` in `src/main/resources/static/js/merge.js`. The file name is directly being input into InnerHTML with no sanitization on the file name, allowing a malicious user to be able to upload files with names containing HTML tags. As HTML tags can include JavaScript code, this can be used to execute JavaScript code in the context of the user. This is a self-injection style attack and relies on a user uploading the malicious file themselves and it impact only them, not other users. A user might be social engineered into running this to launch a phishing attack. Nevertheless, this breaks the expected security restrictions in place by the application. This issue has been addressed in version 0.32.0 and all users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "key_phrases": {
    "rootcause": "improper input sanitization",
    "weakness": "",
    "impact": [
      "execute JavaScript code",
      "phishing attack",
      "upload files"
    ],
    "vector": "",
    "attacker": "unauthenticated user",
    "product": "Stirling-PDF",
    "version": "before 0.32.0",
    "component": "Merge functionality"
  },
  "reference_content": "The provided content is related to CVE-2024-52286.\n\n**Root cause of vulnerability:**\nThe Merge functionality in Stirling-PDF takes user-provided file names and uses them directly in the creation of HTML pages without sanitization.\n\n**Weaknesses/vulnerabilities present:**\n- Improper input handling\n- Lack of sanitization of user-supplied data\n- Cross-Site Scripting (XSS) vulnerability\n\n**Impact of exploitation:**\nAn attacker can execute arbitrary JavaScript code in the context of the user who uploads a malicious file. This can potentially lead to:\n- Displaying of arbitrary HTML, including iframes, to change the look of the page.\n- Displaying sensitive information, like session cookies.\n- Potentially launching phishing attacks\n\n**Attack vectors:**\n- Uploading a file with a malicious filename containing HTML tags, such as `<img src=x onerror=alert(1)>.pdf`.\n- Navigating to the Merge PDF page and uploading the malicious file.\n\n**Required attacker capabilities/position:**\n- Ability to upload files to the Stirling-PDF application through the merge functionality.\n- No authentication required.\n\n**Additional details:**\n- The vulnerability exists in the `src/main/resources/static/js/merge.js` file, specifically at line 24.\n- The fix involves using `textContent` instead of `innerHTML` when displaying the file name and creating elements using javascript and setting `textContent` for the file name and page counts to avoid any html injection.\n- The provided proof of concept demonstrates the injection of JavaScript code and cookie access.\n- The vulnerability is considered a self-injection style attack, meaning the attacker needs to trick the victim to upload a malicious file themselves.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 1.0 | Base | Allowed | Primary CWE |\n| CWE-434 | Unrestricted Upload of File with Dangerous Type | 0.7 | Base | Allowed | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship is that **Improper Input Neutralization (CWE-79)** can be caused by **Unrestricted Upload of File with Dangerous Type (CWE-434)** if the application doesn't validate file types or sanitize names upon upload. CWE-79 is a base level CWE, appropriate since the description clearly points to XSS due to unsanitized input within web page generation.\n\n```mermaid\ngraph TD\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    cwe434[\"CWE-434: Unrestricted Upload of File with Dangerous Type\"]\n    \n    cwe79 <--|CANFOLLOW| cwe434\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe79 primary\n    class cwe434 secondary\n```\n\n## Vulnerability Chain\n1.  **Root Cause:** **Improper input sanitization** of file names during file upload (**CWE-434**)\n2.  **Weakness:** The unsanitized file name is then used directly in the creation of HTML pages.\n3.  **Impact:** Execution of JavaScript code in the context of the user (**CWE-79**) and potential phishing attacks.\n\n## Summary of Analysis\nThe primary weakness is **CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')** because the vulnerability description specifically states that the file name is directly input into InnerHTML with no sanitization, allowing a malicious user to upload files with names containing HTML tags. This allows JavaScript code to be executed in the context of the user. The \"CVE Reference Links Content Summary\" section also confirms this by stating that there is a \"Lack of sanitization of user-supplied data\" and a \"Cross-Site Scripting (XSS) vulnerability.\"\n\nThe secondary weakness to consider is **CWE-434 Unrestricted Upload of File with Dangerous Type**. While the primary issue is the lack of sanitization (CWE-79), the fact that the application allows arbitrary file uploads, including those with potentially malicious names, contributes to the vulnerability. Specifically, the \"CVE Reference Links Content Summary\" section indicates that the \"Attack vectors\" include \"Uploading a file with a malicious filename containing HTML tags\". Thus, CWE-434 is a valid, albeit secondary, consideration.\n\nThe retriever results support these findings, with CWE-79 having the highest score. The graph relationships also support this, with CWE-434 potentially preceding CWE-79.\n\nOther CWEs were considered but deemed less relevant:\n\n*   CWE-138, CWE-116, CWE-94, CWE-1336, CWE-1321, CWE-1333, CWE-863, CWE-830: These are less directly related to the core issue of XSS due to unsanitized file names. For example, CWE-94 is about code injection, but the vulnerability is more directly about injecting HTML/JavaScript via a file name.\n\nThe selected CWEs are at the optimal level of specificity. CWE-79 is a base CWE that accurately describes the XSS vulnerability. CWE-434 describes how malicious files can be uploaded and lead to the XSS.",
  "analysis_with_relationships": "# Summary\n\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 1.0 | Base | Allowed | Primary CWE |\n| CWE-434 | Unrestricted Upload of File with Dangerous Type | 0.7 | Base | Allowed | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship is that **Improper Input Neutralization (CWE-79)** can be caused by **Unrestricted Upload of File with Dangerous Type (CWE-434)** if the application doesn't validate file types or sanitize names upon upload. CWE-79 is a base level CWE, appropriate since the description clearly points to XSS due to unsanitized input within web page generation.\n\n```mermaid\ngraph TD\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    cwe434[\"CWE-434: Unrestricted Upload of File with Dangerous Type\"]\n    \n    cwe79 <--|CANFOLLOW| cwe434\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe79 primary\n    class cwe434 secondary\n```\n\n## Vulnerability Chain\n1.  **Root Cause:** **Improper input sanitization** of file names during file upload (**CWE-434**)\n2.  **Weakness:** The unsanitized file name is then used directly in the creation of HTML pages.\n3.  **Impact:** Execution of JavaScript code in the context of the user (**CWE-79**) and potential phishing attacks.\n\n## Summary of Analysis\nThe primary weakness is **CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')** because the vulnerability description specifically states that the file name is directly input into InnerHTML with no sanitization, allowing a malicious user to upload files with names containing HTML tags. This allows JavaScript code to be executed in the context of the user. The \"CVE Reference Links Content Summary\" section also confirms this by stating that there is a \"Lack of sanitization of user-supplied data\" and a \"Cross-Site Scripting (XSS) vulnerability.\"\n\nThe secondary weakness to consider is **CWE-434 Unrestricted Upload of File with Dangerous Type**. While the primary issue is the lack of sanitization (CWE-79), the fact that the application allows arbitrary file uploads, including those with potentially malicious names, contributes to the vulnerability. Specifically, the \"CVE Reference Links Content Summary\" section indicates that the \"Attack vectors\" include \"Uploading a file with a malicious filename containing HTML tags\". Thus, CWE-434 is a valid, albeit secondary, consideration.\n\nThe retriever results support these findings, with CWE-79 having the highest score. The graph relationships also support this, with CWE-434 potentially preceding CWE-79.\n\nOther CWEs were considered but deemed less relevant:\n\n*   CWE-138, CWE-116, CWE-94, CWE-1336, CWE-1321, CWE-1333, CWE-863, CWE-830: These are less directly related to the core issue of XSS due to unsanitized file names. For example, CWE-94 is about code injection, but the vulnerability is more directly about injecting HTML/JavaScript via a file name.\n\nThe selected CWEs are at the optimal level of specificity. CWE-79 is a base CWE that accurately describes the XSS vulnerability. CWE-434 describes how malicious files can be uploaded and lead to the XSS.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-863:**\n- 863 (Incorrect Authorization) - ROOT\n\n\n**Chain starting from CWE-116:**\n- 116 (Improper Encoding or Escaping of Output) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 1209.647730061776
    },
    {
      "metadata": {
        "doc_id": "138",
        "name": "Improper Neutralization of Special Elements",
        "source": "sparse"
      },
      "similarity": 1146.2857832348768
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse"
      },
      "similarity": 1111.258467354196
    },
    {
      "metadata": {
        "doc_id": "94",
        "name": "Improper Control of Generation of Code ('Code Injection')",
        "source": "sparse"
      },
      "similarity": 1100.943663952618
    },
    {
      "metadata": {
        "doc_id": "1336",
        "name": "Improper Neutralization of Special Elements Used in a Template Engine",
        "source": "sparse"
      },
      "similarity": 1039.7835823465132
    },
    {
      "metadata": {
        "doc_id": "1321",
        "name": "Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')",
        "source": "sparse"
      },
      "similarity": 1039.5098232386515
    },
    {
      "metadata": {
        "doc_id": "1333",
        "name": "Inefficient Regular Expression Complexity",
        "source": "sparse"
      },
      "similarity": 1038.2787643046768
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 1031.83550061391
    },
    {
      "metadata": {
        "doc_id": "830",
        "name": "Inclusion of Web Functionality from an Untrusted Source",
        "type": "Variant",
        "original_content": "The product includes web functionality (such as a web widget) from another domain, which causes it to operate within the domain of the product, potentially granting total access and control of the product to the untrusted source.",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.5286551419506407
          }
        }
      },
      "similarity": 0.5286551419506407
    },
    {
      "doc_id": "434",
      "text": "The product allows the upload or transfer of dangerous file types that are automatically processed within its environment.",
      "score": 0.5288606694242477,
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "type": "Base",
        "extended_description": null,
        "alternate_terms": [
          "Unrestricted File Upload"
        ],
        "original_content": "The product allows the upload or transfer of dangerous file types that are automatically processed within its environment.",
        "relationships": [
          {
            "source_id": "434",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "183",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "430",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "436",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "351",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "669",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "434",
            "target_id": "669",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "434",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "669",
            "target_id": "434",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "430",
            "target_id": "434",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "434",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "183",
            "target_id": "434",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "source": "graph",
        "sources": [
          "vector",
          "graph"
        ],
        "vector_score": 0.5288606694242477,
        "graph_score": 3.8870000000000005,
        "score_components": {
          "relationship_chain": 0.8,
          "explicit_mention": 1.0,
          "abstraction_path": 0.9,
          "sequence_path": 0.8
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "79",
                  "184",
                  "CANFOLLOW"
                ],
                [
                  "184",
                  "434",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "relationship_chain",
              "source": "79"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "79",
                  "184",
                  "CANFOLLOW"
                ],
                [
                  "184",
                  "434",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "vulnerability_sequence_forward",
              "source": "79"
            }
          }
        },
        "is_explicit": true,
        "abstraction_level": "base",
        "position": "after",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse",
            "graph"
          ],
          "retriever_count": 3,
          "normalized_scores": {
            "dense": 0.5120283194970237,
            "sparse": 1027.6515497756916,
            "graph": 2.5437442677696995
          }
        }
      },
      "similarity": 2.5437442677696995
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-863",
      "CWE-116",
      "CWE-94",
      "CWE-1321",
      "CWE-79",
      "CWE-1336",
      "CWE-830",
      "CWE-138",
      "CWE-1333",
      "CWE-434"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}