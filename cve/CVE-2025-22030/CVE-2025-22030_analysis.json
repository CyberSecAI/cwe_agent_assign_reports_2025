{
  "cve_id": "CVE-2025-22030",
  "description": "In the Linux kernel, the following vulnerability has been resolved mm zswap fix crypto_free_acomp() **deadlock** in zswap_cpu_comp_dead() Currently, zswap_cpu_comp_dead() calls crypto_free_acomp() while holding the per-CPU acomp_ctx mutex. crypto_free_acomp() then holds scomp_lock (through crypto_exit_scomp_ops_async()). On the other hand, crypto_alloc_acomp_node() holds the scomp_lock (through crypto_scomp_init_tfm()), and then allocates memory. If the allocation results in reclaim, we may attempt to hold the per-CPU acomp_ctx mutex. The above dependencies can cause an ABBA **deadlock**. For example in the following scenario (1) Task A running on CPU #1 crypto_alloc_acomp_node() Holds scomp_lock Enters reclaim Reads per_cpu_ptr(pool->acomp_ctx, 1) (2) Task A is descheduled (3) CPU #1 goes offline zswap_cpu_comp_dead(CPU #1) Holds per_cpu_ptr(pool->acomp_ctx, 1)) Calls crypto_free_acomp() Waits for scomp_lock (4) Task A running on CPU #2 Waits for per_cpu_ptr(pool->acomp_ctx, 1) // Read on CPU #1 DEADLOCK Since there is no requirement to call crypto_free_acomp() with the per-CPU acomp_ctx mutex held in zswap_cpu_comp_dead(), move it after the mutex is unlocked. Also move the acomp_request_free() and kfree() calls for consistency and to avoid any potential sublte locking dependencies in the future. With this, only setting acomp_ctx fields to NULL occurs with the mutex held. This is similar to how zswap_cpu_comp_prepare() only initializes acomp_ctx fields with the mutex held, after performing all allocations before holding the mutex. Opportunistically, move the NULL check on acomp_ctx so that it takes place before the mutex dereference.",
  "key_phrases": {
    "rootcause": "lock ordering dependency",
    "weakness": "deadlock",
    "impact": "",
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": "zswap"
  },
  "reference_content": "UNRELATED\n\nThe provided content describes a system called Anubis designed to mitigate website scraping by AI companies. It does not relate to any vulnerability described by a CVE ID. It details a Proof-of-Work scheme and challenges related to bot detection, but doesn't present or discuss any security flaws or vulnerabilities.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-833 | Deadlock | 1.0 | Base | Allowed | Primary CWE |\n| CWE-667 | Improper Locking | 0.7 | Class | Allowed-with-Review | Secondary Candidate |\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.5 | Class | Allowed-with-Review | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is **CWE-833: Deadlock**. This is a base-level CWE, which is the preferred level of abstraction. **CWE-667: Improper Locking** and **CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')** are class-level CWEs that are related to concurrency issues. **CWE-667** is a parent of **CWE-833**, but **CWE-833** is more specific to the vulnerability description.\n\n```mermaid\ngraph TD\n    cwe833[\"CWE-833: Deadlock\"]\n    cwe667[\"CWE-667: Improper Locking\"]\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    \n    cwe833 -->|CHILDOF| cwe667\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe833 primary\n    class cwe667,cwe362 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain is as follows:\n1.  **Improper Lock Ordering (Root Cause):** The code acquires locks in an inconsistent order, leading to a **lock ordering dependency**.\n2.  **CWE-833: Deadlock (Weakness):** The inconsistent lock ordering can result in a **deadlock** condition where two or more threads are blocked indefinitely, waiting for each other to release the locks.\n\n## Summary of Analysis\nThe vulnerability is a **deadlock** caused by a **lock ordering dependency** in the Linux kernel's zswap functionality. The code acquires locks in an inconsistent order, leading to a potential **deadlock** scenario. The provided information clearly indicates a **deadlock** situation, making **CWE-833: Deadlock** the most appropriate primary CWE.\n\nThe vulnerability description explicitly mentions the term \"**deadlock**\" and describes a scenario where tasks are blocked indefinitely, waiting for each other to release locks. The fix involves reordering the lock acquisition to avoid the **deadlock** condition.\n\n**CWE-833: Deadlock** is the most specific and accurate representation of the vulnerability based on the available evidence.\n\nOther CWEs Considered:\n*   **CWE-667: Improper Locking**: This is a more general class of weakness that could apply to the vulnerability, but **CWE-833** is more specific.\n*   **CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')**: This is another class-level CWE related to concurrency issues, but **CWE-833** is a more precise description of the vulnerability.\n*   **CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer**, **CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')**, **CWE-125: Out-of-bounds Read**: These are not relevant to the described vulnerability.\n*   **CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')**: Not relevant, as this involves a loop and not a deadlock.\n*   **CWE-400: Uncontrolled Resource Consumption**: Not relevant, as this involves consumption of resources but no mention of deadlock.\n*   **CWE-407: Inefficient Algorithmic Complexity**: Not relevant, as there is no mention of algorithm complexity.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-833 | Deadlock | 1.0 | Base | Allowed | Primary CWE |\n| CWE-667 | Improper Locking | 0.7 | Class | Allowed-with-Review | Secondary Candidate |\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.5 | Class | Allowed-with-Review | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is **CWE-833: Deadlock**. This is a base-level CWE, which is the preferred level of abstraction. **CWE-667: Improper Locking** and **CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')** are class-level CWEs that are related to concurrency issues. **CWE-667** is a parent of **CWE-833**, but **CWE-833** is more specific to the vulnerability description.\n\n```mermaid\ngraph TD\n    cwe833[\"CWE-833: Deadlock\"]\n    cwe667[\"CWE-667: Improper Locking\"]\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    \n    cwe833 -->|CHILDOF| cwe667\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe833 primary\n    class cwe667,cwe362 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain is as follows:\n1.  **Improper Lock Ordering (Root Cause):** The code acquires locks in an inconsistent order, leading to a **lock ordering dependency**.\n2.  **CWE-833: Deadlock (Weakness):** The inconsistent lock ordering can result in a **deadlock** condition where two or more threads are blocked indefinitely, waiting for each other to release the locks.\n\n## Summary of Analysis\nThe vulnerability is a **deadlock** caused by a **lock ordering dependency** in the Linux kernel's zswap functionality. The code acquires locks in an inconsistent order, leading to a potential **deadlock** scenario. The provided information clearly indicates a **deadlock** situation, making **CWE-833: Deadlock** the most appropriate primary CWE.\n\nThe vulnerability description explicitly mentions the term \"**deadlock**\" and describes a scenario where tasks are blocked indefinitely, waiting for each other to release locks. The fix involves reordering the lock acquisition to avoid the **deadlock** condition.\n\n**CWE-833: Deadlock** is the most specific and accurate representation of the vulnerability based on the available evidence.\n\nOther CWEs Considered:\n*   **CWE-667: Improper Locking**: This is a more general class of weakness that could apply to the vulnerability, but **CWE-833** is more specific.\n*   **CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')**: This is another class-level CWE related to concurrency issues, but **CWE-833** is a more precise description of the vulnerability.\n*   **CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer**, **CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')**, **CWE-125: Out-of-bounds Read**: These are not relevant to the described vulnerability.\n*   **CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')**: Not relevant, as this involves a loop and not a deadlock.\n*   **CWE-400: Uncontrolled Resource Consumption**: Not relevant, as this involves consumption of resources but no mention of deadlock.\n*   **CWE-407: Inefficient Algorithmic Complexity**: Not relevant, as there is no mention of algorithm complexity.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-400:**\n- 400 (Uncontrolled Resource Consumption) - ROOT\n\n\n**Chain starting from CWE-407:**\n- 407 (Inefficient Algorithmic Complexity) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "667",
        "name": "Improper Locking",
        "source": "sparse"
      },
      "similarity": 1164.7295203262468
    },
    {
      "metadata": {
        "doc_id": "833",
        "name": "Deadlock",
        "source": "sparse"
      },
      "similarity": 1039.203464636344
    },
    {
      "metadata": {
        "doc_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "source": "sparse"
      },
      "similarity": 907.0817567214954
    },
    {
      "metadata": {
        "doc_id": "119",
        "name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
        "source": "sparse"
      },
      "similarity": 893.8035953263034
    },
    {
      "metadata": {
        "doc_id": "835",
        "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
        "source": "sparse"
      },
      "similarity": 889.0237288121032
    },
    {
      "metadata": {
        "doc_id": "400",
        "name": "Uncontrolled Resource Consumption",
        "source": "sparse"
      },
      "similarity": 880.1959882134165
    },
    {
      "metadata": {
        "doc_id": "407",
        "name": "Inefficient Algorithmic Complexity",
        "source": "sparse"
      },
      "similarity": 875.4714238725852
    },
    {
      "metadata": {
        "doc_id": "125",
        "name": "Out-of-bounds Read",
        "source": "sparse"
      },
      "similarity": 869.1987437366209
    },
    {
      "metadata": {
        "doc_id": "1252",
        "name": "CPU Hardware Not Configured to Support Exclusivity of Write and Execute Operations",
        "type": "Base",
        "original_content": "The CPU is not configured to provide hardware support for exclusivity of write and execute operations on memory. This allows an attacker to execute data from all of memory.",
        "keyphrase_source": "weakness:deadlock",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.4616084476801053
          }
        }
      },
      "similarity": 0.4616084476801053
    },
    {
      "doc_id": "120",
      "text": "CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
      "score": 2.4232000000000005,
      "metadata": {
        "doc_id": "120",
        "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
        "type": "base",
        "original_content": "CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
        "relationships": [
          {
            "source_id": "120",
            "target_id": "785",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "120",
            "target_id": "456",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "120",
            "target_id": "416",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "120",
            "target_id": "231",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "120",
            "target_id": "170",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "120",
            "target_id": "20",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "700"
            }
          },
          {
            "source_id": "120",
            "target_id": "123",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "120",
            "target_id": "119",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1340"
            }
          },
          {
            "source_id": "120",
            "target_id": "119",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1305"
            }
          },
          {
            "source_id": "120",
            "target_id": "119",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "120",
            "target_id": "119",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "785",
            "target_id": "120",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "456",
            "target_id": "120",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "416",
            "target_id": "120",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "231",
            "target_id": "120",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "20",
            "target_id": "120",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "700"
            }
          },
          {
            "source_id": "196",
            "target_id": "120",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "170",
            "target_id": "120",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "120",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "119",
            "target_id": "120",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 0.8,
          "abstraction_path": 0.7200000000000001,
          "sequence_path": 0.8
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "909",
                  "456",
                  "PARENTOF"
                ],
                [
                  "456",
                  "120",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "relationship_chain",
              "source": "909"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "119",
                  "120",
                  "PARENTOF"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "abstraction_path_down",
              "source": "119"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "362",
                  "416",
                  "CANPRECEDE"
                ],
                [
                  "416",
                  "120",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "vulnerability_sequence_forward",
              "source": "362"
            }
          }
        },
        "abstraction_level": "base",
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "There are some indications that this CWE ID might be misused and selected simply because it mentions \"buffer overflow\" - an increasingly vague term. This CWE entry is only appropriate for \"Buffer Copy\" operations (not buffer reads), in which where there is no \"Checking [the] Size of Input\", and (by implication of the copy) writing past the end of the buffer.",
          "comments": "If the vulnerability being analyzed involves out-of-bounds reads, then consider CWE-125 or descendants. For root cause analysis: if there is any input validation, consider children of CWE-20 such as CWE-1284. If there is a calculation error for buffer sizes, consider CWE-131 or similar.",
          "reasons": [
            "Frequent Misuse"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.4232000000000005
          }
        }
      },
      "similarity": 2.4232000000000005
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-400",
      "CWE-407",
      "CWE-125",
      "CWE-667",
      "CWE-833",
      "CWE-835",
      "CWE-362",
      "CWE-119",
      "CWE-120"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}