{
  "cve_id": "CVE-2025-37816",
  "description": "In the Linux kernel, the following vulnerability has been resolved mei vsc Fix fortify-panic caused by **invalid counted_by() use** gcc 15 honors the __counted_by(len) attribute on vsc_tp_packet.buf[] and the vsc-tp.c code is using this in a wrong way. len does not contain the available size in the buffer, it contains the actual packet length *without* the crc. So as soon as vsc_tp_xfer() tries to add the crc to buf[] the fortify-panic handler gets triggered [ 80.842193] memcpy detected **buffer overflow** 4 byte write of buffer size 0 [ 80.842243] WARNING CPU 4 PID 272 at lib/string_helpers.c1032 __fortify_report+0x45/0x50 ... [ 80.843175] __fortify_panic+0x9/0xb [ 80.843186] vsc_tp_xfer.cold+0x67/0x67 [mei_vsc_hw] [ 80.843210] ? seqcount_lockdep_reader_access.constprop.0+0x82/0x90 [ 80.843229] ? lockdep_hardirqs_on+0x7c/0x110 [ 80.843250] mei_vsc_hw_start+0x98/0x120 [mei_vsc] [ 80.843270] mei_reset+0x11d/0x420 [mei] The easiest fix would be to just drop the counted-by but with the exception of the ack buffer in vsc_tp_xfer_helper() which only contains enough room for the packet-header, all other uses of vsc_tp_packet always use a buffer of VSC_TP_MAX_XFER_SIZE bytes for the packet. Instead of just dropping the counted-by, split the vsc_tp_packet struct definition into a header and a full-packet definition and use a fixed size buf[] in the packet definition, this way fortify-source buffer overrun checking still works when enabled.",
  "key_phrases": {
    "rootcause": "invalid counted_by() use",
    "weakness": "buffer overflow",
    "impact": "fortify-panic",
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": "mei vsc"
  },
  "reference_content": null,
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n\n| CWE ID  | CWE Name                                                               | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| ------- | ---------------------------------------------------------------------- | ---------- | --------------------- | ------------------------------- | ------------------------------- |\n| CWE-787 | Out-of-bounds Write                                                     | 0.9        | Base                  | Primary                         | Allowed                         |\n| CWE-131 | Incorrect Calculation of Buffer Size                                   | 0.7        | Base                  | Secondary                       | Allowed                         |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\n\nThe primary CWE is CWE-787 (Out-of-bounds Write). CWE-131 (Incorrect Calculation of Buffer Size) can precede CWE-787, as an incorrect size calculation can lead to an out-of-bounds write. CWE-119 (Improper Restriction of Operations within the Bounds of a Memory Buffer) is a parent of CWE-787 and CWE-131. The selection of CWE-787 is more specific than CWE-119.\n\n```mermaid\ngraph TD\n    cwe787[\"CWE-787: Out-of-bounds Write\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations\"]\n    cwe131[\"CWE-131: Incorrect Calculation of Buffer Size\"]\n    \n    cwe787 -->|CHILDOF| cwe119\n    cwe131 -->|CHILDOF| cwe119\n    cwe131 -->|CANPRECEDE| cwe787\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe787 primary\n    class cwe119,cwe131 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with an **invalid counted_by() use**, leading to an **incorrect calculation of the buffer size**, which results in an **out-of-bounds write**, manifesting as a **buffer overflow** and ultimately triggering a fortify-panic.\n\n## Summary of Analysis\n\nThe analysis is based on the provided evidence, which indicates an **invalid counted_by() use** leading to a **buffer overflow**.\n\nThe relationship graph shows how an incorrect buffer size calculation (CWE-131) can lead to an out-of-bounds write (CWE-787), both being specific instances of improper memory buffer operation (CWE-119).\n\nCWE-787 is selected as the primary CWE because the memcpy operation results in writing past the end of the buffer. The vulnerability description explicitly states: \"memcpy detected **buffer overflow** 4 byte write of buffer size 0\". This is a direct out-of-bounds write.\n\nCWE-131 is selected as a secondary CWE because the root cause \"mei vsc Fix fortify-panic caused by **invalid counted_by() use**\" indicates an incorrect calculation of the buffer size using the counted_by() attribute.\n\nThe selected CWEs are at the optimal level of specificity, as they directly address the root cause and the resulting vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\n\n## CWE-131: Incorrect Calculation of Buffer Size\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Justification:* The **invalid counted_by() use** indicates an error in calculating the buffer size. The description aligns with CWE-131.\n\n## CWE-787: Out-of-bounds Write\n**Abstraction Level**: Base\n**Similarity Score**: N/A (not in retriever results, but directly relevant)\n**Source**: Vulnerability Description\n\n**Description**: The product writes data past the end, or before the beginning, of the intended buffer.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Justification:* The vulnerability description explicitly mentions a **buffer overflow** due to writing 4 bytes past the end of a buffer size 0.\n\n## CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\n**Abstraction Level**: Class\n**Similarity Score**: 0.72086 (Retriever Result)\n**Source**: sparse\n\n**Description**: The product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-119 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available.\n\n*Justification:* While this is a more general description of the issue, CWE-787 provides a more specific classification of the vulnerability as an out-of-bounds write. Therefore, CWE-119 is not selected as the primary CWE.\n\n## CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\n**Abstraction Level**: Base\n**Similarity Score**: 0.700 (Retriever Result)\n**Source**: alternate_terms\n\n**Description**: The product copies an input buffer to an output buffer without checking the size of the input buffer, potentially leading to a buffer overflow.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: There are some indications that this CWE ID might be misused and selected simply because it mentions \"buffer overflow\" - an increasingly vague term. This CWE entry is only appropriate for \"Buffer Copy\" operations (not buffer reads), in which where there is no \"Checking [the] Size of Input\", and (by implication of the copy) writing past the end of the buffer.\n\n*Justification:* While the vulnerability results in a **buffer overflow**, the root cause is not necessarily due to missing size checks during a buffer copy operation. The issue is with an **incorrect calculation of the buffer size** due to the **invalid counted_by() use** and ultimately results in out of bounds write (CWE-787).\n\n## CWE-190: Integer Overflow or Wraparound\n**Abstraction Level**: Base\n**Similarity Score**: 0.800 (Retriever Result)\n**Source**: alternate_terms\n\n**Description**: The product performs a calculation that can produce an integer overflow or wraparound when the logic assumes that the resulting value will always be larger than the original value.\n\n*Justification:* While an integer overflow could theoretically be involved in the size calculation, there is no explicit evidence provided. Therefore, CWE-190 is not selected.\n\n## CWE-125: Out-of-bounds Read\n**Abstraction Level**: Base\n**Similarity Score**: 0.942 (Retriever Result)\n**Source**: sparse\n\n**Description**: The product reads data past the end, or before the beginning, of the intended buffer.\n\n*Justification:* The vulnerability description focuses on writing beyond buffer limits rather than reading. Therefore, CWE-125 is not selected.",
  "analysis_with_relationships": "# Summary\n\n| CWE ID  | CWE Name                                                               | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| ------- | ---------------------------------------------------------------------- | ---------- | --------------------- | ------------------------------- | ------------------------------- |\n| CWE-787 | Out-of-bounds Write                                                     | 0.9        | Base                  | Primary                         | Allowed                         |\n| CWE-131 | Incorrect Calculation of Buffer Size                                   | 0.7        | Base                  | Secondary                       | Allowed                         |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\n\nThe primary CWE is CWE-787 (Out-of-bounds Write). CWE-131 (Incorrect Calculation of Buffer Size) can precede CWE-787, as an incorrect size calculation can lead to an out-of-bounds write. CWE-119 (Improper Restriction of Operations within the Bounds of a Memory Buffer) is a parent of CWE-787 and CWE-131. The selection of CWE-787 is more specific than CWE-119.\n\n```mermaid\ngraph TD\n    cwe787[\"CWE-787: Out-of-bounds Write\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations\"]\n    cwe131[\"CWE-131: Incorrect Calculation of Buffer Size\"]\n    \n    cwe787 -->|CHILDOF| cwe119\n    cwe131 -->|CHILDOF| cwe119\n    cwe131 -->|CANPRECEDE| cwe787\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe787 primary\n    class cwe119,cwe131 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with an **invalid counted_by() use**, leading to an **incorrect calculation of the buffer size**, which results in an **out-of-bounds write**, manifesting as a **buffer overflow** and ultimately triggering a fortify-panic.\n\n## Summary of Analysis\n\nThe analysis is based on the provided evidence, which indicates an **invalid counted_by() use** leading to a **buffer overflow**.\n\nThe relationship graph shows how an incorrect buffer size calculation (CWE-131) can lead to an out-of-bounds write (CWE-787), both being specific instances of improper memory buffer operation (CWE-119).\n\nCWE-787 is selected as the primary CWE because the memcpy operation results in writing past the end of the buffer. The vulnerability description explicitly states: \"memcpy detected **buffer overflow** 4 byte write of buffer size 0\". This is a direct out-of-bounds write.\n\nCWE-131 is selected as a secondary CWE because the root cause \"mei vsc Fix fortify-panic caused by **invalid counted_by() use**\" indicates an incorrect calculation of the buffer size using the counted_by() attribute.\n\nThe selected CWEs are at the optimal level of specificity, as they directly address the root cause and the resulting vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\n\n## CWE-131: Incorrect Calculation of Buffer Size\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Justification:* The **invalid counted_by() use** indicates an error in calculating the buffer size. The description aligns with CWE-131.\n\n## CWE-787: Out-of-bounds Write\n**Abstraction Level**: Base\n**Similarity Score**: N/A (not in retriever results, but directly relevant)\n**Source**: Vulnerability Description\n\n**Description**: The product writes data past the end, or before the beginning, of the intended buffer.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Justification:* The vulnerability description explicitly mentions a **buffer overflow** due to writing 4 bytes past the end of a buffer size 0.\n\n## CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\n**Abstraction Level**: Class\n**Similarity Score**: 0.72086 (Retriever Result)\n**Source**: sparse\n\n**Description**: The product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-119 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available.\n\n*Justification:* While this is a more general description of the issue, CWE-787 provides a more specific classification of the vulnerability as an out-of-bounds write. Therefore, CWE-119 is not selected as the primary CWE.\n\n## CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\n**Abstraction Level**: Base\n**Similarity Score**: 0.700 (Retriever Result)\n**Source**: alternate_terms\n\n**Description**: The product copies an input buffer to an output buffer without checking the size of the input buffer, potentially leading to a buffer overflow.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: There are some indications that this CWE ID might be misused and selected simply because it mentions \"buffer overflow\" - an increasingly vague term. This CWE entry is only appropriate for \"Buffer Copy\" operations (not buffer reads), in which where there is no \"Checking [the] Size of Input\", and (by implication of the copy) writing past the end of the buffer.\n\n*Justification:* While the vulnerability results in a **buffer overflow**, the root cause is not necessarily due to missing size checks during a buffer copy operation. The issue is with an **incorrect calculation of the buffer size** due to the **invalid counted_by() use** and ultimately results in out of bounds write (CWE-787).\n\n## CWE-190: Integer Overflow or Wraparound\n**Abstraction Level**: Base\n**Similarity Score**: 0.800 (Retriever Result)\n**Source**: alternate_terms\n\n**Description**: The product performs a calculation that can produce an integer overflow or wraparound when the logic assumes that the resulting value will always be larger than the original value.\n\n*Justification:* While an integer overflow could theoretically be involved in the size calculation, there is no explicit evidence provided. Therefore, CWE-190 is not selected.\n\n## CWE-125: Out-of-bounds Read\n**Abstraction Level**: Base\n**Similarity Score**: 0.942 (Retriever Result)\n**Source**: sparse\n\n**Description**: The product reads data past the end, or before the beginning, of the intended buffer.\n\n*Justification:* The vulnerability description focuses on writing beyond buffer limits rather than reading. Therefore, CWE-125 is not selected.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-125:**\n- 125 (Out-of-bounds Read) - ROOT\n\n\n**Chain starting from CWE-131:**\n- 131 (Incorrect Calculation of Buffer Size) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "119",
        "name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Buffer Overflow",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "190",
        "name": "Integer Overflow or Wraparound",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Overflow",
        "match_reason": "term_in_phrase_whole_phrase"
      },
      "similarity": 800.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "120",
        "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Classic Buffer Overflow",
        "match_reason": "phrase_in_term_whole_phrase"
      },
      "similarity": 700.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "1284",
        "name": "Improper Validation of Specified Quantity in Input",
        "source": "sparse"
      },
      "similarity": 1028.5230382574307
    },
    {
      "metadata": {
        "doc_id": "125",
        "name": "Out-of-bounds Read",
        "source": "sparse"
      },
      "similarity": 942.2703999362686
    },
    {
      "metadata": {
        "doc_id": "770",
        "name": "Allocation of Resources Without Limits or Throttling",
        "source": "sparse"
      },
      "similarity": 925.7776997565384
    },
    {
      "metadata": {
        "doc_id": "122",
        "name": "Heap-based Buffer Overflow",
        "source": "sparse"
      },
      "similarity": 913.4634471845706
    },
    {
      "metadata": {
        "doc_id": "121",
        "name": "Stack-based Buffer Overflow",
        "source": "sparse"
      },
      "similarity": 911.0813261968542
    },
    {
      "metadata": {
        "doc_id": "805",
        "name": "Buffer Access with Incorrect Length Value",
        "type": "Base",
        "original_content": "The product uses a sequential operation to read or write a buffer, but it uses an incorrect length value that causes it to access memory that is outside of the bounds of the buffer.",
        "keyphrase_source": "weakness:buffer overflow",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.5738994275139947
          }
        }
      },
      "similarity": 0.5738994275139947
    },
    {
      "doc_id": "1339",
      "text": "CWE-1339: Insufficient Precision or Accuracy of a Real Number",
      "score": 2.9120000000000004,
      "metadata": {
        "doc_id": "1339",
        "name": "Insufficient Precision or Accuracy of a Real Number",
        "type": "base",
        "original_content": "CWE-1339: Insufficient Precision or Accuracy of a Real Number",
        "relationships": [
          {
            "source_id": "1339",
            "target_id": "119",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1339",
            "target_id": "834",
            "label": "CANPRECEDE",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1339",
            "target_id": "190",
            "label": "PEEROF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1339",
            "target_id": "682",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "834",
            "target_id": "1339",
            "label": "CANFOLLOW",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "682",
            "target_id": "1339",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "119",
            "target_id": "1339",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "119",
                  "1339",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "119"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "119",
                  "1339",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "119"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "1339",
                  "119",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "119"
            },
            "peer_relationship": {
              "path": [
                [
                  "1339",
                  "190",
                  "PEEROF"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "190"
            }
          }
        },
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.9120000000000004
          }
        }
      },
      "similarity": 2.9120000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-125",
      "CWE-131",
      "CWE-787",
      "CWE-190",
      "CWE-119",
      "CWE-120"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}