{
  "retriever": "graph",
  "query": "In the Linux kernel, the following vulnerability has been resolved net/iucv fix use after free in iucv_sock_close() iucv_sever_path() is called from process context and from bh context. iucv->path is used as indicator whether somebody else is taking care of severing the path (or it is already removed / never existed). This needs to be done with atomic compare and swap, otherwise there is a small window where iucv_sock_close() will try to work with a path that has already been severed and freed by iucv_callback_connrej() called by iucv_tasklet_fn(). Example [452744.123844] Call Trace [452744.123845] ([] 0x1e87f03880) [452744.123966] [] iucv_path_sever+0x96/0x138 [452744.124330] [] iucv_sever_path+0xc2/0xd0 [af_iucv] [452744.124336] [] iucv_sock_close+0xa6/0x310 [af_iucv] [452744.124341] [] iucv_sock_release+0x3c/0xd0 [af_iucv] [452744.124345] [] __sock_release+0x5e/0xe8 [452744.124815] [] sock_close+0x34/0x48 [452744.124820] [] __fput+0xba/0x268 [452744.124826] [] task_work_run+0xbc/0xf0 [452744.124832] [] do_notify_resume+0x88/0x90 [452744.124841] [] system_call+0xe2/0x2c8 [452744.125319] Last Breaking-Event-Address [452744.125321] [] iucv_path_sever+0x90/0x138 [452744.125324] [452744.125325] Kernel panic - not syncing Fatal exception in interr Consider specifically these CWEs: CWE-416 CWE-775 CWE-667 CWE-401 CWE-364 CWE-362 CWE-367 CWE-415",
  "keyphrases": {
    "original_query": "In the Linux kernel, the following vulnerability has been resolved net/iucv fix use after free in iucv_sock_close() iucv_sever_path() is called from process context and from bh context. iucv->path is used as indicator whether somebody else is taking care of severing the path (or it is already removed / never existed). This needs to be done with atomic compare and swap, otherwise there is a small window where iucv_sock_close() will try to work with a path that has already been severed and freed by iucv_callback_connrej() called by iucv_tasklet_fn(). Example [452744.123844] Call Trace [452744.123845] ([] 0x1e87f03880) [452744.123966] [] iucv_path_sever+0x96/0x138 [452744.124330] [] iucv_sever_path+0xc2/0xd0 [af_iucv] [452744.124336] [] iucv_sock_close+0xa6/0x310 [af_iucv] [452744.124341] [] iucv_sock_release+0x3c/0xd0 [af_iucv] [452744.124345] [] __sock_release+0x5e/0xe8 [452744.124815] [] sock_close+0x34/0x48 [452744.124820] [] __fput+0xba/0x268 [452744.124826] [] task_work_run+0xbc/0xf0 [452744.124832] [] do_notify_resume+0x88/0x90 [452744.124841] [] system_call+0xe2/0x2c8 [452744.125319] Last Breaking-Event-Address [452744.125321] [] iucv_path_sever+0x90/0x138 [452744.125324] [452744.125325] Kernel panic - not syncing Fatal exception in interr",
    "enhanced_query": "In the Linux kernel, the following vulnerability has been resolved net/iucv fix use after free in iucv_sock_close() iucv_sever_path() is called from process context and from bh context. iucv->path is used as indicator whether somebody else is taking care of severing the path (or it is already removed / never existed). This needs to be done with atomic compare and swap, otherwise there is a small window where iucv_sock_close() will try to work with a path that has already been severed and freed by iucv_callback_connrej() called by iucv_tasklet_fn(). Example [452744.123844] Call Trace [452744.123845] ([] 0x1e87f03880) [452744.123966] [] iucv_path_sever+0x96/0x138 [452744.124330] [] iucv_sever_path+0xc2/0xd0 [af_iucv] [452744.124336] [] iucv_sock_close+0xa6/0x310 [af_iucv] [452744.124341] [] iucv_sock_release+0x3c/0xd0 [af_iucv] [452744.124345] [] __sock_release+0x5e/0xe8 [452744.124815] [] sock_close+0x34/0x48 [452744.124820] [] __fput+0xba/0x268 [452744.124826] [] task_work_run+0xbc/0xf0 [452744.124832] [] do_notify_resume+0x88/0x90 [452744.124841] [] system_call+0xe2/0x2c8 [452744.125319] Last Breaking-Event-Address [452744.125321] [] iucv_path_sever+0x90/0x138 [452744.125324] [452744.125325] Kernel panic - not syncing Fatal exception in interr Consider specifically these CWEs: CWE-416 CWE-775 CWE-667 CWE-401 CWE-364 CWE-362 CWE-367 CWE-415",
    "cwe_mentions": [
      "CWE-416",
      "CWE-775",
      "CWE-667",
      "CWE-401",
      "CWE-364",
      "CWE-362",
      "CWE-367",
      "CWE-415"
    ],
    "search_time": 2.5613772869110107
  },
  "timestamp": "2025-07-13 13:52:15",
  "cve_id": "CVE-2024-42271",
  "result_count": 20,
  "results": [
    {
      "cwe_id": "364",
      "name": "Signal Handler Race Condition",
      "type": "base",
      "score": 4.329000000000001,
      "relationship_count": 0
    },
    {
      "cwe_id": "123",
      "name": "Write-what-where Condition",
      "type": "base",
      "score": 2.9120000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "609",
      "name": "Double-Checked Locking",
      "type": "base",
      "score": 2.8651999999999997,
      "relationship_count": 0
    },
    {
      "cwe_id": "416",
      "name": "Use After Free",
      "type": "Variant",
      "score": 2.5532286384837573,
      "relationship_count": 0
    },
    {
      "cwe_id": "415",
      "name": "Double Free",
      "type": "Variant",
      "score": 2.5416046387414504,
      "relationship_count": 0
    },
    {
      "cwe_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "type": "base",
      "score": 2.4699999999999998,
      "relationship_count": 0
    },
    {
      "cwe_id": "386",
      "name": "Symbolic Name not Mapping to Correct Object",
      "type": "base",
      "score": 2.3764000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "1265",
      "name": "Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls",
      "type": "base",
      "score": 2.2100000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "120",
      "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
      "type": "base",
      "score": 2.2100000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "390",
      "name": "Detection of Error Condition Without Action",
      "type": "base",
      "score": 2.2100000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "368",
      "name": "Context Switching Race Condition",
      "type": "base",
      "score": 2.1762,
      "relationship_count": 0
    },
    {
      "cwe_id": "479",
      "name": "Signal Handler Use of a Non-reentrant Function",
      "type": "variant",
      "score": 2.06592,
      "relationship_count": 0
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "type": "Class",
      "score": 1.753283336096688,
      "relationship_count": 0
    },
    {
      "cwe_id": "134",
      "name": "Use of Externally-Controlled Format String",
      "type": "base",
      "score": 1.6848000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "1325",
      "name": "Improperly Controlled Sequential Memory Allocation",
      "type": "base",
      "score": 1.6848000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "590",
      "name": "Free of Memory not on the Heap",
      "type": "variant",
      "score": 1.5552000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "456",
      "name": "Missing Initialization of a Variable",
      "type": "variant",
      "score": 1.5552000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "231",
      "name": "Improper Handling of Extra Values",
      "type": "variant",
      "score": 1.5552000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "type": "Base",
      "score": 1.5391146381355552,
      "relationship_count": 0
    },
    {
      "cwe_id": "89",
      "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
      "type": "base",
      "score": 1.3676000000000001,
      "relationship_count": 0
    }
  ]
}