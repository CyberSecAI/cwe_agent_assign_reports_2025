{
  "cve_id": "CVE-2024-7387",
  "description": "A flaw was found in openshift/builder. This vulnerability allows **command injection** via **path traversal**, where a malicious user can execute arbitrary commands on the OpenShift node running the builder container. When using the Docker strategy, executable files inside the privileged build container can be overridden using the `spec.source.secrets.secret.destinationDir` attribute of the `BuildConfig` definition. An attacker running code in a privileged container could escalate their permissions on the node running the container.",
  "key_phrases": {
    "rootcause": "",
    "weakness": [
      "command injection",
      "path traversal"
    ],
    "impact": "execute arbitrary commands",
    "vector": "",
    "attacker": "malicious user",
    "product": "openshift/builder",
    "version": "",
    "component": ""
  },
  "reference_content": "Based on the provided content, here's an analysis of CVE-2024-7387:\n\n**Root Cause of Vulnerability:**\nThe vulnerability stems from a path traversal issue within the `openshift/builder` component when using the \"docker build\" strategy in OpenShift. Specifically, the `spec.source.secrets.secret.destinationDir` attribute in the `BuildConfig` definition allows an attacker to specify an arbitrary destination directory within the build container's file system when copying secret files. This can be exploited using symbolic links to overwrite files in other locations within the container.\n\n**Weaknesses/Vulnerabilities Present:**\n\n*   **Path Traversal:** The primary weakness is the lack of proper sanitization or validation of the `destinationDir` path, allowing path traversal outside the intended target directory.\n*   **Command Injection:** By using a symbolic link and path traversal, an attacker can overwrite existing executable files within the privileged build container (e.g., `/usr/bin/cp`). Subsequently, when the overwritten executable is invoked by the build process (by another secret), it allows arbitrary command execution within the privileged build container.\n*   **Privileged Container:** The fact that the build processes run within a privileged container exacerbates the vulnerability, as arbitrary code execution inside such container gives access to the host node.\n\n**Impact of Exploitation:**\n\n*   **Arbitrary Command Execution:** An attacker can execute arbitrary commands within the context of the privileged build container.\n*   **Node Compromise:** By running code in the privileged container, an attacker can potentially escalate their privileges on the cluster and the host node. This could involve mounting the host filesystem and adding new SSH keys to the `core` user of Red Hat Enterprise Linux CoreOS (RHCOS), leading to full node compromise.\n*   **Cluster Takeover:** Successful exploitation can compromise the entire OpenShift cluster.\n\n**Attack Vectors:**\n\n*   **Malicious BuildConfig:** The primary attack vector is through the creation of a malicious `BuildConfig` that leverages the vulnerable `destinationDir` attribute.\n*   **Git Repository:** An attacker needs control of a Git repository, to host a Dockerfile and symlinks.\n*   **Secret Manipulation:** The attacker crafts two secrets. One containing the malicious payload and the second just to trigger the execution of the replaced binary.\n\n**Required Attacker Capabilities/Position:**\n\n*   **Ability to Create Builds:** An attacker must have the ability to create `BuildConfig` objects within an OpenShift cluster.\n*   **Access to a Git Repository:** The attacker needs to control or have access to a Git repository to host a Dockerfile containing a symbolic link.\n*   **Basic understanding of OpenShift Build Process:** The attacker must understand how the build process works in OpenShift, specifically the docker strategy.\n\n**Technical Details:**\n\n*   The vulnerability exists in the `DockerBuilder.copySecrets` and `DockerBuilder.copyLocalObject` functions within the `pkg/build/builder/docker.go` file of the `openshift/builder` project.\n*   The `copyLocalObject` function doesn't perform adequate validation, which allows the attacker to use a symbolic link within a git repository to specify a `destinationDir` that points to a sensitive location within the build container's filesystem, like `/usr/bin`.\n*   The `cp` command is used to copy the content of the secrets to the destination path.\n*   When a second secret is processed, the replaced `cp` command is executed, triggering the injected payload inside the privileged container.\n\n**Additional notes:**\n\n*   The provided content includes a detailed Proof of Concept (PoC), demonstrating how to exploit the vulnerability.\n*   Multiple Red Hat Security Advisories (RHSAs) were issued to address this vulnerability across different versions of OpenShift Container Platform.\n\nThe provided information gives a comprehensive understanding of the vulnerability and it's exploitation.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-78 | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | 0.9 | Base | Primary CWE | Allowed |\n| CWE-22 | Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') | 0.8 | Base | Secondary Candidate | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.85\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship is that **CWE-22** can lead to **CWE-78**. The vulnerability allows for **path traversal** (**CWE-22**), which then enables **command injection** (**CWE-78**). **CWE-78** is a child of **CWE-74** (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')). The abstraction levels are both Base, providing a granular view of the vulnerability.\n\n```mermaid\ngraph TD\n    cwe78[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"]\n    cwe22[\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n\n    cwe78 -->|CHILDOF| cwe74\n    cwe22 -->|CANPRECEDE| cwe78\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe78 primary\n    class cwe22 secondary\n    class cwe74 tertiary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **CWE-22**, where **path traversal** allows an attacker to manipulate file paths. This then leads to **CWE-78**, where the manipulated file paths are used to inject and execute arbitrary commands.\n\n## Summary of Analysis\nThe initial analysis identified that this vulnerability involves both **command injection** and **path traversal**. The evidence from the vulnerability description clearly states that the vulnerability allows **command injection** via **path traversal**. The **path traversal** is used to override executable files, which then leads to **command injection** and allows a malicious user to execute arbitrary commands.\n\nBased on the evidence: \"This vulnerability allows **command injection** via **path traversal**, where a malicious user can execute arbitrary commands on the OpenShift node running the builder container.\"\n\nThe graph relationships support the selection of **CWE-78** as the primary cause since it is the direct result of the **path traversal**. **CWE-22** is a valid secondary CWE because it describes the mechanism used to achieve the **command injection**.\n\nThe selected CWEs are at the optimal level of specificity because they are both Base level CWEs, which provide a detailed description of the weaknesses involved.\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-41: Improper Resolution of Path Equivalence\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product is vulnerable to file system contents disclosure through path equivalence. Path equivalence involves the use of special characters in file and directory names. The associated manipulations are intended to generate multiple names for the same object.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-59: Improper Link Resolution Before File Access ('Link Following')\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-73: External Control of File Name or Path\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product allows user input to control or influence paths or file names that are used in filesystem operations.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-668: Exposure of Resource to Wrong Sphere\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-668 is high-level and is often misused as a catch-all when lower-level CWE IDs might be applicable. It is sometimes used for low-information vulnerability reports [REF-1287]. It is a level-1 Class (i.e., a child of a Pillar). It is not useful for trend analysis.\n\n\n\n## CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the product does.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n\n\n## CWE-23: Relative Path Traversal\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as \"..\" that can resolve to a location that is outside of that directory.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-266: Incorrect Privilege Assignment\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nA product incorrectly assigns a privilege to a particular actor, creating an unintended sphere of control for that actor.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-1391: Use of Weak Credentials\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product uses weak credentials (such as a default key or hard-coded password) that can be calculated, derived, reused, or guessed by an attacker.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-267: Privilege Defined With Unsafe Actions\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nA particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-59: Improper Link Resolution Before File Access ('Link Following')\n**Abstraction Level**: Base\n**Similarity Score**: 2370.11\n**Source**: sparse\n\n**Description**:\nThe product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-78 | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | 0.9 | Base | Primary CWE | Allowed |\n| CWE-22 | Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') | 0.8 | Base | Secondary Candidate | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.85\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship is that **CWE-22** can lead to **CWE-78**. The vulnerability allows for **path traversal** (**CWE-22**), which then enables **command injection** (**CWE-78**). **CWE-78** is a child of **CWE-74** (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')). The abstraction levels are both Base, providing a granular view of the vulnerability.\n\n```mermaid\ngraph TD\n    cwe78[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"]\n    cwe22[\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n\n    cwe78 -->|CHILDOF| cwe74\n    cwe22 -->|CANPRECEDE| cwe78\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe78 primary\n    class cwe22 secondary\n    class cwe74 tertiary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **CWE-22**, where **path traversal** allows an attacker to manipulate file paths. This then leads to **CWE-78**, where the manipulated file paths are used to inject and execute arbitrary commands.\n\n## Summary of Analysis\nThe initial analysis identified that this vulnerability involves both **command injection** and **path traversal**. The evidence from the vulnerability description clearly states that the vulnerability allows **command injection** via **path traversal**. The **path traversal** is used to override executable files, which then leads to **command injection** and allows a malicious user to execute arbitrary commands.\n\nBased on the evidence: \"This vulnerability allows **command injection** via **path traversal**, where a malicious user can execute arbitrary commands on the OpenShift node running the builder container.\"\n\nThe graph relationships support the selection of **CWE-78** as the primary cause since it is the direct result of the **path traversal**. **CWE-22** is a valid secondary CWE because it describes the mechanism used to achieve the **command injection**.\n\nThe selected CWEs are at the optimal level of specificity because they are both Base level CWEs, which provide a detailed description of the weaknesses involved.\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-41: Improper Resolution of Path Equivalence\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product is vulnerable to file system contents disclosure through path equivalence. Path equivalence involves the use of special characters in file and directory names. The associated manipulations are intended to generate multiple names for the same object.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-59: Improper Link Resolution Before File Access ('Link Following')\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-73: External Control of File Name or Path\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product allows user input to control or influence paths or file names that are used in filesystem operations.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-668: Exposure of Resource to Wrong Sphere\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-668 is high-level and is often misused as a catch-all when lower-level CWE IDs might be applicable. It is sometimes used for low-information vulnerability reports [REF-1287]. It is a level-1 Class (i.e., a child of a Pillar). It is not useful for trend analysis.\n\n\n\n## CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the product does.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n\n\n## CWE-23: Relative Path Traversal\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as \"..\" that can resolve to a location that is outside of that directory.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-266: Incorrect Privilege Assignment\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nA product incorrectly assigns a privilege to a particular actor, creating an unintended sphere of control for that actor.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-1391: Use of Weak Credentials\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product uses weak credentials (such as a default key or hard-coded password) that can be calculated, derived, reused, or guessed by an attacker.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-267: Privilege Defined With Unsafe Actions\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nA particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-59: Improper Link Resolution Before File Access ('Link Following')\n**Abstraction Level**: Base\n**Similarity Score**: 2370.11\n**Source**: sparse\n\n**Description**:\nThe product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-22:**\n- 22 (Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')) - ROOT\n\n\n**Chain starting from CWE-59:**\n- 59 (Improper Link Resolution Before File Access ('Link Following')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "59",
        "name": "Improper Link Resolution Before File Access ('Link Following')",
        "source": "sparse",
        "original_content": "The product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.",
        "keyphrase_sources": [
          {
            "id": "weakness:command injection",
            "keyphrase": "command injection",
            "type": "weakness"
          },
          {
            "id": "weakness:path traversal",
            "keyphrase": "path traversal",
            "type": "weakness"
          },
          {
            "id": "impact:execute arbitrary commands",
            "keyphrase": "execute arbitrary commands",
            "type": "impact"
          },
          {
            "id": "attacker:malicious user",
            "keyphrase": "malicious user",
            "type": "attacker"
          },
          {
            "id": "product:openshift/builder",
            "keyphrase": "openshift/builder",
            "type": "product"
          }
        ]
      },
      "similarity": 439.12759277028243
    },
    {
      "metadata": {
        "doc_id": "732",
        "name": "Incorrect Permission Assignment for Critical Resource",
        "source": "sparse",
        "original_content": "The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.",
        "keyphrase_sources": [
          {
            "id": "weakness:command injection",
            "keyphrase": "command injection",
            "type": "weakness"
          },
          {
            "id": "weakness:path traversal",
            "keyphrase": "path traversal",
            "type": "weakness"
          },
          {
            "id": "impact:execute arbitrary commands",
            "keyphrase": "execute arbitrary commands",
            "type": "impact"
          },
          {
            "id": "attacker:malicious user",
            "keyphrase": "malicious user",
            "type": "attacker"
          },
          {
            "id": "product:openshift/builder",
            "keyphrase": "openshift/builder",
            "type": "product"
          }
        ]
      },
      "similarity": 412.71862777247856
    },
    {
      "metadata": {
        "doc_id": "22",
        "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
        "source": "sparse",
        "original_content": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
        "keyphrase_sources": [
          {
            "id": "weakness:path traversal",
            "keyphrase": "path traversal",
            "type": "weakness"
          }
        ]
      },
      "similarity": 399.318269096632
    },
    {
      "metadata": {
        "doc_id": "23",
        "name": "Relative Path Traversal",
        "source": "sparse",
        "original_content": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as \"..\" that can resolve to a location that is outside of that directory.",
        "keyphrase_sources": [
          {
            "id": "weakness:path traversal",
            "keyphrase": "path traversal",
            "type": "weakness"
          }
        ]
      },
      "similarity": 397.0174729917761
    },
    {
      "metadata": {
        "doc_id": "277",
        "name": "Insecure Inherited Permissions",
        "source": "sparse",
        "original_content": "A product defines a set of insecure permissions that are inherited by objects that are created by the program.",
        "keyphrase_sources": [
          {
            "id": "weakness:command injection",
            "keyphrase": "command injection",
            "type": "weakness"
          },
          {
            "id": "weakness:path traversal",
            "keyphrase": "path traversal",
            "type": "weakness"
          },
          {
            "id": "impact:execute arbitrary commands",
            "keyphrase": "execute arbitrary commands",
            "type": "impact"
          },
          {
            "id": "attacker:malicious user",
            "keyphrase": "malicious user",
            "type": "attacker"
          },
          {
            "id": "product:openshift/builder",
            "keyphrase": "openshift/builder",
            "type": "product"
          }
        ]
      },
      "similarity": 394.06052573092575
    },
    {
      "metadata": {
        "doc_id": "78",
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "source": "sparse",
        "original_content": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
        "keyphrase_sources": [
          {
            "id": "weakness:command injection",
            "keyphrase": "command injection",
            "type": "weakness"
          },
          {
            "id": "impact:execute arbitrary commands",
            "keyphrase": "execute arbitrary commands",
            "type": "impact"
          }
        ]
      },
      "similarity": 393.8939042615135
    },
    {
      "metadata": {
        "doc_id": "138",
        "name": "Improper Neutralization of Special Elements",
        "source": "sparse",
        "original_content": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.",
        "keyphrase_sources": [
          {
            "id": "weakness:command injection",
            "keyphrase": "command injection",
            "type": "weakness"
          }
        ]
      },
      "similarity": 391.5020064001943
    },
    {
      "metadata": {
        "doc_id": "250",
        "name": "Execution with Unnecessary Privileges",
        "source": "sparse",
        "original_content": "The product performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.",
        "keyphrase_sources": [
          {
            "id": "impact:execute arbitrary commands",
            "keyphrase": "execute arbitrary commands",
            "type": "impact"
          }
        ]
      },
      "similarity": 144.8219364790082
    },
    {
      "metadata": {
        "doc_id": "276",
        "name": "Incorrect Default Permissions",
        "source": "sparse",
        "original_content": "During installation, installed file permissions are set to allow anyone to modify those files.",
        "keyphrase_sources": [
          {
            "id": "attacker:malicious user",
            "keyphrase": "malicious user",
            "type": "attacker"
          },
          {
            "id": "product:openshift/builder",
            "keyphrase": "openshift/builder",
            "type": "product"
          }
        ]
      },
      "similarity": 139.20483035742893
    },
    {
      "metadata": {
        "doc_id": "266",
        "name": "Incorrect Privilege Assignment",
        "source": "sparse",
        "original_content": "A product incorrectly assigns a privilege to a particular actor, creating an unintended sphere of control for that actor.",
        "keyphrase_sources": [
          {
            "id": "product:openshift/builder",
            "keyphrase": "openshift/builder",
            "type": "product"
          }
        ]
      },
      "similarity": 136.2079009856987
    },
    {
      "metadata": {
        "doc_id": "61",
        "name": "UNIX Symbolic Link (Symlink) Following",
        "source": "sparse",
        "original_content": "The product, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.",
        "keyphrase_sources": [
          {
            "id": "attacker:malicious user",
            "keyphrase": "malicious user",
            "type": "attacker"
          }
        ]
      },
      "similarity": 134.1603974422716
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-22",
      "CWE-59",
      "CWE-73",
      "CWE-267",
      "CWE-74",
      "CWE-668",
      "CWE-78",
      "CWE-1391",
      "CWE-266",
      "CWE-497",
      "CWE-23",
      "CWE-41"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {
    "59": [
      {
        "id": "weakness:command injection",
        "keyphrase": "command injection",
        "type": "weakness"
      },
      {
        "id": "weakness:path traversal",
        "keyphrase": "path traversal",
        "type": "weakness"
      },
      {
        "id": "impact:execute arbitrary commands",
        "keyphrase": "execute arbitrary commands",
        "type": "impact"
      },
      {
        "id": "attacker:malicious user",
        "keyphrase": "malicious user",
        "type": "attacker"
      },
      {
        "id": "product:openshift/builder",
        "keyphrase": "openshift/builder",
        "type": "product"
      }
    ],
    "732": [
      {
        "id": "weakness:command injection",
        "keyphrase": "command injection",
        "type": "weakness"
      },
      {
        "id": "weakness:path traversal",
        "keyphrase": "path traversal",
        "type": "weakness"
      },
      {
        "id": "impact:execute arbitrary commands",
        "keyphrase": "execute arbitrary commands",
        "type": "impact"
      },
      {
        "id": "attacker:malicious user",
        "keyphrase": "malicious user",
        "type": "attacker"
      },
      {
        "id": "product:openshift/builder",
        "keyphrase": "openshift/builder",
        "type": "product"
      }
    ],
    "277": [
      {
        "id": "weakness:command injection",
        "keyphrase": "command injection",
        "type": "weakness"
      },
      {
        "id": "weakness:path traversal",
        "keyphrase": "path traversal",
        "type": "weakness"
      },
      {
        "id": "impact:execute arbitrary commands",
        "keyphrase": "execute arbitrary commands",
        "type": "impact"
      },
      {
        "id": "attacker:malicious user",
        "keyphrase": "malicious user",
        "type": "attacker"
      },
      {
        "id": "product:openshift/builder",
        "keyphrase": "openshift/builder",
        "type": "product"
      }
    ],
    "78": [
      {
        "id": "weakness:command injection",
        "keyphrase": "command injection",
        "type": "weakness"
      },
      {
        "id": "impact:execute arbitrary commands",
        "keyphrase": "execute arbitrary commands",
        "type": "impact"
      }
    ],
    "138": [
      {
        "id": "weakness:command injection",
        "keyphrase": "command injection",
        "type": "weakness"
      }
    ],
    "22": [
      {
        "id": "weakness:path traversal",
        "keyphrase": "path traversal",
        "type": "weakness"
      }
    ],
    "23": [
      {
        "id": "weakness:path traversal",
        "keyphrase": "path traversal",
        "type": "weakness"
      }
    ],
    "250": [
      {
        "id": "impact:execute arbitrary commands",
        "keyphrase": "execute arbitrary commands",
        "type": "impact"
      }
    ],
    "276": [
      {
        "id": "attacker:malicious user",
        "keyphrase": "malicious user",
        "type": "attacker"
      },
      {
        "id": "product:openshift/builder",
        "keyphrase": "openshift/builder",
        "type": "product"
      }
    ],
    "61": [
      {
        "id": "attacker:malicious user",
        "keyphrase": "malicious user",
        "type": "attacker"
      }
    ],
    "266": [
      {
        "id": "product:openshift/builder",
        "keyphrase": "openshift/builder",
        "type": "product"
      }
    ]
  }
}