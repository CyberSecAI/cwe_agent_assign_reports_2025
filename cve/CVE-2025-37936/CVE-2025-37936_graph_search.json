{
  "retriever": "graph",
  "query": "In the Linux kernel, the following vulnerability has been resolved perf/x86/intel KVM Mask PEBS_ENABLE loaded for guest with vCPUs value. When generating the MSR_IA32_PEBS_ENABLE value that will be loaded on VM-Entry to a KVM guest, mask the value with the vCPUs desired PEBS_ENABLE value. Consulting only the host kernels host vs. guest masks results in running the guest with PEBS enabled even when the guest doesnt want to use PEBS. Because KVM uses perf events to proxy the guest virtual PMU, simply looking at exclude_host cant differentiate between events created by host userspace, and events created by KVM on behalf of the guest. Running the guest with PEBS unexpectedly enabled typically manifests as crashes due to a near-infinite stream of #PFs. E.g. if the guest hasnt written MSR_IA32_DS_AREA, the CPU will hit page faults on address 0 when trying to record PEBS events. The issue is most easily reproduced by running `perf kvm top` from before commit 7b100989b4f6 (perf evlist Remove __evlist__add_default) (after which, `perf kvm top` effectively stopped using PEBS). The userspace side of perf creates a guest-only PEBS event, which intel_guest_get_msrs() misconstrues a guest-*owned* PEBS event. Arguably, this is a userspace bug, as enabling PEBS on guest-only events simply cannot work, and userspace can kill VMs in many other ways (there is no danger to the host). However, even if this is considered to be bad userspace behavior, theres zero downside to perf/KVM restricting PEBS to guest-owned events. Note, commit 854250329c02 (KVM x86/pmu Disable guest PEBS temporarily in two rare situations) fixed the case where host userspace is profiling KVM *and* userspace, but missed the case where userspace is profiling only KVM. Consider specifically these CWEs: CWE-1421 CWE-226 CWE-393 CWE-909 CWE-1256 CWE-1342 CWE-362 CWE-1037 CWE-1260 CWE-754",
  "keyphrases": {
    "original_query": "In the Linux kernel, the following vulnerability has been resolved perf/x86/intel KVM Mask PEBS_ENABLE loaded for guest with vCPUs value. When generating the MSR_IA32_PEBS_ENABLE value that will be loaded on VM-Entry to a KVM guest, mask the value with the vCPUs desired PEBS_ENABLE value. Consulting only the host kernels host vs. guest masks results in running the guest with PEBS enabled even when the guest doesnt want to use PEBS. Because KVM uses perf events to proxy the guest virtual PMU, simply looking at exclude_host cant differentiate between events created by host userspace, and events created by KVM on behalf of the guest. Running the guest with PEBS unexpectedly enabled typically manifests as crashes due to a near-infinite stream of #PFs. E.g. if the guest hasnt written MSR_IA32_DS_AREA, the CPU will hit page faults on address 0 when trying to record PEBS events. The issue is most easily reproduced by running `perf kvm top` from before commit 7b100989b4f6 (perf evlist Remove __evlist__add_default) (after which, `perf kvm top` effectively stopped using PEBS). The userspace side of perf creates a guest-only PEBS event, which intel_guest_get_msrs() misconstrues a guest-*owned* PEBS event. Arguably, this is a userspace bug, as enabling PEBS on guest-only events simply cannot work, and userspace can kill VMs in many other ways (there is no danger to the host). However, even if this is considered to be bad userspace behavior, theres zero downside to perf/KVM restricting PEBS to guest-owned events. Note, commit 854250329c02 (KVM x86/pmu Disable guest PEBS temporarily in two rare situations) fixed the case where host userspace is profiling KVM *and* userspace, but missed the case where userspace is profiling only KVM.",
    "enhanced_query": "In the Linux kernel, the following vulnerability has been resolved perf/x86/intel KVM Mask PEBS_ENABLE loaded for guest with vCPUs value. When generating the MSR_IA32_PEBS_ENABLE value that will be loaded on VM-Entry to a KVM guest, mask the value with the vCPUs desired PEBS_ENABLE value. Consulting only the host kernels host vs. guest masks results in running the guest with PEBS enabled even when the guest doesnt want to use PEBS. Because KVM uses perf events to proxy the guest virtual PMU, simply looking at exclude_host cant differentiate between events created by host userspace, and events created by KVM on behalf of the guest. Running the guest with PEBS unexpectedly enabled typically manifests as crashes due to a near-infinite stream of #PFs. E.g. if the guest hasnt written MSR_IA32_DS_AREA, the CPU will hit page faults on address 0 when trying to record PEBS events. The issue is most easily reproduced by running `perf kvm top` from before commit 7b100989b4f6 (perf evlist Remove __evlist__add_default) (after which, `perf kvm top` effectively stopped using PEBS). The userspace side of perf creates a guest-only PEBS event, which intel_guest_get_msrs() misconstrues a guest-*owned* PEBS event. Arguably, this is a userspace bug, as enabling PEBS on guest-only events simply cannot work, and userspace can kill VMs in many other ways (there is no danger to the host). However, even if this is considered to be bad userspace behavior, theres zero downside to perf/KVM restricting PEBS to guest-owned events. Note, commit 854250329c02 (KVM x86/pmu Disable guest PEBS temporarily in two rare situations) fixed the case where host userspace is profiling KVM *and* userspace, but missed the case where userspace is profiling only KVM. Consider specifically these CWEs: CWE-1421 CWE-226 CWE-393 CWE-909 CWE-1256 CWE-1342 CWE-362 CWE-1037 CWE-1260 CWE-754",
    "cwe_mentions": [
      "CWE-1421",
      "CWE-226",
      "CWE-393",
      "CWE-909",
      "CWE-1256",
      "CWE-1342",
      "CWE-362",
      "CWE-1037",
      "CWE-1260",
      "CWE-754"
    ],
    "search_time": 3.39617657661438
  },
  "timestamp": "2025-07-14 21:56:37",
  "cve_id": "CVE-2025-37936",
  "result_count": 20,
  "results": [
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "type": "base",
      "score": 2.8651999999999997,
      "relationship_count": 0
    },
    {
      "cwe_id": "226",
      "name": "Sensitive Information in Resource Not Removed Before Reuse",
      "type": "base",
      "score": 2.4699999999999998,
      "relationship_count": 0
    },
    {
      "cwe_id": "252",
      "name": "Unchecked Return Value",
      "type": "base",
      "score": 2.3400000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "754",
      "name": "Improper Check for Unusual or Exceptional Conditions",
      "type": "class",
      "score": 2.2288,
      "relationship_count": 0
    },
    {
      "cwe_id": "201",
      "name": "Insertion of Sensitive Information Into Sent Data",
      "type": "base",
      "score": 2.2100000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "908",
      "name": "Use of Uninitialized Resource",
      "type": "base",
      "score": 2.2100000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "393",
      "name": "Return of Wrong Status Code",
      "type": "base",
      "score": 2.1189999999999998,
      "relationship_count": 0
    },
    {
      "cwe_id": "120",
      "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
      "type": "base",
      "score": 1.7680000000000005,
      "relationship_count": 0
    },
    {
      "cwe_id": "123",
      "name": "Write-what-where Condition",
      "type": "base",
      "score": 1.7680000000000005,
      "relationship_count": 0
    },
    {
      "cwe_id": "364",
      "name": "Signal Handler Race Condition",
      "type": "base",
      "score": 1.7550000000000001,
      "relationship_count": 0
    },
    {
      "cwe_id": "1342",
      "name": "Information Exposure through Microarchitectural State after Transient Execution",
      "type": "Base",
      "score": 1.695431461135545,
      "relationship_count": 0
    },
    {
      "cwe_id": "1325",
      "name": "Improperly Controlled Sequential Memory Allocation",
      "type": "base",
      "score": 1.6848000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "1257",
      "name": "Improper Access Control Applied to Mirrored or Aliased Memory Regions",
      "type": "base",
      "score": 1.6848000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "1265",
      "name": "Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls",
      "type": "base",
      "score": 1.6848000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "1339",
      "name": "Insufficient Precision or Accuracy of a Real Number",
      "type": "base",
      "score": 1.6848000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "128",
      "name": "Wrap-around Error",
      "type": "base",
      "score": 1.6848000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "193",
      "name": "Off-by-one Error",
      "type": "base",
      "score": 1.6848000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "839",
      "name": "Numeric Range Comparison Without Minimum Check",
      "type": "base",
      "score": 1.6848000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "843",
      "name": "Access of Resource Using Incompatible Type ('Type Confusion')",
      "type": "base",
      "score": 1.6848000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "386",
      "name": "Symbolic Name not Mapping to Correct Object",
      "type": "base",
      "score": 1.6744000000000003,
      "relationship_count": 0
    }
  ]
}