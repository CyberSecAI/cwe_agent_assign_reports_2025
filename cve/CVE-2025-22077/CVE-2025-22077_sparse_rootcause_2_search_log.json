{
  "method": "sparse_rootcause_2",
  "query": "In the Linux kernel, the following vulnerability has been resolved Revert smb client fix TCP timers deadlock after rmmod This reverts commit e9f2517a3e18a54a3943c098d2226b245d488801. Commit e9f2517a3e18 (smb client fix TCP timers deadlock after rmmod) is intended to fix a null-ptr-deref in LOCKDEP, which is mentioned as CVE-2024-54680, but is actually did not fix anything The issue can be reproduced on top of it. [0] Also, it reverted the change by commit ef7134c7fc48 (smb client Fix use-after-free of network namespace.) and introduced a real issue by reviving the kernel TCP socket. When a reconnect happens for a CIFS connection, the socket state transitions to FIN_WAIT_1. Then, inet_csk_clear_xmit_timers_sync() in tcp_close() stops all timers for the socket. If an incoming FIN packet is lost, the socket will stay at FIN_WAIT_1 forever, and such sockets could be leaked up to net.ipv4.tcp_max_orphans. Usually, FIN can be retransmitted by the peer, but if the peer aborts the connection, the issue comes into reality. I warned about this privately by pointing out the exact report [1], but the bogus fix was finally merged. So, we should not stop the timers to finally kill the connection on our side in that case, meaning we must not use a kernel socket for TCP whose sk->sk_net_refcnt is 0. The kernel socket does not have a reference to its netns to make it possible to tear down netns without cleaning up every resource in it. For example, tunnel devices use a UDP socket internally, but we can destroy netns without removing such devices and let it complete during exit. Otherwise, netns would be leaked when the last application died. However, this is problematic for TCP sockets because TCP has timers to close the connection gracefully even after the socket is close()d. The lifetime of the socket and its netns is different from the lifetime of the underlying connection. If the socket user does not maintain the netns lifetime, the timer could be fired after the socket is close()d and its netns is freed up, resulting in use-after-free. Actually, we have seen so many similar issues and converted such sockets to have a reference to netns. Thats why I converted the CIFS client socket to have a reference to netns (sk->sk_net_refcnt == 1), which is somehow mentioned as out-of-scope of CIFS and technically wrong in e9f2517a3e18, but **is in-scope and right fix**. Regarding the LOCKDEP issue, we can prevent the module unload by bumping the module refcount when switching the LOCKDDEP key in sock_lock_init_class_and_name(). [2] For a while, lets revert the bogus fix. Note that now we can use sk_net_refcnt_upgrade() for the socket conversion, but Ill do so later separately to make backport easy.",
  "keyphrases": {
    "rootcause": "use-after-free"
  },
  "timestamp": "2025-07-14T10:10:28.629813",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 2121.2632814333983
    },
    {
      "doc_id": "772",
      "name": "Missing Release of Resource after Effective Lifetime",
      "score": 2041.8757233615029
    },
    {
      "doc_id": "401",
      "name": "Missing Release of Memory after Effective Lifetime",
      "score": 2036.1356313117935
    },
    {
      "doc_id": "911",
      "name": "Improper Update of Reference Count",
      "score": 2035.3470311846127
    },
    {
      "doc_id": "476",
      "name": "NULL Pointer Dereference",
      "score": 2020.7091476497192
    }
  ]
}