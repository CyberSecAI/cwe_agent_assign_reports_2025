{
  "retriever": "graph",
  "query": "In the Linux kernel, the following vulnerability has been resolved net switchdev Convert blocking notification chain to a raw one A blocking notification chain uses a read-write semaphore to protect the integrity of the chain. The semaphore is acquired for writing when adding / removing notifiers to / from the chain and acquired for reading when traversing the chain and informing notifiers about an event. In case of the blocking switchdev notification chain, recursive notifications are possible which leads to the semaphore being acquired twice for reading and to lockdep warnings being generated [1]. Specifically, this can happen when the bridge driver processes a SWITCHDEV_BRPORT_UNOFFLOADED event which causes it to emit notifications about deferred events when calling switchdev_deferred_process(). Fix this by converting the notification chain to a raw notification chain in a similar fashion to the netdev notification chain. Protect the chain using the RTNL mutex by acquiring it when modifying the chain. Events are always informed under the RTNL mutex, but add an assertion in call_switchdev_blocking_notifiers() to make sure this is not violated in the future. Maintain the blocking prefix as events are always emitted from process context and listeners are allowed to block. [1] WARNING possible recursive locking detected 6.14.0-rc4-custom-g079270089484 #1 Not tainted -------------------------------------------- ip/52731 is trying to acquire lock ffffffff850918d8 ((switchdev_blocking_notif_chain).rwsem){++++}-{44}, at blocking_notifier_call_chain+0x58/0xa0 but task is already holding lock ffffffff850918d8 ((switchdev_blocking_notif_chain).rwsem){++++}-{44}, at blocking_notifier_call_chain+0x58/0xa0 other info that might help us debug this Possible unsafe locking scenario CPU0 ---- lock((switchdev_blocking_notif_chain).rwsem) lock((switchdev_blocking_notif_chain).rwsem) *** DEADLOCK *** May be due to missing lock nesting notation 3 locks held by ip/52731 #0 ffffffff84f795b0 (rtnl_mutex){+.+.}-{44}, at rtnl_newlink+0x727/0x1dc0 #1 ffffffff8731f628 (&net->rtnl_mutex){+.+.}-{44}, at rtnl_newlink+0x790/0x1dc0 #2 ffffffff850918d8 ((switchdev_blocking_notif_chain).rwsem){++++}-{44}, at blocking_notifier_call_chain+0x58/0xa0 stack backtrace ... ? __pfx_down_read+0x10/0x10 ? __pfx_mark_lock+0x10/0x10 ? __pfx_switchdev_port_attr_set_deferred+0x10/0x10 blocking_notifier_call_chain+0x58/0xa0 switchdev_port_attr_notify.constprop.0+0xb3/0x1b0 ? __pfx_switchdev_port_attr_notify.constprop.0+0x10/0x10 ? mark_held_locks+0x94/0xe0 ? switchdev_deferred_process+0x11a/0x340 switchdev_port_attr_set_deferred+0x27/0xd0 switchdev_deferred_process+0x164/0x340 br_switchdev_port_unoffload+0xc8/0x100 [bridge] br_switchdev_blocking_event+0x29f/0x580 [bridge] notifier_call_chain+0xa2/0x440 blocking_notifier_call_chain+0x6e/0xa0 switchdev_bridge_port_unoffload+0xde/0x1a0 ... Consider specifically these CWEs: CWE-667 CWE-833 CWE-401 CWE-201 CWE-835 CWE-674 CWE-362",
  "keyphrases": {
    "original_query": "In the Linux kernel, the following vulnerability has been resolved net switchdev Convert blocking notification chain to a raw one A blocking notification chain uses a read-write semaphore to protect the integrity of the chain. The semaphore is acquired for writing when adding / removing notifiers to / from the chain and acquired for reading when traversing the chain and informing notifiers about an event. In case of the blocking switchdev notification chain, recursive notifications are possible which leads to the semaphore being acquired twice for reading and to lockdep warnings being generated [1]. Specifically, this can happen when the bridge driver processes a SWITCHDEV_BRPORT_UNOFFLOADED event which causes it to emit notifications about deferred events when calling switchdev_deferred_process(). Fix this by converting the notification chain to a raw notification chain in a similar fashion to the netdev notification chain. Protect the chain using the RTNL mutex by acquiring it when modifying the chain. Events are always informed under the RTNL mutex, but add an assertion in call_switchdev_blocking_notifiers() to make sure this is not violated in the future. Maintain the blocking prefix as events are always emitted from process context and listeners are allowed to block. [1] WARNING possible recursive locking detected 6.14.0-rc4-custom-g079270089484 #1 Not tainted -------------------------------------------- ip/52731 is trying to acquire lock ffffffff850918d8 ((switchdev_blocking_notif_chain).rwsem){++++}-{44}, at blocking_notifier_call_chain+0x58/0xa0 but task is already holding lock ffffffff850918d8 ((switchdev_blocking_notif_chain).rwsem){++++}-{44}, at blocking_notifier_call_chain+0x58/0xa0 other info that might help us debug this Possible unsafe locking scenario CPU0 ---- lock((switchdev_blocking_notif_chain).rwsem) lock((switchdev_blocking_notif_chain).rwsem) *** DEADLOCK *** May be due to missing lock nesting notation 3 locks held by ip/52731 #0 ffffffff84f795b0 (rtnl_mutex){+.+.}-{44}, at rtnl_newlink+0x727/0x1dc0 #1 ffffffff8731f628 (&net->rtnl_mutex){+.+.}-{44}, at rtnl_newlink+0x790/0x1dc0 #2 ffffffff850918d8 ((switchdev_blocking_notif_chain).rwsem){++++}-{44}, at blocking_notifier_call_chain+0x58/0xa0 stack backtrace ... ? __pfx_down_read+0x10/0x10 ? __pfx_mark_lock+0x10/0x10 ? __pfx_switchdev_port_attr_set_deferred+0x10/0x10 blocking_notifier_call_chain+0x58/0xa0 switchdev_port_attr_notify.constprop.0+0xb3/0x1b0 ? __pfx_switchdev_port_attr_notify.constprop.0+0x10/0x10 ? mark_held_locks+0x94/0xe0 ? switchdev_deferred_process+0x11a/0x340 switchdev_port_attr_set_deferred+0x27/0xd0 switchdev_deferred_process+0x164/0x340 br_switchdev_port_unoffload+0xc8/0x100 [bridge] br_switchdev_blocking_event+0x29f/0x580 [bridge] notifier_call_chain+0xa2/0x440 blocking_notifier_call_chain+0x6e/0xa0 switchdev_bridge_port_unoffload+0xde/0x1a0 ...",
    "enhanced_query": "In the Linux kernel, the following vulnerability has been resolved net switchdev Convert blocking notification chain to a raw one A blocking notification chain uses a read-write semaphore to protect the integrity of the chain. The semaphore is acquired for writing when adding / removing notifiers to / from the chain and acquired for reading when traversing the chain and informing notifiers about an event. In case of the blocking switchdev notification chain, recursive notifications are possible which leads to the semaphore being acquired twice for reading and to lockdep warnings being generated [1]. Specifically, this can happen when the bridge driver processes a SWITCHDEV_BRPORT_UNOFFLOADED event which causes it to emit notifications about deferred events when calling switchdev_deferred_process(). Fix this by converting the notification chain to a raw notification chain in a similar fashion to the netdev notification chain. Protect the chain using the RTNL mutex by acquiring it when modifying the chain. Events are always informed under the RTNL mutex, but add an assertion in call_switchdev_blocking_notifiers() to make sure this is not violated in the future. Maintain the blocking prefix as events are always emitted from process context and listeners are allowed to block. [1] WARNING possible recursive locking detected 6.14.0-rc4-custom-g079270089484 #1 Not tainted -------------------------------------------- ip/52731 is trying to acquire lock ffffffff850918d8 ((switchdev_blocking_notif_chain).rwsem){++++}-{44}, at blocking_notifier_call_chain+0x58/0xa0 but task is already holding lock ffffffff850918d8 ((switchdev_blocking_notif_chain).rwsem){++++}-{44}, at blocking_notifier_call_chain+0x58/0xa0 other info that might help us debug this Possible unsafe locking scenario CPU0 ---- lock((switchdev_blocking_notif_chain).rwsem) lock((switchdev_blocking_notif_chain).rwsem) *** DEADLOCK *** May be due to missing lock nesting notation 3 locks held by ip/52731 #0 ffffffff84f795b0 (rtnl_mutex){+.+.}-{44}, at rtnl_newlink+0x727/0x1dc0 #1 ffffffff8731f628 (&net->rtnl_mutex){+.+.}-{44}, at rtnl_newlink+0x790/0x1dc0 #2 ffffffff850918d8 ((switchdev_blocking_notif_chain).rwsem){++++}-{44}, at blocking_notifier_call_chain+0x58/0xa0 stack backtrace ... ? __pfx_down_read+0x10/0x10 ? __pfx_mark_lock+0x10/0x10 ? __pfx_switchdev_port_attr_set_deferred+0x10/0x10 blocking_notifier_call_chain+0x58/0xa0 switchdev_port_attr_notify.constprop.0+0xb3/0x1b0 ? __pfx_switchdev_port_attr_notify.constprop.0+0x10/0x10 ? mark_held_locks+0x94/0xe0 ? switchdev_deferred_process+0x11a/0x340 switchdev_port_attr_set_deferred+0x27/0xd0 switchdev_deferred_process+0x164/0x340 br_switchdev_port_unoffload+0xc8/0x100 [bridge] br_switchdev_blocking_event+0x29f/0x580 [bridge] notifier_call_chain+0xa2/0x440 blocking_notifier_call_chain+0x6e/0xa0 switchdev_bridge_port_unoffload+0xde/0x1a0 ... Consider specifically these CWEs: CWE-667 CWE-833 CWE-401 CWE-201 CWE-835 CWE-674 CWE-362",
    "cwe_mentions": [
      "CWE-667",
      "CWE-833",
      "CWE-401",
      "CWE-201",
      "CWE-835",
      "CWE-674",
      "CWE-362"
    ],
    "search_time": 2.750805139541626
  },
  "timestamp": "2025-07-14 10:04:26",
  "cve_id": "CVE-2025-21986",
  "result_count": 20,
  "results": [
    {
      "cwe_id": "390",
      "name": "Detection of Error Condition Without Action",
      "type": "base",
      "score": 2.2100000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "226",
      "name": "Sensitive Information in Resource Not Removed Before Reuse",
      "type": "base",
      "score": 2.2100000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "212",
      "name": "Improper Removal of Sensitive Information Before Storage or Transfer",
      "type": "base",
      "score": 2.2100000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "1322",
      "name": "Use of Blocking Code in Single-threaded, Non-blocking Context",
      "type": "base",
      "score": 2.2100000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "201",
      "name": "Insertion of Sensitive Information Into Sent Data",
      "type": "base",
      "score": 2.1189999999999998,
      "relationship_count": 0
    },
    {
      "cwe_id": "416",
      "name": "Use After Free",
      "type": "variant",
      "score": 2.04,
      "relationship_count": 0
    },
    {
      "cwe_id": "123",
      "name": "Write-what-where Condition",
      "type": "base",
      "score": 1.7680000000000005,
      "relationship_count": 0
    },
    {
      "cwe_id": "120",
      "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
      "type": "base",
      "score": 1.7680000000000005,
      "relationship_count": 0
    },
    {
      "cwe_id": "833",
      "name": "Deadlock",
      "type": "Base",
      "score": 1.7148869991368798,
      "relationship_count": 0
    },
    {
      "cwe_id": "1265",
      "name": "Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls",
      "type": "base",
      "score": 1.6848000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "1325",
      "name": "Improperly Controlled Sequential Memory Allocation",
      "type": "base",
      "score": 1.6848000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "386",
      "name": "Symbolic Name not Mapping to Correct Object",
      "type": "base",
      "score": 1.6744000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "662",
      "name": "Improper Synchronization",
      "type": "class",
      "score": 1.6736000000000002,
      "relationship_count": 0
    },
    {
      "cwe_id": "61",
      "name": "UNIX Symbolic Link (Symlink) Following",
      "type": "compound",
      "score": 1.61,
      "relationship_count": 0
    },
    {
      "cwe_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "type": "base",
      "score": 1.5912000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "type": "Base",
      "score": 1.5432533131133852,
      "relationship_count": 0
    },
    {
      "cwe_id": "209",
      "name": "Generation of Error Message Containing Sensitive Information",
      "type": "base",
      "score": 1.521,
      "relationship_count": 0
    },
    {
      "cwe_id": "202",
      "name": "Exposure of Sensitive Information Through Data Queries",
      "type": "base",
      "score": 1.521,
      "relationship_count": 0
    },
    {
      "cwe_id": "835",
      "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
      "type": "Base",
      "score": 1.4913529685095308,
      "relationship_count": 0
    },
    {
      "cwe_id": "415",
      "name": "Double Free",
      "type": "variant",
      "score": 1.4784000000000002,
      "relationship_count": 0
    }
  ]
}