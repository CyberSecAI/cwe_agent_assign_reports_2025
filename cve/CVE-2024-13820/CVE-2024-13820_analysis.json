{
  "cve_id": "CVE-2024-13820",
  "description": "The Melhor Envio plugin for WordPress is vulnerable to **Sensitive Information Exposure** in all versions up to, and including, 2.15.9 via the run function, which uses a **hardcoded hash**. This makes it possible for unauthenticated attackers to extract sensitive data including environment information, plugin tokens, shipping configurations, and limited vendor information.",
  "key_phrases": {
    "rootcause": "hardcoded hash",
    "weakness": "Sensitive Information Exposure",
    "impact": "extract sensitive data",
    "vector": "",
    "attacker": "unauthenticated attackers",
    "product": "Melhor Envio plugin for WordPress",
    "version": "up to and including 2.15.9",
    "component": "run function"
  },
  "reference_content": "The provided content relates to a PHP file `TestService.php` within the `wp-melhorenvio-v2` repository. It appears to be a testing or debugging service for a WooCommerce plugin called \"Melhor Envio\". Here's a breakdown of the relevant information:\n\n**Root cause of vulnerability:**\n\nThe code contains a hardcoded SHA512 hash used for authorization:\n\n```php\nif (hash('sha512', SanitizeHelper::apply($_GET['hash'])) != 'd4ccf2fcc3a14764698d9b2fea940c9d42c5dfe6002f20df995b09590b39f83f1ec1712d506d51ca47648f77d0ae1caf25c85c042275422582fe067622e6d208') {\n    return wp_send_json(\n        array(\n            'message' => 'Acesso n\u00e3o autorizado',\n        ),\n        ResponseStatus::HTTP_UNAUTHORIZED\n    );\n}\n```\n\n**Weaknesses/vulnerabilities present:**\n\n*   **Hardcoded Credentials:** The use of a hardcoded SHA512 hash as a form of authentication is a significant security vulnerability. If this hash is discovered, anyone can bypass the access control by providing the correct hash value in the `hash` GET parameter.\n*   **Lack of Proper Authentication:** The code checks for the presence of a `hash` parameter and verifies it against a hardcoded value, but it doesn't implement any robust authentication mechanism (e.g., user login, API keys, or secure tokens).\n*   **Insufficient Authorization:** Even with the `current_user_can('melhor_envio_debug')` check, the hardcoded hash bypasses any meaningful authorization.\n\n**Impact of exploitation:**\n\n*   **Unauthorized Access:** An attacker can gain unauthorized access to the debugging functionality of the plugin, potentially exposing sensitive information or allowing them to manipulate data.\n*   **Information Disclosure:** The `run()` function retrieves and returns various information, including PHP version, environment details, user data (potentially including email), plugin paths, and options. An attacker could exploit this to gather information about the server and the plugin's configuration.\n\n**Attack vectors:**\n\n*   **Direct Hash Submission:** An attacker can simply submit a GET request to the `TestService.php` script with the correct hash value in the `hash` parameter.\n*   **Man-in-the-Middle (MitM) Attack:** If the communication between the client and the server is not encrypted (e.g., using HTTPS), an attacker could intercept the request and steal the hash value.\n\n**Required attacker capabilities/position:**\n\n*   **Knowledge of the Hash:** The attacker needs to know the hardcoded SHA512 hash value.\n*   **Network Access:** The attacker needs network access to the server hosting the WordPress site with the plugin installed.\n\n**Mitigation or fix:**\n\n*   **Remove Hardcoded Hash:** The hardcoded hash should be removed immediately.\n*   **Implement Secure Authentication:** Implement a proper authentication mechanism, such as user login with strong passwords, API keys, or secure tokens (e.g., JWT).\n*   **Role-Based Access Control:** Implement role-based access control to restrict access to sensitive functionality based on user roles and permissions.\n*   **HTTPS:** Ensure that all communication between the client and the server is encrypted using HTTPS.\n*   **Input Validation:** Properly validate and sanitize all user inputs to prevent injection attacks.\n\nThis content provides significantly more detail than the official CVE description would likely contain, as it shows the actual vulnerable code.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-798 | Use of Hard-coded Credentials | 1.0 | Base | Allowed | Primary CWE. The root cause is the use of a hardcoded hash for authentication. |\n| CWE-306 | Missing Authentication for Critical Function | 0.9 | Base | Allowed | Secondary CWE. The hardcoded hash bypasses any meaningful authentication mechanism. |\n| CWE-200 | Exposure of Sensitive Information Through Design or Error | 0.8 | Class | Allowed-with-Review | Secondary CWE. The hardcoded hash allows attackers to extract sensitive information. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is CWE-798, which is the root cause of the vulnerability. CWE-306 is also present since there is **missing authentication** that the **hardcoded credentials** are meant to provide. CWE-200 is the result of the **hardcoded credentials** being used and **missing authentication** which leads to exposure of sensitive information.\n\n```mermaid\ngraph TD\n    cwe798[\"CWE-798: Use of Hard-coded Credentials\"]\n    cwe306[\"CWE-306: Missing Authentication for Critical Function\"]\n    cwe200[\"CWE-200: Exposure of Sensitive Information Through Design or Error\"]\n    \n    cwe200 -->|CAUSES| cwe798\n    cwe306 -->|CAUSES| cwe798\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe798 primary\n    class cwe306,cwe200 secondary\n```\n\n## Vulnerability Chain\n1.  **Root Cause:** CWE-798 (**Use of Hard-coded Credentials**) - The application uses a hardcoded hash for authentication.\n2.  **Prerequisite Weakness:** CWE-306 (**Missing Authentication for Critical Function**) - Since the application relies solely on the **hardcoded hash**, it lacks proper authentication mechanisms.\n3.  **Impact:** CWE-200 (**Exposure of Sensitive Information Through Design or Error**) - Due to the **hardcoded credentials** and **missing authentication**, sensitive information is exposed to unauthenticated attackers.\n\n## Summary of Analysis\nThe primary CWE is CWE-798 (**Use of Hard-coded Credentials**) because the **root cause** is the **hardcoded hash** used for authentication. This is supported by the \"Vulnerability Description Key Phrases\" which lists \"**hardcoded hash**\" as the **rootcause**. The \"CVE Reference Links Content Summary\" confirms the use of a hardcoded SHA512 hash for authentication. CWE-306 (**Missing Authentication for Critical Function**) is a contributing factor, as the application **lacks** proper authentication and relies on the **insecure** **hardcoded hash**. CWE-200 (**Exposure of Sensitive Information Through Design or Error**) is a consequence of the **hardcoded credentials** and **missing authentication**. The \"CVE Reference Links Content Summary\" confirms that the **hardcoded hash** allows unauthorized access to debugging functionality which exposes sensitive information.\nThe CWEs are at an appropriate level of specificity. CWE-798 is a Base CWE that accurately describes the use of **hardcoded credentials**. CWE-306 is a Base CWE that accurately describes the **lack** of proper authentication. CWE-200 is a Class CWE that accurately describes the resulting exposure of sensitive information.\n\nRelevant CWE Information:\n\n**CWE-798: Use of Hard-coded Credentials**\n*   The vulnerability description states that the plugin uses a \"**hardcoded hash**\".\n*   The \"CVE Reference Links Content Summary\" shows the code snippet where the hardcoded hash is used for authorization.\n*   The \"Retriever Results\" list CWE-798 as a potential match.\n*   Mapping Guidance: Usage: Allowed, Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**CWE-306: Missing Authentication for Critical Function**\n*   The \"CVE Reference Links Content Summary\" states that the code **lacks** a robust authentication mechanism.\n*   The \"Retriever Results\" list CWE-306 as a potential match.\n*   Mapping Guidance: Usage: Allowed, Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**CWE-200: Exposure of Sensitive Information Through Design or Error**\n*   The vulnerability description states that the vulnerability leads to \"**Sensitive Information Exposure**\".\n*   The \"CVE Reference Links Content Summary\" states that an attacker can extract sensitive data including environment information, plugin tokens, shipping configurations, and limited vendor information.\n\n**CWEs Considered But Not Used:**\n\n*   CWE-259 (**Use of Hard-coded Password**) and CWE-321 (**Use of Hard-coded Cryptographic Key**): These are variants of CWE-798 but are more specific to passwords or cryptographic keys. The vulnerability uses a **hardcoded hash**, which is a broader category covered by CWE-798.\n*   CWE-522 (**Insufficiently Protected Credentials**): This is a Class CWE and less specific than CWE-798, which directly addresses the use of **hardcoded credentials**.\n*   CWE-863 (**Incorrect Authorization**) and CWE-862 (**Missing Authorization**): While authorization is related, the primary issue is the use of **hardcoded credentials** for authentication, making CWE-798 and CWE-306 more appropriate.\n*   CWE-532 (**Insertion of Sensitive Information into Log File**): This CWE is not applicable because the sensitive information is not being inserted into a log file.\n*   CWE-502 (**Deserialization of Untrusted Data**) and CWE-352 (**Cross-Site Request Forgery (CSRF)**): These CWEs are not relevant to the vulnerability description.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-798 | Use of Hard-coded Credentials | 1.0 | Base | Allowed | Primary CWE. The root cause is the use of a hardcoded hash for authentication. |\n| CWE-306 | Missing Authentication for Critical Function | 0.9 | Base | Allowed | Secondary CWE. The hardcoded hash bypasses any meaningful authentication mechanism. |\n| CWE-200 | Exposure of Sensitive Information Through Design or Error | 0.8 | Class | Allowed-with-Review | Secondary CWE. The hardcoded hash allows attackers to extract sensitive information. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is CWE-798, which is the root cause of the vulnerability. CWE-306 is also present since there is **missing authentication** that the **hardcoded credentials** are meant to provide. CWE-200 is the result of the **hardcoded credentials** being used and **missing authentication** which leads to exposure of sensitive information.\n\n```mermaid\ngraph TD\n    cwe798[\"CWE-798: Use of Hard-coded Credentials\"]\n    cwe306[\"CWE-306: Missing Authentication for Critical Function\"]\n    cwe200[\"CWE-200: Exposure of Sensitive Information Through Design or Error\"]\n    \n    cwe200 -->|CAUSES| cwe798\n    cwe306 -->|CAUSES| cwe798\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe798 primary\n    class cwe306,cwe200 secondary\n```\n\n## Vulnerability Chain\n1.  **Root Cause:** CWE-798 (**Use of Hard-coded Credentials**) - The application uses a hardcoded hash for authentication.\n2.  **Prerequisite Weakness:** CWE-306 (**Missing Authentication for Critical Function**) - Since the application relies solely on the **hardcoded hash**, it lacks proper authentication mechanisms.\n3.  **Impact:** CWE-200 (**Exposure of Sensitive Information Through Design or Error**) - Due to the **hardcoded credentials** and **missing authentication**, sensitive information is exposed to unauthenticated attackers.\n\n## Summary of Analysis\nThe primary CWE is CWE-798 (**Use of Hard-coded Credentials**) because the **root cause** is the **hardcoded hash** used for authentication. This is supported by the \"Vulnerability Description Key Phrases\" which lists \"**hardcoded hash**\" as the **rootcause**. The \"CVE Reference Links Content Summary\" confirms the use of a hardcoded SHA512 hash for authentication. CWE-306 (**Missing Authentication for Critical Function**) is a contributing factor, as the application **lacks** proper authentication and relies on the **insecure** **hardcoded hash**. CWE-200 (**Exposure of Sensitive Information Through Design or Error**) is a consequence of the **hardcoded credentials** and **missing authentication**. The \"CVE Reference Links Content Summary\" confirms that the **hardcoded hash** allows unauthorized access to debugging functionality which exposes sensitive information.\nThe CWEs are at an appropriate level of specificity. CWE-798 is a Base CWE that accurately describes the use of **hardcoded credentials**. CWE-306 is a Base CWE that accurately describes the **lack** of proper authentication. CWE-200 is a Class CWE that accurately describes the resulting exposure of sensitive information.\n\nRelevant CWE Information:\n\n**CWE-798: Use of Hard-coded Credentials**\n*   The vulnerability description states that the plugin uses a \"**hardcoded hash**\".\n*   The \"CVE Reference Links Content Summary\" shows the code snippet where the hardcoded hash is used for authorization.\n*   The \"Retriever Results\" list CWE-798 as a potential match.\n*   Mapping Guidance: Usage: Allowed, Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**CWE-306: Missing Authentication for Critical Function**\n*   The \"CVE Reference Links Content Summary\" states that the code **lacks** a robust authentication mechanism.\n*   The \"Retriever Results\" list CWE-306 as a potential match.\n*   Mapping Guidance: Usage: Allowed, Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**CWE-200: Exposure of Sensitive Information Through Design or Error**\n*   The vulnerability description states that the vulnerability leads to \"**Sensitive Information Exposure**\".\n*   The \"CVE Reference Links Content Summary\" states that an attacker can extract sensitive data including environment information, plugin tokens, shipping configurations, and limited vendor information.\n\n**CWEs Considered But Not Used:**\n\n*   CWE-259 (**Use of Hard-coded Password**) and CWE-321 (**Use of Hard-coded Cryptographic Key**): These are variants of CWE-798 but are more specific to passwords or cryptographic keys. The vulnerability uses a **hardcoded hash**, which is a broader category covered by CWE-798.\n*   CWE-522 (**Insufficiently Protected Credentials**): This is a Class CWE and less specific than CWE-798, which directly addresses the use of **hardcoded credentials**.\n*   CWE-863 (**Incorrect Authorization**) and CWE-862 (**Missing Authorization**): While authorization is related, the primary issue is the use of **hardcoded credentials** for authentication, making CWE-798 and CWE-306 more appropriate.\n*   CWE-532 (**Insertion of Sensitive Information into Log File**): This CWE is not applicable because the sensitive information is not being inserted into a log file.\n*   CWE-502 (**Deserialization of Untrusted Data**) and CWE-352 (**Cross-Site Request Forgery (CSRF)**): These CWEs are not relevant to the vulnerability description.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-321:**\n- 321 (Use of Hard-coded Cryptographic Key) - ROOT\n\n\n**Chain starting from CWE-259:**\n- 259 (Use of Hard-coded Password) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "259",
        "name": "Use of Hard-coded Password",
        "source": "sparse"
      },
      "similarity": 316.0956624714193
    },
    {
      "metadata": {
        "doc_id": "798",
        "name": "Use of Hard-coded Credentials",
        "source": "sparse"
      },
      "similarity": 305.6590519543727
    },
    {
      "metadata": {
        "doc_id": "522",
        "name": "Insufficiently Protected Credentials",
        "source": "sparse"
      },
      "similarity": 299.93846717357906
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 292.5054649055422
    },
    {
      "metadata": {
        "doc_id": "532",
        "name": "Insertion of Sensitive Information into Log File",
        "source": "sparse"
      },
      "similarity": 290.370229596845
    },
    {
      "metadata": {
        "doc_id": "306",
        "name": "Missing Authentication for Critical Function",
        "source": "sparse"
      },
      "similarity": 289.4719741718839
    },
    {
      "metadata": {
        "doc_id": "862",
        "name": "Missing Authorization",
        "source": "sparse"
      },
      "similarity": 287.219249080648
    },
    {
      "metadata": {
        "doc_id": "502",
        "name": "Deserialization of Untrusted Data",
        "source": "sparse"
      },
      "similarity": 285.05980528195096
    },
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "type": "Compound",
        "original_content": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
        "keyphrase_source": "weakness:Sensitive Information Exposure",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This is a well-known Composite of multiple weaknesses that must all occur simultaneously, although it is attack-oriented in nature.",
          "comments": "While attack-oriented composites are supported in CWE, they have not been a focus of research. There is a chance that future research or CWE scope clarifications will change or deprecate them. Perform root-cause analysis to determine if other weaknesses allow CSRF attacks to occur, and map to those weaknesses. For example, predictable CSRF tokens might allow bypass of CSRF protection mechanisms; if this occurs, they might be better characterized as randomness/predictability weaknesses.",
          "reasons": [
            "Other"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.5508201197494851
          }
        }
      },
      "similarity": 0.5508201197494851
    },
    {
      "doc_id": "321",
      "text": "CWE-321: Use of Hard-coded Cryptographic Key",
      "score": 2.8104,
      "metadata": {
        "doc_id": "321",
        "name": "Use of Hard-coded Cryptographic Key",
        "type": "variant",
        "original_content": "CWE-321: Use of Hard-coded Cryptographic Key",
        "relationships": [
          {
            "source_id": "321",
            "target_id": "656",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "321",
            "target_id": "798",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1340"
            }
          },
          {
            "source_id": "321",
            "target_id": "798",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1305"
            }
          },
          {
            "source_id": "321",
            "target_id": "798",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "798",
            "target_id": "321",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "656",
            "target_id": "321",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "259",
            "target_id": "321",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1291",
            "target_id": "321",
            "label": "PEEROF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 0.7,
          "abstraction_path": 0.76,
          "sequence_path": 0.8,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.2,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "259",
                  "321",
                  "PEEROF"
                ]
              ],
              "score": 0.7,
              "type": "relationship_chain",
              "source": "259"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "798",
                  "321",
                  "PARENTOF"
                ]
              ],
              "score": 0.76,
              "type": "abstraction_path_down",
              "source": "798"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "259",
                  "656",
                  "CANFOLLOW"
                ],
                [
                  "656",
                  "321",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "vulnerability_sequence_forward",
              "source": "259"
            },
            "peer_relationship": {
              "path": [
                [
                  "259",
                  "321",
                  "PEEROF"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "259"
            }
          }
        },
        "abstraction_level": "variant",
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "sparse": 284.1592607039392,
            "graph": 2.8104
          }
        }
      },
      "similarity": 2.8104
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-321",
      "CWE-259",
      "CWE-863",
      "CWE-502",
      "CWE-862",
      "CWE-306",
      "CWE-352",
      "CWE-798",
      "CWE-522",
      "CWE-200",
      "CWE-532"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}