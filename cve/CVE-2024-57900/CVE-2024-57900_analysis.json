{
  "cve_id": "CVE-2024-57900",
  "description": "In the Linux kernel, the following vulnerability has been resolved ila serialize calls to nf_register_net_hooks() syzbot found a race in ila_add_mapping() [1] commit 031ae72825ce (ila call nf_unregister_net_hooks() sooner) attempted to fix a similar issue. Looking at the syzbot repro, we have concurrent ILA_CMD_ADD commands. Add a mutex to make sure at most one thread is calling nf_register_net_hooks(). [1] BUG KASAN slab-use-after-free in rht_key_hashfn include/linux/rhashtable.h159 [inline] BUG KASAN slab-use-after-free in __rhashtable_lookup.constprop.0+0x426/0x550 include/linux/rhashtable.h604 Read of size 4 at addr ffff888028f40008 by task dhcpcd/5501 CPU 1 UID 0 PID 5501 Comm dhcpcd Not tainted 6.13.0-rc4-syzkaller-00054-gd6ef8b40d075 #0 Hardware name Google Google Compute Engine/Google Compute Engine, BIOS Google 09/13/2024 Call Trace __dump_stack lib/dump_stack.c94 [inline] dump_stack_lvl+0x116/0x1f0 lib/dump_stack.c120 print_address_description mm/kasan/report.c378 [inline] print_report+0xc3/0x620 mm/kasan/report.c489 kasan_report+0xd9/0x110 mm/kasan/report.c602 rht_key_hashfn include/linux/rhashtable.h159 [inline] __rhashtable_lookup.constprop.0+0x426/0x550 include/linux/rhashtable.h604 rhashtable_lookup include/linux/rhashtable.h646 [inline] rhashtable_lookup_fast include/linux/rhashtable.h672 [inline] ila_lookup_wildcards net/ipv6/ila/ila_xlat.c127 [inline] ila_xlat_addr net/ipv6/ila/ila_xlat.c652 [inline] ila_nf_input+0x1ee/0x620 net/ipv6/ila/ila_xlat.c185 nf_hook_entry_hookfn include/linux/netfilter.h154 [inline] nf_hook_slow+0xbb/0x200 net/netfilter/core.c626 nf_hook.constprop.0+0x42e/0x750 include/linux/netfilter.h269 NF_HOOK include/linux/netfilter.h312 [inline] ipv6_rcv+0xa4/0x680 net/ipv6/ip6_input.c309 __netif_receive_skb_one_core+0x12e/0x1e0 net/core/dev.c5672 __netif_receive_skb+0x1d/0x160 net/core/dev.c5785 process_backlog+0x443/0x15f0 net/core/dev.c6117 __napi_poll.constprop.0+0xb7/0x550 net/core/dev.c6883 napi_poll net/core/dev.c6952 [inline] net_rx_action+0xa94/0x1010 net/core/dev.c7074 handle_softirqs+0x213/0x8f0 kernel/softirq.c561 __do_softirq kernel/softirq.c595 [inline] invoke_softirq kernel/softirq.c435 [inline] __irq_exit_rcu+0x109/0x170 kernel/softirq.c662 irq_exit_rcu+0x9/0x30 kernel/softirq.c678 instr_sysvec_apic_timer_interrupt arch/x86/kernel/apic/apic.c1049 [inline] sysvec_apic_timer_interrupt+0xa4/0xc0 arch/x86/kernel/apic/apic.c1049",
  "key_phrases": {
    "component": "",
    "rootcause": "",
    "vector": "",
    "weakness": "slab-use-after-free, use-after-free",
    "product": "Linux kernel",
    "impact": "",
    "attacker": "",
    "version": "6.13.0-rc4-syzkaller-00054-gd6ef8b40d075"
  },
  "reference_content": null,
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-416 | Use After Free | 1.0 | Variant |  Primary | Allowed |\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.7 | Class | Secondary | Allowed-with-Review |\n| CWE-667 | Improper Locking | 0.6 | Class | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is a **Use After Free (CWE-416)**, which is a variant of a more general class of memory corruption issues. This can occur because of a **Race Condition (CWE-362)** where multiple threads access the same resource concurrently, leading to unexpected behavior. The fix implemented involves adding a mutex, which directly relates to **Improper Locking (CWE-667)**, as the original code lacked proper synchronization mechanisms.\n\n```mermaid\ngraph TD\n    cwe416[\"CWE-416: Use After Free\"]\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    cwe667[\"CWE-667: Improper Locking\"]\n\n    cwe416 -->|CANFOLLOW| cwe754[\"CWE-754: Improper Check for Unusual or Exceptional Conditions\"];\n    cwe362 -->|CANPRECEDE| cwe416\n    cwe667 -->|RELATEDTO| cwe362\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe416 primary\n    class cwe362,cwe667 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a **Race Condition (CWE-362)**, which leads to a **Use After Free (CWE-416)**. The root cause is the lack of proper locking mechanisms, represented by **Improper Locking (CWE-667)**.\n\n## Summary of Analysis\nThe primary vulnerability is a **Use After Free (CWE-416)**, as indicated by the \"Vulnerability Description Key Phrases\" which lists **use-after-free**. This is further supported by the KASAN report showing a **slab-use-after-free**. The fix implemented involves adding a mutex, which strongly suggests that a **Race Condition (CWE-362)** was present, leading to the memory corruption. The lack of a mutex is indicative of **Improper Locking (CWE-667)**, further solidifying this classification.\n\nThe retriever results also highly ranked CWE-416, further supporting this classification.\n\nOther CWEs considered but not used:\n\n*   CWE-909: Missing Initialization of Resource - While possible, the evidence more strongly points to a use-after-free scenario rather than a missing initialization.\n*   CWE-415: Double Free - There is no evidence to suggest a double free condition.\n*   CWE-911: Improper Update of Reference Count - This is not directly supported by the evidence.\n\nBased on the evidence, relationship analysis, and retriever results, the selected CWEs are at the optimal level of specificity.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-416 | Use After Free | 1.0 | Variant |  Primary | Allowed |\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.7 | Class | Secondary | Allowed-with-Review |\n| CWE-667 | Improper Locking | 0.6 | Class | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is a **Use After Free (CWE-416)**, which is a variant of a more general class of memory corruption issues. This can occur because of a **Race Condition (CWE-362)** where multiple threads access the same resource concurrently, leading to unexpected behavior. The fix implemented involves adding a mutex, which directly relates to **Improper Locking (CWE-667)**, as the original code lacked proper synchronization mechanisms.\n\n```mermaid\ngraph TD\n    cwe416[\"CWE-416: Use After Free\"]\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    cwe667[\"CWE-667: Improper Locking\"]\n\n    cwe416 -->|CANFOLLOW| cwe754[\"CWE-754: Improper Check for Unusual or Exceptional Conditions\"];\n    cwe362 -->|CANPRECEDE| cwe416\n    cwe667 -->|RELATEDTO| cwe362\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe416 primary\n    class cwe362,cwe667 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a **Race Condition (CWE-362)**, which leads to a **Use After Free (CWE-416)**. The root cause is the lack of proper locking mechanisms, represented by **Improper Locking (CWE-667)**.\n\n## Summary of Analysis\nThe primary vulnerability is a **Use After Free (CWE-416)**, as indicated by the \"Vulnerability Description Key Phrases\" which lists **use-after-free**. This is further supported by the KASAN report showing a **slab-use-after-free**. The fix implemented involves adding a mutex, which strongly suggests that a **Race Condition (CWE-362)** was present, leading to the memory corruption. The lack of a mutex is indicative of **Improper Locking (CWE-667)**, further solidifying this classification.\n\nThe retriever results also highly ranked CWE-416, further supporting this classification.\n\nOther CWEs considered but not used:\n\n*   CWE-909: Missing Initialization of Resource - While possible, the evidence more strongly points to a use-after-free scenario rather than a missing initialization.\n*   CWE-415: Double Free - There is no evidence to suggest a double free condition.\n*   CWE-911: Improper Update of Reference Count - This is not directly supported by the evidence.\n\nBased on the evidence, relationship analysis, and retriever results, the selected CWEs are at the optimal level of specificity.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-416:**\n- 416 (Use After Free) - ROOT\n\n\n**Chain starting from CWE-911:**\n- 911 (Improper Update of Reference Count) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "416",
        "name": "Use After Free",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Use-After-Free",
        "match_reason": "exact_match_compound_part_1"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "909",
        "name": "Missing Initialization of Resource",
        "source": "sparse"
      },
      "similarity": 785.9692831928146
    },
    {
      "metadata": {
        "doc_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "source": "sparse"
      },
      "similarity": 724.1200320953662
    },
    {
      "metadata": {
        "doc_id": "415",
        "name": "Double Free",
        "source": "sparse"
      },
      "similarity": 705.1708757644915
    },
    {
      "metadata": {
        "doc_id": "911",
        "name": "Improper Update of Reference Count",
        "source": "sparse"
      },
      "similarity": 666.0910004872062
    },
    {
      "metadata": {
        "doc_id": "401",
        "name": "Missing Release of Memory after Effective Lifetime",
        "source": "sparse"
      },
      "similarity": 644.6846581730082
    },
    {
      "metadata": {
        "doc_id": "667",
        "name": "Improper Locking",
        "source": "sparse"
      },
      "similarity": 644.6819167468383
    },
    {
      "metadata": {
        "doc_id": "125",
        "name": "Out-of-bounds Read",
        "source": "sparse"
      },
      "similarity": 635.145124612355
    },
    {
      "metadata": {
        "doc_id": "1285",
        "name": "Improper Validation of Specified Index, Position, or Offset in Input",
        "type": "Base",
        "original_content": "The product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties.",
        "keyphrase_source": "weakness:slab-use-after-free",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5496889800433229,
            "graph": 1.631535060521378
          }
        }
      },
      "similarity": 0.5496889800433229
    },
    {
      "doc_id": "123",
      "text": "CWE-123: Write-what-where Condition",
      "score": 2.9120000000000004,
      "metadata": {
        "doc_id": "123",
        "name": "Write-what-where Condition",
        "type": "base",
        "original_content": "CWE-123: Write-what-where Condition",
        "relationships": [
          {
            "source_id": "123",
            "target_id": "590",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "479",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "416",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "364",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "134",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "120",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "119",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1340"
            }
          },
          {
            "source_id": "123",
            "target_id": "119",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1305"
            }
          },
          {
            "source_id": "123",
            "target_id": "787",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "787",
            "target_id": "123",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "590",
            "target_id": "123",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "479",
            "target_id": "123",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "416",
            "target_id": "123",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "415",
            "target_id": "123",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "364",
            "target_id": "123",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "134",
            "target_id": "123",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "120",
            "target_id": "123",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "119",
            "target_id": "123",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1305"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "416",
                  "123",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "416"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "416",
                  "123",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_forward",
              "source": "416"
            },
            "peer_relationship": {
              "path": [
                [
                  "415",
                  "123",
                  "PEEROF"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "415"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.9120000000000004
          }
        }
      },
      "similarity": 2.9120000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-416",
      "CWE-911",
      "CWE-667",
      "CWE-909",
      "CWE-362",
      "CWE-415",
      "CWE-754"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}