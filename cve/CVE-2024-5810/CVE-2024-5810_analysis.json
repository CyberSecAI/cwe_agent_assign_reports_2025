{
  "cve_id": "CVE-2024-5810",
  "description": "The WP2Speed Faster - Optimize PageSpeed Insights Score 90-100 plugin for WordPress is vulnerable to unauthorized access in all versions up to, and including, 1.0.1. This is due to the **use of hardcoded credentials** to authenticate all the incoming API requests. This makes it possible for unauthenticated attackers to overwrite CSS, update the trial settings, purge the cache, and find attachments.",
  "key_phrases": {
    "rootcause": "use of hardcoded credentials",
    "weakness": "",
    "impact": "unauthorized access",
    "vector": "",
    "attacker": "unauthenticated attackers",
    "product": "WP2Speed Faster - Optimize PageSpeed Insights Score 90-100 plugin for WordPress",
    "version": "all versions up to and including 1.0.1",
    "component": ""
  },
  "reference_content": "Based on the provided information, here's an analysis of CVE-2024-5810:\n\n**Vulnerability Details:**\n\n*   **Root Cause:** The vulnerability stems from the use of a hardcoded token (`hw837939@code140390`) for authenticating REST API requests in the \"WP2Speed Faster \u2013 Optimize PageSpeed Insights Score 90-100\" WordPress plugin. This token is used in the `rest_permission_check` function, and because this function uses a hardcoded value, any request containing this token is authorized, regardless of the user's actual role or permissions.\n*   **Weaknesses:**\n    *   **Hardcoded Credentials:** The core issue is the presence of a hardcoded API token, which is a major security flaw.\n    *   **Improper Authorization:** Due to the use of hardcoded credentials, the plugin fails to properly authorize API requests, allowing unauthenticated access to sensitive functions.\n*   **Impact of Exploitation:**\n    *   **Unauthorized Actions:** An attacker, without needing any user credentials, can perform actions through the plugin's REST API. This includes:\n        *   **CSS Manipulation:** Overwriting CSS files (`/hw/upload_criticalcss`).\n        *   **Trial Settings Update:** Modifying the plugin's trial settings (`/hw/trial`).\n        *   **Cache Purge:** Clearing the plugin's cache (`/hw/purge_cache`).\n        *   **Attachment Data Disclosure:** Accessing a list of attachments, which could reveal information about website content and structure (`/hw/find_attachment`).\n    *   **Potential Website Defacement/Disruption:** Overwriting CSS could lead to defacing the site and other disruptive activity.\n*   **Attack Vectors:**\n    *   The attack vector is through the plugin's REST API endpoints. Specifically, the plugin registers several routes under the `/wp-json/hw/` namespace which, when accessed with the correct token, execute different functions.\n    *   An attacker can send HTTP GET or POST requests to the vulnerable endpoints, including the hardcoded token as part of the query parameters. For example, `https://example.com/wp-json/hw/purge_cache?token=hw837939@code140390` would purge the cache.\n\n*   **Required Attacker Capabilities/Position:**\n    *   No special privileges or user accounts are needed.\n    *   The attacker needs to know the location of the website using the vulnerable plugin and have network access to send HTTP requests.\n    *   They need to know the hardcoded token `hw837939@code140390` to be able to perform the actions.\n\n**Additional Details from the Content:**\n\n*   The vulnerable code resides in the `optimize.php` file of the plugin.\n*   The `rest_permission_check` function validates the token from either `$_GET` or `$_REQUEST`, making both GET and POST requests vulnerable to exploitation, as stated in the Wordfence analysis.\n*   Multiple REST routes are affected by this vulnerability due to the use of `rest_permission_check`.\n*   The Wordfence content also confirms that there is no patch available.\n\n**In summary:** CVE-2024-5810 is a critical vulnerability due to the use of hardcoded credentials, which enables unauthenticated attackers to manipulate critical aspects of a WordPress site using the vulnerable plugin.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n\n| CWE ID  | CWE Name                                           | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| ------- | -------------------------------------------------- | ---------- | --------------------- | ------------------------------- | ------------------------------- |\n| CWE-259 | Use of Hard-coded Password                         | 0.9        | Variant               | Primary                         | Allowed                         |\n| CWE-862 | Missing Authorization                              | 0.7        | Class                 | Secondary                       | Allowed-with-Review             |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary weakness is the **use of hardcoded credentials** (CWE-259), which directly leads to **missing authorization** (CWE-862) because the hardcoded credentials bypass normal authorization checks. CWE-259 is a child of CWE-798 (Use of Hard-coded Credentials), and CWE-862 is a child of CWE-285 (Improper Authorization). The relationship here is that the **use of hardcoded credentials** allows attackers to bypass authorization checks, leading to unauthorized access and actions.\n\n```mermaid\ngraph TD\n    cwe259[\"CWE-259: Use of Hard-coded Password\"]\n    cwe798[\"CWE-798: Use of Hard-coded Credentials\"]\n    cwe862[\"CWE-862: Missing Authorization\"]\n    cwe285[\"CWE-285: Improper Authorization\"]\n\n    cwe259 -->|CHILDOF| cwe798\n    cwe862 -->|CHILDOF| cwe285\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe259 primary\n    class cwe862 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with the **use of hardcoded credentials** (CWE-259). This leads to **missing authorization** (CWE-862), allowing unauthenticated attackers to perform various actions, like CSS manipulation, trial setting updates, cache purging, and attachment data disclosure.\n\n## Summary of Analysis\n\nThe initial analysis identified the **use of hardcoded credentials** as the root cause, with the resulting impact being unauthorized access. The evidence from the vulnerability description and CVE reference links strongly supports this. The hardcoded token is used to authenticate REST API requests, effectively bypassing any proper authorization checks.\n\nCWE-259 (Use of Hard-coded Password) is the most specific and appropriate CWE to represent the root cause. It is a Variant level CWE, providing a detailed classification. CWE-862 (Missing Authorization) is also relevant because the **use of hardcoded credentials** directly leads to the absence of proper authorization checks. However, CWE-259 is considered the primary weakness since it's the root cause. The unauthorized actions (CSS manipulation, trial setting updates, cache purge, attachment data disclosure) are consequences of the **missing authorization**.\n\nThe selection is based on the direct evidence of the **use of hardcoded credentials** and the subsequent lack of authorization. The hierarchical relationships and chain relationships confirm that CWE-259 is the appropriate root cause, leading to CWE-862.\n\nRelevant CWE Information:\n\n*   **CWE-259 (Use of Hard-coded Password):** This CWE accurately describes the **use of hardcoded credentials** for authentication.\n*   **CWE-862 (Missing Authorization):** This CWE describes the lack of authorization checks, which is a direct consequence of the **use of hardcoded credentials**.\n\nOther CWEs Considered:\n\n*   CWE-306 (Missing Authentication for Critical Function): While related, the vulnerability description explicitly mentions the **use of hardcoded credentials** for authentication, making CWE-259 a more accurate and specific classification.\n*   CWE-639 (Authorization Bypass Through User-Controlled Key): This is similar, but CWE-259 more directly addresses the root cause of the **use of hardcoded credentials**.\n*   CWE-863 (Incorrect Authorization): The authorization is not just incorrect; it is effectively bypassed due to the **hardcoded credentials**, making CWE-862 a more suitable choice.\n*   CWE-321 (Use of Hard-coded Cryptographic Key): While the hardcoded token could be considered a key, CWE-259 is more specific to the context of authentication via a \"password\".",
  "analysis_with_relationships": "# Summary\n\n| CWE ID  | CWE Name                                           | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| ------- | -------------------------------------------------- | ---------- | --------------------- | ------------------------------- | ------------------------------- |\n| CWE-259 | Use of Hard-coded Password                         | 0.9        | Variant               | Primary                         | Allowed                         |\n| CWE-862 | Missing Authorization                              | 0.7        | Class                 | Secondary                       | Allowed-with-Review             |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary weakness is the **use of hardcoded credentials** (CWE-259), which directly leads to **missing authorization** (CWE-862) because the hardcoded credentials bypass normal authorization checks. CWE-259 is a child of CWE-798 (Use of Hard-coded Credentials), and CWE-862 is a child of CWE-285 (Improper Authorization). The relationship here is that the **use of hardcoded credentials** allows attackers to bypass authorization checks, leading to unauthorized access and actions.\n\n```mermaid\ngraph TD\n    cwe259[\"CWE-259: Use of Hard-coded Password\"]\n    cwe798[\"CWE-798: Use of Hard-coded Credentials\"]\n    cwe862[\"CWE-862: Missing Authorization\"]\n    cwe285[\"CWE-285: Improper Authorization\"]\n\n    cwe259 -->|CHILDOF| cwe798\n    cwe862 -->|CHILDOF| cwe285\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe259 primary\n    class cwe862 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with the **use of hardcoded credentials** (CWE-259). This leads to **missing authorization** (CWE-862), allowing unauthenticated attackers to perform various actions, like CSS manipulation, trial setting updates, cache purging, and attachment data disclosure.\n\n## Summary of Analysis\n\nThe initial analysis identified the **use of hardcoded credentials** as the root cause, with the resulting impact being unauthorized access. The evidence from the vulnerability description and CVE reference links strongly supports this. The hardcoded token is used to authenticate REST API requests, effectively bypassing any proper authorization checks.\n\nCWE-259 (Use of Hard-coded Password) is the most specific and appropriate CWE to represent the root cause. It is a Variant level CWE, providing a detailed classification. CWE-862 (Missing Authorization) is also relevant because the **use of hardcoded credentials** directly leads to the absence of proper authorization checks. However, CWE-259 is considered the primary weakness since it's the root cause. The unauthorized actions (CSS manipulation, trial setting updates, cache purge, attachment data disclosure) are consequences of the **missing authorization**.\n\nThe selection is based on the direct evidence of the **use of hardcoded credentials** and the subsequent lack of authorization. The hierarchical relationships and chain relationships confirm that CWE-259 is the appropriate root cause, leading to CWE-862.\n\nRelevant CWE Information:\n\n*   **CWE-259 (Use of Hard-coded Password):** This CWE accurately describes the **use of hardcoded credentials** for authentication.\n*   **CWE-862 (Missing Authorization):** This CWE describes the lack of authorization checks, which is a direct consequence of the **use of hardcoded credentials**.\n\nOther CWEs Considered:\n\n*   CWE-306 (Missing Authentication for Critical Function): While related, the vulnerability description explicitly mentions the **use of hardcoded credentials** for authentication, making CWE-259 a more accurate and specific classification.\n*   CWE-639 (Authorization Bypass Through User-Controlled Key): This is similar, but CWE-259 more directly addresses the root cause of the **use of hardcoded credentials**.\n*   CWE-863 (Incorrect Authorization): The authorization is not just incorrect; it is effectively bypassed due to the **hardcoded credentials**, making CWE-862 a more suitable choice.\n*   CWE-321 (Use of Hard-coded Cryptographic Key): While the hardcoded token could be considered a key, CWE-259 is more specific to the context of authentication via a \"password\".\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-863:**\n- 863 (Incorrect Authorization) - ROOT\n\n\n**Chain starting from CWE-321:**\n- 321 (Use of Hard-coded Cryptographic Key) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "306",
        "name": "Missing Authentication for Critical Function",
        "source": "sparse"
      },
      "similarity": 393.9577123699442
    },
    {
      "metadata": {
        "doc_id": "862",
        "name": "Missing Authorization",
        "source": "sparse"
      },
      "similarity": 386.4869562237034
    },
    {
      "metadata": {
        "doc_id": "259",
        "name": "Use of Hard-coded Password",
        "source": "sparse"
      },
      "similarity": 380.8001196066451
    },
    {
      "metadata": {
        "doc_id": "321",
        "name": "Use of Hard-coded Cryptographic Key",
        "source": "sparse"
      },
      "similarity": 377.7719910091105
    },
    {
      "metadata": {
        "doc_id": "639",
        "name": "Authorization Bypass Through User-Controlled Key",
        "source": "sparse"
      },
      "similarity": 377.5847837112782
    },
    {
      "metadata": {
        "doc_id": "522",
        "name": "Insufficiently Protected Credentials",
        "source": "sparse"
      },
      "similarity": 370.2136136643444
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 369.1229733820345
    },
    {
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "source": "sparse"
      },
      "similarity": 367.82589186697146
    },
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "type": "Compound",
        "original_content": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
        "keyphrase_source": "rootcause:use of hardcoded credentials",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This is a well-known Composite of multiple weaknesses that must all occur simultaneously, although it is attack-oriented in nature.",
          "comments": "While attack-oriented composites are supported in CWE, they have not been a focus of research. There is a chance that future research or CWE scope clarifications will change or deprecate them. Perform root-cause analysis to determine if other weaknesses allow CSRF attacks to occur, and map to those weaknesses. For example, predictable CSRF tokens might allow bypass of CSRF protection mechanisms; if this occurs, they might be better characterized as randomness/predictability weaknesses.",
          "reasons": [
            "Other"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.6080211214430857,
            "sparse": 115.45996880925432
          }
        }
      },
      "similarity": 0.6080211214430857
    },
    {
      "doc_id": "471",
      "text": "CWE-471: Modification of Assumed-Immutable Data (MAID)",
      "score": 2.7196000000000002,
      "metadata": {
        "doc_id": "471",
        "name": "Modification of Assumed-Immutable Data (MAID)",
        "type": "base",
        "original_content": "CWE-471: Modification of Assumed-Immutable Data (MAID)",
        "relationships": [
          {
            "source_id": "471",
            "target_id": "621",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "607",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "602",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "473",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "472",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "425",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "291",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "1321",
            "label": "CANFOLLOW",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "1282",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "664",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "664",
            "target_id": "471",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "621",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "607",
            "target_id": "471",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "602",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "473",
            "target_id": "471",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "472",
            "target_id": "471",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "425",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "291",
            "target_id": "471",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1321",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1282",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "abstraction_path": 0.5599999999999999,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_up",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "425",
                  "471",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "425"
            },
            "abstraction_path_up": {
              "path": [
                [
                  "472",
                  "471",
                  "CHILDOF"
                ]
              ],
              "score": 0.5599999999999999,
              "type": "abstraction_path_up",
              "source": "472"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "425",
                  "471",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_forward",
              "source": "425"
            }
          }
        },
        "abstraction_level": "base",
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.7196000000000002
          }
        }
      },
      "similarity": 2.7196000000000002
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-863",
      "CWE-321",
      "CWE-862",
      "CWE-639",
      "CWE-306",
      "CWE-285",
      "CWE-798",
      "CWE-259"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}