{
  "cve_id": "CVE-2024-12350",
  "description": "A vulnerability was found in JFinalCMS 1.0. It has been rated as critical. Affected by this issue is the function update of the file \\src\\main\\java\\com\\cms\\controller\\admin\\TemplateController.java of the component Template Handler. The manipulation of the argument content leads to **command injection**. The attack may be launched remotely. The exploit has been disclosed to the public and may be used.",
  "key_phrases": {
    "rootcause": "improper input validation",
    "weakness": "command injection",
    "impact": "execute arbitrary commands",
    "vector": "manipulation of content argument",
    "attacker": "",
    "product": "JFinalCMS",
    "version": "1",
    "component": "update function in TemplateController.java"
  },
  "reference_content": "Based on the provided content, here's a breakdown of the vulnerability:\n\n**Root cause of vulnerability:**\nThe vulnerability stems from a lack of input sanitization in the `TemplateController.java` file within the JFinalCMS project. Specifically, when updating template files, the `content` parameter, which contains the template code, is directly written to the file system without any filtering or validation.\n\n**Weaknesses/vulnerabilities present:**\n- **Server-Side Template Injection (SSTI):** The core weakness is the use of user-controlled input (`content` parameter) directly within the Freemarker template engine. This allows an attacker to inject malicious template code.\n- **Lack of Input Sanitization/Validation:** The `update()` method in `TemplateController.java` does not sanitize or validate the `content` parameter, allowing arbitrary code to be embedded within the template file.\n\n**Impact of exploitation:**\n- **Remote Code Execution (RCE):** By injecting malicious Freemarker template code, an attacker can execute arbitrary code on the server. This can lead to complete compromise of the server, data theft, malware installation, or other malicious actions.\n- **System Compromise:** An attacker can gain complete control of the server, allowing them to read, modify, or delete any data or resources.\n\n**Attack vectors:**\n- **HTTP POST Request:** The attacker sends a crafted POST request to the `/admin/template/update` endpoint, providing a malicious template code in the `content` parameter.\n- **Template File Modification:** The attacker targets a specific template file for modification through the `fileName` and `directory` parameters, overwriting it with malicious code.\n\n**Required attacker capabilities/position:**\n- **Authentication:** The attacker needs to be logged in as an admin or have the ability to access the `TemplateController.java` endpoint.\n- **Knowledge of Freemarker:** The attacker must know the syntax and capabilities of the Freemarker template engine to craft a successful exploit payload.\n- **Targeted Template:** The attacker needs to know the location and name of an existing template file to overwrite.\n- **Network Access:** The attacker needs network access to the server hosting the vulnerable JFinalCMS application.\n\n**Additional details:**\n- The provided example shows how an attacker can inject `<#assign value=\"freemarker.template.utility.Execute\"?new()>${value(\"calc.exe\")}` into a template file, causing the server to execute the `calc.exe` command (for testing, other commands could be used).\n- The vulnerability is in `JFinalCMS-master\\src\\main\\java\\com\\cms\\controller\\admin\\TemplateController.java`.\n- The attacker targets the `update` function in the `TemplateController.java`.\n- The code `FreeMarkerRender.getConfiguration().clearTemplateCache();` forces the template engine to reload the modified template, executing the attacker's payload.\n- The `TemplateUtils.write` function is responsible for writing the modified content into the template file without any sanitization.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-78 | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | 1.0 | Base | Primary | Allowed |\n| CWE-1336 | Improper Neutralization of Special Elements Used in a Template Engine | 0.8 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship that influenced the selection was the hierarchical relationship. CWE-78 is a more specific form of command injection, focusing on OS commands. CWE-1336 is a related weakness since the template engine is the entry point for the command injection.\n\n```mermaid\ngraph TD\n    cwe78[\"CWE-78: OS Command Injection\"]\n    cwe77[\"CWE-77: Command Injection\"]\n    cwe1336[\"CWE-1336: Improper Neutralization of Special Elements Used in a Template Engine\"]\n\n    cwe78 -->|CHILDOF| cwe77\n    cwe1336 -->|CANPRECEDE| cwe78\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe78 primary\n    class cwe1336 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **improper neutralization** of the input to the template engine (CWE-1336), which leads to the ability to inject OS commands, resulting in command execution (CWE-78).\n\n## Summary of Analysis\nThe initial analysis focused on identifying the root cause and the specific type of injection. The evidence clearly points to command injection via template manipulation. The final selection of CWE-78 and CWE-1336 provides the optimal level of specificity.\n\nThe vulnerability description states the **weakness** is **command injection** via manipulation of the content argument. The CVE Reference Links Content Summary confirms this by stating that the root cause is a lack of input sanitization in the TemplateController.java file, allowing user-controlled input to be used directly within the Freemarker template engine.\n\nCWE-78 (Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')) is the most appropriate primary CWE because the injected commands are executed at the OS level.\n\nCWE-1336 (Improper Neutralization of Special Elements Used in a Template Engine) is included as a secondary CWE because the template engine is the entry point for the command injection and is a required condition for the execution.\n\nCWE-77 (Improper Neutralization of Special Elements used in a Command ('Command Injection')) was considered, but CWE-78 is a more specific child.\n\nCWE-89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')) and CWE-79 (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')) were considered but are not applicable as the injection does not directly involve SQL or web page scripting.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-78 | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | 1.0 | Base | Primary | Allowed |\n| CWE-1336 | Improper Neutralization of Special Elements Used in a Template Engine | 0.8 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship that influenced the selection was the hierarchical relationship. CWE-78 is a more specific form of command injection, focusing on OS commands. CWE-1336 is a related weakness since the template engine is the entry point for the command injection.\n\n```mermaid\ngraph TD\n    cwe78[\"CWE-78: OS Command Injection\"]\n    cwe77[\"CWE-77: Command Injection\"]\n    cwe1336[\"CWE-1336: Improper Neutralization of Special Elements Used in a Template Engine\"]\n\n    cwe78 -->|CHILDOF| cwe77\n    cwe1336 -->|CANPRECEDE| cwe78\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe78 primary\n    class cwe1336 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **improper neutralization** of the input to the template engine (CWE-1336), which leads to the ability to inject OS commands, resulting in command execution (CWE-78).\n\n## Summary of Analysis\nThe initial analysis focused on identifying the root cause and the specific type of injection. The evidence clearly points to command injection via template manipulation. The final selection of CWE-78 and CWE-1336 provides the optimal level of specificity.\n\nThe vulnerability description states the **weakness** is **command injection** via manipulation of the content argument. The CVE Reference Links Content Summary confirms this by stating that the root cause is a lack of input sanitization in the TemplateController.java file, allowing user-controlled input to be used directly within the Freemarker template engine.\n\nCWE-78 (Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')) is the most appropriate primary CWE because the injected commands are executed at the OS level.\n\nCWE-1336 (Improper Neutralization of Special Elements Used in a Template Engine) is included as a secondary CWE because the template engine is the entry point for the command injection and is a required condition for the execution.\n\nCWE-77 (Improper Neutralization of Special Elements used in a Command ('Command Injection')) was considered, but CWE-78 is a more specific child.\n\nCWE-89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')) and CWE-79 (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')) were considered but are not applicable as the injection does not directly involve SQL or web page scripting.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-89:**\n- 89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')) - ROOT\n\n\n**Chain starting from CWE-77:**\n- 77 (Improper Neutralization of Special Elements used in a Command ('Command Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "77",
        "name": "Improper Neutralization of Special Elements used in a Command ('Command Injection')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Command injection",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "78",
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: OS Command Injection",
        "match_reason": "phrase_in_term_whole_phrase"
      },
      "similarity": 700.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "sparse"
      },
      "similarity": 497.5459093421629
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 485.20912095788333
    },
    {
      "metadata": {
        "doc_id": "1336",
        "name": "Improper Neutralization of Special Elements Used in a Template Engine",
        "source": "sparse"
      },
      "similarity": 467.95630673733035
    },
    {
      "metadata": {
        "doc_id": "117",
        "name": "Improper Output Neutralization for Logs",
        "source": "sparse"
      },
      "similarity": 427.3571852290974
    },
    {
      "metadata": {
        "doc_id": "22",
        "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
        "source": "sparse"
      },
      "similarity": 400.99562983158705
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "source": "sparse"
      },
      "similarity": 397.8315437280745
    },
    {
      "metadata": {
        "doc_id": "96",
        "name": "Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')",
        "type": "Base",
        "original_content": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.",
        "keyphrase_source": "weakness:command injection",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.633929874182824,
            "graph": 1.700112683801479
          }
        }
      },
      "similarity": 0.633929874182824
    },
    {
      "doc_id": "184",
      "text": "CWE-184: Incomplete List of Disallowed Inputs",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "184",
        "name": "Incomplete List of Disallowed Inputs",
        "type": "base",
        "original_content": "CWE-184: Incomplete List of Disallowed Inputs",
        "relationships": [
          {
            "source_id": "184",
            "target_id": "692",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "434",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "78",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "79",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "1023",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "693",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "86",
            "target_id": "184",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "78",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "693",
            "target_id": "184",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "692",
            "target_id": "184",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "692",
            "target_id": "184",
            "label": "STARTSWITH",
            "properties": {
              "view_id": "709"
            }
          },
          {
            "source_id": "625",
            "target_id": "184",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "186",
            "target_id": "184",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1023",
            "target_id": "184",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "79",
                  "184",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "79"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "78",
                  "184",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "78"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "184",
                  "78",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "78"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-89",
      "CWE-77",
      "CWE-79",
      "CWE-1336",
      "CWE-78"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}