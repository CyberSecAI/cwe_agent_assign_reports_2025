{
  "query": "In the Linux kernel, the following vulnerability has been resolved drm/xe/preempt_fence enlarge the fence critical section It is really easy to introduce subtle deadlocks in preempt_fence_work_func() since we operate on single global ordered-wq for signalling our preempt fences behind the scenes, so even though we signal a particular fence, everything in the callback should be in the fence critical section, since blocking in the callback will prevent other published fences from signalling. If we enlarge the fence critical section to cover the entire callback, then lockdep should be able to understand this better, and complain if we grab a sensitive lock like vm->lock, which is also held when waiting on preempt fences.",
  "count": 20,
  "results": [
    {
      "cwe_id": "833",
      "name": "Deadlock",
      "abstraction": "Base",
      "score": 0.5375220857361378,
      "original_score": 0.5375220857361378,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "413",
      "name": "Improper Resource Locking",
      "abstraction": "Base",
      "score": 0.5191560486619422,
      "original_score": 0.5191560486619422,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "abstraction": "Class",
      "score": 0.517809872886929,
      "original_score": 0.517809872886929,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "764",
      "name": "Multiple Locks of a Critical Resource",
      "abstraction": "Base",
      "score": 0.5069569108660635,
      "original_score": 0.5069569108660635,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "765",
      "name": "Multiple Unlocks of a Critical Resource",
      "abstraction": "Base",
      "score": 0.4994496191324693,
      "original_score": 0.4994496191324693,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1260",
      "name": "Improper Handling of Overlap Between Protected Memory Ranges",
      "abstraction": "Base",
      "score": 0.49914851869251803,
      "original_score": 0.49914851869251803,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1231",
      "name": "Improper Prevention of Lock Bit Modification",
      "abstraction": "Base",
      "score": 0.4957729002644867,
      "original_score": 0.4957729002644867,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1264",
      "name": "Hardware Logic with Insecure De-Synchronization between Control and Data Channels",
      "abstraction": "Base",
      "score": 0.48490899172834434,
      "original_score": 0.48490899172834434,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1222",
      "name": "Insufficient Granularity of Address Regions Protected by Register Locks",
      "abstraction": "Variant",
      "score": 0.4828015612021169,
      "original_score": 0.4828015612021169,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1233",
      "name": "Security-Sensitive Hardware Controls with Missing Lock Bit Protection",
      "abstraction": "Base",
      "score": 0.4815474922978775,
      "original_score": 0.4815474922978775,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "909",
      "name": "Missing Initialization of Resource",
      "abstraction": "Class",
      "score": 0.47573974524236434,
      "original_score": 0.47573974524236434,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "1256",
      "name": "Improper Restriction of Software Interfaces to Hardware Features",
      "abstraction": "Base",
      "score": 0.45827670706156964,
      "original_score": 0.45827670706156964,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1285",
      "name": "Improper Validation of Specified Index, Position, or Offset in Input",
      "abstraction": "Base",
      "score": 0.4578722647157494,
      "original_score": 0.4578722647157494,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1332",
      "name": "Improper Handling of Faults that Lead to Instruction Skips",
      "abstraction": "Base",
      "score": 0.4551783397111685,
      "original_score": 0.4551783397111685,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "606",
      "name": "Unchecked Input for Loop Condition",
      "abstraction": "Base",
      "score": 0.454866478069043,
      "original_score": 0.454866478069043,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "832",
      "name": "Unlock of a Resource that is not Locked",
      "abstraction": "Base",
      "score": 0.4535063546627922,
      "original_score": 0.4535063546627922,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "733",
      "name": "Compiler Optimization Removal or Modification of Security-critical Code",
      "abstraction": "Base",
      "score": 0.450454999482417,
      "original_score": 0.450454999482417,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "abstraction": "Class",
      "score": 0.44838856058082466,
      "original_score": 0.44838856058082466,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "1234",
      "name": "Hardware Internal or Debug Modes Allow Override of Locks",
      "abstraction": "Base",
      "score": 0.44819849076639184,
      "original_score": 0.44819849076639184,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "412",
      "name": "Unrestricted Externally Accessible Lock",
      "abstraction": "Base",
      "score": 0.44768153123829424,
      "original_score": 0.44768153123829424,
      "mapping_usage": "Allowed"
    }
  ],
  "statistics": {
    "min": 0.44768153123829424,
    "max": 0.5375220857361378,
    "mean": 0.478761873649975,
    "median": 0.47864361877012096,
    "count": 20
  }
}