{
  "cve_id": "CVE-2024-6198",
  "description": "The device exposes a web interface on ports TCP/3030 and TCP/9882. This web service runs lighttpd, which implements the SNORE interface. This interface is affected by a stack buffer overflow vulnerability due to **insecure path parsing**. An attacker with access to the LAN network interface could use a specially crafted HTTP request to exploit a buffer overflow on the modem.",
  "key_phrases": {
    "component": "",
    "rootcause": "insecure path parsing",
    "vector": "specially crafted HTTP request",
    "weakness": "buffer overflow, stack buffer overflow",
    "product": "",
    "impact": "",
    "attacker": "attacker with access to the LAN network interface",
    "version": ""
  },
  "reference_content": "## Security Advisory: Remote Code Execution on Viasat Modems (CVE-2024-6198)\n\n**Root cause of vulnerability:**\n\nThe vulnerability is a stack buffer overflow in the `index.cgi` CGI binary located under `/usr/local/SNORE`. It's caused by an unsafe call to `sscanf` when parsing the request URI, specifically when extracting variables from the URI.\n\n**Weaknesses/vulnerabilities present:**\n\n*   Stack buffer overflow\n*   Insecure path parsing\n*   Use of unsafe function `sscanf`\n\n**Impact of exploitation:**\n\nAn attacker with access to the LAN network interface could exploit the buffer overflow to gain control of the program registers and potentially execute arbitrary code on the system.\n\n**Attack vectors:**\n\n*   Crafted HTTP request to the web interface (ports TCP/3030 and TCP/9882) with a malicious URI, such as `http://192.168.100.1:9882/snore/blackboxes/AAAAAAAA[512 times]AAAAAA`.\n\n**Required attacker capabilities/position:**\n\n*   Access to the LAN network interface.\n*   Ability to send HTTP requests.\n*   Understanding of buffer overflow exploitation techniques (ROP chaining).\n\n**Mitigation or fix:**\n\n*   Upgrade firmware to version 3.8.0.4+ for RM4100, RM4200, EM4100 or 4.3.0.2+ for RM5110, RM5111, RG1000, RG1100, EG1000, and EG1020.\n*   Ensure devices are online to receive automated updates from Viasat.\n\n**Additional details (more than official CVE description):**\n\n*   The vulnerable interface is called \"SNORE\".\n*   The only binary hardening in place is the non-executable stack, which is insufficient to prevent exploitation using return-oriented programming (ROP) chaining.\n*   The vulnerability was discovered through automated binary static analysis performed by ONEKEY.\n*   The coordinated vulnerability disclosure process with Viasat was described, including a timeline of communication and patch deployment.\n*   CVSS score: 7.7 (High) - CVSS:4.0/AV:A/AC:H/AT:N/PR:N/UI:N/VC:H/VI:H/VA:H/SC:N/SI:N/SA:N/RE:M/U:Red.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-121 | Stack-based Buffer Overflow | 1.0 | Variant |  Primary | Allowed |\n| CWE-120 | Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') | 0.7 | Base | Secondary | Allowed-with-Review |\n| CWE-119 | Improper Restriction of Operations within the Bounds of a Memory Buffer | 0.5 | Class | Secondary | Discouraged |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is CWE-121 Stack-based Buffer Overflow (Variant). CWE-121 is a child of CWE-119 Improper Restriction of Operations within the Bounds of a Memory Buffer (Class). CWE-120 Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') (Base) is related to buffer overflows and is a peer of CWE-121. The relationship analysis highlights the specific nature of the buffer overflow (stack-based) and its connection to more general buffer handling issues. The variant level is more specific and appropriate than the class level.\n\n```mermaid\ngraph TD\n    cwe121[\"CWE-121: Stack-based Buffer Overflow\"]\n    cwe120[\"CWE-120: Buffer Copy without Checking Size of Input\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations\"]\n    \n    cwe121 -->|CHILDOF| cwe119\n    cwe120 -->|CHILDOF| cwe119\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe121 primary\n    class cwe119,cwe120 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **insecure path parsing** which leads to a stack buffer overflow due to the use of the `sscanf` function. This allows an attacker to overwrite memory on the stack and potentially execute arbitrary code.\n\nInsecure Path Parsing -> Stack Buffer Overflow -> Arbitrary Code Execution\n\n## Summary of Analysis\nThe initial assessment strongly points to CWE-121 Stack-based Buffer Overflow due to the vulnerability description explicitly mentioning a stack buffer overflow caused by **insecure path parsing**. The \"CVE Reference Links Content Summary\" section reinforces this by stating that the vulnerability is a stack buffer overflow caused by an unsafe call to `sscanf` when parsing the request URI.\n\nThe retriever results also list CWE-121 Stack-based Buffer Overflow as a potential candidate. While CWE-119 Improper Restriction of Operations within the Bounds of a Memory Buffer has the highest score in retriever results, it is a more general class, and CWE-121 provides a more specific classification.\n\nCWE-120 Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') is also considered as a secondary CWE since the vulnerability involves writing past the end of a buffer.\n\nThe evidence from the vulnerability description and the supporting CVE details, combined with the retriever results and relationship analysis, makes CWE-121 the most appropriate primary CWE.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-121: Stack-based Buffer Overflow\n**Abstraction Level**: Variant\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nA stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\n**Abstraction Level**: Base\n**Similarity Score**: 0.69\n**Source**: dense\n\n**Description**:\nThe product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: There are some indications that this CWE ID might be misused and selected simply because it mentions \"buffer overflow\" - an increasingly vague term. This CWE entry is only appropriate for \"Buffer Copy\" operations (not buffer reads), in which where there is no \"Checking [the] Size of Input\", and (by implication of the copy) writing past the end of the buffer.\n\n## CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\n**Abstraction Level**: Class\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This may result in read or write operations on unexpected memory locations that could be linked to other variables, data structures, or internal program data.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-119 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available.\n\n---\n\n**CWE-121: Stack-based Buffer Overflow**\n\n*   **Technical Explanation:** The vulnerability occurs because the `sscanf` function is used to parse the request URI without proper bounds checking. This allows an attacker to send a specially crafted HTTP request with an overly long URI, which overwrites the buffer allocated on the stack.\n*   **Security Implications:** An attacker can overwrite the return address on the stack, redirecting execution flow to arbitrary code. This can lead to complete system compromise.\n*   **Relationship Analysis:** CWE-121 is a variant of CWE-119 Improper Restriction of Operations within the Bounds of a Memory Buffer.\n*   **Primary/Secondary:** Primary\n*   **MITRE Mapping Guidance:** The usage is ALLOWED for CWE-121.\n*   **Evidence:** \"The vulnerability is a stack buffer overflow in the `index.cgi` CGI binary located under `/usr/local/SNORE`. It's caused by an unsafe call to `sscanf` when parsing the request URI, specifically when extracting variables from the URI.\"\n\n**CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')**\n\n*   **Technical Explanation:** The `sscanf` function copies data into a buffer without checking the size of the input, leading to a buffer overflow.\n*   **Security Implications:** Overwriting memory can lead to arbitrary code execution.\n*   **Relationship Analysis:** CWE-120 is a base CWE related to buffer overflows and is a child of CWE-119. It can precede CWE-787 Out-of-bounds Write.\n*   **Primary/Secondary:** Secondary\n*   **MITRE Mapping Guidance:** The usage is ALLOWED-WITH-REVIEW.\n*   **Evidence:** \"Stack buffer overflow\", \"Use of unsafe function `sscanf`\"\n\n**CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer**\n\n*   **Technical Explanation:** The software does not properly restrict operations within the bounds of a memory buffer, leading to a buffer overflow.\n*   **Security Implications:** Overwriting memory can lead to arbitrary code execution.\n*   **Relationship Analysis:** CWE-119 is a class CWE and a parent of CWE-121 and CWE-120.\n*   **Primary/Secondary:** Secondary\n*   **MITRE Mapping Guidance:** The usage is DISCOURAGED.\n*   **Evidence:** \"Stack buffer overflow\", \"Insecure path parsing\"\n\nOther CWEs Considered but Not Used:\n\n*   CWE-20 Improper Input Validation: While input validation is generally important, the specific issue is the buffer overflow due to the unchecked size of the input, making CWE-121 and CWE-120 more specific.\n*   CWE-190 Integer Overflow or Wraparound: Not relevant as the vulnerability is related to buffer overflows.\n*   CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'): Not relevant as the vulnerability is related to buffer overflows.\n*   CWE-131: Incorrect Calculation of Buffer Size: Not applicable as the issue is not an incorrect calculation of buffer size, but a missing check on the input size during the copy operation.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-121 | Stack-based Buffer Overflow | 1.0 | Variant |  Primary | Allowed |\n| CWE-120 | Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') | 0.7 | Base | Secondary | Allowed-with-Review |\n| CWE-119 | Improper Restriction of Operations within the Bounds of a Memory Buffer | 0.5 | Class | Secondary | Discouraged |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is CWE-121 Stack-based Buffer Overflow (Variant). CWE-121 is a child of CWE-119 Improper Restriction of Operations within the Bounds of a Memory Buffer (Class). CWE-120 Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') (Base) is related to buffer overflows and is a peer of CWE-121. The relationship analysis highlights the specific nature of the buffer overflow (stack-based) and its connection to more general buffer handling issues. The variant level is more specific and appropriate than the class level.\n\n```mermaid\ngraph TD\n    cwe121[\"CWE-121: Stack-based Buffer Overflow\"]\n    cwe120[\"CWE-120: Buffer Copy without Checking Size of Input\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations\"]\n    \n    cwe121 -->|CHILDOF| cwe119\n    cwe120 -->|CHILDOF| cwe119\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe121 primary\n    class cwe119,cwe120 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **insecure path parsing** which leads to a stack buffer overflow due to the use of the `sscanf` function. This allows an attacker to overwrite memory on the stack and potentially execute arbitrary code.\n\nInsecure Path Parsing -> Stack Buffer Overflow -> Arbitrary Code Execution\n\n## Summary of Analysis\nThe initial assessment strongly points to CWE-121 Stack-based Buffer Overflow due to the vulnerability description explicitly mentioning a stack buffer overflow caused by **insecure path parsing**. The \"CVE Reference Links Content Summary\" section reinforces this by stating that the vulnerability is a stack buffer overflow caused by an unsafe call to `sscanf` when parsing the request URI.\n\nThe retriever results also list CWE-121 Stack-based Buffer Overflow as a potential candidate. While CWE-119 Improper Restriction of Operations within the Bounds of a Memory Buffer has the highest score in retriever results, it is a more general class, and CWE-121 provides a more specific classification.\n\nCWE-120 Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') is also considered as a secondary CWE since the vulnerability involves writing past the end of a buffer.\n\nThe evidence from the vulnerability description and the supporting CVE details, combined with the retriever results and relationship analysis, makes CWE-121 the most appropriate primary CWE.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-121: Stack-based Buffer Overflow\n**Abstraction Level**: Variant\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nA stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\n**Abstraction Level**: Base\n**Similarity Score**: 0.69\n**Source**: dense\n\n**Description**:\nThe product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: There are some indications that this CWE ID might be misused and selected simply because it mentions \"buffer overflow\" - an increasingly vague term. This CWE entry is only appropriate for \"Buffer Copy\" operations (not buffer reads), in which where there is no \"Checking [the] Size of Input\", and (by implication of the copy) writing past the end of the buffer.\n\n## CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\n**Abstraction Level**: Class\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This may result in read or write operations on unexpected memory locations that could be linked to other variables, data structures, or internal program data.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-119 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available.\n\n---\n\n**CWE-121: Stack-based Buffer Overflow**\n\n*   **Technical Explanation:** The vulnerability occurs because the `sscanf` function is used to parse the request URI without proper bounds checking. This allows an attacker to send a specially crafted HTTP request with an overly long URI, which overwrites the buffer allocated on the stack.\n*   **Security Implications:** An attacker can overwrite the return address on the stack, redirecting execution flow to arbitrary code. This can lead to complete system compromise.\n*   **Relationship Analysis:** CWE-121 is a variant of CWE-119 Improper Restriction of Operations within the Bounds of a Memory Buffer.\n*   **Primary/Secondary:** Primary\n*   **MITRE Mapping Guidance:** The usage is ALLOWED for CWE-121.\n*   **Evidence:** \"The vulnerability is a stack buffer overflow in the `index.cgi` CGI binary located under `/usr/local/SNORE`. It's caused by an unsafe call to `sscanf` when parsing the request URI, specifically when extracting variables from the URI.\"\n\n**CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')**\n\n*   **Technical Explanation:** The `sscanf` function copies data into a buffer without checking the size of the input, leading to a buffer overflow.\n*   **Security Implications:** Overwriting memory can lead to arbitrary code execution.\n*   **Relationship Analysis:** CWE-120 is a base CWE related to buffer overflows and is a child of CWE-119. It can precede CWE-787 Out-of-bounds Write.\n*   **Primary/Secondary:** Secondary\n*   **MITRE Mapping Guidance:** The usage is ALLOWED-WITH-REVIEW.\n*   **Evidence:** \"Stack buffer overflow\", \"Use of unsafe function `sscanf`\"\n\n**CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer**\n\n*   **Technical Explanation:** The software does not properly restrict operations within the bounds of a memory buffer, leading to a buffer overflow.\n*   **Security Implications:** Overwriting memory can lead to arbitrary code execution.\n*   **Relationship Analysis:** CWE-119 is a class CWE and a parent of CWE-121 and CWE-120.\n*   **Primary/Secondary:** Secondary\n*   **MITRE Mapping Guidance:** The usage is DISCOURAGED.\n*   **Evidence:** \"Stack buffer overflow\", \"Insecure path parsing\"\n\nOther CWEs Considered but Not Used:\n\n*   CWE-20 Improper Input Validation: While input validation is generally important, the specific issue is the buffer overflow due to the unchecked size of the input, making CWE-121 and CWE-120 more specific.\n*   CWE-190 Integer Overflow or Wraparound: Not relevant as the vulnerability is related to buffer overflows.\n*   CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'): Not relevant as the vulnerability is related to buffer overflows.\n*   CWE-131: Incorrect Calculation of Buffer Size: Not applicable as the issue is not an incorrect calculation of buffer size, but a missing check on the input size during the copy operation.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-121:**\n- 121 (Stack-based Buffer Overflow) - ROOT\n\n\n**Chain starting from CWE-131:**\n- 131 (Incorrect Calculation of Buffer Size) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "119",
        "name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Buffer Overflow",
        "match_reason": "exact_match_compound_part_0"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "190",
        "name": "Integer Overflow or Wraparound",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Overflow",
        "match_reason": "term_in_phrase_compound_part_0"
      },
      "similarity": 800.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "120",
        "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Classic Buffer Overflow",
        "match_reason": "phrase_in_term_compound_part_0"
      },
      "similarity": 700.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "20",
        "name": "Improper Input Validation",
        "source": "sparse"
      },
      "similarity": 413.2654468161664
    },
    {
      "metadata": {
        "doc_id": "121",
        "name": "Stack-based Buffer Overflow",
        "source": "sparse"
      },
      "similarity": 401.01811034288465
    },
    {
      "metadata": {
        "doc_id": "1284",
        "name": "Improper Validation of Specified Quantity in Input",
        "source": "sparse"
      },
      "similarity": 375.1956912961517
    },
    {
      "metadata": {
        "doc_id": "122",
        "name": "Heap-based Buffer Overflow",
        "source": "sparse"
      },
      "similarity": 374.8197482375153
    },
    {
      "metadata": {
        "doc_id": "125",
        "name": "Out-of-bounds Read",
        "source": "sparse"
      },
      "similarity": 373.67122720889745
    },
    {
      "metadata": {
        "doc_id": "78",
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "type": "Base",
        "original_content": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
        "keyphrase_source": "rootcause:insecure path parsing",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.5424693226859664
          }
        }
      },
      "similarity": 0.5424693226859664
    },
    {
      "doc_id": "128",
      "text": "CWE-128: Wrap-around Error",
      "score": 2.9120000000000004,
      "metadata": {
        "doc_id": "128",
        "name": "Wrap-around Error",
        "type": "base",
        "original_content": "CWE-128: Wrap-around Error",
        "relationships": [
          {
            "source_id": "128",
            "target_id": "190",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "128",
            "target_id": "119",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "128",
            "target_id": "682",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "682",
            "target_id": "128",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "119",
            "target_id": "128",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "119",
                  "128",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "119"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "119",
                  "128",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "119"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "128",
                  "119",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "119"
            },
            "peer_relationship": {
              "path": [
                [
                  "128",
                  "190",
                  "PEEROF"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "190"
            }
          }
        },
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.9120000000000004
          }
        }
      },
      "similarity": 2.9120000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-121",
      "CWE-131",
      "CWE-787",
      "CWE-190",
      "CWE-78",
      "CWE-20",
      "CWE-119",
      "CWE-120"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}