{
  "retriever": "dense",
  "query": "In the Linux kernel, the following vulnerability has been resolved Input mtk-pmic-keys - fix possible null pointer dereference In mtk_pmic_keys_probe, the regs parameter is only set if the button is parsed in the device tree. However, on hardware where the button is left floating, that node will most likely be removed not to enable that input. In that case the code will try to dereference a null pointer. Lets use the regs struct instead as it is defined for all supported platforms. Note that it is ok setting the key reg even if that latter is disabled as the interrupt wont be enabled anyway.",
  "keyphrases": {
    "weakness": [
      "null pointer dereference"
    ]
  },
  "timestamp": "2025-07-14 22:03:48",
  "cve_id": "CVE-2025-37972",
  "result_count": 20,
  "results": [
    {
      "cwe_id": "1262",
      "name": "Improper Access Control for Register Interface",
      "type": "Base",
      "score": 0.49104869577583243
    },
    {
      "cwe_id": "1233",
      "name": "Security-Sensitive Hardware Controls with Missing Lock Bit Protection",
      "type": "Base",
      "score": 0.487190220543395
    },
    {
      "cwe_id": "822",
      "name": "Untrusted Pointer Dereference",
      "type": "Base",
      "score": 0.48538392272321795
    },
    {
      "cwe_id": "1256",
      "name": "Improper Restriction of Software Interfaces to Hardware Features",
      "type": "Base",
      "score": 0.48326259100920155
    },
    {
      "cwe_id": "1285",
      "name": "Improper Validation of Specified Index, Position, or Offset in Input",
      "type": "Base",
      "score": 0.48212880709261996
    },
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "type": "Base",
      "score": 0.47036439810923497
    },
    {
      "cwe_id": "1191",
      "name": "On-Chip Debug and Test Interface With Improper Access Control",
      "type": "Base",
      "score": 0.46970095756902486
    },
    {
      "cwe_id": "1231",
      "name": "Improper Prevention of Lock Bit Modification",
      "type": "Base",
      "score": 0.4634360177132356
    },
    {
      "cwe_id": "909",
      "name": "Missing Initialization of Resource",
      "type": "Class",
      "score": 0.463253612144067
    },
    {
      "cwe_id": "823",
      "name": "Use of Out-of-range Pointer Offset",
      "type": "Base",
      "score": 0.4587748122939004
    },
    {
      "cwe_id": "1239",
      "name": "Improper Zeroization of Hardware Register",
      "type": "Variant",
      "score": 0.44335105967527183
    },
    {
      "cwe_id": "1234",
      "name": "Hardware Internal or Debug Modes Allow Override of Locks",
      "type": "Base",
      "score": 0.4358911513785451
    },
    {
      "cwe_id": "1332",
      "name": "Improper Handling of Faults that Lead to Instruction Skips",
      "type": "Base",
      "score": 0.43031786149863205
    },
    {
      "cwe_id": "1319",
      "name": "Improper Protection against Electromagnetic Fault Injection (EM-FI)",
      "type": "Base",
      "score": 0.4302948332672575
    },
    {
      "cwe_id": "1260",
      "name": "Improper Handling of Overlap Between Protected Memory Ranges",
      "type": "Base",
      "score": 0.4285623254726974
    },
    {
      "cwe_id": "1342",
      "name": "Information Exposure through Microarchitectural State after Transient Execution",
      "type": "Base",
      "score": 0.42825361765955666
    },
    {
      "cwe_id": "1271",
      "name": "Uninitialized Value on Reset for Registers Holding Security Settings",
      "type": "Base",
      "score": 0.4280642037270921
    },
    {
      "cwe_id": "413",
      "name": "Improper Resource Locking",
      "type": "Base",
      "score": 0.4251158504849205
    },
    {
      "cwe_id": "1313",
      "name": "Hardware Allows Activation of Test or Debug Logic at Runtime",
      "type": "Base",
      "score": 0.4245094511533414
    },
    {
      "cwe_id": "126",
      "name": "Buffer Over-read",
      "type": "Variant",
      "score": 0.4226927089926822
    }
  ]
}