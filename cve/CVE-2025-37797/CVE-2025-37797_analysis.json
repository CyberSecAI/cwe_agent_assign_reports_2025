{
  "cve_id": "CVE-2025-37797",
  "description": "In the Linux kernel, the following vulnerability has been resolved net_sched hfsc Fix a UAF vulnerability in class handling This patch fixes a ****Use-After-Free** vulnerability** in the HFSC qdisc class handling. The issue occurs due to a **time-of-check/time-of-use condition** in hfsc_change_class() when working with certain child qdiscs like netem or codel. The vulnerability works as follows 1. hfsc_change_class() checks if a class has packets (q.qlen != 0) 2. It then calls qdisc_peek_len(), which for certain qdiscs (e.g., codel, netem) might drop packets and empty the queue 3. The code continues assuming the queue is still non-empty, adding the class to vttree 4. This breaks HFSC scheduler assumptions that only non-empty classes are in vttree 5. Later, when the class is destroyed, this can lead to a **Use-After-Free** The fix adds a second queue length check after qdisc_peek_len() to verify the queue wasnt emptied.",
  "key_phrases": {
    "rootcause": [
      "time-of-check/time-of-use condition",
      "Use-After-Free vulnerability"
    ],
    "weakness": "Use-After-Free",
    "impact": "",
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": "net_sched hfsc"
  },
  "reference_content": null,
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID    | CWE Name                                                                                             | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :---------- | :----------------------------------------------------------------------------------------------------- | :--------- | :---------------------- | :-------------------------------- | :-------------------------------- |\n| **CWE-367** | **Time-of-check Time-of-use (TOCTOU) Race Condition**                                                 | 0.9        | Base                    | Primary                           | Allowed                           |\n| CWE-416     | Use After Free                                                                                       | 0.7        | Base                    | Secondary                         | Allowed                           |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary weakness is CWE-367, which describes a time-of-check time-of-use race condition. This condition leads to a state where the resource state changes between the check and its use, invalidating the check. This invalidation directly results in the **Use-After-Free** condition, represented by CWE-416. Therefore, CWE-367 can precede CWE-416. The analysis focuses on identifying the root cause (CWE-367) and a significant consequence (CWE-416).\n\n```mermaid\ngraph TD\n    cwe367[\"CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\"]\n    cwe416[\"CWE-416: Use After Free\"]\n    \n    cwe367 -- CANPRECEDE --> cwe416\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe367 primary\n    class cwe416 secondary\n```\n\n## Vulnerability Chain\n\n1.  **Initial Flaw:** **Time-of-check Time-of-use condition** (CWE-367) where the queue length is checked, but packets can be dropped before the queue is used.\n2.  **Resulting Weakness:** The code assumes the queue is still non-empty, adding the class to vttree, breaking HFSC scheduler assumptions.\n3.  **Final Impact:** **Use-After-Free** (CWE-416) occurs when the class is destroyed later.\n\n## Summary of Analysis\n\nThe analysis is based on the provided vulnerability description, which explicitly mentions a **time-of-check/time-of-use condition** leading to a **Use-After-Free**. The description states \"The issue occurs due to a **time-of-check/time-of-use condition** in hfsc_change_class() when working with certain child qdiscs like netem or codel.\" This is direct evidence supporting CWE-367 as the primary root cause. The subsequent **Use-After-Free** is a direct consequence of this race condition which corresponds to CWE-416.\n\nThe graph relationships confirm that CWE-367 can precede CWE-416. The retriever results also strongly suggest CWE-367 as a relevant CWE.\n\nThe selected CWEs are at the optimal level of specificity because they directly represent the root cause and the resulting weakness described in the vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*Not Used:* Although locking issues can sometimes lead to race conditions, the description doesn't mention any locking mechanisms, making CWE-667 less relevant.\n\n## CWE-703: Improper Check or Handling of Exceptional Conditions\n**Abstraction Level**: Pillar\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is extremely high-level, a Pillar.\n\n*Not Used:* This is too general and doesn't capture the specific nature of the vulnerability.\n\n## CWE-696: Incorrect Behavior Order\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product performs multiple related behaviors, but the behaviors are performed in the wrong order in ways which may produce resultant weaknesses.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*Not Used:* Although the order of operations is important in this vulnerability, it is specifically a TOCTOU issue rather than a general ordering problem.\n\n## CWE-824: Access of Uninitialized Pointer\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product accesses or uses a pointer that has not been initialized.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Not Used:* The vulnerability is not due to an uninitialized pointer but rather due to a pointer being used after the memory it points to has been freed.\n\n## CWE-754: Improper Check for Unusual or Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*Not Used:* While the check is improper, the core issue is the timing between the check and the use, making CWE-367 a more precise fit.\n\n## CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Used:* This CWE accurately describes the **time-of-check/time-of-use** condition in the vulnerability. The queue length is checked, but the queue can be emptied before it is used.\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*Not Used:* While this is a race condition, the specific nature of the race condition is a TOCTOU, making CWE-367 a better fit.\n\n## CWE-755: Improper Handling of Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product does not handle or incorrectly handles an exceptional condition.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n*Not Used:* This is too general.\n\n## CWE-665: Improper Initialization\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n*Not Used:* This vulnerability is not related to initialization.\n\n## CWE-404: Improper Resource Shutdown or Release\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product does not release or incorrectly releases a resource before it is made available",
  "analysis_with_relationships": "# Summary\n| CWE ID    | CWE Name                                                                                             | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :---------- | :----------------------------------------------------------------------------------------------------- | :--------- | :---------------------- | :-------------------------------- | :-------------------------------- |\n| **CWE-367** | **Time-of-check Time-of-use (TOCTOU) Race Condition**                                                 | 0.9        | Base                    | Primary                           | Allowed                           |\n| CWE-416     | Use After Free                                                                                       | 0.7        | Base                    | Secondary                         | Allowed                           |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary weakness is CWE-367, which describes a time-of-check time-of-use race condition. This condition leads to a state where the resource state changes between the check and its use, invalidating the check. This invalidation directly results in the **Use-After-Free** condition, represented by CWE-416. Therefore, CWE-367 can precede CWE-416. The analysis focuses on identifying the root cause (CWE-367) and a significant consequence (CWE-416).\n\n```mermaid\ngraph TD\n    cwe367[\"CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\"]\n    cwe416[\"CWE-416: Use After Free\"]\n    \n    cwe367 -- CANPRECEDE --> cwe416\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe367 primary\n    class cwe416 secondary\n```\n\n## Vulnerability Chain\n\n1.  **Initial Flaw:** **Time-of-check Time-of-use condition** (CWE-367) where the queue length is checked, but packets can be dropped before the queue is used.\n2.  **Resulting Weakness:** The code assumes the queue is still non-empty, adding the class to vttree, breaking HFSC scheduler assumptions.\n3.  **Final Impact:** **Use-After-Free** (CWE-416) occurs when the class is destroyed later.\n\n## Summary of Analysis\n\nThe analysis is based on the provided vulnerability description, which explicitly mentions a **time-of-check/time-of-use condition** leading to a **Use-After-Free**. The description states \"The issue occurs due to a **time-of-check/time-of-use condition** in hfsc_change_class() when working with certain child qdiscs like netem or codel.\" This is direct evidence supporting CWE-367 as the primary root cause. The subsequent **Use-After-Free** is a direct consequence of this race condition which corresponds to CWE-416.\n\nThe graph relationships confirm that CWE-367 can precede CWE-416. The retriever results also strongly suggest CWE-367 as a relevant CWE.\n\nThe selected CWEs are at the optimal level of specificity because they directly represent the root cause and the resulting weakness described in the vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*Not Used:* Although locking issues can sometimes lead to race conditions, the description doesn't mention any locking mechanisms, making CWE-667 less relevant.\n\n## CWE-703: Improper Check or Handling of Exceptional Conditions\n**Abstraction Level**: Pillar\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is extremely high-level, a Pillar.\n\n*Not Used:* This is too general and doesn't capture the specific nature of the vulnerability.\n\n## CWE-696: Incorrect Behavior Order\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product performs multiple related behaviors, but the behaviors are performed in the wrong order in ways which may produce resultant weaknesses.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*Not Used:* Although the order of operations is important in this vulnerability, it is specifically a TOCTOU issue rather than a general ordering problem.\n\n## CWE-824: Access of Uninitialized Pointer\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product accesses or uses a pointer that has not been initialized.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Not Used:* The vulnerability is not due to an uninitialized pointer but rather due to a pointer being used after the memory it points to has been freed.\n\n## CWE-754: Improper Check for Unusual or Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*Not Used:* While the check is improper, the core issue is the timing between the check and the use, making CWE-367 a more precise fit.\n\n## CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Used:* This CWE accurately describes the **time-of-check/time-of-use** condition in the vulnerability. The queue length is checked, but the queue can be emptied before it is used.\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*Not Used:* While this is a race condition, the specific nature of the race condition is a TOCTOU, making CWE-367 a better fit.\n\n## CWE-755: Improper Handling of Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product does not handle or incorrectly handles an exceptional condition.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n*Not Used:* This is too general.\n\n## CWE-665: Improper Initialization\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n*Not Used:* This vulnerability is not related to initialization.\n\n## CWE-404: Improper Resource Shutdown or Release\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product does not release or incorrectly releases a resource before it is made available\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-665:**\n- 665 (Improper Initialization) - ROOT\n\n\n**Chain starting from CWE-416:**\n- 416 (Use After Free) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "367",
        "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
        "source": "sparse",
        "original_content": "The product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.",
        "keyphrase_sources": [
          {
            "id": "rootcause:time-of-check/time-of-use condition",
            "keyphrase": "time-of-check/time-of-use condition",
            "type": "rootcause"
          },
          {
            "id": "rootcause:Use-After-Free vulnerability",
            "keyphrase": "Use-After-Free vulnerability",
            "type": "rootcause"
          },
          {
            "id": "weakness:Use-After-Free",
            "keyphrase": "Use-After-Free",
            "type": "weakness"
          },
          {
            "id": "product:Linux kernel",
            "keyphrase": "Linux kernel",
            "type": "product"
          },
          {
            "id": "component:net_sched hfsc",
            "keyphrase": "net_sched hfsc",
            "type": "component"
          }
        ]
      },
      "similarity": 853.1411595343188
    },
    {
      "metadata": {
        "doc_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "source": "sparse",
        "original_content": "The product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.",
        "keyphrase_sources": [
          {
            "id": "rootcause:time-of-check/time-of-use condition",
            "keyphrase": "time-of-check/time-of-use condition",
            "type": "rootcause"
          },
          {
            "id": "rootcause:Use-After-Free vulnerability",
            "keyphrase": "Use-After-Free vulnerability",
            "type": "rootcause"
          },
          {
            "id": "weakness:Use-After-Free",
            "keyphrase": "Use-After-Free",
            "type": "weakness"
          },
          {
            "id": "product:Linux kernel",
            "keyphrase": "Linux kernel",
            "type": "product"
          },
          {
            "id": "component:net_sched hfsc",
            "keyphrase": "net_sched hfsc",
            "type": "component"
          }
        ]
      },
      "similarity": 843.3757558361347
    },
    {
      "metadata": {
        "doc_id": "401",
        "name": "Missing Release of Memory after Effective Lifetime",
        "source": "sparse",
        "original_content": "The product does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory.",
        "keyphrase_sources": [
          {
            "id": "rootcause:time-of-check/time-of-use condition",
            "keyphrase": "time-of-check/time-of-use condition",
            "type": "rootcause"
          },
          {
            "id": "rootcause:Use-After-Free vulnerability",
            "keyphrase": "Use-After-Free vulnerability",
            "type": "rootcause"
          },
          {
            "id": "weakness:Use-After-Free",
            "keyphrase": "Use-After-Free",
            "type": "weakness"
          },
          {
            "id": "product:Linux kernel",
            "keyphrase": "Linux kernel",
            "type": "product"
          },
          {
            "id": "component:net_sched hfsc",
            "keyphrase": "net_sched hfsc",
            "type": "component"
          }
        ]
      },
      "similarity": 773.3907104297914
    },
    {
      "metadata": {
        "doc_id": "754",
        "name": "Improper Check for Unusual or Exceptional Conditions",
        "source": "sparse",
        "original_content": "The product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product.",
        "keyphrase_sources": [
          {
            "id": "rootcause:time-of-check/time-of-use condition",
            "keyphrase": "time-of-check/time-of-use condition",
            "type": "rootcause"
          },
          {
            "id": "rootcause:Use-After-Free vulnerability",
            "keyphrase": "Use-After-Free vulnerability",
            "type": "rootcause"
          },
          {
            "id": "weakness:Use-After-Free",
            "keyphrase": "Use-After-Free",
            "type": "weakness"
          },
          {
            "id": "component:net_sched hfsc",
            "keyphrase": "net_sched hfsc",
            "type": "component"
          }
        ]
      },
      "similarity": 769.3094115095959
    },
    {
      "metadata": {
        "doc_id": "1390",
        "name": "Weak Authentication",
        "source": "sparse",
        "original_content": "The product uses an authentication mechanism to restrict access to specific users or identities, but the mechanism does not sufficiently prove that the claimed identity is correct.",
        "keyphrase_sources": [
          {
            "id": "rootcause:time-of-check/time-of-use condition",
            "keyphrase": "time-of-check/time-of-use condition",
            "type": "rootcause"
          },
          {
            "id": "component:net_sched hfsc",
            "keyphrase": "net_sched hfsc",
            "type": "component"
          }
        ]
      },
      "similarity": 769.2386505351344
    },
    {
      "metadata": {
        "doc_id": "667",
        "name": "Improper Locking",
        "source": "sparse",
        "original_content": "The product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.",
        "keyphrase_sources": [
          {
            "id": "rootcause:Use-After-Free vulnerability",
            "keyphrase": "Use-After-Free vulnerability",
            "type": "rootcause"
          },
          {
            "id": "weakness:Use-After-Free",
            "keyphrase": "Use-After-Free",
            "type": "weakness"
          },
          {
            "id": "product:Linux kernel",
            "keyphrase": "Linux kernel",
            "type": "product"
          }
        ]
      },
      "similarity": 734.5197181611821
    },
    {
      "metadata": {
        "doc_id": "789",
        "name": "Memory Allocation with Excessive Size Value",
        "source": "sparse",
        "original_content": "The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated.",
        "keyphrase_sources": [
          {
            "id": "product:Linux kernel",
            "keyphrase": "Linux kernel",
            "type": "product"
          }
        ]
      },
      "similarity": 239.40596192119958
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-665",
      "CWE-416",
      "CWE-404",
      "CWE-667",
      "CWE-696",
      "CWE-362",
      "CWE-755",
      "CWE-824",
      "CWE-367",
      "CWE-703",
      "CWE-754"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {
    "367": [
      {
        "id": "rootcause:time-of-check/time-of-use condition",
        "keyphrase": "time-of-check/time-of-use condition",
        "type": "rootcause"
      },
      {
        "id": "rootcause:Use-After-Free vulnerability",
        "keyphrase": "Use-After-Free vulnerability",
        "type": "rootcause"
      },
      {
        "id": "weakness:Use-After-Free",
        "keyphrase": "Use-After-Free",
        "type": "weakness"
      },
      {
        "id": "product:Linux kernel",
        "keyphrase": "Linux kernel",
        "type": "product"
      },
      {
        "id": "component:net_sched hfsc",
        "keyphrase": "net_sched hfsc",
        "type": "component"
      }
    ],
    "362": [
      {
        "id": "rootcause:time-of-check/time-of-use condition",
        "keyphrase": "time-of-check/time-of-use condition",
        "type": "rootcause"
      },
      {
        "id": "rootcause:Use-After-Free vulnerability",
        "keyphrase": "Use-After-Free vulnerability",
        "type": "rootcause"
      },
      {
        "id": "weakness:Use-After-Free",
        "keyphrase": "Use-After-Free",
        "type": "weakness"
      },
      {
        "id": "product:Linux kernel",
        "keyphrase": "Linux kernel",
        "type": "product"
      },
      {
        "id": "component:net_sched hfsc",
        "keyphrase": "net_sched hfsc",
        "type": "component"
      }
    ],
    "401": [
      {
        "id": "rootcause:time-of-check/time-of-use condition",
        "keyphrase": "time-of-check/time-of-use condition",
        "type": "rootcause"
      },
      {
        "id": "rootcause:Use-After-Free vulnerability",
        "keyphrase": "Use-After-Free vulnerability",
        "type": "rootcause"
      },
      {
        "id": "weakness:Use-After-Free",
        "keyphrase": "Use-After-Free",
        "type": "weakness"
      },
      {
        "id": "product:Linux kernel",
        "keyphrase": "Linux kernel",
        "type": "product"
      },
      {
        "id": "component:net_sched hfsc",
        "keyphrase": "net_sched hfsc",
        "type": "component"
      }
    ],
    "754": [
      {
        "id": "rootcause:time-of-check/time-of-use condition",
        "keyphrase": "time-of-check/time-of-use condition",
        "type": "rootcause"
      },
      {
        "id": "rootcause:Use-After-Free vulnerability",
        "keyphrase": "Use-After-Free vulnerability",
        "type": "rootcause"
      },
      {
        "id": "weakness:Use-After-Free",
        "keyphrase": "Use-After-Free",
        "type": "weakness"
      },
      {
        "id": "component:net_sched hfsc",
        "keyphrase": "net_sched hfsc",
        "type": "component"
      }
    ],
    "1390": [
      {
        "id": "rootcause:time-of-check/time-of-use condition",
        "keyphrase": "time-of-check/time-of-use condition",
        "type": "rootcause"
      },
      {
        "id": "component:net_sched hfsc",
        "keyphrase": "net_sched hfsc",
        "type": "component"
      }
    ],
    "667": [
      {
        "id": "rootcause:Use-After-Free vulnerability",
        "keyphrase": "Use-After-Free vulnerability",
        "type": "rootcause"
      },
      {
        "id": "weakness:Use-After-Free",
        "keyphrase": "Use-After-Free",
        "type": "weakness"
      },
      {
        "id": "product:Linux kernel",
        "keyphrase": "Linux kernel",
        "type": "product"
      }
    ],
    "789": [
      {
        "id": "product:Linux kernel",
        "keyphrase": "Linux kernel",
        "type": "product"
      }
    ]
  }
}