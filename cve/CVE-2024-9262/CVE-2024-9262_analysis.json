{
  "cve_id": "CVE-2024-9262",
  "description": "The User Meta User Profile Builder and User management plugin plugin for WordPress is vulnerable to **Insecure Direct Object Reference** in all versions up to, and including, 3.1 via the getUser() due to **missing validation on a user controlled key**. This makes it possible for authenticated attackers, with Contributor-level access and above, to obtain user meta values from form fields. Please note that this requires a site administrator to create a form that displays potentially sensitive information like password hashes. This may also be exploited by unauthenticated users if the user-meta-public-profile shortcode is used insecurely.",
  "key_phrases": {
    "rootcause": [
      "Insecure Direct Object Reference",
      "missing validation on a user controlled key"
    ],
    "weakness": "insecure direct object reference",
    "impact": "obtain user meta values from form fields",
    "vector": "",
    "attacker": "unauthenticated users if the user-meta-public-profile shortcode is used insecurely",
    "product": "User Meta User Profile Builder and User management plugin for WordPress",
    "version": "up to and including 3.1",
    "component": "getUser()"
  },
  "reference_content": "Based on the provided information, here's an analysis of CVE-2024-9262:\n\n**Root Cause of Vulnerability:**\nThe vulnerability stems from a missing validation on a user-controlled key within the `getUser()` function of the `PublicProfile.php` file in the User Meta plugin. This allows an attacker to potentially retrieve user data by manipulating the `user_email`, `user_login`, or `user_id` parameters.\n\n**Weaknesses/Vulnerabilities Present:**\n- **Insecure Direct Object Reference (IDOR):** The plugin directly uses user-supplied input (`$_REQUEST['user_email']`, `$_REQUEST['user_login']`, `$_REQUEST['user_id']`) to retrieve user information without proper authorization checks or input sanitization.\n- **Authorization Bypass:** Authenticated users with Contributor-level access or higher can potentially obtain sensitive user meta data.\n- **Information Exposure:** Sensitive information, including password hashes (if displayed by a site administrator via form), can be exposed.\n\n**Impact of Exploitation:**\n- **Sensitive Information Disclosure:** Attackers can potentially access sensitive user data, including password hashes, if the site administrator created a form to display this information. This could lead to account compromise and further malicious activities.\n- **Unauthorized Access:** By manipulating the parameters, attackers can potentially access data of users they should not have access to.\n\n**Attack Vectors:**\n- **HTTP Request Parameter Manipulation:** Attackers can manipulate the `user_email`, `user_login`, or `user_id` parameters within HTTP requests to access arbitrary user profiles.\n- **Shortcode Exploitation:** Unauthenticated users can potentially exploit this vulnerability if the `user-meta-public-profile` shortcode is used insecurely.\n\n**Required Attacker Capabilities/Position:**\n- **Authenticated User:** Attackers need to be authenticated WordPress users with Contributor-level access or higher to exploit the vulnerability.\n- **Unauthenticated User (conditional):** Unauthenticated users can exploit the vulnerability if the `user-meta-public-profile` shortcode is used insecurely, which would require the website to implement this shortcode on a public page.\n\n**Additional Notes**\nThe Wordfence report notes that this vulnerability requires a site administrator to create a form that displays potentially sensitive information.\n\nThe vulnerability is located in the `PublicProfile.php` file, specifically within the `getUser()` function which is located within this file in lines 28-42.\n```php\n 28\tprivate function getUser()\n 29\t{\n 30\t\tif($this->call == 'email') {\n 31\t\t\t$user_email = !empty($_REQUEST['user_email']) ? esc_attr($_REQUEST['user_email']) : '';\n 32\t\t\treturn get_user_by('email', $user_email);\n 33\t\t}\n 34\t\telseif ($this->call == 'username') {\n 35\t\t\t$username = !empty($_REQUEST['user_login']) ? esc_attr($_REQUEST['user_login']) : '';\n 36\t\t\treturn get_user_by('login', $username);\n 37\t\t}\n 38\t\telse {\n 39\t\t\t$user_id = !empty($_REQUEST['user_id']) ? esc_attr($_REQUEST['user_id']) : '';\n 40\t\t\treturn get_user_by('id', $user_id);\n 41\t\t}\n 42\t}\n```\nThe plugin uses the values within the `$_REQUEST` array directly, after running them through `esc_attr()`, within calls to `get_user_by()`. The `esc_attr()` function escapes HTML attributes, it does not protect from insecure direct object references.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-639 | Authorization Bypass Through User-Controlled Key | 1.0 | Base | Primary | Allowed |\n| CWE-862 | Missing Authorization | 0.7 | Class | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-639, which is a Base level CWE, indicating a specific type of authorization bypass. CWE-862 is a Class-level CWE that represents a broader category of missing authorization, and is a parent of CWE-425 \"Direct Request ('Forced Browsing')\". The vulnerability involves **missing validation** which allows bypassing authorization. This is best captured by CWE-639.\n\n```mermaid\ngraph TD\n    cwe639[\"CWE-639: Authorization Bypass Through User-Controlled Key\"]\n    cwe862[\"CWE-862: Missing Authorization\"]\n    cwe425[\"CWE-425: Direct Request ('Forced Browsing')\"]\n\n    cwe425 -->|CHILDOF| cwe862\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe639 primary\n    class cwe862 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **missing validation on a user controlled key** (CWE-639), which leads to an **insecure direct object reference**. This then leads to the impact of being able to **obtain user meta values from form fields**.\n\n## Summary of Analysis\nThe primary weakness is the **missing validation on a user controlled key** which allows an attacker to directly access user data. The vulnerability description states that there is **missing validation on a user controlled key** in the `getUser()` function. This allows an authenticated attacker to obtain user meta values. The most relevant CWE is CWE-639, as it directly addresses authorization bypass through user-controlled keys. The description matches the CWE as the system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.\n\nCWE-862 was considered, but it is a broader category of missing authorization. Since the vulnerability specifies that the authorization bypass is due to a user-controlled key, CWE-639 is a more precise and appropriate mapping.\n\nRelevant Evidence:\n*   \"**missing validation on a user controlled key**\"\n*   \"**Insecure Direct Object Reference**\"\n*   \"obtain user meta values from form fields\"\n*   \"getUser() due to **missing validation on a user controlled key**\"\n*   \"This makes it possible for authenticated attackers... to obtain user meta values from form fields.\"\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-472: External Control of Assumed-Immutable Web Parameter\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-425: Direct Request ('Forced Browsing')\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-639: Authorization Bypass Through User-Controlled Key\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-1390: Weak Authentication\n**Abstraction Level**: Class\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product uses an authentication mechanism to restrict access to specific users or identities, but the mechanism does not sufficiently prove that the claimed identity is correct.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-352: Cross-Site Request Forgery (CSRF)\n**Abstraction Level**: Compound\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This is a well-known Composite of multiple weaknesses that must all occur simultaneously, although it is attack-oriented in nature.\n\n\n\n## CWE-807: Reliance on Untrusted Inputs in a Security Decision\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product uses a protection mechanism that relies on the existence or values of an input, but the input can be modified by an untrusted actor in a way that bypasses the protection mechanism.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-1391: Use of Weak Credentials\n**Abstraction Level**: Class\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product uses weak credentials (such as a default key or hard-coded password) that can be calculated, derived, reused, or guessed by an attacker.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-303: Incorrect Implementation of Authentication Algorithm\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe requirements for the product dictate the use of an established authentication algorithm, but the implementation of the algorithm is incorrect.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-693: Protection Mechanism Failure\n**Abstraction Level**: Pillar\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is extremely high-level, a Pillar.\n\n\n\n## CWE-451: User Interface (UI) Misrepresentation of Critical Information\n**Abstraction Level**: Class\n**Similarity Score**: 0.69\n**Source**: dense\n\n**Description**:\nThe user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-352: Cross-Site Request Forgery (CSRF)\n**Abstraction Level**: Compound\n**Similarity Score**: 3150.31\n**Source**: sparse\n\n**Description**:\nThe web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This is a well-known Composite of multiple weaknesses that must all occur simultaneously, although it is attack-oriented in nature.\n\n\n\n## CWE-639: Authorization Bypass Through User-Controlled Key\n**Abstraction Level**: Base\n**Similarity Score**: 3081.20\n**Source**: sparse\n\n**Description**:\nThe system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-306:",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-639 | Authorization Bypass Through User-Controlled Key | 1.0 | Base | Primary | Allowed |\n| CWE-862 | Missing Authorization | 0.7 | Class | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-639, which is a Base level CWE, indicating a specific type of authorization bypass. CWE-862 is a Class-level CWE that represents a broader category of missing authorization, and is a parent of CWE-425 \"Direct Request ('Forced Browsing')\". The vulnerability involves **missing validation** which allows bypassing authorization. This is best captured by CWE-639.\n\n```mermaid\ngraph TD\n    cwe639[\"CWE-639: Authorization Bypass Through User-Controlled Key\"]\n    cwe862[\"CWE-862: Missing Authorization\"]\n    cwe425[\"CWE-425: Direct Request ('Forced Browsing')\"]\n\n    cwe425 -->|CHILDOF| cwe862\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe639 primary\n    class cwe862 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **missing validation on a user controlled key** (CWE-639), which leads to an **insecure direct object reference**. This then leads to the impact of being able to **obtain user meta values from form fields**.\n\n## Summary of Analysis\nThe primary weakness is the **missing validation on a user controlled key** which allows an attacker to directly access user data. The vulnerability description states that there is **missing validation on a user controlled key** in the `getUser()` function. This allows an authenticated attacker to obtain user meta values. The most relevant CWE is CWE-639, as it directly addresses authorization bypass through user-controlled keys. The description matches the CWE as the system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.\n\nCWE-862 was considered, but it is a broader category of missing authorization. Since the vulnerability specifies that the authorization bypass is due to a user-controlled key, CWE-639 is a more precise and appropriate mapping.\n\nRelevant Evidence:\n*   \"**missing validation on a user controlled key**\"\n*   \"**Insecure Direct Object Reference**\"\n*   \"obtain user meta values from form fields\"\n*   \"getUser() due to **missing validation on a user controlled key**\"\n*   \"This makes it possible for authenticated attackers... to obtain user meta values from form fields.\"\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-472: External Control of Assumed-Immutable Web Parameter\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-425: Direct Request ('Forced Browsing')\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-639: Authorization Bypass Through User-Controlled Key\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-1390: Weak Authentication\n**Abstraction Level**: Class\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product uses an authentication mechanism to restrict access to specific users or identities, but the mechanism does not sufficiently prove that the claimed identity is correct.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-352: Cross-Site Request Forgery (CSRF)\n**Abstraction Level**: Compound\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This is a well-known Composite of multiple weaknesses that must all occur simultaneously, although it is attack-oriented in nature.\n\n\n\n## CWE-807: Reliance on Untrusted Inputs in a Security Decision\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product uses a protection mechanism that relies on the existence or values of an input, but the input can be modified by an untrusted actor in a way that bypasses the protection mechanism.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-1391: Use of Weak Credentials\n**Abstraction Level**: Class\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product uses weak credentials (such as a default key or hard-coded password) that can be calculated, derived, reused, or guessed by an attacker.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-303: Incorrect Implementation of Authentication Algorithm\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe requirements for the product dictate the use of an established authentication algorithm, but the implementation of the algorithm is incorrect.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-693: Protection Mechanism Failure\n**Abstraction Level**: Pillar\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is extremely high-level, a Pillar.\n\n\n\n## CWE-451: User Interface (UI) Misrepresentation of Critical Information\n**Abstraction Level**: Class\n**Similarity Score**: 0.69\n**Source**: dense\n\n**Description**:\nThe user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-352: Cross-Site Request Forgery (CSRF)\n**Abstraction Level**: Compound\n**Similarity Score**: 3150.31\n**Source**: sparse\n\n**Description**:\nThe web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This is a well-known Composite of multiple weaknesses that must all occur simultaneously, although it is attack-oriented in nature.\n\n\n\n## CWE-639: Authorization Bypass Through User-Controlled Key\n**Abstraction Level**: Base\n**Similarity Score**: 3081.20\n**Source**: sparse\n\n**Description**:\nThe system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-306:\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-1390:**\n- 1390 (Weak Authentication) - ROOT\n\n\n**Chain starting from CWE-862:**\n- 862 (Missing Authorization) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "639",
        "name": "Authorization Bypass Through User-Controlled Key",
        "source": "sparse",
        "original_content": "The system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.",
        "keyphrase_sources": [
          {
            "id": "rootcause:Insecure Direct Object Reference",
            "keyphrase": "Insecure Direct Object Reference",
            "type": "rootcause"
          },
          {
            "id": "rootcause:missing validation on a user controlled key",
            "keyphrase": "missing validation on a user controlled key",
            "type": "rootcause"
          },
          {
            "id": "weakness:insecure direct object reference",
            "keyphrase": "insecure direct object reference",
            "type": "weakness"
          },
          {
            "id": "impact:obtain user meta values from form fields",
            "keyphrase": "obtain user meta values from form fields",
            "type": "impact"
          },
          {
            "id": "attacker:unauthenticated users if the user-meta-public-profile shortcode is used insecurely",
            "keyphrase": "unauthenticated users if the user-meta-public-profile shortcode is used insecurely",
            "type": "attacker"
          },
          {
            "id": "product:User Meta User Profile Builder and User management plugin for WordPress",
            "keyphrase": "User Meta User Profile Builder and User management plugin for WordPress",
            "type": "product"
          },
          {
            "id": "version:up to and including 3.1",
            "keyphrase": "up to and including 3.1",
            "type": "version"
          },
          {
            "id": "component:getUser()",
            "keyphrase": "getUser()",
            "type": "component"
          }
        ]
      },
      "similarity": 716.5234064667326
    },
    {
      "metadata": {
        "doc_id": "862",
        "name": "Missing Authorization",
        "source": "sparse",
        "original_content": "The product does not perform an authorization check when an actor attempts to access a resource or perform an action.",
        "keyphrase_sources": [
          {
            "id": "rootcause:missing validation on a user controlled key",
            "keyphrase": "missing validation on a user controlled key",
            "type": "rootcause"
          },
          {
            "id": "product:User Meta User Profile Builder and User management plugin for WordPress",
            "keyphrase": "User Meta User Profile Builder and User management plugin for WordPress",
            "type": "product"
          },
          {
            "id": "version:up to and including 3.1",
            "keyphrase": "up to and including 3.1",
            "type": "version"
          },
          {
            "id": "component:getUser()",
            "keyphrase": "getUser()",
            "type": "component"
          }
        ]
      },
      "similarity": 613.505020880003
    },
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse",
        "original_content": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
        "keyphrase_sources": [
          {
            "id": "rootcause:Insecure Direct Object Reference",
            "keyphrase": "Insecure Direct Object Reference",
            "type": "rootcause"
          },
          {
            "id": "rootcause:missing validation on a user controlled key",
            "keyphrase": "missing validation on a user controlled key",
            "type": "rootcause"
          },
          {
            "id": "weakness:insecure direct object reference",
            "keyphrase": "insecure direct object reference",
            "type": "weakness"
          },
          {
            "id": "impact:obtain user meta values from form fields",
            "keyphrase": "obtain user meta values from form fields",
            "type": "impact"
          },
          {
            "id": "attacker:unauthenticated users if the user-meta-public-profile shortcode is used insecurely",
            "keyphrase": "unauthenticated users if the user-meta-public-profile shortcode is used insecurely",
            "type": "attacker"
          },
          {
            "id": "product:User Meta User Profile Builder and User management plugin for WordPress",
            "keyphrase": "User Meta User Profile Builder and User management plugin for WordPress",
            "type": "product"
          },
          {
            "id": "version:up to and including 3.1",
            "keyphrase": "up to and including 3.1",
            "type": "version"
          },
          {
            "id": "component:getUser()",
            "keyphrase": "getUser()",
            "type": "component"
          }
        ]
      },
      "similarity": 578.2003233248511
    },
    {
      "metadata": {
        "doc_id": "306",
        "name": "Missing Authentication for Critical Function",
        "source": "sparse",
        "original_content": "The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.",
        "keyphrase_sources": [
          {
            "id": "rootcause:Insecure Direct Object Reference",
            "keyphrase": "Insecure Direct Object Reference",
            "type": "rootcause"
          },
          {
            "id": "rootcause:missing validation on a user controlled key",
            "keyphrase": "missing validation on a user controlled key",
            "type": "rootcause"
          },
          {
            "id": "weakness:insecure direct object reference",
            "keyphrase": "insecure direct object reference",
            "type": "weakness"
          },
          {
            "id": "impact:obtain user meta values from form fields",
            "keyphrase": "obtain user meta values from form fields",
            "type": "impact"
          },
          {
            "id": "attacker:unauthenticated users if the user-meta-public-profile shortcode is used insecurely",
            "keyphrase": "unauthenticated users if the user-meta-public-profile shortcode is used insecurely",
            "type": "attacker"
          },
          {
            "id": "product:User Meta User Profile Builder and User management plugin for WordPress",
            "keyphrase": "User Meta User Profile Builder and User management plugin for WordPress",
            "type": "product"
          },
          {
            "id": "version:up to and including 3.1",
            "keyphrase": "up to and including 3.1",
            "type": "version"
          },
          {
            "id": "component:getUser()",
            "keyphrase": "getUser()",
            "type": "component"
          }
        ]
      },
      "similarity": 568.1600142001688
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse",
        "original_content": "The product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check.",
        "keyphrase_sources": [
          {
            "id": "rootcause:Insecure Direct Object Reference",
            "keyphrase": "Insecure Direct Object Reference",
            "type": "rootcause"
          },
          {
            "id": "rootcause:missing validation on a user controlled key",
            "keyphrase": "missing validation on a user controlled key",
            "type": "rootcause"
          },
          {
            "id": "weakness:insecure direct object reference",
            "keyphrase": "insecure direct object reference",
            "type": "weakness"
          },
          {
            "id": "impact:obtain user meta values from form fields",
            "keyphrase": "obtain user meta values from form fields",
            "type": "impact"
          },
          {
            "id": "attacker:unauthenticated users if the user-meta-public-profile shortcode is used insecurely",
            "keyphrase": "unauthenticated users if the user-meta-public-profile shortcode is used insecurely",
            "type": "attacker"
          },
          {
            "id": "product:User Meta User Profile Builder and User management plugin for WordPress",
            "keyphrase": "User Meta User Profile Builder and User management plugin for WordPress",
            "type": "product"
          },
          {
            "id": "version:up to and including 3.1",
            "keyphrase": "up to and including 3.1",
            "type": "version"
          },
          {
            "id": "component:getUser()",
            "keyphrase": "getUser()",
            "type": "component"
          }
        ]
      },
      "similarity": 566.02952553563
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse",
        "original_content": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
        "keyphrase_sources": [
          {
            "id": "rootcause:Insecure Direct Object Reference",
            "keyphrase": "Insecure Direct Object Reference",
            "type": "rootcause"
          },
          {
            "id": "weakness:insecure direct object reference",
            "keyphrase": "insecure direct object reference",
            "type": "weakness"
          },
          {
            "id": "attacker:unauthenticated users if the user-meta-public-profile shortcode is used insecurely",
            "keyphrase": "unauthenticated users if the user-meta-public-profile shortcode is used insecurely",
            "type": "attacker"
          }
        ]
      },
      "similarity": 545.8692628902405
    },
    {
      "metadata": {
        "doc_id": "472",
        "name": "External Control of Assumed-Immutable Web Parameter",
        "source": "sparse",
        "original_content": "The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.",
        "keyphrase_sources": [
          {
            "id": "impact:obtain user meta values from form fields",
            "keyphrase": "obtain user meta values from form fields",
            "type": "impact"
          }
        ]
      },
      "similarity": 197.43494534456903
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-1390",
      "CWE-862",
      "CWE-639",
      "CWE-306",
      "CWE-472",
      "CWE-352",
      "CWE-303",
      "CWE-451",
      "CWE-1391",
      "CWE-807",
      "CWE-693",
      "CWE-425"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {
    "639": [
      {
        "id": "rootcause:Insecure Direct Object Reference",
        "keyphrase": "Insecure Direct Object Reference",
        "type": "rootcause"
      },
      {
        "id": "rootcause:missing validation on a user controlled key",
        "keyphrase": "missing validation on a user controlled key",
        "type": "rootcause"
      },
      {
        "id": "weakness:insecure direct object reference",
        "keyphrase": "insecure direct object reference",
        "type": "weakness"
      },
      {
        "id": "impact:obtain user meta values from form fields",
        "keyphrase": "obtain user meta values from form fields",
        "type": "impact"
      },
      {
        "id": "attacker:unauthenticated users if the user-meta-public-profile shortcode is used insecurely",
        "keyphrase": "unauthenticated users if the user-meta-public-profile shortcode is used insecurely",
        "type": "attacker"
      },
      {
        "id": "product:User Meta User Profile Builder and User management plugin for WordPress",
        "keyphrase": "User Meta User Profile Builder and User management plugin for WordPress",
        "type": "product"
      },
      {
        "id": "version:up to and including 3.1",
        "keyphrase": "up to and including 3.1",
        "type": "version"
      },
      {
        "id": "component:getUser()",
        "keyphrase": "getUser()",
        "type": "component"
      }
    ],
    "352": [
      {
        "id": "rootcause:Insecure Direct Object Reference",
        "keyphrase": "Insecure Direct Object Reference",
        "type": "rootcause"
      },
      {
        "id": "rootcause:missing validation on a user controlled key",
        "keyphrase": "missing validation on a user controlled key",
        "type": "rootcause"
      },
      {
        "id": "weakness:insecure direct object reference",
        "keyphrase": "insecure direct object reference",
        "type": "weakness"
      },
      {
        "id": "impact:obtain user meta values from form fields",
        "keyphrase": "obtain user meta values from form fields",
        "type": "impact"
      },
      {
        "id": "attacker:unauthenticated users if the user-meta-public-profile shortcode is used insecurely",
        "keyphrase": "unauthenticated users if the user-meta-public-profile shortcode is used insecurely",
        "type": "attacker"
      },
      {
        "id": "product:User Meta User Profile Builder and User management plugin for WordPress",
        "keyphrase": "User Meta User Profile Builder and User management plugin for WordPress",
        "type": "product"
      },
      {
        "id": "version:up to and including 3.1",
        "keyphrase": "up to and including 3.1",
        "type": "version"
      },
      {
        "id": "component:getUser()",
        "keyphrase": "getUser()",
        "type": "component"
      }
    ],
    "306": [
      {
        "id": "rootcause:Insecure Direct Object Reference",
        "keyphrase": "Insecure Direct Object Reference",
        "type": "rootcause"
      },
      {
        "id": "rootcause:missing validation on a user controlled key",
        "keyphrase": "missing validation on a user controlled key",
        "type": "rootcause"
      },
      {
        "id": "weakness:insecure direct object reference",
        "keyphrase": "insecure direct object reference",
        "type": "weakness"
      },
      {
        "id": "impact:obtain user meta values from form fields",
        "keyphrase": "obtain user meta values from form fields",
        "type": "impact"
      },
      {
        "id": "attacker:unauthenticated users if the user-meta-public-profile shortcode is used insecurely",
        "keyphrase": "unauthenticated users if the user-meta-public-profile shortcode is used insecurely",
        "type": "attacker"
      },
      {
        "id": "product:User Meta User Profile Builder and User management plugin for WordPress",
        "keyphrase": "User Meta User Profile Builder and User management plugin for WordPress",
        "type": "product"
      },
      {
        "id": "version:up to and including 3.1",
        "keyphrase": "up to and including 3.1",
        "type": "version"
      },
      {
        "id": "component:getUser()",
        "keyphrase": "getUser()",
        "type": "component"
      }
    ],
    "863": [
      {
        "id": "rootcause:Insecure Direct Object Reference",
        "keyphrase": "Insecure Direct Object Reference",
        "type": "rootcause"
      },
      {
        "id": "rootcause:missing validation on a user controlled key",
        "keyphrase": "missing validation on a user controlled key",
        "type": "rootcause"
      },
      {
        "id": "weakness:insecure direct object reference",
        "keyphrase": "insecure direct object reference",
        "type": "weakness"
      },
      {
        "id": "impact:obtain user meta values from form fields",
        "keyphrase": "obtain user meta values from form fields",
        "type": "impact"
      },
      {
        "id": "attacker:unauthenticated users if the user-meta-public-profile shortcode is used insecurely",
        "keyphrase": "unauthenticated users if the user-meta-public-profile shortcode is used insecurely",
        "type": "attacker"
      },
      {
        "id": "product:User Meta User Profile Builder and User management plugin for WordPress",
        "keyphrase": "User Meta User Profile Builder and User management plugin for WordPress",
        "type": "product"
      },
      {
        "id": "version:up to and including 3.1",
        "keyphrase": "up to and including 3.1",
        "type": "version"
      },
      {
        "id": "component:getUser()",
        "keyphrase": "getUser()",
        "type": "component"
      }
    ],
    "79": [
      {
        "id": "rootcause:Insecure Direct Object Reference",
        "keyphrase": "Insecure Direct Object Reference",
        "type": "rootcause"
      },
      {
        "id": "weakness:insecure direct object reference",
        "keyphrase": "insecure direct object reference",
        "type": "weakness"
      },
      {
        "id": "attacker:unauthenticated users if the user-meta-public-profile shortcode is used insecurely",
        "keyphrase": "unauthenticated users if the user-meta-public-profile shortcode is used insecurely",
        "type": "attacker"
      }
    ],
    "862": [
      {
        "id": "rootcause:missing validation on a user controlled key",
        "keyphrase": "missing validation on a user controlled key",
        "type": "rootcause"
      },
      {
        "id": "product:User Meta User Profile Builder and User management plugin for WordPress",
        "keyphrase": "User Meta User Profile Builder and User management plugin for WordPress",
        "type": "product"
      },
      {
        "id": "version:up to and including 3.1",
        "keyphrase": "up to and including 3.1",
        "type": "version"
      },
      {
        "id": "component:getUser()",
        "keyphrase": "getUser()",
        "type": "component"
      }
    ],
    "472": [
      {
        "id": "impact:obtain user meta values from form fields",
        "keyphrase": "obtain user meta values from form fields",
        "type": "impact"
      }
    ]
  }
}