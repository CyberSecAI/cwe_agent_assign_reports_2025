{
  "cve_id": "CVE-2025-22014",
  "description": "In the Linux kernel, the following vulnerability has been resolved soc qcom pdr Fix the **potential deadlock** When some client process A call pdr_add_lookup() to add the look up for the service and does schedule locator work, later a process B got a new server packet indicating locator is up and call pdr_locator_new_server() which eventually sets pdr->locator_init_complete to true which process A sees and takes list lock and queries domain list but it will timeout due to deadlock as the response will queued to the same qmi->wq and it is ordered workqueue and process B is not able to complete new server request work due to deadlock on list lock. Fix it by removing the unnecessary list iteration as the list iteration is already being done inside locator work, so avoid it here and just call schedule_work() here. Process A Process B process_scheduled_works() pdr_add_lookup() qmi_data_ready_work() process_scheduled_works() pdr_locator_new_server() pdr->locator_init_complete=true pdr_locator_work() mutex_lock(&pdr->list_lock) pdr_locate_service() mutex_lock(&pdr->list_lock) pdr_get_domain_list() pr_err(PDR %s get domain list txn wait failed %d\\\\n, req->service_name, ret) Timeout error log due to deadlock PDR tms/servreg get domain list txn wait failed -110 PDR service lookup for msm/adsp/sensor_pdtms/servreg failed -110 Thanks to Bjorn and Johan for letting me know that this commit also fixes an audio regression when using the in-kernel pd-mapper as that makes it easier to hit this race. [1]",
  "key_phrases": {
    "component": "soc qcom pdr",
    "rootcause": "",
    "vector": "",
    "weakness": "potential deadlock",
    "product": "Linux kernel",
    "impact": "audio regression, deadlock",
    "attacker": "",
    "version": ""
  },
  "reference_content": "UNRELATED\n\nAll provided content describes Anubis, a system designed to mitigate website scraping by AI companies. It does not relate to any vulnerability described by a CVE. The content details a defense mechanism, not a weakness.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-833 | Deadlock | 1.0 | Base | Primary | Allowed |\n| CWE-667 | Improper Locking | 0.7 | Class | Secondary | Allowed-with-Review |\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.6 | Class | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is a deadlock (**CWE-833**). This can occur due to improper locking (**CWE-667**) and may involve a race condition (**CWE-362**). **CWE-667** and **CWE-362** are parent classes that describe the general condition that allows the base level weakness **CWE-833** to occur.\n\n```mermaid\ngraph TD\n    cwe833[\"CWE-833: Deadlock\"]\n    cwe667[\"CWE-667: Improper Locking\"]\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    \n    cwe833 -->|CHILDOF| cwe667\n    cwe833 -->|CHILDOF| cwe362\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe833 primary\n    class cwe667,cwe362 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with concurrent execution and shared resources, which leads to **improper locking**, and ultimately results in a **deadlock** that halts process execution.\n\n## Summary of Analysis\nThe analysis is based on the provided vulnerability description, which clearly states a **potential deadlock** within the Linux kernel. The description details a scenario where two processes contend for the same lock, leading to a standstill. The evidence for this is the phrase \"**potential deadlock**\" and the description of process A and B both attempting to acquire `pdr->list_lock`.\n\nThe graph relationships support the selection of **CWE-833** as the primary cause, with **CWE-667** and **CWE-362** contributing to the conditions necessary for the deadlock to occur. The selection of **CWE-833** is at the optimal level of specificity as it directly describes the **deadlock** condition.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-833: Deadlock\n**Abstraction Level**: Base\n**Similarity Score**: 0.78\n**Source**: dense\n\n**Description**:\nThe product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n**CWE-833: Deadlock** is the primary CWE because the vulnerability description explicitly mentions \"**potential deadlock**\" and describes the circumstances leading to it. This is a base-level CWE, which is preferred. The technical details describe two processes locking on the same resource, causing a deadlock. The impact is process termination and an audio regression. Confidence: 1.0\n\n**CWE-667: Improper Locking** is a secondary CWE because the deadlock is caused by improper locking mechanisms. Confidence: 0.7. This is a class-level CWE so it is less specific than CWE-833.\n\n**CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')** is a secondary CWE because concurrent execution is a prerequisite to the improper locking that leads to deadlock. Confidence: 0.6. This is a class-level CWE so it is less specific than CWE-833.\n\nCWEs considered but not used:\n\n*   CWE-755, CWE-754: These relate to error handling, but the core issue is a deadlock, not a failure to handle errors.\n*   CWE-346: Origin validation is not relevant to this vulnerability.\n*   CWE-617: Reachable assertion is not relevant as the deadlock is the issue, not a triggered assertion.\n*   CWE-131: Incorrect buffer size calculation is not relevant.\n*   CWE-367: TOCTOU is not relevant.\n*   CWE-184: Incomplete list of disallowed inputs is not relevant.\n*   CWE-1285: Improper validation of index is not relevant.\n*   CWE-390: Detection of error condition without action is not the primary issue.\n*   CWE-1325: Improperly controlled memory allocation is not relevant.\n*   CWE-770: Allocation of Resources Without Limits or Throttling is not relevant.\n*   CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop') is not relevant.\n*   CWE-476: NULL Pointer Dereference is not relevant.\n*   CWE-226: Sensitive Information in Resource Not Removed Before Reuse is not relevant.\n*   CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer is not relevant.\n*   CWE-434: Unrestricted Upload of File with Dangerous Type is not relevant.\n*   CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') is not relevant.\n*   CWE-1322: Use of Blocking Code in Single-threaded, Non-blocking Context is not relevant.\n*   CWE-201: Insertion of Sensitive Information Into Sent Data is not relevant.\n*   CWE-863: Incorrect Authorization is not relevant.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-833 | Deadlock | 1.0 | Base | Primary | Allowed |\n| CWE-667 | Improper Locking | 0.7 | Class | Secondary | Allowed-with-Review |\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.6 | Class | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is a deadlock (**CWE-833**). This can occur due to improper locking (**CWE-667**) and may involve a race condition (**CWE-362**). **CWE-667** and **CWE-362** are parent classes that describe the general condition that allows the base level weakness **CWE-833** to occur.\n\n```mermaid\ngraph TD\n    cwe833[\"CWE-833: Deadlock\"]\n    cwe667[\"CWE-667: Improper Locking\"]\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    \n    cwe833 -->|CHILDOF| cwe667\n    cwe833 -->|CHILDOF| cwe362\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe833 primary\n    class cwe667,cwe362 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with concurrent execution and shared resources, which leads to **improper locking**, and ultimately results in a **deadlock** that halts process execution.\n\n## Summary of Analysis\nThe analysis is based on the provided vulnerability description, which clearly states a **potential deadlock** within the Linux kernel. The description details a scenario where two processes contend for the same lock, leading to a standstill. The evidence for this is the phrase \"**potential deadlock**\" and the description of process A and B both attempting to acquire `pdr->list_lock`.\n\nThe graph relationships support the selection of **CWE-833** as the primary cause, with **CWE-667** and **CWE-362** contributing to the conditions necessary for the deadlock to occur. The selection of **CWE-833** is at the optimal level of specificity as it directly describes the **deadlock** condition.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-833: Deadlock\n**Abstraction Level**: Base\n**Similarity Score**: 0.78\n**Source**: dense\n\n**Description**:\nThe product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n**CWE-833: Deadlock** is the primary CWE because the vulnerability description explicitly mentions \"**potential deadlock**\" and describes the circumstances leading to it. This is a base-level CWE, which is preferred. The technical details describe two processes locking on the same resource, causing a deadlock. The impact is process termination and an audio regression. Confidence: 1.0\n\n**CWE-667: Improper Locking** is a secondary CWE because the deadlock is caused by improper locking mechanisms. Confidence: 0.7. This is a class-level CWE so it is less specific than CWE-833.\n\n**CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')** is a secondary CWE because concurrent execution is a prerequisite to the improper locking that leads to deadlock. Confidence: 0.6. This is a class-level CWE so it is less specific than CWE-833.\n\nCWEs considered but not used:\n\n*   CWE-755, CWE-754: These relate to error handling, but the core issue is a deadlock, not a failure to handle errors.\n*   CWE-346: Origin validation is not relevant to this vulnerability.\n*   CWE-617: Reachable assertion is not relevant as the deadlock is the issue, not a triggered assertion.\n*   CWE-131: Incorrect buffer size calculation is not relevant.\n*   CWE-367: TOCTOU is not relevant.\n*   CWE-184: Incomplete list of disallowed inputs is not relevant.\n*   CWE-1285: Improper validation of index is not relevant.\n*   CWE-390: Detection of error condition without action is not the primary issue.\n*   CWE-1325: Improperly controlled memory allocation is not relevant.\n*   CWE-770: Allocation of Resources Without Limits or Throttling is not relevant.\n*   CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop') is not relevant.\n*   CWE-476: NULL Pointer Dereference is not relevant.\n*   CWE-226: Sensitive Information in Resource Not Removed Before Reuse is not relevant.\n*   CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer is not relevant.\n*   CWE-434: Unrestricted Upload of File with Dangerous Type is not relevant.\n*   CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') is not relevant.\n*   CWE-1322: Use of Blocking Code in Single-threaded, Non-blocking Context is not relevant.\n*   CWE-201: Insertion of Sensitive Information Into Sent Data is not relevant.\n*   CWE-863: Incorrect Authorization is not relevant.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-390:**\n- 390 (Detection of Error Condition Without Action) - ROOT\n\n\n**Chain starting from CWE-476:**\n- 476 (NULL Pointer Dereference) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "667",
        "name": "Improper Locking",
        "source": "sparse"
      },
      "similarity": 967.9270456542409
    },
    {
      "metadata": {
        "doc_id": "833",
        "name": "Deadlock",
        "source": "sparse"
      },
      "similarity": 903.1317270010637
    },
    {
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "source": "sparse"
      },
      "similarity": 863.3430499604938
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 858.4542813724432
    },
    {
      "metadata": {
        "doc_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "source": "sparse"
      },
      "similarity": 853.2072569590152
    },
    {
      "metadata": {
        "doc_id": "770",
        "name": "Allocation of Resources Without Limits or Throttling",
        "source": "sparse"
      },
      "similarity": 847.8484016400296
    },
    {
      "metadata": {
        "doc_id": "184",
        "name": "Incomplete List of Disallowed Inputs",
        "source": "sparse"
      },
      "similarity": 817.3321753260291
    },
    {
      "metadata": {
        "doc_id": "835",
        "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
        "source": "sparse"
      },
      "similarity": 810.4040129291316
    },
    {
      "metadata": {
        "doc_id": "1285",
        "name": "Improper Validation of Specified Index, Position, or Offset in Input",
        "type": "Base",
        "original_content": "The product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties.",
        "keyphrase_source": "weakness:potential deadlock",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5380284250662782,
            "graph": 1.5038116049943757
          }
        }
      },
      "similarity": 0.5380284250662782
    },
    {
      "doc_id": "390",
      "text": "CWE-390: Detection of Error Condition Without Action",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "390",
        "name": "Detection of Error Condition Without Action",
        "type": "base",
        "original_content": "CWE-390: Detection of Error Condition Without Action",
        "relationships": [
          {
            "source_id": "390",
            "target_id": "401",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "390",
            "target_id": "755",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "81",
            "target_id": "390",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "755",
            "target_id": "390",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "600",
            "target_id": "390",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "401",
            "target_id": "390",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "401",
                  "390",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "401"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "401",
                  "390",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "401"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "390",
                  "401",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "401"
            }
          }
        },
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-390",
      "CWE-476",
      "CWE-226",
      "CWE-770",
      "CWE-131",
      "CWE-79",
      "CWE-1322",
      "CWE-201",
      "CWE-184",
      "CWE-346",
      "CWE-833",
      "CWE-835",
      "CWE-1325",
      "CWE-434",
      "CWE-863",
      "CWE-667",
      "CWE-1285",
      "CWE-755",
      "CWE-617",
      "CWE-212",
      "CWE-362",
      "CWE-367",
      "CWE-754"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}