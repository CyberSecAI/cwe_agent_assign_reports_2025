{
  "cve_id": "CVE-2024-52308",
  "description": "The GitHub CLI version 2.6.1 and earlier are vulnerable to remote code execution through a malicious codespace SSH server when using `gh codespace ssh` or `gh codespace logs` commands. This has been patched in the cli v2.62.0. Developers connect to remote codespaces through an SSH server running within the devcontainer, which is generally provided through the [default devcontainer image]( https//docs.github.com/en/codespaces/setting-up-your-project-for-codespaces/adding-a-dev-container-... https//docs.github.com/en/codespaces/setting-up-your-project-for-codespaces/adding-a-dev-container-configuration/introduction-to-dev-containers#using-the-default-dev-container-configuration) . GitHub CLI [retrieves SSH connection details]( https//github.com/cli/cli/blob/30066b0042d0c5928d959e288144300cb28196c9/internal/codespaces/rpc/inv... https//github.com/cli/cli/blob/30066b0042d0c5928d959e288144300cb28196c9/internal/codespaces/rpc/invoker.go#L230-L244 ), such as remote username, which is used in [executing `ssh` commands]( https//github.com/cli/cli/blob/e356c69a6f0125cfaac782c35acf77314f18908d/pkg/cmd/codespace/ssh.go#L2... https//github.com/cli/cli/blob/e356c69a6f0125cfaac782c35acf77314f18908d/pkg/cmd/codespace/ssh.go#L263 ) for `gh codespace ssh` or `gh codespace logs` commands. This exploit occurs when a malicious third-party devcontainer contains a modified SSH server that injects `ssh` arguments within the SSH connection details. `gh codespace ssh` and `gh codespace logs` commands could execute arbitrary code on the users workstation if the remote username contains something like `-oProxyCommand=echo hacked #`. The `-oProxyCommand` flag causes `ssh` to execute the provided command while `#` shell comment causes any other `ssh` arguments to be ignored. In `2.62.0`, the remote username information is being validated before being used.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "improper input validation",
    "impact": [
      "execute arbitrary code",
      "remote code execution"
    ],
    "vector": "malicious third-party devcontainer",
    "attacker": "",
    "product": "GitHub CLI",
    "version": "2.6.1 and earlier",
    "component": "gh codespace ssh and gh codespace logs commands"
  },
  "reference_content": "Based on the provided content, here's a breakdown of the vulnerability:\n\n**Root Cause:**\n\nThe vulnerability lies in how GitHub CLI handles SSH connection details retrieved from a Codespace. Specifically, the CLI does not properly sanitize the remote username before using it in an `ssh` command. This allows an attacker to inject malicious arguments into the `ssh` command via a crafted remote username.\n\n**Weaknesses/Vulnerabilities:**\n\n*   **Insufficient Input Sanitization:** The primary weakness is the lack of sanitization or validation of the remote username obtained from the Codespace.\n*   **Command Injection:** The injected `ssh` arguments within the username can lead to command execution.\n\n**Impact of Exploitation:**\n\n*   **Arbitrary Code Execution:** An attacker can execute arbitrary commands on the user's workstation, potentially gaining full control over the user's system.\n*   **Data Compromise:** Sensitive data stored on the compromised workstation could be accessed or exfiltrated.\n*   **System Compromise:**  The compromised system could be used as a stepping stone for further attacks.\n\n**Attack Vectors:**\n\n*   **Malicious Devcontainer:** The attack requires a malicious devcontainer image that has a modified SSH server. This server injects the malicious `ssh` arguments into the remote username it provides to the GitHub CLI.\n*   **`gh codespace ssh` or `gh codespace logs` Commands:** The attack is triggered when a user connects to the malicious Codespace using `gh codespace ssh` or `gh codespace logs`.\n\n**Required Attacker Capabilities/Position:**\n\n*   **Ability to create malicious devcontainer:** The attacker needs the ability to create or modify a devcontainer image to include a malicious SSH server.\n*   **Victim interaction:** The victim needs to use the GitHub CLI to connect to the malicious Codespace.\n\n**Additional Details:**\n\n*   The vulnerability is located within the `gh` CLI tool, specifically in the way it retrieves and uses SSH connection details.\n*   The exploit leverages the `-oProxyCommand` option in the `ssh` command to execute arbitrary commands.\n*   The issue is resolved in `gh` version 2.62.0, which now validates the remote username.\n\nThis is more detailed than the placeholder description.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-88 | Improper Neutralization of Argument Delimiters in a Command ('Argument Injection') | 0.9 | Base | Allowed | Primary CWE: The root cause is the **improper neutralization of argument delimiters** in the command. |\n| CWE-78 | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | 0.8 | Base | Allowed | Secondary: This is a specific type of command injection. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-88 (Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')). CWE-88 is a child of CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')). CWE-78 (Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')) is also a child of CWE-74. The vulnerability is specifically related to command injection in an OS command, making CWE-78 a relevant secondary consideration, however the **improper neutralization of argument delimiters** is the root cause. Choosing CWE-88 offers a more precise classification of the root cause. The relationship shows the vulnerability arising from **improper neutralization**, leading to command injection.\n\n```mermaid\ngraph TD\n    cwe88[\"CWE-88: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')\"]\n    cwe78[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n    \n    cwe88 -->|CHILDOF| cwe74\n    cwe78 -->|CHILDOF| cwe74\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe88 primary\n    class cwe78 secondary\n    class cwe74 tertiary\n```\n\n## Vulnerability Chain\n1.  **Root Cause:** **Improper input validation** of the remote username.\n2.  **Weakness:** **Improper Neutralization of Argument Delimiters** (CWE-88)\n3.  **Impact:** Arbitrary code execution on the user's workstation.\n\n## Summary of Analysis\nThe initial analysis focused on identifying the root cause of the vulnerability. The vulnerability description and CVE Reference Links Content Summary clearly point to **improper input validation** as the core issue. The `gh` CLI tool **fails to properly sanitize the remote username**, allowing an attacker to inject malicious arguments into the `ssh` command.\n\nThe retriever results also listed CWE-78 (Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')) as a possible candidate. However, CWE-88 (Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')) is a more precise fit because the vulnerability specifically involves injecting arguments into a command, and is the root cause. The vulnerability description states, \"This exploit occurs when a malicious third-party devcontainer contains a modified SSH server that injects `ssh` arguments within the SSH connection details.\"\n\nI am confident in my assessment because the evidence strongly supports the conclusion that the root cause is the **improper handling of argument delimiters**.\n\nRelevant CWE Information:\n- Vulnerability Description Key Phrases: \"**weakness:** **improper input validation**\"\n- CVE Reference Links Content Summary: \"**Insufficient Input Sanitization:** The primary weakness is the lack of sanitization or validation of the remote username obtained from the Codespace.\"\n- CVE Reference Links Content Summary: \"The vulnerability lies in how GitHub CLI handles SSH connection details retrieved from a Codespace. Specifically, the CLI does not properly sanitize the remote username before using it in an `ssh` command. This allows an attacker to inject malicious arguments into the `ssh` command via a crafted remote username.\"\n\nOther CWEs Considered:\n- CWE-78: While command injection is the impact, the root cause is the improper handling of arguments.\n- CWE-74: This is a high-level class, and more specific CWEs are available.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-88 | Improper Neutralization of Argument Delimiters in a Command ('Argument Injection') | 0.9 | Base | Allowed | Primary CWE: The root cause is the **improper neutralization of argument delimiters** in the command. |\n| CWE-78 | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | 0.8 | Base | Allowed | Secondary: This is a specific type of command injection. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-88 (Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')). CWE-88 is a child of CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')). CWE-78 (Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')) is also a child of CWE-74. The vulnerability is specifically related to command injection in an OS command, making CWE-78 a relevant secondary consideration, however the **improper neutralization of argument delimiters** is the root cause. Choosing CWE-88 offers a more precise classification of the root cause. The relationship shows the vulnerability arising from **improper neutralization**, leading to command injection.\n\n```mermaid\ngraph TD\n    cwe88[\"CWE-88: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')\"]\n    cwe78[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n    \n    cwe88 -->|CHILDOF| cwe74\n    cwe78 -->|CHILDOF| cwe74\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe88 primary\n    class cwe78 secondary\n    class cwe74 tertiary\n```\n\n## Vulnerability Chain\n1.  **Root Cause:** **Improper input validation** of the remote username.\n2.  **Weakness:** **Improper Neutralization of Argument Delimiters** (CWE-88)\n3.  **Impact:** Arbitrary code execution on the user's workstation.\n\n## Summary of Analysis\nThe initial analysis focused on identifying the root cause of the vulnerability. The vulnerability description and CVE Reference Links Content Summary clearly point to **improper input validation** as the core issue. The `gh` CLI tool **fails to properly sanitize the remote username**, allowing an attacker to inject malicious arguments into the `ssh` command.\n\nThe retriever results also listed CWE-78 (Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')) as a possible candidate. However, CWE-88 (Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')) is a more precise fit because the vulnerability specifically involves injecting arguments into a command, and is the root cause. The vulnerability description states, \"This exploit occurs when a malicious third-party devcontainer contains a modified SSH server that injects `ssh` arguments within the SSH connection details.\"\n\nI am confident in my assessment because the evidence strongly supports the conclusion that the root cause is the **improper handling of argument delimiters**.\n\nRelevant CWE Information:\n- Vulnerability Description Key Phrases: \"**weakness:** **improper input validation**\"\n- CVE Reference Links Content Summary: \"**Insufficient Input Sanitization:** The primary weakness is the lack of sanitization or validation of the remote username obtained from the Codespace.\"\n- CVE Reference Links Content Summary: \"The vulnerability lies in how GitHub CLI handles SSH connection details retrieved from a Codespace. Specifically, the CLI does not properly sanitize the remote username before using it in an `ssh` command. This allows an attacker to inject malicious arguments into the `ssh` command via a crafted remote username.\"\n\nOther CWEs Considered:\n- CWE-78: While command injection is the impact, the root cause is the improper handling of arguments.\n- CWE-74: This is a high-level class, and more specific CWEs are available.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-74:**\n- 74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')) - ROOT\n\n\n**Chain starting from CWE-78:**\n- 78 (Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "668",
        "name": "Exposure of Resource to Wrong Sphere",
        "source": "sparse"
      },
      "similarity": 1053.7182400654403
    },
    {
      "metadata": {
        "doc_id": "214",
        "name": "Invocation of Process Using Visible Sensitive Information",
        "source": "sparse"
      },
      "similarity": 979.4921231573841
    },
    {
      "metadata": {
        "doc_id": "321",
        "name": "Use of Hard-coded Cryptographic Key",
        "source": "sparse"
      },
      "similarity": 978.210358276035
    },
    {
      "metadata": {
        "doc_id": "78",
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "source": "sparse"
      },
      "similarity": 977.8539270586575
    },
    {
      "metadata": {
        "doc_id": "88",
        "name": "Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
        "source": "sparse"
      },
      "similarity": 975.9470555987218
    },
    {
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "source": "sparse"
      },
      "similarity": 963.261827451851
    },
    {
      "metadata": {
        "doc_id": "335",
        "name": "Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG)",
        "source": "sparse"
      },
      "similarity": 956.9480862104167
    },
    {
      "metadata": {
        "doc_id": "918",
        "name": "Server-Side Request Forgery (SSRF)",
        "source": "sparse"
      },
      "similarity": 946.2962055424753
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "type": "Class",
        "original_content": "The product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check.",
        "keyphrase_source": "weakness:improper input validation",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
          "comments": "Examine children of this entry to see if there is a better fit",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.6012064371762554
          }
        }
      },
      "similarity": 0.6012064371762554
    },
    {
      "doc_id": "942",
      "text": "CWE-942: Permissive Cross-domain Policy with Untrusted Domains",
      "score": 2.6784000000000003,
      "metadata": {
        "doc_id": "942",
        "name": "Permissive Cross-domain Policy with Untrusted Domains",
        "type": "variant",
        "original_content": "CWE-942: Permissive Cross-domain Policy with Untrusted Domains",
        "relationships": [
          {
            "source_id": "942",
            "target_id": "668",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "942",
            "target_id": "183",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "942",
            "target_id": "923",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "942",
            "target_id": "863",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "923",
            "target_id": "942",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "863",
            "target_id": "942",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "668",
            "target_id": "942",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "183",
            "target_id": "942",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "abstraction_path": 0.76,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.2,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "668",
                  "942",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "668"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "863",
                  "942",
                  "PARENTOF"
                ]
              ],
              "score": 0.76,
              "type": "abstraction_path_down",
              "source": "863"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "668",
                  "942",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "668"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "942",
                  "668",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "668"
            }
          }
        },
        "abstraction_level": "variant",
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.6784000000000003
          }
        }
      },
      "similarity": 2.6784000000000003
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-74",
      "CWE-78",
      "CWE-88"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}