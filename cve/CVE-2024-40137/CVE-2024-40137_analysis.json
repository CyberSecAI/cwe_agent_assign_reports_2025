{
  "cve_id": "CVE-2024-40137",
  "description": "Dolibarr ERP CRM before 19.0.2-php8.2 was discovered to contain a remote code execution (RCE) vulnerability via the Computed field parameter under the Users Module Setup function.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "",
    "impact": "remote code execution",
    "vector": "",
    "attacker": "",
    "product": "Dolibarr ERP CRM",
    "version": "before 19.0.2-php8.2",
    "component": "Computed field parameter under the Users Module Setup function"
  },
  "reference_content": "Based on the provided information, here's an analysis of CVE-2024-40137:\n\n**Root cause of vulnerability:**\n- The \"Computed field\" text box within the \"Users Module Setup\" functionality of Dolibarr does not properly sanitize user input.\n\n**Weaknesses/vulnerabilities present:**\n- Improper input sanitization leading to command injection.\n\n**Impact of exploitation:**\n- Remote Code Execution (RCE), allowing an attacker to execute arbitrary commands on the server.\n\n**Attack vectors:**\n- The vulnerability can be exploited through the \"Computed field\" text box in the Dolibarr \"Users Module Setup\".\n\n**Required attacker capabilities/position:**\n- The attacker needs to be an authenticated user of Dolibarr.\n\n**Additional Details:**\n- The vulnerability affects Dolibarr versions 18.0.5-php8.1 through 19.0.2-php8.2.\n- The vulnerability is fixed in version 19.0.2-php8.2.\n- The provided content contains a screenshot demonstrating the vulnerable field.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-95 | Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') | 0.9 | Variant | Allowed | Primary CWE. The **improper neutralization** allows the execution of arbitrary code. |\n| CWE-77 | Improper Neutralization of Special Elements used in a Command ('Command Injection') | 0.7 | Class | Allowed-with-Review | Secondary candidate. The **improper neutralization** of special elements leads to command injection. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary CWE is CWE-95, which is a variant of CWE-94 (Improper Control of Generation of Code), and CWE-77 is a class. CWE-77 is a parent of more specific command injection CWEs such as CWE-78 (Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')). CWE-95 is more specific than CWE-77 and accurately reflects the **eval injection** vulnerability.\n\n```mermaid\ngraph TD\n    cwe95[\"CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\"]\n    cwe94[\"CWE-94: Improper Control of Generation of Code ('Code Injection')\"]\n    cwe77[\"CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')\"]\n    cwe78[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"]\n\n    cwe95 -->|CHILDOF| cwe94\n    cwe78 -->|CHILDOF| cwe77\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe95 primary\n    class cwe77 secondary\n    class cwe94,cwe78 tertiary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **improper input sanitization** in the \"Computed field\" text box, leading to **command injection** and ultimately resulting in **remote code execution (RCE)**.\n\n## Summary of Analysis\nThe primary CWE is CWE-95 because the vulnerability involves **improper neutralization** in dynamically evaluated code. The supporting evidence includes the vulnerability description, which states that there is a **remote code execution vulnerability** via the Computed field parameter, and the CVE reference summary, which states that the root cause is **improper input sanitization** leading to **command injection**. The relationship graph shows that CWE-95 is a variant of CWE-94, which is more specific than other command injection CWEs like CWE-77 and CWE-78.\n\nRelevant CWE Information:\n- \"The 'Computed field' text box within the 'Users Module Setup' functionality of Dolibarr does not properly sanitize user input.\"\n- \"Improper input sanitization leading to command injection.\"\n- \"Remote Code Execution (RCE), allowing an attacker to execute arbitrary commands on the server.\"\n- \"The vulnerability can be exploited through the 'Computed field' text box in the Dolibarr 'Users Module Setup'.\"\n\nCWE-77 was considered because the CVE summary mentions **command injection**. However, since the vulnerability involves dynamic evaluation of code, CWE-95 is a more precise classification. Other CWEs like CWE-78 (OS Command Injection) and CWE-89 (SQL Injection) were considered but deemed less relevant as the vulnerability isn't specifically tied to OS commands or SQL queries. CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')) is too generic and therefore not appropriate.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-95 | Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') | 0.9 | Variant | Allowed | Primary CWE. The **improper neutralization** allows the execution of arbitrary code. |\n| CWE-77 | Improper Neutralization of Special Elements used in a Command ('Command Injection') | 0.7 | Class | Allowed-with-Review | Secondary candidate. The **improper neutralization** of special elements leads to command injection. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary CWE is CWE-95, which is a variant of CWE-94 (Improper Control of Generation of Code), and CWE-77 is a class. CWE-77 is a parent of more specific command injection CWEs such as CWE-78 (Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')). CWE-95 is more specific than CWE-77 and accurately reflects the **eval injection** vulnerability.\n\n```mermaid\ngraph TD\n    cwe95[\"CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\"]\n    cwe94[\"CWE-94: Improper Control of Generation of Code ('Code Injection')\"]\n    cwe77[\"CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')\"]\n    cwe78[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"]\n\n    cwe95 -->|CHILDOF| cwe94\n    cwe78 -->|CHILDOF| cwe77\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe95 primary\n    class cwe77 secondary\n    class cwe94,cwe78 tertiary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **improper input sanitization** in the \"Computed field\" text box, leading to **command injection** and ultimately resulting in **remote code execution (RCE)**.\n\n## Summary of Analysis\nThe primary CWE is CWE-95 because the vulnerability involves **improper neutralization** in dynamically evaluated code. The supporting evidence includes the vulnerability description, which states that there is a **remote code execution vulnerability** via the Computed field parameter, and the CVE reference summary, which states that the root cause is **improper input sanitization** leading to **command injection**. The relationship graph shows that CWE-95 is a variant of CWE-94, which is more specific than other command injection CWEs like CWE-77 and CWE-78.\n\nRelevant CWE Information:\n- \"The 'Computed field' text box within the 'Users Module Setup' functionality of Dolibarr does not properly sanitize user input.\"\n- \"Improper input sanitization leading to command injection.\"\n- \"Remote Code Execution (RCE), allowing an attacker to execute arbitrary commands on the server.\"\n- \"The vulnerability can be exploited through the 'Computed field' text box in the Dolibarr 'Users Module Setup'.\"\n\nCWE-77 was considered because the CVE summary mentions **command injection**. However, since the vulnerability involves dynamic evaluation of code, CWE-95 is a more precise classification. Other CWEs like CWE-78 (OS Command Injection) and CWE-89 (SQL Injection) were considered but deemed less relevant as the vulnerability isn't specifically tied to OS commands or SQL queries. CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')) is too generic and therefore not appropriate.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-89:**\n- 89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')) - ROOT\n\n\n**Chain starting from CWE-94:**\n- 94 (Improper Control of Generation of Code ('Code Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "95",
        "name": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
        "source": "sparse"
      },
      "similarity": 59.02161315611074
    },
    {
      "metadata": {
        "doc_id": "96",
        "name": "Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')",
        "source": "sparse"
      },
      "similarity": 56.02269474047822
    },
    {
      "metadata": {
        "doc_id": "138",
        "name": "Improper Neutralization of Special Elements",
        "source": "sparse"
      },
      "similarity": 48.3401680851881
    },
    {
      "metadata": {
        "doc_id": "78",
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "source": "sparse"
      },
      "similarity": 47.51149515238348
    },
    {
      "metadata": {
        "doc_id": "790",
        "name": "Improper Filtering of Special Elements",
        "source": "sparse"
      },
      "similarity": 46.08649932336624
    },
    {
      "metadata": {
        "doc_id": "1336",
        "name": "Improper Neutralization of Special Elements Used in a Template Engine",
        "source": "sparse"
      },
      "similarity": 44.812384733892
    },
    {
      "metadata": {
        "doc_id": "77",
        "name": "Improper Neutralization of Special Elements used in a Command ('Command Injection')",
        "source": "sparse"
      },
      "similarity": 42.52339973563299
    },
    {
      "metadata": {
        "doc_id": "749",
        "name": "Exposed Dangerous Method or Function",
        "source": "sparse"
      },
      "similarity": 42.02891297327917
    },
    {
      "metadata": {
        "doc_id": "502",
        "name": "Deserialization of Untrusted Data",
        "type": "Base",
        "original_content": "The product deserializes untrusted data without sufficiently ensuring that the resulting data will be valid.",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5149555562030214,
            "graph": 1.5108741088222186
          }
        }
      },
      "similarity": 0.5149555562030214
    },
    {
      "doc_id": "94",
      "text": "The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.",
      "score": 0.5635491972651366,
      "metadata": {
        "doc_id": "94",
        "name": "Improper Control of Generation of Code ('Code Injection')",
        "type": "Base",
        "extended_description": "\n\nWhen a product allows a user's input to contain code syntax, it might be possible for an attacker to craft the code in such a way that it will alter the intended control flow of the product. Such an alteration could lead to arbitrary code execution.\n\n\nInjection problems encompass a wide variety of issues -- all mitigated in very different ways. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities.\n",
        "alternate_terms": [],
        "original_content": "The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.",
        "relationships": [
          {
            "source_id": "94",
            "target_id": "98",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "94",
            "target_id": "96",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "94",
            "target_id": "95",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "94",
            "target_id": "1336",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "94",
            "target_id": "913",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "94",
            "target_id": "74",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "94",
            "target_id": "74",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "94",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "96",
            "target_id": "94",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "95",
            "target_id": "94",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "913",
            "target_id": "94",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "74",
            "target_id": "94",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1336",
            "target_id": "94",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "source": "graph",
        "sources": [
          "vector",
          "graph"
        ],
        "vector_score": 0.5635491972651366,
        "graph_score": 3.4866,
        "score_components": {
          "relationship_chain": 0.6,
          "explicit_mention": 1.0,
          "abstraction_path": 0.9,
          "sequence_path": 0.6400000000000001
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_up",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "89",
                  "456",
                  "CANFOLLOW"
                ],
                [
                  "456",
                  "98",
                  "CANPRECEDE"
                ],
                [
                  "98",
                  "94",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.6,
              "type": "relationship_chain",
              "source": "89"
            },
            "abstraction_path_up": {
              "path": [
                [
                  "96",
                  "94",
                  "CHILDOF"
                ]
              ],
              "score": 0.5599999999999999,
              "type": "abstraction_path_up",
              "source": "96"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "78",
                  "184",
                  "CANFOLLOW"
                ],
                [
                  "184",
                  "98",
                  "CANPRECEDE"
                ],
                [
                  "98",
                  "94",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.6400000000000001,
              "type": "vulnerability_sequence_forward",
              "source": "78"
            }
          }
        },
        "is_explicit": true,
        "abstraction_level": "base",
        "position": "after",
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This entry is frequently misused for vulnerabilities with a technical impact of \"code execution,\" which does not by itself indicate a root cause weakness, since dozens of weaknesses can enable code execution.",
          "comments": "This weakness only applies when the product's functionality intentionally constructs all or part of a code segment. It could be that executing code could be the result of other weaknesses that do not involve the construction of code segments.",
          "reasons": [
            "Frequent Misuse",
            "Frequent Misinterpretation"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.4904767043594742,
            "graph": 2.3173796789060543
          }
        }
      },
      "similarity": 2.3173796789060543
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-89",
      "CWE-94",
      "CWE-77",
      "CWE-95",
      "CWE-74",
      "CWE-78"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}