{
  "retriever": "sparse",
  "query": "In the Linux kernel, the following vulnerability has been resolved xfrm state fix out-of-bounds read during lookup lookup and resize can run in parallel. The xfrm_state_hash_generation seqlock ensures a retry, but the hash functions can observe a hmask value that is too large for the new hlist array. rehash does rcu_assign_pointer(net->xfrm.state_bydst, ndst) [..] net->xfrm.state_hmask = nhashmask While state lookup does h = xfrm_dst_hash(net, daddr, saddr, tmpl->reqid, encap_family) hlist_for_each_entry_rcu(x, net->xfrm.state_bydst + h, bydst) { This is only safe in case the update to state_bydst is larger than net->xfrm.xfrm_state_hmask (or if the lookup function gets serialized via state spinlock again). Fix this by prefetching state_hmask and the associated pointers. The xfrm_state_hash_generation seqlock retry will ensure that the pointer and the hmask will be consistent. The existing helpers, like xfrm_dst_hash(), are now unsafe for RCU side, add lockdep assertions to document that they are only safe for insert side. xfrm_state_lookup_byaddr() uses the spinlock rather than RCU. AFAICS this is an oversight from back when state lookup was converted to RCU, this lock should be replaced with RCU in a future patch.",
  "keyphrases": {
    "weakness": [
      "out-of-bounds read"
    ]
  },
  "timestamp": "2025-07-14 00:40:28",
  "cve_id": "CVE-2024-57982",
  "result_count": 13,
  "results": [
    {
      "cwe_id": "201",
      "name": "Insertion of Sensitive Information Into Sent Data",
      "score": 745.8597341680986,
      "search_source": "weakness:out-of-bounds read"
    },
    {
      "cwe_id": "502",
      "name": "Deserialization of Untrusted Data",
      "score": 741.2423739470383,
      "search_source": "weakness:out-of-bounds read"
    },
    {
      "cwe_id": "125",
      "name": "Out-of-bounds Read",
      "score": 734.1580520605654,
      "search_source": "weakness:out-of-bounds read"
    },
    {
      "cwe_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "score": 733.6771800607613,
      "search_source": "weakness:out-of-bounds read"
    },
    {
      "cwe_id": "674",
      "name": "Uncontrolled Recursion",
      "score": 728.7931165594923,
      "search_source": "weakness:out-of-bounds read"
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "score": 728.4172337388135,
      "search_source": "weakness:out-of-bounds read"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 724.3246272984978,
      "search_source": "weakness:out-of-bounds read"
    },
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "score": 722.5077187503285,
      "search_source": "weakness:out-of-bounds read"
    },
    {
      "cwe_id": "190",
      "name": "Integer Overflow or Wraparound",
      "score": 718.8369396649346,
      "search_source": "weakness:out-of-bounds read"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 718.2455003020489,
      "search_source": "weakness:out-of-bounds read"
    },
    {
      "cwe_id": "917",
      "name": "Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')",
      "score": 251.83803806812563,
      "search_source": "base_query"
    },
    {
      "cwe_id": "789",
      "name": "Memory Allocation with Excessive Size Value",
      "score": 248.4893504512871,
      "search_source": "base_query"
    },
    {
      "cwe_id": "203",
      "name": "Observable Discrepancy",
      "score": 248.33068590065182,
      "search_source": "base_query"
    }
  ]
}