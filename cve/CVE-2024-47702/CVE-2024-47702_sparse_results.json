{
  "query": "In the Linux kernel, the following vulnerability has been resolved bpf Fail verification for sign-extension of packet data/data_end/data_meta syzbot reported a kernel crash due to commit 1f1e864b6555 (bpf Handle sign-extenstin ctx member accesses). The reason is due to sign-extension of 32-bit load for packet data/data_end/data_meta uapi field. The original code looks like r2 = *(s32 *)(r1 + 76) /* load __sk_buff->data */ r3 = *(u32 *)(r1 + 80) /* load __sk_buff->data_end */ r0 = r2 r0 += 8 if r3 > r0 goto +1 ... Note that __sk_buff->data load has 32-bit sign extension. After verification and convert_ctx_accesses(), the final asm code looks like r2 = *(u64 *)(r1 +208) r2 = (s32)r2 r3 = *(u64 *)(r1 +80) r0 = r2 r0 += 8 if r3 > r0 goto pc+1 ... Note that r2 = (s32)r2 may make the kernel __sk_buff->data address invalid which may cause runtime failure. Currently, in C code, typically we have void *data = (void *)(long)skb->data void *data_end = (void *)(long)skb->data_end ... and it will generate r2 = *(u64 *)(r1 +208) r3 = *(u64 *)(r1 +80) r0 = r2 r0 += 8 if r3 > r0 goto pc+1 If we allow sign-extension, void *data = (void *)(long)(int)skb->data void *data_end = (void *)(long)skb->data_end ... the generated code looks like r2 = *(u64 *)(r1 +208) r2 >= 32 r3 = *(u64 *)(r1 +80) r0 = r2 r0 += 8 if r3 > r0 goto pc+1 and this will cause verification failure since r2 data */ this patch added additional checking in is_valid_access() callback function for packet data/data_end/data_meta access. If those accesses are with sign-extenstion, the verification will fail. [1] https//lore.kernel.org/bpf/000000000000c90eee061d236d37@google.com/",
  "count": 10,
  "results": [
    {
      "cwe_id": "120",
      "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
      "abstraction": "Base",
      "score": 1279.7176968396686,
      "original_score": 1279.7176968396686,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "26",
      "name": "Path Traversal: '/dir/../filename'",
      "abstraction": "Variant",
      "score": 1050.6524932919506,
      "original_score": 1050.6524932919506,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "321",
      "name": "Use of Hard-coded Cryptographic Key",
      "abstraction": "Variant",
      "score": 1030.1812235186546,
      "original_score": 1030.1812235186546,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "194",
      "name": "Unexpected Sign Extension",
      "abstraction": "Variant",
      "score": 851.6714872146505,
      "original_score": 851.6714872146505,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "836",
      "name": "Use of Password Hash Instead of Password for Authentication",
      "abstraction": "Base",
      "score": 832.4385515387175,
      "original_score": 832.4385515387175,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "328",
      "name": "Use of Weak Hash",
      "abstraction": "Base",
      "score": 831.7017535851007,
      "original_score": 831.7017535851007,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1390",
      "name": "Weak Authentication",
      "abstraction": "Class",
      "score": 816.4178281920113,
      "original_score": 816.4178281920113,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "125",
      "name": "Out-of-bounds Read",
      "abstraction": "Base",
      "score": 812.5382553797838,
      "original_score": 812.5382553797838,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "347",
      "name": "Improper Verification of Cryptographic Signature",
      "abstraction": "Base",
      "score": 806.4418225797933,
      "original_score": 806.4418225797933,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "abstraction": "Base",
      "score": 771.5061489993545,
      "original_score": 771.5061489993545,
      "mapping_usage": "Allowed"
    }
  ],
  "statistics": {
    "min": 771.5061489993545,
    "max": 1279.7176968396686,
    "mean": 908.3267261139687,
    "median": 832.0701525619091,
    "count": 10
  }
}