{
  "retriever": "sparse",
  "query": "In the Linux kernel, the following vulnerability has been resolved fork do not invoke uffd on fork if error occurs Patch series fork do not expose incomplete mm on fork. During fork we may place the virtual memory address space into an inconsistent state before the fork operation is complete. In addition, we may encounter an error during the fork operation that indicates that the virtual memory address space is invalidated. As a result, we should not be exposing it in any way to external machinery that might interact with the mm or VMAs, machinery that is not designed to deal with incomplete state. We specifically update the fork logic to defer khugepaged and ksm to the end of the operation and only to be invoked if no error arose, and disallow uffd from observing fork events should an error have occurred. This patch (of 2) Currently on fork we expose the virtual address space of a process to userland unconditionally if uffd is registered in VMAs, regardless of whether an error arose in the fork. This is performed in dup_userfaultfd_complete() which is invoked unconditionally, and performs two duties - invoking registered handlers for the UFFD_EVENT_FORK event via dup_fctx(), and clearing down userfaultfd_fork_ctx objects established in dup_userfaultfd(). This is problematic, because the virtual address space may not yet be correctly initialised if an error arose. The change in commit d24062914837 (fork use __mt_dup() to duplicate maple tree in dup_mmap()) makes this more pertinent as we may be in a state where entries in the maple tree are not yet consistent. We address this by, on fork error, ensuring that we roll back state that we would otherwise expect to clean up through the event being handled by userland and perform the memory freeing duty otherwise performed by dup_userfaultfd_complete(). We do this by implementing a new function, dup_userfaultfd_fail(), which performs the same loop, only decrementing reference counts. Note that we perform mmgrab() on the parent and child mms, however userfaultfd_ctx_put() will mmdrop() this once the reference count drops to zero, so we will avoid memory leaks correctly here.",
  "keyphrases": {
    "weakness": [
      "expose the virtual address space of a process to userland unconditionally if uffd is registered in VMAs"
    ]
  },
  "timestamp": "2025-07-13 19:56:49",
  "cve_id": "CVE-2024-50220",
  "result_count": 11,
  "results": [
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 1613.9923133695734,
      "search_source": "weakness:expose the virtual address space of a process to userland unconditionally if uffd is registered in VMAs"
    },
    {
      "cwe_id": "212",
      "name": "Improper Removal of Sensitive Information Before Storage or Transfer",
      "score": 1608.607637282506,
      "search_source": "weakness:expose the virtual address space of a process to userland unconditionally if uffd is registered in VMAs"
    },
    {
      "cwe_id": "407",
      "name": "Inefficient Algorithmic Complexity",
      "score": 1601.6529145131894,
      "search_source": "weakness:expose the virtual address space of a process to userland unconditionally if uffd is registered in VMAs"
    },
    {
      "cwe_id": "125",
      "name": "Out-of-bounds Read",
      "score": 1571.712005470195,
      "search_source": "weakness:expose the virtual address space of a process to userland unconditionally if uffd is registered in VMAs"
    },
    {
      "cwe_id": "193",
      "name": "Off-by-one Error",
      "score": 1545.8738525122167,
      "search_source": "weakness:expose the virtual address space of a process to userland unconditionally if uffd is registered in VMAs"
    },
    {
      "cwe_id": "203",
      "name": "Observable Discrepancy",
      "score": 1545.0033422114846,
      "search_source": "weakness:expose the virtual address space of a process to userland unconditionally if uffd is registered in VMAs"
    },
    {
      "cwe_id": "194",
      "name": "Unexpected Sign Extension",
      "score": 1543.2898982746365,
      "search_source": "weakness:expose the virtual address space of a process to userland unconditionally if uffd is registered in VMAs"
    },
    {
      "cwe_id": "335",
      "name": "Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG)",
      "score": 1537.3919632952927,
      "search_source": "weakness:expose the virtual address space of a process to userland unconditionally if uffd is registered in VMAs"
    },
    {
      "cwe_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "score": 1531.696783577272,
      "search_source": "weakness:expose the virtual address space of a process to userland unconditionally if uffd is registered in VMAs"
    },
    {
      "cwe_id": "755",
      "name": "Improper Handling of Exceptional Conditions",
      "score": 1528.6192650888972,
      "search_source": "weakness:expose the virtual address space of a process to userland unconditionally if uffd is registered in VMAs"
    },
    {
      "cwe_id": "787",
      "name": "Out-of-bounds Write",
      "score": 519.3617082344433,
      "search_source": "base_query"
    }
  ]
}