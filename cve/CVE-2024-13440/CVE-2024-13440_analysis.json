{
  "cve_id": "CVE-2024-13440",
  "description": "The Super Store Finder plugin for WordPress is vulnerable to SQL Injection via the ssf_wp_user_name parameter in all versions up to, and including, 7.0 due to **insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query**. This makes it possible for unauthenticated attackers to append additional SQL queries into an already existing query to store **cross-site scripting** in store reviews.",
  "key_phrases": {
    "rootcause": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
    "weakness": [
      "cross-site scripting",
      "SQL injection"
    ],
    "impact": "append additional SQL queries",
    "vector": "",
    "attacker": "unauthenticated attackers",
    "product": "Super Store Finder WordPress plugin",
    "version": "up to and including 7.0",
    "component": "ssf_wp_user_name parameter"
  },
  "reference_content": "Based on the provided content and the CVE description placeholder, here's an analysis:\n\nThe content details patch notes for the \"Super Store Finder for WordPress\" plugin. It lists numerous updates and fixes released between 2015 and 2025. Several entries specifically mention security-related fixes:\n\n*   **7.5** (Apr 7 2025): \"Fixed parameter sanitizing in ssf-tracking function to enhance security\"\n*   **7.1** (Jan 24 2025): \"Fixed parameter sanitizing issue in ssf-social-action.php ([Reviews and Ratings Add-on](https://codecanyon.net/item/social-store-locator-reviews-ratings-addon/16651590)) + Fixed minor vulnerability security issue above only if you own Reviews and Ratings Add-on\"\n*   **6.9.8** (Aug 14 2024): \"Updated Sanitization for Admin Store and Admin Listing Page + Updated Sanitization for Request Add Store Page\"\n*   **6.2** (Oct 22 2020): \"Fixed plugin Vulnerability post Penetration Test\"\n*   **6.4** (Mar 9 2021): \"Fixed SQL Injection related to minor search query\"\n*   **1.7.1** (Jun 25 2015): \"Updated Pretty Photo libraries to 3.1.6 due to security vulnerabilities\"\n\n**Root cause of vulnerability:**\nThe patch notes indicate several root causes, including insufficient parameter sanitization, potential SQL injection vulnerabilities, and outdated libraries with known security flaws (Pretty Photo).\n\n**Weaknesses/vulnerabilities present:**\n*   Parameter sanitization issues (multiple instances)\n*   SQL Injection (minor search query)\n*   Outdated libraries (Pretty Photo)\n*   General plugin vulnerabilities identified through penetration testing.\n\n**Impact of exploitation:**\nThe impact varies depending on the vulnerability. It could range from unauthorized access or modification of data (due to SQL injection or parameter sanitization issues) to potential remote code execution if the penetration test revealed more severe flaws.\n\n**Attack vectors:**\n*   Exploitation of unsanitized parameters in `ssf-tracking` and `ssf-social-action.php`.\n*   Crafted SQL queries targeting the search functionality.\n*   Exploitation of known vulnerabilities in the outdated Pretty Photo library.\n\n**Required attacker capabilities/position:**\n*   An attacker would need to be able to send crafted requests to the WordPress plugin.\n*   For SQL injection, the attacker would need knowledge of the database structure.\n*   For exploiting the outdated library, the attacker would need to be able to access the vulnerable code.\n\n**Mitigation or fix:**\nThe provided content *is* the mitigation/fix \u2013 applying the updates to the Super Store Finder for WordPress plugin as they were released. Specifically, updating to versions that include the listed security fixes.\n\nThis content provides significantly more detail than a placeholder CVE description would. It details specific vulnerabilities addressed in various plugin versions.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-89 | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | 1.0 | Base | Allowed | Primary CWE. **Insufficient escaping** and **lack of sufficient preparation on the existing SQL query** which resulted in SQL Injection. |\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 1.0 | Base | Allowed | Secondary CWE. Storing **cross-site scripting** in store reviews is a consequence of the SQL Injection. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is CWE-89, which is a Base level CWE. CWE-79 is a consequence of the SQL injection. CWE-89's parent is CWE-74, and CWE-79's parent is CWE-138. The injection of SQL commands leads to the ability to store XSS payloads.\n\n```mermaid\ngraph TD\n    cwe89[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n    cwe138[\"CWE-138: Improper Neutralization of Special Elements\"]\n\n    cwe89 -->|CHILDOF| cwe74\n    cwe79 -->|CHILDOF| cwe138\n    cwe89 -->|CANPRECEDE| cwe79\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe89 primary\n    class cwe79 secondary\n    class cwe74,cwe138 tertiary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **insufficient escaping** and **lack of sufficient preparation on the existing SQL query** (CWE-89), which leads to the ability to **append additional SQL queries** and store **cross-site scripting** (CWE-79) in store reviews.\n\n## Summary of Analysis\nThe primary weakness is CWE-89 because the root cause is **insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query**. The secondary weakness is CWE-79, because the SQL injection leads to the storage of **cross-site scripting** payloads.\n\nThe vulnerability description clearly states the root cause: \"**insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query**\". This directly aligns with the definition of CWE-89, which involves **improper neutralization of special elements used in an SQL command**. The description also mentions that this allows **unauthenticated attackers to append additional SQL queries into an already existing query to store cross-site scripting in store reviews**. The **cross-site scripting** aspect is mapped to CWE-79 because the successful SQL injection enables the storage of malicious scripts that are later rendered in a web page.\n\nCWE-116, CWE-352, CWE-90, CWE-138, CWE-943 and CWE-341 were considered but not used. CWE-116 is too broad, CWE-352 is not applicable because it's CSRF, CWE-90 is for LDAP Injection not SQL Injection, CWE-138 is too broad, CWE-943 is similar to CWE-89 but less specific, and CWE-341 is not relevant to this vulnerability.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-89 | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | 1.0 | Base | Allowed | Primary CWE. **Insufficient escaping** and **lack of sufficient preparation on the existing SQL query** which resulted in SQL Injection. |\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 1.0 | Base | Allowed | Secondary CWE. Storing **cross-site scripting** in store reviews is a consequence of the SQL Injection. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is CWE-89, which is a Base level CWE. CWE-79 is a consequence of the SQL injection. CWE-89's parent is CWE-74, and CWE-79's parent is CWE-138. The injection of SQL commands leads to the ability to store XSS payloads.\n\n```mermaid\ngraph TD\n    cwe89[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n    cwe138[\"CWE-138: Improper Neutralization of Special Elements\"]\n\n    cwe89 -->|CHILDOF| cwe74\n    cwe79 -->|CHILDOF| cwe138\n    cwe89 -->|CANPRECEDE| cwe79\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe89 primary\n    class cwe79 secondary\n    class cwe74,cwe138 tertiary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **insufficient escaping** and **lack of sufficient preparation on the existing SQL query** (CWE-89), which leads to the ability to **append additional SQL queries** and store **cross-site scripting** (CWE-79) in store reviews.\n\n## Summary of Analysis\nThe primary weakness is CWE-89 because the root cause is **insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query**. The secondary weakness is CWE-79, because the SQL injection leads to the storage of **cross-site scripting** payloads.\n\nThe vulnerability description clearly states the root cause: \"**insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query**\". This directly aligns with the definition of CWE-89, which involves **improper neutralization of special elements used in an SQL command**. The description also mentions that this allows **unauthenticated attackers to append additional SQL queries into an already existing query to store cross-site scripting in store reviews**. The **cross-site scripting** aspect is mapped to CWE-79 because the successful SQL injection enables the storage of malicious scripts that are later rendered in a web page.\n\nCWE-116, CWE-352, CWE-90, CWE-138, CWE-943 and CWE-341 were considered but not used. CWE-116 is too broad, CWE-352 is not applicable because it's CSRF, CWE-90 is for LDAP Injection not SQL Injection, CWE-138 is too broad, CWE-943 is similar to CWE-89 but less specific, and CWE-341 is not relevant to this vulnerability.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-90:**\n- 90 (Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')) - ROOT\n\n\n**Chain starting from CWE-89:**\n- 89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse",
        "original_content": "The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.",
        "keyphrase_sources": [
          {
            "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
            "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
            "type": "rootcause"
          },
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "weakness:SQL injection",
            "keyphrase": "SQL injection",
            "type": "weakness"
          },
          {
            "id": "impact:append additional SQL queries",
            "keyphrase": "append additional SQL queries",
            "type": "impact"
          },
          {
            "id": "attacker:unauthenticated attackers",
            "keyphrase": "unauthenticated attackers",
            "type": "attacker"
          },
          {
            "id": "product:Super Store Finder WordPress plugin",
            "keyphrase": "Super Store Finder WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:up to and including 7.0",
            "keyphrase": "up to and including 7.0",
            "type": "version"
          },
          {
            "id": "component:ssf_wp_user_name parameter",
            "keyphrase": "ssf_wp_user_name parameter",
            "type": "component"
          }
        ]
      },
      "similarity": 720.7283224956238
    },
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "sparse",
        "original_content": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
        "keyphrase_sources": [
          {
            "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
            "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
            "type": "rootcause"
          },
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "weakness:SQL injection",
            "keyphrase": "SQL injection",
            "type": "weakness"
          },
          {
            "id": "impact:append additional SQL queries",
            "keyphrase": "append additional SQL queries",
            "type": "impact"
          },
          {
            "id": "attacker:unauthenticated attackers",
            "keyphrase": "unauthenticated attackers",
            "type": "attacker"
          },
          {
            "id": "product:Super Store Finder WordPress plugin",
            "keyphrase": "Super Store Finder WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:up to and including 7.0",
            "keyphrase": "up to and including 7.0",
            "type": "version"
          },
          {
            "id": "component:ssf_wp_user_name parameter",
            "keyphrase": "ssf_wp_user_name parameter",
            "type": "component"
          }
        ]
      },
      "similarity": 685.2344123640293
    },
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse",
        "original_content": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
        "keyphrase_sources": [
          {
            "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
            "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
            "type": "rootcause"
          },
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "weakness:SQL injection",
            "keyphrase": "SQL injection",
            "type": "weakness"
          },
          {
            "id": "impact:append additional SQL queries",
            "keyphrase": "append additional SQL queries",
            "type": "impact"
          },
          {
            "id": "attacker:unauthenticated attackers",
            "keyphrase": "unauthenticated attackers",
            "type": "attacker"
          },
          {
            "id": "product:Super Store Finder WordPress plugin",
            "keyphrase": "Super Store Finder WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:up to and including 7.0",
            "keyphrase": "up to and including 7.0",
            "type": "version"
          },
          {
            "id": "component:ssf_wp_user_name parameter",
            "keyphrase": "ssf_wp_user_name parameter",
            "type": "component"
          }
        ]
      },
      "similarity": 668.2933081807497
    },
    {
      "metadata": {
        "doc_id": "90",
        "name": "Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
        "source": "sparse",
        "original_content": "The product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component.",
        "keyphrase_sources": [
          {
            "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
            "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
            "type": "rootcause"
          },
          {
            "id": "impact:append additional SQL queries",
            "keyphrase": "append additional SQL queries",
            "type": "impact"
          }
        ]
      },
      "similarity": 613.6338518794248
    },
    {
      "metadata": {
        "doc_id": "138",
        "name": "Improper Neutralization of Special Elements",
        "source": "sparse",
        "original_content": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.",
        "keyphrase_sources": [
          {
            "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
            "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
            "type": "rootcause"
          },
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "weakness:SQL injection",
            "keyphrase": "SQL injection",
            "type": "weakness"
          },
          {
            "id": "attacker:unauthenticated attackers",
            "keyphrase": "unauthenticated attackers",
            "type": "attacker"
          },
          {
            "id": "version:up to and including 7.0",
            "keyphrase": "up to and including 7.0",
            "type": "version"
          },
          {
            "id": "component:ssf_wp_user_name parameter",
            "keyphrase": "ssf_wp_user_name parameter",
            "type": "component"
          }
        ]
      },
      "similarity": 599.1554782841149
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse",
        "original_content": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
        "keyphrase_sources": [
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "attacker:unauthenticated attackers",
            "keyphrase": "unauthenticated attackers",
            "type": "attacker"
          },
          {
            "id": "product:Super Store Finder WordPress plugin",
            "keyphrase": "Super Store Finder WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:up to and including 7.0",
            "keyphrase": "up to and including 7.0",
            "type": "version"
          },
          {
            "id": "component:ssf_wp_user_name parameter",
            "keyphrase": "ssf_wp_user_name parameter",
            "type": "component"
          }
        ]
      },
      "similarity": 477.3986879957107
    },
    {
      "metadata": {
        "doc_id": "943",
        "name": "Improper Neutralization of Special Elements in Data Query Logic",
        "source": "sparse",
        "original_content": "The product generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query.",
        "keyphrase_sources": [
          {
            "id": "weakness:SQL injection",
            "keyphrase": "SQL injection",
            "type": "weakness"
          },
          {
            "id": "impact:append additional SQL queries",
            "keyphrase": "append additional SQL queries",
            "type": "impact"
          }
        ]
      },
      "similarity": 408.90486013628043
    },
    {
      "metadata": {
        "doc_id": "341",
        "name": "Predictable from Observable State",
        "source": "sparse",
        "original_content": "A number or object is predictable based on observations that the attacker can make about the state of the system or network, such as time, process ID, etc.",
        "keyphrase_sources": [
          {
            "id": "product:Super Store Finder WordPress plugin",
            "keyphrase": "Super Store Finder WordPress plugin",
            "type": "product"
          }
        ]
      },
      "similarity": 151.80600226976352
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-90",
      "CWE-89",
      "CWE-116",
      "CWE-79",
      "CWE-352",
      "CWE-74",
      "CWE-138",
      "CWE-943",
      "CWE-341"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {
    "116": [
      {
        "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
        "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
        "type": "rootcause"
      },
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "weakness:SQL injection",
        "keyphrase": "SQL injection",
        "type": "weakness"
      },
      {
        "id": "impact:append additional SQL queries",
        "keyphrase": "append additional SQL queries",
        "type": "impact"
      },
      {
        "id": "attacker:unauthenticated attackers",
        "keyphrase": "unauthenticated attackers",
        "type": "attacker"
      },
      {
        "id": "product:Super Store Finder WordPress plugin",
        "keyphrase": "Super Store Finder WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:up to and including 7.0",
        "keyphrase": "up to and including 7.0",
        "type": "version"
      },
      {
        "id": "component:ssf_wp_user_name parameter",
        "keyphrase": "ssf_wp_user_name parameter",
        "type": "component"
      }
    ],
    "89": [
      {
        "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
        "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
        "type": "rootcause"
      },
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "weakness:SQL injection",
        "keyphrase": "SQL injection",
        "type": "weakness"
      },
      {
        "id": "impact:append additional SQL queries",
        "keyphrase": "append additional SQL queries",
        "type": "impact"
      },
      {
        "id": "attacker:unauthenticated attackers",
        "keyphrase": "unauthenticated attackers",
        "type": "attacker"
      },
      {
        "id": "product:Super Store Finder WordPress plugin",
        "keyphrase": "Super Store Finder WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:up to and including 7.0",
        "keyphrase": "up to and including 7.0",
        "type": "version"
      },
      {
        "id": "component:ssf_wp_user_name parameter",
        "keyphrase": "ssf_wp_user_name parameter",
        "type": "component"
      }
    ],
    "352": [
      {
        "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
        "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
        "type": "rootcause"
      },
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "weakness:SQL injection",
        "keyphrase": "SQL injection",
        "type": "weakness"
      },
      {
        "id": "impact:append additional SQL queries",
        "keyphrase": "append additional SQL queries",
        "type": "impact"
      },
      {
        "id": "attacker:unauthenticated attackers",
        "keyphrase": "unauthenticated attackers",
        "type": "attacker"
      },
      {
        "id": "product:Super Store Finder WordPress plugin",
        "keyphrase": "Super Store Finder WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:up to and including 7.0",
        "keyphrase": "up to and including 7.0",
        "type": "version"
      },
      {
        "id": "component:ssf_wp_user_name parameter",
        "keyphrase": "ssf_wp_user_name parameter",
        "type": "component"
      }
    ],
    "90": [
      {
        "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
        "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
        "type": "rootcause"
      },
      {
        "id": "impact:append additional SQL queries",
        "keyphrase": "append additional SQL queries",
        "type": "impact"
      }
    ],
    "138": [
      {
        "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
        "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
        "type": "rootcause"
      },
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "weakness:SQL injection",
        "keyphrase": "SQL injection",
        "type": "weakness"
      },
      {
        "id": "attacker:unauthenticated attackers",
        "keyphrase": "unauthenticated attackers",
        "type": "attacker"
      },
      {
        "id": "version:up to and including 7.0",
        "keyphrase": "up to and including 7.0",
        "type": "version"
      },
      {
        "id": "component:ssf_wp_user_name parameter",
        "keyphrase": "ssf_wp_user_name parameter",
        "type": "component"
      }
    ],
    "79": [
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "attacker:unauthenticated attackers",
        "keyphrase": "unauthenticated attackers",
        "type": "attacker"
      },
      {
        "id": "product:Super Store Finder WordPress plugin",
        "keyphrase": "Super Store Finder WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:up to and including 7.0",
        "keyphrase": "up to and including 7.0",
        "type": "version"
      },
      {
        "id": "component:ssf_wp_user_name parameter",
        "keyphrase": "ssf_wp_user_name parameter",
        "type": "component"
      }
    ],
    "943": [
      {
        "id": "weakness:SQL injection",
        "keyphrase": "SQL injection",
        "type": "weakness"
      },
      {
        "id": "impact:append additional SQL queries",
        "keyphrase": "append additional SQL queries",
        "type": "impact"
      }
    ],
    "341": [
      {
        "id": "product:Super Store Finder WordPress plugin",
        "keyphrase": "Super Store Finder WordPress plugin",
        "type": "product"
      }
    ]
  }
}