{
  "cve_id": "CVE-2024-7472",
  "description": "lunary-ai/lunary v1.2.26 contains an **email injection** vulnerability in the Send email verification API (/v1/users/send-verification) and Sign up API (/auth/signup). An unauthenticated attacker can inject data into outgoing emails by bypassing the extractFirstName function using a different whitespace character (e.g., \\xa0). This vulnerability can be exploited to conduct phishing attacks, damage the applications brand, cause legal and compliance issues, and result in financial impact due to unauthorized email usage.",
  "key_phrases": {
    "rootcause": "bypass of extractFirstName function",
    "weakness": "email injection",
    "impact": [
      "conduct phishing attacks",
      "inject data into outgoing emails"
    ],
    "vector": "different whitespace character",
    "attacker": "unauthenticated attacker",
    "product": "lunary-ai/lunary",
    "version": "v1.2.26",
    "component": [
      "['Send email verification API'",
      "'Sign up API']"
    ]
  },
  "reference_content": "The provided content relates to a commit in the `lunary` repository that introduces name sanitization in emails. However, it does not describe a specific vulnerability and therefore is **UNRELATED** to a CVE.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-93 | Improper Neutralization of CRLF Sequences ('CRLF Injection') | 0.8 | Base | Allowed | Primary CWE.  The unauthenticated attacker is able to inject data into outgoing emails by bypassing the extractFirstName function using a different whitespace character. |\n| CWE-113 | Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting') | 0.6 | Variant | Allowed | Secondary candidate. CRLF injection in HTTP headers is a possible impact, but not explicitly stated. |\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 0.5 | Base | Allowed | Secondary candidate. Injection into emails could lead to the inclusion of malicious scripts, but this is not explicitly stated. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.7\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary weakness is CWE-93, which focuses on the improper neutralization of CRLF sequences. CWE-113 is a variant of CWE-93, specifically concerning HTTP headers. CWE-79 is related, as injection could lead to cross-site scripting vulnerabilities if the injected content is displayed in a web page. The hierarchical relationship influenced the decision, as CWE-93 is a more general case of the injection.\n\n```mermaid\ngraph TD\n    cwe93[\"CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')\"]\n    cwe113[\"CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n\n    cwe113 -->|CHILDOF| cwe93\n    cwe79 -->|RELATED| cwe93\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe93 primary\n    class cwe113,cwe79 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **bypass of extractFirstName function**, leading to **email injection**. This allows an unauthenticated attacker to inject data into outgoing emails. The impact includes conducting phishing attacks, damaging the application's brand, causing legal and compliance issues, and financial impact due to unauthorized email usage.\n\n## Summary of Analysis\nThe analysis is primarily based on the vulnerability description, which clearly states an **email injection** vulnerability due to a **bypass of the extractFirstName function**. The description directly indicates that an unauthenticated attacker can inject data into outgoing emails.\n\nThe retriever results suggest CWE-93 as a potential candidate, and its description aligns well with the **email injection** aspect of the vulnerability. The hierarchical relationships, with CWE-113 being a variant of CWE-93, further support the selection of CWE-93 as the primary weakness. CWE-79 is a possible secondary weakness because injected emails could be used in a Cross-Site Scripting attack, but there is no direct evidence.\n\nCWE-93 is at the optimal level of specificity because it accurately captures the **email injection** vulnerability without being overly specific to HTTP headers or web page generation. The selection is supported by the vulnerability description, retriever results, and hierarchical relationships.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Technical Explanation:**\nThe vulnerability involves the ability to inject data into outgoing emails by bypassing the extractFirstName function. This is achieved by using a different whitespace character, which is not properly neutralized. CRLF injection is a type of injection attack where an attacker injects carriage return and line feed characters into an input field to manipulate the output. In this case, the injection could be used to add arbitrary headers or content to the email.\n\n**Security Implications:**\nThe security implications of this vulnerability are significant. An attacker can use the injection to conduct phishing attacks, damage the application's brand, cause legal and compliance issues, and result in financial impact due to unauthorized email usage.\n\n**Relationship Details:**\nCWE-93 is a base-level CWE, which is appropriate for mapping to the root cause of the vulnerability. It is also related to other CWEs, such as CWE-113 (Improper Neutralization of CRLF Sequences in HTTP Headers) and CWE-79 (Improper Neutralization of Input During Web Page Generation).\n\n**Mapping Decision Influence:**\nThe high relevance score and the direct match with the vulnerability description make CWE-93 the primary weakness. The mapping guidance also supports this decision.\n\n## CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')\n**Abstraction Level**: Variant\n**Similarity Score**: 0.68\n**Source**: dense\n\n**Description**:\nThe product receives data from an HTTP agent/component (e.g., web server, proxy, browser, etc.), but it does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Technical Explanation:**\nWhile the primary issue is email injection, it's possible that the injected data could be used to manipulate HTTP headers if the email functionality is used in conjunction with web requests. If the email content is reflected in HTTP headers, CRLF injection could lead to HTTP Request/Response Splitting.\n\n**Security Implications:**\nIf the email injection leads to HTTP Request/Response Splitting, an attacker could potentially inject malicious code or redirect users to malicious websites.\n\n**Relationship Details:**\nCWE-113 is a variant of CWE-93, which means it is a more specific type of CRLF injection. It is related to HTTP headers, which may or may not be directly involved in the email injection vulnerability.\n\n**Mapping Decision Influence:**\nCWE-113 is considered a secondary candidate because the description does not explicitly state that the email injection leads to HTTP header manipulation. However, it is a possible consequence of the injection.\n\n## CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n**Abstraction Level**: Base\n**Similarity Score**: 0.68\n**Source**: dense\n\n**Description**:\nThe product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Technical Explanation:**\nIf the injected email content is later displayed on a web page without proper neutralization, it could lead to cross-site scripting (XSS) vulnerabilities. For example, if the injected content contains JavaScript code, it could be executed in the user's browser.\n\n**Security Implications:**\nXSS vulnerabilities can allow an attacker to steal cookies, redirect users to malicious websites, or deface web pages.\n\n**Relationship Details:**\nCWE-79 is related to CWE-93 because the email injection could be a vector for XSS attacks. However, it is not a direct consequence of the injection.\n\n**Mapping Decision Influence:**\nCWE-79 is considered a secondary candidate because the description does not explicitly state that the email injection leads to XSS vulnerabilities. However, it is a possible consequence of the injection if the injected content is displayed on a web page.\n\nOther CWEs Considered:\n\n- CWE-1390, CWE-287, CWE-306: These relate to authentication issues, which are not the primary concern. While the attacker is unauthenticated, the core issue is the **email injection** due to improper input validation.\n- CWE-1336: This relates to template engine issues, which aren't the focus here.\n- CWE-359: This relates to exposure of private information, but the core weakness is the **email injection** itself.\n- CWE-117: This relates to improper output neutralization for logs, which is not directly applicable to this vulnerability.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-93 | Improper Neutralization of CRLF Sequences ('CRLF Injection') | 0.8 | Base | Allowed | Primary CWE.  The unauthenticated attacker is able to inject data into outgoing emails by bypassing the extractFirstName function using a different whitespace character. |\n| CWE-113 | Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting') | 0.6 | Variant | Allowed | Secondary candidate. CRLF injection in HTTP headers is a possible impact, but not explicitly stated. |\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 0.5 | Base | Allowed | Secondary candidate. Injection into emails could lead to the inclusion of malicious scripts, but this is not explicitly stated. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.7\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary weakness is CWE-93, which focuses on the improper neutralization of CRLF sequences. CWE-113 is a variant of CWE-93, specifically concerning HTTP headers. CWE-79 is related, as injection could lead to cross-site scripting vulnerabilities if the injected content is displayed in a web page. The hierarchical relationship influenced the decision, as CWE-93 is a more general case of the injection.\n\n```mermaid\ngraph TD\n    cwe93[\"CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')\"]\n    cwe113[\"CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n\n    cwe113 -->|CHILDOF| cwe93\n    cwe79 -->|RELATED| cwe93\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe93 primary\n    class cwe113,cwe79 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **bypass of extractFirstName function**, leading to **email injection**. This allows an unauthenticated attacker to inject data into outgoing emails. The impact includes conducting phishing attacks, damaging the application's brand, causing legal and compliance issues, and financial impact due to unauthorized email usage.\n\n## Summary of Analysis\nThe analysis is primarily based on the vulnerability description, which clearly states an **email injection** vulnerability due to a **bypass of the extractFirstName function**. The description directly indicates that an unauthenticated attacker can inject data into outgoing emails.\n\nThe retriever results suggest CWE-93 as a potential candidate, and its description aligns well with the **email injection** aspect of the vulnerability. The hierarchical relationships, with CWE-113 being a variant of CWE-93, further support the selection of CWE-93 as the primary weakness. CWE-79 is a possible secondary weakness because injected emails could be used in a Cross-Site Scripting attack, but there is no direct evidence.\n\nCWE-93 is at the optimal level of specificity because it accurately captures the **email injection** vulnerability without being overly specific to HTTP headers or web page generation. The selection is supported by the vulnerability description, retriever results, and hierarchical relationships.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Technical Explanation:**\nThe vulnerability involves the ability to inject data into outgoing emails by bypassing the extractFirstName function. This is achieved by using a different whitespace character, which is not properly neutralized. CRLF injection is a type of injection attack where an attacker injects carriage return and line feed characters into an input field to manipulate the output. In this case, the injection could be used to add arbitrary headers or content to the email.\n\n**Security Implications:**\nThe security implications of this vulnerability are significant. An attacker can use the injection to conduct phishing attacks, damage the application's brand, cause legal and compliance issues, and result in financial impact due to unauthorized email usage.\n\n**Relationship Details:**\nCWE-93 is a base-level CWE, which is appropriate for mapping to the root cause of the vulnerability. It is also related to other CWEs, such as CWE-113 (Improper Neutralization of CRLF Sequences in HTTP Headers) and CWE-79 (Improper Neutralization of Input During Web Page Generation).\n\n**Mapping Decision Influence:**\nThe high relevance score and the direct match with the vulnerability description make CWE-93 the primary weakness. The mapping guidance also supports this decision.\n\n## CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')\n**Abstraction Level**: Variant\n**Similarity Score**: 0.68\n**Source**: dense\n\n**Description**:\nThe product receives data from an HTTP agent/component (e.g., web server, proxy, browser, etc.), but it does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Technical Explanation:**\nWhile the primary issue is email injection, it's possible that the injected data could be used to manipulate HTTP headers if the email functionality is used in conjunction with web requests. If the email content is reflected in HTTP headers, CRLF injection could lead to HTTP Request/Response Splitting.\n\n**Security Implications:**\nIf the email injection leads to HTTP Request/Response Splitting, an attacker could potentially inject malicious code or redirect users to malicious websites.\n\n**Relationship Details:**\nCWE-113 is a variant of CWE-93, which means it is a more specific type of CRLF injection. It is related to HTTP headers, which may or may not be directly involved in the email injection vulnerability.\n\n**Mapping Decision Influence:**\nCWE-113 is considered a secondary candidate because the description does not explicitly state that the email injection leads to HTTP header manipulation. However, it is a possible consequence of the injection.\n\n## CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n**Abstraction Level**: Base\n**Similarity Score**: 0.68\n**Source**: dense\n\n**Description**:\nThe product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Technical Explanation:**\nIf the injected email content is later displayed on a web page without proper neutralization, it could lead to cross-site scripting (XSS) vulnerabilities. For example, if the injected content contains JavaScript code, it could be executed in the user's browser.\n\n**Security Implications:**\nXSS vulnerabilities can allow an attacker to steal cookies, redirect users to malicious websites, or deface web pages.\n\n**Relationship Details:**\nCWE-79 is related to CWE-93 because the email injection could be a vector for XSS attacks. However, it is not a direct consequence of the injection.\n\n**Mapping Decision Influence:**\nCWE-79 is considered a secondary candidate because the description does not explicitly state that the email injection leads to XSS vulnerabilities. However, it is a possible consequence of the injection if the injected content is displayed on a web page.\n\nOther CWEs Considered:\n\n- CWE-1390, CWE-287, CWE-306: These relate to authentication issues, which are not the primary concern. While the attacker is unauthenticated, the core issue is the **email injection** due to improper input validation.\n- CWE-1336: This relates to template engine issues, which aren't the focus here.\n- CWE-359: This relates to exposure of private information, but the core weakness is the **email injection** itself.\n- CWE-117: This relates to improper output neutralization for logs, which is not directly applicable to this vulnerability.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-1390:**\n- 1390 (Weak Authentication) - ROOT\n\n\n**Chain starting from CWE-359:**\n- 359 (Exposure of Private Personal Information to an Unauthorized Actor) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "1390",
        "name": "Weak Authentication",
        "source": "sparse"
      },
      "similarity": 395.1981652985061
    },
    {
      "metadata": {
        "doc_id": "93",
        "name": "Improper Neutralization of CRLF Sequences ('CRLF Injection')",
        "source": "sparse"
      },
      "similarity": 390.50468079608214
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 382.92199299123814
    },
    {
      "metadata": {
        "doc_id": "113",
        "name": "Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')",
        "source": "sparse"
      },
      "similarity": 373.5043137763162
    },
    {
      "metadata": {
        "doc_id": "1336",
        "name": "Improper Neutralization of Special Elements Used in a Template Engine",
        "source": "sparse"
      },
      "similarity": 373.1278967386148
    },
    {
      "metadata": {
        "doc_id": "287",
        "name": "Improper Authentication",
        "source": "sparse"
      },
      "similarity": 365.4916485582427
    },
    {
      "metadata": {
        "doc_id": "306",
        "name": "Missing Authentication for Critical Function",
        "source": "sparse"
      },
      "similarity": 365.1771739927612
    },
    {
      "metadata": {
        "doc_id": "138",
        "name": "Improper Neutralization of Special Elements",
        "source": "sparse"
      },
      "similarity": 364.56803074361653
    },
    {
      "metadata": {
        "doc_id": "359",
        "name": "Exposure of Private Personal Information to an Unauthorized Actor",
        "type": "Base",
        "original_content": "The product does not properly prevent a person's private, personal information from being accessed by actors who either (1) are not explicitly authorized to access the information or (2) do not have the implicit consent of the person about whom the information is collected.",
        "keyphrase_source": "rootcause:bypass of extractFirstName function",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5230965830304788,
            "graph": 1.5015968215282607
          }
        }
      },
      "similarity": 0.5230965830304788
    },
    {
      "doc_id": "117",
      "text": "CWE-117: Improper Output Neutralization for Logs",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "117",
        "name": "Improper Output Neutralization for Logs",
        "type": "base",
        "original_content": "CWE-117: Improper Output Neutralization for Logs",
        "relationships": [
          {
            "source_id": "117",
            "target_id": "93",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "117",
            "target_id": "20",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "700"
            }
          },
          {
            "source_id": "117",
            "target_id": "116",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "93",
            "target_id": "117",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "20",
            "target_id": "117",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "700"
            }
          },
          {
            "source_id": "116",
            "target_id": "117",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "93",
                  "117",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "93"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "93",
                  "117",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_forward",
              "source": "93"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-1390",
      "CWE-359",
      "CWE-93",
      "CWE-79",
      "CWE-113",
      "CWE-306",
      "CWE-1336",
      "CWE-117",
      "CWE-287"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}