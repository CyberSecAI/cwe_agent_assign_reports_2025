{
  "retriever": "sparse",
  "query": "In the Linux kernel, the following vulnerability has been resolved PCI/ASPM Fix link state exit during switch upstream function removal Before 456d8aa37d0f (PCI/ASPM Disable ASPM on MFD function removal to avoid use-after-free), we would free the ASPM link only after the last function on the bus pertaining to the given link was removed. That was too late. If function 0 is removed before sibling function, link->downstream would point to freed memory after. After above change, we freed the ASPM parent link state upon any function removal on the bus pertaining to a given link. That is too early. If the link is to a PCIe switch with MFD on the upstream port, then removing functions other than 0 first would free a link which still remains parent_link to the remaining downstream ports. The resulting GPFs are especially frequent during hot-unplug, because pciehp removes devices on the link bus in reverse order. On that switch, function 0 is the virtual P2P bridge to the internal bus. Free exactly when function 0 is removed -- before the parent link is obsolete, but after all subordinate links are gone. [kwilczynski commit log]",
  "keyphrases": {
    "weakness": [
      "use-after-free"
    ]
  },
  "timestamp": "2025-07-14 00:48:22",
  "cve_id": "CVE-2024-58093",
  "result_count": 12,
  "results": [
    {
      "cwe_id": "416",
      "name": "Use After Free",
      "score": 1000.0,
      "search_source": "alternate_term_match"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 888.8614057924824,
      "search_source": "weakness:use-after-free"
    },
    {
      "cwe_id": "59",
      "name": "Improper Link Resolution Before File Access ('Link Following')",
      "score": 858.7150065882607,
      "search_source": "weakness:use-after-free"
    },
    {
      "cwe_id": "61",
      "name": "UNIX Symbolic Link (Symlink) Following",
      "score": 820.2379375802053,
      "search_source": "weakness:use-after-free"
    },
    {
      "cwe_id": "401",
      "name": "Missing Release of Memory after Effective Lifetime",
      "score": 818.011665297427,
      "search_source": "weakness:use-after-free"
    },
    {
      "cwe_id": "364",
      "name": "Signal Handler Race Condition",
      "score": 812.3603128983499,
      "search_source": "weakness:use-after-free"
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "score": 786.3806095889594,
      "search_source": "weakness:use-after-free"
    },
    {
      "cwe_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "score": 771.4852133336104,
      "search_source": "weakness:use-after-free"
    },
    {
      "cwe_id": "212",
      "name": "Improper Removal of Sensitive Information Before Storage or Transfer",
      "score": 758.6360453367238,
      "search_source": "weakness:use-after-free"
    },
    {
      "cwe_id": "415",
      "name": "Double Free",
      "score": 754.2785987371133,
      "search_source": "weakness:use-after-free"
    },
    {
      "cwe_id": "78",
      "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
      "score": 753.491818246132,
      "search_source": "weakness:use-after-free"
    },
    {
      "cwe_id": "79",
      "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
      "score": 265.64765123184503,
      "search_source": "base_query"
    }
  ]
}