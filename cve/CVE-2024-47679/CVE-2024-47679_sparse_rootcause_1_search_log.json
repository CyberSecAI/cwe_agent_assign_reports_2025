{
  "method": "sparse_rootcause_1",
  "query": "In the Linux kernel, the following vulnerability has been resolved vfs fix race between evice_inodes() and find_inode()&iput() Hi, all Recently I noticed a bug[1] in btrfs, after digged it into and I believe ita race in vfs. Lets assume theres a inode (ie ino 261) with i_count 1 is called by iput(), and theres a concurrent thread calling generic_shutdown_super(). cpu0 cpu1 iput() // i_count is 1 ->spin_lock(inode) ->dec i_count to 0 ->iput_final() generic_shutdown_super() ->__inode_add_lru() ->evict_inodes() // cause some reason[2] ->if (atomic_read(inode->i_count)) continue // return before // inode 261 passed the above check // list_lru_add_obj() // and then schedule out ->spin_unlock() // note here the inode 261 // was still at sb list and hash list, // and I_FREEING|I_WILL_FREE was not been set btrfs_iget() // after some function calls ->find_inode() // found the above inode 261 ->spin_lock(inode) // check I_FREEING|I_WILL_FREE // and passed ->__iget() ->spin_unlock(inode) // schedule back ->spin_lock(inode) // check (I_NEW|I_FREEING|I_WILL_FREE) flags, // passed and set I_FREEING iput() ->spin_unlock(inode) ->spin_lock(inode) ->ev",
  "keyphrases": {
    "rootcause": "race condition"
  },
  "timestamp": "2025-07-13T18:19:46.716209",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "775",
      "name": "Missing Release of File Descriptor or Handle after Effective Lifetime",
      "score": 699.050451970638
    },
    {
      "doc_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 551.364042699872
    },
    {
      "doc_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "score": 532.4420638599396
    },
    {
      "doc_id": "667",
      "name": "Improper Locking",
      "score": 503.15305955723454
    },
    {
      "doc_id": "364",
      "name": "Signal Handler Race Condition",
      "score": 480.8866089060906
    }
  ]
}