{
  "cve_id": "CVE-2024-52291",
  "description": "Craft is a content management system (CMS). A vulnerability in CraftCMS allows an attacker to bypass local file system validation by utilizing a **double file// scheme** (e.g., file//file////). This enables the attacker to specify sensitive folders as the file system, leading to potential file overwriting through malicious uploads, unauthorized access to sensitive files, and, under certain conditions, remote code execution (RCE) via **Server-Side Template Injection** (SSTI) payloads. Note that this will only work if you have an authenticated administrator account with allowAdminChanges enabled. This is fixed in 5.4.6 and 4.12.5.",
  "key_phrases": {
    "rootcause": "double file// scheme",
    "weakness": "Server-Side Template Injection",
    "impact": [
      "['file overwriting through malicious uploads'",
      "'unauthorized access to sensitive files'",
      "'remote code execution (RCE)']"
    ],
    "vector": "malicious uploads",
    "attacker": "attacker",
    "product": "CraftCMS",
    "version": "prior to 5.4.6 and 4.12.5",
    "component": ""
  },
  "reference_content": "- **Root cause of vulnerability:** The vulnerability stems from insufficient sanitization of the file path in `cms/src/helpers/FileHelper.php`. The function `normalizePath` removes only one `file://` prefix from the input path. By providing a path with two `file://` prefixes (e.g., `file://file:////path`), an attacker can bypass the sanitization.\n\n- **Weaknesses/vulnerabilities present:**\n    - **Local File System Validation Bypass:** The double `file://` prefix bypasses the intended path validation, allowing the attacker to specify arbitrary local file system locations.\n    - **File Overwrite:** Attackers can upload files to the server that can overwrite existing files within the validated, or exploited, path.\n    - **Sensitive File Access:** By specifying the base path to a sensitive location and enabling public URLs, attackers can retrieve files they are otherwise not permitted to access.\n    - **Potential Code Execution:** While not fully proven, attackers may achieve Remote Code Execution (RCE) via Server-Side Template Injection (SSTI) by uploading malicious files (e.g., into the `/templates` directory), as the system's SSTI input sanitization can be bypassed.\n\n- **Impact of exploitation:**\n    - Overwriting critical application files, leading to application malfunctions or compromise.\n    - Unauthorized access to sensitive information stored in server files, including configuration files.\n    - Potential remote code execution, enabling complete server control by the attacker.\n\n- **Attack vectors:**\n    - Network-based attack, where an attacker exploits the vulnerability through a web interface.\n    - The attacker needs to be an authenticated administrator of the CraftCMS instance.\n    - The CraftCMS installation must have the `allowAdminChanges` config setting set to true.\n    - Attacker crafts a malicious file path using a double `file://` prefix when creating a new asset volume.\n\n- **Required attacker capabilities/position:**\n    - The attacker must have administrative access to a vulnerable CraftCMS instance and the config setting `allowAdminChanges` must be enabled.\n    - Ability to navigate to the \"Settings -> Assets\" section of the admin panel\n    - Ability to upload files.\n    - Knowledge of the vulnerable double `file://` prefix to bypass sanitization",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-22 | Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') | 0.9 | Base | Primary | Allowed |\n| CWE-434 | Unrestricted Upload of File with Dangerous Type | 0.7 | Base | Secondary | Allowed |\n| CWE-1336 | Improper Neutralization of Special Elements Used in a Template Engine | 0.6 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is **CWE-22** which stems from the **improper** limitation of a pathname, leading to path traversal. **CWE-434** is a secondary weakness, because the path traversal allows for unrestricted upload of dangerous file types. **CWE-1336** may be present due to the potential for SSTI, which involves improper neutralization of special elements used in a template engine.\n\n```mermaid\ngraph TD\n    cwe22[\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"]\n    cwe434[\"CWE-434: Unrestricted Upload of File with Dangerous Type\"]\n    cwe1336[\"CWE-1336: Improper Neutralization of Special Elements Used in a Template Engine\"]\n    \n    cwe434 -->|CANFOLLOW| cwe22\n    cwe1336 -->|CANFOLLOW| cwe22\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe22 primary\n    class cwe434,cwe1336 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with an **improper** path traversal (**CWE-22**), which allows for unrestricted upload of dangerous file types (**CWE-434**). This can potentially lead to server-side template injection (**CWE-1336**) and remote code execution (RCE).\n  - The **Primary CWE** is **CWE-22** as the improper path validation is the root cause that leads to the other weaknesses.\n\n## Summary of Analysis\nThe assessment is heavily based on the vulnerability description and the CVE reference link content summary. The root cause is the insufficient sanitization of the file path due to the **double file// scheme**, allowing an attacker to bypass local file system validation. This leads to file overwriting through malicious uploads, unauthorized access to sensitive files, and potential RCE via SSTI payloads.\n\nThe selection of **CWE-22** as the primary CWE is justified because the vulnerability stems from the **improper** limitation of a pathname to a restricted directory. The use of the **double file// scheme** bypasses the intended path validation, allowing the attacker to specify arbitrary local file system locations. This aligns directly with the description of **CWE-22**.\n\n**CWE-434** is included as a secondary CWE because the path traversal allows for the unrestricted upload of dangerous file types, which can lead to further exploitation.\n\n**CWE-1336** is included as a possible secondary CWE because the vulnerability description mentions the potential for SSTI, which involves improper neutralization of special elements used in a template engine. However, the evidence for SSTI is not as strong, so the confidence in this mapping is lower.\n\nOther CWEs Considered but Not Used:\n*   **CWE-425 (Direct Request ('Forced Browsing'))**: While the vulnerability involves unauthorized access, it's primarily due to path traversal, not **missing** authorization checks.\n*   **CWE-41 (Improper Resolution of Path Equivalence)**: While related to path manipulation, the **double file// scheme** is more directly related to traversing outside the intended directory.\n*   **CWE-79 (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'))**: Not relevant as the vulnerability isn't related to XSS.\n*   **CWE-472 (External Control of Assumed-Immutable Web Parameter)**: Not relevant as the vulnerability isn't related to modification of assumed-immutable web parameters.\n*   **CWE-178 (Improper Handling of Case Sensitivity)**: Not relevant as the vulnerability isn't related to case sensitivity.\n*   **CWE-552 (Files or Directories Accessible to External Parties)**: While a consequence, the root cause is the path traversal, not directly making files accessible.\n*   **CWE-116 (Improper Encoding or Escaping of Output)**: Not relevant as the vulnerability isn't related to encoding or escaping of output.\n*   **CWE-184 (Incomplete List of Disallowed Inputs)**: Not relevant as the vulnerability isn't related to a list of disallowed inputs.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-22 | Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') | 0.9 | Base | Primary | Allowed |\n| CWE-434 | Unrestricted Upload of File with Dangerous Type | 0.7 | Base | Secondary | Allowed |\n| CWE-1336 | Improper Neutralization of Special Elements Used in a Template Engine | 0.6 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is **CWE-22** which stems from the **improper** limitation of a pathname, leading to path traversal. **CWE-434** is a secondary weakness, because the path traversal allows for unrestricted upload of dangerous file types. **CWE-1336** may be present due to the potential for SSTI, which involves improper neutralization of special elements used in a template engine.\n\n```mermaid\ngraph TD\n    cwe22[\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"]\n    cwe434[\"CWE-434: Unrestricted Upload of File with Dangerous Type\"]\n    cwe1336[\"CWE-1336: Improper Neutralization of Special Elements Used in a Template Engine\"]\n    \n    cwe434 -->|CANFOLLOW| cwe22\n    cwe1336 -->|CANFOLLOW| cwe22\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe22 primary\n    class cwe434,cwe1336 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with an **improper** path traversal (**CWE-22**), which allows for unrestricted upload of dangerous file types (**CWE-434**). This can potentially lead to server-side template injection (**CWE-1336**) and remote code execution (RCE).\n  - The **Primary CWE** is **CWE-22** as the improper path validation is the root cause that leads to the other weaknesses.\n\n## Summary of Analysis\nThe assessment is heavily based on the vulnerability description and the CVE reference link content summary. The root cause is the insufficient sanitization of the file path due to the **double file// scheme**, allowing an attacker to bypass local file system validation. This leads to file overwriting through malicious uploads, unauthorized access to sensitive files, and potential RCE via SSTI payloads.\n\nThe selection of **CWE-22** as the primary CWE is justified because the vulnerability stems from the **improper** limitation of a pathname to a restricted directory. The use of the **double file// scheme** bypasses the intended path validation, allowing the attacker to specify arbitrary local file system locations. This aligns directly with the description of **CWE-22**.\n\n**CWE-434** is included as a secondary CWE because the path traversal allows for the unrestricted upload of dangerous file types, which can lead to further exploitation.\n\n**CWE-1336** is included as a possible secondary CWE because the vulnerability description mentions the potential for SSTI, which involves improper neutralization of special elements used in a template engine. However, the evidence for SSTI is not as strong, so the confidence in this mapping is lower.\n\nOther CWEs Considered but Not Used:\n*   **CWE-425 (Direct Request ('Forced Browsing'))**: While the vulnerability involves unauthorized access, it's primarily due to path traversal, not **missing** authorization checks.\n*   **CWE-41 (Improper Resolution of Path Equivalence)**: While related to path manipulation, the **double file// scheme** is more directly related to traversing outside the intended directory.\n*   **CWE-79 (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'))**: Not relevant as the vulnerability isn't related to XSS.\n*   **CWE-472 (External Control of Assumed-Immutable Web Parameter)**: Not relevant as the vulnerability isn't related to modification of assumed-immutable web parameters.\n*   **CWE-178 (Improper Handling of Case Sensitivity)**: Not relevant as the vulnerability isn't related to case sensitivity.\n*   **CWE-552 (Files or Directories Accessible to External Parties)**: While a consequence, the root cause is the path traversal, not directly making files accessible.\n*   **CWE-116 (Improper Encoding or Escaping of Output)**: Not relevant as the vulnerability isn't related to encoding or escaping of output.\n*   **CWE-184 (Incomplete List of Disallowed Inputs)**: Not relevant as the vulnerability isn't related to a list of disallowed inputs.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-116:**\n- 116 (Improper Encoding or Escaping of Output) - ROOT\n\n\n**Chain starting from CWE-41:**\n- 41 (Improper Resolution of Path Equivalence) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "1007",
        "name": "Insufficient Visual Distinction of Homoglyphs Presented to User",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Homograph Attack",
        "match_reason": "phrase_in_term_compound_part_1"
      },
      "similarity": 700.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "1021",
        "name": "Improper Restriction of Rendered UI Layers or Frames",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Clickjacking",
        "match_reason": "phrase_in_term_compound_part_1"
      },
      "similarity": 700.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "1022",
        "name": "Use of Web Link to Untrusted Target with window.opener Access",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: tabnabbing",
        "match_reason": "phrase_in_term_compound_part_1"
      },
      "similarity": 700.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "1336",
        "name": "Improper Neutralization of Special Elements Used in a Template Engine",
        "source": "sparse"
      },
      "similarity": 1000.0
    },
    {
      "metadata": {
        "doc_id": "22",
        "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
        "source": "sparse"
      },
      "similarity": 495.843197870786
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "source": "sparse"
      },
      "similarity": 487.5171468922682
    },
    {
      "metadata": {
        "doc_id": "285",
        "name": "Improper Authorization",
        "source": "sparse"
      },
      "similarity": 481.05637335694354
    },
    {
      "metadata": {
        "doc_id": "23",
        "name": "Relative Path Traversal",
        "source": "sparse"
      },
      "similarity": 477.03156888733065
    },
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "type": "Compound",
        "original_content": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
        "keyphrase_source": "weakness:Server-Side Template Injection",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This is a well-known Composite of multiple weaknesses that must all occur simultaneously, although it is attack-oriented in nature.",
          "comments": "While attack-oriented composites are supported in CWE, they have not been a focus of research. There is a chance that future research or CWE scope clarifications will change or deprecate them. Perform root-cause analysis to determine if other weaknesses allow CSRF attacks to occur, and map to those weaknesses. For example, predictable CSRF tokens might allow bypass of CSRF protection mechanisms; if this occurs, they might be better characterized as randomness/predictability weaknesses.",
          "reasons": [
            "Other"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.6027935393859295
          }
        }
      },
      "similarity": 0.6027935393859295
    },
    {
      "doc_id": "183",
      "text": "CWE-183: Permissive List of Allowed Inputs",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "183",
        "name": "Permissive List of Allowed Inputs",
        "type": "base",
        "original_content": "CWE-183: Permissive List of Allowed Inputs",
        "relationships": [
          {
            "source_id": "183",
            "target_id": "942",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "183",
            "target_id": "434",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "183",
            "target_id": "697",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "942",
            "target_id": "183",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "697",
            "target_id": "183",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "627",
            "target_id": "183",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "625",
            "target_id": "183",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "183",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "186",
            "target_id": "183",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "434",
                  "183",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "434"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "434",
                  "183",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "434"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "183",
                  "434",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "434"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-116",
      "CWE-41",
      "CWE-22",
      "CWE-79",
      "CWE-1336",
      "CWE-472",
      "CWE-178",
      "CWE-552",
      "CWE-184",
      "CWE-425",
      "CWE-434"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}