{
  "cve_id": "CVE-2025-48069",
  "description": "ejson2env allows users to decrypt EJSON secrets and export them as environment variables. Prior to version 2.0.8, the `ejson2env` tool has a vulnerability related to how it writes to `stdout`. Specifically, the tool is intended to write an export statement for environment variables and their values. However, due to **inadequate **output sanitization****, there is a potential risk where variable names or values may include malicious content, resulting in additional unintended commands being output to `stdout`. If this output is improperly utilized in further command execution, it could lead to **command injection**, allowing an attacker to execute arbitrary commands on the host system. Version 2.0.8 sanitizes output during decryption. Other mitigations involve avoiding use of `ejson2env` to decrypt untrusted user secrets and/or avoiding evaluating or executing the direct output from `ejson2env` without removing nonprintable characters.",
  "key_phrases": {
    "rootcause": "inadequate output sanitization",
    "weakness": [
      "output sanitization",
      "command injection"
    ],
    "impact": [
      "execute arbitrary commands",
      "command execution"
    ],
    "vector": "",
    "attacker": "",
    "product": "ejson2env",
    "version": "prior to 2.0.8",
    "component": ""
  },
  "reference_content": "```text\nBased on the provided content, I can extract the following information about CVE-2025-48069:\n\n*   **Root cause of vulnerability:** The `ejson2env` tool has a vulnerability related to how it writes to `stdout`. Specifically, the tool is intended to write an export statement for environment variables and their values. However, due to inadequate output sanitization, there is a potential risk where variable names or values may include malicious content, resulting in additional unintended commands being output to `stdout`. The vulnerability exists because environment variables are not properly sanitized during the decryption phase, which enables malicious keys or encrypted values to inject commands.\n*   **Weaknesses/vulnerabilities present:** Insufficient input sanitization in `ejson2env`. Command injection vulnerability.\n*   **Impact of exploitation:** An attacker with control over `.ejson` files can inject commands in the environment where `source $(ejson2env)` or `eval ejson2env` are executed. This could lead to command injection vulnerabilities, allowing an attacker to execute arbitrary commands on the host system.\n*   **Attack vectors:** An attacker can inject commands in the environment where `source $(ejson2env)` or `eval ejson2env` are executed.\n*   **Required attacker capabilities/position:** An attacker with control over `.ejson` files.\n*   **Mitigation or fix:**\n    *   Update to a version of `ejson2env` that sanitizes the output during decryption or\n    *   Do not use `ejson2env` to decrypt untrusted user secrets or\n    *   Do not evaluate or execute the direct output from `ejson2env` without removing nonprintable characters.\n\nThis content provides more detail than the official CVE description because it gives the root cause, attack vector, and mitigation steps, which may not be present in the standard CVE description.\n```",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID  | CWE Name                                                                                             | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :----------------------------------------------------------------------------------------------------- | :--------- | :---------------------- | :------------------------------ | :------------------------------ |\n| CWE-116   | Improper Encoding or Escaping of Output                                                              | 0.9        | Class                   | Primary                         | Allowed-with-Review           |\n| CWE-74    | Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')   | 0.7        | Class                   | Secondary                       | Discouraged                   |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary relationship influencing the selection was the parent-child relationship between CWE-74 and more specific injection CWEs, and the high retriever scores for CWE-116. While CWE-74 is a valid high-level classification, CWE-116 more precisely describes the **root cause** of the vulnerability. The evidence points towards a failure to properly encode or escape output, leading to potential command injection, but the immediate cause is the encoding issue.\n\n```mermaid\ngraph TD\n    cwe116[\"CWE-116: Improper Encoding or Escaping of Output\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n    \n    cwe116 -->|CANPRECEDE| cwe74\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe116 primary\n    class cwe74 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with **inadequate output sanitization** (CWE-116), which leads to the possibility of **command injection** (CWE-74), ultimately resulting in the ability to **execute arbitrary commands** on the host system.\n\n## Summary of Analysis\n\nThe initial analysis considered the high retriever scores for CWE-116 and CWE-74. The description explicitly mentions **inadequate output sanitization**, which aligns perfectly with CWE-116's description of **improper encoding or escaping of output**. The resulting **command injection** is a consequence of this **improper sanitization**, making CWE-74 a secondary consideration.\n\nThe selection is based on the evidence from the vulnerability description: \"However, due to **inadequate output sanitization**, there is a potential risk where variable names or values may include malicious content, resulting in additional unintended commands being output to `stdout`. If this output is improperly utilized in further command execution, it could lead to **command injection**, allowing an attacker to execute arbitrary commands on the host system.\"\n\nCWE-116 is chosen as the primary CWE because it represents the most immediate and fundamental weakness: the **failure to properly encode or escape output**. This failure directly leads to the possibility of injecting unintended commands. While command injection is a significant consequence, it's a secondary effect of the initial **improper output handling**.\n\nThe selected CWEs are at the optimal level of specificity. CWE-116 is a Class-level CWE, but it accurately reflects the nature of the weakness, and there isn't a more specific Base or Variant CWE that would be more appropriate.\n\nRelevant CWE Information:\n\nCWE-116: Improper Encoding or Escaping of Output\n\n*   **Technical Explanation:** The `ejson2env` tool **fails to properly encode or escape** special characters or sequences in the output that it writes to `stdout`. This allows an attacker to inject arbitrary commands into the output, which can then be executed by a downstream component that processes the output.\n*   **Security Implications:** This can lead to arbitrary command execution on the host system, potentially allowing an attacker to gain complete control of the system.\n*   **Relationship Analysis:** CWE-116 can precede CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')), as the **improper encoding or escaping** is often a prerequisite for successful injection attacks.\n*   **Mapping Guidance Influence:** Usage: Allowed-with-Review. This CWE entry is a Class and might have Base-level children that would be more appropriate. No base-level children were suitable.\n*   **Primary/Secondary:** Primary\n\nCWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n\n*   **Technical Explanation:** The `ejson2env` tool constructs output by including external input (variable names and values) without proper neutralization. This allows an attacker to inject special elements that can modify how the output is interpreted by a downstream component, leading to command execution.\n*   **Security Implications:** This can lead to arbitrary command execution on the host system, potentially allowing an attacker to gain complete control of the system.\n*   **Relationship Analysis:** This is a consequence of the **improper encoding or escaping** (CWE-116).\n*   **Mapping Guidance Influence:** Usage: Discouraged. CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate. Since CWE-116 is also high-level, and no more specific CWEs are available, this is a valid secondary classification.\n*   **Primary/Secondary:** Secondary\n\nCWEs Considered but Not Used:\n\n*   CWE-138: Improper Neutralization of Special Elements: While related to neutralization, it is too broad and doesn't specifically address the output encoding/escaping issue.\n*   CWE-214: Invocation of Process Using Visible Sensitive Information: This is not the primary issue, as the vulnerability is about the **improper handling of output**, not the visibility of sensitive information.\n*   CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'): This is not relevant, as the vulnerability doesn't involve path manipulation.\n*   CWE-1336: Improper Neutralization of Special Elements Used in a Template Engine: Not relevant as the application doesn't use template engine.\n*   CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection'): Not relevant as the application doesn't use eval.",
  "analysis_with_relationships": "# Summary\n| CWE ID  | CWE Name                                                                                             | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :----------------------------------------------------------------------------------------------------- | :--------- | :---------------------- | :------------------------------ | :------------------------------ |\n| CWE-116   | Improper Encoding or Escaping of Output                                                              | 0.9        | Class                   | Primary                         | Allowed-with-Review           |\n| CWE-74    | Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')   | 0.7        | Class                   | Secondary                       | Discouraged                   |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary relationship influencing the selection was the parent-child relationship between CWE-74 and more specific injection CWEs, and the high retriever scores for CWE-116. While CWE-74 is a valid high-level classification, CWE-116 more precisely describes the **root cause** of the vulnerability. The evidence points towards a failure to properly encode or escape output, leading to potential command injection, but the immediate cause is the encoding issue.\n\n```mermaid\ngraph TD\n    cwe116[\"CWE-116: Improper Encoding or Escaping of Output\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n    \n    cwe116 -->|CANPRECEDE| cwe74\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe116 primary\n    class cwe74 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with **inadequate output sanitization** (CWE-116), which leads to the possibility of **command injection** (CWE-74), ultimately resulting in the ability to **execute arbitrary commands** on the host system.\n\n## Summary of Analysis\n\nThe initial analysis considered the high retriever scores for CWE-116 and CWE-74. The description explicitly mentions **inadequate output sanitization**, which aligns perfectly with CWE-116's description of **improper encoding or escaping of output**. The resulting **command injection** is a consequence of this **improper sanitization**, making CWE-74 a secondary consideration.\n\nThe selection is based on the evidence from the vulnerability description: \"However, due to **inadequate output sanitization**, there is a potential risk where variable names or values may include malicious content, resulting in additional unintended commands being output to `stdout`. If this output is improperly utilized in further command execution, it could lead to **command injection**, allowing an attacker to execute arbitrary commands on the host system.\"\n\nCWE-116 is chosen as the primary CWE because it represents the most immediate and fundamental weakness: the **failure to properly encode or escape output**. This failure directly leads to the possibility of injecting unintended commands. While command injection is a significant consequence, it's a secondary effect of the initial **improper output handling**.\n\nThe selected CWEs are at the optimal level of specificity. CWE-116 is a Class-level CWE, but it accurately reflects the nature of the weakness, and there isn't a more specific Base or Variant CWE that would be more appropriate.\n\nRelevant CWE Information:\n\nCWE-116: Improper Encoding or Escaping of Output\n\n*   **Technical Explanation:** The `ejson2env` tool **fails to properly encode or escape** special characters or sequences in the output that it writes to `stdout`. This allows an attacker to inject arbitrary commands into the output, which can then be executed by a downstream component that processes the output.\n*   **Security Implications:** This can lead to arbitrary command execution on the host system, potentially allowing an attacker to gain complete control of the system.\n*   **Relationship Analysis:** CWE-116 can precede CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')), as the **improper encoding or escaping** is often a prerequisite for successful injection attacks.\n*   **Mapping Guidance Influence:** Usage: Allowed-with-Review. This CWE entry is a Class and might have Base-level children that would be more appropriate. No base-level children were suitable.\n*   **Primary/Secondary:** Primary\n\nCWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n\n*   **Technical Explanation:** The `ejson2env` tool constructs output by including external input (variable names and values) without proper neutralization. This allows an attacker to inject special elements that can modify how the output is interpreted by a downstream component, leading to command execution.\n*   **Security Implications:** This can lead to arbitrary command execution on the host system, potentially allowing an attacker to gain complete control of the system.\n*   **Relationship Analysis:** This is a consequence of the **improper encoding or escaping** (CWE-116).\n*   **Mapping Guidance Influence:** Usage: Discouraged. CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate. Since CWE-116 is also high-level, and no more specific CWEs are available, this is a valid secondary classification.\n*   **Primary/Secondary:** Secondary\n\nCWEs Considered but Not Used:\n\n*   CWE-138: Improper Neutralization of Special Elements: While related to neutralization, it is too broad and doesn't specifically address the output encoding/escaping issue.\n*   CWE-214: Invocation of Process Using Visible Sensitive Information: This is not the primary issue, as the vulnerability is about the **improper handling of output**, not the visibility of sensitive information.\n*   CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'): This is not relevant, as the vulnerability doesn't involve path manipulation.\n*   CWE-1336: Improper Neutralization of Special Elements Used in a Template Engine: Not relevant as the application doesn't use template engine.\n*   CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection'): Not relevant as the application doesn't use eval.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-116:**\n- 116 (Improper Encoding or Escaping of Output) - ROOT\n\n\n**Chain starting from CWE-22:**\n- 22 (Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse",
        "original_content": "The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.",
        "keyphrase_sources": [
          {
            "id": "rootcause:inadequate output sanitization",
            "keyphrase": "inadequate output sanitization",
            "type": "rootcause"
          },
          {
            "id": "weakness:output sanitization",
            "keyphrase": "output sanitization",
            "type": "weakness"
          },
          {
            "id": "weakness:command injection",
            "keyphrase": "command injection",
            "type": "weakness"
          },
          {
            "id": "impact:execute arbitrary commands",
            "keyphrase": "execute arbitrary commands",
            "type": "impact"
          },
          {
            "id": "impact:command execution",
            "keyphrase": "command execution",
            "type": "impact"
          },
          {
            "id": "product:ejson2env",
            "keyphrase": "ejson2env",
            "type": "product"
          },
          {
            "id": "version:prior to 2.0.8",
            "keyphrase": "prior to 2.0.8",
            "type": "version"
          }
        ]
      },
      "similarity": 777.3030909373044
    },
    {
      "metadata": {
        "doc_id": "214",
        "name": "Invocation of Process Using Visible Sensitive Information",
        "source": "sparse",
        "original_content": "A process is invoked with sensitive command-line arguments, environment variables, or other elements that can be seen by other processes on the operating system.",
        "keyphrase_sources": [
          {
            "id": "rootcause:inadequate output sanitization",
            "keyphrase": "inadequate output sanitization",
            "type": "rootcause"
          },
          {
            "id": "weakness:output sanitization",
            "keyphrase": "output sanitization",
            "type": "weakness"
          },
          {
            "id": "weakness:command injection",
            "keyphrase": "command injection",
            "type": "weakness"
          },
          {
            "id": "impact:execute arbitrary commands",
            "keyphrase": "execute arbitrary commands",
            "type": "impact"
          },
          {
            "id": "impact:command execution",
            "keyphrase": "command execution",
            "type": "impact"
          },
          {
            "id": "product:ejson2env",
            "keyphrase": "ejson2env",
            "type": "product"
          },
          {
            "id": "version:prior to 2.0.8",
            "keyphrase": "prior to 2.0.8",
            "type": "version"
          }
        ]
      },
      "similarity": 722.0692874181539
    },
    {
      "metadata": {
        "doc_id": "138",
        "name": "Improper Neutralization of Special Elements",
        "source": "sparse",
        "original_content": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.",
        "keyphrase_sources": [
          {
            "id": "rootcause:inadequate output sanitization",
            "keyphrase": "inadequate output sanitization",
            "type": "rootcause"
          },
          {
            "id": "weakness:output sanitization",
            "keyphrase": "output sanitization",
            "type": "weakness"
          },
          {
            "id": "weakness:command injection",
            "keyphrase": "command injection",
            "type": "weakness"
          }
        ]
      },
      "similarity": 685.8465724762724
    },
    {
      "metadata": {
        "doc_id": "74",
        "name": "Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')",
        "source": "sparse",
        "original_content": "The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.",
        "keyphrase_sources": [
          {
            "id": "rootcause:inadequate output sanitization",
            "keyphrase": "inadequate output sanitization",
            "type": "rootcause"
          },
          {
            "id": "weakness:output sanitization",
            "keyphrase": "output sanitization",
            "type": "weakness"
          },
          {
            "id": "weakness:command injection",
            "keyphrase": "command injection",
            "type": "weakness"
          },
          {
            "id": "impact:command execution",
            "keyphrase": "command execution",
            "type": "impact"
          },
          {
            "id": "product:ejson2env",
            "keyphrase": "ejson2env",
            "type": "product"
          },
          {
            "id": "version:prior to 2.0.8",
            "keyphrase": "prior to 2.0.8",
            "type": "version"
          }
        ]
      },
      "similarity": 665.9018330219583
    },
    {
      "metadata": {
        "doc_id": "22",
        "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
        "source": "sparse",
        "original_content": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
        "keyphrase_sources": [
          {
            "id": "rootcause:inadequate output sanitization",
            "keyphrase": "inadequate output sanitization",
            "type": "rootcause"
          },
          {
            "id": "weakness:output sanitization",
            "keyphrase": "output sanitization",
            "type": "weakness"
          },
          {
            "id": "impact:execute arbitrary commands",
            "keyphrase": "execute arbitrary commands",
            "type": "impact"
          },
          {
            "id": "impact:command execution",
            "keyphrase": "command execution",
            "type": "impact"
          },
          {
            "id": "product:ejson2env",
            "keyphrase": "ejson2env",
            "type": "product"
          },
          {
            "id": "version:prior to 2.0.8",
            "keyphrase": "prior to 2.0.8",
            "type": "version"
          }
        ]
      },
      "similarity": 656.7910668515789
    },
    {
      "metadata": {
        "doc_id": "1336",
        "name": "Improper Neutralization of Special Elements Used in a Template Engine",
        "source": "sparse",
        "original_content": "The product uses a template engine to insert or process externally-influenced input, but it does not neutralize or incorrectly neutralizes special elements or syntax that can be interpreted as template expressions or other code directives when processed by the engine.",
        "keyphrase_sources": [
          {
            "id": "weakness:command injection",
            "keyphrase": "command injection",
            "type": "weakness"
          },
          {
            "id": "impact:execute arbitrary commands",
            "keyphrase": "execute arbitrary commands",
            "type": "impact"
          },
          {
            "id": "impact:command execution",
            "keyphrase": "command execution",
            "type": "impact"
          },
          {
            "id": "product:ejson2env",
            "keyphrase": "ejson2env",
            "type": "product"
          },
          {
            "id": "version:prior to 2.0.8",
            "keyphrase": "prior to 2.0.8",
            "type": "version"
          }
        ]
      },
      "similarity": 641.2536928230769
    },
    {
      "metadata": {
        "doc_id": "95",
        "name": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
        "source": "sparse",
        "original_content": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. \"eval\").",
        "keyphrase_sources": [
          {
            "id": "impact:execute arbitrary commands",
            "keyphrase": "execute arbitrary commands",
            "type": "impact"
          }
        ]
      },
      "similarity": 226.39770929861024
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-116",
      "CWE-22",
      "CWE-1336",
      "CWE-95",
      "CWE-74",
      "CWE-138",
      "CWE-214"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {
    "116": [
      {
        "id": "rootcause:inadequate output sanitization",
        "keyphrase": "inadequate output sanitization",
        "type": "rootcause"
      },
      {
        "id": "weakness:output sanitization",
        "keyphrase": "output sanitization",
        "type": "weakness"
      },
      {
        "id": "weakness:command injection",
        "keyphrase": "command injection",
        "type": "weakness"
      },
      {
        "id": "impact:execute arbitrary commands",
        "keyphrase": "execute arbitrary commands",
        "type": "impact"
      },
      {
        "id": "impact:command execution",
        "keyphrase": "command execution",
        "type": "impact"
      },
      {
        "id": "product:ejson2env",
        "keyphrase": "ejson2env",
        "type": "product"
      },
      {
        "id": "version:prior to 2.0.8",
        "keyphrase": "prior to 2.0.8",
        "type": "version"
      }
    ],
    "214": [
      {
        "id": "rootcause:inadequate output sanitization",
        "keyphrase": "inadequate output sanitization",
        "type": "rootcause"
      },
      {
        "id": "weakness:output sanitization",
        "keyphrase": "output sanitization",
        "type": "weakness"
      },
      {
        "id": "weakness:command injection",
        "keyphrase": "command injection",
        "type": "weakness"
      },
      {
        "id": "impact:execute arbitrary commands",
        "keyphrase": "execute arbitrary commands",
        "type": "impact"
      },
      {
        "id": "impact:command execution",
        "keyphrase": "command execution",
        "type": "impact"
      },
      {
        "id": "product:ejson2env",
        "keyphrase": "ejson2env",
        "type": "product"
      },
      {
        "id": "version:prior to 2.0.8",
        "keyphrase": "prior to 2.0.8",
        "type": "version"
      }
    ],
    "138": [
      {
        "id": "rootcause:inadequate output sanitization",
        "keyphrase": "inadequate output sanitization",
        "type": "rootcause"
      },
      {
        "id": "weakness:output sanitization",
        "keyphrase": "output sanitization",
        "type": "weakness"
      },
      {
        "id": "weakness:command injection",
        "keyphrase": "command injection",
        "type": "weakness"
      }
    ],
    "74": [
      {
        "id": "rootcause:inadequate output sanitization",
        "keyphrase": "inadequate output sanitization",
        "type": "rootcause"
      },
      {
        "id": "weakness:output sanitization",
        "keyphrase": "output sanitization",
        "type": "weakness"
      },
      {
        "id": "weakness:command injection",
        "keyphrase": "command injection",
        "type": "weakness"
      },
      {
        "id": "impact:command execution",
        "keyphrase": "command execution",
        "type": "impact"
      },
      {
        "id": "product:ejson2env",
        "keyphrase": "ejson2env",
        "type": "product"
      },
      {
        "id": "version:prior to 2.0.8",
        "keyphrase": "prior to 2.0.8",
        "type": "version"
      }
    ],
    "22": [
      {
        "id": "rootcause:inadequate output sanitization",
        "keyphrase": "inadequate output sanitization",
        "type": "rootcause"
      },
      {
        "id": "weakness:output sanitization",
        "keyphrase": "output sanitization",
        "type": "weakness"
      },
      {
        "id": "impact:execute arbitrary commands",
        "keyphrase": "execute arbitrary commands",
        "type": "impact"
      },
      {
        "id": "impact:command execution",
        "keyphrase": "command execution",
        "type": "impact"
      },
      {
        "id": "product:ejson2env",
        "keyphrase": "ejson2env",
        "type": "product"
      },
      {
        "id": "version:prior to 2.0.8",
        "keyphrase": "prior to 2.0.8",
        "type": "version"
      }
    ],
    "1336": [
      {
        "id": "weakness:command injection",
        "keyphrase": "command injection",
        "type": "weakness"
      },
      {
        "id": "impact:execute arbitrary commands",
        "keyphrase": "execute arbitrary commands",
        "type": "impact"
      },
      {
        "id": "impact:command execution",
        "keyphrase": "command execution",
        "type": "impact"
      },
      {
        "id": "product:ejson2env",
        "keyphrase": "ejson2env",
        "type": "product"
      },
      {
        "id": "version:prior to 2.0.8",
        "keyphrase": "prior to 2.0.8",
        "type": "version"
      }
    ],
    "95": [
      {
        "id": "impact:execute arbitrary commands",
        "keyphrase": "execute arbitrary commands",
        "type": "impact"
      }
    ]
  }
}