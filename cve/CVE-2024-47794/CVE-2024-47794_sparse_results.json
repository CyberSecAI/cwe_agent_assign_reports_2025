{
  "query": "In the Linux kernel, the following vulnerability has been resolved bpf Prevent tailcall infinite loop caused by freplace There is a potential infinite loop issue that can occur when using a combination of tail calls and freplace. In an upcoming selftest, the attach target for entry_freplace of tailcall_freplace.c is subprog_tc of tc_bpf2bpf.c, while the tail call in entry_freplace leads to entry_tc. This results in an infinite loop entry_tc -> subprog_tc -> entry_freplace --tailcall-> entry_tc. The problem arises because the tail_call_cnt in entry_freplace resets to zero each time entry_freplace is executed, causing the tail call mechanism to never terminate, eventually leading to a kernel panic. To fix this issue, the solution is twofold 1. Prevent updating a program extended by an freplace program to a prog_array map. 2. Prevent extending a program that is already part of a prog_array map with an freplace program. This ensures that * If a program or its subprogram has been extended by an freplace program, it can no longer be updated to a prog_array map. * If a program has been added to a prog_array map, neither it nor its subprograms can be extended by an freplace program. Moreover, an extension program should not be tailcalled. As such, return -EINVAL if the program has a type of BPF_PROG_TYPE_EXT when adding it to a prog_array map. Additionally, fix a minor code style issue by replacing eight spaces with a tab for proper formatting.",
  "count": 10,
  "results": [
    {
      "cwe_id": "674",
      "name": "Uncontrolled Recursion",
      "abstraction": "Class",
      "score": 1226.4579354154969,
      "original_score": 1226.4579354154969,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "835",
      "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
      "abstraction": "Base",
      "score": 1178.0223907218337,
      "original_score": 1178.0223907218337,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "abstraction": "Class",
      "score": 1166.799672247159,
      "original_score": 1166.799672247159,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "457",
      "name": "Use of Uninitialized Variable",
      "abstraction": "Variant",
      "score": 1154.4523590993917,
      "original_score": 1154.4523590993917,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "abstraction": "Base",
      "score": 1117.3260734202993,
      "original_score": 1117.3260734202993,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "abstraction": "Base",
      "score": 1116.2643165443387,
      "original_score": 1116.2643165443387,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "abstraction": "Class",
      "score": 1114.8978464670406,
      "original_score": 1114.8978464670406,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "194",
      "name": "Unexpected Sign Extension",
      "abstraction": "Variant",
      "score": 1109.3274946774573,
      "original_score": 1109.3274946774573,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "abstraction": "Base",
      "score": 1108.3025159810863,
      "original_score": 1108.3025159810863,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "407",
      "name": "Inefficient Algorithmic Complexity",
      "abstraction": "Class",
      "score": 1107.352285006171,
      "original_score": 1107.352285006171,
      "mapping_usage": "Allowed-with-Review"
    }
  ],
  "statistics": {
    "min": 1107.352285006171,
    "max": 1226.4579354154969,
    "mean": 1139.9202889580274,
    "median": 1116.7951949823191,
    "count": 10
  }
}