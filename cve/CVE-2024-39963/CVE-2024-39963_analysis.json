{
  "cve_id": "CVE-2024-39963",
  "description": "AX3000 Dual-Band Gigabit Wi-Fi 6 Router AX9 V22.03.01.46 and AX3000 Dual-Band Gigabit Wi-Fi 6 Router AX12 V1.0 V22.03.01.46 were discovered to contain an authenticated remote command execution (RCE) vulnerability via the macFilterType parameter at /goform/setMacFilterCfg.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "",
    "impact": "remote command execution",
    "vector": "macFilterType parameter",
    "attacker": "authenticated",
    "product": [
      "AX3000 Dual-Band Gigabit Wi-Fi 6 Router",
      "AX3000 Dual-Band Gigabit Wi-Fi 6 Router"
    ],
    "version": [
      "V22.03.01.46",
      "V22.03.01.46"
    ],
    "component": "/goform/setMacFilterCfg"
  },
  "reference_content": "Based on the provided content, here's an analysis of the vulnerability:\n\n**Root Cause:**\n\nThe root cause of the vulnerability lies in the lack of proper input sanitization for the `macFilterType` parameter within the `/goform/setMacFilterCfg` request handler on Tenda AX9 and AX12 routers. The router's web server directly uses this unsanitized input in a `strcpy` operation, which can lead to writing arbitrary characters into the file system. Furthermore, the router compares the original and new value of `macFilterType`, and if different, executes a command via `doSystemCmd`.\n\n**Weaknesses/Vulnerabilities:**\n\n1.  **Lack of Input Sanitization:** The `macFilterType` parameter is not validated or sanitized, allowing an attacker to inject arbitrary characters.\n2.  **Insecure String Copy:** The use of `strcpy` with attacker-controlled data can lead to buffer overflows or other memory corruption issues if the length is not carefully managed. While the code includes a check to ensure the length doesn't exceed 17 bytes, the attacker has full control over this 17-byte input, including special characters.\n3.  **Command Injection:** By writing specific characters, the attacker can construct a malicious command using `printf` and write it to a temporary file. When the `macFilterType` value is subsequently changed, a shell command is executed, resulting in arbitrary command execution.\n4.  **Insufficient command injection checks:** The `doSystemCmd` has insufficient checks allowing injection by avoiding the strings `liuguizhou` and `telnetd`.\n\n**Impact of Exploitation:**\n\n*   **Remote Code Execution (RCE):** An attacker can execute arbitrary commands on the router's operating system with root privileges.\n*   **Full System Compromise:**  RCE gives an attacker complete control over the router, allowing them to:\n    *   Modify configurations\n    *   Steal data\n    *   Install malware\n    *   Use the router as part of a botnet.\n*   **Loss of Confidentiality and Integrity:** An attacker could potentially access network traffic or sensitive data passing through the router and perform malicious actions within the local network.\n\n**Attack Vectors:**\n\n*   **HTTP Request:** The attacker sends a specifically crafted HTTP POST request to the `/goform/setMacFilterCfg` endpoint.\n*   **`macFilterType` Parameter:** The malicious payload is injected into the `macFilterType` parameter.\n\n**Required Attacker Capabilities/Position:**\n\n*   **Network Access:** The attacker must have network access to the router's web interface. This could be from the local network or potentially from the WAN if remote administration is enabled.\n*   **Authentication:** The attacker needs valid admin credentials to access the vulnerable endpoint.\n*   **Understanding of the Exploit:** The attacker needs to understand how to craft the malicious input for the `macFilterType` parameter to achieve arbitrary command execution.\n\n**Additional Details:**\nThe exploit is a multi-step process:\n\n1. The attacker logs in to the router's web interface using valid credentials.\n2. Obtains `stok` and `sign` from the `/goform/stokCfg` endpoint.\n3. The attacker sends a crafted POST request to `/goform/setMacFilterCfg` with a malicious payload within the `macFilterType` parameter, using the retrieved `stok` and `sign` for encryption. This payload uses `printf` to write a shell script to a temporary file.\n4. The attacker modifies the `macFilterType` value in a subsequent POST request, triggering the execution of the injected script using `doSystemCmd`.\n5. The exploit in the script removes the root password and enables `telnetd`, enabling remote access for the attacker.\n\nThe provided exploit code demonstrates how to automate this process, including login, payload crafting, and sending the malicious requests.\n\nThis content provides more detail than a typical CVE description by giving:\n- Specific vulnerable parameter\n- Root cause analysis\n- Full exploit chain\n- Full exploit code",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-78 | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | 1.0 | Base | Allowed | Primary CWE: **Root cause** is **improper neutralization** of `macFilterType` parameter leading to OS Command Injection. |\n| CWE-120 | Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') | 0.75 | Base | Allowed-with-Review | Secondary candidate: The `strcpy` without sufficient bounds checking contributes to the vulnerability, although the primary issue is the command injection. The check for length of 17 bytes is not sufficient to prevent command injection. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary relationship impacting the decision is that CWE-78 is a specific type of injection that can be triggered by insufficient input validation. CWE-78 is a `CHILDOF` CWE-77 (Command Injection) and CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component). CWE-120 is a `CANPRECEDE` CWE-78 as a buffer overflow can lead to overwriting memory and injecting commands. Choosing the `Base` level CWE provides the most specific description of the vulnerability.\n\n```mermaid\ngraph TD\n    cwe78[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"]\n    cwe77[\"CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n    cwe120[\"CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\"]\n\n    cwe78 -->|CHILDOF| cwe77\n    cwe78 -->|CHILDOF| cwe74\n    cwe120 -->|CANPRECEDE| cwe78\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe78 primary\n    class cwe77,cwe74,cwe120 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with the **improper neutralization** of the `macFilterType` parameter (CWE-78), which is then used in an insecure `strcpy` operation (CWE-120). This allows an attacker to inject a malicious command, leading to remote command execution.\n\n## Summary of Analysis\n\nThe primary CWE is CWE-78 because the **root cause** of the vulnerability lies in the **lack of proper input sanitization** of the `macFilterType` parameter, which allows an attacker to inject OS commands. The detailed CVE description includes evidence that the router's web server directly uses this unsanitized input in a `strcpy` operation, and then executes a command via `doSystemCmd` if the value has changed. This aligns perfectly with the description of CWE-78.\n\nCWE-120 is a secondary weakness because the `strcpy` without sufficient bounds checking contributes to the vulnerability, but the primary issue is the command injection.\n\nThe choice of CWE-78 is supported by the \"Retriever Results\", which lists it as the top candidate CWE. The evidence provided in the CVE description strongly supports this classification.\n\nOther CWEs were considered but ultimately not selected as the primary CWE:\n\n*   CWE-20 (Improper Input Validation): While input validation is missing, CWE-78 is more specific to the type of vulnerability.\n*   CWE-77 (Improper Neutralization of Special Elements used in a Command ('Command Injection')): CWE-78 is a specific type of command injection related to OS commands.\n*   CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')): CWE-78 is a specific type of injection related to OS commands.\n*   CWE-121 (Stack-based Buffer Overflow): While a stack-based buffer overflow could be a contributing factor, the core issue is the ability to inject commands, making CWE-78 more relevant.",
  "analysis_with_relationships": "# Summary\n\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-78 | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | 1.0 | Base | Allowed | Primary CWE: **Root cause** is **improper neutralization** of `macFilterType` parameter leading to OS Command Injection. |\n| CWE-120 | Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') | 0.75 | Base | Allowed-with-Review | Secondary candidate: The `strcpy` without sufficient bounds checking contributes to the vulnerability, although the primary issue is the command injection. The check for length of 17 bytes is not sufficient to prevent command injection. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary relationship impacting the decision is that CWE-78 is a specific type of injection that can be triggered by insufficient input validation. CWE-78 is a `CHILDOF` CWE-77 (Command Injection) and CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component). CWE-120 is a `CANPRECEDE` CWE-78 as a buffer overflow can lead to overwriting memory and injecting commands. Choosing the `Base` level CWE provides the most specific description of the vulnerability.\n\n```mermaid\ngraph TD\n    cwe78[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"]\n    cwe77[\"CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n    cwe120[\"CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\"]\n\n    cwe78 -->|CHILDOF| cwe77\n    cwe78 -->|CHILDOF| cwe74\n    cwe120 -->|CANPRECEDE| cwe78\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe78 primary\n    class cwe77,cwe74,cwe120 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with the **improper neutralization** of the `macFilterType` parameter (CWE-78), which is then used in an insecure `strcpy` operation (CWE-120). This allows an attacker to inject a malicious command, leading to remote command execution.\n\n## Summary of Analysis\n\nThe primary CWE is CWE-78 because the **root cause** of the vulnerability lies in the **lack of proper input sanitization** of the `macFilterType` parameter, which allows an attacker to inject OS commands. The detailed CVE description includes evidence that the router's web server directly uses this unsanitized input in a `strcpy` operation, and then executes a command via `doSystemCmd` if the value has changed. This aligns perfectly with the description of CWE-78.\n\nCWE-120 is a secondary weakness because the `strcpy` without sufficient bounds checking contributes to the vulnerability, but the primary issue is the command injection.\n\nThe choice of CWE-78 is supported by the \"Retriever Results\", which lists it as the top candidate CWE. The evidence provided in the CVE description strongly supports this classification.\n\nOther CWEs were considered but ultimately not selected as the primary CWE:\n\n*   CWE-20 (Improper Input Validation): While input validation is missing, CWE-78 is more specific to the type of vulnerability.\n*   CWE-77 (Improper Neutralization of Special Elements used in a Command ('Command Injection')): CWE-78 is a specific type of command injection related to OS commands.\n*   CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')): CWE-78 is a specific type of injection related to OS commands.\n*   CWE-121 (Stack-based Buffer Overflow): While a stack-based buffer overflow could be a contributing factor, the core issue is the ability to inject commands, making CWE-78 more relevant.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-121:**\n- 121 (Stack-based Buffer Overflow) - ROOT\n\n\n**Chain starting from CWE-77:**\n- 77 (Improper Neutralization of Special Elements used in a Command ('Command Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "78",
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "source": "sparse"
      },
      "similarity": 79.6132587684195
    },
    {
      "metadata": {
        "doc_id": "121",
        "name": "Stack-based Buffer Overflow",
        "source": "sparse"
      },
      "similarity": 75.33980261949503
    },
    {
      "metadata": {
        "doc_id": "653",
        "name": "Improper Isolation or Compartmentalization",
        "source": "sparse"
      },
      "similarity": 64.22982826009185
    },
    {
      "metadata": {
        "doc_id": "77",
        "name": "Improper Neutralization of Special Elements used in a Command ('Command Injection')",
        "source": "sparse"
      },
      "similarity": 63.617170906825585
    },
    {
      "metadata": {
        "doc_id": "259",
        "name": "Use of Hard-coded Password",
        "source": "sparse"
      },
      "similarity": 57.25465378317898
    },
    {
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "source": "sparse"
      },
      "similarity": 56.77719737490875
    },
    {
      "metadata": {
        "doc_id": "287",
        "name": "Improper Authentication",
        "source": "sparse"
      },
      "similarity": 54.55214154869571
    },
    {
      "metadata": {
        "doc_id": "96",
        "name": "Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')",
        "source": "sparse"
      },
      "similarity": 52.886267226578056
    },
    {
      "metadata": {
        "doc_id": "790",
        "name": "Improper Filtering of Special Elements",
        "type": "Class",
        "original_content": "The product receives data from an upstream component, but does not filter or incorrectly filters special elements before sending it to a downstream component.",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
          "comments": "Examine children of this entry to see if there is a better fit",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.536151609698541
          }
        }
      },
      "similarity": 0.536151609698541
    },
    {
      "doc_id": "184",
      "text": "CWE-184: Incomplete List of Disallowed Inputs",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "184",
        "name": "Incomplete List of Disallowed Inputs",
        "type": "base",
        "original_content": "CWE-184: Incomplete List of Disallowed Inputs",
        "relationships": [
          {
            "source_id": "184",
            "target_id": "692",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "434",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "78",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "79",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "1023",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "693",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "86",
            "target_id": "184",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "78",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "693",
            "target_id": "184",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "692",
            "target_id": "184",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "692",
            "target_id": "184",
            "label": "STARTSWITH",
            "properties": {
              "view_id": "709"
            }
          },
          {
            "source_id": "625",
            "target_id": "184",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "186",
            "target_id": "184",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1023",
            "target_id": "184",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "78",
                  "184",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "78"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "78",
                  "184",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "78"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "184",
                  "78",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "78"
            }
          }
        },
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-121",
      "CWE-77",
      "CWE-74",
      "CWE-78",
      "CWE-20",
      "CWE-120"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}