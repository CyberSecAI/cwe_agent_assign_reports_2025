{
  "cve_id": "CVE-2024-5155",
  "description": "The Inquiry cart WordPress plugin through 3.4.2 **does not have CSRF check** in some places, and is missing **sanitisation** as well as escaping, which could allow attackers to make logged in admin add Stored **XSS** payloads via a CSRF attack",
  "key_phrases": {
    "rootcause": [
      "and escaping",
      "does not have CSRF check",
      "missing CSRF check",
      "sanitisation"
    ],
    "weakness": [
      "XSS",
      "cross-site scripting"
    ],
    "impact": "Stored XSS payloads",
    "vector": "",
    "attacker": "attackers",
    "product": "Inquiry cart WordPress plugin",
    "version": "through 3.4.2",
    "component": ""
  },
  "reference_content": "Based on the provided content, here's a breakdown of the vulnerability:\n\n**CVE ID:** CVE-2024-5155\n\n**Root Cause of Vulnerability:**\n*   The WordPress plugin \"Inquiry Cart\" lacks CSRF (Cross-Site Request Forgery) checks in certain areas.\n*   It also suffers from missing sanitization and escaping of user-supplied input.\n\n**Weaknesses/Vulnerabilities Present:**\n*   **Stored Cross-Site Scripting (XSS):** The combination of missing CSRF checks and lack of input sanitization allows an attacker to inject malicious JavaScript code into the plugin's settings, which will be stored in the database and executed when an administrator views the settings page.\n*  **CSRF (Cross-Site Request Forgery):** The plugin does not validate the origin of the requests, allowing an attacker to trick a logged-in administrator into performing actions they didn't intend to perform.\n\n**Impact of Exploitation:**\n*   An attacker can inject malicious JavaScript code that will be executed in the browser of any administrator who views the plugin's settings page. This allows an attacker to perform malicious actions as the administrator including but not limited to data theft, modification or deletion, and complete control over the website.\n\n**Attack Vectors:**\n*   **CSRF Attack:** The attacker crafts a malicious HTML page containing a form that, when submitted, will send a request to the vulnerable plugin's settings page on behalf of the logged-in administrator.\n*   **Stored XSS:** The injected JavaScript payload is stored in the plugin's settings. When the administrator visits the settings page, the payload will be executed.\n\n**Required Attacker Capabilities/Position:**\n*   The attacker needs to trick a logged-in WordPress administrator into visiting a malicious web page (or execute a similar CSRF attack).\n*   The attacker does not need any specific privileges on the target WordPress site, but they do need a target logged in as an administrator.\n\n**Additional Notes:**\n*   The provided proof of concept demonstrates how an attacker can use CSRF to inject XSS into the \"send-message-to\" field via a POST request.\n*   The affected plugin version is <= 3.4.2.\n*   The vulnerability is classified as CWE-79 (Cross-site Scripting).\n*   The CVSS score is 7.1 (High).\n*   There is no known fix available.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-352 | Cross-Site Request Forgery (CSRF) | 1.0 | Compound |  Primary | Allowed |\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 1.0 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe vulnerability description clearly states the presence of both **Cross-Site Request Forgery (CSRF)** and **Cross-site Scripting (XSS)** weaknesses. CWE-352 is a Compound weakness representing the **missing CSRF check**. CWE-79 represents the **missing sanitisation and escaping**, leading to XSS. These are distinct weaknesses that both contribute to the overall vulnerability.\n\n```mermaid\ngraph TD\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe352 primary\n    class cwe79 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with the **missing CSRF check (CWE-352)**, which allows attackers to perform actions on behalf of a logged-in administrator. This action involves adding stored **XSS payloads due to missing sanitisation and escaping (CWE-79)**. The lack of proper output encoding allows the attacker to inject malicious scripts, leading to **Stored XSS**.\n\n## Summary of Analysis\n\nThe analysis is based on the provided vulnerability description, which explicitly mentions the **missing CSRF check** and **missing sanitisation/escaping** leading to stored **XSS**. The key phrases \"does not have CSRF check\" and \"missing sanitisation as well as escaping\" directly map to CWE-352 and CWE-79, respectively. CWE-352 is selected as the primary weakness because the attack vector is initiated through a **CSRF** attack. The stored **XSS (CWE-79)** is a direct result of the **missing sanitisation and escaping** of input, and it represents the impact of the attack. Both CWEs are at the appropriate level of specificity (Compound and Base, respectively). The Retriever results strongly support both CWEs as relevant to the key phrases.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\n**Abstraction Level**: Variant\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as \"<\", \">\", and \"&\" that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-425: Direct Request ('Forced Browsing')\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-472: External Control of Assumed-Immutable Web Parameter\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-352: Cross-Site Request Forgery (CSRF)\n**Abstraction Level**: Compound\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This is a well-known Composite of multiple weaknesses that must all occur simultaneously, although it is attack-oriented in nature.\n\n\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-138: Improper Neutralization of Special Elements\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n\n\n## CWE-184: Incomplete List of Disallowed Inputs\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-807: Reliance on Untrusted Inputs in a Security Decision\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product uses a protection mechanism that relies on the existence or values of an input, but the input can be modified by an untrusted actor in a way that bypasses the protection mechanism.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-434: Unrestricted Upload of File with Dangerous Type\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product allows the upload or transfer of dangerous file types that are automatically processed within its environment.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 4162.27\n**Source**: sparse\n\n**Description**:\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-352: Cross-Site Request Forgery (CSRF)\n**Abstraction Level**: Compound\n**Similarity Score**: 4027.35\n**Source**: sparse\n\n**Description**:\nThe web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.\n\n**Mapping Guidance**:\n- Usage:",
  "analysis_with_relationships": "# Summary\n\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-352 | Cross-Site Request Forgery (CSRF) | 1.0 | Compound |  Primary | Allowed |\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 1.0 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe vulnerability description clearly states the presence of both **Cross-Site Request Forgery (CSRF)** and **Cross-site Scripting (XSS)** weaknesses. CWE-352 is a Compound weakness representing the **missing CSRF check**. CWE-79 represents the **missing sanitisation and escaping**, leading to XSS. These are distinct weaknesses that both contribute to the overall vulnerability.\n\n```mermaid\ngraph TD\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe352 primary\n    class cwe79 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with the **missing CSRF check (CWE-352)**, which allows attackers to perform actions on behalf of a logged-in administrator. This action involves adding stored **XSS payloads due to missing sanitisation and escaping (CWE-79)**. The lack of proper output encoding allows the attacker to inject malicious scripts, leading to **Stored XSS**.\n\n## Summary of Analysis\n\nThe analysis is based on the provided vulnerability description, which explicitly mentions the **missing CSRF check** and **missing sanitisation/escaping** leading to stored **XSS**. The key phrases \"does not have CSRF check\" and \"missing sanitisation as well as escaping\" directly map to CWE-352 and CWE-79, respectively. CWE-352 is selected as the primary weakness because the attack vector is initiated through a **CSRF** attack. The stored **XSS (CWE-79)** is a direct result of the **missing sanitisation and escaping** of input, and it represents the impact of the attack. Both CWEs are at the appropriate level of specificity (Compound and Base, respectively). The Retriever results strongly support both CWEs as relevant to the key phrases.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\n**Abstraction Level**: Variant\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as \"<\", \">\", and \"&\" that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-425: Direct Request ('Forced Browsing')\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-472: External Control of Assumed-Immutable Web Parameter\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-352: Cross-Site Request Forgery (CSRF)\n**Abstraction Level**: Compound\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This is a well-known Composite of multiple weaknesses that must all occur simultaneously, although it is attack-oriented in nature.\n\n\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-138: Improper Neutralization of Special Elements\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n\n\n## CWE-184: Incomplete List of Disallowed Inputs\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-807: Reliance on Untrusted Inputs in a Security Decision\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product uses a protection mechanism that relies on the existence or values of an input, but the input can be modified by an untrusted actor in a way that bypasses the protection mechanism.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-434: Unrestricted Upload of File with Dangerous Type\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product allows the upload or transfer of dangerous file types that are automatically processed within its environment.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 4162.27\n**Source**: sparse\n\n**Description**:\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-352: Cross-Site Request Forgery (CSRF)\n**Abstraction Level**: Compound\n**Similarity Score**: 4027.35\n**Source**: sparse\n\n**Description**:\nThe web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.\n\n**Mapping Guidance**:\n- Usage:\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-116:**\n- 116 (Improper Encoding or Escaping of Output) - ROOT\n\n\n**Chain starting from CWE-80:**\n- 80 (Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse",
        "original_content": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
        "keyphrase_sources": [
          {
            "id": "rootcause:and escaping",
            "keyphrase": "and escaping",
            "type": "rootcause"
          },
          {
            "id": "rootcause:does not have CSRF check",
            "keyphrase": "does not have CSRF check",
            "type": "rootcause"
          },
          {
            "id": "rootcause:missing CSRF check",
            "keyphrase": "missing CSRF check",
            "type": "rootcause"
          },
          {
            "id": "rootcause:sanitisation",
            "keyphrase": "sanitisation",
            "type": "rootcause"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "impact:Stored XSS payloads",
            "keyphrase": "Stored XSS payloads",
            "type": "impact"
          },
          {
            "id": "attacker:attackers",
            "keyphrase": "attackers",
            "type": "attacker"
          },
          {
            "id": "product:Inquiry cart WordPress plugin",
            "keyphrase": "Inquiry cart WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:through 3.4.2",
            "keyphrase": "through 3.4.2",
            "type": "version"
          }
        ]
      },
      "similarity": 482.3180627737421
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse",
        "original_content": "The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.",
        "keyphrase_sources": [
          {
            "id": "rootcause:and escaping",
            "keyphrase": "and escaping",
            "type": "rootcause"
          },
          {
            "id": "rootcause:does not have CSRF check",
            "keyphrase": "does not have CSRF check",
            "type": "rootcause"
          },
          {
            "id": "rootcause:missing CSRF check",
            "keyphrase": "missing CSRF check",
            "type": "rootcause"
          },
          {
            "id": "rootcause:sanitisation",
            "keyphrase": "sanitisation",
            "type": "rootcause"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "impact:Stored XSS payloads",
            "keyphrase": "Stored XSS payloads",
            "type": "impact"
          },
          {
            "id": "attacker:attackers",
            "keyphrase": "attackers",
            "type": "attacker"
          },
          {
            "id": "product:Inquiry cart WordPress plugin",
            "keyphrase": "Inquiry cart WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:through 3.4.2",
            "keyphrase": "through 3.4.2",
            "type": "version"
          }
        ]
      },
      "similarity": 379.0047455772418
    },
    {
      "metadata": {
        "doc_id": "862",
        "name": "Missing Authorization",
        "source": "sparse",
        "original_content": "The product does not perform an authorization check when an actor attempts to access a resource or perform an action.",
        "keyphrase_sources": [
          {
            "id": "rootcause:and escaping",
            "keyphrase": "and escaping",
            "type": "rootcause"
          },
          {
            "id": "rootcause:does not have CSRF check",
            "keyphrase": "does not have CSRF check",
            "type": "rootcause"
          },
          {
            "id": "rootcause:missing CSRF check",
            "keyphrase": "missing CSRF check",
            "type": "rootcause"
          },
          {
            "id": "rootcause:sanitisation",
            "keyphrase": "sanitisation",
            "type": "rootcause"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "impact:Stored XSS payloads",
            "keyphrase": "Stored XSS payloads",
            "type": "impact"
          },
          {
            "id": "attacker:attackers",
            "keyphrase": "attackers",
            "type": "attacker"
          },
          {
            "id": "product:Inquiry cart WordPress plugin",
            "keyphrase": "Inquiry cart WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:through 3.4.2",
            "keyphrase": "through 3.4.2",
            "type": "version"
          }
        ]
      },
      "similarity": 330.0099843622212
    },
    {
      "metadata": {
        "doc_id": "425",
        "name": "Direct Request ('Forced Browsing')",
        "source": "sparse",
        "original_content": "The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.",
        "keyphrase_sources": [
          {
            "id": "rootcause:does not have CSRF check",
            "keyphrase": "does not have CSRF check",
            "type": "rootcause"
          },
          {
            "id": "rootcause:missing CSRF check",
            "keyphrase": "missing CSRF check",
            "type": "rootcause"
          },
          {
            "id": "attacker:attackers",
            "keyphrase": "attackers",
            "type": "attacker"
          }
        ]
      },
      "similarity": 297.86667888592865
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "source": "sparse",
        "original_content": "The product allows the upload or transfer of dangerous file types that are automatically processed within its environment.",
        "keyphrase_sources": [
          {
            "id": "rootcause:and escaping",
            "keyphrase": "and escaping",
            "type": "rootcause"
          },
          {
            "id": "rootcause:does not have CSRF check",
            "keyphrase": "does not have CSRF check",
            "type": "rootcause"
          },
          {
            "id": "rootcause:missing CSRF check",
            "keyphrase": "missing CSRF check",
            "type": "rootcause"
          },
          {
            "id": "rootcause:sanitisation",
            "keyphrase": "sanitisation",
            "type": "rootcause"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "impact:Stored XSS payloads",
            "keyphrase": "Stored XSS payloads",
            "type": "impact"
          },
          {
            "id": "attacker:attackers",
            "keyphrase": "attackers",
            "type": "attacker"
          },
          {
            "id": "product:Inquiry cart WordPress plugin",
            "keyphrase": "Inquiry cart WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:through 3.4.2",
            "keyphrase": "through 3.4.2",
            "type": "version"
          }
        ]
      },
      "similarity": 288.37841390365315
    },
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "sparse",
        "original_content": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
        "keyphrase_sources": [
          {
            "id": "rootcause:and escaping",
            "keyphrase": "and escaping",
            "type": "rootcause"
          },
          {
            "id": "rootcause:sanitisation",
            "keyphrase": "sanitisation",
            "type": "rootcause"
          }
        ]
      },
      "similarity": 266.82825322206463
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse",
        "original_content": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
        "keyphrase_sources": [
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "impact:Stored XSS payloads",
            "keyphrase": "Stored XSS payloads",
            "type": "impact"
          },
          {
            "id": "version:through 3.4.2",
            "keyphrase": "through 3.4.2",
            "type": "version"
          }
        ]
      },
      "similarity": 249.38655408005107
    },
    {
      "metadata": {
        "doc_id": "472",
        "name": "External Control of Assumed-Immutable Web Parameter",
        "source": "sparse",
        "original_content": "The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.",
        "keyphrase_sources": [
          {
            "id": "product:Inquiry cart WordPress plugin",
            "keyphrase": "Inquiry cart WordPress plugin",
            "type": "product"
          }
        ]
      },
      "similarity": 103.50036171298096
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-116",
      "CWE-80",
      "CWE-79",
      "CWE-472",
      "CWE-352",
      "CWE-74",
      "CWE-138",
      "CWE-184",
      "CWE-807",
      "CWE-425",
      "CWE-434"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {
    "352": [
      {
        "id": "rootcause:and escaping",
        "keyphrase": "and escaping",
        "type": "rootcause"
      },
      {
        "id": "rootcause:does not have CSRF check",
        "keyphrase": "does not have CSRF check",
        "type": "rootcause"
      },
      {
        "id": "rootcause:missing CSRF check",
        "keyphrase": "missing CSRF check",
        "type": "rootcause"
      },
      {
        "id": "rootcause:sanitisation",
        "keyphrase": "sanitisation",
        "type": "rootcause"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "impact:Stored XSS payloads",
        "keyphrase": "Stored XSS payloads",
        "type": "impact"
      },
      {
        "id": "attacker:attackers",
        "keyphrase": "attackers",
        "type": "attacker"
      },
      {
        "id": "product:Inquiry cart WordPress plugin",
        "keyphrase": "Inquiry cart WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:through 3.4.2",
        "keyphrase": "through 3.4.2",
        "type": "version"
      }
    ],
    "116": [
      {
        "id": "rootcause:and escaping",
        "keyphrase": "and escaping",
        "type": "rootcause"
      },
      {
        "id": "rootcause:does not have CSRF check",
        "keyphrase": "does not have CSRF check",
        "type": "rootcause"
      },
      {
        "id": "rootcause:missing CSRF check",
        "keyphrase": "missing CSRF check",
        "type": "rootcause"
      },
      {
        "id": "rootcause:sanitisation",
        "keyphrase": "sanitisation",
        "type": "rootcause"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "impact:Stored XSS payloads",
        "keyphrase": "Stored XSS payloads",
        "type": "impact"
      },
      {
        "id": "attacker:attackers",
        "keyphrase": "attackers",
        "type": "attacker"
      },
      {
        "id": "product:Inquiry cart WordPress plugin",
        "keyphrase": "Inquiry cart WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:through 3.4.2",
        "keyphrase": "through 3.4.2",
        "type": "version"
      }
    ],
    "862": [
      {
        "id": "rootcause:and escaping",
        "keyphrase": "and escaping",
        "type": "rootcause"
      },
      {
        "id": "rootcause:does not have CSRF check",
        "keyphrase": "does not have CSRF check",
        "type": "rootcause"
      },
      {
        "id": "rootcause:missing CSRF check",
        "keyphrase": "missing CSRF check",
        "type": "rootcause"
      },
      {
        "id": "rootcause:sanitisation",
        "keyphrase": "sanitisation",
        "type": "rootcause"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "impact:Stored XSS payloads",
        "keyphrase": "Stored XSS payloads",
        "type": "impact"
      },
      {
        "id": "attacker:attackers",
        "keyphrase": "attackers",
        "type": "attacker"
      },
      {
        "id": "product:Inquiry cart WordPress plugin",
        "keyphrase": "Inquiry cart WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:through 3.4.2",
        "keyphrase": "through 3.4.2",
        "type": "version"
      }
    ],
    "434": [
      {
        "id": "rootcause:and escaping",
        "keyphrase": "and escaping",
        "type": "rootcause"
      },
      {
        "id": "rootcause:does not have CSRF check",
        "keyphrase": "does not have CSRF check",
        "type": "rootcause"
      },
      {
        "id": "rootcause:missing CSRF check",
        "keyphrase": "missing CSRF check",
        "type": "rootcause"
      },
      {
        "id": "rootcause:sanitisation",
        "keyphrase": "sanitisation",
        "type": "rootcause"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "impact:Stored XSS payloads",
        "keyphrase": "Stored XSS payloads",
        "type": "impact"
      },
      {
        "id": "attacker:attackers",
        "keyphrase": "attackers",
        "type": "attacker"
      },
      {
        "id": "product:Inquiry cart WordPress plugin",
        "keyphrase": "Inquiry cart WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:through 3.4.2",
        "keyphrase": "through 3.4.2",
        "type": "version"
      }
    ],
    "89": [
      {
        "id": "rootcause:and escaping",
        "keyphrase": "and escaping",
        "type": "rootcause"
      },
      {
        "id": "rootcause:sanitisation",
        "keyphrase": "sanitisation",
        "type": "rootcause"
      }
    ],
    "425": [
      {
        "id": "rootcause:does not have CSRF check",
        "keyphrase": "does not have CSRF check",
        "type": "rootcause"
      },
      {
        "id": "rootcause:missing CSRF check",
        "keyphrase": "missing CSRF check",
        "type": "rootcause"
      },
      {
        "id": "attacker:attackers",
        "keyphrase": "attackers",
        "type": "attacker"
      }
    ],
    "79": [
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "impact:Stored XSS payloads",
        "keyphrase": "Stored XSS payloads",
        "type": "impact"
      },
      {
        "id": "version:through 3.4.2",
        "keyphrase": "through 3.4.2",
        "type": "version"
      }
    ],
    "472": [
      {
        "id": "product:Inquiry cart WordPress plugin",
        "keyphrase": "Inquiry cart WordPress plugin",
        "type": "product"
      }
    ]
  }
}