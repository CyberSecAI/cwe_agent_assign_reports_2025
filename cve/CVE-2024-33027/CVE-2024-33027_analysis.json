{
  "cve_id": "CVE-2024-33027",
  "description": "**Memory corruption** can occur when **arbitrary user-space app gains kernel level privilege** to modify DDR memory by corrupting the GPU page table.",
  "key_phrases": {
    "rootcause": "",
    "weakness": [
      "Memory corruption",
      "arbitrary user-space app gains kernel level privilege"
    ],
    "impact": "",
    "vector": "",
    "attacker": "",
    "product": "",
    "version": "",
    "component": "GPU page table"
  },
  "reference_content": null,
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-787 | Out-of-bounds Write | 0.9 | Base |  Primary CWE | Allowed |\n| CWE-416 | Use After Free | 0.6 | Variant | Secondary | Allowed |\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.5 | Class | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.7\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary CWE is CWE-787, which is a base-level CWE. It is related to CWE-119 (Improper Restriction of Operations within the Bounds of a Memory Buffer) through a ChildOf relationship. CWE-416 and CWE-362 are also considered. CWE-362 is a class-level CWE and has potential base-level children that could be more appropriate. CWE-416 is a variant-level CWE. There is no direct relationship between CWE-787, CWE-416, and CWE-362.\n\n```mermaid\ngraph TD\n    cwe787[\"CWE-787: Out-of-bounds Write\"]\n    cwe416[\"CWE-416: Use After Free\"]\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\"]\n    \n    cwe787 -->|CHILDOF| cwe119\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe787 primary\n    class cwe416,cwe362 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with an arbitrary user-space application gaining kernel-level privilege, potentially leading to memory corruption through the modification of the GPU page table. The **memory corruption** is likely achieved via an **out-of-bounds write** (CWE-787). A **use-after-free** (CWE-416) could be a contributing factor or a consequence of the initial memory corruption. A **race condition** (CWE-362) could also be a factor if multiple threads are accessing the GPU page table concurrently without proper synchronization.\n\n## Summary of Analysis\nThe primary weakness is **memory corruption** arising from an **arbitrary user-space app gains kernel level privilege** to modify DDR memory by corrupting the GPU page table. The most relevant CWE for this scenario is CWE-787 (Out-of-bounds Write), as it directly addresses the **memory corruption** aspect, especially when the GPU page table is corrupted.\n\nCWE-416 (Use After Free) is a plausible secondary weakness, as it could explain how the memory is corrupted. CWE-362 (Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')) could also be present if the GPU page table is accessed concurrently without proper locking mechanisms.\n\nThe selection of CWE-787 is based on the vulnerability description highlighting **memory corruption** in the context of modifying the GPU page table. The description strongly suggests that data is being written outside the intended memory boundaries.\n\nOther CWEs Considered:\n\n*   CWE-226, CWE-367, CWE-667, and CWE-908 were considered but deemed less relevant as they did not directly address the core issue of **memory corruption** via an **out-of-bounds write** to the GPU page table.\n*   CWE-415 (Double Free) was considered but deemed less likely, as the description focuses more on **memory corruption** and privilege escalation rather than freeing memory twice.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-226: Sensitive Information in Resource Not Removed Before Reuse\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product releases a resource such as memory or a file so that it can be made available for reuse, but it does not clear or \"zeroize\" the information contained in the resource before the product performs a critical state transition or makes the resource available for reuse by other entities.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-404: Improper Resource Shutdown or Release\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not release or incorrectly releases a resource before it is made available for re-use.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-824: Access of Uninitialized Pointer\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product accesses or uses a pointer that has not been initialized.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-665: Improper Initialization\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n\n\n## CWE-696: Incorrect Behavior Order\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product performs multiple related behaviors, but the behaviors are performed in the wrong order in ways which may produce resultant weaknesses.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-703: Improper Check or Handling of Exceptional Conditions\n**Abstraction Level**: Pillar\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is extremely high-level, a Pillar.\n\n\n\n## CWE-131: Incorrect Calculation of Buffer Size\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-657: Violation of Secure Design Principles\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product violates well-established principles for secure design.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n\n\n## CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 1430.36\n**Source**: sparse\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-787 | Out-of-bounds Write | 0.9 | Base |  Primary CWE | Allowed |\n| CWE-416 | Use After Free | 0.6 | Variant | Secondary | Allowed |\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.5 | Class | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.7\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary CWE is CWE-787, which is a base-level CWE. It is related to CWE-119 (Improper Restriction of Operations within the Bounds of a Memory Buffer) through a ChildOf relationship. CWE-416 and CWE-362 are also considered. CWE-362 is a class-level CWE and has potential base-level children that could be more appropriate. CWE-416 is a variant-level CWE. There is no direct relationship between CWE-787, CWE-416, and CWE-362.\n\n```mermaid\ngraph TD\n    cwe787[\"CWE-787: Out-of-bounds Write\"]\n    cwe416[\"CWE-416: Use After Free\"]\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\"]\n    \n    cwe787 -->|CHILDOF| cwe119\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe787 primary\n    class cwe416,cwe362 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with an arbitrary user-space application gaining kernel-level privilege, potentially leading to memory corruption through the modification of the GPU page table. The **memory corruption** is likely achieved via an **out-of-bounds write** (CWE-787). A **use-after-free** (CWE-416) could be a contributing factor or a consequence of the initial memory corruption. A **race condition** (CWE-362) could also be a factor if multiple threads are accessing the GPU page table concurrently without proper synchronization.\n\n## Summary of Analysis\nThe primary weakness is **memory corruption** arising from an **arbitrary user-space app gains kernel level privilege** to modify DDR memory by corrupting the GPU page table. The most relevant CWE for this scenario is CWE-787 (Out-of-bounds Write), as it directly addresses the **memory corruption** aspect, especially when the GPU page table is corrupted.\n\nCWE-416 (Use After Free) is a plausible secondary weakness, as it could explain how the memory is corrupted. CWE-362 (Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')) could also be present if the GPU page table is accessed concurrently without proper locking mechanisms.\n\nThe selection of CWE-787 is based on the vulnerability description highlighting **memory corruption** in the context of modifying the GPU page table. The description strongly suggests that data is being written outside the intended memory boundaries.\n\nOther CWEs Considered:\n\n*   CWE-226, CWE-367, CWE-667, and CWE-908 were considered but deemed less relevant as they did not directly address the core issue of **memory corruption** via an **out-of-bounds write** to the GPU page table.\n*   CWE-415 (Double Free) was considered but deemed less likely, as the description focuses more on **memory corruption** and privilege escalation rather than freeing memory twice.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-226: Sensitive Information in Resource Not Removed Before Reuse\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product releases a resource such as memory or a file so that it can be made available for reuse, but it does not clear or \"zeroize\" the information contained in the resource before the product performs a critical state transition or makes the resource available for reuse by other entities.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-404: Improper Resource Shutdown or Release\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not release or incorrectly releases a resource before it is made available for re-use.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-824: Access of Uninitialized Pointer\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product accesses or uses a pointer that has not been initialized.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-665: Improper Initialization\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n\n\n## CWE-696: Incorrect Behavior Order\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product performs multiple related behaviors, but the behaviors are performed in the wrong order in ways which may produce resultant weaknesses.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-703: Improper Check or Handling of Exceptional Conditions\n**Abstraction Level**: Pillar\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is extremely high-level, a Pillar.\n\n\n\n## CWE-131: Incorrect Calculation of Buffer Size\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-657: Violation of Secure Design Principles\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product violates well-established principles for secure design.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n\n\n## CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 1430.36\n**Source**: sparse\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-416:**\n- 416 (Use After Free) - ROOT\n\n\n**Chain starting from CWE-226:**\n- 226 (Sensitive Information in Resource Not Removed Before Reuse) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "226",
        "name": "Sensitive Information in Resource Not Removed Before Reuse",
        "source": "sparse",
        "original_content": "The product releases a resource such as memory or a file so that it can be made available for reuse, but it does not clear or \"zeroize\" the information contained in the resource before the product performs a critical state transition or makes the resource available for reuse by other entities.",
        "keyphrase_sources": [
          {
            "id": "weakness:arbitrary user-space app gains kernel level privilege",
            "keyphrase": "arbitrary user-space app gains kernel level privilege",
            "type": "weakness"
          }
        ]
      },
      "similarity": 174.2155903775743
    },
    {
      "metadata": {
        "doc_id": "367",
        "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
        "source": "sparse",
        "original_content": "The product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.",
        "keyphrase_sources": [
          {
            "id": "weakness:arbitrary user-space app gains kernel level privilege",
            "keyphrase": "arbitrary user-space app gains kernel level privilege",
            "type": "weakness"
          }
        ]
      },
      "similarity": 168.92109112022104
    },
    {
      "metadata": {
        "doc_id": "787",
        "name": "Out-of-bounds Write",
        "source": "sparse",
        "original_content": "The product writes data past the end, or before the beginning, of the intended buffer.",
        "keyphrase_sources": [
          {
            "id": "weakness:Memory corruption",
            "keyphrase": "Memory corruption",
            "type": "weakness"
          },
          {
            "id": "weakness:arbitrary user-space app gains kernel level privilege",
            "keyphrase": "arbitrary user-space app gains kernel level privilege",
            "type": "weakness"
          },
          {
            "id": "component:GPU page table",
            "keyphrase": "GPU page table",
            "type": "component"
          }
        ]
      },
      "similarity": 164.84379329214931
    },
    {
      "metadata": {
        "doc_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "source": "sparse",
        "original_content": "The product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.",
        "keyphrase_sources": [
          {
            "id": "weakness:Memory corruption",
            "keyphrase": "Memory corruption",
            "type": "weakness"
          },
          {
            "id": "weakness:arbitrary user-space app gains kernel level privilege",
            "keyphrase": "arbitrary user-space app gains kernel level privilege",
            "type": "weakness"
          },
          {
            "id": "component:GPU page table",
            "keyphrase": "GPU page table",
            "type": "component"
          }
        ]
      },
      "similarity": 157.23810321319755
    },
    {
      "metadata": {
        "doc_id": "415",
        "name": "Double Free",
        "source": "sparse",
        "original_content": "The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations.",
        "keyphrase_sources": [
          {
            "id": "weakness:Memory corruption",
            "keyphrase": "Memory corruption",
            "type": "weakness"
          },
          {
            "id": "component:GPU page table",
            "keyphrase": "GPU page table",
            "type": "component"
          }
        ]
      },
      "similarity": 156.51389203954017
    },
    {
      "metadata": {
        "doc_id": "667",
        "name": "Improper Locking",
        "source": "sparse",
        "original_content": "The product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.",
        "keyphrase_sources": [
          {
            "id": "weakness:Memory corruption",
            "keyphrase": "Memory corruption",
            "type": "weakness"
          },
          {
            "id": "weakness:arbitrary user-space app gains kernel level privilege",
            "keyphrase": "arbitrary user-space app gains kernel level privilege",
            "type": "weakness"
          }
        ]
      },
      "similarity": 153.9156722098714
    },
    {
      "metadata": {
        "doc_id": "908",
        "name": "Use of Uninitialized Resource",
        "source": "sparse",
        "original_content": "The product uses or accesses a resource that has not been initialized.",
        "keyphrase_sources": [
          {
            "id": "weakness:Memory corruption",
            "keyphrase": "Memory corruption",
            "type": "weakness"
          }
        ]
      },
      "similarity": 151.55011999972464
    },
    {
      "metadata": {
        "doc_id": "472",
        "name": "External Control of Assumed-Immutable Web Parameter",
        "source": "sparse",
        "original_content": "The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.",
        "keyphrase_sources": [
          {
            "id": "component:GPU page table",
            "keyphrase": "GPU page table",
            "type": "component"
          }
        ]
      },
      "similarity": 55.44497926620404
    },
    {
      "metadata": {
        "doc_id": "416",
        "name": "Use After Free",
        "source": "sparse",
        "original_content": "The product reuses or references memory after it has been freed. At some point afterward, the memory may be allocated again and saved in another pointer, while the original pointer references a location somewhere within the new allocation. Any operations using the original pointer are no longer valid because the memory \"belongs\" to the code that operates on the new pointer.",
        "keyphrase_sources": [
          {
            "id": "component:GPU page table",
            "keyphrase": "GPU page table",
            "type": "component"
          }
        ]
      },
      "similarity": 50.94876153538176
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-416",
      "CWE-226",
      "CWE-703",
      "CWE-404",
      "CWE-131",
      "CWE-787",
      "CWE-667",
      "CWE-657",
      "CWE-696",
      "CWE-362",
      "CWE-824",
      "CWE-119",
      "CWE-367",
      "CWE-415",
      "CWE-908",
      "CWE-212",
      "CWE-665"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {
    "787": [
      {
        "id": "weakness:Memory corruption",
        "keyphrase": "Memory corruption",
        "type": "weakness"
      },
      {
        "id": "weakness:arbitrary user-space app gains kernel level privilege",
        "keyphrase": "arbitrary user-space app gains kernel level privilege",
        "type": "weakness"
      },
      {
        "id": "component:GPU page table",
        "keyphrase": "GPU page table",
        "type": "component"
      }
    ],
    "362": [
      {
        "id": "weakness:Memory corruption",
        "keyphrase": "Memory corruption",
        "type": "weakness"
      },
      {
        "id": "weakness:arbitrary user-space app gains kernel level privilege",
        "keyphrase": "arbitrary user-space app gains kernel level privilege",
        "type": "weakness"
      },
      {
        "id": "component:GPU page table",
        "keyphrase": "GPU page table",
        "type": "component"
      }
    ],
    "415": [
      {
        "id": "weakness:Memory corruption",
        "keyphrase": "Memory corruption",
        "type": "weakness"
      },
      {
        "id": "component:GPU page table",
        "keyphrase": "GPU page table",
        "type": "component"
      }
    ],
    "667": [
      {
        "id": "weakness:Memory corruption",
        "keyphrase": "Memory corruption",
        "type": "weakness"
      },
      {
        "id": "weakness:arbitrary user-space app gains kernel level privilege",
        "keyphrase": "arbitrary user-space app gains kernel level privilege",
        "type": "weakness"
      }
    ],
    "908": [
      {
        "id": "weakness:Memory corruption",
        "keyphrase": "Memory corruption",
        "type": "weakness"
      }
    ],
    "226": [
      {
        "id": "weakness:arbitrary user-space app gains kernel level privilege",
        "keyphrase": "arbitrary user-space app gains kernel level privilege",
        "type": "weakness"
      }
    ],
    "367": [
      {
        "id": "weakness:arbitrary user-space app gains kernel level privilege",
        "keyphrase": "arbitrary user-space app gains kernel level privilege",
        "type": "weakness"
      }
    ],
    "472": [
      {
        "id": "component:GPU page table",
        "keyphrase": "GPU page table",
        "type": "component"
      }
    ],
    "416": [
      {
        "id": "component:GPU page table",
        "keyphrase": "GPU page table",
        "type": "component"
      }
    ]
  }
}