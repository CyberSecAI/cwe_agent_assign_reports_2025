{
  "cve_id": "CVE-2025-0395",
  "description": "When the assert() function in the GNU C Library versions 2.13 to 2.40 fails, it **does not allocate enough space** for the assertion failure message string and size information, which may lead to a **buffer overflow** if the message string size aligns to page size.",
  "key_phrases": {
    "rootcause": "does not allocate enough space",
    "weakness": "buffer overflow",
    "impact": "",
    "vector": "",
    "attacker": "",
    "product": "GNU C Library",
    "version": "2.13 to 2.40",
    "component": "assert() function"
  },
  "reference_content": "```\nCVE-2025-0395: Buffer overflow in the GNU C Library's assert()\n\nRoot cause of vulnerability:\n- The assert() function in the GNU C Library does not allocate enough space for the assertion failure message string and size information, leading to a buffer overflow when the message string size aligns to the page size.\n- Specifically, an unsigned int (size) is written into the mmaped buffer in addition to the string, causing an overflow when strcpy() is called.\n\nWeaknesses/vulnerabilities present:\n- Buffer overflow in assert() function.\n- Insufficient buffer allocation for assertion failure message.\n- Use of strcpy() without proper bounds checking.\n\nImpact of exploitation:\n- Potential for local exploitation if a SUID program exists with a reachable assertion failure.\n- Possible metadata corruption in the heap, potentially leading to further exploitation.\n\nAttack vectors:\n- Local attacker controlling the __progname (basename of argv[0]) can influence the padding and trigger the overflow.\n- Triggering an assertion failure in a SUID program.\n\nRequired attacker capabilities/position:\n- Local access to the system.\n- Ability to trigger an assertion failure in a program (potentially a SUID program).\n- Control over the program name (__progname).\n\nMitigation or fix:\n- The vulnerability has been patched in glibc versions 2.40-66 and 2.41.\n- The fix involves allocating sufficient space for the assertion failure message and its size information.\n\nAdditional details (more than official CVE description):\n- The overflow occurs in the __assert_fail_base() function.\n- The vulnerability is mmap-based.\n- The overflow is at most an off-by-four bytes.\n- The attacker does not control the four bytes that overflow the buffer.\n- __libc_message_impl() in sysdeps/posix/libc_fatal.c is also vulnerable to a similar buffer overflow, but is less exploitable in practice.\n- The vulnerability can be triggered in both SUID and non-SUID programs.\n- The exploitability depends on the memory layout and ASLR.\n- The vulnerability can manifest as a segmentation fault or an abort.\n```",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-131 | Incorrect Calculation of Buffer Size | 0.9 | Base | Allowed | Primary CWE. The root cause is that the `assert()` function **does not allocate enough space**. |\n| CWE-120 | Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') | 0.7 | Base | Allowed-with-Review | The **buffer overflow** occurs because `strcpy()` is used without proper bounds checking. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness, CWE-131 Incorrect Calculation of Buffer Size, is directly related to the resulting buffer overflow, CWE-120 Buffer Copy without Checking Size of Input ('Classic Buffer Overflow'). CWE-131 can precede CWE-119, and CWE-120 is a child of CWE-119. The allocation issue leads to a buffer overflow during the string copy operation. This relationship influenced the selection of both CWEs to represent the complete vulnerability.\n\n```mermaid\ngraph TD\n    cwe131[\"CWE-131: Incorrect Calculation of Buffer Size\"]\n    cwe120[\"CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\"]\n\n    cwe131 -->|CANPRECEDE| cwe119\n    cwe120 -->|CHILDOF| cwe119\n    cwe131 --> cwe120\n    \n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe131 primary\n    class cwe120 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **incorrect calculation of buffer size** (CWE-131) which leads to a **buffer overflow** (CWE-120) due to using `strcpy()` without proper bounds checking.\n\n## Summary of Analysis\nThe analysis is based on the provided evidence, which clearly indicates that the root cause is the **incorrect calculation of the buffer size** within the `assert()` function, leading to a buffer overflow.\n\n*   **CWE-131: Incorrect Calculation of Buffer Size**\n    *   The vulnerability description states that the `assert()` function **does not allocate enough space** for the assertion failure message string and size information.\n    *   The CVE Reference Links Content Summary explicitly mentions \"Insufficient buffer allocation for assertion failure message.\"\n    *   This aligns directly with CWE-131, which describes a scenario where the product does not correctly calculate the size to be used when allocating a buffer.\n*   **CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')**\n    *   The vulnerability description indicates that this lack of space can lead to a **buffer overflow**.\n    *   The CVE Reference Links Content Summary mentions the use of `strcpy()` without proper bounds checking, which is a classic scenario for CWE-120.\n    *   This confirms that the insufficient buffer allocation results in a buffer overflow during the string copy operation.\n\nThe graph relationships confirm that CWE-131 can lead to CWE-120, reinforcing the selection of these two CWEs to represent the vulnerability. The chosen CWEs are at the optimal level of specificity, as they accurately capture the root cause (CWE-131) and the immediate consequence (CWE-120) of the vulnerability.\n\nCWEs considered but not used:\n\n*   CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer - While this is a broader category that includes buffer overflows, it doesn't specify the root cause, which is the incorrect buffer size calculation.\n*   CWE-190: Integer Overflow or Wraparound - This is not applicable as the vulnerability is about buffer size calculation and not integer overflow.\n*   CWE-789: Memory Allocation with Excessive Size Value - This is the opposite of the actual problem, where the allocated memory is insufficient.\n*   CWE-1284: Improper Validation of Specified Quantity in Input - While there's a quantity (size) involved, the core issue isn't the validation of the input but the calculation of the buffer size itself.\n*   CWE-770: Allocation of Resources Without Limits or Throttling - This is not applicable as the vulnerability is about buffer size calculation and not resource allocation limits.\n*   CWE-193: Off-by-one Error - While there could be an off-by-one error in calculation, the main problem is the insufficient allocation of space.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-131 | Incorrect Calculation of Buffer Size | 0.9 | Base | Allowed | Primary CWE. The root cause is that the `assert()` function **does not allocate enough space**. |\n| CWE-120 | Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') | 0.7 | Base | Allowed-with-Review | The **buffer overflow** occurs because `strcpy()` is used without proper bounds checking. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness, CWE-131 Incorrect Calculation of Buffer Size, is directly related to the resulting buffer overflow, CWE-120 Buffer Copy without Checking Size of Input ('Classic Buffer Overflow'). CWE-131 can precede CWE-119, and CWE-120 is a child of CWE-119. The allocation issue leads to a buffer overflow during the string copy operation. This relationship influenced the selection of both CWEs to represent the complete vulnerability.\n\n```mermaid\ngraph TD\n    cwe131[\"CWE-131: Incorrect Calculation of Buffer Size\"]\n    cwe120[\"CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\"]\n\n    cwe131 -->|CANPRECEDE| cwe119\n    cwe120 -->|CHILDOF| cwe119\n    cwe131 --> cwe120\n    \n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe131 primary\n    class cwe120 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **incorrect calculation of buffer size** (CWE-131) which leads to a **buffer overflow** (CWE-120) due to using `strcpy()` without proper bounds checking.\n\n## Summary of Analysis\nThe analysis is based on the provided evidence, which clearly indicates that the root cause is the **incorrect calculation of the buffer size** within the `assert()` function, leading to a buffer overflow.\n\n*   **CWE-131: Incorrect Calculation of Buffer Size**\n    *   The vulnerability description states that the `assert()` function **does not allocate enough space** for the assertion failure message string and size information.\n    *   The CVE Reference Links Content Summary explicitly mentions \"Insufficient buffer allocation for assertion failure message.\"\n    *   This aligns directly with CWE-131, which describes a scenario where the product does not correctly calculate the size to be used when allocating a buffer.\n*   **CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')**\n    *   The vulnerability description indicates that this lack of space can lead to a **buffer overflow**.\n    *   The CVE Reference Links Content Summary mentions the use of `strcpy()` without proper bounds checking, which is a classic scenario for CWE-120.\n    *   This confirms that the insufficient buffer allocation results in a buffer overflow during the string copy operation.\n\nThe graph relationships confirm that CWE-131 can lead to CWE-120, reinforcing the selection of these two CWEs to represent the vulnerability. The chosen CWEs are at the optimal level of specificity, as they accurately capture the root cause (CWE-131) and the immediate consequence (CWE-120) of the vulnerability.\n\nCWEs considered but not used:\n\n*   CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer - While this is a broader category that includes buffer overflows, it doesn't specify the root cause, which is the incorrect buffer size calculation.\n*   CWE-190: Integer Overflow or Wraparound - This is not applicable as the vulnerability is about buffer size calculation and not integer overflow.\n*   CWE-789: Memory Allocation with Excessive Size Value - This is the opposite of the actual problem, where the allocated memory is insufficient.\n*   CWE-1284: Improper Validation of Specified Quantity in Input - While there's a quantity (size) involved, the core issue isn't the validation of the input but the calculation of the buffer size itself.\n*   CWE-770: Allocation of Resources Without Limits or Throttling - This is not applicable as the vulnerability is about buffer size calculation and not resource allocation limits.\n*   CWE-193: Off-by-one Error - While there could be an off-by-one error in calculation, the main problem is the insufficient allocation of space.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-1284:**\n- 1284 (Improper Validation of Specified Quantity in Input) - ROOT\n\n\n**Chain starting from CWE-770:**\n- 770 (Allocation of Resources Without Limits or Throttling) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "119",
        "name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Buffer Overflow",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "190",
        "name": "Integer Overflow or Wraparound",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Overflow",
        "match_reason": "term_in_phrase_whole_phrase"
      },
      "similarity": 800.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "120",
        "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Classic Buffer Overflow",
        "match_reason": "phrase_in_term_whole_phrase"
      },
      "similarity": 700.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "789",
        "name": "Memory Allocation with Excessive Size Value",
        "source": "sparse"
      },
      "similarity": 368.1982641227662
    },
    {
      "metadata": {
        "doc_id": "1284",
        "name": "Improper Validation of Specified Quantity in Input",
        "source": "sparse"
      },
      "similarity": 347.867688129145
    },
    {
      "metadata": {
        "doc_id": "130",
        "name": "Improper Handling of Length Parameter Inconsistency",
        "source": "sparse"
      },
      "similarity": 324.04494516116813
    },
    {
      "metadata": {
        "doc_id": "770",
        "name": "Allocation of Resources Without Limits or Throttling",
        "source": "sparse"
      },
      "similarity": 319.22156576805764
    },
    {
      "metadata": {
        "doc_id": "193",
        "name": "Off-by-one Error",
        "source": "sparse"
      },
      "similarity": 311.5128705605509
    },
    {
      "metadata": {
        "doc_id": "806",
        "name": "Buffer Access Using Size of Source Buffer",
        "type": "Variant",
        "original_content": "The product uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer.",
        "keyphrase_source": "weakness:buffer overflow",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.4874766297630897
          }
        }
      },
      "similarity": 0.4874766297630897
    },
    {
      "doc_id": "1339",
      "text": "CWE-1339: Insufficient Precision or Accuracy of a Real Number",
      "score": 2.9120000000000004,
      "metadata": {
        "doc_id": "1339",
        "name": "Insufficient Precision or Accuracy of a Real Number",
        "type": "base",
        "original_content": "CWE-1339: Insufficient Precision or Accuracy of a Real Number",
        "relationships": [
          {
            "source_id": "1339",
            "target_id": "119",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1339",
            "target_id": "834",
            "label": "CANPRECEDE",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1339",
            "target_id": "190",
            "label": "PEEROF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1339",
            "target_id": "682",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "834",
            "target_id": "1339",
            "label": "CANFOLLOW",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "682",
            "target_id": "1339",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "119",
            "target_id": "1339",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "119",
                  "1339",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "119"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "119",
                  "1339",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "119"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "1339",
                  "119",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "119"
            },
            "peer_relationship": {
              "path": [
                [
                  "1339",
                  "190",
                  "PEEROF"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "190"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.9120000000000004
          }
        }
      },
      "similarity": 2.9120000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-1284",
      "CWE-770",
      "CWE-131",
      "CWE-193",
      "CWE-190",
      "CWE-119",
      "CWE-120",
      "CWE-789"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}