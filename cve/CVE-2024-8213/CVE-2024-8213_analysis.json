{
  "cve_id": "CVE-2024-8213",
  "description": "A vulnerability classified as critical has been found in D-Link DNS-120, DNR-202L, DNS-315L, DNS-320, DNS-320L, DNS-320LW, DNS-321, DNR-322L, DNS-323, DNS-325, DNS-326, DNS-327L, DNR-326, DNS-340L, DNS-343, DNS-345, DNS-726-4, DNS-1100-4, DNS-1200-05 and DNS-1550-04 up to 20240814. Affected is the function cgi_FMT_R12R5_1st_DiskMGR of the file /cgi-bin/hd_config.cgi. The manipulation of the argument f_source_dev leads to **command injection**. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used. NOTE This vulnerability only affects products that are no longer supported by the maintainer. NOTE Vendor was contacted early and confirmed that the product is end-of-life. It should be retired and replaced.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "command injection",
    "impact": "",
    "vector": "",
    "attacker": "",
    "product": "D-Link DNS-120, DNR-202L, DNS-315L, DNS-320, DNS-320L, DNS-320LW, DNS-321, DNR-322L, DNS-323, DNS-325, DNS-326, DNS-327L, DNR-326, DNS-340L, DNS-343, DNS-345, DNS-726-4, DNS-1100-4, DNS-1200-05 and DNS-1550-04",
    "version": "up to 20240814",
    "component": "cgi_FMT_R12R5_1st_DiskMGR in /cgi-bin/hd_config.cgi"
  },
  "reference_content": "```\n{\n  \"vulnerability_details\": [\n    {\n      \"root_cause\": \"The `cgi_FMT_R12R5_1st_DiskMGR` function in `/cgi-bin/hd_config.cgi` does not properly sanitize the `f_source_dev` variable received via a POST request.\",\n      \"weaknesses\": [\n        \"Command Injection\"\n      ],\n      \"impact\": \"Arbitrary command execution on the affected device.\",\n       \"attack_vectors\": [\n         \"Sending a crafted POST request to the `/cgi-bin/hd_config.cgi` endpoint with a malicious value for the `f_source_dev` parameter.\"\n       ],\n      \"required_capabilities\": \"The attacker needs to be able to send HTTP POST requests to the device's web interface.\"\n    }\n  ],\n  \"affected_products\": [\n    \"D-Link DNS-320\",\n    \"D-Link DNS-320L\",\n    \"D-Link DNS-321\",\n    \"D-Link DNS-323\",\n    \"D-Link DNS-325\",\n    \"D-Link DNS-327L\"\n   ],\n  \"more_info\": \"The `sprintf` function is used at line 25 to assign the unsanitized user-provided value to variable `v3`, which is then invoked by the system command leading to command execution.\"\n}\n```",
  "similar_info": {
    "cwe_distribution": {
      "95": {
        "cwe_counts": {
          "CWE-78": 1
        },
        "total_samples": 1,
        "distribution": [
          {
            "cwes": [
              "CWE-78"
            ],
            "frequency": 1,
            "proportion": 1.0
          }
        ]
      },
      "90": {
        "cwe_counts": {
          "CWE-78": 1
        },
        "total_samples": 1,
        "distribution": [
          {
            "cwes": [
              "CWE-78"
            ],
            "frequency": 1,
            "proportion": 1.0
          }
        ]
      },
      "85": {
        "cwe_counts": {
          "CWE-78": 2
        },
        "total_samples": 2,
        "distribution": [
          {
            "cwes": [
              "CWE-78"
            ],
            "frequency": 2,
            "proportion": 1.0
          }
        ]
      },
      "80": {
        "cwe_counts": {
          "CWE-78": 2
        },
        "total_samples": 2,
        "distribution": [
          {
            "cwes": [
              "CWE-78"
            ],
            "frequency": 2,
            "proportion": 1.0
          }
        ]
      },
      "75": {
        "cwe_counts": {
          "CWE-78": 2
        },
        "total_samples": 2,
        "distribution": [
          {
            "cwes": [
              "CWE-78"
            ],
            "frequency": 2,
            "proportion": 1.0
          }
        ]
      },
      "70": {
        "cwe_counts": {
          "CWE-78": 2
        },
        "total_samples": 2,
        "distribution": [
          {
            "cwes": [
              "CWE-78"
            ],
            "frequency": 2,
            "proportion": 1.0
          }
        ]
      }
    },
    "cwe_consensus": "CWE-78",
    "similarity_stats": {
      "thresholds": [
        95,
        90,
        85,
        80,
        75,
        70
      ],
      "total_samples_by_threshold": {
        "95": 1,
        "90": 1,
        "85": 2,
        "80": 2,
        "75": 2,
        "70": 2
      },
      "top_cwes_by_threshold": {
        "95": [
          [
            "CWE-78",
            1
          ]
        ],
        "90": [
          [
            "CWE-78",
            1
          ]
        ],
        "85": [
          [
            "CWE-78",
            2
          ]
        ],
        "80": [
          [
            "CWE-78",
            2
          ]
        ],
        "75": [
          [
            "CWE-78",
            2
          ]
        ],
        "70": [
          [
            "CWE-78",
            2
          ]
        ]
      }
    },
    "raw_matches": [
      {
        "similarity": 95,
        "cwes": [
          "78"
        ],
        "total": 1,
        "frequency": 1,
        "proportion": 1.0
      },
      {
        "similarity": 90,
        "cwes": [
          "78"
        ],
        "total": 1,
        "frequency": 1,
        "proportion": 1.0
      },
      {
        "similarity": 85,
        "cwes": [
          "78"
        ],
        "total": 2,
        "frequency": 2,
        "proportion": 1.0
      },
      {
        "similarity": 80,
        "cwes": [
          "78"
        ],
        "total": 2,
        "frequency": 2,
        "proportion": 1.0
      },
      {
        "similarity": 75,
        "cwes": [
          "78"
        ],
        "total": 2,
        "frequency": 2,
        "proportion": 1.0
      },
      {
        "similarity": 70,
        "cwes": [
          "78"
        ],
        "total": 2,
        "frequency": 2,
        "proportion": 1.0
      }
    ]
  },
  "similarity_summary": {
    "consensus_cwe": "CWE-78",
    "top_cwes": [
      [
        "CWE-78",
        10
      ]
    ],
    "confidence_levels": {
      "high": [],
      "medium": [],
      "low": []
    },
    "total_samples": 10
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-78 | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | 1.0 | Base | Allowed | Primary CWE. The **command injection** vulnerability occurs due to the **improper neutralization** of special elements in an OS command. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship considered was the parent-child relationship between CWE-77 (Improper Neutralization of Special Elements used in a Command) and CWE-78 (Improper Neutralization of Special Elements used in an OS Command). CWE-78 is a specific type of CWE-77, focusing on OS commands, which aligns directly with the vulnerability description.\n\n```mermaid\ngraph TD\n    cwe78[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"]\n    cwe77[\"CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')\"]\n    \n    cwe78 -->|CHILDOF| cwe77\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe78 primary\n    class cwe77 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with **improper sanitization** of the `f_source_dev` parameter, leading to **command injection**, and ultimately resulting in arbitrary command execution on the affected device.\n\n## Summary of Analysis\nThe analysis is based on the provided vulnerability description, key phrases, and CVE reference links. The description clearly states that the manipulation of the `f_source_dev` argument leads to **command injection**. The CVE reference confirms that the `cgi_FMT_R12R5_1st_DiskMGR` function does not properly sanitize the `f_source_dev` variable, and the `sprintf` function is used to assign the unsanitized value to a variable that is then invoked by the system command. This confirms the **improper neutralization** of special elements and resulting **command injection**, making CWE-78 the most appropriate classification.\n\nThe retriever results also support this classification, with CWE-78 being a top match. The relationship between CWE-77 and CWE-78 influenced the final decision to choose the more specific CWE-78.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.78\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.78\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n### Additional CWE Considerations (and why they were not selected):\n\n*   **CWE-77 (Improper Neutralization of Special Elements used in a Command ('Command Injection'))**: While this is a parent of CWE-78, CWE-78 is more specific because the **command injection** occurs in the context of an OS command, as stated in the vulnerability description. The vulnerability description specifically refers to the manipulation of an argument leading to **command injection**.\n*   **CWE-134 (Use of Externally-Controlled Format String)** and **CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection'))**: These were considered but deemed less relevant as the vulnerability is directly related to **command injection** rather than format string issues or general injection flaws.\n*   **CWE-346 (Origin Validation Error), CWE-941 (Incorrectly Specified Destination in a Communication Channel), CWE-940 (Improper Verification of Source of a Communication Channel), CWE-923 (Improper Restriction of Communication Channel to Intended Endpoints)**: These CWEs relate to communication channel issues, which are not the primary cause of the vulnerability described. The core issue is the **improper neutralization** of input leading to **command injection**, not the communication channel itself.\n*   **CWE-184 (Incomplete List of Disallowed Inputs)**: Considered, but the root cause isn't simply an incomplete list of bad inputs. It's the **improper handling** of a specific input in the context of an OS command.\n*   **CWE-88 (Improper Neutralization of Argument Delimiters in a Command ('Argument Injection'))**: This is related to argument injection, but the description doesn't specifically mention delimiters. It describes a general **command injection** vulnerability.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-78 | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | 1.0 | Base | Allowed | Primary CWE. The **command injection** vulnerability occurs due to the **improper neutralization** of special elements in an OS command. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship considered was the parent-child relationship between CWE-77 (Improper Neutralization of Special Elements used in a Command) and CWE-78 (Improper Neutralization of Special Elements used in an OS Command). CWE-78 is a specific type of CWE-77, focusing on OS commands, which aligns directly with the vulnerability description.\n\n```mermaid\ngraph TD\n    cwe78[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"]\n    cwe77[\"CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')\"]\n    \n    cwe78 -->|CHILDOF| cwe77\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe78 primary\n    class cwe77 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with **improper sanitization** of the `f_source_dev` parameter, leading to **command injection**, and ultimately resulting in arbitrary command execution on the affected device.\n\n## Summary of Analysis\nThe analysis is based on the provided vulnerability description, key phrases, and CVE reference links. The description clearly states that the manipulation of the `f_source_dev` argument leads to **command injection**. The CVE reference confirms that the `cgi_FMT_R12R5_1st_DiskMGR` function does not properly sanitize the `f_source_dev` variable, and the `sprintf` function is used to assign the unsanitized value to a variable that is then invoked by the system command. This confirms the **improper neutralization** of special elements and resulting **command injection**, making CWE-78 the most appropriate classification.\n\nThe retriever results also support this classification, with CWE-78 being a top match. The relationship between CWE-77 and CWE-78 influenced the final decision to choose the more specific CWE-78.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.78\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.78\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n### Additional CWE Considerations (and why they were not selected):\n\n*   **CWE-77 (Improper Neutralization of Special Elements used in a Command ('Command Injection'))**: While this is a parent of CWE-78, CWE-78 is more specific because the **command injection** occurs in the context of an OS command, as stated in the vulnerability description. The vulnerability description specifically refers to the manipulation of an argument leading to **command injection**.\n*   **CWE-134 (Use of Externally-Controlled Format String)** and **CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection'))**: These were considered but deemed less relevant as the vulnerability is directly related to **command injection** rather than format string issues or general injection flaws.\n*   **CWE-346 (Origin Validation Error), CWE-941 (Incorrectly Specified Destination in a Communication Channel), CWE-940 (Improper Verification of Source of a Communication Channel), CWE-923 (Improper Restriction of Communication Channel to Intended Endpoints)**: These CWEs relate to communication channel issues, which are not the primary cause of the vulnerability described. The core issue is the **improper neutralization** of input leading to **command injection**, not the communication channel itself.\n*   **CWE-184 (Incomplete List of Disallowed Inputs)**: Considered, but the root cause isn't simply an incomplete list of bad inputs. It's the **improper handling** of a specific input in the context of an OS command.\n*   **CWE-88 (Improper Neutralization of Argument Delimiters in a Command ('Argument Injection'))**: This is related to argument injection, but the description doesn't specifically mention delimiters. It describes a general **command injection** vulnerability.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-346:**\n- 346 (Origin Validation Error) - ROOT\n\n\n**Chain starting from CWE-77:**\n- 77 (Improper Neutralization of Special Elements used in a Command ('Command Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "77",
        "name": "Improper Neutralization of Special Elements used in a Command ('Command Injection')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Command injection",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "78",
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: OS Command Injection",
        "match_reason": "phrase_in_term_whole_phrase"
      },
      "similarity": 700.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "346",
        "name": "Origin Validation Error",
        "source": "sparse"
      },
      "similarity": 721.076471835593
    },
    {
      "metadata": {
        "doc_id": "330",
        "name": "Use of Insufficiently Random Values",
        "source": "sparse"
      },
      "similarity": 680.3553949689589
    },
    {
      "metadata": {
        "doc_id": "923",
        "name": "Improper Restriction of Communication Channel to Intended Endpoints",
        "source": "sparse"
      },
      "similarity": 654.5463114651925
    },
    {
      "metadata": {
        "doc_id": "350",
        "name": "Reliance on Reverse DNS Resolution for a Security-Critical Action",
        "source": "sparse"
      },
      "similarity": 651.8733347254099
    },
    {
      "metadata": {
        "doc_id": "359",
        "name": "Exposure of Private Personal Information to an Unauthorized Actor",
        "source": "sparse"
      },
      "similarity": 649.4002874801894
    },
    {
      "metadata": {
        "doc_id": "941",
        "name": "Incorrectly Specified Destination in a Communication Channel",
        "source": "sparse"
      },
      "similarity": 642.6254122099537
    },
    {
      "metadata": {
        "doc_id": "121",
        "name": "Stack-based Buffer Overflow",
        "type": "Variant",
        "original_content": "A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).",
        "keyphrase_source": "weakness:command injection",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.6521539655248914
          }
        }
      },
      "similarity": 0.6521539655248914
    },
    {
      "doc_id": "322",
      "text": "CWE-322: Key Exchange without Entity Authentication",
      "score": 2.8651999999999997,
      "metadata": {
        "doc_id": "322",
        "name": "Key Exchange without Entity Authentication",
        "type": "base",
        "original_content": "CWE-322: Key Exchange without Entity Authentication",
        "relationships": [
          {
            "source_id": "322",
            "target_id": "295",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "322",
            "target_id": "923",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "322",
            "target_id": "306",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "923",
            "target_id": "322",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "306",
            "target_id": "322",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "295",
            "target_id": "322",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "abstraction_path": 0.7200000000000001,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "923",
                  "322",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "923"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "306",
                  "322",
                  "PARENTOF"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "abstraction_path_down",
              "source": "306"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "923",
                  "322",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "923"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "322",
                  "923",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "923"
            }
          }
        },
        "abstraction_level": "base",
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.8651999999999997
          }
        }
      },
      "similarity": 2.8651999999999997
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-346",
      "CWE-77",
      "CWE-88",
      "CWE-923",
      "CWE-74",
      "CWE-940",
      "CWE-78",
      "CWE-184",
      "CWE-941",
      "CWE-134"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}