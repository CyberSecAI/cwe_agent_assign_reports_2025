{
  "cve_id": "CVE-2025-30588",
  "description": "Cross-Site Request Forgery (CSRF) vulnerability in ryan_xantoo Map Contact allows Stored **XSS**. This issue affects Map Contact from n/a through 3.0.4.",
  "key_phrases": {
    "rootcause": "cross-site request forgery",
    "weakness": [
      "cross-site scripting",
      "XSS"
    ],
    "impact": "",
    "vector": "",
    "attacker": "",
    "product": "Map Contact",
    "version": "n/a through 3.0.4",
    "component": ""
  },
  "reference_content": "## Analysis of CVE-2025-30588 Content\n\nThe provided content **relates** to CVE-2025-30588 as indicated by the CVE ID listed within the document. It provides details about a Cross-Site Request Forgery (CSRF) vulnerability in the WordPress Map Contact Plugin.\n\nHere's an extraction of the relevant information:\n\n*   **Root cause of vulnerability:** The vulnerability is a Cross-Site Request Forgery (CSRF).\n*   **Weaknesses/vulnerabilities present:** CSRF vulnerability allows a malicious actor to force higher privileged users to execute unwanted actions.\n*   **Impact of exploitation:** Allows a malicious actor to force higher privileged users to execute unwanted actions under their current authentication.\n*   **Attack vectors:**  The content does not specify the exact attack vector, but CSRF generally involves tricking a logged-in user into submitting a malicious request.\n*   **Required attacker capabilities/position:** Unauthenticated attacker.\n*   **Mitigation or fix:** No official fix is available as of March 24, 2025. Patchstack offers \"vPatching\" as a mitigation.\n*   **Affected versions:** <= 3.0.4\n*   **CVSS Score:** 7.1 (Low severity)\n*   **OWASP Top 10:** A1: Broken Access Control\n\n**Note:** This content provides more detail than the placeholder CVE description, specifically detailing the vulnerability type (CSRF), impact, and affected versions. It also mentions the availability of a virtual patch.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n\n| CWE ID  | CWE Name                                                                     | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :--------------------------------------------------------------------------- | :--------- | :---------------------- | :------------------------------ | :------------------------------ |\n| CWE-352 | Cross-Site Request Forgery (CSRF)                                          | 0.9        | Compound                | Primary                         | Allowed                       |\n| CWE-79  | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 0.9        | Base                    | Secondary                       | Allowed                       |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary weakness is CWE-352 [Cross-Site Request Forgery (CSRF)], where the application doesn't properly verify if a request was intentionally made by the user. This can lead to CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')] if a successful CSRF attack injects malicious script into the web page. The relationship is that CSRF can *precede* XSS by allowing an attacker to inject the XSS payload. Both CWEs are at appropriate levels of abstraction.\n\n```mermaid\ngraph TD\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    \n    cwe352 -->|CANPRECEDE| cwe79\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe352 primary\n    class cwe79 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with **CWE-352 [Cross-Site Request Forgery (CSRF)]**, where the application fails to validate the origin of the request. This allows an attacker to potentially inject malicious input. If the application then fails to neutralize this input properly, it leads to **CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')]**, resulting in the execution of the attacker's script in the victim's browser.\n\n## Summary of Analysis\n\nThe initial assessment focused on identifying the root cause and subsequent weaknesses described in the vulnerability. The description clearly states a \"Cross-Site Request Forgery (CSRF) vulnerability\" and \"Stored XSS.\" The key is to understand that CSRF is the mechanism used to inject the XSS payload.\n\nThe vulnerability description explicitly mentions \"Cross-Site Request Forgery (CSRF) vulnerability\" and \"Stored XSS.\" This direct evidence supports the selection of both CWE-352 [Cross-Site Request Forgery (CSRF)] and CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')]. The high retriever scores for both CWEs further reinforce this decision.\n\nCWE-352 [Cross-Site Request Forgery (CSRF)] is the primary vulnerability, as it allows the attacker to inject the malicious script. CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')] is the secondary vulnerability, resulting from the **improper** handling of the injected input.\n\nI considered other CWEs like CWE-89 [Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')], CWE-918 [Server-Side Request Forgery (SSRF)], CWE-80 [Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)], and CWE-601 [URL Redirection to Untrusted Site ('Open Redirect')], but these did not directly match the vulnerability description as precisely as CWE-352 and CWE-79.",
  "analysis_with_relationships": "# Summary\n\n| CWE ID  | CWE Name                                                                     | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :--------------------------------------------------------------------------- | :--------- | :---------------------- | :------------------------------ | :------------------------------ |\n| CWE-352 | Cross-Site Request Forgery (CSRF)                                          | 0.9        | Compound                | Primary                         | Allowed                       |\n| CWE-79  | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 0.9        | Base                    | Secondary                       | Allowed                       |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary weakness is CWE-352 [Cross-Site Request Forgery (CSRF)], where the application doesn't properly verify if a request was intentionally made by the user. This can lead to CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')] if a successful CSRF attack injects malicious script into the web page. The relationship is that CSRF can *precede* XSS by allowing an attacker to inject the XSS payload. Both CWEs are at appropriate levels of abstraction.\n\n```mermaid\ngraph TD\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    \n    cwe352 -->|CANPRECEDE| cwe79\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe352 primary\n    class cwe79 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with **CWE-352 [Cross-Site Request Forgery (CSRF)]**, where the application fails to validate the origin of the request. This allows an attacker to potentially inject malicious input. If the application then fails to neutralize this input properly, it leads to **CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')]**, resulting in the execution of the attacker's script in the victim's browser.\n\n## Summary of Analysis\n\nThe initial assessment focused on identifying the root cause and subsequent weaknesses described in the vulnerability. The description clearly states a \"Cross-Site Request Forgery (CSRF) vulnerability\" and \"Stored XSS.\" The key is to understand that CSRF is the mechanism used to inject the XSS payload.\n\nThe vulnerability description explicitly mentions \"Cross-Site Request Forgery (CSRF) vulnerability\" and \"Stored XSS.\" This direct evidence supports the selection of both CWE-352 [Cross-Site Request Forgery (CSRF)] and CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')]. The high retriever scores for both CWEs further reinforce this decision.\n\nCWE-352 [Cross-Site Request Forgery (CSRF)] is the primary vulnerability, as it allows the attacker to inject the malicious script. CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')] is the secondary vulnerability, resulting from the **improper** handling of the injected input.\n\nI considered other CWEs like CWE-89 [Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')], CWE-918 [Server-Side Request Forgery (SSRF)], CWE-80 [Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)], and CWE-601 [URL Redirection to Untrusted Site ('Open Redirect')], but these did not directly match the vulnerability description as precisely as CWE-352 and CWE-79.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-89:**\n- 89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')) - ROOT\n\n\n**Chain starting from CWE-80:**\n- 80 (Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse",
        "original_content": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
        "keyphrase_sources": [
          {
            "id": "rootcause:cross-site request forgery",
            "keyphrase": "cross-site request forgery",
            "type": "rootcause"
          },
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "product:Map Contact",
            "keyphrase": "Map Contact",
            "type": "product"
          },
          {
            "id": "version:n/a through 3.0.4",
            "keyphrase": "n/a through 3.0.4",
            "type": "version"
          }
        ]
      },
      "similarity": 317.6211582551045
    },
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "sparse",
        "original_content": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
        "keyphrase_sources": [
          {
            "id": "rootcause:cross-site request forgery",
            "keyphrase": "cross-site request forgery",
            "type": "rootcause"
          },
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "product:Map Contact",
            "keyphrase": "Map Contact",
            "type": "product"
          },
          {
            "id": "version:n/a through 3.0.4",
            "keyphrase": "n/a through 3.0.4",
            "type": "version"
          }
        ]
      },
      "similarity": 253.2801140345664
    },
    {
      "metadata": {
        "doc_id": "918",
        "name": "Server-Side Request Forgery (SSRF)",
        "source": "sparse",
        "original_content": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
        "keyphrase_sources": [
          {
            "id": "rootcause:cross-site request forgery",
            "keyphrase": "cross-site request forgery",
            "type": "rootcause"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          }
        ]
      },
      "similarity": 239.05490010258808
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse",
        "original_content": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
        "keyphrase_sources": [
          {
            "id": "rootcause:cross-site request forgery",
            "keyphrase": "cross-site request forgery",
            "type": "rootcause"
          },
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "product:Map Contact",
            "keyphrase": "Map Contact",
            "type": "product"
          },
          {
            "id": "version:n/a through 3.0.4",
            "keyphrase": "n/a through 3.0.4",
            "type": "version"
          }
        ]
      },
      "similarity": 231.0725553953488
    },
    {
      "metadata": {
        "doc_id": "601",
        "name": "URL Redirection to Untrusted Site ('Open Redirect')",
        "source": "sparse",
        "original_content": "The web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a redirect.",
        "keyphrase_sources": [
          {
            "id": "rootcause:cross-site request forgery",
            "keyphrase": "cross-site request forgery",
            "type": "rootcause"
          }
        ]
      },
      "similarity": 220.33731053434383
    },
    {
      "metadata": {
        "doc_id": "80",
        "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
        "source": "sparse",
        "original_content": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as \"<\", \">\", and \"&\" that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.",
        "keyphrase_sources": [
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          }
        ]
      },
      "similarity": 193.9789020290669
    },
    {
      "metadata": {
        "doc_id": "1004",
        "name": "Sensitive Cookie Without 'HttpOnly' Flag",
        "source": "sparse",
        "original_content": "The product uses a cookie to store sensitive information, but the cookie is not marked with the HttpOnly flag.",
        "keyphrase_sources": [
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          }
        ]
      },
      "similarity": 192.34246738590068
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse",
        "original_content": "The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.",
        "keyphrase_sources": [
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          }
        ]
      },
      "similarity": 141.81252067161222
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "source": "sparse",
        "original_content": "The product allows the upload or transfer of dangerous file types that are automatically processed within its environment.",
        "keyphrase_sources": [
          {
            "id": "version:n/a through 3.0.4",
            "keyphrase": "n/a through 3.0.4",
            "type": "version"
          }
        ]
      },
      "similarity": 64.15773764279174
    },
    {
      "metadata": {
        "doc_id": "22",
        "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
        "source": "sparse",
        "original_content": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
        "keyphrase_sources": [
          {
            "id": "product:Map Contact",
            "keyphrase": "Map Contact",
            "type": "product"
          },
          {
            "id": "version:n/a through 3.0.4",
            "keyphrase": "n/a through 3.0.4",
            "type": "version"
          }
        ]
      },
      "similarity": 48.71302217972777
    },
    {
      "metadata": {
        "doc_id": "696",
        "name": "Incorrect Behavior Order",
        "source": "sparse",
        "original_content": "The product performs multiple related behaviors, but the behaviors are performed in the wrong order in ways which may produce resultant weaknesses.",
        "keyphrase_sources": [
          {
            "id": "product:Map Contact",
            "keyphrase": "Map Contact",
            "type": "product"
          }
        ]
      },
      "similarity": 48.60667622092646
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-89",
      "CWE-80",
      "CWE-601",
      "CWE-79",
      "CWE-352",
      "CWE-918"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {
    "352": [
      {
        "id": "rootcause:cross-site request forgery",
        "keyphrase": "cross-site request forgery",
        "type": "rootcause"
      },
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "product:Map Contact",
        "keyphrase": "Map Contact",
        "type": "product"
      },
      {
        "id": "version:n/a through 3.0.4",
        "keyphrase": "n/a through 3.0.4",
        "type": "version"
      }
    ],
    "89": [
      {
        "id": "rootcause:cross-site request forgery",
        "keyphrase": "cross-site request forgery",
        "type": "rootcause"
      },
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "product:Map Contact",
        "keyphrase": "Map Contact",
        "type": "product"
      },
      {
        "id": "version:n/a through 3.0.4",
        "keyphrase": "n/a through 3.0.4",
        "type": "version"
      }
    ],
    "918": [
      {
        "id": "rootcause:cross-site request forgery",
        "keyphrase": "cross-site request forgery",
        "type": "rootcause"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      }
    ],
    "79": [
      {
        "id": "rootcause:cross-site request forgery",
        "keyphrase": "cross-site request forgery",
        "type": "rootcause"
      },
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "product:Map Contact",
        "keyphrase": "Map Contact",
        "type": "product"
      },
      {
        "id": "version:n/a through 3.0.4",
        "keyphrase": "n/a through 3.0.4",
        "type": "version"
      }
    ],
    "601": [
      {
        "id": "rootcause:cross-site request forgery",
        "keyphrase": "cross-site request forgery",
        "type": "rootcause"
      }
    ],
    "80": [
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      }
    ],
    "1004": [
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      }
    ],
    "116": [
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      }
    ],
    "22": [
      {
        "id": "product:Map Contact",
        "keyphrase": "Map Contact",
        "type": "product"
      },
      {
        "id": "version:n/a through 3.0.4",
        "keyphrase": "n/a through 3.0.4",
        "type": "version"
      }
    ],
    "696": [
      {
        "id": "product:Map Contact",
        "keyphrase": "Map Contact",
        "type": "product"
      }
    ],
    "434": [
      {
        "id": "version:n/a through 3.0.4",
        "keyphrase": "n/a through 3.0.4",
        "type": "version"
      }
    ]
  }
}