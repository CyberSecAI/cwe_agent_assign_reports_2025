{
  "cve_id": "CVE-2025-0349",
  "description": "A vulnerability classified as critical has been found in Tenda AC6 15.03.05.16. Affected is the function GetParentControlInfo of the file /goform/GetParentControlInfo. The manipulation of the argument src/mac leads to **stack-based buffer overflow**. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used. Other parameters might be affected as well.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "stack-based buffer overflow",
    "impact": "",
    "vector": "manipulation of the argument src/mac",
    "attacker": "",
    "product": "Tenda AC6",
    "version": "15.03.05.16",
    "component": "GetParentControlInfo of the file /goform/GetParentControlInfo"
  },
  "reference_content": "## Analysis of CVE-2025-0349 related content\n\nBased on the provided content, this relates to a buffer overflow vulnerability in the Tenda AC6 V15.03.05.16 firmware. Here's a breakdown of the information:\n\n**Root cause of vulnerability:**\n\nThe vulnerability stems from the use of `strcpy` in the `GetParentControlInfo` function without proper bounds checking. `strcpy` copies a string from a source (`src`) to a destination buffer (`s + 2`) without verifying the size of the source string or ensuring it doesn't exceed the capacity of the destination buffer.\n\n**Weaknesses/vulnerabilities present:**\n\n*   **Buffer Overflow:** The core vulnerability is a buffer overflow due to unchecked string copying.\n*   **Unsafe Function Usage:** The use of `strcpy` is inherently unsafe as it doesn't provide any protection against buffer overflows.\n*   **Lack of Input Validation:** The size of the input string (`src`) obtained from `sub_2B7C4(a1, \"mac\", &unk_EA0EC)` is not validated before being copied.\n\n**Impact of exploitation:**\n\nThe vulnerability allows for a buffer overflow, potentially leading to:\n\n*   **Denial of Service (DoS):**  Overwriting critical data could crash the device.\n*   **Remote Code Execution (RCE):**  A carefully crafted payload could potentially overwrite function return addresses or other critical data, allowing an attacker to execute arbitrary code on the device. (This is implied, but not explicitly stated in the provided content).\n\n**Attack vectors:**\n\n*   **Network:** The vulnerability is exploitable via network requests to the `http://<target_ip>/goform/GetParentControlInfo` endpoint.\n*   **HTTP GET Request:** The exploit uses an HTTP GET request with a `mac` parameter to send the malicious payload.\n\n**Required attacker capabilities/position:**\n\n*   **Network Access:** The attacker needs network access to the Tenda AC6 device.\n*   **Understanding of the Vulnerability:** The attacker needs to understand the buffer overflow vulnerability and how to craft a payload to exploit it.\n*   **Ability to Send HTTP Requests:** The attacker needs to be able to send crafted HTTP GET requests.\n\n**Mitigation or fix:**\n\nThe content does not provide information about a specific fix. However, the following mitigations are implied:\n\n*   **Replace `strcpy`:** Replace `strcpy` with a safer alternative like `strncpy` or `snprintf` that allows specifying the maximum number of bytes to copy.\n*   **Input Validation:** Implement robust input validation to ensure that the size of the `src` string does not exceed the capacity of the destination buffer.\n*   **Firmware Update:** Apply any security updates released by Tenda that address this vulnerability.\n\n**PoC (Proof of Concept):**\n\nThe content includes a Python script demonstrating a proof-of-concept exploit. The script creates a payload of a large string (\"A\" repeated many times) and appends a specific value (`v11_value`). It then sends this payload as the `mac` parameter in an HTTP GET request to the vulnerable endpoint.\n\n**More detail than official CVE description:**\n\nYes, the content provides significantly more detail than a typical CVE description. It includes:\n\n*   Specific function name (`GetParentControlInfo`)\n*   Detailed explanation of the root cause (use of `strcpy` and lack of bounds checking)\n*   A PoC exploit script\n*   Specific URL for exploitation.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-121 | Stack-based Buffer Overflow | 1.0 | Variant | Primary | Allowed |\n| CWE-119 | Improper Restriction of Operations within the Bounds of a Memory Buffer | 0.7 | Class | Secondary | Discouraged |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-121 which is a variant of CWE-119. CWE-119 is a more general class of weakness. Since the description specifies a stack-based buffer overflow, CWE-121 is the more specific and appropriate choice. The relationship between CWE-121 and CWE-119 influenced the decision to choose the more specific variant.\n\n```mermaid\ngraph TD\n    cwe121[\"CWE-121: Stack-based Buffer Overflow\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\"]\n    \n    cwe121 -->|CHILDOF| cwe119\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe121 primary\n    class cwe119 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with the use of `strcpy` without proper bounds checking, leading to a stack-based buffer overflow.\n\nRoot Cause: **strcpy** without bounds checking\nWeakness: **stack-based buffer overflow**\nImpact: Potential Denial of Service (DoS) or Remote Code Execution (RCE)\n\n## Summary of Analysis\nThe vulnerability description explicitly states a **stack-based buffer overflow** due to manipulation of the `src/mac` argument. The CVE Reference Links Content Summary confirms the root cause as the use of `strcpy` without bounds checking.\n\nCWE-121, \"Stack-based Buffer Overflow,\" is a Variant-level CWE and is the most precise match for the described vulnerability. It is a child of the more general CWE-119, \"Improper Restriction of Operations within the Bounds of a Memory Buffer.\"\n\nThe evidence is strong and directly supports the selection of CWE-121. The CVE Reference Links Content Summary provides detailed information about the root cause, affected function, and attack vector.\n\nOther CWEs Considered:\n\n*   CWE-119: While relevant as a parent, it's too general. The description clearly indicates a stack-based overflow, making CWE-121 a better fit.\n*   CWE-122 (Heap-based Buffer Overflow): Ruled out because the overflow is explicitly stated to be stack-based.\n*   CWE-131 (Incorrect Calculation of Buffer Size): While potentially related, the primary issue is the unchecked copying of data using `strcpy`, not necessarily an incorrect size calculation.\n*   CWE-190 (Integer Overflow or Wraparound): Not directly related to the buffer overflow issue.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-121: Stack-based Buffer Overflow\n**Abstraction Level**: Variant\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nA stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This may result in read or write operations on unexpected memory locations that could be linked to other variables, data structures, or internal program data.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-119 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available.\n\n## CWE-131: Incorrect Calculation of Buffer Size\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-190: Integer Overflow or Wraparound\n**Abstraction Level**: Base\n**Similarity Score**: 1394.76\n**Source**: sparse\n\n**Description**:\nThe product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-121 | Stack-based Buffer Overflow | 1.0 | Variant | Primary | Allowed |\n| CWE-119 | Improper Restriction of Operations within the Bounds of a Memory Buffer | 0.7 | Class | Secondary | Discouraged |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-121 which is a variant of CWE-119. CWE-119 is a more general class of weakness. Since the description specifies a stack-based buffer overflow, CWE-121 is the more specific and appropriate choice. The relationship between CWE-121 and CWE-119 influenced the decision to choose the more specific variant.\n\n```mermaid\ngraph TD\n    cwe121[\"CWE-121: Stack-based Buffer Overflow\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\"]\n    \n    cwe121 -->|CHILDOF| cwe119\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe121 primary\n    class cwe119 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with the use of `strcpy` without proper bounds checking, leading to a stack-based buffer overflow.\n\nRoot Cause: **strcpy** without bounds checking\nWeakness: **stack-based buffer overflow**\nImpact: Potential Denial of Service (DoS) or Remote Code Execution (RCE)\n\n## Summary of Analysis\nThe vulnerability description explicitly states a **stack-based buffer overflow** due to manipulation of the `src/mac` argument. The CVE Reference Links Content Summary confirms the root cause as the use of `strcpy` without bounds checking.\n\nCWE-121, \"Stack-based Buffer Overflow,\" is a Variant-level CWE and is the most precise match for the described vulnerability. It is a child of the more general CWE-119, \"Improper Restriction of Operations within the Bounds of a Memory Buffer.\"\n\nThe evidence is strong and directly supports the selection of CWE-121. The CVE Reference Links Content Summary provides detailed information about the root cause, affected function, and attack vector.\n\nOther CWEs Considered:\n\n*   CWE-119: While relevant as a parent, it's too general. The description clearly indicates a stack-based overflow, making CWE-121 a better fit.\n*   CWE-122 (Heap-based Buffer Overflow): Ruled out because the overflow is explicitly stated to be stack-based.\n*   CWE-131 (Incorrect Calculation of Buffer Size): While potentially related, the primary issue is the unchecked copying of data using `strcpy`, not necessarily an incorrect size calculation.\n*   CWE-190 (Integer Overflow or Wraparound): Not directly related to the buffer overflow issue.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-121: Stack-based Buffer Overflow\n**Abstraction Level**: Variant\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nA stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This may result in read or write operations on unexpected memory locations that could be linked to other variables, data structures, or internal program data.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-119 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available.\n\n## CWE-131: Incorrect Calculation of Buffer Size\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-190: Integer Overflow or Wraparound\n**Abstraction Level**: Base\n**Similarity Score**: 1394.76\n**Source**: sparse\n\n**Description**:\nThe product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-121:**\n- 121 (Stack-based Buffer Overflow) - ROOT\n\n\n**Chain starting from CWE-131:**\n- 131 (Incorrect Calculation of Buffer Size) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "119",
        "name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Buffer Overflow",
        "match_reason": "term_in_phrase_whole_phrase"
      },
      "similarity": 800.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "190",
        "name": "Integer Overflow or Wraparound",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Overflow",
        "match_reason": "term_in_phrase_whole_phrase"
      },
      "similarity": 800.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "121",
        "name": "Stack-based Buffer Overflow",
        "source": "sparse"
      },
      "similarity": 449.8809494519211
    },
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "sparse"
      },
      "similarity": 415.1175001090714
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 393.33222867886985
    },
    {
      "metadata": {
        "doc_id": "125",
        "name": "Out-of-bounds Read",
        "source": "sparse"
      },
      "similarity": 382.7243450317222
    },
    {
      "metadata": {
        "doc_id": "674",
        "name": "Uncontrolled Recursion",
        "source": "sparse"
      },
      "similarity": 382.68165490263476
    },
    {
      "metadata": {
        "doc_id": "122",
        "name": "Heap-based Buffer Overflow",
        "source": "sparse"
      },
      "similarity": 370.12021275313253
    },
    {
      "metadata": {
        "doc_id": "78",
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "type": "Base",
        "original_content": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
        "keyphrase_source": "weakness:stack-based buffer overflow",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse",
            "graph"
          ],
          "retriever_count": 3,
          "normalized_scores": {
            "dense": 0.6377568344323292,
            "sparse": 124.39299166701484,
            "graph": 2.595278303854076
          }
        }
      },
      "similarity": 0.6377568344323292
    },
    {
      "doc_id": "128",
      "text": "CWE-128: Wrap-around Error",
      "score": 2.9120000000000004,
      "metadata": {
        "doc_id": "128",
        "name": "Wrap-around Error",
        "type": "base",
        "original_content": "CWE-128: Wrap-around Error",
        "relationships": [
          {
            "source_id": "128",
            "target_id": "190",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "128",
            "target_id": "119",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "128",
            "target_id": "682",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "682",
            "target_id": "128",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "119",
            "target_id": "128",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "119",
                  "128",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "119"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "119",
                  "128",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "119"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "128",
                  "119",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "119"
            },
            "peer_relationship": {
              "path": [
                [
                  "128",
                  "190",
                  "PEEROF"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "190"
            }
          }
        },
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.9120000000000004
          }
        }
      },
      "similarity": 2.9120000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-121",
      "CWE-131",
      "CWE-190",
      "CWE-122",
      "CWE-119"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}