{
  "cve_id": "CVE-2024-10805",
  "description": "A vulnerability was found in code-projects University Event Management System 1.0. It has been classified as critical. This affects an unknown part of the file doedit.php. The manipulation of the argument id leads to **sql injection**. It is possible to initiate the attack remotely. The exploit has been disclosed to the public and may be used. The initial researcher advisory mentions a confusing product name to be affected. Other parameters might be affected as well.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "sql injection",
    "impact": "",
    "vector": "",
    "attacker": "",
    "product": "code-projects University Event Management System",
    "version": "1",
    "component": "doedit.php"
  },
  "reference_content": "Based on the provided information, here's an analysis of the vulnerability:\n\n**Vulnerability:** SQL Injection\n\n**Root Cause:**\n- The `doedit.php` file in the Events-Management-System does not properly sanitize or validate the `id` parameter before using it in an SQL query. The `id` parameter is directly concatenated into the SQL query, making it vulnerable to SQL injection.\n\n**Weaknesses/Vulnerabilities:**\n- Lack of input sanitization: The application does not sanitize the 'id' parameter before using it in SQL query, allowing the attacker to inject malicious SQL code.\n- Direct concatenation of user-supplied data:  The 'id' parameter is directly concatenated into the SQL query, a classic vulnerability pattern.\n\n**Impact of Exploitation:**\n- Sensitive information disclosure: Attackers can use SQL injection to retrieve sensitive information from the database, potentially including usernames, passwords, personal data, or other confidential details.\n- Database manipulation: The attacker could potentially modify data within the database, insert malicious data, or even delete database contents\n- Full system compromise: With successful exploitation of SQL injection vulnerabilities, complete compromise of the system may be possible in some cases.\n\n**Attack Vectors:**\n- HTTP POST request to `doedit.php` with a crafted `id` parameter in the request body.\n\n**Required Attacker Capabilities/Position:**\n- The attacker needs to be able to send HTTP requests to the vulnerable application.\n- The attacker doesn't necessarily need to be logged in, as the vulnerability is present even without login.\n- Basic understanding of SQL is required to craft SQL injection payloads.\n- Knowledge of the vulnerable application's URL (`doedit.php`) and the parameter name (`id`).\n\n**Technical Details from the provided text:**\n\n- Vulnerable file: `doedit.php`\n- Vulnerable parameter: `id`\n- The provided Proof-of-Concept (POC) uses a `POST` request to `dodelete.php` and parameter `id` which is slightly different from description.\n- The database name obtained with sqlmap is `healthcare`.\n- sqlmap is used as a tool to test and exploit the vulnerability, although that is not the actual vector.\n\n**Additional Notes:**\n- The vulnerability is present even when the user isn't logged in.\n- The provided text also mentions `dodelete.php`, but the main vulnerability described is in `doedit.php` and the sqlmap PoC uses `dodelete.php`.\n- The included images show the successful extraction of the database name.\n- The `sql16.md` document within the github repository documents this vulnerability for \"Events-Management-system\"",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-89 | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | 1.0 | Base | Primary | Allowed |\n| CWE-74 | Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') | 0.3 | Class | Secondary | Discouraged |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship influencing the decision is the parent-child relationship between CWE-74 and CWE-89. CWE-89 is a specific type of CWE-74. Given that the vulnerability is explicitly identified as **SQL Injection**, CWE-89 is the more appropriate and specific choice. The Retriever Results also shows the highest score for CWE-89 with a score of 1.0.\n\n```mermaid\ngraph TD\n    cwe89[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n    \n    cwe89 -->|CHILDOF| cwe74\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe89 primary\n    class cwe74 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with the lack of input validation on the `id` parameter in `doedit.php`. This **missing** input validation leads directly to **SQL Injection** (CWE-89). The **SQL Injection** then allows for sensitive information disclosure, database manipulation, and potentially full system compromise.\n\n## Summary of Analysis\nThe initial assessment strongly pointed to CWE-89 due to the explicit mention of **SQL Injection** in the vulnerability description and the CVE Reference Links Content Summary, which details the **lack of sanitization** of the `id` parameter. The Retriever results further supported this by giving the highest score for CWE-89.\nThe evidence is clear and directly supports the selection of CWE-89 as the primary weakness. The other CWEs were considered but ultimately deemed less relevant as they represent either broader categories (like CWE-74) or different types of vulnerabilities (like CWE-79, CWE-434).\nCWE-89 is at the optimal level of specificity as it accurately captures the nature of the vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.78\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Technical Explanation**: The vulnerability description explicitly mentions \"**sql injection**\" resulting from manipulating the `id` argument in `doedit.php`. The CVE Reference Links Content Summary further details the **lack of input sanitization** of the `id` parameter before being used in an SQL query. This perfectly aligns with CWE-89, which describes the **improper neutralization** of special elements used in an SQL command.\n**Security Implications**: An attacker can inject malicious SQL code to extract sensitive information, modify data, or potentially compromise the entire system.\n**Relationship**: CWE-89 is a child of CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')), but CWE-89 is much more specific.\n**Mapping Guidance**: The Usage is \"Allowed\" for CWE-89.\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n**Technical Explanation**: CWE-74 is a more general case of injection vulnerabilities. While **SQL Injection** falls under this category, the specific nature of the vulnerability being an **SQL Injection** makes CWE-89 a better fit.\n**Security Implications**: Similar to CWE-89, but less specific.\n**Relationship**: CWE-89 is a child of CWE-74.\n**Mapping Guidance**: The Usage is \"Discouraged\" for CWE-74.\n\n## CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Technical Explanation**: This is not applicable because the vulnerability is **SQL Injection**, not Cross-Site Scripting.\n**Security Implications**: N/A\n**Relationship**: N/A\n**Mapping Guidance**: N/A\n\n## CWE-434: Unrestricted Upload of File with Dangerous Type\n**Abstraction Level**: Base\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nThe product allows the upload or transfer of dangerous file types that are automatically processed within its environment.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Technical Explanation**: This is not applicable because the vulnerability is **SQL Injection**, not an unrestricted file upload.\n**Security Implications**: N/A\n**Relationship**: N/A\n**Mapping Guidance**: N/A\n\n## CWE-1336: Improper Neutralization of Special Elements Used in a Template Engine\n**Abstraction Level**: base\n**Similarity Score**: 2.33\n**Source**: graph\n\n**Description**:\nCWE-1336: Improper Neutralization of Special Elements Used in a Template Engine\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Technical Explanation**: This is not applicable because the vulnerability is **SQL Injection**, not an issue with a template engine.\n**Security Implications**: N/A\n**Relationship**: N/A\n**Mapping Guidance**: N/A\n\n## CWE-352: Cross-Site Request Forgery (CSRF)\n**Abstraction Level**: compound\n**Similarity Score**: 2.63\n**Source**: graph\n\n**Description**:\nCWE-352: Cross-Site Request Forgery (CSRF)\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This is a well-known Composite of multiple weaknesses that must all occur simultaneously, although it is attack-oriented in nature.\n\n**Technical Explanation**: This is not applicable because the vulnerability is **SQL Injection**, not a CSRF issue.\n**Security Implications**: N/A\n**Relationship**: N/A\n**Mapping Guidance**: N/A",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-89 | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | 1.0 | Base | Primary | Allowed |\n| CWE-74 | Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') | 0.3 | Class | Secondary | Discouraged |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship influencing the decision is the parent-child relationship between CWE-74 and CWE-89. CWE-89 is a specific type of CWE-74. Given that the vulnerability is explicitly identified as **SQL Injection**, CWE-89 is the more appropriate and specific choice. The Retriever Results also shows the highest score for CWE-89 with a score of 1.0.\n\n```mermaid\ngraph TD\n    cwe89[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n    \n    cwe89 -->|CHILDOF| cwe74\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe89 primary\n    class cwe74 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with the lack of input validation on the `id` parameter in `doedit.php`. This **missing** input validation leads directly to **SQL Injection** (CWE-89). The **SQL Injection** then allows for sensitive information disclosure, database manipulation, and potentially full system compromise.\n\n## Summary of Analysis\nThe initial assessment strongly pointed to CWE-89 due to the explicit mention of **SQL Injection** in the vulnerability description and the CVE Reference Links Content Summary, which details the **lack of sanitization** of the `id` parameter. The Retriever results further supported this by giving the highest score for CWE-89.\nThe evidence is clear and directly supports the selection of CWE-89 as the primary weakness. The other CWEs were considered but ultimately deemed less relevant as they represent either broader categories (like CWE-74) or different types of vulnerabilities (like CWE-79, CWE-434).\nCWE-89 is at the optimal level of specificity as it accurately captures the nature of the vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.78\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Technical Explanation**: The vulnerability description explicitly mentions \"**sql injection**\" resulting from manipulating the `id` argument in `doedit.php`. The CVE Reference Links Content Summary further details the **lack of input sanitization** of the `id` parameter before being used in an SQL query. This perfectly aligns with CWE-89, which describes the **improper neutralization** of special elements used in an SQL command.\n**Security Implications**: An attacker can inject malicious SQL code to extract sensitive information, modify data, or potentially compromise the entire system.\n**Relationship**: CWE-89 is a child of CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')), but CWE-89 is much more specific.\n**Mapping Guidance**: The Usage is \"Allowed\" for CWE-89.\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n**Technical Explanation**: CWE-74 is a more general case of injection vulnerabilities. While **SQL Injection** falls under this category, the specific nature of the vulnerability being an **SQL Injection** makes CWE-89 a better fit.\n**Security Implications**: Similar to CWE-89, but less specific.\n**Relationship**: CWE-89 is a child of CWE-74.\n**Mapping Guidance**: The Usage is \"Discouraged\" for CWE-74.\n\n## CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Technical Explanation**: This is not applicable because the vulnerability is **SQL Injection**, not Cross-Site Scripting.\n**Security Implications**: N/A\n**Relationship**: N/A\n**Mapping Guidance**: N/A\n\n## CWE-434: Unrestricted Upload of File with Dangerous Type\n**Abstraction Level**: Base\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nThe product allows the upload or transfer of dangerous file types that are automatically processed within its environment.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Technical Explanation**: This is not applicable because the vulnerability is **SQL Injection**, not an unrestricted file upload.\n**Security Implications**: N/A\n**Relationship**: N/A\n**Mapping Guidance**: N/A\n\n## CWE-1336: Improper Neutralization of Special Elements Used in a Template Engine\n**Abstraction Level**: base\n**Similarity Score**: 2.33\n**Source**: graph\n\n**Description**:\nCWE-1336: Improper Neutralization of Special Elements Used in a Template Engine\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Technical Explanation**: This is not applicable because the vulnerability is **SQL Injection**, not an issue with a template engine.\n**Security Implications**: N/A\n**Relationship**: N/A\n**Mapping Guidance**: N/A\n\n## CWE-352: Cross-Site Request Forgery (CSRF)\n**Abstraction Level**: compound\n**Similarity Score**: 2.63\n**Source**: graph\n\n**Description**:\nCWE-352: Cross-Site Request Forgery (CSRF)\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This is a well-known Composite of multiple weaknesses that must all occur simultaneously, although it is attack-oriented in nature.\n\n**Technical Explanation**: This is not applicable because the vulnerability is **SQL Injection**, not a CSRF issue.\n**Security Implications**: N/A\n**Relationship**: N/A\n**Mapping Guidance**: N/A\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-89:**\n- 89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')) - ROOT\n\n\n**Chain starting from CWE-79:**\n- 79 (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: SQL injection",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 516.2147111182156
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "source": "sparse"
      },
      "similarity": 442.5326150160655
    },
    {
      "metadata": {
        "doc_id": "1336",
        "name": "Improper Neutralization of Special Elements Used in a Template Engine",
        "source": "sparse"
      },
      "similarity": 421.5575043946074
    },
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse"
      },
      "similarity": 413.329122862072
    },
    {
      "metadata": {
        "doc_id": "99",
        "name": "Improper Control of Resource Identifiers ('Resource Injection')",
        "source": "sparse"
      },
      "similarity": 413.24013987021453
    },
    {
      "metadata": {
        "doc_id": "306",
        "name": "Missing Authentication for Critical Function",
        "source": "sparse"
      },
      "similarity": 405.1159129143081
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse"
      },
      "similarity": 403.2148377003534
    },
    {
      "metadata": {
        "doc_id": "96",
        "name": "Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')",
        "type": "Base",
        "original_content": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.",
        "keyphrase_source": "weakness:sql injection",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.606605131355568,
            "graph": 1.6957199148335966
          }
        }
      },
      "similarity": 0.606605131355568
    },
    {
      "doc_id": "73",
      "text": "CWE-73: External Control of File Name or Path",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "73",
        "name": "External Control of File Name or Path",
        "type": "base",
        "original_content": "CWE-73: External Control of File Name or Path",
        "relationships": [
          {
            "source_id": "73",
            "target_id": "114",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "59",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "434",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "41",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "22",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "20",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "700"
            }
          },
          {
            "source_id": "73",
            "target_id": "610",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "642",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "99",
            "target_id": "73",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "642",
            "target_id": "73",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "610",
            "target_id": "73",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "59",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "41",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "22",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "20",
            "target_id": "73",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "700"
            }
          },
          {
            "source_id": "114",
            "target_id": "73",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "434",
                  "73",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "434"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "434",
                  "73",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "434"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "73",
                  "434",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "434"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-89",
      "CWE-79",
      "CWE-1336",
      "CWE-352",
      "CWE-74",
      "CWE-434"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}