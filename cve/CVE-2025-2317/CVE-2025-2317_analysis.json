{
  "cve_id": "CVE-2025-2317",
  "description": "The Product Filter by WBW plugin for WordPress is vulnerable to **time-based SQL Injection** via the filtersDataBackend parameter in all versions up to, and including, 2.7.9 due to **insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query**. This makes it possible for unauthenticated attackers to append additional SQL queries into already existing queries that can be used to extract sensitive information from the database.",
  "key_phrases": {
    "rootcause": [
      "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
      "lack of sufficient preparation on existing SQL query"
    ],
    "weakness": "time-based SQL Injection",
    "impact": [
      "extract sensitive information from the database",
      "extract sensitive information from database"
    ],
    "vector": "",
    "attacker": "unauthenticated attackers",
    "product": "Product Filter by WBW WordPress plugin",
    "version": "up to and including 2.7.9",
    "component": "filtersDataBackend parameter"
  },
  "reference_content": "The provided content consists of the source code for the `Meta_ValuesModelWpf` class, located in the `woo-product-filter` WordPress plugin (version 2.7.8).  It appears to be a model responsible for interacting with the `meta_values` database table.\n\nHere's a breakdown of the relevant information:\n\n* **Root cause of vulnerability:**  The code itself doesn't explicitly reveal a vulnerability. However, the presence of dynamic SQL query construction (e.g., lines 38, 71, 106) combined with user-supplied input (through `$keyId`, `$keys`, `$field`, `$values`, etc.) raises a significant concern for **SQL injection**.  The `UtilsWpf::controlNumericValues` function is used in some cases (line 69, 94), but it's unclear if it adequately sanitizes all possible input types or covers all usage scenarios.  The use of `rawurlencode` (line 157) is also not sufficient to prevent SQL injection.\n* **Weaknesses/vulnerabilities present:**\n    * **Potential SQL Injection:**  Dynamic SQL query construction without proper sanitization of user-supplied input.\n    * **Insufficient Input Validation:**  Reliance on potentially inadequate sanitization functions.\n* **Impact of exploitation:**  Successful SQL injection could allow an attacker to:\n    * Read sensitive data from the database.\n    * Modify data in the database.\n    * Potentially execute arbitrary code on the server (depending on database permissions and configuration).\n* **Attack vectors:**\n    * An attacker could manipulate the parameters passed to functions like `getKeyValueIds`, `getFieldValuesList`, `getMetaValueTerms`, `getMetaValueId`, and `getMetaValueIds` to inject malicious SQL code.\n* **Required attacker capabilities/position:**\n    * An attacker would need to be able to control the input parameters to the vulnerable functions. This could be through a crafted request to the WordPress site, potentially exploiting other vulnerabilities to gain control of input.\n* **Mitigation or fix:**\n    * **Prepared Statements:**  The most effective mitigation is to use prepared statements with parameterized queries. This prevents user input from being interpreted as SQL code.\n    * **Input Validation:**  Thoroughly validate and sanitize all user-supplied input before using it in SQL queries.  Use appropriate escaping functions for the database being used.\n    * **Least Privilege:** Ensure the database user account used by the plugin has only the necessary permissions.\n\nThe content provides significantly more detail than a typical CVE description would, as it's the actual source code.  It highlights the potential for SQL injection vulnerabilities due to the way SQL queries are constructed.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-89 | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | 1.0 | Base | Primary | Allowed |\n| CWE-20 | Improper Input Validation | 0.7 | Class | Secondary | Discouraged |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is CWE-89, which directly addresses the **improper neutralization** of SQL special elements. CWE-20 is a broader classification, and while relevant, it's less specific than CWE-89. The relationship between CWE-89 and CWE-20 is that CWE-89 can be seen as a specific type of improper input validation.\n\n```mermaid\ngraph TD\n    cwe89[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"]\n    cwe20[\"CWE-20: Improper Input Validation\"]\n\n    cwe89 -->|CHILDOF| cwe20\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe89 primary\n    class cwe20 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query**, leading to **time-based SQL Injection**, which allows **unauthenticated attackers** to **extract sensitive information from the database**.\n\nRoot Cause: **Improper Neutralization** (CWE-89) and potentially contributing Improper Input Validation (CWE-20).\nWeakness: Time-based SQL Injection.\nImpact: Sensitive information disclosure.\n\n## Summary of Analysis\nThe analysis is based on the vulnerability description, which clearly states that the Product Filter by WBW plugin is vulnerable to **time-based SQL Injection** due to **insufficient escaping** and **lack of sufficient preparation on the existing SQL query**.\n\nThe primary CWE is CWE-89, as the root cause explicitly mentions **insufficient escaping** of user-supplied parameters in the SQL query. This aligns perfectly with the definition of CWE-89: \"The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.\"\n\nCWE-20 was considered because the root cause also mentions the **lack of sufficient preparation on the existing SQL query**, which can be interpreted as a form of input validation. However, since the core issue is the **improper neutralization** of special elements, CWE-89 is more specific and appropriate. The mapping guidance for CWE-20 discourages its use when lower-level CWEs are available.\n\nThe selected CWEs are at the optimal level of specificity because CWE-89 is a Base level CWE that directly addresses the **improper neutralization** of SQL special elements, while CWE-20 is a Class level CWE that addresses a broader category of **improper input validation**.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n## CWE-184: Incomplete List of Disallowed Inputs\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-425: Direct Request ('Forced Browsing')\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-138: Improper Neutralization of Special Elements\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n## CWE-472: External Control of Assumed-Immutable Web Parameter\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-303: Incorrect Implementation of Authentication Algorithm\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe requirements for the product dictate the use of an established authentication algorithm, but the implementation of the algorithm is incorrect.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the product does.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-668: Exposure of Resource to Wrong Sphere\n**Abstraction Level**: Class\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-668 is high-level and is often misused as a catch-all when lower-level CWE IDs might be applicable. It is sometimes used for low-information vulnerability reports [REF-1287]. It is a level-1 Class (i.e., a child of a Pillar). It is not useful for trend analysis.\n\n## CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 5307.20\n**Source**: sparse\n\n**Description**:\nThe product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-89 | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | 1.0 | Base | Primary | Allowed |\n| CWE-20 | Improper Input Validation | 0.7 | Class | Secondary | Discouraged |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is CWE-89, which directly addresses the **improper neutralization** of SQL special elements. CWE-20 is a broader classification, and while relevant, it's less specific than CWE-89. The relationship between CWE-89 and CWE-20 is that CWE-89 can be seen as a specific type of improper input validation.\n\n```mermaid\ngraph TD\n    cwe89[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"]\n    cwe20[\"CWE-20: Improper Input Validation\"]\n\n    cwe89 -->|CHILDOF| cwe20\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe89 primary\n    class cwe20 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query**, leading to **time-based SQL Injection**, which allows **unauthenticated attackers** to **extract sensitive information from the database**.\n\nRoot Cause: **Improper Neutralization** (CWE-89) and potentially contributing Improper Input Validation (CWE-20).\nWeakness: Time-based SQL Injection.\nImpact: Sensitive information disclosure.\n\n## Summary of Analysis\nThe analysis is based on the vulnerability description, which clearly states that the Product Filter by WBW plugin is vulnerable to **time-based SQL Injection** due to **insufficient escaping** and **lack of sufficient preparation on the existing SQL query**.\n\nThe primary CWE is CWE-89, as the root cause explicitly mentions **insufficient escaping** of user-supplied parameters in the SQL query. This aligns perfectly with the definition of CWE-89: \"The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.\"\n\nCWE-20 was considered because the root cause also mentions the **lack of sufficient preparation on the existing SQL query**, which can be interpreted as a form of input validation. However, since the core issue is the **improper neutralization** of special elements, CWE-89 is more specific and appropriate. The mapping guidance for CWE-20 discourages its use when lower-level CWEs are available.\n\nThe selected CWEs are at the optimal level of specificity because CWE-89 is a Base level CWE that directly addresses the **improper neutralization** of SQL special elements, while CWE-20 is a Class level CWE that addresses a broader category of **improper input validation**.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n## CWE-184: Incomplete List of Disallowed Inputs\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-425: Direct Request ('Forced Browsing')\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-138: Improper Neutralization of Special Elements\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n## CWE-472: External Control of Assumed-Immutable Web Parameter\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-303: Incorrect Implementation of Authentication Algorithm\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe requirements for the product dictate the use of an established authentication algorithm, but the implementation of the algorithm is incorrect.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the product does.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-668: Exposure of Resource to Wrong Sphere\n**Abstraction Level**: Class\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-668 is high-level and is often misused as a catch-all when lower-level CWE IDs might be applicable. It is sometimes used for low-information vulnerability reports [REF-1287]. It is a level-1 Class (i.e., a child of a Pillar). It is not useful for trend analysis.\n\n## CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 5307.20\n**Source**: sparse\n\n**Description**:\nThe product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-90:**\n- 90 (Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')) - ROOT\n\n\n**Chain starting from CWE-89:**\n- 89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse",
        "original_content": "The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.",
        "keyphrase_sources": [
          {
            "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
            "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
            "type": "rootcause"
          },
          {
            "id": "rootcause:lack of sufficient preparation on existing SQL query",
            "keyphrase": "lack of sufficient preparation on existing SQL query",
            "type": "rootcause"
          },
          {
            "id": "weakness:time-based SQL Injection",
            "keyphrase": "time-based SQL Injection",
            "type": "weakness"
          },
          {
            "id": "impact:extract sensitive information from the database",
            "keyphrase": "extract sensitive information from the database",
            "type": "impact"
          },
          {
            "id": "impact:extract sensitive information from database",
            "keyphrase": "extract sensitive information from database",
            "type": "impact"
          },
          {
            "id": "attacker:unauthenticated attackers",
            "keyphrase": "unauthenticated attackers",
            "type": "attacker"
          },
          {
            "id": "product:Product Filter by WBW WordPress plugin",
            "keyphrase": "Product Filter by WBW WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:up to and including 2.7.9",
            "keyphrase": "up to and including 2.7.9",
            "type": "version"
          },
          {
            "id": "component:filtersDataBackend parameter",
            "keyphrase": "filtersDataBackend parameter",
            "type": "component"
          }
        ]
      },
      "similarity": 736.9277239353679
    },
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "sparse",
        "original_content": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
        "keyphrase_sources": [
          {
            "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
            "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
            "type": "rootcause"
          },
          {
            "id": "rootcause:lack of sufficient preparation on existing SQL query",
            "keyphrase": "lack of sufficient preparation on existing SQL query",
            "type": "rootcause"
          },
          {
            "id": "weakness:time-based SQL Injection",
            "keyphrase": "time-based SQL Injection",
            "type": "weakness"
          },
          {
            "id": "impact:extract sensitive information from the database",
            "keyphrase": "extract sensitive information from the database",
            "type": "impact"
          },
          {
            "id": "impact:extract sensitive information from database",
            "keyphrase": "extract sensitive information from database",
            "type": "impact"
          },
          {
            "id": "attacker:unauthenticated attackers",
            "keyphrase": "unauthenticated attackers",
            "type": "attacker"
          },
          {
            "id": "product:Product Filter by WBW WordPress plugin",
            "keyphrase": "Product Filter by WBW WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:up to and including 2.7.9",
            "keyphrase": "up to and including 2.7.9",
            "type": "version"
          },
          {
            "id": "component:filtersDataBackend parameter",
            "keyphrase": "filtersDataBackend parameter",
            "type": "component"
          }
        ]
      },
      "similarity": 714.9092151745638
    },
    {
      "metadata": {
        "doc_id": "90",
        "name": "Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
        "source": "sparse",
        "original_content": "The product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component.",
        "keyphrase_sources": [
          {
            "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
            "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
            "type": "rootcause"
          },
          {
            "id": "rootcause:lack of sufficient preparation on existing SQL query",
            "keyphrase": "lack of sufficient preparation on existing SQL query",
            "type": "rootcause"
          },
          {
            "id": "weakness:time-based SQL Injection",
            "keyphrase": "time-based SQL Injection",
            "type": "weakness"
          },
          {
            "id": "impact:extract sensitive information from the database",
            "keyphrase": "extract sensitive information from the database",
            "type": "impact"
          },
          {
            "id": "impact:extract sensitive information from database",
            "keyphrase": "extract sensitive information from database",
            "type": "impact"
          },
          {
            "id": "attacker:unauthenticated attackers",
            "keyphrase": "unauthenticated attackers",
            "type": "attacker"
          },
          {
            "id": "product:Product Filter by WBW WordPress plugin",
            "keyphrase": "Product Filter by WBW WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:up to and including 2.7.9",
            "keyphrase": "up to and including 2.7.9",
            "type": "version"
          },
          {
            "id": "component:filtersDataBackend parameter",
            "keyphrase": "filtersDataBackend parameter",
            "type": "component"
          }
        ]
      },
      "similarity": 680.1526577839488
    },
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse",
        "original_content": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
        "keyphrase_sources": [
          {
            "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
            "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
            "type": "rootcause"
          },
          {
            "id": "rootcause:lack of sufficient preparation on existing SQL query",
            "keyphrase": "lack of sufficient preparation on existing SQL query",
            "type": "rootcause"
          },
          {
            "id": "attacker:unauthenticated attackers",
            "keyphrase": "unauthenticated attackers",
            "type": "attacker"
          },
          {
            "id": "product:Product Filter by WBW WordPress plugin",
            "keyphrase": "Product Filter by WBW WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:up to and including 2.7.9",
            "keyphrase": "up to and including 2.7.9",
            "type": "version"
          },
          {
            "id": "component:filtersDataBackend parameter",
            "keyphrase": "filtersDataBackend parameter",
            "type": "component"
          }
        ]
      },
      "similarity": 656.7248295117191
    },
    {
      "metadata": {
        "doc_id": "20",
        "name": "Improper Input Validation",
        "source": "sparse",
        "original_content": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
        "keyphrase_sources": [
          {
            "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
            "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
            "type": "rootcause"
          }
        ]
      },
      "similarity": 628.4454322771368
    },
    {
      "metadata": {
        "doc_id": "502",
        "name": "Deserialization of Untrusted Data",
        "source": "sparse",
        "original_content": "The product deserializes untrusted data without sufficiently ensuring that the resulting data will be valid.",
        "keyphrase_sources": [
          {
            "id": "rootcause:lack of sufficient preparation on existing SQL query",
            "keyphrase": "lack of sufficient preparation on existing SQL query",
            "type": "rootcause"
          },
          {
            "id": "weakness:time-based SQL Injection",
            "keyphrase": "time-based SQL Injection",
            "type": "weakness"
          }
        ]
      },
      "similarity": 507.2732218277614
    },
    {
      "metadata": {
        "doc_id": "943",
        "name": "Improper Neutralization of Special Elements in Data Query Logic",
        "source": "sparse",
        "original_content": "The product generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query.",
        "keyphrase_sources": [
          {
            "id": "weakness:time-based SQL Injection",
            "keyphrase": "time-based SQL Injection",
            "type": "weakness"
          },
          {
            "id": "impact:extract sensitive information from the database",
            "keyphrase": "extract sensitive information from the database",
            "type": "impact"
          },
          {
            "id": "impact:extract sensitive information from database",
            "keyphrase": "extract sensitive information from database",
            "type": "impact"
          }
        ]
      },
      "similarity": 433.03208054649224
    },
    {
      "metadata": {
        "doc_id": "862",
        "name": "Missing Authorization",
        "source": "sparse",
        "original_content": "The product does not perform an authorization check when an actor attempts to access a resource or perform an action.",
        "keyphrase_sources": [
          {
            "id": "impact:extract sensitive information from the database",
            "keyphrase": "extract sensitive information from the database",
            "type": "impact"
          },
          {
            "id": "impact:extract sensitive information from database",
            "keyphrase": "extract sensitive information from database",
            "type": "impact"
          },
          {
            "id": "product:Product Filter by WBW WordPress plugin",
            "keyphrase": "Product Filter by WBW WordPress plugin",
            "type": "product"
          }
        ]
      },
      "similarity": 160.12568834794408
    },
    {
      "metadata": {
        "doc_id": "790",
        "name": "Improper Filtering of Special Elements",
        "source": "sparse",
        "original_content": "The product receives data from an upstream component, but does not filter or incorrectly filters special elements before sending it to a downstream component.",
        "keyphrase_sources": [
          {
            "id": "attacker:unauthenticated attackers",
            "keyphrase": "unauthenticated attackers",
            "type": "attacker"
          },
          {
            "id": "version:up to and including 2.7.9",
            "keyphrase": "up to and including 2.7.9",
            "type": "version"
          },
          {
            "id": "component:filtersDataBackend parameter",
            "keyphrase": "filtersDataBackend parameter",
            "type": "component"
          }
        ]
      },
      "similarity": 148.47358338836654
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-90",
      "CWE-89",
      "CWE-116",
      "CWE-212",
      "CWE-472",
      "CWE-74",
      "CWE-303",
      "CWE-138",
      "CWE-20",
      "CWE-184",
      "CWE-668",
      "CWE-497",
      "CWE-425"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {
    "116": [
      {
        "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
        "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
        "type": "rootcause"
      },
      {
        "id": "rootcause:lack of sufficient preparation on existing SQL query",
        "keyphrase": "lack of sufficient preparation on existing SQL query",
        "type": "rootcause"
      },
      {
        "id": "weakness:time-based SQL Injection",
        "keyphrase": "time-based SQL Injection",
        "type": "weakness"
      },
      {
        "id": "impact:extract sensitive information from the database",
        "keyphrase": "extract sensitive information from the database",
        "type": "impact"
      },
      {
        "id": "impact:extract sensitive information from database",
        "keyphrase": "extract sensitive information from database",
        "type": "impact"
      },
      {
        "id": "attacker:unauthenticated attackers",
        "keyphrase": "unauthenticated attackers",
        "type": "attacker"
      },
      {
        "id": "product:Product Filter by WBW WordPress plugin",
        "keyphrase": "Product Filter by WBW WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:up to and including 2.7.9",
        "keyphrase": "up to and including 2.7.9",
        "type": "version"
      },
      {
        "id": "component:filtersDataBackend parameter",
        "keyphrase": "filtersDataBackend parameter",
        "type": "component"
      }
    ],
    "89": [
      {
        "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
        "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
        "type": "rootcause"
      },
      {
        "id": "rootcause:lack of sufficient preparation on existing SQL query",
        "keyphrase": "lack of sufficient preparation on existing SQL query",
        "type": "rootcause"
      },
      {
        "id": "weakness:time-based SQL Injection",
        "keyphrase": "time-based SQL Injection",
        "type": "weakness"
      },
      {
        "id": "impact:extract sensitive information from the database",
        "keyphrase": "extract sensitive information from the database",
        "type": "impact"
      },
      {
        "id": "impact:extract sensitive information from database",
        "keyphrase": "extract sensitive information from database",
        "type": "impact"
      },
      {
        "id": "attacker:unauthenticated attackers",
        "keyphrase": "unauthenticated attackers",
        "type": "attacker"
      },
      {
        "id": "product:Product Filter by WBW WordPress plugin",
        "keyphrase": "Product Filter by WBW WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:up to and including 2.7.9",
        "keyphrase": "up to and including 2.7.9",
        "type": "version"
      },
      {
        "id": "component:filtersDataBackend parameter",
        "keyphrase": "filtersDataBackend parameter",
        "type": "component"
      }
    ],
    "90": [
      {
        "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
        "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
        "type": "rootcause"
      },
      {
        "id": "rootcause:lack of sufficient preparation on existing SQL query",
        "keyphrase": "lack of sufficient preparation on existing SQL query",
        "type": "rootcause"
      },
      {
        "id": "weakness:time-based SQL Injection",
        "keyphrase": "time-based SQL Injection",
        "type": "weakness"
      },
      {
        "id": "impact:extract sensitive information from the database",
        "keyphrase": "extract sensitive information from the database",
        "type": "impact"
      },
      {
        "id": "impact:extract sensitive information from database",
        "keyphrase": "extract sensitive information from database",
        "type": "impact"
      },
      {
        "id": "attacker:unauthenticated attackers",
        "keyphrase": "unauthenticated attackers",
        "type": "attacker"
      },
      {
        "id": "product:Product Filter by WBW WordPress plugin",
        "keyphrase": "Product Filter by WBW WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:up to and including 2.7.9",
        "keyphrase": "up to and including 2.7.9",
        "type": "version"
      },
      {
        "id": "component:filtersDataBackend parameter",
        "keyphrase": "filtersDataBackend parameter",
        "type": "component"
      }
    ],
    "352": [
      {
        "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
        "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
        "type": "rootcause"
      },
      {
        "id": "rootcause:lack of sufficient preparation on existing SQL query",
        "keyphrase": "lack of sufficient preparation on existing SQL query",
        "type": "rootcause"
      },
      {
        "id": "attacker:unauthenticated attackers",
        "keyphrase": "unauthenticated attackers",
        "type": "attacker"
      },
      {
        "id": "product:Product Filter by WBW WordPress plugin",
        "keyphrase": "Product Filter by WBW WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:up to and including 2.7.9",
        "keyphrase": "up to and including 2.7.9",
        "type": "version"
      },
      {
        "id": "component:filtersDataBackend parameter",
        "keyphrase": "filtersDataBackend parameter",
        "type": "component"
      }
    ],
    "20": [
      {
        "id": "rootcause:insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
        "keyphrase": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
        "type": "rootcause"
      }
    ],
    "502": [
      {
        "id": "rootcause:lack of sufficient preparation on existing SQL query",
        "keyphrase": "lack of sufficient preparation on existing SQL query",
        "type": "rootcause"
      },
      {
        "id": "weakness:time-based SQL Injection",
        "keyphrase": "time-based SQL Injection",
        "type": "weakness"
      }
    ],
    "943": [
      {
        "id": "weakness:time-based SQL Injection",
        "keyphrase": "time-based SQL Injection",
        "type": "weakness"
      },
      {
        "id": "impact:extract sensitive information from the database",
        "keyphrase": "extract sensitive information from the database",
        "type": "impact"
      },
      {
        "id": "impact:extract sensitive information from database",
        "keyphrase": "extract sensitive information from database",
        "type": "impact"
      }
    ],
    "862": [
      {
        "id": "impact:extract sensitive information from the database",
        "keyphrase": "extract sensitive information from the database",
        "type": "impact"
      },
      {
        "id": "impact:extract sensitive information from database",
        "keyphrase": "extract sensitive information from database",
        "type": "impact"
      },
      {
        "id": "product:Product Filter by WBW WordPress plugin",
        "keyphrase": "Product Filter by WBW WordPress plugin",
        "type": "product"
      }
    ],
    "790": [
      {
        "id": "attacker:unauthenticated attackers",
        "keyphrase": "unauthenticated attackers",
        "type": "attacker"
      },
      {
        "id": "version:up to and including 2.7.9",
        "keyphrase": "up to and including 2.7.9",
        "type": "version"
      },
      {
        "id": "component:filtersDataBackend parameter",
        "keyphrase": "filtersDataBackend parameter",
        "type": "component"
      }
    ]
  }
}