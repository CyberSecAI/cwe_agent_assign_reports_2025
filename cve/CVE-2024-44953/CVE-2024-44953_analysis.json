{
  "cve_id": "CVE-2024-44953",
  "description": "In the Linux kernel, the following vulnerability has been resolvedscsi ufs core Fix deadlock during RTC updateThere is a deadlock when runtime suspend waits for the flush of RTC work,and the RTC work calls ufshcd_rpm_get_sync() to wait for runtime resume.Here is deadlock backtracekworker/01 D 4892.876354 10 10971 4859 0x4208060 0x8 10 0 120 670730152367ptr f0ffff80c2e40000 0 1 0x00000001 0x000000ff 0x000000ff 0x000000ff __switch_to+0x1a8/0x2d4 __schedule+0x684/0xa98 schedule+0x48/0xc8 schedule_timeout+0x48/0x170 do_wait_for_common+0x108/0x1b0 wait_for_completion+0x44/0x60 __flush_work+0x39c/0x424 __cancel_work_sync+0xd8/0x208 cancel_delayed_work_sync+0x14/0x28 __ufshcd_wl_suspend+0x19c/0x480 ufshcd_wl_runtime_suspend+0x3c/0x1d4 scsi_runtime_suspend+0x78/0xc8 __rpm_callback+0x94/0x3e0 rpm_suspend+0x2d4/0x65c __pm_runtime_suspend+0x80/0x114 scsi_runtime_idle+0x38/0x6c rpm_idle+0x264/0x338 __pm_runtime_idle+0x80/0x110 ufshcd_rtc_work+0x128/0x1e4 process_one_work+0x26c/0x650 worker_thread+0x260/0x3d8 kthread+0x110/0x134 ret_from_fork+0x10/0x20Skip updating RTC if RPM state is not RPM_ACTIVE.",
  "key_phrases": {
    "rootcause": "A deadlock occurs when runtime suspend waits for the flush of RTC work, and the RTC work calls ufshcd_rpm_get_sync() to wait for runtime resume.",
    "weakness": "Deadlock during runtime suspend and resume operations related to RTC updates in the UFS subsystem.",
    "impact": "System hangs/unresponsive due to deadlock.",
    "vector": "The vulnerability is triggered when the system enters a runtime suspend state while an RTC update is pending.",
    "attacker": "An attacker can cause a denial of service by triggering runtime suspend while an RTC update is in progress",
    "product": "Linux Kernel",
    "version": "Not specified",
    "component": "scsi ufs core"
  },
  "reference_content": "- **Root cause of vulnerability:** A deadlock occurs in the UFS driver when the runtime suspend process waits for the RTC work to complete, and the RTC work itself calls `ufshcd_rpm_get_sync()` which waits for the runtime resume, creating a circular dependency.\n\n- **Weaknesses/vulnerabilities present:** The vulnerability lies in the incorrect handling of power management and Real-Time Clock (RTC) update within the UFS driver, specifically the usage of `ufshcd_rpm_get_sync()` during RTC work. The RTC update was not checking the current power management state.\n\n- **Impact of exploitation:** The deadlock can lead to a system freeze or unresponsiveness.\n\n- **Attack vectors:** This is not a remote attack vector. This vulnerability is triggered by the device going into runtime suspend, while the RTC work is pending.\n\n- **Required attacker capabilities/position:** An attacker does not have to have special capabilities or a specific position to trigger this bug. The condition can arise normally by a system undergoing runtime suspend, with an RTC update pending.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-833 | Deadlock | 0.9 | Base | Primary | Allowed |\n| CWE-667 | Improper Locking | 0.7 | Class | Secondary Candidate | Allowed-with-Review |\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.6 | Class | Secondary Candidate | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE identified is CWE-833 (Deadlock), which is a Base level CWE. The secondary CWEs considered are CWE-667 (Improper Locking) and CWE-362 (Race Condition), which are Class level CWEs. CWE-833 is often caused by improper locking mechanisms (CWE-667), and race conditions (CWE-362) can contribute to deadlocks. However, the description clearly states a deadlock condition as the **rootcause**, making CWE-833 the most specific and appropriate choice. The hierarchical relationships suggest that fixing the improper locking or race condition could prevent the deadlock.\n\n```mermaid\ngraph TD\n    cwe833[\"CWE-833: Deadlock\"]\n    cwe667[\"CWE-667: Improper Locking\"]\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    \n    cwe833 <--|CAUSED_BY| cwe667\n    cwe833 <--|CAUSED_BY| cwe362\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe833 primary\n    class cwe667,cwe362 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the system entering a runtime suspend state, followed by a pending RTC update. The runtime suspend process waits for the RTC work to complete, but the RTC work calls `ufshcd_rpm_get_sync()` which waits for runtime resume. This creates a circular dependency, resulting in a **deadlock**.\n\nVulnerability Chain:\n1.  Runtime suspend initiated.\n2.  RTC update pending.\n3.  Runtime suspend waits for RTC work (flush of RTC work).\n4.  RTC work calls `ufshcd_rpm_get_sync()` waiting for runtime resume.\n5.  Circular dependency leading to **CWE-833 (Deadlock)**.\n\n## Summary of Analysis\nThe analysis indicates that the primary weakness is **CWE-833 (Deadlock)**. This is supported by the vulnerability description stating \"There is a **deadlock** when runtime suspend waits for the flush of RTC work, and the RTC work calls ufshcd_rpm_get_sync() to wait for runtime resume.\". The CVE Reference Links Content Summary reinforces this by stating, \"A **deadlock** occurs in the UFS driver when the runtime suspend process waits for the RTC work to complete, and the RTC work itself calls `ufshcd_rpm_get_sync()` which waits for the runtime resume, creating a circular dependency.\"\n\nCWE-667 (Improper Locking) and CWE-362 (Race Condition) are considered as contributing factors, as improper synchronization and locking are common causes of deadlocks. However, the description focuses on the deadlock itself as the main issue, making CWE-833 the most appropriate primary classification.\n\nThe decision is based on strong evidence from the vulnerability description and CVE summary. The CWE is at the Base level of abstraction, providing sufficient specificity for the identified weakness.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-833: Deadlock\n**Abstraction Level**: Base\n**Similarity Score**: 0.79\n**Source**: dense\n\n**Description**:\nThe product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.79\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-755: Improper Handling of Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not handle or incorrectly handles an exceptional condition.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n\n\n## CWE-824: Access of Uninitialized Pointer\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product accesses or uses a pointer that has not been initialized.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-703: Improper Check or Handling of Exceptional Conditions\n**Abstraction Level**: Pillar\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is extremely high-level, a Pillar.\n\n\n\n## CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-1285: Improper Validation of Specified Index, Position, or Offset in Input\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-665: Improper Initialization\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n\n\n## CWE-252: Unchecked Return Value\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 902.70\n**Source**: sparse\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-833 | Deadlock | 0.9 | Base | Primary | Allowed |\n| CWE-667 | Improper Locking | 0.7 | Class | Secondary Candidate | Allowed-with-Review |\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.6 | Class | Secondary Candidate | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE identified is CWE-833 (Deadlock), which is a Base level CWE. The secondary CWEs considered are CWE-667 (Improper Locking) and CWE-362 (Race Condition), which are Class level CWEs. CWE-833 is often caused by improper locking mechanisms (CWE-667), and race conditions (CWE-362) can contribute to deadlocks. However, the description clearly states a deadlock condition as the **rootcause**, making CWE-833 the most specific and appropriate choice. The hierarchical relationships suggest that fixing the improper locking or race condition could prevent the deadlock.\n\n```mermaid\ngraph TD\n    cwe833[\"CWE-833: Deadlock\"]\n    cwe667[\"CWE-667: Improper Locking\"]\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    \n    cwe833 <--|CAUSED_BY| cwe667\n    cwe833 <--|CAUSED_BY| cwe362\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe833 primary\n    class cwe667,cwe362 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the system entering a runtime suspend state, followed by a pending RTC update. The runtime suspend process waits for the RTC work to complete, but the RTC work calls `ufshcd_rpm_get_sync()` which waits for runtime resume. This creates a circular dependency, resulting in a **deadlock**.\n\nVulnerability Chain:\n1.  Runtime suspend initiated.\n2.  RTC update pending.\n3.  Runtime suspend waits for RTC work (flush of RTC work).\n4.  RTC work calls `ufshcd_rpm_get_sync()` waiting for runtime resume.\n5.  Circular dependency leading to **CWE-833 (Deadlock)**.\n\n## Summary of Analysis\nThe analysis indicates that the primary weakness is **CWE-833 (Deadlock)**. This is supported by the vulnerability description stating \"There is a **deadlock** when runtime suspend waits for the flush of RTC work, and the RTC work calls ufshcd_rpm_get_sync() to wait for runtime resume.\". The CVE Reference Links Content Summary reinforces this by stating, \"A **deadlock** occurs in the UFS driver when the runtime suspend process waits for the RTC work to complete, and the RTC work itself calls `ufshcd_rpm_get_sync()` which waits for the runtime resume, creating a circular dependency.\"\n\nCWE-667 (Improper Locking) and CWE-362 (Race Condition) are considered as contributing factors, as improper synchronization and locking are common causes of deadlocks. However, the description focuses on the deadlock itself as the main issue, making CWE-833 the most appropriate primary classification.\n\nThe decision is based on strong evidence from the vulnerability description and CVE summary. The CWE is at the Base level of abstraction, providing sufficient specificity for the identified weakness.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-833: Deadlock\n**Abstraction Level**: Base\n**Similarity Score**: 0.79\n**Source**: dense\n\n**Description**:\nThe product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.79\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-755: Improper Handling of Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not handle or incorrectly handles an exceptional condition.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n\n\n## CWE-824: Access of Uninitialized Pointer\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product accesses or uses a pointer that has not been initialized.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-703: Improper Check or Handling of Exceptional Conditions\n**Abstraction Level**: Pillar\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is extremely high-level, a Pillar.\n\n\n\n## CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-1285: Improper Validation of Specified Index, Position, or Offset in Input\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-665: Improper Initialization\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n\n\n## CWE-252: Unchecked Return Value\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 902.70\n**Source**: sparse\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-667:**\n- 667 (Improper Locking) - ROOT\n\n\n**Chain starting from CWE-833:**\n- 833 (Deadlock) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "833",
        "name": "Deadlock",
        "source": "sparse"
      },
      "similarity": 444.51107605165134
    },
    {
      "metadata": {
        "doc_id": "667",
        "name": "Improper Locking",
        "source": "sparse"
      },
      "similarity": 420.63674898415934
    },
    {
      "metadata": {
        "doc_id": "337",
        "name": "Predictable Seed in Pseudo-Random Number Generator (PRNG)",
        "source": "sparse"
      },
      "similarity": 358.3503674135669
    },
    {
      "metadata": {
        "doc_id": "663",
        "name": "Use of a Non-reentrant Function in a Concurrent Context",
        "source": "sparse"
      },
      "similarity": 309.75674830751524
    },
    {
      "metadata": {
        "doc_id": "401",
        "name": "Missing Release of Memory after Effective Lifetime",
        "source": "sparse"
      },
      "similarity": 309.52160533691745
    },
    {
      "metadata": {
        "doc_id": "345",
        "name": "Insufficient Verification of Data Authenticity",
        "source": "sparse"
      },
      "similarity": 307.39040667188607
    },
    {
      "metadata": {
        "doc_id": "732",
        "name": "Incorrect Permission Assignment for Critical Resource",
        "source": "sparse"
      },
      "similarity": 307.3234168271548
    },
    {
      "metadata": {
        "doc_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "source": "sparse"
      },
      "similarity": 306.17565581855985
    },
    {
      "metadata": {
        "doc_id": "1285",
        "name": "Improper Validation of Specified Index, Position, or Offset in Input",
        "type": "Base",
        "original_content": "The product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties.",
        "keyphrase_source": "weakness:resume operations related to RTC updates in the UFS subsystem.",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5399315794288828,
            "graph": 1.5023950603091143
          }
        }
      },
      "similarity": 0.5399315794288828
    },
    {
      "doc_id": "1265",
      "text": "CWE-1265: Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls",
      "score": 2.3868000000000005,
      "metadata": {
        "doc_id": "1265",
        "name": "Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls",
        "type": "base",
        "original_content": "CWE-1265: Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls",
        "relationships": [
          {
            "source_id": "1265",
            "target_id": "416",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1265",
            "target_id": "663",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1265",
            "target_id": "691",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "691",
            "target_id": "1265",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "416",
            "target_id": "1265",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 0.8,
          "sequence_path": 0.7200000000000001,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "362",
                  "416",
                  "CANPRECEDE"
                ],
                [
                  "416",
                  "1265",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.8,
              "type": "relationship_chain",
              "source": "362"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "362",
                  "416",
                  "CANPRECEDE"
                ],
                [
                  "416",
                  "1265",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "vulnerability_sequence_forward",
              "source": "362"
            },
            "peer_relationship": {
              "path": [
                [
                  "1265",
                  "663",
                  "PEEROF"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "663"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.3868000000000005
          }
        }
      },
      "similarity": 2.3868000000000005
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-667",
      "CWE-833",
      "CWE-1285",
      "CWE-362",
      "CWE-755",
      "CWE-824",
      "CWE-252",
      "CWE-367",
      "CWE-703",
      "CWE-665"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}