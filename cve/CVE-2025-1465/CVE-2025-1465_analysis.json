{
  "cve_id": "CVE-2025-1465",
  "description": "A vulnerability, which was classified as problematic, was found in lmxcms 1.41. Affected is an unknown function of the file db.inc.php of the component Maintenance. The manipulation leads to **code injection**. It is possible to launch the attack remotely. The complexity of an attack is rather high. The exploitability is told to be difficult. The exploit has been disclosed to the public and may be used. The vendor was contacted early about this disclosure but did not respond in any way.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "code injection",
    "impact": "",
    "vector": "",
    "attacker": "",
    "product": "lmxcms",
    "version": "1.41",
    "component": "db.inc.php"
  },
  "reference_content": "## Analysis of CVE-2025-1465 Content\n\nBased on the provided content, this relates to a Remote Code Execution (RCE) vulnerability in LMXCMS version 1.41. The content provides significantly more detail than a typical CVE description.\n\n**Root cause of vulnerability:**\n\nThe vulnerability stems from the ability to delete the `install_ok.txt` lock file, allowing a system reset during database configuration. This enables an attacker to inject a web shell into the database configuration file.\n\n**Weaknesses/vulnerabilities present:**\n\n*   Arbitrary file deletion\n*   Lack of proper input validation/sanitization during database configuration.\n*   Directory traversal vulnerability.\n\n**Impact of exploitation:**\n\nSuccessful exploitation leads to Remote Code Execution (RCE), allowing the attacker to gain control of the web server.\n\n**Attack vectors:**\n\n1.  Access the admin panel's database backup and restore module using valid account credentials.\n2.  Utilize the backup feature to select any table.\n3.  Use the restore backup feature to access the file deletion interface.\n4.  Delete the `install_ok.txt` file using directory traversal.\n5.  Inject a malicious payload (web shell) into the table prefix input field during database configuration.\n6.  Execute arbitrary code on the website.\n\n**Required attacker capabilities/position:**\n\n*   Valid account credentials to access the admin panel.\n*   Understanding of directory traversal techniques.\n*   Ability to craft a malicious payload (web shell).\n\n**Mitigation or fix:**\n\nThe content does not provide specific mitigation or fix details. However, it implies that proper input validation, secure file handling, and prevention of directory traversal are necessary to address the vulnerability.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-96 | Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') | 0.9 | Base | Allowed | Primary CWE. The vulnerability allows injecting code into a statically saved file (database configuration file). |\n| CWE-73 | External Control of File Name or Path | 0.7 | Base | Allowed | Secondary CWE. This relates to the directory traversal vulnerability used to delete the `install_ok.txt` file. |\n| CWE-434 | Unrestricted Upload of File with Dangerous Type | 0.6 | Base | Allowed | Secondary CWE. An attacker can upload a malicious webshell into the database configuration file. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe analysis reveals the following relationships:\n\n*   CWE-96 (Primary) is a base-level CWE focused on the root cause: **improper neutralization** when saving code.\n*   CWE-73 and CWE-434 are related vulnerabilities that can precede code injection. CWE-73 enables the deletion of a file, and CWE-434 enables the upload of a malicious file (webshell).\n*   CWE-94 is a parent of CWE-96. While CWE-94 is a broader \"Code Injection\" category, CWE-96 is more specific, relating to statically saved code.\n\n```mermaid\ngraph TD\n    cwe96[\"CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')\"]\n    cwe73[\"CWE-73: External Control of File Name or Path\"]\n    cwe434[\"CWE-434: Unrestricted Upload of File with Dangerous Type\"]\n    cwe94[\"CWE-94: Improper Control of Generation of Code ('Code Injection')\"]\n\n    cwe96 -->|CHILDOF| cwe94\n    cwe73 -->|CANPRECEDE| cwe96\n    cwe434 -->|CANPRECEDE| cwe96\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe96 primary\n    class cwe73,cwe434 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain is as follows:\n\n1.  CWE-73: Directory traversal allows deleting the `install_ok.txt` file.\n2.  CWE-434: Unrestricted file upload enables uploading a malicious web shell into the database configuration file.\n3.  CWE-96: The web shell code is statically saved into the database configuration file without proper neutralization, resulting in code execution.\n\nThe chain starts with a file deletion vulnerability and culminates in code injection into a statically saved file.\n\n## Summary of Analysis\nThe initial assessment identified **code injection** as the main weakness. Further analysis of the CVE reference links revealed that the **code injection** occurs because a web shell is injected into the database configuration file, which is statically saved. The primary CWE is therefore CWE-96, \"Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')\". Supporting this is the vulnerability description which contains the key phrase \"**code injection**\".\n\nThe graph relationships show that CWE-96 is a child of CWE-94, which is a more general form of code injection. However, given the specific nature of the vulnerability, CWE-96 is a more accurate and specific representation of the vulnerability.\n\nThe retriever results support the selection of CWE-96 as a relevant CWE.\n\nCWE-73 is included because the attacker uses directory traversal to delete the `install_ok.txt` file.\nCWE-434 is included because the attacker uploads a malicious web shell.\n\nI considered CWE-94 \"Improper Control of Generation of Code ('Code Injection')\" but it is too general. CWE-96 is more precise because it specifically addresses **code injection** into statically saved code.\nI also considered CWE-79 \"Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\" and CWE-89 \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\" as code injection types but neither of these is specific to statically saved code.\n\nThe selected CWEs provide the optimal level of specificity.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-96 | Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') | 0.9 | Base | Allowed | Primary CWE. The vulnerability allows injecting code into a statically saved file (database configuration file). |\n| CWE-73 | External Control of File Name or Path | 0.7 | Base | Allowed | Secondary CWE. This relates to the directory traversal vulnerability used to delete the `install_ok.txt` file. |\n| CWE-434 | Unrestricted Upload of File with Dangerous Type | 0.6 | Base | Allowed | Secondary CWE. An attacker can upload a malicious webshell into the database configuration file. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe analysis reveals the following relationships:\n\n*   CWE-96 (Primary) is a base-level CWE focused on the root cause: **improper neutralization** when saving code.\n*   CWE-73 and CWE-434 are related vulnerabilities that can precede code injection. CWE-73 enables the deletion of a file, and CWE-434 enables the upload of a malicious file (webshell).\n*   CWE-94 is a parent of CWE-96. While CWE-94 is a broader \"Code Injection\" category, CWE-96 is more specific, relating to statically saved code.\n\n```mermaid\ngraph TD\n    cwe96[\"CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')\"]\n    cwe73[\"CWE-73: External Control of File Name or Path\"]\n    cwe434[\"CWE-434: Unrestricted Upload of File with Dangerous Type\"]\n    cwe94[\"CWE-94: Improper Control of Generation of Code ('Code Injection')\"]\n\n    cwe96 -->|CHILDOF| cwe94\n    cwe73 -->|CANPRECEDE| cwe96\n    cwe434 -->|CANPRECEDE| cwe96\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe96 primary\n    class cwe73,cwe434 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain is as follows:\n\n1.  CWE-73: Directory traversal allows deleting the `install_ok.txt` file.\n2.  CWE-434: Unrestricted file upload enables uploading a malicious web shell into the database configuration file.\n3.  CWE-96: The web shell code is statically saved into the database configuration file without proper neutralization, resulting in code execution.\n\nThe chain starts with a file deletion vulnerability and culminates in code injection into a statically saved file.\n\n## Summary of Analysis\nThe initial assessment identified **code injection** as the main weakness. Further analysis of the CVE reference links revealed that the **code injection** occurs because a web shell is injected into the database configuration file, which is statically saved. The primary CWE is therefore CWE-96, \"Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')\". Supporting this is the vulnerability description which contains the key phrase \"**code injection**\".\n\nThe graph relationships show that CWE-96 is a child of CWE-94, which is a more general form of code injection. However, given the specific nature of the vulnerability, CWE-96 is a more accurate and specific representation of the vulnerability.\n\nThe retriever results support the selection of CWE-96 as a relevant CWE.\n\nCWE-73 is included because the attacker uses directory traversal to delete the `install_ok.txt` file.\nCWE-434 is included because the attacker uploads a malicious web shell.\n\nI considered CWE-94 \"Improper Control of Generation of Code ('Code Injection')\" but it is too general. CWE-96 is more precise because it specifically addresses **code injection** into statically saved code.\nI also considered CWE-79 \"Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\" and CWE-89 \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\" as code injection types but neither of these is specific to statically saved code.\n\nThe selected CWEs provide the optimal level of specificity.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-89:**\n- 89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')) - ROOT\n\n\n**Chain starting from CWE-94:**\n- 94 (Improper Control of Generation of Code ('Code Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 564.2825767659741
    },
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "sparse"
      },
      "similarity": 555.1502224717958
    },
    {
      "metadata": {
        "doc_id": "927",
        "name": "Use of Implicit Intent for Sensitive Communication",
        "source": "sparse"
      },
      "similarity": 484.0255707332224
    },
    {
      "metadata": {
        "doc_id": "705",
        "name": "Incorrect Control Flow Scoping",
        "source": "sparse"
      },
      "similarity": 466.02911306719625
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "source": "sparse"
      },
      "similarity": 460.095450986945
    },
    {
      "metadata": {
        "doc_id": "1336",
        "name": "Improper Neutralization of Special Elements Used in a Template Engine",
        "source": "sparse"
      },
      "similarity": 456.8946800054911
    },
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse"
      },
      "similarity": 456.09560808176195
    },
    {
      "metadata": {
        "doc_id": "704",
        "name": "Incorrect Type Conversion or Cast",
        "source": "sparse"
      },
      "similarity": 451.75930154109375
    },
    {
      "metadata": {
        "doc_id": "96",
        "name": "Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')",
        "type": "Base",
        "original_content": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.",
        "keyphrase_source": "weakness:code injection",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.6435632593446103,
            "graph": 1.703982627688834
          }
        }
      },
      "similarity": 0.6435632593446103
    },
    {
      "doc_id": "73",
      "text": "CWE-73: External Control of File Name or Path",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "73",
        "name": "External Control of File Name or Path",
        "type": "base",
        "original_content": "CWE-73: External Control of File Name or Path",
        "relationships": [
          {
            "source_id": "73",
            "target_id": "114",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "59",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "434",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "41",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "22",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "20",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "700"
            }
          },
          {
            "source_id": "73",
            "target_id": "610",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "642",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "99",
            "target_id": "73",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "642",
            "target_id": "73",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "610",
            "target_id": "73",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "59",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "41",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "22",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "20",
            "target_id": "73",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "700"
            }
          },
          {
            "source_id": "114",
            "target_id": "73",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "434",
                  "73",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "434"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "434",
                  "73",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "434"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "73",
                  "434",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "434"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-89",
      "CWE-94",
      "CWE-73",
      "CWE-79",
      "CWE-96",
      "CWE-434"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}