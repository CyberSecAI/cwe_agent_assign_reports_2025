{
  "cve_id": "CVE-2025-37874",
  "description": "In the Linux kernel, the following vulnerability has been resolved net ngbe fix **memory leak** in ngbe_probe() error path When ngbe_sw_init() is called, memory is allocated for wx->rss_key in wx_init_rss_key(). However, in ngbe_probe() function, the subsequent error paths after ngbe_sw_init() dont free the rss_key. Fix that by freeing it in error path along with wx->mac_table. Also change the label to which execution jumps when ngbe_sw_init() fails, because otherwise, it could lead to a **double free** for rss_key, when the mac_table allocation fails in wx_sw_init().",
  "key_phrases": {
    "rootcause": "",
    "weakness": [
      "double free",
      "memory leak"
    ],
    "impact": "",
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": "net ngbe fix memory leak in ngbe_probe() error path"
  },
  "reference_content": null,
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-401 | Missing Release of Memory after Effective Lifetime | 0.9 | Variant |  | Allowed |\n| CWE-415 | Double Free | 0.9 | Variant |  | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe analysis focuses on identifying the root causes related to memory management issues. The primary relationship is between **CWE-401 (Missing Release of Memory after Effective Lifetime)** and **CWE-415 (Double Free)**, both being memory management errors. There is no parent-child relationship between the two, but there is a peer relationship, where both can occur within the same context of memory mismanagement. These are variant level, which is the preferred level.\n\n```mermaid\ngraph TD\n    cwe401[\"CWE-401: Missing Release of Memory after Effective Lifetime\"]\n    cwe415[\"CWE-415: Double Free\"]\n    \n    cwe401 -- PEEROF --> cwe415\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe401 primary\n    class cwe415 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a **memory leak** due to **CWE-401 (Missing Release of Memory after Effective Lifetime)**, where allocated memory is not freed in the error path of `ngbe_probe()`. Additionally, a code fix addresses a potential **double free** scenario represented by **CWE-415 (Double Free)**, which could occur if execution jumps to an incorrect label after a failure in `wx_sw_init()`.\n\n## Summary of Analysis\nThe vulnerability description clearly indicates two distinct memory management issues: a **memory leak** and a potential **double free**. The initial analysis pointed towards **CWE-401 (Missing Release of Memory after Effective Lifetime)** due to the unfreed memory in the error path, and **CWE-415 (Double Free)** because of the potential double free scenario.\n\nThe evidence for **CWE-401 (Missing Release of Memory after Effective Lifetime)** is derived from:\n\"When ngbe_sw_init() is called, memory is allocated for wx->rss_key in wx_init_rss_key(). However, in ngbe_probe() function, the subsequent error paths after ngbe_sw_init() dont free the rss_key.\"\n\nThe evidence for **CWE-415 (Double Free)** is derived from:\n\"Also change the label to which execution jumps when ngbe_sw_init() fails, because otherwise, it could lead to a **double free** for rss_key, when the mac_table allocation fails in wx_sw_init().\"\n\nBoth **CWE-401 (Missing Release of Memory after Effective Lifetime)** and **CWE-415 (Double Free)** are at the variant level of abstraction, which is the preferred level for root cause analysis. The Retriever results and keyphrase analysis also strongly support these classifications.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-415: Double Free\n**Abstraction Level**: Variant\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-824: Access of Uninitialized Pointer\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product accesses or uses a pointer that has not been initialized.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-226: Sensitive Information in Resource Not Removed Before Reuse\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product releases a resource such as memory or a file so that it can be made available for reuse, but it does not clear or \"zeroize\" the information contained in the resource before the product performs a critical state transition or makes the resource available for reuse by other entities.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-909: Missing Initialization of Resource\n**Abstraction Level**: Class\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product does not initialize a critical resource.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-911: Improper Update of Reference Count\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product uses a reference count to manage a resource, but it does not update or incorrectly updates the reference count.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-665: Improper Initialization\n**Abstraction Level**: Class\n**Similarity Score**: 0.69\n**Source**: dense\n\n**Description**:\nThe product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n\n\n## CWE-131: Incorrect Calculation of Buffer Size\n**Abstraction Level**: Base\n**Similarity Score**: 0.69\n**Source**: dense\n\n**Description**:\nThe product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-401: Missing Release of Memory after Effective Lifetime\n**Abstraction Level**: Variant\n**Similarity Score**: 0.69\n**Source**: dense\n\n**Description**:\nThe product does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-404: Improper Resource Shutdown or Release\n**Abstraction Level**: Class\n**Similarity Score**: 0.69\n**Source**: dense\n\n**Description**:\nThe product does not release or incorrectly releases a resource before it is made available for re-use.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 1661.27\n**Source**: sparse\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-911: Improper Update of Reference Count\n**Abstraction Level**: Base\n**Similarity Score**: 1593.36\n**Source**: sparse\n\n**Description**:\nThe product uses a reference count to manage a resource, but it does not update or incorrectly updates the reference count.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-401 | Missing Release of Memory after Effective Lifetime | 0.9 | Variant |  | Allowed |\n| CWE-415 | Double Free | 0.9 | Variant |  | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe analysis focuses on identifying the root causes related to memory management issues. The primary relationship is between **CWE-401 (Missing Release of Memory after Effective Lifetime)** and **CWE-415 (Double Free)**, both being memory management errors. There is no parent-child relationship between the two, but there is a peer relationship, where both can occur within the same context of memory mismanagement. These are variant level, which is the preferred level.\n\n```mermaid\ngraph TD\n    cwe401[\"CWE-401: Missing Release of Memory after Effective Lifetime\"]\n    cwe415[\"CWE-415: Double Free\"]\n    \n    cwe401 -- PEEROF --> cwe415\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe401 primary\n    class cwe415 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a **memory leak** due to **CWE-401 (Missing Release of Memory after Effective Lifetime)**, where allocated memory is not freed in the error path of `ngbe_probe()`. Additionally, a code fix addresses a potential **double free** scenario represented by **CWE-415 (Double Free)**, which could occur if execution jumps to an incorrect label after a failure in `wx_sw_init()`.\n\n## Summary of Analysis\nThe vulnerability description clearly indicates two distinct memory management issues: a **memory leak** and a potential **double free**. The initial analysis pointed towards **CWE-401 (Missing Release of Memory after Effective Lifetime)** due to the unfreed memory in the error path, and **CWE-415 (Double Free)** because of the potential double free scenario.\n\nThe evidence for **CWE-401 (Missing Release of Memory after Effective Lifetime)** is derived from:\n\"When ngbe_sw_init() is called, memory is allocated for wx->rss_key in wx_init_rss_key(). However, in ngbe_probe() function, the subsequent error paths after ngbe_sw_init() dont free the rss_key.\"\n\nThe evidence for **CWE-415 (Double Free)** is derived from:\n\"Also change the label to which execution jumps when ngbe_sw_init() fails, because otherwise, it could lead to a **double free** for rss_key, when the mac_table allocation fails in wx_sw_init().\"\n\nBoth **CWE-401 (Missing Release of Memory after Effective Lifetime)** and **CWE-415 (Double Free)** are at the variant level of abstraction, which is the preferred level for root cause analysis. The Retriever results and keyphrase analysis also strongly support these classifications.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-415: Double Free\n**Abstraction Level**: Variant\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-824: Access of Uninitialized Pointer\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product accesses or uses a pointer that has not been initialized.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-226: Sensitive Information in Resource Not Removed Before Reuse\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product releases a resource such as memory or a file so that it can be made available for reuse, but it does not clear or \"zeroize\" the information contained in the resource before the product performs a critical state transition or makes the resource available for reuse by other entities.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-909: Missing Initialization of Resource\n**Abstraction Level**: Class\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product does not initialize a critical resource.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-911: Improper Update of Reference Count\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product uses a reference count to manage a resource, but it does not update or incorrectly updates the reference count.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-665: Improper Initialization\n**Abstraction Level**: Class\n**Similarity Score**: 0.69\n**Source**: dense\n\n**Description**:\nThe product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n\n\n## CWE-131: Incorrect Calculation of Buffer Size\n**Abstraction Level**: Base\n**Similarity Score**: 0.69\n**Source**: dense\n\n**Description**:\nThe product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-401: Missing Release of Memory after Effective Lifetime\n**Abstraction Level**: Variant\n**Similarity Score**: 0.69\n**Source**: dense\n\n**Description**:\nThe product does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-404: Improper Resource Shutdown or Release\n**Abstraction Level**: Class\n**Similarity Score**: 0.69\n**Source**: dense\n\n**Description**:\nThe product does not release or incorrectly releases a resource before it is made available for re-use.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 1661.27\n**Source**: sparse\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-911: Improper Update of Reference Count\n**Abstraction Level**: Base\n**Similarity Score**: 1593.36\n**Source**: sparse\n\n**Description**:\nThe product uses a reference count to manage a resource, but it does not update or incorrectly updates the reference count.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-911:**\n- 911 (Improper Update of Reference Count) - ROOT\n\n\n**Chain starting from CWE-226:**\n- 226 (Sensitive Information in Resource Not Removed Before Reuse) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "415",
        "name": "Double Free",
        "source": "sparse",
        "original_content": "The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations.",
        "keyphrase_sources": [
          {
            "id": "weakness:double free",
            "keyphrase": "double free",
            "type": "weakness"
          },
          {
            "id": "weakness:memory leak",
            "keyphrase": "memory leak",
            "type": "weakness"
          },
          {
            "id": "product:Linux kernel",
            "keyphrase": "Linux kernel",
            "type": "product"
          },
          {
            "id": "component:net ngbe fix memory leak in ngbe_probe() error path",
            "keyphrase": "net ngbe fix memory leak in ngbe_probe() error path",
            "type": "component"
          }
        ]
      },
      "similarity": 541.9517701313293
    },
    {
      "metadata": {
        "doc_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "source": "sparse",
        "original_content": "The product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.",
        "keyphrase_sources": [
          {
            "id": "weakness:double free",
            "keyphrase": "double free",
            "type": "weakness"
          },
          {
            "id": "weakness:memory leak",
            "keyphrase": "memory leak",
            "type": "weakness"
          },
          {
            "id": "product:Linux kernel",
            "keyphrase": "Linux kernel",
            "type": "product"
          },
          {
            "id": "component:net ngbe fix memory leak in ngbe_probe() error path",
            "keyphrase": "net ngbe fix memory leak in ngbe_probe() error path",
            "type": "component"
          }
        ]
      },
      "similarity": 476.2160165501377
    },
    {
      "metadata": {
        "doc_id": "364",
        "name": "Signal Handler Race Condition",
        "source": "sparse",
        "original_content": "The product uses a signal handler that introduces a race condition.",
        "keyphrase_sources": [
          {
            "id": "weakness:double free",
            "keyphrase": "double free",
            "type": "weakness"
          }
        ]
      },
      "similarity": 442.71308444780374
    },
    {
      "metadata": {
        "doc_id": "909",
        "name": "Missing Initialization of Resource",
        "source": "sparse",
        "original_content": "The product does not initialize a critical resource.",
        "keyphrase_sources": [
          {
            "id": "weakness:memory leak",
            "keyphrase": "memory leak",
            "type": "weakness"
          },
          {
            "id": "product:Linux kernel",
            "keyphrase": "Linux kernel",
            "type": "product"
          },
          {
            "id": "component:net ngbe fix memory leak in ngbe_probe() error path",
            "keyphrase": "net ngbe fix memory leak in ngbe_probe() error path",
            "type": "component"
          }
        ]
      },
      "similarity": 438.7353469006795
    },
    {
      "metadata": {
        "doc_id": "401",
        "name": "Missing Release of Memory after Effective Lifetime",
        "source": "sparse",
        "original_content": "The product does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory.",
        "keyphrase_sources": [
          {
            "id": "weakness:double free",
            "keyphrase": "double free",
            "type": "weakness"
          },
          {
            "id": "weakness:memory leak",
            "keyphrase": "memory leak",
            "type": "weakness"
          },
          {
            "id": "product:Linux kernel",
            "keyphrase": "Linux kernel",
            "type": "product"
          },
          {
            "id": "component:net ngbe fix memory leak in ngbe_probe() error path",
            "keyphrase": "net ngbe fix memory leak in ngbe_probe() error path",
            "type": "component"
          }
        ]
      },
      "similarity": 436.25978417805953
    },
    {
      "metadata": {
        "doc_id": "911",
        "name": "Improper Update of Reference Count",
        "source": "sparse",
        "original_content": "The product uses a reference count to manage a resource, but it does not update or incorrectly updates the reference count.",
        "keyphrase_sources": [
          {
            "id": "weakness:double free",
            "keyphrase": "double free",
            "type": "weakness"
          },
          {
            "id": "weakness:memory leak",
            "keyphrase": "memory leak",
            "type": "weakness"
          },
          {
            "id": "product:Linux kernel",
            "keyphrase": "Linux kernel",
            "type": "product"
          },
          {
            "id": "component:net ngbe fix memory leak in ngbe_probe() error path",
            "keyphrase": "net ngbe fix memory leak in ngbe_probe() error path",
            "type": "component"
          }
        ]
      },
      "similarity": 425.88341633000346
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-911",
      "CWE-226",
      "CWE-404",
      "CWE-131",
      "CWE-667",
      "CWE-401",
      "CWE-909",
      "CWE-362",
      "CWE-824",
      "CWE-415",
      "CWE-665"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {
    "415": [
      {
        "id": "weakness:double free",
        "keyphrase": "double free",
        "type": "weakness"
      },
      {
        "id": "weakness:memory leak",
        "keyphrase": "memory leak",
        "type": "weakness"
      },
      {
        "id": "product:Linux kernel",
        "keyphrase": "Linux kernel",
        "type": "product"
      },
      {
        "id": "component:net ngbe fix memory leak in ngbe_probe() error path",
        "keyphrase": "net ngbe fix memory leak in ngbe_probe() error path",
        "type": "component"
      }
    ],
    "362": [
      {
        "id": "weakness:double free",
        "keyphrase": "double free",
        "type": "weakness"
      },
      {
        "id": "weakness:memory leak",
        "keyphrase": "memory leak",
        "type": "weakness"
      },
      {
        "id": "product:Linux kernel",
        "keyphrase": "Linux kernel",
        "type": "product"
      },
      {
        "id": "component:net ngbe fix memory leak in ngbe_probe() error path",
        "keyphrase": "net ngbe fix memory leak in ngbe_probe() error path",
        "type": "component"
      }
    ],
    "364": [
      {
        "id": "weakness:double free",
        "keyphrase": "double free",
        "type": "weakness"
      }
    ],
    "401": [
      {
        "id": "weakness:double free",
        "keyphrase": "double free",
        "type": "weakness"
      },
      {
        "id": "weakness:memory leak",
        "keyphrase": "memory leak",
        "type": "weakness"
      },
      {
        "id": "product:Linux kernel",
        "keyphrase": "Linux kernel",
        "type": "product"
      },
      {
        "id": "component:net ngbe fix memory leak in ngbe_probe() error path",
        "keyphrase": "net ngbe fix memory leak in ngbe_probe() error path",
        "type": "component"
      }
    ],
    "911": [
      {
        "id": "weakness:double free",
        "keyphrase": "double free",
        "type": "weakness"
      },
      {
        "id": "weakness:memory leak",
        "keyphrase": "memory leak",
        "type": "weakness"
      },
      {
        "id": "product:Linux kernel",
        "keyphrase": "Linux kernel",
        "type": "product"
      },
      {
        "id": "component:net ngbe fix memory leak in ngbe_probe() error path",
        "keyphrase": "net ngbe fix memory leak in ngbe_probe() error path",
        "type": "component"
      }
    ],
    "909": [
      {
        "id": "weakness:memory leak",
        "keyphrase": "memory leak",
        "type": "weakness"
      },
      {
        "id": "product:Linux kernel",
        "keyphrase": "Linux kernel",
        "type": "product"
      },
      {
        "id": "component:net ngbe fix memory leak in ngbe_probe() error path",
        "keyphrase": "net ngbe fix memory leak in ngbe_probe() error path",
        "type": "component"
      }
    ]
  }
}