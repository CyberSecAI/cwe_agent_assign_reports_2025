{
  "cve_id": "CVE-2025-3123",
  "description": "A vulnerability, which was classified as critical, has been found in WonderCMS 3.5.0. Affected by this issue is the function installUpdateModuleAction of the component Theme Installation/Plugin Installation. The manipulation leads to unrestricted upload. The attack may be launched remotely. The exploit has been disclosed to the public and may be used. The real existence of this vulnerability is still doubted at the moment. The vendor explains, that [t]he philosophy has always been, admin [...] bear responsibility to not install themes/plugins from untrusted sources.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "",
    "impact": "unrestricted upload",
    "vector": "",
    "attacker": "",
    "product": "WonderCMS",
    "version": "3.5.0",
    "component": "installUpdateModuleAction of the component Theme Installation/Plugin Installation"
  },
  "reference_content": "**CVE: CVE-2025-3123**\n\n**RELATION TO CVE:** RELATED\n\n**Vulnerability Overview:**\n\nA remote code execution (RCE) vulnerability exists in WonderCMS version 3.5.0, located in the theme and plugin installation/update functionality. Attackers can execute arbitrary code on the target server by providing a malicious ZIP file.\n\n**Vulnerability Details:**\n\n*   **Root cause:** The `installUpdateModuleAction()` function downloads a ZIP file from a user-provided URL and extracts it to the server directory without adequate validation of the contents of the ZIP file.\n*   **Weaknesses/vulnerabilities present:** Lack of input validation on ZIP file contents during theme/plugin installation/update.\n*   **Impact of exploitation:** Remote code execution on the target server.\n*   **Attack vectors:** Providing a malicious ZIP file containing a PHP web shell through the theme/plugin installation process.\n*   **Required attacker capabilities/position:** An attacker needs to be able to provide a URL to a malicious ZIP file and have administrator privileges to install themes/plugins in WonderCMS.\n*   **Mitigation or fix:**\n    *   Implement strict file type validation.\n    *   Perform security scans on the contents of ZIP files.\n    *   Restrict the types and permissions of files extracted.\n    *   Use secure temporary directories for extraction, validating before moving to the final location.\n    *   Implement Content Security Policy (CSP) to limit execution.\n\n**Exploitation Steps (as described in the content):**\n\n1.  Prepare a malicious ZIP file (`malicious_theme.zip`) containing a PHP web shell (`theme.php`) and a module configuration file (`wcms-modules.json`).\n2.  Deploy the ZIP file to a publicly accessible URL (e.g., `http://attacker.com/malicious_theme.zip`).\n3.  Create and host a malicious module configuration file (`wcms-modules.json`) at a publicly accessible URL (e.g., `http://attacker.com/wcms-modules.json`).\n4.  Log in to WonderCMS as an administrator.\n5.  Navigate to Settings -> Themes and add a custom theme using the URL of the malicious module configuration file.\n6.  Install the \"Malicious Theme\" from the theme list.\n7.  Access the web shell at `/themes/malicious_theme/theme.php` to execute commands (e.g., `http://target.com/themes/malicious_theme/theme.php?cmd=id`).\n\n**Impact Scope:**\n\n*   WonderCMS 3.5.0 and possibly earlier versions.\n*   All instances of WonderCMS using the default installation.\n\n**Note:** The provided content offers significantly more detail than a typical CVE description, including a complete exploitation guide.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-434 | Unrestricted Upload of File with Dangerous Type | 1.0 | Base | Allowed | Primary CWE. The product allows the upload or transfer of dangerous file types that are automatically processed within its environment. |\n| CWE-94 | Improper Control of Generation of Code ('Code Injection') | 0.7 | Base | Allowed-with-Review | Secondary CWE. The product constructs all or part of the source code for a program, script, or other code artifact, but it does not properly control the code that is generated. |\n| CWE-306 | Missing Authentication for Critical Function | 0.6 | Base | Allowed | Secondary CWE. The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-434, which represents the **unrestricted upload** of a file. This can lead to CWE-94, **Improper Control of Generation of Code ('Code Injection')** if the uploaded file is processed and executed. CWE-306, **Missing Authentication for Critical Function**, could be present as the administrative functionality to upload and install themes/plugins may not require authentication, making the system vulnerable.\n\n```mermaid\ngraph TD\n    cwe434[\"CWE-434: Unrestricted Upload of File with Dangerous Type\"]\n    cwe94[\"CWE-94: Improper Control of Generation of Code ('Code Injection')\"]\n    cwe306[\"CWE-306: Missing Authentication for Critical Function\"]\n\n    cwe434 -->|CAN_LEAD_TO| cwe94\n    cwe434 -->|REQUIRES| cwe306\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe434 primary\n    class cwe94,cwe306 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **unrestricted upload** (CWE-434), which is the **root cause**. If an attacker uploads a malicious file, it can lead to code injection (CWE-94), resulting in remote code execution. Lack of authentication on the upload functionality (CWE-306) allows the attacker to directly perform the upload.\n\n## Summary of Analysis\nThe initial assessment focuses on the **unrestricted upload** of a malicious file, which leads to remote code execution. The evidence for this lies in the \"Vulnerability Details\" section of the CVE reference, which states that the `installUpdateModuleAction()` function downloads a ZIP file and extracts it without adequate validation. This aligns with CWE-434. The lack of authentication to perform such operation is a contributing factor.\n\nThe relationships influenced the selection by highlighting the potential progression from file upload to code injection. CWE-434 is the **root cause** because it directly enables the subsequent weaknesses. CWE-94 stems from this upload and execution, while CWE-306 is a prerequisite.\n\nThe selected CWEs are at the optimal level of specificity. CWE-434 is a Base-level weakness that accurately represents the **unrestricted file upload** issue. CWE-94 is a base-level weakness that represents the code injection. CWE-306 is a base-level weakness that represents the **missing authentication** on the critical function.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-434: Unrestricted Upload of File with Dangerous Type\n**Abstraction Level**: Base\n**Similarity Score**: 0.82\n**Source**: dense\n\n**Description**:\nThe product allows the upload or transfer of dangerous file types that are automatically processed within its environment.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-94: Improper Control of Generation of Code ('Code Injection')\n**Abstraction Level**: base\n**Similarity Score**: 2.28\n**Source**: graph\n\n**Description**:\nCWE-94: Improper Control of Generation of Code ('Code Injection')\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This entry is frequently misused for vulnerabilities with a technical impact of \"code execution,\" which does not by itself indicate a root cause weakness, since dozens of weaknesses can enable code execution.\n\n## CWE-306: Missing Authentication for Critical Function\n**Abstraction Level**: base\n**Similarity Score**: 2.33\n**Source**: graph\n\n**Description**:\nCWE-306: Missing Authentication for Critical Function\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-434 | Unrestricted Upload of File with Dangerous Type | 1.0 | Base | Allowed | Primary CWE. The product allows the upload or transfer of dangerous file types that are automatically processed within its environment. |\n| CWE-94 | Improper Control of Generation of Code ('Code Injection') | 0.7 | Base | Allowed-with-Review | Secondary CWE. The product constructs all or part of the source code for a program, script, or other code artifact, but it does not properly control the code that is generated. |\n| CWE-306 | Missing Authentication for Critical Function | 0.6 | Base | Allowed | Secondary CWE. The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-434, which represents the **unrestricted upload** of a file. This can lead to CWE-94, **Improper Control of Generation of Code ('Code Injection')** if the uploaded file is processed and executed. CWE-306, **Missing Authentication for Critical Function**, could be present as the administrative functionality to upload and install themes/plugins may not require authentication, making the system vulnerable.\n\n```mermaid\ngraph TD\n    cwe434[\"CWE-434: Unrestricted Upload of File with Dangerous Type\"]\n    cwe94[\"CWE-94: Improper Control of Generation of Code ('Code Injection')\"]\n    cwe306[\"CWE-306: Missing Authentication for Critical Function\"]\n\n    cwe434 -->|CAN_LEAD_TO| cwe94\n    cwe434 -->|REQUIRES| cwe306\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe434 primary\n    class cwe94,cwe306 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **unrestricted upload** (CWE-434), which is the **root cause**. If an attacker uploads a malicious file, it can lead to code injection (CWE-94), resulting in remote code execution. Lack of authentication on the upload functionality (CWE-306) allows the attacker to directly perform the upload.\n\n## Summary of Analysis\nThe initial assessment focuses on the **unrestricted upload** of a malicious file, which leads to remote code execution. The evidence for this lies in the \"Vulnerability Details\" section of the CVE reference, which states that the `installUpdateModuleAction()` function downloads a ZIP file and extracts it without adequate validation. This aligns with CWE-434. The lack of authentication to perform such operation is a contributing factor.\n\nThe relationships influenced the selection by highlighting the potential progression from file upload to code injection. CWE-434 is the **root cause** because it directly enables the subsequent weaknesses. CWE-94 stems from this upload and execution, while CWE-306 is a prerequisite.\n\nThe selected CWEs are at the optimal level of specificity. CWE-434 is a Base-level weakness that accurately represents the **unrestricted file upload** issue. CWE-94 is a base-level weakness that represents the code injection. CWE-306 is a base-level weakness that represents the **missing authentication** on the critical function.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-434: Unrestricted Upload of File with Dangerous Type\n**Abstraction Level**: Base\n**Similarity Score**: 0.82\n**Source**: dense\n\n**Description**:\nThe product allows the upload or transfer of dangerous file types that are automatically processed within its environment.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-94: Improper Control of Generation of Code ('Code Injection')\n**Abstraction Level**: base\n**Similarity Score**: 2.28\n**Source**: graph\n\n**Description**:\nCWE-94: Improper Control of Generation of Code ('Code Injection')\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This entry is frequently misused for vulnerabilities with a technical impact of \"code execution,\" which does not by itself indicate a root cause weakness, since dozens of weaknesses can enable code execution.\n\n## CWE-306: Missing Authentication for Critical Function\n**Abstraction Level**: base\n**Similarity Score**: 2.33\n**Source**: graph\n\n**Description**:\nCWE-306: Missing Authentication for Critical Function\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-306:**\n- 306 (Missing Authentication for Critical Function) - ROOT\n\n\n**Chain starting from CWE-94:**\n- 94 (Improper Control of Generation of Code ('Code Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "sparse"
      },
      "similarity": 177.45914158149074
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 174.56888498546022
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "source": "sparse"
      },
      "similarity": 163.1981760611261
    },
    {
      "metadata": {
        "doc_id": "306",
        "name": "Missing Authentication for Critical Function",
        "source": "sparse"
      },
      "similarity": 161.83311246574266
    },
    {
      "metadata": {
        "doc_id": "22",
        "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
        "source": "sparse"
      },
      "similarity": 155.27705619739154
    },
    {
      "metadata": {
        "doc_id": "285",
        "name": "Improper Authorization",
        "source": "sparse"
      },
      "similarity": 153.06552924245793
    },
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse"
      },
      "similarity": 151.85146482470313
    },
    {
      "metadata": {
        "doc_id": "1391",
        "name": "Use of Weak Credentials",
        "source": "sparse"
      },
      "similarity": 151.78093470006465
    },
    {
      "metadata": {
        "doc_id": "96",
        "name": "Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')",
        "type": "Base",
        "original_content": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.6038701277341536
          }
        }
      },
      "similarity": 0.6038701277341536
    },
    {
      "doc_id": "425",
      "text": "The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.",
      "score": 0.6281632201974526,
      "metadata": {
        "doc_id": "425",
        "name": "Direct Request ('Forced Browsing')",
        "type": "Base",
        "extended_description": "Web applications susceptible to direct request attacks often make the false assumption that such resources can only be reached through a given navigation path and so only apply authorization at certain points in the path.",
        "alternate_terms": [
          "forced browsing"
        ],
        "original_content": "The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.",
        "relationships": [
          {
            "source_id": "425",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "425",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "425",
            "target_id": "424",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "425",
            "target_id": "288",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "425",
            "target_id": "862",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "425",
            "target_id": "862",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "425",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "862",
            "target_id": "425",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "425",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "424",
            "target_id": "425",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "288",
            "target_id": "425",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "source": "graph",
        "sources": [
          "vector",
          "graph"
        ],
        "vector_score": 0.6281632201974526,
        "graph_score": 3.4200400000000006,
        "score_components": {
          "relationship_chain": 0.6,
          "explicit_mention": 1.0,
          "abstraction_path": 0.9,
          "sequence_path": 0.5760000000000002
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "89",
                  "456",
                  "CANFOLLOW"
                ],
                [
                  "456",
                  "98",
                  "CANPRECEDE"
                ],
                [
                  "98",
                  "425",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.6,
              "type": "relationship_chain",
              "source": "89"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "79",
                  "184",
                  "CANFOLLOW"
                ],
                [
                  "184",
                  "98",
                  "CANPRECEDE"
                ],
                [
                  "98",
                  "425",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.5760000000000002,
              "type": "vulnerability_sequence_forward",
              "source": "79"
            }
          }
        },
        "is_explicit": true,
        "abstraction_level": "base",
        "position": "after",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5943810533908055,
            "graph": 2.3032892880789815
          }
        }
      },
      "similarity": 2.3032892880789815
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-306",
      "CWE-94",
      "CWE-434"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}