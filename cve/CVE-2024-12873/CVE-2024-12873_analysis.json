{
  "cve_id": "CVE-2024-12873",
  "description": "The Custom Field Manager WordPress plugin through 1.0 does not sanitise and escape a parameter before outputting it back in the page, leading to a Reflected Cross-Site Scripting which could be used against high privilege users such as admin.",
  "key_phrases": {
    "component": "",
    "rootcause": "",
    "vector": "",
    "weakness": "cross-site scripting, improper input sanitization",
    "product": "Custom Field Manager WordPress plugin",
    "impact": "cross-site scripting",
    "attacker": "",
    "version": "through 1.0"
  },
  "reference_content": "## CVE-2024-12873 Analysis\n\nThe provided content is **RELEVANT** to CVE-2024-12873. It details a Reflected Cross-Site Scripting (XSS) vulnerability in the Custom Field Manager plugin. Here's a breakdown of the information:\n\n**Root cause of vulnerability:**\n\nThe plugin does not sanitize and escape a parameter before outputting it back in the page.\n\n**Weaknesses/vulnerabilities present:**\n\n*   Reflected Cross-Site Scripting (XSS)\n\n**Impact of exploitation:**\n\nThe XSS could be used against high privilege users such as admins.\n\n**Attack vectors:**\n\nThe proof of concept demonstrates an attack vector via a crafted URL:\n\n`http://example.com/wp-admin/admin.php?page=custom-field-manager-customfields&taxonomy=testxss%3C%2Fscript%3E%3Cscript%3Ealert%281%29%3C%2Fscript%3E%3Cscript%3E`\n\n**Required attacker capabilities/position:**\n\nThe vulnerability is triggered by a user visiting a malicious link, requiring no authentication.\n\n**Mitigation or fix:**\n\n*   No known fix is currently available as of the provided information.\n\n**Additional Details (more than official CVE description):**\n\n*   **CVSS Score:** 7.1 (High)\n*   **Original Researcher:** Hassan Khan Yusufzai - Splint3r7\n*   **Submitter:** Hassan Khan Yusufzai - Splint3r7\n*   **WPVDB ID:** 3e82d45f-7b8f-424e-a8d7-be64f5acf65e\n*   **Timeline:** Publicly Published: 2024-11-22, Added: 2025-01-07, Last Updated: 2025-01-07\n*   **References:** CVE-2024-12873, OWASP A7: Cross-Site Scripting (XSS), CWE-79\n*   **Affected Plugin:** Custom Field Manager <= 1.0",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 1.0 | Base | Primary | Allowed |\n| CWE-116 | Improper Encoding or Escaping of Output | 0.7 | Class | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship influencing the decision is the parent-child relationship between CWE-116 and potential more specific CWEs related to output encoding. CWE-79 is a base level CWE for XSS and is appropriate, but CWE-116 is a class-level CWE that could be a factor. There are chain relationships, where improper escaping (CWE-116) can lead to XSS (CWE-79), supporting the selection of both. The analysis favors a specific Base CWE (CWE-79) for the XSS vulnerability, but recognizes CWE-116 (Class) as a contributing factor due to **improper input sanitization**.\n\n```mermaid\ngraph TD\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    cwe116[\"CWE-116: Improper Encoding or Escaping of Output\"]\n    \n    cwe79 -->|CANFOLLOW| cwe116\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe79 primary\n    class cwe116 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **improper input sanitization**, leading to the insertion of unsanitized data into the web page, which results in Cross-Site Scripting.\n  - Root Cause: **Improper input sanitization**\n  - Weakness: CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n  - Impact: Cross-Site Scripting vulnerability exploitable against high-privilege users\n\n## Summary of Analysis\nThe initial analysis clearly points to CWE-79 as the primary weakness, as the vulnerability description explicitly states that the plugin \"does not sanitise and escape a parameter before outputting it back in the page, leading to a Reflected Cross-Site Scripting\". This directly matches the description of CWE-79, which involves the improper neutralization of input during web page generation. The retriever results also list CWE-79 as a top candidate.\n\nCWE-116 is considered as a secondary weakness because the description also mentions the lack of escaping. Improper or missing encoding/escaping (CWE-116) could be a contributing factor to the XSS vulnerability, although the primary issue is the **lack of sanitization**.\n\nThe selection of CWE-79 is at the optimal level of specificity, as it directly addresses the root cause and the specific type of vulnerability (XSS). The evidence from the vulnerability description and the retriever results strongly support this classification. The high confidence score reflects the clear match between the vulnerability description and CWE-79. CWE-116 is a reasonable secondary mapping due to the lack of escaping, but it's less direct than CWE-79.\n\nOther CWEs Considered But Not Used:\n\n*   CWE-352: Cross-Site Request Forgery (CSRF) - Not applicable, as the vulnerability is Reflected XSS, not CSRF.\n*   CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') - Not applicable, as there is no SQL injection involved.\n*   CWE-434: Unrestricted Upload of File with Dangerous Type - Not applicable, as there is no file upload functionality involved.\n*   CWE-862: Missing Authorization - Not applicable, as the issue is improper sanitization, not missing authorization.\n*   CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS) - While related, CWE-79 is a broader and more appropriate base CWE for XSS.\n*   CWE-472: External Control of Assumed-Immutable Web Parameter - Not directly relevant, as the issue is not about controlling immutable web parameters.\n*   CWE-94: Improper Control of Generation of Code ('Code Injection') - Not applicable, as the vulnerability is XSS, not code injection.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 1.0 | Base | Primary | Allowed |\n| CWE-116 | Improper Encoding or Escaping of Output | 0.7 | Class | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship influencing the decision is the parent-child relationship between CWE-116 and potential more specific CWEs related to output encoding. CWE-79 is a base level CWE for XSS and is appropriate, but CWE-116 is a class-level CWE that could be a factor. There are chain relationships, where improper escaping (CWE-116) can lead to XSS (CWE-79), supporting the selection of both. The analysis favors a specific Base CWE (CWE-79) for the XSS vulnerability, but recognizes CWE-116 (Class) as a contributing factor due to **improper input sanitization**.\n\n```mermaid\ngraph TD\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    cwe116[\"CWE-116: Improper Encoding or Escaping of Output\"]\n    \n    cwe79 -->|CANFOLLOW| cwe116\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe79 primary\n    class cwe116 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **improper input sanitization**, leading to the insertion of unsanitized data into the web page, which results in Cross-Site Scripting.\n  - Root Cause: **Improper input sanitization**\n  - Weakness: CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n  - Impact: Cross-Site Scripting vulnerability exploitable against high-privilege users\n\n## Summary of Analysis\nThe initial analysis clearly points to CWE-79 as the primary weakness, as the vulnerability description explicitly states that the plugin \"does not sanitise and escape a parameter before outputting it back in the page, leading to a Reflected Cross-Site Scripting\". This directly matches the description of CWE-79, which involves the improper neutralization of input during web page generation. The retriever results also list CWE-79 as a top candidate.\n\nCWE-116 is considered as a secondary weakness because the description also mentions the lack of escaping. Improper or missing encoding/escaping (CWE-116) could be a contributing factor to the XSS vulnerability, although the primary issue is the **lack of sanitization**.\n\nThe selection of CWE-79 is at the optimal level of specificity, as it directly addresses the root cause and the specific type of vulnerability (XSS). The evidence from the vulnerability description and the retriever results strongly support this classification. The high confidence score reflects the clear match between the vulnerability description and CWE-79. CWE-116 is a reasonable secondary mapping due to the lack of escaping, but it's less direct than CWE-79.\n\nOther CWEs Considered But Not Used:\n\n*   CWE-352: Cross-Site Request Forgery (CSRF) - Not applicable, as the vulnerability is Reflected XSS, not CSRF.\n*   CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') - Not applicable, as there is no SQL injection involved.\n*   CWE-434: Unrestricted Upload of File with Dangerous Type - Not applicable, as there is no file upload functionality involved.\n*   CWE-862: Missing Authorization - Not applicable, as the issue is improper sanitization, not missing authorization.\n*   CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS) - While related, CWE-79 is a broader and more appropriate base CWE for XSS.\n*   CWE-472: External Control of Assumed-Immutable Web Parameter - Not directly relevant, as the issue is not about controlling immutable web parameters.\n*   CWE-94: Improper Control of Generation of Code ('Code Injection') - Not applicable, as the vulnerability is XSS, not code injection.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-89:**\n- 89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')) - ROOT\n\n\n**Chain starting from CWE-116:**\n- 116 (Improper Encoding or Escaping of Output) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse"
      },
      "similarity": 378.27517234579716
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 316.22895789602364
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse"
      },
      "similarity": 306.2049670761459
    },
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "sparse"
      },
      "similarity": 296.26432812017975
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "source": "sparse"
      },
      "similarity": 275.7313546676214
    },
    {
      "metadata": {
        "doc_id": "138",
        "name": "Improper Neutralization of Special Elements",
        "source": "sparse"
      },
      "similarity": 262.92052198187963
    },
    {
      "metadata": {
        "doc_id": "862",
        "name": "Missing Authorization",
        "source": "sparse"
      },
      "similarity": 253.88401960781815
    },
    {
      "metadata": {
        "doc_id": "80",
        "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
        "source": "sparse"
      },
      "similarity": 238.28103500536764
    },
    {
      "metadata": {
        "doc_id": "472",
        "name": "External Control of Assumed-Immutable Web Parameter",
        "type": "Base",
        "original_content": "The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.",
        "keyphrase_source": "weakness:improper input sanitization",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse",
            "graph"
          ],
          "retriever_count": 3,
          "normalized_scores": {
            "dense": 0.5009892640399775,
            "sparse": 224.66234750557425,
            "graph": 2.0569657800321126
          }
        }
      },
      "similarity": 0.5009892640399775
    },
    {
      "doc_id": "94",
      "text": "CWE-94: Improper Control of Generation of Code ('Code Injection')",
      "score": 2.2776000000000005,
      "metadata": {
        "doc_id": "94",
        "name": "Improper Control of Generation of Code ('Code Injection')",
        "type": "base",
        "original_content": "CWE-94: Improper Control of Generation of Code ('Code Injection')",
        "relationships": [
          {
            "source_id": "94",
            "target_id": "98",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "94",
            "target_id": "96",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "94",
            "target_id": "95",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "94",
            "target_id": "1336",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "94",
            "target_id": "913",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "94",
            "target_id": "74",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "94",
            "target_id": "74",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "94",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "96",
            "target_id": "94",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "95",
            "target_id": "94",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "913",
            "target_id": "94",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "74",
            "target_id": "94",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1336",
            "target_id": "94",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 0.8,
          "abstraction_path": 0.5599999999999999,
          "sequence_path": 0.8
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_up",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "473",
                  "98",
                  "CANPRECEDE"
                ],
                [
                  "98",
                  "94",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "relationship_chain",
              "source": "473"
            },
            "abstraction_path_up": {
              "path": [
                [
                  "96",
                  "94",
                  "CHILDOF"
                ]
              ],
              "score": 0.5599999999999999,
              "type": "abstraction_path_up",
              "source": "96"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "473",
                  "98",
                  "CANPRECEDE"
                ],
                [
                  "98",
                  "94",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "vulnerability_sequence_forward",
              "source": "473"
            }
          }
        },
        "abstraction_level": "base",
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This entry is frequently misused for vulnerabilities with a technical impact of \"code execution,\" which does not by itself indicate a root cause weakness, since dozens of weaknesses can enable code execution.",
          "comments": "This weakness only applies when the product's functionality intentionally constructs all or part of a code segment. It could be that executing code could be the result of other weaknesses that do not involve the construction of code segments.",
          "reasons": [
            "Frequent Misuse",
            "Frequent Misinterpretation"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2776000000000005
          }
        }
      },
      "similarity": 2.2776000000000005
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-89",
      "CWE-116",
      "CWE-94",
      "CWE-862",
      "CWE-80",
      "CWE-79",
      "CWE-472",
      "CWE-352",
      "CWE-434"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}