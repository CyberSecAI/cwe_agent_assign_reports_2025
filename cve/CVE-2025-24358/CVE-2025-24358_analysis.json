{
  "cve_id": "CVE-2025-24358",
  "description": "gorilla/csrf provides **Cross Site Request Forgery** (CSRF) prevention middleware for Go web applications & services. Prior to 1.7.2, gorilla/csrf does not validate the Origin header against an allowlist. Its executes its validation of the Referer header for cross-origin requests only when it believes the request is being served over TLS. It determines this by inspecting the r.URL.Scheme value. However, this value is never populated for server requests per the Go spec, and so this check does not run in practice. This vulnerability allows an attacker who has gained **XSS** on a subdomain or top level domain to perform authenticated form submissions against gorilla/csrf protected targets that share the same top level domain. This vulnerability is fixed in 1.7.2.",
  "key_phrases": {
    "rootcause": "",
    "weakness": [
      "cross-origin request forgery",
      "Cross Site Request Forgery",
      "XSS"
    ],
    "impact": [
      "perform authenticated form submissions",
      "cross-site scripting"
    ],
    "vector": "",
    "attacker": "attacker",
    "product": "gorilla/csrf",
    "version": "prior to 1.7.2",
    "component": ""
  },
  "reference_content": "## CVE-2025-24358 Analysis\n\nHere's an analysis of the provided content related to CVE-2025-24358, extracted and organized according to the guidelines:\n\n**1. Verification:**\n\nThe content directly relates to CVE-2025-24358, as explicitly stated in the security advisory (DLA 4151-1) and the GitHub security advisory.\n\n**2. Root cause of vulnerability:**\n\nThe root cause is that `gorilla/csrf` does not properly validate the `Origin` header and incorrectly determines if a request is served over TLS. It relies on `r.URL.Scheme`, which is not populated for \"server\" requests according to the Go specification. This leads to Referer header validation being bypassed in certain scenarios.\n\n**3. Weaknesses/vulnerabilities present:**\n\n*   **Improper Input Validation:** Failure to validate the `Origin` header against an allowlist.\n*   **Incorrect Security Checks:**  Incorrectly determining TLS status based on `r.URL.Scheme`, leading to bypassed Referer validation.\n*   **CSRF Vulnerability:**  The combination of these issues results in a Cross-Site Request Forgery (CSRF) vulnerability.\n\n**4. Impact of exploitation:**\n\nAn attacker with XSS on a subdomain or top-level domain can perform authenticated form submissions against targets protected by `gorilla/csrf` that share the same top-level domain.\n\n**5. Attack vectors:**\n\n*   **XSS:** Requires the attacker to first gain Cross-Site Scripting (XSS) on a subdomain or top-level domain.\n*   **Cookie Exfiltration:** The attacker exfiltrates the CSRF token and cookie combination.\n*   **Cookie Manipulation:** The attacker sets the exfiltrated cookie with a domain scope (`.example.test`) and path (`/submit`).\n*   **Form Submission:** The attacker submits a form from the attacker's origin with the exfiltrated token.\n\n**6. Required attacker capabilities/position:**\n\n*   Ability to execute JavaScript (XSS) on a subdomain or top-level domain of the target.\n*   Ability to read cookies and form tokens.\n*   Understanding of CSRF vulnerabilities and how to exploit them.\n\n**7. Mitigation or fix:**\n\n*   **Upgrade:** Upgrade to version 1.7.3 or later of the `gorilla/csrf` package.\n*   **Debian Specific:** For Debian 11 bullseye, upgrade to version 1.6.2-2+deb11u1.\n*   **Rebuild Packages:** Rebuild dependent Go packages (golang-chroma, golang-github-alecthomas-chroma-dev, etc.) after upgrading `golang-github-gorilla-csrf`.\n\n**Additional Details (More than CVE Description):**\n\n*   The vulnerability has existed in `gorilla/csrf` since its initial release in 2015.\n*   A Proof of Concept (PoC) is available upon request from [@patrickod](https://github.com/patrickod).\n*   The Debian security tracker page is provided for further information: <https://security-tracker.debian.org/tracker/golang-github-gorilla-csrf>\n*   The commit 9dd6af1 attempts to address the issue by adding context keys to signal TLS state and enabling Referer-based origin checks by default.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID  | CWE Name                                                                   | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :------------------------------------------------------------------------- | :--------- | :-------------------- | :------------------------------ | :------------------------------ |\n| CWE-352   | Cross-Site Request Forgery (CSRF)                                          | 0.9        | Compound              | Primary                         | Allowed                         |\n| CWE-79    | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 0.7        | Base                  | Secondary                       | Allowed                         |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\n\nThe primary CWE is CWE-352 [Cross-Site Request Forgery (CSRF)], which is a compound weakness. The vulnerability description explicitly mentions **Cross Site Request Forgery** (CSRF) as a primary issue. The vulnerability also mentions that an attacker with **XSS** can perform authenticated form submissions, which indicates a relationship between **XSS** and CSRF. Therefore, CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')] is a secondary CWE.\n\n```mermaid\ngraph TD\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    \n    cwe79 -->|CANPRECEDE| cwe352\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe352 primary\n    class cwe79 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with **XSS** (CWE-79) which allows an attacker to inject malicious scripts into a web page. This leads to the ability to perform authenticated form submissions via **Cross-Site Request Forgery** (CWE-352) because the CSRF protection mechanism **does not validate the Origin header against an allowlist** and therefore doesn't properly verify that the request is coming from a trusted source.\n\nCWE-79 (XSS) -> CWE-352 (CSRF)\n\n## Summary of Analysis\n\nThe analysis is based on the provided vulnerability description, particularly the key phrases \"**Cross Site Request Forgery**\" and \"**XSS**\". The retriever results also strongly suggest CWE-352 [Cross-Site Request Forgery (CSRF)] as the primary weakness. The relationship analysis indicates that **XSS** can precede CSRF, making CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')] a relevant secondary weakness.\n\nThe description states that \"gorilla/csrf does not validate the Origin header against an allowlist\". This aligns with the definition of CWE-352, where the application fails to adequately verify if a request was intentionally provided by the user.\n\nThe evidence supports the selection of CWE-352 as the primary CWE due to the explicit mention of **Cross-Site Request Forgery** and the **lack of origin validation**. The inclusion of CWE-79 is justified by the vulnerability's mention of \"**XSS**\" enabling the attack. These CWEs are at the appropriate level of specificity, as they directly address the root cause and enabling factor of the vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-451: User Interface (UI) Misrepresentation of Critical Information\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*Not Used:* This CWE is not relevant because the vulnerability doesn't involve UI misrepresentation.\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n*Not Used:* While injection is related to XSS (CWE-79), it isn't the primary weakness in this scenario.\n\n## CWE-668: Exposure of Resource to Wrong Sphere\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-668 is high-level and is often misused as a catch-all when lower-level CWE IDs might be applicable. It is sometimes used for low-information vulnerability reports [REF-1287]. It is a level-1 Class (i.e., a child of a Pillar). It is not useful for trend analysis.\n\n*Not Used:* This is too generic and doesn't accurately represent the specific vulnerability.\n\n## CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Not Used:* Not directly applicable, as the vulnerability does not involve exposure of sensitive information during storage or transfer.\n\n## CWE-807: Reliance on Untrusted Inputs in a Security Decision\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product uses a protection mechanism that relies on the existence or values of an input, but the input can be modified by an untrusted actor in a way that bypasses the protection mechanism.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Not Used:* Although the CSRF protection relies on the Origin header, the core issue is the **missing** or **improper** validation, not the reliance on an untrusted input.\n\n## CWE-303: Incorrect Implementation of Authentication Algorithm\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe requirements for the product dictate the use of an established authentication algorithm, but the implementation of the algorithm is incorrect.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Not Used:* The vulnerability doesn't involve an incorrect implementation of an authentication algorithm.\n\n## CWE-1391: Use of Weak Credentials\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product uses weak credentials (such as a default key or hard-coded password) that can be calculated, derived, reused, or guessed by an attacker.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*Not Used:* The vulnerability isn't related to weak credentials.\n\n## CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\n**Abstraction Level**: Variant\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as \"<\", \">\", and \"&\" that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Not Used:* CWE-79 is more suitable for the **XSS** aspect than CWE-80, since it is a base level.\n\n## CWE-472: External Control of Assumed-Immutable Web Parameter\n**Abstraction Level**: Base\n**Similarity Score**: 0.74",
  "analysis_with_relationships": "# Summary\n| CWE ID  | CWE Name                                                                   | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :------------------------------------------------------------------------- | :--------- | :-------------------- | :------------------------------ | :------------------------------ |\n| CWE-352   | Cross-Site Request Forgery (CSRF)                                          | 0.9        | Compound              | Primary                         | Allowed                         |\n| CWE-79    | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 0.7        | Base                  | Secondary                       | Allowed                         |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\n\nThe primary CWE is CWE-352 [Cross-Site Request Forgery (CSRF)], which is a compound weakness. The vulnerability description explicitly mentions **Cross Site Request Forgery** (CSRF) as a primary issue. The vulnerability also mentions that an attacker with **XSS** can perform authenticated form submissions, which indicates a relationship between **XSS** and CSRF. Therefore, CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')] is a secondary CWE.\n\n```mermaid\ngraph TD\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    \n    cwe79 -->|CANPRECEDE| cwe352\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe352 primary\n    class cwe79 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with **XSS** (CWE-79) which allows an attacker to inject malicious scripts into a web page. This leads to the ability to perform authenticated form submissions via **Cross-Site Request Forgery** (CWE-352) because the CSRF protection mechanism **does not validate the Origin header against an allowlist** and therefore doesn't properly verify that the request is coming from a trusted source.\n\nCWE-79 (XSS) -> CWE-352 (CSRF)\n\n## Summary of Analysis\n\nThe analysis is based on the provided vulnerability description, particularly the key phrases \"**Cross Site Request Forgery**\" and \"**XSS**\". The retriever results also strongly suggest CWE-352 [Cross-Site Request Forgery (CSRF)] as the primary weakness. The relationship analysis indicates that **XSS** can precede CSRF, making CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')] a relevant secondary weakness.\n\nThe description states that \"gorilla/csrf does not validate the Origin header against an allowlist\". This aligns with the definition of CWE-352, where the application fails to adequately verify if a request was intentionally provided by the user.\n\nThe evidence supports the selection of CWE-352 as the primary CWE due to the explicit mention of **Cross-Site Request Forgery** and the **lack of origin validation**. The inclusion of CWE-79 is justified by the vulnerability's mention of \"**XSS**\" enabling the attack. These CWEs are at the appropriate level of specificity, as they directly address the root cause and enabling factor of the vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-451: User Interface (UI) Misrepresentation of Critical Information\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*Not Used:* This CWE is not relevant because the vulnerability doesn't involve UI misrepresentation.\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n*Not Used:* While injection is related to XSS (CWE-79), it isn't the primary weakness in this scenario.\n\n## CWE-668: Exposure of Resource to Wrong Sphere\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-668 is high-level and is often misused as a catch-all when lower-level CWE IDs might be applicable. It is sometimes used for low-information vulnerability reports [REF-1287]. It is a level-1 Class (i.e., a child of a Pillar). It is not useful for trend analysis.\n\n*Not Used:* This is too generic and doesn't accurately represent the specific vulnerability.\n\n## CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Not Used:* Not directly applicable, as the vulnerability does not involve exposure of sensitive information during storage or transfer.\n\n## CWE-807: Reliance on Untrusted Inputs in a Security Decision\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product uses a protection mechanism that relies on the existence or values of an input, but the input can be modified by an untrusted actor in a way that bypasses the protection mechanism.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Not Used:* Although the CSRF protection relies on the Origin header, the core issue is the **missing** or **improper** validation, not the reliance on an untrusted input.\n\n## CWE-303: Incorrect Implementation of Authentication Algorithm\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe requirements for the product dictate the use of an established authentication algorithm, but the implementation of the algorithm is incorrect.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Not Used:* The vulnerability doesn't involve an incorrect implementation of an authentication algorithm.\n\n## CWE-1391: Use of Weak Credentials\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product uses weak credentials (such as a default key or hard-coded password) that can be calculated, derived, reused, or guessed by an attacker.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*Not Used:* The vulnerability isn't related to weak credentials.\n\n## CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\n**Abstraction Level**: Variant\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as \"<\", \">\", and \"&\" that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*Not Used:* CWE-79 is more suitable for the **XSS** aspect than CWE-80, since it is a base level.\n\n## CWE-472: External Control of Assumed-Immutable Web Parameter\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-1391:**\n- 1391 (Use of Weak Credentials) - ROOT\n\n\n**Chain starting from CWE-80:**\n- 80 (Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse",
        "original_content": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
        "keyphrase_sources": [
          {
            "id": "weakness:cross-origin request forgery",
            "keyphrase": "cross-origin request forgery",
            "type": "weakness"
          },
          {
            "id": "weakness:Cross Site Request Forgery",
            "keyphrase": "Cross Site Request Forgery",
            "type": "weakness"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "impact:perform authenticated form submissions",
            "keyphrase": "perform authenticated form submissions",
            "type": "impact"
          },
          {
            "id": "impact:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "impact"
          },
          {
            "id": "attacker:attacker",
            "keyphrase": "attacker",
            "type": "attacker"
          },
          {
            "id": "product:gorilla/csrf",
            "keyphrase": "gorilla/csrf",
            "type": "product"
          },
          {
            "id": "version:prior to 1.7.2",
            "keyphrase": "prior to 1.7.2",
            "type": "version"
          }
        ]
      },
      "similarity": 748.2523590529686
    },
    {
      "metadata": {
        "doc_id": "346",
        "name": "Origin Validation Error",
        "source": "sparse",
        "original_content": "The product does not properly verify that the source of data or communication is valid.",
        "keyphrase_sources": [
          {
            "id": "weakness:cross-origin request forgery",
            "keyphrase": "cross-origin request forgery",
            "type": "weakness"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "impact:perform authenticated form submissions",
            "keyphrase": "perform authenticated form submissions",
            "type": "impact"
          },
          {
            "id": "attacker:attacker",
            "keyphrase": "attacker",
            "type": "attacker"
          },
          {
            "id": "product:gorilla/csrf",
            "keyphrase": "gorilla/csrf",
            "type": "product"
          },
          {
            "id": "version:prior to 1.7.2",
            "keyphrase": "prior to 1.7.2",
            "type": "version"
          }
        ]
      },
      "similarity": 679.7719342105192
    },
    {
      "metadata": {
        "doc_id": "601",
        "name": "URL Redirection to Untrusted Site ('Open Redirect')",
        "source": "sparse",
        "original_content": "The web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a redirect.",
        "keyphrase_sources": [
          {
            "id": "weakness:Cross Site Request Forgery",
            "keyphrase": "Cross Site Request Forgery",
            "type": "weakness"
          }
        ]
      },
      "similarity": 677.5082991505639
    },
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "sparse",
        "original_content": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
        "keyphrase_sources": [
          {
            "id": "weakness:Cross Site Request Forgery",
            "keyphrase": "Cross Site Request Forgery",
            "type": "weakness"
          }
        ]
      },
      "similarity": 672.8201774738429
    },
    {
      "metadata": {
        "doc_id": "918",
        "name": "Server-Side Request Forgery (SSRF)",
        "source": "sparse",
        "original_content": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
        "keyphrase_sources": [
          {
            "id": "weakness:cross-origin request forgery",
            "keyphrase": "cross-origin request forgery",
            "type": "weakness"
          },
          {
            "id": "weakness:Cross Site Request Forgery",
            "keyphrase": "Cross Site Request Forgery",
            "type": "weakness"
          }
        ]
      },
      "similarity": 668.9545236481472
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse",
        "original_content": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
        "keyphrase_sources": [
          {
            "id": "weakness:cross-origin request forgery",
            "keyphrase": "cross-origin request forgery",
            "type": "weakness"
          },
          {
            "id": "weakness:Cross Site Request Forgery",
            "keyphrase": "Cross Site Request Forgery",
            "type": "weakness"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "impact:perform authenticated form submissions",
            "keyphrase": "perform authenticated form submissions",
            "type": "impact"
          },
          {
            "id": "impact:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "impact"
          },
          {
            "id": "attacker:attacker",
            "keyphrase": "attacker",
            "type": "attacker"
          },
          {
            "id": "product:gorilla/csrf",
            "keyphrase": "gorilla/csrf",
            "type": "product"
          },
          {
            "id": "version:prior to 1.7.2",
            "keyphrase": "prior to 1.7.2",
            "type": "version"
          }
        ]
      },
      "similarity": 666.6435774355926
    },
    {
      "metadata": {
        "doc_id": "1385",
        "name": "Missing Origin Validation in WebSockets",
        "source": "sparse",
        "original_content": "The product uses a WebSocket, but it does not properly verify that the source of data or communication is valid.",
        "keyphrase_sources": [
          {
            "id": "weakness:cross-origin request forgery",
            "keyphrase": "cross-origin request forgery",
            "type": "weakness"
          },
          {
            "id": "impact:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "impact"
          }
        ]
      },
      "similarity": 655.1177288580457
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse",
        "original_content": "The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.",
        "keyphrase_sources": [
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "impact:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "impact"
          },
          {
            "id": "attacker:attacker",
            "keyphrase": "attacker",
            "type": "attacker"
          },
          {
            "id": "product:gorilla/csrf",
            "keyphrase": "gorilla/csrf",
            "type": "product"
          },
          {
            "id": "version:prior to 1.7.2",
            "keyphrase": "prior to 1.7.2",
            "type": "version"
          }
        ]
      },
      "similarity": 624.0390818377135
    },
    {
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "source": "sparse",
        "original_content": "The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.",
        "keyphrase_sources": [
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "impact:perform authenticated form submissions",
            "keyphrase": "perform authenticated form submissions",
            "type": "impact"
          },
          {
            "id": "attacker:attacker",
            "keyphrase": "attacker",
            "type": "attacker"
          },
          {
            "id": "version:prior to 1.7.2",
            "keyphrase": "prior to 1.7.2",
            "type": "version"
          }
        ]
      },
      "similarity": 598.8248140235634
    },
    {
      "metadata": {
        "doc_id": "1004",
        "name": "Sensitive Cookie Without 'HttpOnly' Flag",
        "source": "sparse",
        "original_content": "The product uses a cookie to store sensitive information, but the cookie is not marked with the HttpOnly flag.",
        "keyphrase_sources": [
          {
            "id": "impact:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "impact"
          }
        ]
      },
      "similarity": 228.02974198200005
    },
    {
      "metadata": {
        "doc_id": "862",
        "name": "Missing Authorization",
        "source": "sparse",
        "original_content": "The product does not perform an authorization check when an actor attempts to access a resource or perform an action.",
        "keyphrase_sources": [
          {
            "id": "impact:perform authenticated form submissions",
            "keyphrase": "perform authenticated form submissions",
            "type": "impact"
          },
          {
            "id": "product:gorilla/csrf",
            "keyphrase": "gorilla/csrf",
            "type": "product"
          }
        ]
      },
      "similarity": 224.30360653578717
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-1391",
      "CWE-80",
      "CWE-79",
      "CWE-472",
      "CWE-352",
      "CWE-74",
      "CWE-668",
      "CWE-451",
      "CWE-303",
      "CWE-807",
      "CWE-212"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {
    "352": [
      {
        "id": "weakness:cross-origin request forgery",
        "keyphrase": "cross-origin request forgery",
        "type": "weakness"
      },
      {
        "id": "weakness:Cross Site Request Forgery",
        "keyphrase": "Cross Site Request Forgery",
        "type": "weakness"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "impact:perform authenticated form submissions",
        "keyphrase": "perform authenticated form submissions",
        "type": "impact"
      },
      {
        "id": "impact:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "impact"
      },
      {
        "id": "attacker:attacker",
        "keyphrase": "attacker",
        "type": "attacker"
      },
      {
        "id": "product:gorilla/csrf",
        "keyphrase": "gorilla/csrf",
        "type": "product"
      },
      {
        "id": "version:prior to 1.7.2",
        "keyphrase": "prior to 1.7.2",
        "type": "version"
      }
    ],
    "346": [
      {
        "id": "weakness:cross-origin request forgery",
        "keyphrase": "cross-origin request forgery",
        "type": "weakness"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "impact:perform authenticated form submissions",
        "keyphrase": "perform authenticated form submissions",
        "type": "impact"
      },
      {
        "id": "attacker:attacker",
        "keyphrase": "attacker",
        "type": "attacker"
      },
      {
        "id": "product:gorilla/csrf",
        "keyphrase": "gorilla/csrf",
        "type": "product"
      },
      {
        "id": "version:prior to 1.7.2",
        "keyphrase": "prior to 1.7.2",
        "type": "version"
      }
    ],
    "918": [
      {
        "id": "weakness:cross-origin request forgery",
        "keyphrase": "cross-origin request forgery",
        "type": "weakness"
      },
      {
        "id": "weakness:Cross Site Request Forgery",
        "keyphrase": "Cross Site Request Forgery",
        "type": "weakness"
      }
    ],
    "79": [
      {
        "id": "weakness:cross-origin request forgery",
        "keyphrase": "cross-origin request forgery",
        "type": "weakness"
      },
      {
        "id": "weakness:Cross Site Request Forgery",
        "keyphrase": "Cross Site Request Forgery",
        "type": "weakness"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "impact:perform authenticated form submissions",
        "keyphrase": "perform authenticated form submissions",
        "type": "impact"
      },
      {
        "id": "impact:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "impact"
      },
      {
        "id": "attacker:attacker",
        "keyphrase": "attacker",
        "type": "attacker"
      },
      {
        "id": "product:gorilla/csrf",
        "keyphrase": "gorilla/csrf",
        "type": "product"
      },
      {
        "id": "version:prior to 1.7.2",
        "keyphrase": "prior to 1.7.2",
        "type": "version"
      }
    ],
    "1385": [
      {
        "id": "weakness:cross-origin request forgery",
        "keyphrase": "cross-origin request forgery",
        "type": "weakness"
      },
      {
        "id": "impact:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "impact"
      }
    ],
    "601": [
      {
        "id": "weakness:Cross Site Request Forgery",
        "keyphrase": "Cross Site Request Forgery",
        "type": "weakness"
      }
    ],
    "89": [
      {
        "id": "weakness:Cross Site Request Forgery",
        "keyphrase": "Cross Site Request Forgery",
        "type": "weakness"
      }
    ],
    "116": [
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "impact:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "impact"
      },
      {
        "id": "attacker:attacker",
        "keyphrase": "attacker",
        "type": "attacker"
      },
      {
        "id": "product:gorilla/csrf",
        "keyphrase": "gorilla/csrf",
        "type": "product"
      },
      {
        "id": "version:prior to 1.7.2",
        "keyphrase": "prior to 1.7.2",
        "type": "version"
      }
    ],
    "201": [
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "impact:perform authenticated form submissions",
        "keyphrase": "perform authenticated form submissions",
        "type": "impact"
      },
      {
        "id": "attacker:attacker",
        "keyphrase": "attacker",
        "type": "attacker"
      },
      {
        "id": "version:prior to 1.7.2",
        "keyphrase": "prior to 1.7.2",
        "type": "version"
      }
    ],
    "862": [
      {
        "id": "impact:perform authenticated form submissions",
        "keyphrase": "perform authenticated form submissions",
        "type": "impact"
      },
      {
        "id": "product:gorilla/csrf",
        "keyphrase": "gorilla/csrf",
        "type": "product"
      }
    ],
    "1004": [
      {
        "id": "impact:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "impact"
      }
    ]
  }
}