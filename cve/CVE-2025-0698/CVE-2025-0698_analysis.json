{
  "cve_id": "CVE-2025-0698",
  "description": "A vulnerability was found in JoeyBling bootplus up to 247d5f6c209be1a5cf10cd0fa18e1d8cc63cf55d. It has been classified as critical. Affected is an unknown function of the file /admin/sys/menu/list. The manipulation of the argument sort/order leads to **sql injection**. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used. Continious delivery with rolling releases is used by this product. Therefore, no version details of affected nor updated releases are available.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "sql injection",
    "impact": "",
    "vector": "manipulation of the argument sort/order",
    "attacker": "",
    "product": "JoeyBling bootplus",
    "version": "up to 247d5f6c209be1a5cf10cd0fa18e1d8cc63cf55d",
    "component": "/admin/sys/menu/list"
  },
  "reference_content": "## Analysis of CVE-2025-0698 based on provided content:\n\nThe provided content details a SQL injection vulnerability in the \"bootplus\" application, found on GitHub at [https://github.com/JoeyBling/bootplus](https://github.com/JoeyBling/bootplus). This directly relates to a potential security issue and could be associated with CVE-2025-0698 if the CVE description matches this vulnerability.\n\n**Root cause of vulnerability:**\n\nThe `sort` parameter in `src/main/java/io/github/dao/SysMenuDao.xml` is not using a precompiled format.\n\n**Weaknesses/vulnerabilities present:**\n\n*   SQL Injection\n\n**Impact of exploitation:**\n\nAttackers can directly query database information.\n\n**Attack vectors:**\n\nThe vulnerability is exploitable through the `sort` parameter in a specific URL:\n\n`http://192.168.0.105:8080/admin/sys/menu/list?sort=parentName%20asc,extractvalue(1,concat(0x5c,user(),0x5c))&order=&offset=0&limit=20`\n\nThe example provided uses `extractvalue` to potentially retrieve the database user.\n\n**Required attacker capabilities/position:**\n\nAn attacker needs to be able to craft and send a malicious HTTP request to the vulnerable endpoint.  Access to the application is required.\n\n**Mitigation or fix:**\n\nThe content suggests using a precompiled format for the SQL query to prevent injection.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-89 | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | 1.0 | Base | Primary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary identified CWE is CWE-89, which stands alone as the root cause in this vulnerability. There are no direct parent-child or chain relationships explicitly defined within the provided information that influence the classification. The focus remains on the direct SQL injection issue.\n\n```mermaid\ngraph TD\n    cwe89[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"]\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    class cwe89 primary\n```\n\n## Vulnerability Chain\nThe vulnerability chain consists of a single point:\n1.  **Root Cause:** CWE-89 - Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') due to unsanitized input in the `sort` parameter.\n    - This directly leads to the impact of potential data breaches.\n\n## Summary of Analysis\nThe analysis is strongly based on the provided evidence, which includes explicit mention of **sql injection** vulnerability due to the manipulation of the `sort/order` argument in `admin/sys/menu/list`. The CVE Reference Links Content Summary confirms the **root cause** is the `sort` parameter in `src/main/java/io/github/dao/SysMenuDao.xml` not using a precompiled format which allowed attackers to directly query database information. The retriever results strongly suggest CWE-89 as the primary candidate. The graph relationships did not influence the decision. The selected CWE-89 is at the optimal base level of specificity for the identified vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 1017.42\n**Source**: sparse\n\n**Description**:\nThe product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n### CWEs Considered But Not Used:\n\n*   **CWE-79 (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'))**: While neutralization issues are present, the core issue is SQL injection, not XSS.\n*   **CWE-78 (Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'))**: This is not an OS command injection.\n*   **CWE-113 (Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting'))**: This is not a CRLF injection issue.\n*   **CWE-434 (Unrestricted Upload of File with Dangerous Type)**: This is not an unrestricted file upload issue.\n*   **CWE-306 (Missing Authentication for Critical Function)**: Although authentication might be a factor, the primary weakness is SQL Injection.\n*   **CWE-73 (External Control of File Name or Path)**: This is not related to file path manipulation.\n*   **CWE-494 (Download of Code Without Integrity Check)**: This is not related to code downloads.\n*   **CWE-183 (Permissive List of Allowed Inputs)**: This is not about overly permissive input lists.\n*   **CWE-1336 (Improper Neutralization of Special Elements Used in a Template Engine)**: This is not a template engine issue.\n*   **CWE-117 (Improper Output Neutralization for Logs)**: This is not related to logging.\n*   **CWE-116 (Improper Encoding or Escaping of Output)**: Although encoding issues can contribute to injection vulnerabilities, the primary weakness is the lack of proper neutralization of SQL special elements.\n*   **CWE-93 (Improper Neutralization of CRLF Sequences ('CRLF Injection'))**: This is not a CRLF injection issue.\n*   **CWE-790 (Improper Filtering of Special Elements)**: This is not related to filtering.\n*   **CWE-78 (Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'))**: This is not OS command injection.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-89 | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | 1.0 | Base | Primary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary identified CWE is CWE-89, which stands alone as the root cause in this vulnerability. There are no direct parent-child or chain relationships explicitly defined within the provided information that influence the classification. The focus remains on the direct SQL injection issue.\n\n```mermaid\ngraph TD\n    cwe89[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"]\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    class cwe89 primary\n```\n\n## Vulnerability Chain\nThe vulnerability chain consists of a single point:\n1.  **Root Cause:** CWE-89 - Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') due to unsanitized input in the `sort` parameter.\n    - This directly leads to the impact of potential data breaches.\n\n## Summary of Analysis\nThe analysis is strongly based on the provided evidence, which includes explicit mention of **sql injection** vulnerability due to the manipulation of the `sort/order` argument in `admin/sys/menu/list`. The CVE Reference Links Content Summary confirms the **root cause** is the `sort` parameter in `src/main/java/io/github/dao/SysMenuDao.xml` not using a precompiled format which allowed attackers to directly query database information. The retriever results strongly suggest CWE-89 as the primary candidate. The graph relationships did not influence the decision. The selected CWE-89 is at the optimal base level of specificity for the identified vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 1017.42\n**Source**: sparse\n\n**Description**:\nThe product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n### CWEs Considered But Not Used:\n\n*   **CWE-79 (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'))**: While neutralization issues are present, the core issue is SQL injection, not XSS.\n*   **CWE-78 (Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'))**: This is not an OS command injection.\n*   **CWE-113 (Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting'))**: This is not a CRLF injection issue.\n*   **CWE-434 (Unrestricted Upload of File with Dangerous Type)**: This is not an unrestricted file upload issue.\n*   **CWE-306 (Missing Authentication for Critical Function)**: Although authentication might be a factor, the primary weakness is SQL Injection.\n*   **CWE-73 (External Control of File Name or Path)**: This is not related to file path manipulation.\n*   **CWE-494 (Download of Code Without Integrity Check)**: This is not related to code downloads.\n*   **CWE-183 (Permissive List of Allowed Inputs)**: This is not about overly permissive input lists.\n*   **CWE-1336 (Improper Neutralization of Special Elements Used in a Template Engine)**: This is not a template engine issue.\n*   **CWE-117 (Improper Output Neutralization for Logs)**: This is not related to logging.\n*   **CWE-116 (Improper Encoding or Escaping of Output)**: Although encoding issues can contribute to injection vulnerabilities, the primary weakness is the lack of proper neutralization of SQL special elements.\n*   **CWE-93 (Improper Neutralization of CRLF Sequences ('CRLF Injection'))**: This is not a CRLF injection issue.\n*   **CWE-790 (Improper Filtering of Special Elements)**: This is not related to filtering.\n*   **CWE-78 (Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'))**: This is not OS command injection.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-183:**\n- 183 (Permissive List of Allowed Inputs) - ROOT\n\n\n**Chain starting from CWE-89:**\n- 89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: SQL injection",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 506.6676511341237
    },
    {
      "metadata": {
        "doc_id": "1336",
        "name": "Improper Neutralization of Special Elements Used in a Template Engine",
        "source": "sparse"
      },
      "similarity": 428.4384218841641
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "source": "sparse"
      },
      "similarity": 420.7159508434651
    },
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse"
      },
      "similarity": 413.3874713957448
    },
    {
      "metadata": {
        "doc_id": "306",
        "name": "Missing Authentication for Critical Function",
        "source": "sparse"
      },
      "similarity": 412.82865518471976
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse"
      },
      "similarity": 411.82566440226987
    },
    {
      "metadata": {
        "doc_id": "93",
        "name": "Improper Neutralization of CRLF Sequences ('CRLF Injection')",
        "source": "sparse"
      },
      "similarity": 411.47574192309776
    },
    {
      "metadata": {
        "doc_id": "790",
        "name": "Improper Filtering of Special Elements",
        "type": "Class",
        "original_content": "The product receives data from an upstream component, but does not filter or incorrectly filters special elements before sending it to a downstream component.",
        "keyphrase_source": "weakness:sql injection",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
          "comments": "Examine children of this entry to see if there is a better fit",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.5938904039853579
          }
        }
      },
      "similarity": 0.5938904039853579
    },
    {
      "doc_id": "78",
      "text": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
      "score": 0.6233795060637948,
      "metadata": {
        "doc_id": "78",
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "type": "Base",
        "extended_description": "\n\nThis weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications. Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage.\n\n\nThere are at least two subtypes of OS command injection:\n\n\n  - The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system(\"nslookup [HOSTNAME]\") to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing.\n\n  - The application accepts an input that it uses to fully select which program to run, as well as which commands to use. The application simply redirects this entire command to the operating system. For example, the program might use \"exec([COMMAND])\" to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line.\n\nFrom a weakness standpoint, these variants represent distinct programmer errors. In the first variant, the programmer clearly intends that input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input.",
        "alternate_terms": [
          "Shell injection",
          "Shell metacharacters",
          "OS Command Injection"
        ],
        "original_content": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
        "relationships": [
          {
            "source_id": "78",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "78",
            "target_id": "88",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "78",
            "target_id": "77",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1340"
            }
          },
          {
            "source_id": "78",
            "target_id": "77",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1305"
            }
          },
          {
            "source_id": "78",
            "target_id": "74",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "78",
            "target_id": "77",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "77",
            "target_id": "78",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "74",
            "target_id": "78",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "184",
            "target_id": "78",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "source": "graph",
        "sources": [
          "vector",
          "graph"
        ],
        "vector_score": 0.6233795060637948,
        "graph_score": 3.8870000000000005,
        "score_components": {
          "relationship_chain": 0.8,
          "explicit_mention": 1.0,
          "abstraction_path": 0.9,
          "sequence_path": 0.8
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "79",
                  "184",
                  "CANFOLLOW"
                ],
                [
                  "184",
                  "78",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "relationship_chain",
              "source": "79"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "79",
                  "184",
                  "CANFOLLOW"
                ],
                [
                  "184",
                  "78",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "vulnerability_sequence_forward",
              "source": "79"
            }
          }
        },
        "is_explicit": true,
        "abstraction_level": "base",
        "position": "after",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.591842239723285,
            "graph": 2.581551802425518
          }
        }
      },
      "similarity": 2.581551802425518
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-183",
      "CWE-89",
      "CWE-116",
      "CWE-494",
      "CWE-93",
      "CWE-79",
      "CWE-113",
      "CWE-306",
      "CWE-73",
      "CWE-1336",
      "CWE-790",
      "CWE-117",
      "CWE-78",
      "CWE-434"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}