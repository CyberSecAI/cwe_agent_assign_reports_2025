{
  "cve_id": "CVE-2025-26310",
  "description": "**Multiple memory leaks** have been identified in the ABC file parsing functions (parseABC_CONSTANT_POOL and `parseABC_FILE) in util/parser.c of libming v0.4.8, which allow attackers to cause a denial of service via a crafted ABC file.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "Multiple memory leaks",
    "impact": "denial of service",
    "vector": "crafted ABC file",
    "attacker": "attackers",
    "product": "libming",
    "version": "v0.4.8",
    "component": [
      "'parseABC_FILE'] in util/parser.c",
      "['parseABC_CONSTANT_POOL'"
    ]
  },
  "reference_content": "## Analysis of CVE-2025-26310 (PLACEHOLDER) based on provided content\n\nThe provided content details a memory leak vulnerability in libming versions up to and including v0.4.8. While the CVE description is a placeholder, the content clearly relates to a vulnerability affecting the library.\n\n**Root cause of vulnerability:**\n\nThe root cause is the lack of memory deallocation (using `free()`) after allocating memory for various data structures within the `parseABC_CONSTANT_POOL` and `parseABC_FILE` functions. Specifically, memory is allocated for arrays like `Integers`, `UIntegers`, `Doubles`, `Strings`, `Namespaces`, `NsSets`, `Multinames`, `Methods`, `Metadata`, `Instances`, `Classes`, `Scripts`, and `MethodBodies` using `malloc`, but is never released.\n\n**Weaknesses/vulnerabilities present:**\n\n*   Memory Leak: Failure to free allocated memory leads to a gradual consumption of system resources.\n\n**Impact of exploitation:**\n\n*   Denial of Service (DoS): Repeated parsing of ABC files can exhaust available memory, leading to application crashes or system instability.\n*   Resource Exhaustion:  The leak can degrade system performance over time.\n\n**Attack vectors:**\n\n*   Processing Malicious ABC Files: An attacker can craft a malicious ABC file that, when parsed by a vulnerable version of libming, triggers the memory leak.\n*   File Parsing: Any application using libming to parse ABC files is potentially vulnerable.\n\n**Required attacker capabilities/position:**\n\n*   Ability to provide an ABC file to the vulnerable application. This could be through file upload, network communication, or other input mechanisms.\n*   No special privileges are required to trigger the vulnerability.\n\n**Mitigation or fix:**\n\nThe content does not explicitly state a fix, but the analysis implies that the vulnerability can be mitigated by adding appropriate `free()` calls to deallocate the memory allocated within the `parseABC_CONSTANT_POOL` and `parseABC_FILE` functions.\n\n**Additional Details:**\n\nThe content provides more detail than a typical CVE description, including:\n\n*   Specific function names (`parseABC_CONSTANT_POOL`, `parseABC_FILE`) where the leaks occur.\n*   Code snippets illustrating the memory allocation without corresponding deallocation.\n*   Output from AddressSanitizer (ASan) confirming the memory leaks and providing details about the allocated memory blocks.\n*   A link to a Proof-of-Concept (PoC) exploit.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-401 | Missing Release of Memory after Effective Lifetime | 1.0 | Variant | Allowed | Primary CWE. The vulnerability is a **memory leak** due to the failure to release allocated memory. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-401, which is a variant. No other relationships appear to be relevant based on the available information.\n\n```mermaid\ngraph TD\n    cwe401[\"CWE-401: Missing Release of Memory after Effective Lifetime\"]\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    class cwe401 primary\n```\n\n## Vulnerability Chain\nThe vulnerability chain consists of a **missing memory release**, which leads to a **memory leak**, and finally results in a **denial of service**.\n\n## Summary of Analysis\nThe analysis indicates a clear **memory leak** vulnerability due to the failure to release allocated memory. The vulnerability description explicitly states that **multiple memory leaks** have been identified. The CVE reference links content summary confirms that memory is allocated but not freed, leading to resource exhaustion and denial of service.\n\nThe Retriever Results also lists CWE-401 as the top candidate.\n\nCWE-125 (Out-of-bounds Read) was considered, but it does not match the vulnerability description as there is no indication of out-of-bounds reads.\nCWE-789 (Memory Allocation with Excessive Size Value) was also considered, but the description indicates a memory leak, not excessive allocation size.\nCWE-770 (Allocation of Resources Without Limits or Throttling) might appear relevant because of the resource exhaustion, but the root cause is the memory leak, not the lack of limits on resource allocation.\n\nThe selected CWE, CWE-401, is at the optimal level of specificity (Variant) as it directly describes the **missing release of memory** that leads to the vulnerability.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-401 | Missing Release of Memory after Effective Lifetime | 1.0 | Variant | Allowed | Primary CWE. The vulnerability is a **memory leak** due to the failure to release allocated memory. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-401, which is a variant. No other relationships appear to be relevant based on the available information.\n\n```mermaid\ngraph TD\n    cwe401[\"CWE-401: Missing Release of Memory after Effective Lifetime\"]\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    class cwe401 primary\n```\n\n## Vulnerability Chain\nThe vulnerability chain consists of a **missing memory release**, which leads to a **memory leak**, and finally results in a **denial of service**.\n\n## Summary of Analysis\nThe analysis indicates a clear **memory leak** vulnerability due to the failure to release allocated memory. The vulnerability description explicitly states that **multiple memory leaks** have been identified. The CVE reference links content summary confirms that memory is allocated but not freed, leading to resource exhaustion and denial of service.\n\nThe Retriever Results also lists CWE-401 as the top candidate.\n\nCWE-125 (Out-of-bounds Read) was considered, but it does not match the vulnerability description as there is no indication of out-of-bounds reads.\nCWE-789 (Memory Allocation with Excessive Size Value) was also considered, but the description indicates a memory leak, not excessive allocation size.\nCWE-770 (Allocation of Resources Without Limits or Throttling) might appear relevant because of the resource exhaustion, but the root cause is the memory leak, not the lack of limits on resource allocation.\n\nThe selected CWE, CWE-401, is at the optimal level of specificity (Variant) as it directly describes the **missing release of memory** that leads to the vulnerability.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-789:**\n- 789 (Memory Allocation with Excessive Size Value) - ROOT\n\n\n**Chain starting from CWE-401:**\n- 401 (Missing Release of Memory after Effective Lifetime) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "401",
        "name": "Missing Release of Memory after Effective Lifetime",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Memory Leak",
        "match_reason": "term_in_phrase_whole_phrase"
      },
      "similarity": 800.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "125",
        "name": "Out-of-bounds Read",
        "source": "sparse"
      },
      "similarity": 213.418858164494
    },
    {
      "metadata": {
        "doc_id": "789",
        "name": "Memory Allocation with Excessive Size Value",
        "source": "sparse"
      },
      "similarity": 211.75554607410058
    },
    {
      "metadata": {
        "doc_id": "674",
        "name": "Uncontrolled Recursion",
        "source": "sparse"
      },
      "similarity": 211.54636013996947
    },
    {
      "metadata": {
        "doc_id": "407",
        "name": "Inefficient Algorithmic Complexity",
        "source": "sparse"
      },
      "similarity": 203.88297008516707
    },
    {
      "metadata": {
        "doc_id": "770",
        "name": "Allocation of Resources Without Limits or Throttling",
        "source": "sparse"
      },
      "similarity": 195.7746027815676
    },
    {
      "metadata": {
        "doc_id": "835",
        "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
        "source": "sparse"
      },
      "similarity": 194.72157552911614
    },
    {
      "metadata": {
        "doc_id": "126",
        "name": "Buffer Over-read",
        "source": "sparse"
      },
      "similarity": 193.71340987323165
    },
    {
      "metadata": {
        "doc_id": "909",
        "name": "Missing Initialization of Resource",
        "type": "Class",
        "original_content": "The product does not initialize a critical resource.",
        "keyphrase_source": "weakness:Multiple memory leaks",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
          "comments": "Examine children of this entry to see if there is a better fit",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.5294675394469414
          }
        }
      },
      "similarity": 0.5294675394469414
    },
    {
      "doc_id": "1325",
      "text": "The product manages a group of objects or resources and performs a separate memory allocation for each object, but it does not properly limit the total amount of memory that is consumed by all of the combined objects.",
      "score": 0.5465252793216778,
      "metadata": {
        "doc_id": "1325",
        "name": "Improperly Controlled Sequential Memory Allocation",
        "type": "Base",
        "extended_description": "\n\nWhile the product might limit the amount of memory that is allocated in a single operation for a single object (such as a malloc of an array), if an attacker can cause multiple objects to be allocated in separate operations, then this might cause higher total memory consumption than the developer intended, leading to a denial of service.\n",
        "alternate_terms": [
          "Stack Exhaustion"
        ],
        "original_content": "The product manages a group of objects or resources and performs a separate memory allocation for each object, but it does not properly limit the total amount of memory that is consumed by all of the combined objects.",
        "relationships": [
          {
            "source_id": "1325",
            "target_id": "476",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1325",
            "target_id": "789",
            "label": "PEEROF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1325",
            "target_id": "770",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "770",
            "target_id": "1325",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "476",
            "target_id": "1325",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "source": "graph",
        "sources": [
          "vector",
          "graph"
        ],
        "vector_score": 0.5465252793216778,
        "graph_score": 4.3888,
        "score_components": {
          "relationship_chain": 0.7,
          "explicit_mention": 1.0,
          "abstraction_path": 0.9,
          "sequence_path": 0.7200000000000001,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "1325",
                  "789",
                  "PEEROF"
                ]
              ],
              "score": 0.7,
              "type": "relationship_chain",
              "source": "789"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "789",
                  "476",
                  "CANPRECEDE"
                ],
                [
                  "476",
                  "1325",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "vulnerability_sequence_forward",
              "source": "789"
            },
            "peer_relationship": {
              "path": [
                [
                  "1325",
                  "789",
                  "PEEROF"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "789"
            }
          }
        },
        "is_explicit": true,
        "abstraction_level": "base",
        "position": "after",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5069940162149837,
            "graph": 2.851890111728671
          }
        }
      },
      "similarity": 2.851890111728671
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-789",
      "CWE-401",
      "CWE-770",
      "CWE-125"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}