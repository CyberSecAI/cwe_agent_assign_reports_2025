{
  "query": "In the Linux kernel, the following vulnerability has been resolved drm/amdgpu dont access invalid sched Since 2320c9e6a768 (drm/sched memset() job in drm_sched_job_init()) accessing job->base.sched can produce unexpected results as the initialisation of (*job)->base.sched done in amdgpu_job_alloc is overwritten by the memset. This commit fixes an issue when a CS would fail validation and would be rejected after job->num_ibs is incremented. In this case, amdgpu_ib_free(ring->adev, ...) will be called, which would crash the machine because the ring value is bogus. To fix this, pass a NULL pointer to amdgpu_ib_free() we can do this because the device is actually not used in this function. The next commit will remove the ring argument completely. (cherry picked from commit 2ae520cb12831d264ceb97c61f72c59d33c0dbd7)",
  "count": 10,
  "results": [
    {
      "cwe_id": "911",
      "name": "Improper Update of Reference Count",
      "abstraction": "Base",
      "score": 696.428806696798,
      "original_score": 696.428806696798,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "835",
      "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
      "abstraction": "Base",
      "score": 633.0595635551556,
      "original_score": 633.0595635551556,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "824",
      "name": "Access of Uninitialized Pointer",
      "abstraction": "Base",
      "score": 622.1541957998156,
      "original_score": 622.1541957998156,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "abstraction": "Class",
      "score": 619.9921983059974,
      "original_score": 619.9921983059974,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "617",
      "name": "Reachable Assertion",
      "abstraction": "Base",
      "score": 615.5156110987592,
      "original_score": 615.5156110987592,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "abstraction": "Base",
      "score": 603.2091908225385,
      "original_score": 603.2091908225385,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "abstraction": "Base",
      "score": 601.1342776677063,
      "original_score": 601.1342776677063,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "abstraction": "Class",
      "score": 589.7583849247472,
      "original_score": 589.7583849247472,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "190",
      "name": "Integer Overflow or Wraparound",
      "abstraction": "Base",
      "score": 588.4248997855423,
      "original_score": 588.4248997855423,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "125",
      "name": "Out-of-bounds Read",
      "abstraction": "Base",
      "score": 583.0866632000472,
      "original_score": 583.0866632000472,
      "mapping_usage": "Allowed"
    }
  ],
  "statistics": {
    "min": 583.0866632000472,
    "max": 696.428806696798,
    "mean": 615.2763791857108,
    "median": 609.3624009606489,
    "count": 10
  }
}