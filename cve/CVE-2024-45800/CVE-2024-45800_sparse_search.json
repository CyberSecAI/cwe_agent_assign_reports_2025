{
  "retriever": "sparse",
  "query": "Snappymail is an open source web-based email client. SnappyMail uses the `cleanHtml()` function to cleanup HTML and CSS in emails. Research discovered that the function has a few bugs which cause an mXSS exploit. Because the function allowed too many (invalid) HTML elements, it was possible (with incorrect markup) to trick the browser to fix the broken markup into valid markup. As a result a motivated attacker may be able to inject javascript. However, due to the default Content Security Policy the impact of the exploit is minimal. It could be possible to create an attack which leaks some data when loading images through the proxy. This way it might be possible to use the proxy to attack the local system, like with `http//localhost5000/leak`. Another attack could be to load a JavaScript attachment of the email. This is very tricky as the email must link to every possible UID as each email has a unique UID which has a value between 1 and 18446744073709551615 **v2.38.0** and up now remove unsupported HTML elements which mitigates the issue. Users are advised to upgrade. Older versions can install an extension named Security mXSS as a mitigation. This will be available at the administration area at `/?admin#/packages`. **NOTE** this extension can not fix malicious code in encrypted messages or (html) attachments as it cant manipulate the JavaScript code for this. It only protects normal message HTML.",
  "keyphrases": {
    "rootcause": [
      "improper input sanitization"
    ],
    "weakness": [
      "cross-site scripting"
    ]
  },
  "timestamp": "2025-07-13 16:59:39",
  "cve_id": "CVE-2024-45800",
  "result_count": 11,
  "results": [
    {
      "cwe_id": "79",
      "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
      "score": 1382.0712976122686,
      "search_source": "rootcause:improper input sanitization"
    },
    {
      "cwe_id": "116",
      "name": "Improper Encoding or Escaping of Output",
      "score": 1289.8452235594987,
      "search_source": "rootcause:improper input sanitization"
    },
    {
      "cwe_id": "138",
      "name": "Improper Neutralization of Special Elements",
      "score": 1250.4538044929218,
      "search_source": "rootcause:improper input sanitization"
    },
    {
      "cwe_id": "1333",
      "name": "Inefficient Regular Expression Complexity",
      "score": 1249.8249108177156,
      "search_source": "rootcause:improper input sanitization"
    },
    {
      "cwe_id": "923",
      "name": "Improper Restriction of Communication Channel to Intended Endpoints",
      "score": 1248.9220265771507,
      "search_source": "rootcause:improper input sanitization"
    },
    {
      "cwe_id": "863",
      "name": "Incorrect Authorization",
      "score": 1230.7954269736647,
      "search_source": "rootcause:improper input sanitization"
    },
    {
      "cwe_id": "451",
      "name": "User Interface (UI) Misrepresentation of Critical Information",
      "score": 1228.8628934486276,
      "search_source": "rootcause:improper input sanitization"
    },
    {
      "cwe_id": "201",
      "name": "Insertion of Sensitive Information Into Sent Data",
      "score": 1212.7627204801313,
      "search_source": "rootcause:improper input sanitization"
    },
    {
      "cwe_id": "1336",
      "name": "Improper Neutralization of Special Elements Used in a Template Engine",
      "score": 1209.687088705705,
      "search_source": "rootcause:improper input sanitization"
    },
    {
      "cwe_id": "1390",
      "name": "Weak Authentication",
      "score": 1197.4576339583869,
      "search_source": "rootcause:improper input sanitization"
    },
    {
      "cwe_id": "352",
      "name": "Cross-Site Request Forgery (CSRF)",
      "score": 1133.8591778448592,
      "search_source": "weakness:cross-site scripting"
    }
  ]
}