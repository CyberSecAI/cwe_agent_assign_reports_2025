{
  "cve_id": "CVE-2025-2686",
  "description": "A vulnerability has been found in mingyuefusu tushuguanlixitong up to d4836f6b49cd0ac79a4021b15ce99ff7229d4694 and classified as critical. Affected by this vulnerability is the function doFilter of the file /admin/ of the component Backend. The manipulation of the argument Request leads to **improper access controls**. The attack can be launched remotely. The exploit has been disclosed to the public and may be used.",
  "key_phrases": {
    "rootcause": "improper access controls",
    "weakness": "",
    "impact": "",
    "vector": "manipulation of Request argument",
    "attacker": "",
    "product": "mingyuefusu tushuguanlixitong",
    "version": "up to d4836f6b49cd0ac79a4021b15ce99ff7229d4694",
    "component": "doFilter function in /admin/"
  },
  "reference_content": "## Analysis of CVE-2025-2686 Content (gitee.com_f07bf649_20250624_145737.html)\n\nThis content **RELATES** to a vulnerability.\n\n**Root cause of vulnerability:**\n\nThe vulnerability stems from improper session handling and insufficient access control in the `AdminFilter`. The filter checks for the presence of an \"admin\" attribute in the session but doesn't properly terminate the request chain if the user is not an administrator.  Specifically, `chain.doFilter(request, response);` is called even when the user is not authenticated as an admin, allowing the request to proceed to subsequent filters or the target resource. The filter also doesn't prevent session fixation attacks by not regenerating the session ID upon successful login.\n\n**Weaknesses/vulnerabilities present:**\n\n*   **Broken Access Control:**  Unauthorized access to administrative interfaces.\n*   **Insecure Session Management:** Lack of session regeneration upon login, potentially allowing session fixation attacks.\n\n**Impact of exploitation:**\n\nAn attacker can bypass authentication and gain unauthorized access to administrative functionalities, potentially leading to:\n\n*   Data breaches\n*   System compromise\n*   Modification of sensitive data\n*   Account takeover\n\n**Attack vectors:**\n\n*   Directly accessing administrative URLs (e.g., `/admin/*`) without proper authentication.\n*   Exploiting the lack of session regeneration to fixate a session and gain access.\n*   Adding administrators without cookies as demonstrated in the screenshots.\n\n**Required attacker capabilities/position:**\n\n*   Unauthenticated attacker (no login required for initial access).\n*   Basic understanding of web application security concepts.\n*   Ability to craft HTTP requests.\n\n**Mitigation or fix:**\n\nThe provided content suggests the following fix:\n\n*   **Terminate the request chain:**  In the `AdminFilter`, after redirecting the user to the login page, the `chain.doFilter(request, response);` call should be removed or commented out to prevent further processing of the request.\n*   **Session Regeneration:** Implement session regeneration upon successful login to prevent session fixation attacks.  Use `session.invalidate()` followed by creating a new session.\n*   **Secure Cookie Attributes:** Ensure cookies used for session management have the `HttpOnly` and `Secure` attributes set to prevent XSS and MITM attacks.\n\nThe content provides more detail than the official CVE description would likely contain, as it includes code snippets and specific examples of the vulnerability and its exploitation.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-285 | Improper Authorization | 0.9 | Class | Primary | Allowed-with-Review |\n| CWE-306 | Missing Authentication for Critical Function | 0.7 | Base | Secondary | Allowed |\n| CWE-425 | Direct Request ('Forced Browsing') | 0.6 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship that influenced the CWE selection is the hierarchical relationship between CWE-285 (Improper Authorization) and its potential children. While the description points to an authorization issue, the specific nature of the **improper access control** suggests that authentication might be a prerequisite weakness, as the system is not correctly verifying the identity of the user before granting access. CWE-425 (Direct Request) is considered because the vulnerability involves directly accessing administrative URLs without proper authorization. The abstraction levels were considered to ensure the selected CWEs were as specific as possible while still accurately representing the weakness.\n\n```mermaid\ngraph TD\n    cwe285[\"CWE-285: Improper Authorization\"]\n    cwe306[\"CWE-306: Missing Authentication for Critical Function\"]\n    cwe425[\"CWE-425: Direct Request ('Forced Browsing')\"]\n    \n    cwe425 -->|CHILDOF| cwe285\n    cwe306 -->|CANPRECEDE| cwe285\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe285 primary\n    class cwe306,cwe425 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a **missing authentication** check (CWE-306) which leads to **improper authorization** (CWE-285), allowing an attacker to perform actions they should not be allowed to perform. This can be compounded by direct requests (CWE-425).\n  - The root cause is the **lack of proper authentication** and **authorization** checks on the `/admin/` component.\n  - The impact is unauthorized access to administrative functionalities.\n\n## Summary of Analysis\nThe initial assessment focused on the **improper access controls** identified in the vulnerability description. The retriever results suggested several CWEs related to injection and input validation, but the root cause is more accurately described as an authorization issue.\n\nThe analysis of the CVE Reference Links Content Summary provided strong evidence that the vulnerability stems from **insufficient access control** in the `AdminFilter` and **improper session handling**. Specifically, the filter doesn't properly terminate the request chain if the user is not an administrator, and session regeneration is missing.\n\nThe final selection of CWE-285 (Improper Authorization) as the primary CWE is based on the **rootcause** being a failure to properly authorize access to the `/admin/` component. This is further supported by the content summary which states that unauthorized access to administrative interfaces is possible. CWE-306 (Missing Authentication for Critical Function) is included as a secondary CWE because the reference content shows that the system does not properly authenticate users before granting access. CWE-425 (Direct Request) is added as another secondary CWE because the vulnerability allows direct access to administrative URLs without proper authorization. These selections are at the optimal level of specificity, representing the core weaknesses contributing to the vulnerability.\n\nRelevant CWE Information:\n*   CWE-285: Improper Authorization - The product grants access to resources or functionality without verifying that the actor is authorized to perform the requested action.\n*   CWE-306: Missing Authentication for Critical Function - When an actor attempts to access a critical function, the product does not require authentication.\n*   CWE-425: Direct Request ('Forced Browsing') - The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\nThe other CWEs were considered but rejected because they were either too general (e.g., CWE-74, CWE-138) or did not directly address the root cause of the vulnerability (e.g., injection-related CWEs).",
  "analysis_with_relationships": "# Summary\n\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-285 | Improper Authorization | 0.9 | Class | Primary | Allowed-with-Review |\n| CWE-306 | Missing Authentication for Critical Function | 0.7 | Base | Secondary | Allowed |\n| CWE-425 | Direct Request ('Forced Browsing') | 0.6 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship that influenced the CWE selection is the hierarchical relationship between CWE-285 (Improper Authorization) and its potential children. While the description points to an authorization issue, the specific nature of the **improper access control** suggests that authentication might be a prerequisite weakness, as the system is not correctly verifying the identity of the user before granting access. CWE-425 (Direct Request) is considered because the vulnerability involves directly accessing administrative URLs without proper authorization. The abstraction levels were considered to ensure the selected CWEs were as specific as possible while still accurately representing the weakness.\n\n```mermaid\ngraph TD\n    cwe285[\"CWE-285: Improper Authorization\"]\n    cwe306[\"CWE-306: Missing Authentication for Critical Function\"]\n    cwe425[\"CWE-425: Direct Request ('Forced Browsing')\"]\n    \n    cwe425 -->|CHILDOF| cwe285\n    cwe306 -->|CANPRECEDE| cwe285\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe285 primary\n    class cwe306,cwe425 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a **missing authentication** check (CWE-306) which leads to **improper authorization** (CWE-285), allowing an attacker to perform actions they should not be allowed to perform. This can be compounded by direct requests (CWE-425).\n  - The root cause is the **lack of proper authentication** and **authorization** checks on the `/admin/` component.\n  - The impact is unauthorized access to administrative functionalities.\n\n## Summary of Analysis\nThe initial assessment focused on the **improper access controls** identified in the vulnerability description. The retriever results suggested several CWEs related to injection and input validation, but the root cause is more accurately described as an authorization issue.\n\nThe analysis of the CVE Reference Links Content Summary provided strong evidence that the vulnerability stems from **insufficient access control** in the `AdminFilter` and **improper session handling**. Specifically, the filter doesn't properly terminate the request chain if the user is not an administrator, and session regeneration is missing.\n\nThe final selection of CWE-285 (Improper Authorization) as the primary CWE is based on the **rootcause** being a failure to properly authorize access to the `/admin/` component. This is further supported by the content summary which states that unauthorized access to administrative interfaces is possible. CWE-306 (Missing Authentication for Critical Function) is included as a secondary CWE because the reference content shows that the system does not properly authenticate users before granting access. CWE-425 (Direct Request) is added as another secondary CWE because the vulnerability allows direct access to administrative URLs without proper authorization. These selections are at the optimal level of specificity, representing the core weaknesses contributing to the vulnerability.\n\nRelevant CWE Information:\n*   CWE-285: Improper Authorization - The product grants access to resources or functionality without verifying that the actor is authorized to perform the requested action.\n*   CWE-306: Missing Authentication for Critical Function - When an actor attempts to access a critical function, the product does not require authentication.\n*   CWE-425: Direct Request ('Forced Browsing') - The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\nThe other CWEs were considered but rejected because they were either too general (e.g., CWE-74, CWE-138) or did not directly address the root cause of the vulnerability (e.g., injection-related CWEs).\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-306:**\n- 306 (Missing Authentication for Critical Function) - ROOT\n\n\n**Chain starting from CWE-74:**\n- 74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "sparse"
      },
      "similarity": 493.4486017123147
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 465.9895853299317
    },
    {
      "metadata": {
        "doc_id": "306",
        "name": "Missing Authentication for Critical Function",
        "source": "sparse"
      },
      "similarity": 399.6814428070767
    },
    {
      "metadata": {
        "doc_id": "99",
        "name": "Improper Control of Resource Identifiers ('Resource Injection')",
        "source": "sparse"
      },
      "similarity": 397.7843409974994
    },
    {
      "metadata": {
        "doc_id": "285",
        "name": "Improper Authorization",
        "source": "sparse"
      },
      "similarity": 396.30898643567593
    },
    {
      "metadata": {
        "doc_id": "1336",
        "name": "Improper Neutralization of Special Elements Used in a Template Engine",
        "source": "sparse"
      },
      "similarity": 395.66629243617194
    },
    {
      "metadata": {
        "doc_id": "705",
        "name": "Incorrect Control Flow Scoping",
        "source": "sparse"
      },
      "similarity": 394.90493434869
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "source": "sparse"
      },
      "similarity": 393.3849703738804
    },
    {
      "metadata": {
        "doc_id": "790",
        "name": "Improper Filtering of Special Elements",
        "type": "Class",
        "original_content": "The product receives data from an upstream component, but does not filter or incorrectly filters special elements before sending it to a downstream component.",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
          "comments": "Examine children of this entry to see if there is a better fit",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.5778905224129962
          }
        }
      },
      "similarity": 0.5778905224129962
    },
    {
      "doc_id": "78",
      "text": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
      "score": 0.5726033541130919,
      "metadata": {
        "doc_id": "78",
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "type": "Base",
        "extended_description": "\n\nThis weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications. Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage.\n\n\nThere are at least two subtypes of OS command injection:\n\n\n  - The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system(\"nslookup [HOSTNAME]\") to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing.\n\n  - The application accepts an input that it uses to fully select which program to run, as well as which commands to use. The application simply redirects this entire command to the operating system. For example, the program might use \"exec([COMMAND])\" to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line.\n\nFrom a weakness standpoint, these variants represent distinct programmer errors. In the first variant, the programmer clearly intends that input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input.",
        "alternate_terms": [
          "Shell injection",
          "Shell metacharacters",
          "OS Command Injection"
        ],
        "original_content": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
        "relationships": [
          {
            "source_id": "78",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "78",
            "target_id": "88",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "78",
            "target_id": "77",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1340"
            }
          },
          {
            "source_id": "78",
            "target_id": "77",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1305"
            }
          },
          {
            "source_id": "78",
            "target_id": "74",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "78",
            "target_id": "77",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "77",
            "target_id": "78",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "74",
            "target_id": "78",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "184",
            "target_id": "78",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "source": "graph",
        "sources": [
          "vector",
          "graph"
        ],
        "vector_score": 0.5726033541130919,
        "graph_score": 3.8870000000000005,
        "score_components": {
          "relationship_chain": 0.8,
          "explicit_mention": 1.0,
          "abstraction_path": 0.9,
          "sequence_path": 0.8
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "79",
                  "184",
                  "CANFOLLOW"
                ],
                [
                  "184",
                  "78",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "relationship_chain",
              "source": "79"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "79",
                  "184",
                  "CANFOLLOW"
                ],
                [
                  "184",
                  "78",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "vulnerability_sequence_forward",
              "source": "79"
            }
          }
        },
        "is_explicit": true,
        "abstraction_level": "base",
        "position": "after",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5522048267268345,
            "graph": 2.561241341645237
          }
        }
      },
      "similarity": 2.561241341645237
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-306",
      "CWE-74",
      "CWE-285",
      "CWE-138",
      "CWE-425"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}