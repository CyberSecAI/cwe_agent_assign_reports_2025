{
  "query": "In the Linux kernel, the following vulnerability has been resolved fuse revert back to __readahead_folio() for readahead In commit 3eab9d7bc2f4 (fuse convert readahead to use folios), the logic was converted to using the new folio readahead code, which drops the reference on the folio once it is locked, using an inferred reference on the folio. Previously we held a reference on the folio for the entire duration of the readpages call. This is fine, however for the case for splice pipe responses where we will remove the old folio and splice in the new folio (see fuse_try_move_page()), we assume that there is a reference held on the folio for ap->folios, which is no longer the case. To fix this, revert back to __readahead_folio() which allows us to hold the reference on the folio for the duration of readpages until either we drop the reference ourselves in fuse_readpages_end() or the reference is dropped after its replaced in the page cache in the splice case. This will fix the UAF bug that was reported.",
  "count": 20,
  "results": [
    {
      "cwe_id": "364",
      "name": "Signal Handler Race Condition",
      "abstraction": "base",
      "score": 2.8651999999999997,
      "original_score": 2.8651999999999997,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "787",
      "name": "Out-of-bounds Write",
      "abstraction": "base",
      "score": 2.7196000000000002,
      "original_score": 2.7196000000000002,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "123",
      "name": "Write-what-where Condition",
      "abstraction": "base",
      "score": 2.7014000000000005,
      "original_score": 2.7014000000000005,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "120",
      "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
      "abstraction": "base",
      "score": 2.7014000000000005,
      "original_score": 2.7014000000000005,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "824",
      "name": "Access of Uninitialized Pointer",
      "abstraction": "base",
      "score": 2.3295999999999997,
      "original_score": 2.3295999999999997,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "772",
      "name": "Missing Release of Resource after Effective Lifetime",
      "abstraction": "base",
      "score": 2.2100000000000004,
      "original_score": 2.2100000000000004,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "390",
      "name": "Detection of Error Condition Without Action",
      "abstraction": "base",
      "score": 2.2100000000000004,
      "original_score": 2.2100000000000004,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1265",
      "name": "Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls",
      "abstraction": "base",
      "score": 2.2100000000000004,
      "original_score": 2.2100000000000004,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "839",
      "name": "Numeric Range Comparison Without Minimum Check",
      "abstraction": "base",
      "score": 2.2100000000000004,
      "original_score": 2.2100000000000004,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "456",
      "name": "Missing Initialization of a Variable",
      "abstraction": "variant",
      "score": 2.1936,
      "original_score": 2.1936,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "415",
      "name": "Double Free",
      "abstraction": "variant",
      "score": 2.172,
      "original_score": 2.172,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "416",
      "name": "Use After Free",
      "abstraction": "Variant",
      "score": 2.119502488255347,
      "original_score": 2.119502488255347,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "639",
      "name": "Authorization Bypass Through User-Controlled Key",
      "abstraction": "base",
      "score": 2.1189999999999998,
      "original_score": 2.1189999999999998,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "590",
      "name": "Free of Memory not on the Heap",
      "abstraction": "variant",
      "score": 2.06592,
      "original_score": 2.06592,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "911",
      "name": "Improper Update of Reference Count",
      "abstraction": "Base",
      "score": 1.888121240368097,
      "original_score": 1.888121240368097,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "124",
      "name": "Buffer Underwrite ('Buffer Underflow')",
      "abstraction": "Base",
      "score": 1.7620855622483431,
      "original_score": 1.7620855622483431,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "abstraction": "Class",
      "score": 1.712243593492865,
      "original_score": 1.712243593492865,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "826",
      "name": "Premature Release of Resource During Expected Lifetime",
      "abstraction": "base",
      "score": 1.6848000000000003,
      "original_score": 1.6848000000000003,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "825",
      "name": "Expired Pointer Dereference",
      "abstraction": "base",
      "score": 1.6848000000000003,
      "original_score": 1.6848000000000003,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "562",
      "name": "Return of Stack Variable Address",
      "abstraction": "base",
      "score": 1.6848000000000003,
      "original_score": 1.6848000000000003,
      "mapping_usage": "Allowed"
    }
  ],
  "statistics": {
    "min": 1.6848000000000003,
    "max": 2.8651999999999997,
    "mean": 2.1622036442182333,
    "median": 2.1828000000000003,
    "count": 20
  }
}