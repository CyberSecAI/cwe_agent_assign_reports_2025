{
  "query": "In the Linux kernel, the following vulnerability has been resolved KVM Use dedicated mutex to protect kvm_usage_count to avoid deadlock Use a dedicated mutex to guard kvm_usage_count to fix a potential deadlock on x86 due to a chain of locks and SRCU synchronizations. Translating the below lockdep splat, CPU1 #6 will wait on CPU0 #1, CPU0 #8 will wait on CPU2 #3, and CPU2 #7 will wait on CPU1 #4 (if theres a writer, due to the fairness of r/w semaphores). CPU0 CPU1 CPU2 1 lock(&kvm->slots_lock) 2 lock(&vcpu->mutex) 3 lock(&kvm->srcu) 4 lock(cpu_hotplug_lock) 5 lock(kvm_lock) 6 lock(&kvm->slots_lock) 7 lock(cpu_hotplug_lock) 8 sync(&kvm->srcu) Note, there are likely more potential deadlocks in KVM x86, e.g. the same pattern of taking cpu_hotplug_lock outside of kvm_lock likely exists with __kvmclock_cpufreq_notifier() cpuhp_cpufreq_online() | -> cpufreq_online() | -> cpufreq_gov_performance_limits() | -> __cpufreq_driver_target() | -> __target_index() | -> cpufreq_freq_transition_begin() | -> cpufreq_notify_transition() | -> .",
  "count": 11,
  "results": [
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "abstraction": "Class",
      "score": 701.7118740311334,
      "original_score": 701.7118740311334,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "833",
      "name": "Deadlock",
      "abstraction": "Base",
      "score": 581.7539500419464,
      "original_score": 581.7539500419464,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "412",
      "name": "Unrestricted Externally Accessible Lock",
      "abstraction": "Base",
      "score": 579.3296560387303,
      "original_score": 579.3296560387303,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "764",
      "name": "Multiple Locks of a Critical Resource",
      "abstraction": "Base",
      "score": 562.4021028930238,
      "original_score": 562.4021028930238,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "765",
      "name": "Multiple Unlocks of a Critical Resource",
      "abstraction": "Base",
      "score": 549.5701809362024,
      "original_score": 549.5701809362024,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "abstraction": "Class",
      "score": 547.5844266416266,
      "original_score": 547.5844266416266,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "abstraction": "Base",
      "score": 540.1886420730538,
      "original_score": 540.1886420730538,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "125",
      "name": "Out-of-bounds Read",
      "abstraction": "Base",
      "score": 535.9018171954356,
      "original_score": 535.9018171954356,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1390",
      "name": "Weak Authentication",
      "abstraction": "Class",
      "score": 516.8040564762794,
      "original_score": 516.8040564762794,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "319",
      "name": "Cleartext Transmission of Sensitive Information",
      "abstraction": "Base",
      "score": 501.48927488738,
      "original_score": 501.48927488738,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "663",
      "name": "Use of a Non-reentrant Function in a Concurrent Context",
      "abstraction": "Base",
      "score": 489.11116294786746,
      "original_score": 489.11116294786746,
      "mapping_usage": "Allowed"
    }
  ],
  "statistics": {
    "min": 489.11116294786746,
    "max": 701.7118740311334,
    "mean": 555.077013105698,
    "median": 547.5844266416266,
    "count": 11
  }
}