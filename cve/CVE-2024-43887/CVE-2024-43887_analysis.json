{
  "cve_id": "CVE-2024-43887",
  "description": "In the Linux kernel, the following vulnerability has been resolved net/tcp Disable TCP-AO static key after RCU grace period The lifetime of TCP-AO static_key is the same as the last tcp_ao_info. On the socket destruction tcp_ao_info ceases to be with RCU grace period, while tcp-ao static branch is currently deferred destructed. The static key definition is DEFINE_STATIC_KEY_DEFERRED_FALSE(tcp_ao_needed, HZ) which means that if RCU grace period is delayed by more than a second and tcp_ao_needed is in the process of disablement, other CPUs may yet see tcp_ao_info which atent dead, but soon-to-be. And that breaks the assumption of static_key_fast_inc_not_disabled(). See the comment near the definition > * The caller must make sure that the static key cant get disabled while > * in this function. It doesnt patch jump labels, only adds a user to > * an already enabled static key. Originally it was introduced in commit eb8c507296f6 (jump_label Prevent key->enabled int **overflow**), which is needed for the atomic contexts, one of which would be the creation of a full socket from a request socket. In that atomic context, its known by the presence of the key (md5/ao) that the static branch is already enabled. So, the ref counter for that static branch is just incremented instead of holding the proper mutex. static_key_fast_inc_not_disabled() is just a helper for such usage case. But it must not be used if the static branch could get disabled in parallel as its not prote",
  "key_phrases": {
    "rootcause": "improper use of static key",
    "weakness": "overflow",
    "impact": "use-after-free",
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": "net/tcp"
  },
  "reference_content": "The provided content describes a fix for a race condition in the Linux kernel's TCP-AO (TCP Authentication Option) implementation. The vulnerability occurs due to incorrect handling of a static key used to track whether TCP-AO is needed.\n\n**Root Cause:**\n\nThe root cause lies in the deferred destruction of the TCP-AO static key (`tcp_ao_needed`) combined with the usage of `static_key_fast_inc_not_disabled()`. The static key's lifetime is tied to the last `tcp_ao_info` structure. When a socket is destroyed, `tcp_ao_info` is freed after an RCU grace period, but the static key was being deferred destructed which could lead to a race. If the RCU grace period is delayed and the static key is being disabled, other CPUs might still see a soon-to-be-dead `tcp_ao_info`. This breaks the assumption of `static_key_fast_inc_not_disabled()`, which expects the key to not be disabled while it is in use.\n\n**Weaknesses/Vulnerabilities:**\n\n- **Race Condition:** A race condition exists between the disabling of the static key and its use in `static_key_fast_inc_not_disabled()`.\n- **Incorrect Usage of `static_key_fast_inc_not_disabled()`:** This function was used in a context where the static branch could be disabled concurrently, violating its intended use.\n- **Lack of Protection:** The static branch increment in `static_key_fast_inc_not_disabled()` was not protected by `jump_label_mutex`, leading to races with `jump_label_update()`.\n\n**Impact of Exploitation:**\n\n- **Kernel Panic/Bug:** The race condition can lead to a kernel panic due to an invalid opcode, as seen in the provided logs.\n- **System Instability:** The system can become unstable due to the kernel bug and may require a reboot.\n\n**Attack Vectors:**\n\n- The vulnerability is triggered during socket destruction when TCP-AO is enabled.\n- The specific trigger is related to timing in the RCU grace period when the static key is being disabled.\n- The vulnerability was triggered in a netdev test-bot environment.\n\n**Required Attacker Capabilities/Position:**\n\n- The attacker would need to have the ability to establish a TCP connection with TCP-AO enabled.\n- Triggering the vulnerability involves manipulating the timing of socket creation and destruction, along with the RCU grace period, which is more likely to occur under heavy load and specific timing conditions.\n\n**Fix:**\n\nThe fix involves moving the static branch decrement inside the RCU callback after the `tcp_ao_info` is freed and also adding a call to a function to handle the freeing of socket memory associated with TCP-AO.\n\n**Additional Details:**\n\n- The original commit that introduced the problematic code is `67fa83f7c86a (\"net/tcp: Add static_key for TCP-AO\")`.\n- The fix is also intended for stable kernel branches.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| **CWE-362** | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.9 | Class | Primary | Allowed-with-Review |\n| CWE-367 | Time-of-check Time-of-use (TOCTOU) Race Condition | 0.7 | Base | Secondary | Allowed |\n| CWE-911 | Improper Update of Reference Count | 0.6 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary CWE is CWE-362, which is a Class-level CWE. A more specific Base-level CWE related to race conditions is CWE-367, a Time-of-check Time-of-use (TOCTOU) Race Condition. While TOCTOU captures part of the problem, the vulnerability involves a more general race condition related to the enabling/disabling of a static key and the use of `static_key_fast_inc_not_disabled()`. CWE-911 is included as a possible secondary CWE because the incorrect management of the static key can be interpreted as an improper update of a reference count.\n\n```mermaid\ngraph TD\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    cwe367[\"CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\"]\n    cwe911[\"CWE-911: Improper Update of Reference Count\"]\n\n    cwe367 -->|CHILDOF| cwe362\n    cwe911 -->|PEEROF| cwe362\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe362 primary\n    class cwe367,cwe911 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **improper use of a static key** within the TCP-AO implementation. This leads to a **race condition** during socket destruction due to the deferred destruction of the static key. The race condition breaks the assumption of `static_key_fast_inc_not_disabled()`, potentially leading to a use-after-free condition and a kernel panic.\n\n## Summary of Analysis\nThe primary weakness is a race condition that arises from the improper management of a static key in the Linux kernel's TCP-AO implementation. The evidence supports mapping this to CWE-362 (Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')). Although the description also mentions an **overflow**, the root cause is the race condition, not the overflow itself. The retriever results also suggest CWE-190 (Integer Overflow or Wraparound), but this is misleading; the vulnerability is not directly related to an integer overflow in the classic sense.\n\nThe evidence for CWE-362 is derived from the following key phrases:\n*   \"RCU grace period is delayed by more than a second and tcp_ao_needed is in the process of disablement, other CPUs may yet see tcp_ao_info which atent dead, but soon-to-be.\"\n*   \"And that breaks the assumption of static_key_fast_inc_not_disabled().\"\n*   \"But it must not be used if the static branch could get disabled in parallel as its not prote\"\n\nThe selection of CWE-362 is at the Class level because it accurately represents the generic concurrent execution problem. While a more specific CWE like CWE-367 (TOCTOU) is considered, it does not fully capture the nature of the race condition. CWE-911 is included because the incorrect handling can be viewed as an improper update to a reference count.\n\nOther CWEs considered but not used:\n\n*   CWE-190 (Integer Overflow or Wraparound): While the description mentions \"overflow,\" it is in the context of a comment about a previous fix and is not the direct cause of the vulnerability described.\n*   CWE-119 (Improper Restriction of Operations within the Bounds of a Memory Buffer): This is too generic and does not accurately reflect the root cause of the vulnerability.\n*   CWE-120 (Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')): This is not relevant as the vulnerability is not related to a buffer copy operation.\n*   CWE-321 (Use of Hard-coded Cryptographic Key), CWE-1204 (Generation of Weak Initialization Vector (IV)), CWE-1391 (Use of Weak Credentials), CWE-639 (Authorization Bypass Through User-Controlled Key), and CWE-327 (Use of a Broken or Risky Cryptographic Algorithm): These are all related to cryptographic issues, which are not relevant to the vulnerability described.\n*   CWE-259 (Use of Hard-coded Password): This is not relevant as the vulnerability is not related to the use of a hard-coded password.\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-755: Improper Handling of Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not handle or incorrectly handles an exceptional condition.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n## CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-824: Access of Uninitialized Pointer\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product accesses or uses a pointer that has not been initialized.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-131: Incorrect Calculation of Buffer Size\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-191: Integer Underflow (Wrap or Wraparound)\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-754: Improper Check for Unusual or Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- R",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| **CWE-362** | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.9 | Class | Primary | Allowed-with-Review |\n| CWE-367 | Time-of-check Time-of-use (TOCTOU) Race Condition | 0.7 | Base | Secondary | Allowed |\n| CWE-911 | Improper Update of Reference Count | 0.6 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary CWE is CWE-362, which is a Class-level CWE. A more specific Base-level CWE related to race conditions is CWE-367, a Time-of-check Time-of-use (TOCTOU) Race Condition. While TOCTOU captures part of the problem, the vulnerability involves a more general race condition related to the enabling/disabling of a static key and the use of `static_key_fast_inc_not_disabled()`. CWE-911 is included as a possible secondary CWE because the incorrect management of the static key can be interpreted as an improper update of a reference count.\n\n```mermaid\ngraph TD\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    cwe367[\"CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\"]\n    cwe911[\"CWE-911: Improper Update of Reference Count\"]\n\n    cwe367 -->|CHILDOF| cwe362\n    cwe911 -->|PEEROF| cwe362\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe362 primary\n    class cwe367,cwe911 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **improper use of a static key** within the TCP-AO implementation. This leads to a **race condition** during socket destruction due to the deferred destruction of the static key. The race condition breaks the assumption of `static_key_fast_inc_not_disabled()`, potentially leading to a use-after-free condition and a kernel panic.\n\n## Summary of Analysis\nThe primary weakness is a race condition that arises from the improper management of a static key in the Linux kernel's TCP-AO implementation. The evidence supports mapping this to CWE-362 (Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')). Although the description also mentions an **overflow**, the root cause is the race condition, not the overflow itself. The retriever results also suggest CWE-190 (Integer Overflow or Wraparound), but this is misleading; the vulnerability is not directly related to an integer overflow in the classic sense.\n\nThe evidence for CWE-362 is derived from the following key phrases:\n*   \"RCU grace period is delayed by more than a second and tcp_ao_needed is in the process of disablement, other CPUs may yet see tcp_ao_info which atent dead, but soon-to-be.\"\n*   \"And that breaks the assumption of static_key_fast_inc_not_disabled().\"\n*   \"But it must not be used if the static branch could get disabled in parallel as its not prote\"\n\nThe selection of CWE-362 is at the Class level because it accurately represents the generic concurrent execution problem. While a more specific CWE like CWE-367 (TOCTOU) is considered, it does not fully capture the nature of the race condition. CWE-911 is included because the incorrect handling can be viewed as an improper update to a reference count.\n\nOther CWEs considered but not used:\n\n*   CWE-190 (Integer Overflow or Wraparound): While the description mentions \"overflow,\" it is in the context of a comment about a previous fix and is not the direct cause of the vulnerability described.\n*   CWE-119 (Improper Restriction of Operations within the Bounds of a Memory Buffer): This is too generic and does not accurately reflect the root cause of the vulnerability.\n*   CWE-120 (Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')): This is not relevant as the vulnerability is not related to a buffer copy operation.\n*   CWE-321 (Use of Hard-coded Cryptographic Key), CWE-1204 (Generation of Weak Initialization Vector (IV)), CWE-1391 (Use of Weak Credentials), CWE-639 (Authorization Bypass Through User-Controlled Key), and CWE-327 (Use of a Broken or Risky Cryptographic Algorithm): These are all related to cryptographic issues, which are not relevant to the vulnerability described.\n*   CWE-259 (Use of Hard-coded Password): This is not relevant as the vulnerability is not related to the use of a hard-coded password.\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-755: Improper Handling of Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not handle or incorrectly handles an exceptional condition.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n## CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-824: Access of Uninitialized Pointer\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product accesses or uses a pointer that has not been initialized.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-131: Incorrect Calculation of Buffer Size\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-191: Integer Underflow (Wrap or Wraparound)\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-754: Improper Check for Unusual or Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- R\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-321:**\n- 321 (Use of Hard-coded Cryptographic Key) - ROOT\n\n\n**Chain starting from CWE-911:**\n- 911 (Improper Update of Reference Count) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "190",
        "name": "Integer Overflow or Wraparound",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Overflow",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "119",
        "name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Buffer Overflow",
        "match_reason": "phrase_in_term_whole_phrase"
      },
      "similarity": 700.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "120",
        "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Classic Buffer Overflow",
        "match_reason": "phrase_in_term_whole_phrase"
      },
      "similarity": 700.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "321",
        "name": "Use of Hard-coded Cryptographic Key",
        "source": "sparse"
      },
      "similarity": 1179.832743943562
    },
    {
      "metadata": {
        "doc_id": "1204",
        "name": "Generation of Weak Initialization Vector (IV)",
        "source": "sparse"
      },
      "similarity": 1175.5223349749735
    },
    {
      "metadata": {
        "doc_id": "1391",
        "name": "Use of Weak Credentials",
        "source": "sparse"
      },
      "similarity": 1167.6684134803918
    },
    {
      "metadata": {
        "doc_id": "639",
        "name": "Authorization Bypass Through User-Controlled Key",
        "source": "sparse"
      },
      "similarity": 1150.29338731353
    },
    {
      "metadata": {
        "doc_id": "327",
        "name": "Use of a Broken or Risky Cryptographic Algorithm",
        "source": "sparse"
      },
      "similarity": 1141.249933586768
    },
    {
      "metadata": {
        "doc_id": "911",
        "name": "Improper Update of Reference Count",
        "type": "Base",
        "original_content": "The product uses a reference count to manage a resource, but it does not update or incorrectly updates the reference count.",
        "keyphrase_source": "weakness:overflow",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.43599423264352655,
            "graph": 1.4628136653312331
          }
        }
      },
      "similarity": 0.43599423264352655
    },
    {
      "doc_id": "259",
      "text": "CWE-259: Use of Hard-coded Password",
      "score": 2.68272,
      "metadata": {
        "doc_id": "259",
        "name": "Use of Hard-coded Password",
        "type": "variant",
        "original_content": "CWE-259: Use of Hard-coded Password",
        "relationships": [
          {
            "source_id": "259",
            "target_id": "656",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "259",
            "target_id": "257",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "259",
            "target_id": "321",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "259",
            "target_id": "798",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1340"
            }
          },
          {
            "source_id": "259",
            "target_id": "798",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1305"
            }
          },
          {
            "source_id": "259",
            "target_id": "798",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "798",
            "target_id": "259",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "656",
            "target_id": "259",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "257",
            "target_id": "259",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 0.7,
          "abstraction_path": 0.6080000000000001,
          "sequence_path": 0.8,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.2,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "259",
                  "321",
                  "PEEROF"
                ]
              ],
              "score": 0.7,
              "type": "relationship_chain",
              "source": "321"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "1391",
                  "798",
                  "PARENTOF"
                ],
                [
                  "798",
                  "259",
                  "PARENTOF"
                ]
              ],
              "score": 0.6080000000000001,
              "type": "abstraction_path_down",
              "source": "1391"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "321",
                  "656",
                  "CANFOLLOW"
                ],
                [
                  "656",
                  "259",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "vulnerability_sequence_forward",
              "source": "321"
            },
            "peer_relationship": {
              "path": [
                [
                  "259",
                  "321",
                  "PEEROF"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "321"
            }
          }
        },
        "abstraction_level": "variant",
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.68272
          }
        }
      },
      "similarity": 2.68272
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-321",
      "CWE-911",
      "CWE-327",
      "CWE-639",
      "CWE-131",
      "CWE-667",
      "CWE-191",
      "CWE-190",
      "CWE-1204",
      "CWE-362",
      "CWE-120",
      "CWE-755",
      "CWE-1391",
      "CWE-824",
      "CWE-119",
      "CWE-259",
      "CWE-367",
      "CWE-754"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}