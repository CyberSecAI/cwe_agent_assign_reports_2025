{
  "cve_id": "CVE-2024-40518",
  "description": "SeaCMS 12.9 has a remote code execution vulnerability. The vulnerability is caused by admin_weixin.php **directly splicing and writing the user input data into weixin.php without processing it**, which allows authenticated attackers to exploit the vulnerability to execute arbitrary commands and obtain system permissions.",
  "key_phrases": {
    "rootcause": "directly splicing and writing the user input data into weixin.php without processing it",
    "weakness": "",
    "impact": [
      "execute arbitrary commands",
      "obtain system permissions",
      "remote code execution"
    ],
    "vector": "",
    "attacker": "authenticated attackers",
    "product": "SeaCMS",
    "version": "12.9",
    "component": "admin_weixin.php"
  },
  "reference_content": "Based on the provided content, here's the breakdown of the vulnerability:\n\n**Root Cause:**\nThe vulnerability stems from the `admin_weixin.php` file in SeaCMS 12.9. This file directly concatenates user-supplied input into the `weixin.php` file without any sanitization or filtering.\n\n**Weaknesses/Vulnerabilities:**\n- **Remote Code Execution (RCE):** The primary vulnerability is RCE due to the lack of input sanitization, allowing attackers to inject arbitrary code.\n- **Code Injection:** User-controlled data is directly written into a PHP file, enabling code injection.\n\n**Impact of Exploitation:**\n- **Arbitrary Command Execution:** An attacker can execute arbitrary commands on the server.\n- **System Compromise:** Successful exploitation can lead to full system compromise, potentially granting complete control over the server to the attacker.\n\n**Attack Vectors:**\n- **HTTP POST Request:** The attacker sends a crafted HTTP POST request to the vulnerable `admin_weixin.php` endpoint with the `action=set` parameter.\n- **Malicious Input:** The malicious code is embedded within the POST data, specifically within the `msg1a` parameter.\n\n**Required Attacker Capabilities/Position:**\n- **Authentication:** The attacker needs to be authenticated as an administrator to access the vulnerable functionality.\n- **Network Access:** The attacker needs network access to the server running the vulnerable SeaCMS installation.\n- **Knowledge of the vulnerable parameter:** The attacker needs to know to exploit the `msg1a` parameter in `admin_weixin.php`.\n\n**Technical Details:**\n- The provided exploit code demonstrates how an attacker can inject PHP code using the `msg1a` parameter.\n- The injected code `\");system('whoami');//` will be executed by the PHP interpreter, in this example the `whoami` command.\n- The attack is performed via a crafted HTTP POST request with the injected code within the request body.\n\n**Additional Notes**\n- The provided content includes a download link to the vulnerable software.\n- The analysis includes screenshots of the vulnerable code snippet, highlighting the lack of sanitization.\n- The provided content demonstrates a specific method of exploitation, but other methods may exist.\n\nThis information provides a clear picture of the RCE vulnerability in SeaCMS 12.9.",
  "similar_info": {
    "cwe_distribution": {
      "95": {
        "cwe_counts": {
          "CWE-NVD-noinfo": 1
        },
        "total_samples": 1,
        "distribution": [
          {
            "cwes": [
              "CWE-NVD-noinfo"
            ],
            "frequency": 1,
            "proportion": 1.0
          }
        ]
      },
      "90": {
        "cwe_counts": {
          "CWE-NVD-noinfo": 2
        },
        "total_samples": 2,
        "distribution": [
          {
            "cwes": [
              "CWE-NVD-noinfo"
            ],
            "frequency": 2,
            "proportion": 1.0
          }
        ]
      },
      "85": {
        "cwe_counts": {
          "CWE-NVD-noinfo": 2
        },
        "total_samples": 2,
        "distribution": [
          {
            "cwes": [
              "CWE-NVD-noinfo"
            ],
            "frequency": 2,
            "proportion": 1.0
          }
        ]
      },
      "80": {
        "cwe_counts": {
          "CWE-NVD-noinfo": 2
        },
        "total_samples": 2,
        "distribution": [
          {
            "cwes": [
              "CWE-NVD-noinfo"
            ],
            "frequency": 2,
            "proportion": 1.0
          }
        ]
      },
      "75": {
        "cwe_counts": {
          "CWE-NVD-noinfo": 2
        },
        "total_samples": 2,
        "distribution": [
          {
            "cwes": [
              "CWE-NVD-noinfo"
            ],
            "frequency": 2,
            "proportion": 1.0
          }
        ]
      },
      "70": {
        "cwe_counts": {
          "CWE-NVD-noinfo": 3
        },
        "total_samples": 5,
        "distribution": [
          {
            "cwes": [
              "CWE-NVD-noinfo"
            ],
            "frequency": 3,
            "proportion": 0.6
          },
          {
            "cwes": [],
            "frequency": 2,
            "proportion": 0.4
          }
        ]
      }
    },
    "cwe_consensus": "CWE-NVD-noinfo",
    "similarity_stats": {
      "thresholds": [
        95,
        90,
        85,
        80,
        75,
        70
      ],
      "total_samples_by_threshold": {
        "95": 1,
        "90": 2,
        "85": 2,
        "80": 2,
        "75": 2,
        "70": 5
      },
      "top_cwes_by_threshold": {
        "95": [
          [
            "CWE-NVD-noinfo",
            1
          ]
        ],
        "90": [
          [
            "CWE-NVD-noinfo",
            2
          ]
        ],
        "85": [
          [
            "CWE-NVD-noinfo",
            2
          ]
        ],
        "80": [
          [
            "CWE-NVD-noinfo",
            2
          ]
        ],
        "75": [
          [
            "CWE-NVD-noinfo",
            2
          ]
        ],
        "70": [
          [
            "CWE-NVD-noinfo",
            3
          ]
        ]
      }
    },
    "raw_matches": [
      {
        "similarity": 95,
        "cwes": [
          "NVD-noinfo"
        ],
        "total": 1,
        "frequency": 1,
        "proportion": 1.0
      },
      {
        "similarity": 90,
        "cwes": [
          "NVD-noinfo"
        ],
        "total": 2,
        "frequency": 2,
        "proportion": 1.0
      },
      {
        "similarity": 85,
        "cwes": [
          "NVD-noinfo"
        ],
        "total": 2,
        "frequency": 2,
        "proportion": 1.0
      },
      {
        "similarity": 80,
        "cwes": [
          "NVD-noinfo"
        ],
        "total": 2,
        "frequency": 2,
        "proportion": 1.0
      },
      {
        "similarity": 75,
        "cwes": [
          "NVD-noinfo"
        ],
        "total": 2,
        "frequency": 2,
        "proportion": 1.0
      },
      {
        "similarity": 70,
        "cwes": [
          "NVD-noinfo"
        ],
        "total": 5,
        "frequency": 3,
        "proportion": 0.6
      },
      {
        "similarity": 70,
        "cwes": [],
        "total": 5,
        "frequency": 2,
        "proportion": 0.4
      }
    ]
  },
  "similarity_summary": {
    "consensus_cwe": "CWE-NVD-noinfo",
    "top_cwes": [
      [
        "CWE-NVD-noinfo",
        12
      ]
    ],
    "confidence_levels": {
      "high": [],
      "medium": [],
      "low": []
    },
    "total_samples": 14
  },
  "analysis": "# Summary\n| CWE ID    | CWE Name                                                                           | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :--------------------------------------------------------------------------------- | :--------- | :-------------------- | :------------------------------ | :------------------------------ |\n| CWE-96    | Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') | 0.9        | Base                  | Primary CWE                   | Allowed                         |\n| CWE-78    | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | 0.7        | Base                  | Secondary Candidate           | Allowed                         |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-96 Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection'). It is a base level CWE. The vulnerability involves directly splicing user input into a PHP file without proper sanitization, leading to code injection. CWE-78 Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') is a secondary candidate, representing the potential for OS command injection as a result of the code injection. CWE-78 is a child of CWE-77 and CWE-74 and can also be a peer of CWE-88.\n\n```mermaid\ngraph TD\n    cwe96[\"CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')\"]\n    cwe78[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"]\n    cwe77[\"CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n    cwe88[\"CWE-88: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')\"]\n\n    cwe78 -->|CHILDOF| cwe77\n    cwe78 -->|CHILDOF| cwe74\n    cwe78 --|CANALSOBE| cwe88\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe96 primary\n    class cwe78 secondary\n    class cwe77,cwe74,cwe88 tertiary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **improper handling of user input** in `admin_weixin.php`, where data is **directly spliced and written into weixin.php without processing it**. This leads to **static code injection**, allowing an attacker to inject arbitrary code into the `weixin.php` file. This can then lead to **remote code execution** and potentially **OS command injection**.\n\n## Summary of Analysis\nThe primary weakness is CWE-96, as the user input is directly injected into a statically saved code file. The evidence for this is strong, as the vulnerability description explicitly states that the root cause is the **\"directly splicing and writing the user input data into weixin.php without processing it\"**. This allows for arbitrary code execution, which is confirmed by the CVE Reference Links Content Summary.\n\nCWE-78 is considered as a secondary weakness, as the injected code can be used to execute OS commands. This is a potential impact of the code injection.\n\nThe retriever results also suggested other CWEs such as CWE-94, CWE-89, CWE-88, and CWE-434, but these are not as directly relevant to the root cause as CWE-96. CWE-94 is similar but less specific as the code is statically saved. CWE-89 and CWE-88 are related to SQL and argument injections respectively, which are not the primary attack vectors in this case. CWE-434 is about unrestricted file uploads, which is not the case here.\n\nThe selection of CWE-96 is at the optimal level of specificity, as it directly addresses the root cause of the vulnerability, which is the injection of code into a statically saved file.",
  "analysis_with_relationships": "# Summary\n| CWE ID    | CWE Name                                                                           | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :--------------------------------------------------------------------------------- | :--------- | :-------------------- | :------------------------------ | :------------------------------ |\n| CWE-96    | Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') | 0.9        | Base                  | Primary CWE                   | Allowed                         |\n| CWE-78    | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | 0.7        | Base                  | Secondary Candidate           | Allowed                         |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-96 Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection'). It is a base level CWE. The vulnerability involves directly splicing user input into a PHP file without proper sanitization, leading to code injection. CWE-78 Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') is a secondary candidate, representing the potential for OS command injection as a result of the code injection. CWE-78 is a child of CWE-77 and CWE-74 and can also be a peer of CWE-88.\n\n```mermaid\ngraph TD\n    cwe96[\"CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')\"]\n    cwe78[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"]\n    cwe77[\"CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n    cwe88[\"CWE-88: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')\"]\n\n    cwe78 -->|CHILDOF| cwe77\n    cwe78 -->|CHILDOF| cwe74\n    cwe78 --|CANALSOBE| cwe88\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe96 primary\n    class cwe78 secondary\n    class cwe77,cwe74,cwe88 tertiary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **improper handling of user input** in `admin_weixin.php`, where data is **directly spliced and written into weixin.php without processing it**. This leads to **static code injection**, allowing an attacker to inject arbitrary code into the `weixin.php` file. This can then lead to **remote code execution** and potentially **OS command injection**.\n\n## Summary of Analysis\nThe primary weakness is CWE-96, as the user input is directly injected into a statically saved code file. The evidence for this is strong, as the vulnerability description explicitly states that the root cause is the **\"directly splicing and writing the user input data into weixin.php without processing it\"**. This allows for arbitrary code execution, which is confirmed by the CVE Reference Links Content Summary.\n\nCWE-78 is considered as a secondary weakness, as the injected code can be used to execute OS commands. This is a potential impact of the code injection.\n\nThe retriever results also suggested other CWEs such as CWE-94, CWE-89, CWE-88, and CWE-434, but these are not as directly relevant to the root cause as CWE-96. CWE-94 is similar but less specific as the code is statically saved. CWE-89 and CWE-88 are related to SQL and argument injections respectively, which are not the primary attack vectors in this case. CWE-434 is about unrestricted file uploads, which is not the case here.\n\nThe selection of CWE-96 is at the optimal level of specificity, as it directly addresses the root cause of the vulnerability, which is the injection of code into a statically saved file.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-89:**\n- 89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')) - ROOT\n\n\n**Chain starting from CWE-94:**\n- 94 (Improper Control of Generation of Code ('Code Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "96",
        "name": "Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')",
        "source": "sparse"
      },
      "similarity": 306.8650235380422
    },
    {
      "metadata": {
        "doc_id": "94",
        "name": "Improper Control of Generation of Code ('Code Injection')",
        "source": "sparse"
      },
      "similarity": 279.0773895102076
    },
    {
      "metadata": {
        "doc_id": "138",
        "name": "Improper Neutralization of Special Elements",
        "source": "sparse"
      },
      "similarity": 278.8172287539831
    },
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "sparse"
      },
      "similarity": 274.2590088271163
    },
    {
      "metadata": {
        "doc_id": "88",
        "name": "Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
        "source": "sparse"
      },
      "similarity": 270.1606162680437
    },
    {
      "metadata": {
        "doc_id": "78",
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "source": "sparse"
      },
      "similarity": 270.023917546197
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "source": "sparse"
      },
      "similarity": 269.74232014513666
    },
    {
      "metadata": {
        "doc_id": "502",
        "name": "Deserialization of Untrusted Data",
        "source": "sparse"
      },
      "similarity": 269.3993673455798
    },
    {
      "metadata": {
        "doc_id": "425",
        "name": "Direct Request ('Forced Browsing')",
        "type": "Base",
        "original_content": "The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.",
        "keyphrase_source": "rootcause:directly splicing",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.6008709312985315,
            "graph": 2.5938216256455715
          }
        }
      },
      "similarity": 0.6008709312985315
    },
    {
      "doc_id": "471",
      "text": "CWE-471: Modification of Assumed-Immutable Data (MAID)",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "471",
        "name": "Modification of Assumed-Immutable Data (MAID)",
        "type": "base",
        "original_content": "CWE-471: Modification of Assumed-Immutable Data (MAID)",
        "relationships": [
          {
            "source_id": "471",
            "target_id": "621",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "607",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "602",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "473",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "472",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "425",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "291",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "1321",
            "label": "CANFOLLOW",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "1282",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "664",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "664",
            "target_id": "471",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "621",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "607",
            "target_id": "471",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "602",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "473",
            "target_id": "471",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "472",
            "target_id": "471",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "425",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "291",
            "target_id": "471",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1321",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1282",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "425",
                  "471",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "425"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "425",
                  "471",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_forward",
              "source": "425"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-89",
      "CWE-94",
      "CWE-88",
      "CWE-77",
      "CWE-74",
      "CWE-78",
      "CWE-96",
      "CWE-434"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}