{
  "retriever": "sparse",
  "query": "In the Linux kernel, the following vulnerability has been resolved bus mhi host pci_generic Use pci_try_reset_function() to avoid deadlock There are multiple places from where the recovery work gets scheduled asynchronously. Also, there are multiple places where the caller waits synchronously for the recovery to be completed. One such place is during the PM shutdown() callback. If the device is not alive during recovery_work, it will try to reset the device using pci_reset_function(). This function internally will take the device_lock() first before resetting the device. By this time, if the lock has already been acquired, then recovery_work will get stalled while waiting for the lock. And if the lock was already acquired by the caller which waits for the recovery_work to be completed, it will lead to deadlock. This is what happened on the X1E80100 CRD device when the device died before shutdown() callback. Driver core calls the drivers shutdown() callback while holding the device_lock() leading to deadlock. And this deadlock scenario can occur on other paths as well, like during the PM suspend() callback, where the driver core would hold the device_lock() before calling drivers suspend() callback. And if the recovery_work was already started, it could lead to deadlock. This is also observed on the X1E80100 CRD. So to fix both issues, use pci_try_reset_function() in recovery_work. This function first checks for the availability of the device_lock() before trying to reset the device. If the lock is available, it will acquire it and reset the device. Otherwise, it will return -EAGAIN. If that happens, recovery_work will fail with the error message Recovery failed as not much could be done.",
  "keyphrases": {
    "rootcause": [
      "device_lock() acquired before resetting the device"
    ],
    "weakness": [
      "deadlock"
    ]
  },
  "timestamp": "2025-07-12 09:59:12",
  "cve_id": "CVE-2025-21951",
  "result_count": 12,
  "results": [
    {
      "cwe_id": "833",
      "name": "Deadlock",
      "score": 1464.2551638617442,
      "search_source": "rootcause:device_lock() acquired before resetting the device"
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "score": 1406.893621657369,
      "search_source": "rootcause:device_lock() acquired before resetting the device"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 1302.6785383767578,
      "search_source": "rootcause:device_lock() acquired before resetting the device"
    },
    {
      "cwe_id": "1390",
      "name": "Weak Authentication",
      "score": 1285.7974826144978,
      "search_source": "rootcause:device_lock() acquired before resetting the device"
    },
    {
      "cwe_id": "863",
      "name": "Incorrect Authorization",
      "score": 1244.8584781989155,
      "search_source": "rootcause:device_lock() acquired before resetting the device"
    },
    {
      "cwe_id": "79",
      "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
      "score": 1234.404378488974,
      "search_source": "rootcause:device_lock() acquired before resetting the device"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 1230.274230440124,
      "search_source": "rootcause:device_lock() acquired before resetting the device"
    },
    {
      "cwe_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "score": 1229.4254841802463,
      "search_source": "rootcause:device_lock() acquired before resetting the device"
    },
    {
      "cwe_id": "306",
      "name": "Missing Authentication for Critical Function",
      "score": 1216.6705937886945,
      "search_source": "rootcause:device_lock() acquired before resetting the device"
    },
    {
      "cwe_id": "789",
      "name": "Memory Allocation with Excessive Size Value",
      "score": 1215.7659120513265,
      "search_source": "rootcause:device_lock() acquired before resetting the device"
    },
    {
      "cwe_id": "754",
      "name": "Improper Check for Unusual or Exceptional Conditions",
      "score": 1120.8443315761174,
      "search_source": "weakness:deadlock"
    },
    {
      "cwe_id": "459",
      "name": "Incomplete Cleanup",
      "score": 1118.1529884340946,
      "search_source": "weakness:deadlock"
    }
  ]
}