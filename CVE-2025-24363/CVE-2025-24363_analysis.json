{
  "cve_id": "CVE-2025-24363",
  "description": "The HL7 FHIR IG publisher is a tool to take a set of inputs and create a standard FHIR IG. Prior to version 1.8.9, in CI contexts, the IG Publisher CLI uses git commands to determine the URL of the originating repo. If the repo was cloned, or otherwise set to use a repo that uses a **username and credential based URL**, the entire URL will be included in the built Implementation Guide, exposing username and credential. This does not impact users that clone public repos without credentials, such as those using the auto-ig-build continuous integration infrastructure. This problem has been patched in release 1.8.9. Some workarounds are available. Users should ensure the IG repo they are publishing does not have username or credentials included in the `origin` URL. Running the command `git remote origin url` should return a URL that contains no username, password, or token or users should run the IG Publisher CLI with the `-repo` parameter and specify a URL that contains no username, password, or token.",
  "key_phrases": {
    "rootcause": "username and credential based URL",
    "weakness": "",
    "impact": "exposing username and credential",
    "vector": "git commands",
    "attacker": "",
    "product": "HL7 FHIR IG publisher",
    "version": "prior to version 1.8.9",
    "component": ""
  },
  "reference_content": "## CVE-2025-24363 Analysis\n\nThe provided content is directly related to CVE-2025-24363. It details a vulnerability in the HL7 FHIR IG Publisher, specifically regarding the potential exposure of GitHub credentials.\n\n**Root cause of vulnerability:**\n\nThe IG Publisher CLI uses git commands to determine the repository URL. If the repository was cloned using a URL containing a username and credential (e.g., `https://username:password@github.com/org/repo`), this entire URL, including the credentials, was included in the generated Implementation Guide (IG) and stored in database metadata.\n\n**Weaknesses/vulnerabilities present:**\n\n*   **Credential Exposure:** Storing credentials in plain text within the IG and database.\n*   **Insecure Git URL Handling:**  The application doesn't sanitize or redact credentials from the Git repository URL.\n\n**Impact of exploitation:**\n\nExposure of GitHub usernames and passwords/tokens, allowing unauthorized access to the repository.\n\n**Attack vectors:**\n\n*   CI/CD pipelines using repositories cloned with credential-based URLs.\n*   Any scenario where the IG Publisher CLI processes a repository with credentials in the `origin` URL.\n\n**Required attacker capabilities/position:**\n\n*   Access to the generated Implementation Guide (IG) or the database where metadata is stored.\n*   No specific privileges are required to *exploit* the vulnerability, only to *access* the exposed credentials.\n\n**Mitigation or fix:**\n\n*   **Update to version 1.8.9 or later:** This version includes a patch to prevent the inclusion of credentials in the IG and database.\n*   **Workaround 1:** Ensure the IG repository's `origin` URL does not contain usernames or credentials. Use `git remote origin url` to verify.\n*   **Workaround 2:** Use the `-repo` parameter with the IG Publisher CLI and specify a URL without credentials.\n\n**Additional Details (more than official CVE description):**\n\n*   The release notes specifically mention a bug fix related to removing credentials from repo source URLs in both JSON and database files.\n*   The commit message associated with the fix (`7e77066`) confirms the purpose of the change.\n*   The CVSS score is provided as Moderate (4.2/10) with a breakdown of the base metrics: AV:L/AC:L/PR:H/UI:R/S:U/C:H/I:N/A:N.\n*   The vulnerability was discovered by pat-ryan-health.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-201 | Insertion of Sensitive Information Into Sent Data | 0.9 | Base | Allowed | Primary CWE. The application transmits data (the git repo URL) that includes sensitive information (username and password) that should not be accessible. |\n| CWE-212 | Improper Removal of Sensitive Information Before Storage or Transfer | 0.7 | Base | Allowed | Secondary CWE. The application stores the sensitive URL in the generated Implementation Guide and database without properly removing the credentials. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-201 **Insertion of Sensitive Information Into Sent Data**. The secondary CWE is CWE-212 **Improper Removal of Sensitive Information Before Storage or Transfer**. CWE-212 can precede CWE-201, as the sensitive information must be present before it can be sent. Both CWEs are at the Base level of abstraction, which is preferred.\n\n```mermaid\ngraph TD\n    cwe201[\"CWE-201: Insertion of Sensitive Information Into Sent Data\"]\n    cwe212[\"CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer\"]\n\n    cwe212 -->|CANPRECEDE| cwe201\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe201 primary\n    class cwe212 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the use of a **username and credential based URL** in the git repository configuration. The HL7 FHIR IG Publisher then uses git commands to determine the repository URL. Due to the **username and credential based URL**, the entire URL, including credentials, is included in the generated Implementation Guide (**Insertion of Sensitive Information Into Sent Data**). This sensitive information is then stored in the database metadata (**Improper Removal of Sensitive Information Before Storage or Transfer**). The final impact is the exposure of usernames and passwords/tokens, allowing unauthorized access to the repository.\n\n## Summary of Analysis\nThe vulnerability lies in the HL7 FHIR IG Publisher including credentials in the generated output due to the use of git commands that retrieve the repository URL. The primary weakness is CWE-201, as the sensitive information is directly inserted into the sent data (the Implementation Guide). CWE-212 is a secondary weakness, as the sensitive information is stored without proper removal of the credentials. The evidence supports this classification, as the vulnerability description explicitly mentions the exposure of usernames and credentials due to the inclusion of the entire URL in the built Implementation Guide. The retriever results also support this, with CWE-201 being a top match. I am not overriding any mapping guidance, and the selected CWEs are at the optimal level of specificity.\n\nRelevant CWE Information:\n*   **CWE-201: Insertion of Sensitive Information Into Sent Data**: This CWE accurately describes the vulnerability, as the application transmits data (the git repo URL) that includes sensitive information (username and password) that should not be accessible.\n*   **CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer**: This CWE is also applicable because the application stores the sensitive URL in the generated Implementation Guide and database without properly removing the credentials.\n\nCWEs considered but not used:\n\n*   **CWE-88: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')**: While the vulnerability involves git commands, it's not directly related to argument injection. The issue is the exposure of credentials, not the manipulation of command arguments.\n*   **CWE-918: Server-Side Request Forgery (SSRF)**: This CWE is not relevant as there is no server-side request being forged.\n*   **CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')**: This CWE is not relevant because the vulnerability doesn't involve web page generation or cross-site scripting.\n*   **CWE-522: Insufficiently Protected Credentials**: This is related to credential management, but CWE-201 is more specific to the action of inserting the credentials into the data.\n*   **CWE-214: Invocation of Process Using Visible Sensitive Information**: While sensitive information is used in a process (git), the core issue is the insertion of this information into sent data, making CWE-201 a more appropriate fit.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-201 | Insertion of Sensitive Information Into Sent Data | 0.9 | Base | Allowed | Primary CWE. The application transmits data (the git repo URL) that includes sensitive information (username and password) that should not be accessible. |\n| CWE-212 | Improper Removal of Sensitive Information Before Storage or Transfer | 0.7 | Base | Allowed | Secondary CWE. The application stores the sensitive URL in the generated Implementation Guide and database without properly removing the credentials. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-201 **Insertion of Sensitive Information Into Sent Data**. The secondary CWE is CWE-212 **Improper Removal of Sensitive Information Before Storage or Transfer**. CWE-212 can precede CWE-201, as the sensitive information must be present before it can be sent. Both CWEs are at the Base level of abstraction, which is preferred.\n\n```mermaid\ngraph TD\n    cwe201[\"CWE-201: Insertion of Sensitive Information Into Sent Data\"]\n    cwe212[\"CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer\"]\n\n    cwe212 -->|CANPRECEDE| cwe201\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe201 primary\n    class cwe212 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the use of a **username and credential based URL** in the git repository configuration. The HL7 FHIR IG Publisher then uses git commands to determine the repository URL. Due to the **username and credential based URL**, the entire URL, including credentials, is included in the generated Implementation Guide (**Insertion of Sensitive Information Into Sent Data**). This sensitive information is then stored in the database metadata (**Improper Removal of Sensitive Information Before Storage or Transfer**). The final impact is the exposure of usernames and passwords/tokens, allowing unauthorized access to the repository.\n\n## Summary of Analysis\nThe vulnerability lies in the HL7 FHIR IG Publisher including credentials in the generated output due to the use of git commands that retrieve the repository URL. The primary weakness is CWE-201, as the sensitive information is directly inserted into the sent data (the Implementation Guide). CWE-212 is a secondary weakness, as the sensitive information is stored without proper removal of the credentials. The evidence supports this classification, as the vulnerability description explicitly mentions the exposure of usernames and credentials due to the inclusion of the entire URL in the built Implementation Guide. The retriever results also support this, with CWE-201 being a top match. I am not overriding any mapping guidance, and the selected CWEs are at the optimal level of specificity.\n\nRelevant CWE Information:\n*   **CWE-201: Insertion of Sensitive Information Into Sent Data**: This CWE accurately describes the vulnerability, as the application transmits data (the git repo URL) that includes sensitive information (username and password) that should not be accessible.\n*   **CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer**: This CWE is also applicable because the application stores the sensitive URL in the generated Implementation Guide and database without properly removing the credentials.\n\nCWEs considered but not used:\n\n*   **CWE-88: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')**: While the vulnerability involves git commands, it's not directly related to argument injection. The issue is the exposure of credentials, not the manipulation of command arguments.\n*   **CWE-918: Server-Side Request Forgery (SSRF)**: This CWE is not relevant as there is no server-side request being forged.\n*   **CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')**: This CWE is not relevant because the vulnerability doesn't involve web page generation or cross-site scripting.\n*   **CWE-522: Insufficiently Protected Credentials**: This is related to credential management, but CWE-201 is more specific to the action of inserting the credentials into the data.\n*   **CWE-214: Invocation of Process Using Visible Sensitive Information**: While sensitive information is used in a process (git), the core issue is the insertion of this information into sent data, making CWE-201 a more appropriate fit.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-88:**\n- 88 (Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')) - ROOT\n\n\n**Chain starting from CWE-79:**\n- 79 (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "88",
        "name": "Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
        "source": "sparse"
      },
      "similarity": 936.091013918458
    },
    {
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "source": "sparse"
      },
      "similarity": 928.3198725966848
    },
    {
      "metadata": {
        "doc_id": "918",
        "name": "Server-Side Request Forgery (SSRF)",
        "source": "sparse"
      },
      "similarity": 905.218168750654
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 889.1908581378832
    },
    {
      "metadata": {
        "doc_id": "923",
        "name": "Improper Restriction of Communication Channel to Intended Endpoints",
        "source": "sparse"
      },
      "similarity": 885.3277751365649
    },
    {
      "metadata": {
        "doc_id": "522",
        "name": "Insufficiently Protected Credentials",
        "source": "sparse"
      },
      "similarity": 878.3560713183367
    },
    {
      "metadata": {
        "doc_id": "287",
        "name": "Improper Authentication",
        "source": "sparse"
      },
      "similarity": 876.9071889258462
    },
    {
      "metadata": {
        "doc_id": "214",
        "name": "Invocation of Process Using Visible Sensitive Information",
        "source": "sparse"
      },
      "similarity": 876.7336223682994
    },
    {
      "doc_id": "322",
      "text": "CWE-322: Key Exchange without Entity Authentication",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "322",
        "name": "Key Exchange without Entity Authentication",
        "type": "base",
        "original_content": "CWE-322: Key Exchange without Entity Authentication",
        "relationships": [
          {
            "source_id": "322",
            "target_id": "295",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "322",
            "target_id": "923",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "322",
            "target_id": "306",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "923",
            "target_id": "322",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "306",
            "target_id": "322",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "295",
            "target_id": "322",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "923",
                  "322",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "923"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "923",
                  "322",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "923"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "322",
                  "923",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "923"
            }
          }
        },
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse_additional"
      },
      "similarity": 868.1400021667738
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-88",
      "CWE-79",
      "CWE-201",
      "CWE-522",
      "CWE-918",
      "CWE-214",
      "CWE-212"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}