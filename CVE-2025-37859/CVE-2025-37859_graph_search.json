{
  "retriever": "graph",
  "query": "In the Linux kernel, the following vulnerability has been resolved page_pool avoid infinite loop to schedule delayed worker We noticed the kworker in page_pool_release_retry() was waken up repeatedly and infinitely in production because of the buggy driver causing the inflight less than 0 and warning us in page_pool_inflight()[1]. Since the inflight value goes negative, it means we should not expect the whole page_pool to get back to work normally. This patch mitigates the adverse effect by not rescheduling the kworker when detecting the inflight negative in page_pool_release_retry(). [1] [Mon Feb 10 203611 2025] ------------[ cut here ]------------ [Mon Feb 10 203611 2025] Negative(-51446) inflight packet-pages ... [Mon Feb 10 203611 2025] Call Trace [Mon Feb 10 203611 2025] page_pool_release_retry+0x23/0x70 [Mon Feb 10 203611 2025] process_one_work+0x1b1/0x370 [Mon Feb 10 203611 2025] worker_thread+0x37/0x3a0 [Mon Feb 10 203611 2025] kthread+0x11a/0x140 [Mon Feb 10 203611 2025] ? process_one_work+0x370/0x370 [Mon Feb 10 203611 2025] ? __kthread_cancel_work+0x40/0x40 [Mon Feb 10 203611 2025] ret_from_fork+0x35/0x40 [Mon Feb 10 203611 2025] ---[ end trace ebffe800f33e7e34 ]--- Note before this patch, the above calltrace would flood the dmesg due to repeated reschedule of release_dw kworker. Consider specifically these CWEs: CWE-1284 CWE-401 CWE-362 CWE-909 CWE-779 CWE-206 CWE-667 CWE-835 CWE-833",
  "keyphrases": {
    "original_query": "In the Linux kernel, the following vulnerability has been resolved page_pool avoid infinite loop to schedule delayed worker We noticed the kworker in page_pool_release_retry() was waken up repeatedly and infinitely in production because of the buggy driver causing the inflight less than 0 and warning us in page_pool_inflight()[1]. Since the inflight value goes negative, it means we should not expect the whole page_pool to get back to work normally. This patch mitigates the adverse effect by not rescheduling the kworker when detecting the inflight negative in page_pool_release_retry(). [1] [Mon Feb 10 203611 2025] ------------[ cut here ]------------ [Mon Feb 10 203611 2025] Negative(-51446) inflight packet-pages ... [Mon Feb 10 203611 2025] Call Trace [Mon Feb 10 203611 2025] page_pool_release_retry+0x23/0x70 [Mon Feb 10 203611 2025] process_one_work+0x1b1/0x370 [Mon Feb 10 203611 2025] worker_thread+0x37/0x3a0 [Mon Feb 10 203611 2025] kthread+0x11a/0x140 [Mon Feb 10 203611 2025] ? process_one_work+0x370/0x370 [Mon Feb 10 203611 2025] ? __kthread_cancel_work+0x40/0x40 [Mon Feb 10 203611 2025] ret_from_fork+0x35/0x40 [Mon Feb 10 203611 2025] ---[ end trace ebffe800f33e7e34 ]--- Note before this patch, the above calltrace would flood the dmesg due to repeated reschedule of release_dw kworker.",
    "enhanced_query": "In the Linux kernel, the following vulnerability has been resolved page_pool avoid infinite loop to schedule delayed worker We noticed the kworker in page_pool_release_retry() was waken up repeatedly and infinitely in production because of the buggy driver causing the inflight less than 0 and warning us in page_pool_inflight()[1]. Since the inflight value goes negative, it means we should not expect the whole page_pool to get back to work normally. This patch mitigates the adverse effect by not rescheduling the kworker when detecting the inflight negative in page_pool_release_retry(). [1] [Mon Feb 10 203611 2025] ------------[ cut here ]------------ [Mon Feb 10 203611 2025] Negative(-51446) inflight packet-pages ... [Mon Feb 10 203611 2025] Call Trace [Mon Feb 10 203611 2025] page_pool_release_retry+0x23/0x70 [Mon Feb 10 203611 2025] process_one_work+0x1b1/0x370 [Mon Feb 10 203611 2025] worker_thread+0x37/0x3a0 [Mon Feb 10 203611 2025] kthread+0x11a/0x140 [Mon Feb 10 203611 2025] ? process_one_work+0x370/0x370 [Mon Feb 10 203611 2025] ? __kthread_cancel_work+0x40/0x40 [Mon Feb 10 203611 2025] ret_from_fork+0x35/0x40 [Mon Feb 10 203611 2025] ---[ end trace ebffe800f33e7e34 ]--- Note before this patch, the above calltrace would flood the dmesg due to repeated reschedule of release_dw kworker. Consider specifically these CWEs: CWE-1284 CWE-401 CWE-362 CWE-909 CWE-779 CWE-206 CWE-667 CWE-835 CWE-833",
    "cwe_mentions": [
      "CWE-1284",
      "CWE-401",
      "CWE-362",
      "CWE-909",
      "CWE-779",
      "CWE-206",
      "CWE-667",
      "CWE-835",
      "CWE-833"
    ],
    "search_time": 3.4933125972747803
  },
  "timestamp": "2025-07-12 13:26:07",
  "cve_id": "CVE-2025-37859",
  "result_count": 20,
  "results": [
    {
      "cwe_id": "1322",
      "name": "Use of Blocking Code in Single-threaded, Non-blocking Context",
      "type": "base",
      "score": 2.2100000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "390",
      "name": "Detection of Error Condition Without Action",
      "type": "base",
      "score": 2.2100000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "779",
      "name": "Logging of Excessive Data",
      "type": "base",
      "score": 2.1189999999999998,
      "relationship_count": 0
    },
    {
      "cwe_id": "456",
      "name": "Missing Initialization of a Variable",
      "type": "variant",
      "score": 1.83936,
      "relationship_count": 0
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "type": "Base",
      "score": 1.8349899862573071,
      "relationship_count": 0
    },
    {
      "cwe_id": "120",
      "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
      "type": "base",
      "score": 1.7680000000000005,
      "relationship_count": 0
    },
    {
      "cwe_id": "123",
      "name": "Write-what-where Condition",
      "type": "base",
      "score": 1.7680000000000005,
      "relationship_count": 0
    },
    {
      "cwe_id": "364",
      "name": "Signal Handler Race Condition",
      "type": "base",
      "score": 1.7550000000000001,
      "relationship_count": 0
    },
    {
      "cwe_id": "833",
      "name": "Deadlock",
      "type": "Base",
      "score": 1.6982624205173478,
      "relationship_count": 0
    },
    {
      "cwe_id": "1325",
      "name": "Improperly Controlled Sequential Memory Allocation",
      "type": "base",
      "score": 1.6848000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "1265",
      "name": "Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls",
      "type": "base",
      "score": 1.6848000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "386",
      "name": "Symbolic Name not Mapping to Correct Object",
      "type": "base",
      "score": 1.6744000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "662",
      "name": "Improper Synchronization",
      "type": "class",
      "score": 1.6736000000000002,
      "relationship_count": 0
    },
    {
      "cwe_id": "835",
      "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
      "type": "Base",
      "score": 1.614846958014721,
      "relationship_count": 0
    },
    {
      "cwe_id": "61",
      "name": "UNIX Symbolic Link (Symlink) Following",
      "type": "compound",
      "score": 1.61,
      "relationship_count": 0
    },
    {
      "cwe_id": "609",
      "name": "Double-Checked Locking",
      "type": "base",
      "score": 1.5912000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "129",
      "name": "Improper Validation of Array Index",
      "type": "variant",
      "score": 1.5552000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "908",
      "name": "Use of Uninitialized Resource",
      "type": "Base",
      "score": 1.5358156863782393,
      "relationship_count": 0
    },
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "type": "Base",
      "score": 1.5257023885557806,
      "relationship_count": 0
    },
    {
      "cwe_id": "789",
      "name": "Memory Allocation with Excessive Size Value",
      "type": "Variant",
      "score": 1.4311855808296183,
      "relationship_count": 0
    }
  ]
}