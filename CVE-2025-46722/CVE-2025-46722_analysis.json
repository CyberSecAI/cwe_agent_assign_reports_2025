{
  "cve_id": "CVE-2025-46722",
  "description": "vLLM is an inference and serving engine for large language models (LLMs). In versions starting from 0.7.0 to before 0.9.0, in the file vllm/multimodal/hasher.py, the MultiModalHasher class has a security and data integrity issue in its image hashing method. Currently, it serializes PIL.Image.Image objects using only obj.tobytes(), which returns only the raw pixel data, without including metadata such as the images shape (width, height, mode). As a result, two images of different sizes (e.g., 30x100 and 100x30) with the same pixel byte sequence could generate the same hash value. This may lead to **hash collisions**, incorrect cache hits, and even data leakage or security risks. This issue has been patched in version 0.9.0.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "hash collisions",
    "impact": [
      "data leakage or security risks",
      "integrity"
    ],
    "vector": "",
    "attacker": "",
    "product": "vLLM",
    "version": "0.7.0 to before 0.9.0",
    "component": "vllm/multimodal/hasher.py"
  },
  "reference_content": "```text\nCVE ID: CVE-2025-46722\n\nVulnerability: Weakness in MultiModalHasher Image/video Hashing Implementation in vLLM\n\nDescription:\nThe `MultiModalHasher` class in `vllm/multimodal/hasher.py` has a security and data integrity issue in its image hashing method. It serializes `PIL.Image.Image` objects using only `obj.tobytes()`, which returns only the raw pixel data, without including metadata such as the image\u2019s shape (width, height, mode). This can lead to hash collisions, incorrect cache hits, and potential data leakage or security risks because two images of different sizes with the same pixel byte sequence could generate the same hash value.\n\nAffected versions:\n>=0.7.0\n\nPatched versions:\n0.9.0\n\nRoot cause:\nThe `serialize_item` method in `vllm/multimodal/hasher.py` only uses `obj.tobytes()` for hashing `Image.Image` instances, neglecting to include image metadata (size, mode, format, info).\n\nWeaknesses/vulnerabilities present:\n- Insufficient image metadata included in hash calculation.\n- Potential for hash collisions between visually distinct images.\n\nImpact of exploitation:\n- Incorrect cache hits, leading to abnormal responses.\n- Deliberate construction of images with different meanings but the same hash value.\n- Potential data leakage.\n\nAttack vectors:\n- Network (remote attacker can potentially exploit the vulnerability).\n\nRequired attacker capabilities/position:\n- Low privileges required.\n- No user interaction required.\n\nMitigation or fix:\n- In the `serialize_item` method, serialization of `Image.Image` objects should include all critical metadata (size, mode, format, info) in the hash calculation.\n- Fix implemented in pull request [#17378](https://github.com/vllm-project/vllm/pull/17378).\n\nCVSS Score: 4.2/10 (Moderate)\nCVSS Vector: CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:N/A:L\n```",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-328 | Use of Weak Hash | 1.0 | Base | Primary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE selected is CWE-328, which is at the Base level of abstraction, which is the preferred level. It has parent CWE-327, a Class, which is less specific.\n\n```mermaid\ngraph TD\n    cwe328[\"CWE-328: Use of Weak Hash\"]\n    cwe327[\"CWE-327: Use of a Broken or Risky Cryptographic Algorithm\"]\n    \n    cwe328 -->|CHILDOF| cwe327\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe328 primary\n    class cwe327 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **use of a weak hash** (CWE-328). This leads to **hash collisions**, which then results in incorrect cache hits, data leakage, and security risks.\n\n## Summary of Analysis\nThe vulnerability lies in the `MultiModalHasher` class, where the image hashing method uses only `obj.tobytes()` which returns the raw pixel data without including metadata. This can lead to **hash collisions**. The key evidence supporting this classification is: \"As a result, two images of different sizes (e.g., 30x100 and 100x30) with the same pixel byte sequence could generate the same hash value,\".\n\nThe Retriever Results listed CWE-328: Use of Weak Hash as the top candidate and it is a Base level CWE, which is the preferred level of abstraction. The alternative top candidates of CWE-407 and CWE-327 are Classes, which are less specific. Therefore, CWE-328 is the most appropriate.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-328: Use of Weak Hash\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product uses an algorithm that produces a digest (output value) that does not meet security expectations for a hash function that allows an adversary to reasonably determine the original input (preimage attack), find another input that can produce the same hash (2nd preimage attack), or find multiple inputs that evaluate to the same hash (birthday attack).\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-328 | Use of Weak Hash | 1.0 | Base | Primary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE selected is CWE-328, which is at the Base level of abstraction, which is the preferred level. It has parent CWE-327, a Class, which is less specific.\n\n```mermaid\ngraph TD\n    cwe328[\"CWE-328: Use of Weak Hash\"]\n    cwe327[\"CWE-327: Use of a Broken or Risky Cryptographic Algorithm\"]\n    \n    cwe328 -->|CHILDOF| cwe327\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe328 primary\n    class cwe327 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **use of a weak hash** (CWE-328). This leads to **hash collisions**, which then results in incorrect cache hits, data leakage, and security risks.\n\n## Summary of Analysis\nThe vulnerability lies in the `MultiModalHasher` class, where the image hashing method uses only `obj.tobytes()` which returns the raw pixel data without including metadata. This can lead to **hash collisions**. The key evidence supporting this classification is: \"As a result, two images of different sizes (e.g., 30x100 and 100x30) with the same pixel byte sequence could generate the same hash value,\".\n\nThe Retriever Results listed CWE-328: Use of Weak Hash as the top candidate and it is a Base level CWE, which is the preferred level of abstraction. The alternative top candidates of CWE-407 and CWE-327 are Classes, which are less specific. Therefore, CWE-328 is the most appropriate.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-328: Use of Weak Hash\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product uses an algorithm that produces a digest (output value) that does not meet security expectations for a hash function that allows an adversary to reasonably determine the original input (preimage attack), find another input that can produce the same hash (2nd preimage attack), or find multiple inputs that evaluate to the same hash (birthday attack).\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-328:**\n- 328 (Use of Weak Hash) - ROOT\n\n\n**Chain starting from CWE-407:**\n- 407 (Inefficient Algorithmic Complexity) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "328",
        "name": "Use of Weak Hash",
        "source": "sparse"
      },
      "similarity": 544.7498717350751
    },
    {
      "metadata": {
        "doc_id": "407",
        "name": "Inefficient Algorithmic Complexity",
        "source": "sparse"
      },
      "similarity": 531.9996075339978
    },
    {
      "metadata": {
        "doc_id": "327",
        "name": "Use of a Broken or Risky Cryptographic Algorithm",
        "source": "sparse"
      },
      "similarity": 513.5032935406215
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 482.9604702231688
    },
    {
      "metadata": {
        "doc_id": "345",
        "name": "Insufficient Verification of Data Authenticity",
        "source": "sparse"
      },
      "similarity": 481.78043188829025
    },
    {
      "metadata": {
        "doc_id": "347",
        "name": "Improper Verification of Cryptographic Signature",
        "source": "sparse"
      },
      "similarity": 480.24482510767496
    },
    {
      "metadata": {
        "doc_id": "923",
        "name": "Improper Restriction of Communication Channel to Intended Endpoints",
        "source": "sparse"
      },
      "similarity": 474.72016536203813
    },
    {
      "metadata": {
        "doc_id": "1390",
        "name": "Weak Authentication",
        "source": "sparse"
      },
      "similarity": 474.68653827853893
    },
    {
      "metadata": {
        "doc_id": "1427",
        "name": "Improper Neutralization of Input Used for LLM Prompting",
        "type": "Base",
        "original_content": "The product uses externally-provided data to build prompts provided to\nlarge language models (LLMs), but the way these prompts are constructed\ncauses the LLM to fail to distinguish between user-supplied inputs and\ndeveloper provided system directives.",
        "keyphrase_source": "weakness:hash collisions",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Ensure that the weakness being identified involves improper neutralization during prompt generation. A different CWE might be needed if the core concern is related to inadvertent insertion of sensitive information, generating prompts from third-party sources that should not have been trusted (as may occur with indirect prompt injection), or jailbreaking, then the root cause might be a different weakness.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.40688836361552366,
            "graph": 1.4419102107102089
          }
        }
      },
      "similarity": 0.40688836361552366
    },
    {
      "doc_id": "208",
      "text": "CWE-208: Observable Timing Discrepancy",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "208",
        "name": "Observable Timing Discrepancy",
        "type": "base",
        "original_content": "CWE-208: Observable Timing Discrepancy",
        "relationships": [
          {
            "source_id": "208",
            "target_id": "1254",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "208",
            "target_id": "327",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "208",
            "target_id": "385",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "208",
            "target_id": "203",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "385",
            "target_id": "208",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "327",
            "target_id": "208",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "203",
            "target_id": "208",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1254",
            "target_id": "208",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "327",
                  "208",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "327"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "327",
                  "208",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "327"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "208",
                  "327",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "327"
            }
          }
        },
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-328",
      "CWE-407",
      "CWE-327"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}