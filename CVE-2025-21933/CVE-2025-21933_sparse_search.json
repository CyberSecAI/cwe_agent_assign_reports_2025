{
  "retriever": "sparse",
  "query": "In the Linux kernel, the following vulnerability has been resolved arm pgtable fix NULL pointer dereference issue When update_mmu_cache_range() is called by update_mmu_cache(), the vmf parameter is NULL, which will cause a NULL pointer dereference issue in adjust_pte() Unable to handle kernel NULL pointer dereference at virtual address 00000030 when read Hardware name Atmel AT91SAM9 PC is at update_mmu_cache_range+0x1e0/0x278 LR is at pte_offset_map_rw_nolock+0x18/0x2c Call trace update_mmu_cache_range from remove_migration_pte+0x29c/0x2ec remove_migration_pte from rmap_walk_file+0xcc/0x130 rmap_walk_file from remove_migration_ptes+0x90/0xa4 remove_migration_ptes from migrate_pages_batch+0x6d4/0x858 migrate_pages_batch from migrate_pages+0x188/0x488 migrate_pages from compact_zone+0x56c/0x954 compact_zone from compact_node+0x90/0xf0 compact_node from kcompactd+0x1d4/0x204 kcompactd from kthread+0x120/0x12c kthread from ret_from_fork+0x14/0x38 Exception stack(0xc0d8bfb0 to 0xc0d8bff8) To fix it, do not rely on whether ptl is equal to decide whether to hold the pte lock, but decide it by whether CONFIG_SPLIT_PTE_PTLOCKS is enabled. In addition, if two vmas map to the same PTE page, there is no need to hold the pte lock again, otherwise a deadlock will occur. Just add the need_lock parameter to let adjust_pte() know this information.",
  "keyphrases": {
    "rootcause": [
      "NULL pointer dereference issue"
    ],
    "weakness": [
      "NULL pointer dereference"
    ]
  },
  "timestamp": "2025-07-14 10:01:06",
  "cve_id": "CVE-2025-21933",
  "result_count": 10,
  "results": [
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "score": 818.2173293408764,
      "search_source": "rootcause:NULL pointer dereference issue"
    },
    {
      "cwe_id": "252",
      "name": "Unchecked Return Value",
      "score": 772.9319753749555,
      "search_source": "rootcause:NULL pointer dereference issue"
    },
    {
      "cwe_id": "822",
      "name": "Untrusted Pointer Dereference",
      "score": 768.2409737726837,
      "search_source": "rootcause:NULL pointer dereference issue"
    },
    {
      "cwe_id": "833",
      "name": "Deadlock",
      "score": 726.5384957355798,
      "search_source": "rootcause:NULL pointer dereference issue"
    },
    {
      "cwe_id": "665",
      "name": "Improper Initialization",
      "score": 706.4885158626616,
      "search_source": "rootcause:NULL pointer dereference issue"
    },
    {
      "cwe_id": "908",
      "name": "Use of Uninitialized Resource",
      "score": 699.875670234769,
      "search_source": "rootcause:NULL pointer dereference issue"
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "score": 699.2467072959032,
      "search_source": "rootcause:NULL pointer dereference issue"
    },
    {
      "cwe_id": "909",
      "name": "Missing Initialization of Resource",
      "score": 695.6311579354825,
      "search_source": "rootcause:NULL pointer dereference issue"
    },
    {
      "cwe_id": "824",
      "name": "Access of Uninitialized Pointer",
      "score": 686.6470611457814,
      "search_source": "rootcause:NULL pointer dereference issue"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 676.8334641941801,
      "search_source": "rootcause:NULL pointer dereference issue"
    }
  ]
}