{
  "retriever": "sparse",
  "query": "In the Linux kernel, the following vulnerability has been resolved eth bnxt fix kernel panic in the bnxt_get_queue_stats{rx | tx} When qstats-get operation is executed, callbacks of netdev_stats_ops are called. The bnxt_get_queue_stats{rx | tx} collect per-queue stats from sw_stats in the rings. But {rx | tx | cp}_ring are allocated when the interface is up. So, these rings are not allocated when the interface is down. The qstats-get is allowed even if the interface is down. However, the bnxt_get_queue_stats{rx | tx}() accesses cp_ring and tx_ring without null check. So, it needs to avoid accessing rings if the interface is down. Reproducer ip link set $interface down ./cli.py --spec netdev.yaml --dump qstats-get OR ip link set $interface down python ./stats.py Splat looks like",
  "keyphrases": {
    "weakness": [
      "bnxt_get_queue_stats accesses tx_ring",
      "cp_ring without null check"
    ]
  },
  "timestamp": "2025-07-14 10:03:14",
  "cve_id": "CVE-2025-21973",
  "result_count": 10,
  "results": [
    {
      "cwe_id": "662",
      "name": "Improper Synchronization",
      "score": 523.2323415667884,
      "search_source": "weakness:bnxt_get_queue_stats accesses tx_ring"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 522.2809731204948,
      "search_source": "weakness:cp_ring without null check"
    },
    {
      "cwe_id": "789",
      "name": "Memory Allocation with Excessive Size Value",
      "score": 520.2283227077743,
      "search_source": "weakness:cp_ring without null check"
    },
    {
      "cwe_id": "113",
      "name": "Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')",
      "score": 502.54309673616854,
      "search_source": "weakness:cp_ring without null check"
    },
    {
      "cwe_id": "116",
      "name": "Improper Encoding or Escaping of Output",
      "score": 497.8509424274584,
      "search_source": "weakness:cp_ring without null check"
    },
    {
      "cwe_id": "61",
      "name": "UNIX Symbolic Link (Symlink) Following",
      "score": 496.9663894146979,
      "search_source": "weakness:cp_ring without null check"
    },
    {
      "cwe_id": "401",
      "name": "Missing Release of Memory after Effective Lifetime",
      "score": 495.64555927596814,
      "search_source": "weakness:cp_ring without null check"
    },
    {
      "cwe_id": "335",
      "name": "Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG)",
      "score": 482.99753225734025,
      "search_source": "weakness:cp_ring without null check"
    },
    {
      "cwe_id": "94",
      "name": "Improper Control of Generation of Code ('Code Injection')",
      "score": 481.58617348513934,
      "search_source": "weakness:cp_ring without null check"
    },
    {
      "cwe_id": "1390",
      "name": "Weak Authentication",
      "score": 478.2909000817998,
      "search_source": "weakness:cp_ring without null check"
    }
  ]
}