{
  "cve_id": "CVE-2025-32518",
  "description": "**Cross-Site Request Forgery (CSRF)** vulnerability in hossainawlad ALD Login Page allows Stored XSS. This issue affects ALD Login Page from n/a through 1.1.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "Cross-Site Request Forgery (CSRF)",
    "impact": "Stored XSS",
    "vector": "",
    "attacker": "",
    "product": "hossainawlad ALD Login Page",
    "version": "n/a through 1.1",
    "component": ""
  },
  "reference_content": "The content relates to CVE-2025-32518.\n\n**Root cause of vulnerability:**\nCross Site Request Forgery (CSRF) vulnerability.\n\n**Weaknesses/vulnerabilities present:**\nCSRF allows a malicious actor to force higher privileged users to execute unwanted actions under their current authentication.\n\n**Impact of exploitation:**\nA malicious actor can force higher privileged users to execute unwanted actions. The specific impact varies case by case.\n\n**Attack vectors:**\nCross-Site Request Forgery (CSRF) attack.\n\n**Required attacker capabilities/position:**\nUnauthenticated.\n\n**Mitigation or fix:**\nUpdate to version 1.3 or later. Patchstack users can enable auto-update for vulnerable plugins.\n\n**Additional details (more than official CVE description):**\n- CVSS score: 7.1 (Low severity)\n- Affected Software: ALD Login Page Plugin\n- Vulnerable versions: <= 1.1\n- Fixed in version: 1.3\n- OWASP Top 10: A1: Broken Access Control\n- Classification: Cross Site Request Forgery (CSRF)\n- PSID: f9e88ab465b1\n- Reported by: SOPROBRO on 29 Oct 2024\n- Published by Patchstack: 09 Apr 2025",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-352 | Cross-Site Request Forgery (CSRF) | 1.0 | Compound | Primary | Allowed |\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 0.7 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.85\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is **CWE-352 [Cross-Site Request Forgery (CSRF)]**, a compound weakness that allows an attacker to induce users into performing actions against their will. The resulting impact is Stored XSS, which is **CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')]**. **CWE-79** is a base CWE that results from improper neutralization of user-controlled input. **CWE-352** can **CAN PRECEDE** **CWE-79** if a CSRF attack is used to inject malicious script.\n\n```mermaid\ngraph TD\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    \n    cwe352 -->|CANPRECEDE| cwe79\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe352 primary\n    class cwe79 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with the **CWE-352 [Cross-Site Request Forgery (CSRF)]** vulnerability, where the application **does not sufficiently verify** the origin of the request. This allows an attacker to inject malicious input. The injected input is then improperly handled by the application, leading to **CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')]**, which results in Stored XSS. The root cause is the **missing CSRF protection**, and the impact is the ability to inject and execute arbitrary scripts in the context of the user.\n\n## Summary of Analysis\nThe primary vulnerability is **CWE-352 [Cross-Site Request Forgery (CSRF)]** because the application does not properly validate the origin of requests, allowing an attacker to perform actions on behalf of a user without their consent. The vulnerability description clearly states \"**Cross-Site Request Forgery (CSRF)** vulnerability...allows Stored XSS.\" The **CVE Reference Links Content Summary** also indicates that the **root cause of vulnerability** is \"Cross Site Request Forgery (CSRF) vulnerability.\" This directly supports the selection of **CWE-352** as the primary weakness. The retriever results also list **CWE-352** as the top combined result with a high similarity score.\n\nThe secondary vulnerability is **CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')]**. The vulnerability description states that the CSRF vulnerability \"allows Stored XSS.\" The **CVE Reference Links Content Summary** shows this attack allows a malicious actor to force higher privileged users to execute unwanted actions. This means that the attacker is able to inject code, which is then executed by the user's browser. This aligns with the description of **CWE-79**, which states that \"The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.\"\n\nThe relationship between **CWE-352** and **CWE-79** is that the CSRF vulnerability allows the attacker to inject malicious input, which then leads to the XSS vulnerability. **CWE-352** **CAN PRECEDE** **CWE-79**.\n\nThe selected CWEs are at the optimal level of specificity because they accurately represent the root cause and impact of the vulnerability. **CWE-352** is a compound CWE, which is appropriate because it represents a combination of multiple weaknesses. **CWE-79** is a base CWE, which is also appropriate because it represents a specific type of vulnerability.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-352 | Cross-Site Request Forgery (CSRF) | 1.0 | Compound | Primary | Allowed |\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 0.7 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.85\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is **CWE-352 [Cross-Site Request Forgery (CSRF)]**, a compound weakness that allows an attacker to induce users into performing actions against their will. The resulting impact is Stored XSS, which is **CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')]**. **CWE-79** is a base CWE that results from improper neutralization of user-controlled input. **CWE-352** can **CAN PRECEDE** **CWE-79** if a CSRF attack is used to inject malicious script.\n\n```mermaid\ngraph TD\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    \n    cwe352 -->|CANPRECEDE| cwe79\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe352 primary\n    class cwe79 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with the **CWE-352 [Cross-Site Request Forgery (CSRF)]** vulnerability, where the application **does not sufficiently verify** the origin of the request. This allows an attacker to inject malicious input. The injected input is then improperly handled by the application, leading to **CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')]**, which results in Stored XSS. The root cause is the **missing CSRF protection**, and the impact is the ability to inject and execute arbitrary scripts in the context of the user.\n\n## Summary of Analysis\nThe primary vulnerability is **CWE-352 [Cross-Site Request Forgery (CSRF)]** because the application does not properly validate the origin of requests, allowing an attacker to perform actions on behalf of a user without their consent. The vulnerability description clearly states \"**Cross-Site Request Forgery (CSRF)** vulnerability...allows Stored XSS.\" The **CVE Reference Links Content Summary** also indicates that the **root cause of vulnerability** is \"Cross Site Request Forgery (CSRF) vulnerability.\" This directly supports the selection of **CWE-352** as the primary weakness. The retriever results also list **CWE-352** as the top combined result with a high similarity score.\n\nThe secondary vulnerability is **CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')]**. The vulnerability description states that the CSRF vulnerability \"allows Stored XSS.\" The **CVE Reference Links Content Summary** shows this attack allows a malicious actor to force higher privileged users to execute unwanted actions. This means that the attacker is able to inject code, which is then executed by the user's browser. This aligns with the description of **CWE-79**, which states that \"The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.\"\n\nThe relationship between **CWE-352** and **CWE-79** is that the CSRF vulnerability allows the attacker to inject malicious input, which then leads to the XSS vulnerability. **CWE-352** **CAN PRECEDE** **CWE-79**.\n\nThe selected CWEs are at the optimal level of specificity because they accurately represent the root cause and impact of the vulnerability. **CWE-352** is a compound CWE, which is appropriate because it represents a combination of multiple weaknesses. **CWE-79** is a base CWE, which is also appropriate because it represents a specific type of vulnerability.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-352:**\n- 352 (Cross-Site Request Forgery (CSRF)) - ROOT\n\n\n**Chain starting from CWE-79:**\n- 79 (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse"
      },
      "similarity": 259.420239580075
    },
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "sparse"
      },
      "similarity": 216.04791335822478
    },
    {
      "metadata": {
        "doc_id": "601",
        "name": "URL Redirection to Untrusted Site ('Open Redirect')",
        "source": "sparse"
      },
      "similarity": 206.12913739916877
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 194.82466996442065
    },
    {
      "metadata": {
        "doc_id": "1004",
        "name": "Sensitive Cookie Without 'HttpOnly' Flag",
        "source": "sparse"
      },
      "similarity": 168.00089682948703
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse"
      },
      "similarity": 166.93949534751997
    },
    {
      "metadata": {
        "doc_id": "918",
        "name": "Server-Side Request Forgery (SSRF)",
        "source": "sparse"
      },
      "similarity": 166.16604440783118
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "source": "sparse"
      },
      "similarity": 162.87998761059512
    },
    {
      "metadata": {
        "doc_id": "80",
        "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
        "type": "Variant",
        "original_content": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as \"<\", \">\", and \"&\" that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.",
        "keyphrase_source": "weakness:Cross-Site Request Forgery (CSRF)",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse",
            "graph"
          ],
          "retriever_count": 3,
          "normalized_scores": {
            "dense": 0.5280138235024558,
            "sparse": 159.4281479525575,
            "graph": 1.5280147102392245
          }
        }
      },
      "similarity": 0.5280138235024558
    },
    {
      "doc_id": "472",
      "text": "The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.",
      "score": 0.5672207121127196,
      "metadata": {
        "doc_id": "472",
        "name": "External Control of Assumed-Immutable Web Parameter",
        "type": "Base",
        "extended_description": "\n\nIf a web product does not properly protect assumed-immutable values from modification in hidden form fields, parameters, cookies, or URLs, this can lead to modification of critical data. Web applications often mistakenly make the assumption that data passed to the client in hidden fields or cookies is not susceptible to tampering. Improper validation of data that are user-controllable can lead to the application processing incorrect, and often malicious, input.\n\n\nFor example, custom cookies commonly store session data or persistent data across sessions. This kind of session data is normally involved in security related decisions on the server side, such as user authentication and access control. Thus, the cookies might contain sensitive data such as user credentials and privileges. This is a dangerous practice, as it can often lead to improper reliance on the value of the client-provided cookie by the server side application.\n",
        "alternate_terms": [
          "Assumed-Immutable Parameter Tampering"
        ],
        "original_content": "The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.",
        "relationships": [
          {
            "source_id": "472",
            "target_id": "656",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "472",
            "target_id": "384",
            "label": "REQUIREDBY",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "472",
            "target_id": "471",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "472",
            "target_id": "642",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "656",
            "target_id": "472",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "642",
            "target_id": "472",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "472",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "384",
            "target_id": "472",
            "label": "REQUIRES",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "source": "graph",
        "sources": [
          "vector",
          "graph"
        ],
        "vector_score": 0.5672207121127196,
        "graph_score": 3.4164000000000003,
        "score_components": {
          "relationship_chain": 0.54,
          "explicit_mention": 1.0,
          "abstraction_path": 0.9,
          "sequence_path": 0.6400000000000001
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "601",
                  "610",
                  "CHILDOF"
                ],
                [
                  "610",
                  "384",
                  "PARENTOF"
                ],
                [
                  "384",
                  "472",
                  "REQUIRES"
                ]
              ],
              "score": 0.54,
              "type": "relationship_chain",
              "source": "601"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "352",
                  "441",
                  "REQUIRES"
                ],
                [
                  "441",
                  "384",
                  "REQUIREDBY"
                ],
                [
                  "384",
                  "472",
                  "REQUIRES"
                ]
              ],
              "score": 0.6400000000000001,
              "type": "vulnerability_sequence_forward",
              "source": "352"
            }
          }
        },
        "is_explicit": true,
        "abstraction_level": "base",
        "position": "after",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5272259705975018,
            "graph": 2.276728284845088
          }
        }
      },
      "similarity": 2.276728284845088
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-352",
      "CWE-79"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}