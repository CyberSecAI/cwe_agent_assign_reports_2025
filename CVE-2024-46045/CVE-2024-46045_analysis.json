{
  "cve_id": "CVE-2024-46045",
  "description": "Tenda CH22 V1.0.0.6(468) has a **stack overflow** vulnerability located in the frmL7PlotForm function.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "stack overflow",
    "impact": "",
    "vector": "",
    "attacker": "",
    "product": "Tenda CH22",
    "version": "V1.0.0.6(468)",
    "component": "frmL7PlotForm function"
  },
  "reference_content": "Based on the provided content, here's an analysis:\n\n**Root cause of vulnerability:**\n- A stack buffer overflow vulnerability exists within the `frmL7PlotForm` function of the Tenda CH22 router firmware.\n\n**Weaknesses/vulnerabilities present:**\n- The `sprintf` function is used to format a string into a buffer, and the size of the destination buffer `s` is insufficient to accommodate user-supplied input via the `page` parameter from a POST request.\n\n**Impact of exploitation:**\n- A successful exploit could lead to a denial-of-service (DoS) condition due to the stack overflow, potentially crashing the device or enabling arbitrary code execution.\n\n**Attack vectors:**\n- The attack vector is through a specially crafted HTTP POST request to the `/goform/frmL7ProtForm` endpoint. The `page` parameter within the request contains excessive data to cause the overflow.\n\n**Required attacker capabilities/position:**\n- The attacker needs network access to the device to send the malicious HTTP POST request.\n- The attacker needs to know the vulnerable endpoint of the router, which appears to be publicly known.\n- No authentication is mentioned, so it is possible that no authentication is needed.\n\n**Additional details:**\n- The vulnerability is located in the `frmL7PlotForm` function which receives the `page` parameter.\n- The vulnerable statement is `v1 = sprintf(s, \"im.asp?page=%s\", v6);`.\n- The provided Proof of Concept (PoC) demonstrates a method to trigger the overflow using a Python script with `requests` and `pwn` libraries.\n- The vulnerable firmware version is CH22 V1.0.0.6(468).\n- A firmware download link is provided: <https://www.tenda.com.cn/download/detail-2230.html>\n\nThis content provides more detail than the typical CVE description would, including the specific code causing the vulnerability, the vulnerable function, a PoC, and the vulnerable firmware version.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n\n| CWE ID  | CWE Name                                                                 | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :------- | :----------------------------------------------------------------------- | :--------- | :-------------------- | :------------------------------ | :------------------------------ |\n| CWE-121 | Stack-based Buffer Overflow                                                | 1.0        | Variant               | Primary                         | Allowed                       |\n| CWE-120 | Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') | 0.7        | Base                  | Secondary                       | Allowed-with-Review           |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary relationship is that CWE-121 **Stack-based Buffer Overflow** is a variant of the more general CWE-119 **Improper Restriction of Operations within the Bounds of a Memory Buffer**. CWE-120 **Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')** can be a cause of stack-based buffer overflows. The choice of CWE-121 is favored because the description specifies \"stack overflow\" making it a more specific and accurate classification than its parent CWE-119.\n\n```mermaid\ngraph TD\n    cwe121[\"CWE-121: Stack-based Buffer Overflow\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations\"]\n    cwe120[\"CWE-120: Buffer Copy without Checking Size\"]\n    \n    cwe121 -->|CHILDOF| cwe119\n    cwe120 -->|CANPRECEDE| cwe121\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe121 primary\n    class cwe119,cwe120 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with an **improper** use of `sprintf` without proper bounds checking, leading to a **stack overflow**. This can result in a denial-of-service or arbitrary code execution.\n\n## Summary of Analysis\n\nThe analysis is based on the provided vulnerability description and the CVE reference link content summary. The vulnerability description explicitly mentions \"**stack overflow**\" in the `frmL7PlotForm` function. The CVE reference link content summary confirms this and states: \"A stack buffer overflow vulnerability exists within the `frmL7PlotForm` function\". It also identifies the vulnerable statement: `v1 = sprintf(s, \"im.asp?page=%s\", v6);` and confirms that the size of the buffer `s` is insufficient to handle the user-supplied input `page` in the POST request. The retriever results also strongly suggest CWE-121 as the primary candidate. The evidence clearly supports classifying this vulnerability as CWE-121 **Stack-based Buffer Overflow**.\nCWE-120 is included as a possible secondary weakness because the `sprintf` function copies the data without checking the size.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-121: Stack-based Buffer Overflow\n**Abstraction Level**: Variant\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nA stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Technical Explanation for CWE-121:**\n\nThe vulnerability is a **stack overflow**, which occurs when data is written beyond the boundaries of a buffer located on the stack. In this case, the `sprintf` function writes data into a stack-allocated buffer `s` without properly checking if the size of the input `page` will exceed the buffer's capacity.\n\n*   **How the vulnerability's details match the CWE's characteristics:** The vulnerability description states a **stack overflow** exists in the `frmL7PlotForm` function. The `sprintf` function copies data into a buffer on the stack without checking bounds.\n*   **The security implications and potential impact:** A successful exploit can cause a denial-of-service (DoS) or allow arbitrary code execution, leading to complete system compromise.\n*   **Any parent-child relationships or chain patterns that influenced your mapping:** CWE-121 is a variant of CWE-119 **Improper Restriction of Operations within the Bounds of a Memory Buffer**. It can be caused by CWE-120 **Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')**.\n*   **Whether the weakness is primary or secondary in the vulnerability:** Primary.\n*   **How the official MITRE mapping guidance influenced your decision:** CWE-121 is at the Variant level, which is preferred. The usage is ALLOWED.\n\n**Technical Explanation for CWE-120:**\n\nThe vulnerability is also related to CWE-120, as the `sprintf` function copies data from the `page` parameter without checking the size of the input. This **lack of size checking** is the root cause that allows the **stack overflow** to occur.\n\n*   **How the vulnerability's details match the CWE's characteristics:** The `sprintf` function copies data into the stack-allocated buffer `s` without checking if the size of the input `page` will exceed the buffer's capacity.\n*   **The security implications and potential impact:** A successful exploit can cause a denial-of-service (DoS) or allow arbitrary code execution, leading to complete system compromise.\n*   **Any parent-child relationships or chain patterns that influenced your mapping:** CWE-120 is a base weakness that can lead to buffer overflows, including stack overflows (CWE-121).\n*   **Whether the weakness is primary or secondary in the vulnerability:** Secondary, as it directly leads to the stack overflow, but the explicit mention of \"stack overflow\" makes CWE-121 the primary weakness.\n*   **How the official MITRE mapping guidance influenced your decision:** CWE-120 is at the Base level. The usage is ALLOWED-WITH-REVIEW.\n\n**CWEs Considered But Not Used:**\n\n*   CWE-190 **Integer Overflow or Wraparound**: This CWE is not directly related to the vulnerability, as there is no evidence of integer overflow.\n*   CWE-674 **Uncontrolled Recursion**: There is no indication of uncontrolled recursion in the provided description.\n*   CWE-789 **Memory Allocation with Excessive Size Value**: While memory allocation is involved implicitly, the core issue is the **lack of bounds checking** during the `sprintf` operation, not the size of the memory allocation itself.\n*   CWE-125 **Out-of-bounds Read**: The vulnerability is an out-of-bounds write (overflow), not a read.\n*   CWE-122 **Heap-based Buffer Overflow**: The description specifies that the overflow occurs on the stack, not the heap.\n*   CWE-124 **Buffer Underwrite ('Buffer Underflow')**: The vulnerability is an overflow, not an underflow.\n*   CWE-401 **Missing Release of Memory after Effective Lifetime**: There is no mention of memory leaks or resource management issues.\n*   CWE-128 **Wrap-around Error**: Similar to CWE-190, there is no evidence of wrap-around errors.\n*   CWE-134 **Use of Externally-Controlled Format String**: This CWE is not applicable because the format string is not directly controlled by an external source.\n*   CWE-131 **Incorrect Calculation of Buffer Size**: While there might be an implicit incorrect calculation of the required buffer size, the primary issue is the **lack of any size checking** before the `sprintf` operation.\n*   CWE-755 **Improper Handling of Exceptional Conditions** and CWE-252 **Unchecked Return Value**: There's no evidence suggesting that the program detects the error condition and then proceeds without taking proper action.\n*   CWE-425 **Direct Request ('Forced Browsing')** and CWE-912 **Hidden Functionality**, CWE-78 **Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')**, CWE-790 **Improper Filtering of Special Elements**, CWE-1285 **Improper Validation of Specified Index, Position, or Offset in Input**, CWE-1284 **Improper Validation of Specified Quantity in Input**, CWE-390 **Detection of Error Condition Without Action**: There is no evidence of these vulnerabilities based on the vulnerability description.",
  "analysis_with_relationships": "# Summary\n\n| CWE ID  | CWE Name                                                                 | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :------- | :----------------------------------------------------------------------- | :--------- | :-------------------- | :------------------------------ | :------------------------------ |\n| CWE-121 | Stack-based Buffer Overflow                                                | 1.0        | Variant               | Primary                         | Allowed                       |\n| CWE-120 | Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') | 0.7        | Base                  | Secondary                       | Allowed-with-Review           |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary relationship is that CWE-121 **Stack-based Buffer Overflow** is a variant of the more general CWE-119 **Improper Restriction of Operations within the Bounds of a Memory Buffer**. CWE-120 **Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')** can be a cause of stack-based buffer overflows. The choice of CWE-121 is favored because the description specifies \"stack overflow\" making it a more specific and accurate classification than its parent CWE-119.\n\n```mermaid\ngraph TD\n    cwe121[\"CWE-121: Stack-based Buffer Overflow\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations\"]\n    cwe120[\"CWE-120: Buffer Copy without Checking Size\"]\n    \n    cwe121 -->|CHILDOF| cwe119\n    cwe120 -->|CANPRECEDE| cwe121\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe121 primary\n    class cwe119,cwe120 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with an **improper** use of `sprintf` without proper bounds checking, leading to a **stack overflow**. This can result in a denial-of-service or arbitrary code execution.\n\n## Summary of Analysis\n\nThe analysis is based on the provided vulnerability description and the CVE reference link content summary. The vulnerability description explicitly mentions \"**stack overflow**\" in the `frmL7PlotForm` function. The CVE reference link content summary confirms this and states: \"A stack buffer overflow vulnerability exists within the `frmL7PlotForm` function\". It also identifies the vulnerable statement: `v1 = sprintf(s, \"im.asp?page=%s\", v6);` and confirms that the size of the buffer `s` is insufficient to handle the user-supplied input `page` in the POST request. The retriever results also strongly suggest CWE-121 as the primary candidate. The evidence clearly supports classifying this vulnerability as CWE-121 **Stack-based Buffer Overflow**.\nCWE-120 is included as a possible secondary weakness because the `sprintf` function copies the data without checking the size.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-121: Stack-based Buffer Overflow\n**Abstraction Level**: Variant\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nA stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Technical Explanation for CWE-121:**\n\nThe vulnerability is a **stack overflow**, which occurs when data is written beyond the boundaries of a buffer located on the stack. In this case, the `sprintf` function writes data into a stack-allocated buffer `s` without properly checking if the size of the input `page` will exceed the buffer's capacity.\n\n*   **How the vulnerability's details match the CWE's characteristics:** The vulnerability description states a **stack overflow** exists in the `frmL7PlotForm` function. The `sprintf` function copies data into a buffer on the stack without checking bounds.\n*   **The security implications and potential impact:** A successful exploit can cause a denial-of-service (DoS) or allow arbitrary code execution, leading to complete system compromise.\n*   **Any parent-child relationships or chain patterns that influenced your mapping:** CWE-121 is a variant of CWE-119 **Improper Restriction of Operations within the Bounds of a Memory Buffer**. It can be caused by CWE-120 **Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')**.\n*   **Whether the weakness is primary or secondary in the vulnerability:** Primary.\n*   **How the official MITRE mapping guidance influenced your decision:** CWE-121 is at the Variant level, which is preferred. The usage is ALLOWED.\n\n**Technical Explanation for CWE-120:**\n\nThe vulnerability is also related to CWE-120, as the `sprintf` function copies data from the `page` parameter without checking the size of the input. This **lack of size checking** is the root cause that allows the **stack overflow** to occur.\n\n*   **How the vulnerability's details match the CWE's characteristics:** The `sprintf` function copies data into the stack-allocated buffer `s` without checking if the size of the input `page` will exceed the buffer's capacity.\n*   **The security implications and potential impact:** A successful exploit can cause a denial-of-service (DoS) or allow arbitrary code execution, leading to complete system compromise.\n*   **Any parent-child relationships or chain patterns that influenced your mapping:** CWE-120 is a base weakness that can lead to buffer overflows, including stack overflows (CWE-121).\n*   **Whether the weakness is primary or secondary in the vulnerability:** Secondary, as it directly leads to the stack overflow, but the explicit mention of \"stack overflow\" makes CWE-121 the primary weakness.\n*   **How the official MITRE mapping guidance influenced your decision:** CWE-120 is at the Base level. The usage is ALLOWED-WITH-REVIEW.\n\n**CWEs Considered But Not Used:**\n\n*   CWE-190 **Integer Overflow or Wraparound**: This CWE is not directly related to the vulnerability, as there is no evidence of integer overflow.\n*   CWE-674 **Uncontrolled Recursion**: There is no indication of uncontrolled recursion in the provided description.\n*   CWE-789 **Memory Allocation with Excessive Size Value**: While memory allocation is involved implicitly, the core issue is the **lack of bounds checking** during the `sprintf` operation, not the size of the memory allocation itself.\n*   CWE-125 **Out-of-bounds Read**: The vulnerability is an out-of-bounds write (overflow), not a read.\n*   CWE-122 **Heap-based Buffer Overflow**: The description specifies that the overflow occurs on the stack, not the heap.\n*   CWE-124 **Buffer Underwrite ('Buffer Underflow')**: The vulnerability is an overflow, not an underflow.\n*   CWE-401 **Missing Release of Memory after Effective Lifetime**: There is no mention of memory leaks or resource management issues.\n*   CWE-128 **Wrap-around Error**: Similar to CWE-190, there is no evidence of wrap-around errors.\n*   CWE-134 **Use of Externally-Controlled Format String**: This CWE is not applicable because the format string is not directly controlled by an external source.\n*   CWE-131 **Incorrect Calculation of Buffer Size**: While there might be an implicit incorrect calculation of the required buffer size, the primary issue is the **lack of any size checking** before the `sprintf` operation.\n*   CWE-755 **Improper Handling of Exceptional Conditions** and CWE-252 **Unchecked Return Value**: There's no evidence suggesting that the program detects the error condition and then proceeds without taking proper action.\n*   CWE-425 **Direct Request ('Forced Browsing')** and CWE-912 **Hidden Functionality**, CWE-78 **Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')**, CWE-790 **Improper Filtering of Special Elements**, CWE-1285 **Improper Validation of Specified Index, Position, or Offset in Input**, CWE-1284 **Improper Validation of Specified Quantity in Input**, CWE-390 **Detection of Error Condition Without Action**: There is no evidence of these vulnerabilities based on the vulnerability description.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-390:**\n- 390 (Detection of Error Condition Without Action) - ROOT\n\n\n**Chain starting from CWE-125:**\n- 125 (Out-of-bounds Read) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "121",
        "name": "Stack-based Buffer Overflow",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Stack Overflow",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "190",
        "name": "Integer Overflow or Wraparound",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Overflow",
        "match_reason": "term_in_phrase_whole_phrase"
      },
      "similarity": 800.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "674",
        "name": "Uncontrolled Recursion",
        "source": "sparse"
      },
      "similarity": 112.35959238146758
    },
    {
      "metadata": {
        "doc_id": "120",
        "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
        "source": "sparse"
      },
      "similarity": 105.70238633187633
    },
    {
      "metadata": {
        "doc_id": "789",
        "name": "Memory Allocation with Excessive Size Value",
        "source": "sparse"
      },
      "similarity": 94.59987967491276
    },
    {
      "metadata": {
        "doc_id": "125",
        "name": "Out-of-bounds Read",
        "source": "sparse"
      },
      "similarity": 93.9055704702521
    },
    {
      "metadata": {
        "doc_id": "122",
        "name": "Heap-based Buffer Overflow",
        "source": "sparse"
      },
      "similarity": 92.73907330807042
    },
    {
      "metadata": {
        "doc_id": "124",
        "name": "Buffer Underwrite ('Buffer Underflow')",
        "source": "sparse"
      },
      "similarity": 92.68983561082872
    },
    {
      "metadata": {
        "doc_id": "401",
        "name": "Missing Release of Memory after Effective Lifetime",
        "type": "Variant",
        "original_content": "The product does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory.",
        "keyphrase_source": "weakness:stack overflow",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.5176427249099881
          }
        }
      },
      "similarity": 0.5176427249099881
    },
    {
      "doc_id": "128",
      "text": "CWE-128: Wrap-around Error",
      "score": 2.2698,
      "metadata": {
        "doc_id": "128",
        "name": "Wrap-around Error",
        "type": "base",
        "original_content": "CWE-128: Wrap-around Error",
        "relationships": [
          {
            "source_id": "128",
            "target_id": "190",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "128",
            "target_id": "119",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "128",
            "target_id": "682",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "682",
            "target_id": "128",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "119",
            "target_id": "128",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 0.7,
          "sequence_path": 0.7200000000000001,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "128",
                  "190",
                  "PEEROF"
                ]
              ],
              "score": 0.7,
              "type": "relationship_chain",
              "source": "190"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "190",
                  "119",
                  "CANPRECEDE"
                ],
                [
                  "119",
                  "128",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "vulnerability_sequence_forward",
              "source": "190"
            },
            "peer_relationship": {
              "path": [
                [
                  "128",
                  "190",
                  "PEEROF"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "190"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2698
          }
        }
      },
      "similarity": 2.2698
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-390",
      "CWE-125",
      "CWE-131",
      "CWE-790",
      "CWE-252",
      "CWE-120",
      "CWE-425",
      "CWE-912",
      "CWE-128",
      "CWE-401",
      "CWE-1285",
      "CWE-674",
      "CWE-122",
      "CWE-755",
      "CWE-78",
      "CWE-789",
      "CWE-121",
      "CWE-1284",
      "CWE-190",
      "CWE-124",
      "CWE-119",
      "CWE-134"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}