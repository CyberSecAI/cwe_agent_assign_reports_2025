{
  "retriever": "sparse",
  "query": "In the Linux kernel, the following vulnerability has been resolved posix-clock Fix missing timespec64 check in pc_clock_settime() As Andrew pointed out, it will make sense that the PTP core checked timespec64 structs tv_sec and tv_nsec range before calling ptp->info->settime64(). As the man manual of clock_settime() said, if tp.tv_sec is negative or tp.tv_nsec is outside the range [0..999,999,999], it should return EINVAL, which include dynamic clocks which handles PTP clock, and the condition is consistent with timespec64_valid(). As Thomas suggested, timespec64_valid() only check the timespec is valid, but not ensure that the time is in a valid range, so check it ahead using timespec64_valid_strict() in pc_clock_settime() and return -EINVAL if not valid. There are some drivers that use tp->tv_sec and tp->tv_nsec directly to write registers without validity checks and assume that the higher layer has checked it, which is dangerous and will benefit from this, such as hclge_ptp_settime(), igb_ptp_settime_i210(), _rcar_gen4_ptp_settime(), and some drivers can remove the checks of itself.",
  "keyphrases": {
    "weakness": [
      "missing timespec64 check"
    ]
  },
  "timestamp": "2025-07-12 05:29:09",
  "cve_id": "CVE-2024-50195",
  "result_count": 10,
  "results": [
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 750.4253823609107,
      "search_source": "weakness:missing timespec64 check"
    },
    {
      "cwe_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "score": 716.9979856995313,
      "search_source": "weakness:missing timespec64 check"
    },
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "score": 700.8508436330609,
      "search_source": "weakness:missing timespec64 check"
    },
    {
      "cwe_id": "863",
      "name": "Incorrect Authorization",
      "score": 694.2737337586739,
      "search_source": "weakness:missing timespec64 check"
    },
    {
      "cwe_id": "824",
      "name": "Access of Uninitialized Pointer",
      "score": 680.364296988852,
      "search_source": "weakness:missing timespec64 check"
    },
    {
      "cwe_id": "125",
      "name": "Out-of-bounds Read",
      "score": 671.3612124970805,
      "search_source": "weakness:missing timespec64 check"
    },
    {
      "cwe_id": "252",
      "name": "Unchecked Return Value",
      "score": 670.9262553039517,
      "search_source": "weakness:missing timespec64 check"
    },
    {
      "cwe_id": "823",
      "name": "Use of Out-of-range Pointer Offset",
      "score": 669.870851171528,
      "search_source": "weakness:missing timespec64 check"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 667.8770545873568,
      "search_source": "weakness:missing timespec64 check"
    },
    {
      "cwe_id": "754",
      "name": "Improper Check for Unusual or Exceptional Conditions",
      "score": 659.5130263068462,
      "search_source": "weakness:missing timespec64 check"
    }
  ]
}