{
  "method": "sparse_weakness_1",
  "query": "In the Linux kernel, the following vulnerability has been resolved iommu/vt-d Fix suspicious RCU usage Commit (iommu/vt-d Allocate DMAR fault interrupts locally) moved the call to enable_drhd_fault_handling() to a code path that does not hold any lock while traversing the drhd list. Fix it by ensuring the dmar_global_lock lock is held when traversing the drhd list. Without this fix, the following warning is triggered ============================= WARNING suspicious RCU usage 6.14.0-rc3 #55 Not tainted ----------------------------- drivers/iommu/intel/dmar.c2046 RCU-list traversed in non-reader section!! other info that might help us debug this rcu_scheduler_active = 1, debug_locks = 1 2 locks held by cpuhp/1/23 #0 ffffffff84a67c50 (cpu_hotplug_lock){++++}-{00}, at cpuhp_thread_fun+0x87/0x2c0 #1 ffffffff84a6a380 (cpuhp_state-up){+.+.}-{00}, at cpuhp_thread_fun+0x87/0x2c0 stack backtrace CPU 1 UID 0 PID 23 Comm cpuhp/1 Not tainted 6.14.0-rc3 #55 Call Trace dump_stack_lvl+0xb7/0xd0 lockdep_rcu_suspicious+0x159/0x1f0 ? __pfx_enable_drhd_fault_handling+0x10/0x10 enable_drhd_fault_handling+0x151/0x180 cpuhp_invoke_callback+0x1df/0x990 cpuhp_thread_fun+0x1ea/0x2c0 smpboot_thread_fn+0x1f5/0x2e0 ? __pfx_smpboot_thread_fn+0x10/0x10 kthread+0x12a/0x2d0 ? __pfx_kthread+0x10/0x10 ret_from_fork+0x4a/0x60 ? __pfx_kthread+0x10/0x10 ret_from_fork_asm+0x1a/0x30 Holding the lock in enable_drhd_fault_handling() triggers a lockdep splat about a possible deadlock between dmar_global_lock and cpu_hotplug_lock. This is avoided by not holding dmar_global_lock when calling iommu_device_register(), which initiates the device probe process.",
  "keyphrases": {
    "weakness": "RCU usage"
  },
  "timestamp": "2025-07-12T09:57:13.216350",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "667",
      "name": "Improper Locking",
      "score": 631.6570234950964
    },
    {
      "doc_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "score": 587.528427843301
    },
    {
      "doc_id": "835",
      "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
      "score": 577.9806713199305
    },
    {
      "doc_id": "400",
      "name": "Uncontrolled Resource Consumption",
      "score": 577.6722474995644
    },
    {
      "doc_id": "401",
      "name": "Missing Release of Memory after Effective Lifetime",
      "score": 565.2868365895845
    }
  ]
}