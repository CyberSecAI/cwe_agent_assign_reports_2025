{
  "cve_id": "CVE-2025-46688",
  "description": "quickjs-ng through 0.9.0 has an **incorrect size calculation** in JS_ReadBigInt for a BigInt, leading to a **heap-based buffer overflow**. QuickJS before 2025-04-26 is also affected.",
  "key_phrases": {
    "component": "JS_ReadBigInt for BigInt",
    "rootcause": "incorrect size calculation",
    "vector": "",
    "weakness": "heap-based buffer overflow",
    "product": "quickjs-ng, QuickJS",
    "impact": "",
    "attacker": "",
    "version": "through 0.9.0, before 2025-04-26"
  },
  "reference_content": "Here's a breakdown of the provided content, focusing on the CVE-related information:\n\n**CVE ID:** CVE-2025-46688 (Placeholder - needs actual description)\n\n**Analysis:**\n\nThe provided content details fixes for heap buffer overflows in the QuickJS JavaScript engine.  It appears to address two related vulnerabilities:\n\n*   **Vulnerability 1 (quickjs.c):** A buffer overflow in `JS_ReadString` and `JS_ReadBigInt` due to missing length checks and incorrect size calculations. This is the vulnerability addressed by commit `1eb05e44fa` (cherry-picked into quickjs-ng as `28fa43d3ddff2c1ba91b6e3a788b2d7ba82d1465`).\n*   **Vulnerability 2 (tests/test\\_bjson.js):**  A change to the test suite (`test_bjson.js`) to handle potential errors during BJSON parsing, specifically related to invalid version errors. This seems to be related to the first vulnerability, as it updates the test corpus to account for the fix.\n\n**Extracted Information (Vulnerability 1 - quickjs.c):**\n\n*   **Root Cause:**\n    *   Missing length check in `JS_ReadString` allowing allocation of a buffer smaller than needed.\n    *   Incorrect size calculation in `JS_ReadBigInt` leading to a smaller buffer allocation than required.\n*   **Weaknesses/Vulnerabilities Present:**\n    *   Heap buffer overflow.\n    *   Integer overflow (in the size calculation for `JS_ReadBigInt`).\n*   **Impact of Exploitation:**\n    *   Potential for arbitrary code execution (heap corruption).\n*   **Attack Vectors:**\n    *   Crafted input (BJSON or JavaScript) that triggers the vulnerable code paths.  The provided example input demonstrates a potential exploit.\n*   **Required Attacker Capabilities/Position:**\n    *   Ability to provide malicious input to the QuickJS engine.\n*   **Mitigation/Fix:**\n    *   Added length checks in `JS_ReadString` to prevent allocation of too-small buffers.\n    *   Corrected the size calculation in `JS_ReadBigInt` to accurately determine the required buffer size.\n    *   Updated the test suite to handle potential errors.\n\n**Additional Notes:**\n\n*   The content indicates that this fix was originally implemented in the `bellard/quickjs` repository and then cherry-picked into the `quickjs-ng` fork.\n*   The ASAN (AddressSanitizer) reports provide detailed information about the memory corruption, including the addresses and call stacks involved.\n*   The provided content gives more detail than a typical CVE description would. It includes code snippets, ASAN reports, and reproduction steps.\n\n**Response:**\n\nThe content is **RELEVANT** and provides detailed information about a heap buffer overflow vulnerability in QuickJS. The extracted information above summarizes the key details.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-131 | Incorrect Calculation of Buffer Size | 0.9 | Base | Primary CWE | Allowed |\n| CWE-122 | Heap-based Buffer Overflow | 0.8 | Variant | Secondary Candidate | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.85\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship identified is that **CWE-131 (Incorrect Calculation of Buffer Size)** can precede **CWE-122 (Heap-based Buffer Overflow)**. **CWE-131** is the root cause, leading to the buffer overflow. The analysis also considered **CWE-119 (Improper Restriction of Operations within the Bounds of a Memory Buffer)**, but it was deemed too general. **CWE-131** is a base level CWE, while **CWE-122** is a variant, providing a good balance of specificity.\n\n```mermaid\ngraph TD\n    cwe131[\"CWE-131: Incorrect Calculation of Buffer Size\"]\n    cwe122[\"CWE-122: Heap-based Buffer Overflow\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\"]\n\n    cwe122 -->|CHILDOF| cwe119\n    cwe131 -->|CANPRECEDE| cwe122\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe131 primary\n    class cwe122 secondary\n    class cwe119 tertiary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with an **incorrect size calculation** (**CWE-131**), which results in a buffer being allocated too small. Subsequently, when data is written to this undersized buffer, a **heap-based buffer overflow** (**CWE-122**) occurs.\n\n## Summary of Analysis\nThe initial analysis focused on the **incorrect size calculation** as the root cause, leading to a **heap-based buffer overflow**. The evidence from the vulnerability description and CVE reference links supports this. The graph relationships highlight that **CWE-131** can lead to **CWE-122**. The final selection of **CWE-131** and **CWE-122** are at the optimal level of specificity, with **CWE-131** being the primary cause and **CWE-122** as the resulting vulnerability.\n\nThe vulnerability description states: \"quickjs-ng through 0.9.0 has an **incorrect size calculation** in JS_ReadBigInt for a BigInt, leading to a **heap-based buffer overflow**.\" The CVE reference links content summary also mentions \"Incorrect size calculation in `JS_ReadBigInt` leading to a smaller buffer allocation than required.\" This clearly indicates that the incorrect size calculation is the root cause.\n\n**CWE-119** was considered but not used because it is too general. The retriever results also discourage its use.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-131: Incorrect Calculation of Buffer Size\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-122: Heap-based Buffer Overflow\n**Abstraction Level**: Variant\n**Similarity Score**: 0.69\n**Source**: dense\n\n**Description**:\nA heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc().\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\n**Abstraction Level**: class\n**Similarity Score**: 2.55\n**Source**: graph\n\n**Description**:\nCWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-119 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available.\n\n**Relationships**:\n- CHILDOF -> CWE-118\n- CHILDOF -> CWE-20\n- PARENTOF -> CWE-120\n- PARENTOF -> CWE-123\n- PARENTOF -> CWE-125\n\n## CWE-131: Incorrect Calculation of Buffer Size\n\n**CWE-131 (Incorrect Calculation of Buffer Size)**: The vulnerability involves an **incorrect size calculation** within the `JS_ReadBigInt` function, leading to a buffer being smaller than required. This matches the description of **CWE-131**, which states that the product does not correctly calculate the size to be used when allocating a buffer, potentially leading to a buffer overflow. The security implication is a potential buffer overflow, which can lead to arbitrary code execution. This is the primary root cause. Confidence: 0.9\n\n## CWE-122: Heap-based Buffer Overflow\n\n**CWE-122 (Heap-based Buffer Overflow)**: The vulnerability culminates in a **heap-based buffer overflow**. This aligns with the description of **CWE-122**, which is a buffer overflow where the affected buffer resides in the heap. The security impact is the potential for arbitrary code execution due to memory corruption in the heap. This is a secondary weakness resulting from the incorrect size calculation. Confidence: 0.8\n\n## CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\n**CWE-119** was considered, but it's a very broad class. The vulnerability details provide enough information to pinpoint the root cause as **CWE-131** and the resulting overflow as **CWE-122**, making **CWE-119** less suitable. Its usage is also discouraged by the mapping guidance.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-131 | Incorrect Calculation of Buffer Size | 0.9 | Base | Primary CWE | Allowed |\n| CWE-122 | Heap-based Buffer Overflow | 0.8 | Variant | Secondary Candidate | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.85\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship identified is that **CWE-131 (Incorrect Calculation of Buffer Size)** can precede **CWE-122 (Heap-based Buffer Overflow)**. **CWE-131** is the root cause, leading to the buffer overflow. The analysis also considered **CWE-119 (Improper Restriction of Operations within the Bounds of a Memory Buffer)**, but it was deemed too general. **CWE-131** is a base level CWE, while **CWE-122** is a variant, providing a good balance of specificity.\n\n```mermaid\ngraph TD\n    cwe131[\"CWE-131: Incorrect Calculation of Buffer Size\"]\n    cwe122[\"CWE-122: Heap-based Buffer Overflow\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\"]\n\n    cwe122 -->|CHILDOF| cwe119\n    cwe131 -->|CANPRECEDE| cwe122\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe131 primary\n    class cwe122 secondary\n    class cwe119 tertiary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with an **incorrect size calculation** (**CWE-131**), which results in a buffer being allocated too small. Subsequently, when data is written to this undersized buffer, a **heap-based buffer overflow** (**CWE-122**) occurs.\n\n## Summary of Analysis\nThe initial analysis focused on the **incorrect size calculation** as the root cause, leading to a **heap-based buffer overflow**. The evidence from the vulnerability description and CVE reference links supports this. The graph relationships highlight that **CWE-131** can lead to **CWE-122**. The final selection of **CWE-131** and **CWE-122** are at the optimal level of specificity, with **CWE-131** being the primary cause and **CWE-122** as the resulting vulnerability.\n\nThe vulnerability description states: \"quickjs-ng through 0.9.0 has an **incorrect size calculation** in JS_ReadBigInt for a BigInt, leading to a **heap-based buffer overflow**.\" The CVE reference links content summary also mentions \"Incorrect size calculation in `JS_ReadBigInt` leading to a smaller buffer allocation than required.\" This clearly indicates that the incorrect size calculation is the root cause.\n\n**CWE-119** was considered but not used because it is too general. The retriever results also discourage its use.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-131: Incorrect Calculation of Buffer Size\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-122: Heap-based Buffer Overflow\n**Abstraction Level**: Variant\n**Similarity Score**: 0.69\n**Source**: dense\n\n**Description**:\nA heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc().\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\n**Abstraction Level**: class\n**Similarity Score**: 2.55\n**Source**: graph\n\n**Description**:\nCWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-119 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available.\n\n**Relationships**:\n- CHILDOF -> CWE-118\n- CHILDOF -> CWE-20\n- PARENTOF -> CWE-120\n- PARENTOF -> CWE-123\n- PARENTOF -> CWE-125\n\n## CWE-131: Incorrect Calculation of Buffer Size\n\n**CWE-131 (Incorrect Calculation of Buffer Size)**: The vulnerability involves an **incorrect size calculation** within the `JS_ReadBigInt` function, leading to a buffer being smaller than required. This matches the description of **CWE-131**, which states that the product does not correctly calculate the size to be used when allocating a buffer, potentially leading to a buffer overflow. The security implication is a potential buffer overflow, which can lead to arbitrary code execution. This is the primary root cause. Confidence: 0.9\n\n## CWE-122: Heap-based Buffer Overflow\n\n**CWE-122 (Heap-based Buffer Overflow)**: The vulnerability culminates in a **heap-based buffer overflow**. This aligns with the description of **CWE-122**, which is a buffer overflow where the affected buffer resides in the heap. The security impact is the potential for arbitrary code execution due to memory corruption in the heap. This is a secondary weakness resulting from the incorrect size calculation. Confidence: 0.8\n\n## CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\n**CWE-119** was considered, but it's a very broad class. The vulnerability details provide enough information to pinpoint the root cause as **CWE-131** and the resulting overflow as **CWE-122**, making **CWE-119** less suitable. Its usage is also discouraged by the mapping guidance.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-123:**\n- 123 (Write-what-where Condition) - ROOT\n\n\n**Chain starting from CWE-125:**\n- 125 (Out-of-bounds Read) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "119",
        "name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Buffer Overflow",
        "match_reason": "term_in_phrase_whole_phrase"
      },
      "similarity": 800.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "190",
        "name": "Integer Overflow or Wraparound",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Overflow",
        "match_reason": "term_in_phrase_whole_phrase"
      },
      "similarity": 800.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "131",
        "name": "Incorrect Calculation of Buffer Size",
        "source": "sparse"
      },
      "similarity": 236.74478306839745
    },
    {
      "metadata": {
        "doc_id": "193",
        "name": "Off-by-one Error",
        "source": "sparse"
      },
      "similarity": 220.8846038693259
    },
    {
      "metadata": {
        "doc_id": "122",
        "name": "Heap-based Buffer Overflow",
        "source": "sparse"
      },
      "similarity": 214.93662375387652
    },
    {
      "metadata": {
        "doc_id": "681",
        "name": "Incorrect Conversion between Numeric Types",
        "source": "sparse"
      },
      "similarity": 206.74154162918353
    },
    {
      "metadata": {
        "doc_id": "197",
        "name": "Numeric Truncation Error",
        "source": "sparse"
      },
      "similarity": 206.29965598454064
    },
    {
      "metadata": {
        "doc_id": "1284",
        "name": "Improper Validation of Specified Quantity in Input",
        "source": "sparse"
      },
      "similarity": 194.59765610208754
    },
    {
      "metadata": {
        "doc_id": "126",
        "name": "Buffer Over-read",
        "type": "Variant",
        "original_content": "The product reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer.",
        "keyphrase_source": "weakness:heap-based buffer overflow",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse",
            "graph"
          ],
          "retriever_count": 3,
          "normalized_scores": {
            "dense": 0.5335157050258917,
            "sparse": 191.91403843757513,
            "graph": 2.2385061405009474
          }
        }
      },
      "similarity": 0.5335157050258917
    },
    {
      "doc_id": "128",
      "text": "CWE-128: Wrap-around Error",
      "score": 2.9120000000000004,
      "metadata": {
        "doc_id": "128",
        "name": "Wrap-around Error",
        "type": "base",
        "original_content": "CWE-128: Wrap-around Error",
        "relationships": [
          {
            "source_id": "128",
            "target_id": "190",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "128",
            "target_id": "119",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "128",
            "target_id": "682",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "682",
            "target_id": "128",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "119",
            "target_id": "128",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "119",
                  "128",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "119"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "119",
                  "128",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "119"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "128",
                  "119",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "119"
            },
            "peer_relationship": {
              "path": [
                [
                  "128",
                  "190",
                  "PEEROF"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "190"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.9120000000000004
          }
        }
      },
      "similarity": 2.9120000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-123",
      "CWE-125",
      "CWE-131",
      "CWE-122",
      "CWE-118",
      "CWE-20",
      "CWE-119",
      "CWE-120"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}