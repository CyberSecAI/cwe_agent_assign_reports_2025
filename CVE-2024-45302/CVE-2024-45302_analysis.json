{
  "cve_id": "CVE-2024-45302",
  "description": "RestSharp is a Simple REST and HTTP API Client for .NET. The second argument to `RestRequest.AddHeader` (the header value) is vulnerable to **CRLF injection**. The same applies to `RestRequest.AddOrUpdateHeader` and `RestClient.AddDefaultHeader`. The way HTTP headers are added to a request is via the `HttpHeaders.TryAddWithoutValidation` method which does not check for CRLF characters in the header value. This means that any headers from a `RestSharp.RequestHeaders` object are added to the request in such a way that they are vulnerable to CRLF-injection. In general, CRLF-injection into a HTTP header (when using HTTP/1.1) means that one can inject additional HTTP headers or smuggle whole HTTP requests. If an application using the RestSharp library passes a user-controllable value through to a header, then that application becomes vulnerable to CRLF-injection. This is not necessarily a security issue for a command line application like the one above, but if such code were present in a web application then it becomes vulnerable to request splitting (as shown in the PoC) and thus Server Side Request Forgery. Strictly speaking this is a potential vulnerability in applications using RestSharp, not in RestSharp itself, but I would argue that at the very least there needs to be a warning about this behaviour in the RestSharp documentation. RestSharp has addressed this issue in version 112.0.0. All users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "key_phrases": {
    "rootcause": "RestSharp's handling of header values",
    "weakness": "CRLF injection",
    "impact": [
      "inject additional HTTP headers",
      "smuggle whole HTTP requests",
      "server-side request forgery"
    ],
    "vector": "",
    "attacker": "",
    "product": "RestSharp",
    "version": "prior to 112.0.0",
    "component": [
      "RestRequest.AddHeader",
      "RestRequest.AddOrUpdateHeader",
      "RestClient.AddDefaultHeader"
    ]
  },
  "reference_content": "Based on the provided information, here's an analysis of CVE-2024-45302:\n\n**Root Cause of Vulnerability:**\nThe vulnerability stems from the `HttpHeaders.TryAddWithoutValidation` method not sanitizing header values for Carriage Return (CR) and Line Feed (LF) characters. This allows an attacker to inject CRLF sequences into HTTP headers.\n\n**Weaknesses/Vulnerabilities Present:**\n- **CRLF Injection:** The primary vulnerability is the lack of CRLF character validation in header values. This enables an attacker to inject arbitrary headers or even complete HTTP requests.\n- **`RestRequest.AddHeader`, `RestRequest.AddOrUpdateHeader` & `RestClient.AddDefaultHeader`:** These methods are vulnerable, as they pass unsanitized user input to the underlying `TryAddWithoutValidation` method.\n\n**Impact of Exploitation:**\n- **HTTP Request Smuggling/Splitting:** By injecting CRLF sequences, an attacker can split a single HTTP request into multiple requests, potentially leading to:\n  - **Server-Side Request Forgery (SSRF):** An attacker could force the server to make requests to internal or external resources, bypassing security measures.\n  - **Header Injection:** An attacker can inject arbitrary headers, potentially altering the behavior of the application.\n  - **Cache Poisoning:** Manipulating responses that are cached can lead to further security issues.\n- **Information Disclosure:** Depending on the injected headers and requests, an attacker could gain access to sensitive information.\n\n**Attack Vectors:**\n- **User-Controlled Input:** The vulnerability is triggered when an application uses a user-controllable value to populate a header through `RestRequest.AddHeader`, `RestRequest.AddOrUpdateHeader`, or `RestClient.AddDefaultHeader`.\n- **HTTP Request:** The attack vector involves crafting a malicious header value containing CRLF characters within an HTTP request.\n\n**Required Attacker Capabilities/Position:**\n- **Ability to control header values:** An attacker must be able to control the input that goes into header values when using `RestSharp` methods. This often involves exploiting input parameters in an API or form field.\n- **Network Access:**  The attacker needs to be able to send an HTTP request to the vulnerable application.\n\n**Additional Details from the provided content:**\n- The vulnerability was fixed in version 112.0.0 of RestSharp.\n- The provided PoC code demonstrates how to inject CRLF characters, resulting in an HTTP request split and the server receiving and processing two separate requests.\n- CVSS score for this vulnerability is 6.1 which is Moderate.\n\nIn summary, CVE-2024-45302 highlights a classic CRLF injection vulnerability in RestSharp due to insufficient header value sanitization. This can lead to severe security issues such as request smuggling, SSRF, and data breaches. Applications using RestSharp and allowing user input in headers need to update to the patched version and implement appropriate input validation to mitigate this risk.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-93 | Improper Neutralization of CRLF Sequences ('CRLF Injection') | 1.0 | Base | Primary | Allowed |\n| CWE-113 | Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting') | 0.9 | Variant | Secondary Candidate | Allowed |\n| CWE-444 | Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling') | 0.7 | Base | Secondary Candidate | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary CWE is CWE-93, which represents the fundamental **CRLF injection** issue. CWE-113 is a variant that is specific to HTTP headers, and CWE-444 represents the potential impact of exploiting the CRLF injection.\n\n```mermaid\ngraph TD\n    cwe93[\"CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')\"]\n    cwe113[\"CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')\"]\n    cwe444[\"CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')\"]\n\n    cwe113 -->|CHILDOF| cwe93\n    cwe444 -->|CANFOLLOW| cwe93\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n\n    class cwe93 primary\n    class cwe113,cwe444 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with the **improper handling of header values** in RestSharp, leading to **CRLF injection**. This can then be exploited to achieve HTTP request smuggling or splitting, and potentially SSRF.\n\nCWE-93 (Root Cause: **CRLF Injection**) -> CWE-113 (Specific Context: HTTP Headers) -> CWE-444 (Potential Impact: HTTP Request Smuggling)\n\n## Summary of Analysis\n\nThe vulnerability in RestSharp allows for **CRLF injection** due to the `HttpHeaders.TryAddWithoutValidation` method **not sanitizing header values**. This can lead to HTTP request smuggling and other attacks.\n\nThe primary CWE is CWE-93, which captures the core issue of **improper neutralization of CRLF sequences**. CWE-113 is a more specific variant focusing on HTTP headers, while CWE-444 describes a potential consequence (HTTP request smuggling).\n\nThe evidence from the vulnerability description supports this classification:\n\n*   \"The second argument to `RestRequest.AddHeader` (the header value) is vulnerable to **CRLF injection**.\"\n*   \"The way HTTP headers are added to a request is via the `HttpHeaders.TryAddWithoutValidation` method which does not check for CRLF characters in the header value.\"\n*   \"In general, **CRLF-injection** into a HTTP header (when using HTTP/1.1) means that one can inject additional HTTP headers or smuggle whole HTTP requests.\"\n*   \"If an application using the RestSharp library passes a user-controllable value through to a header, then that application becomes vulnerable to **CRLF-injection**.\"\n\nThe retriever results also support this, with CWE-93 and CWE-113 being the top matches.\n\nCWE-79 (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')) was considered, but it's not applicable because the vulnerability is not related to web page generation or XSS. CWE-78 (Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')) was not selected because the vulnerability is not related to OS command execution. CWE-1333 (Inefficient Regular Expression Complexity) was not selected because there is no indication in the description that regular expressions are involved. CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')) was considered, but CWE-93 is a more specific and appropriate choice.",
  "analysis_with_relationships": "# Summary\n\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-93 | Improper Neutralization of CRLF Sequences ('CRLF Injection') | 1.0 | Base | Primary | Allowed |\n| CWE-113 | Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting') | 0.9 | Variant | Secondary Candidate | Allowed |\n| CWE-444 | Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling') | 0.7 | Base | Secondary Candidate | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary CWE is CWE-93, which represents the fundamental **CRLF injection** issue. CWE-113 is a variant that is specific to HTTP headers, and CWE-444 represents the potential impact of exploiting the CRLF injection.\n\n```mermaid\ngraph TD\n    cwe93[\"CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')\"]\n    cwe113[\"CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')\"]\n    cwe444[\"CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')\"]\n\n    cwe113 -->|CHILDOF| cwe93\n    cwe444 -->|CANFOLLOW| cwe93\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n\n    class cwe93 primary\n    class cwe113,cwe444 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with the **improper handling of header values** in RestSharp, leading to **CRLF injection**. This can then be exploited to achieve HTTP request smuggling or splitting, and potentially SSRF.\n\nCWE-93 (Root Cause: **CRLF Injection**) -> CWE-113 (Specific Context: HTTP Headers) -> CWE-444 (Potential Impact: HTTP Request Smuggling)\n\n## Summary of Analysis\n\nThe vulnerability in RestSharp allows for **CRLF injection** due to the `HttpHeaders.TryAddWithoutValidation` method **not sanitizing header values**. This can lead to HTTP request smuggling and other attacks.\n\nThe primary CWE is CWE-93, which captures the core issue of **improper neutralization of CRLF sequences**. CWE-113 is a more specific variant focusing on HTTP headers, while CWE-444 describes a potential consequence (HTTP request smuggling).\n\nThe evidence from the vulnerability description supports this classification:\n\n*   \"The second argument to `RestRequest.AddHeader` (the header value) is vulnerable to **CRLF injection**.\"\n*   \"The way HTTP headers are added to a request is via the `HttpHeaders.TryAddWithoutValidation` method which does not check for CRLF characters in the header value.\"\n*   \"In general, **CRLF-injection** into a HTTP header (when using HTTP/1.1) means that one can inject additional HTTP headers or smuggle whole HTTP requests.\"\n*   \"If an application using the RestSharp library passes a user-controllable value through to a header, then that application becomes vulnerable to **CRLF-injection**.\"\n\nThe retriever results also support this, with CWE-93 and CWE-113 being the top matches.\n\nCWE-79 (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')) was considered, but it's not applicable because the vulnerability is not related to web page generation or XSS. CWE-78 (Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')) was not selected because the vulnerability is not related to OS command execution. CWE-1333 (Inefficient Regular Expression Complexity) was not selected because there is no indication in the description that regular expressions are involved. CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')) was considered, but CWE-93 is a more specific and appropriate choice.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-93:**\n- 93 (Improper Neutralization of CRLF Sequences ('CRLF Injection')) - ROOT\n\n\n**Chain starting from CWE-444:**\n- 444 (Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "113",
        "name": "Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')",
        "source": "sparse"
      },
      "similarity": 1549.5982863431577
    },
    {
      "metadata": {
        "doc_id": "93",
        "name": "Improper Neutralization of CRLF Sequences ('CRLF Injection')",
        "source": "sparse"
      },
      "similarity": 1529.2502837210416
    },
    {
      "metadata": {
        "doc_id": "1333",
        "name": "Inefficient Regular Expression Complexity",
        "source": "sparse"
      },
      "similarity": 1341.5189815100498
    },
    {
      "metadata": {
        "doc_id": "444",
        "name": "Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')",
        "source": "sparse"
      },
      "similarity": 1335.309696273864
    },
    {
      "metadata": {
        "doc_id": "74",
        "name": "Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')",
        "source": "sparse"
      },
      "similarity": 1313.6274818779839
    },
    {
      "metadata": {
        "doc_id": "138",
        "name": "Improper Neutralization of Special Elements",
        "source": "sparse"
      },
      "similarity": 1308.4781734947992
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 1298.9833007209809
    },
    {
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "source": "sparse"
      },
      "similarity": 1293.6037114065546
    },
    {
      "metadata": {
        "doc_id": "644",
        "name": "Improper Neutralization of HTTP Headers for Scripting Syntax",
        "type": "Variant",
        "original_content": "The product does not neutralize or incorrectly neutralizes web scripting syntax in HTTP headers that can be used by web browser components that can process raw headers, such as Flash.",
        "keyphrase_source": "rootcause:RestSharp's handling of header values",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.5217777798002758
          }
        }
      },
      "similarity": 0.5217777798002758
    },
    {
      "doc_id": "117",
      "text": "CWE-117: Improper Output Neutralization for Logs",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "117",
        "name": "Improper Output Neutralization for Logs",
        "type": "base",
        "original_content": "CWE-117: Improper Output Neutralization for Logs",
        "relationships": [
          {
            "source_id": "117",
            "target_id": "93",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "117",
            "target_id": "20",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "700"
            }
          },
          {
            "source_id": "117",
            "target_id": "116",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "93",
            "target_id": "117",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "20",
            "target_id": "117",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "700"
            }
          },
          {
            "source_id": "116",
            "target_id": "117",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "93",
                  "117",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "93"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "93",
                  "117",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_forward",
              "source": "93"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-93",
      "CWE-444",
      "CWE-79",
      "CWE-113",
      "CWE-74",
      "CWE-78",
      "CWE-1333"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}