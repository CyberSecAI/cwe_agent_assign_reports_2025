{
  "retriever": "sparse",
  "query": "In the Linux kernel, the following vulnerability has been resolved dm thin make get_first_thin use rcu-safe list first function The documentation in rculist.h explains the absence of list_empty_rcu() and cautions programmers against relying on a list_empty() -> list_first() sequence in RCU safe code. This is because each of these functions performs its own READ_ONCE() of the list head. This can lead to a situation where the list_empty() sees a valid list entry, but the subsequent list_first() sees a different view of list head state after a modification. In the case of dm-thin, this author had a production box crash from a GP fault in the process_deferred_bios path. This function saw a valid list head in get_first_thin() but when it subsequently dereferenced that and turned it into a thin_c, it got the inside of the struct pool, since the list was now empty and referring to itself. The kernel on which this occurred printed both a warning about a refcount_t being saturated, and a UBSAN error for an out-of-bounds cpuid access in the queued spinlock, prior to the fault itself. When the resulting kdump was examined, it was possible to see another thread patiently waiting in thin_dtrs synchronize_rcu. The thin_dtr call managed to pull the thin_c out of the active thins list (and have it be the last entry in the active_thins list) at just the wrong moment which lead to this crash. Fortunately, the fix here is straight forward. Switch get_first_thin() function to use list_first_or_null_rcu() which performs just a single READ_ONCE() and returns NULL if the list is already empty. This was run against the devicemapper test suites thin-provisioning suites for delete and suspend and no regressions were observed.",
  "keyphrases": {},
  "timestamp": "2025-07-14 09:42:24",
  "cve_id": "CVE-2025-21664",
  "result_count": 10,
  "results": [
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "score": 466.25115553852885,
      "search_source": "base_query"
    },
    {
      "cwe_id": "201",
      "name": "Insertion of Sensitive Information Into Sent Data",
      "score": 452.98779043732543,
      "search_source": "base_query"
    },
    {
      "cwe_id": "863",
      "name": "Incorrect Authorization",
      "score": 449.08682304330944,
      "search_source": "base_query"
    },
    {
      "cwe_id": "125",
      "name": "Out-of-bounds Read",
      "score": 444.3235677056894,
      "search_source": "base_query"
    },
    {
      "cwe_id": "909",
      "name": "Missing Initialization of Resource",
      "score": 440.3563411510193,
      "search_source": "base_query"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 437.04861111037,
      "search_source": "base_query"
    },
    {
      "cwe_id": "327",
      "name": "Use of a Broken or Risky Cryptographic Algorithm",
      "score": 433.77602259714894,
      "search_source": "base_query"
    },
    {
      "cwe_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "score": 432.94788863177854,
      "search_source": "base_query"
    },
    {
      "cwe_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "score": 429.30079397239155,
      "search_source": "base_query"
    },
    {
      "cwe_id": "184",
      "name": "Incomplete List of Disallowed Inputs",
      "score": 428.6934128278671,
      "search_source": "base_query"
    }
  ]
}