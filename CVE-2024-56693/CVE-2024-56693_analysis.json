{
  "cve_id": "CVE-2024-56693",
  "description": "In the Linux kernel, the following vulnerability has been resolved brd defer automatic disk creation until module initialization succeeds My colleague Wupeng found the following problems during fault injection BUG unable to handle page fault for address fffffbfff809d073 PGD 6e648067 P4D 123ec8067 PUD 123ec4067 PMD 100e38067 PTE 0 Oops Oops 0000",
  "key_phrases": {
    "rootcause": "",
    "weakness": "",
    "impact": [
      "BUG unable to handle page fault for address",
      "Oops"
    ],
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": ""
  },
  "reference_content": "Based on the provided content, here's an analysis of the vulnerability:\n\n**Root cause of vulnerability:**\nThe vulnerability is due to a race condition and use-after-free (UAF) scenario in the `brd` (RAM disk) driver within the Linux kernel. The `brd_init()` function was calling `brd_alloc()` before `__register_blkdev()` succeeded, and if `brd_init()` encountered an error, it would release successfully created disks. This premature release could lead to a UAF if a file descriptor was opened for the block device, causing a crash when the file operation attempts to access freed memory.\n\n**Weaknesses/vulnerabilities present:**\n*   **Race condition:**  The allocation and registration of the block device were not properly synchronized with the module initialization process, leading to potential issues if initialization failed.\n*   **Use-after-free (UAF):** The premature release of the block device's underlying structures, specifically the `fops`, could lead to UAF issues when an existing file descriptor tries to operate on that freed memory.\n\n**Impact of exploitation:**\n*   **Kernel crash:** The UAF vulnerability could cause a kernel crash, resulting in a denial-of-service (DoS).\n*   **Potential for arbitrary code execution:** While not explicitly stated in the provided text, UAF vulnerabilities can be exploited to gain control of the kernel and execute arbitrary code, depending on the specific memory layout and exploitation techniques.\n\n**Attack vectors:**\n*   **Module loading (`modprobe`):** The primary attack vector is through the loading of the `brd` module, especially with fault injection to trigger the error conditions.\n*   **File operations:** Opening, and then closing, the `/dev/ramX` devices after they have been allocated but before the `brd` module is fully initialized can trigger the UAF if module initialization fails.\n\n**Required attacker capabilities/position:**\n*   **Ability to load kernel modules:** The attacker needs to have the ability to load kernel modules, typically requiring `root` or equivalent privileges.\n*   **Ability to open and close device files:** The attacker needs the ability to open and close device files, typically through system calls like open() and close().\n*   **Fault injection capability:** Triggering the vulnerability reliably might require specific fault injection techniques to cause the `brd_alloc` operation to fail after a disk is successfully allocated and opened.\n\n**Technical Details:**\n\nThe provided text outlines two cases where the vulnerability can be triggered:\n\n*   **Case 1:** A `modprobe brd` command is executed. The code allocates the brd device successfully but fails later when trying to allocate more. The error path during modprobe will cause a premature release of the already allocated disk after it was opened. This release then leads to a UAF when the corresponding file is closed, triggering a crash.\n\n*   **Case 2:** A `modprobe brd` command is executed, and a device file (`/dev/ram0`) is opened. Then the `brd_alloc` fails, and the device file is then closed. The underlying disk structure was freed when `brd_alloc` failed but the `fops` structure was still referenced from the closed file. This triggers a UAF when the `fops->release` function is called during the close.\n\n**Fix:**\nThe fix involves:\n\n1.  **Deferring disk creation:** Delaying the `brd_alloc()` call until after `__register_blkdev()` succeeds.\n2.  **Introducing `brd_devices_mutex`:** Adding a mutex to serialize modifications to the `brd_list`. This prevents race conditions and ensures proper allocation/deallocation.\n3.  **Using `brd_find_or_alloc_device` and `brd_free_device`**: These new functions centralize the allocation and deallocation logic and properly uses the mutex.\n\nThe content provides more details on the vulnerability and its exploitation than the official CVE description.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n\n| CWE ID  | CWE Name                                                                                               | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :------------------------------------------------------------------------------------------------------- | :--------- | :---------------------- | :------------------------------ | :------------------------------ |\n| CWE-362   | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.8        | Class                     | Primary CWE                     | Allowed-with-Review           |\n| CWE-416   | Use After Free                                                                                           | 0.7        | Base                      | Secondary Candidate             | Allowed                       |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.75\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\n\nThe primary weakness is a **race condition** (CWE-362) leading to a **use-after-free** (CWE-416). CWE-362 is a class-level CWE and doesn't have a direct parent-child relationship with CWE-416. However, a race condition can *precede* a use-after-free if resources are improperly synchronized during allocation and deallocation. The fix introduced a mutex which prevents **race conditions** and ensures proper allocation/deallocation.\n\n```mermaid\ngraph TD\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    cwe416[\"CWE-416: Use After Free\"]\n    \n    cwe362 -->|CANPRECEDE| cwe416\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n\n    class cwe362 primary\n    class cwe416 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with a **race condition** (CWE-362) in the `brd` driver's allocation/deallocation logic. This leads to premature release of a block device's resources. A file descriptor, still referencing the freed memory, results in a **use-after-free** (CWE-416) when an operation is attempted on the freed memory. The chain highlights how improper synchronization can lead to memory corruption vulnerabilities.\n\n## Summary of Analysis\n\nThe analysis is based on the provided vulnerability description and the CVE reference links content summary. The key evidence points to a **race condition** during resource allocation, compounded by a **use-after-free** vulnerability.\n\nThe **race condition** (CWE-362) occurs because the allocation and registration of the block device are not properly synchronized with the module initialization process. If initialization fails, the premature release of the block device can occur. This is supported by the text: *\"The vulnerability is due to a race condition and use-after-free (UAF) scenario in the `brd` (RAM disk) driver within the Linux kernel. The `brd_init()` function was calling `brd_alloc()` before `__register_blkdev()` succeeded, and if `brd_init()` encountered an error, it would release successfully created disks.\"*\n\nThe **use-after-free** (CWE-416) vulnerability arises because a file descriptor may still reference the memory after the block device's resources have been released. This is supported by the text: *\"This premature release could lead to a UAF if a file descriptor was opened for the block device, causing a crash when the file operation attempts to access freed memory.\"*\n\nThe fix introduces a mutex to serialize modifications, addressing the **race condition** and preventing the **use-after-free**. This supports the assessment that these two weaknesses are present.\n\nCWE-362 is classified as a Class, and the mapping guidance suggests reviewing child entries for more appropriate mappings. However, there isn't a clear child that fits the specific synchronization issue in the `brd` driver. Therefore, CWE-362 is the most appropriate high-level classification.\n\nCWE-416 is a Base level which is appropriate.\n\nBased on the evidence, the selected CWEs are at the optimal level of specificity.\n\nRelevant CWE Information:\n\n**CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')**\n\n*   **Abstraction Level**: Class\n*   **Similarity Score**: 0.77 (dense), 1380.60 (sparse)\n*   **Description**: The product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n*   **Mapping Guidance**: Allowed-with-Review. Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n**CWE-416: Use After Free**\n\n*   **Abstraction Level**: Base\n*   **Similarity Score**: N/A\n*   **Description**: Referencing memory after it has been freed can cause a program to crash, execute arbitrary code, or other unexpected behavior.\n*   **Mapping Guidance**: Allowed.\n\nCWEs considered but not used:\n\n*   CWE-770: Allocation of Resources Without Limits or Throttling - While resource allocation is involved, the core issue is not the lack of limits but the **race condition** and subsequent **use-after-free**.\n*   CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer - This is a broad category, and CWE-416 provides a more specific description of the memory corruption.\n*   CWE-787: Out-of-bounds Write - Not relevant.\n*   CWE-1284: Improper Validation of Specified Quantity in Input - Not relevant.\n*   CWE-131: Incorrect Calculation of Buffer Size - Not relevant.\n*   CWE-755: Improper Handling of Exceptional Conditions - While an error condition triggers the vulnerability, the root cause is the **race condition** and subsequent **use-after-free**.\n*   CWE-404: Improper Resource Shutdown or Release - While resource release is part of the issue, the core problem is the **race condition** that leads to premature release and the subsequent **use-after-free**.\n*   CWE-908: Use of Uninitialized Resource - Not relevant.\n*   CWE-823: Use of Out-of-range Pointer Offset - Not relevant.\n*   CWE-822: Untrusted Pointer Dereference - Not relevant.\n*   CWE-825: Expired Pointer Dereference - Not relevant.\n*   CWE-609: Double-Checked Locking - Not relevant.\n*   CWE-390: Detection of Error Condition Without Action - Not relevant.",
  "analysis_with_relationships": "# Summary\n\n| CWE ID  | CWE Name                                                                                               | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :------------------------------------------------------------------------------------------------------- | :--------- | :---------------------- | :------------------------------ | :------------------------------ |\n| CWE-362   | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.8        | Class                     | Primary CWE                     | Allowed-with-Review           |\n| CWE-416   | Use After Free                                                                                           | 0.7        | Base                      | Secondary Candidate             | Allowed                       |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.75\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\n\nThe primary weakness is a **race condition** (CWE-362) leading to a **use-after-free** (CWE-416). CWE-362 is a class-level CWE and doesn't have a direct parent-child relationship with CWE-416. However, a race condition can *precede* a use-after-free if resources are improperly synchronized during allocation and deallocation. The fix introduced a mutex which prevents **race conditions** and ensures proper allocation/deallocation.\n\n```mermaid\ngraph TD\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    cwe416[\"CWE-416: Use After Free\"]\n    \n    cwe362 -->|CANPRECEDE| cwe416\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n\n    class cwe362 primary\n    class cwe416 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with a **race condition** (CWE-362) in the `brd` driver's allocation/deallocation logic. This leads to premature release of a block device's resources. A file descriptor, still referencing the freed memory, results in a **use-after-free** (CWE-416) when an operation is attempted on the freed memory. The chain highlights how improper synchronization can lead to memory corruption vulnerabilities.\n\n## Summary of Analysis\n\nThe analysis is based on the provided vulnerability description and the CVE reference links content summary. The key evidence points to a **race condition** during resource allocation, compounded by a **use-after-free** vulnerability.\n\nThe **race condition** (CWE-362) occurs because the allocation and registration of the block device are not properly synchronized with the module initialization process. If initialization fails, the premature release of the block device can occur. This is supported by the text: *\"The vulnerability is due to a race condition and use-after-free (UAF) scenario in the `brd` (RAM disk) driver within the Linux kernel. The `brd_init()` function was calling `brd_alloc()` before `__register_blkdev()` succeeded, and if `brd_init()` encountered an error, it would release successfully created disks.\"*\n\nThe **use-after-free** (CWE-416) vulnerability arises because a file descriptor may still reference the memory after the block device's resources have been released. This is supported by the text: *\"This premature release could lead to a UAF if a file descriptor was opened for the block device, causing a crash when the file operation attempts to access freed memory.\"*\n\nThe fix introduces a mutex to serialize modifications, addressing the **race condition** and preventing the **use-after-free**. This supports the assessment that these two weaknesses are present.\n\nCWE-362 is classified as a Class, and the mapping guidance suggests reviewing child entries for more appropriate mappings. However, there isn't a clear child that fits the specific synchronization issue in the `brd` driver. Therefore, CWE-362 is the most appropriate high-level classification.\n\nCWE-416 is a Base level which is appropriate.\n\nBased on the evidence, the selected CWEs are at the optimal level of specificity.\n\nRelevant CWE Information:\n\n**CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')**\n\n*   **Abstraction Level**: Class\n*   **Similarity Score**: 0.77 (dense), 1380.60 (sparse)\n*   **Description**: The product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n*   **Mapping Guidance**: Allowed-with-Review. Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n**CWE-416: Use After Free**\n\n*   **Abstraction Level**: Base\n*   **Similarity Score**: N/A\n*   **Description**: Referencing memory after it has been freed can cause a program to crash, execute arbitrary code, or other unexpected behavior.\n*   **Mapping Guidance**: Allowed.\n\nCWEs considered but not used:\n\n*   CWE-770: Allocation of Resources Without Limits or Throttling - While resource allocation is involved, the core issue is not the lack of limits but the **race condition** and subsequent **use-after-free**.\n*   CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer - This is a broad category, and CWE-416 provides a more specific description of the memory corruption.\n*   CWE-787: Out-of-bounds Write - Not relevant.\n*   CWE-1284: Improper Validation of Specified Quantity in Input - Not relevant.\n*   CWE-131: Incorrect Calculation of Buffer Size - Not relevant.\n*   CWE-755: Improper Handling of Exceptional Conditions - While an error condition triggers the vulnerability, the root cause is the **race condition** and subsequent **use-after-free**.\n*   CWE-404: Improper Resource Shutdown or Release - While resource release is part of the issue, the core problem is the **race condition** that leads to premature release and the subsequent **use-after-free**.\n*   CWE-908: Use of Uninitialized Resource - Not relevant.\n*   CWE-823: Use of Out-of-range Pointer Offset - Not relevant.\n*   CWE-822: Untrusted Pointer Dereference - Not relevant.\n*   CWE-825: Expired Pointer Dereference - Not relevant.\n*   CWE-609: Double-Checked Locking - Not relevant.\n*   CWE-390: Detection of Error Condition Without Action - Not relevant.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-390:**\n- 390 (Detection of Error Condition Without Action) - ROOT\n\n\n**Chain starting from CWE-1284:**\n- 1284 (Improper Validation of Specified Quantity in Input) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "770",
        "name": "Allocation of Resources Without Limits or Throttling",
        "source": "sparse"
      },
      "similarity": 55.65570419980472
    },
    {
      "metadata": {
        "doc_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "source": "sparse"
      },
      "similarity": 52.0014264699049
    },
    {
      "metadata": {
        "doc_id": "401",
        "name": "Missing Release of Memory after Effective Lifetime",
        "source": "sparse"
      },
      "similarity": 50.18076917365974
    },
    {
      "metadata": {
        "doc_id": "119",
        "name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
        "source": "sparse"
      },
      "similarity": 47.806087459226916
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 47.72670097715365
    },
    {
      "metadata": {
        "doc_id": "909",
        "name": "Missing Initialization of Resource",
        "source": "sparse"
      },
      "similarity": 47.55605680488709
    },
    {
      "metadata": {
        "doc_id": "400",
        "name": "Uncontrolled Resource Consumption",
        "source": "sparse"
      },
      "similarity": 47.411650086896
    },
    {
      "metadata": {
        "doc_id": "22",
        "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
        "source": "sparse"
      },
      "similarity": 47.14519578011845
    },
    {
      "metadata": {
        "doc_id": "1285",
        "name": "Improper Validation of Specified Index, Position, or Offset in Input",
        "type": "Base",
        "original_content": "The product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties.",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.5855555261584581
          }
        }
      },
      "similarity": 0.5855555261584581
    },
    {
      "doc_id": "787",
      "text": "CWE-787: Out-of-bounds Write",
      "score": 2.8651999999999997,
      "metadata": {
        "doc_id": "787",
        "name": "Out-of-bounds Write",
        "type": "base",
        "original_content": "CWE-787: Out-of-bounds Write",
        "relationships": [
          {
            "source_id": "787",
            "target_id": "825",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "787",
            "target_id": "824",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "787",
            "target_id": "823",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "787",
            "target_id": "822",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "787",
            "target_id": "124",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "787",
            "target_id": "123",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "787",
            "target_id": "122",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "787",
            "target_id": "121",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "787",
            "target_id": "119",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1340"
            }
          },
          {
            "source_id": "787",
            "target_id": "119",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1305"
            }
          },
          {
            "source_id": "787",
            "target_id": "119",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "787",
            "target_id": "119",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "825",
            "target_id": "787",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "824",
            "target_id": "787",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "823",
            "target_id": "787",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "822",
            "target_id": "787",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "124",
            "target_id": "787",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "787",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "122",
            "target_id": "787",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "121",
            "target_id": "787",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "119",
            "target_id": "787",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "abstraction_path": 0.7200000000000001,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "822",
                  "787",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "822"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "119",
                  "787",
                  "PARENTOF"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "abstraction_path_down",
              "source": "119"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "822",
                  "787",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_forward",
              "source": "822"
            }
          }
        },
        "abstraction_level": "base",
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.8651999999999997
          }
        }
      },
      "similarity": 2.8651999999999997
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-390",
      "CWE-1284",
      "CWE-416",
      "CWE-823",
      "CWE-770",
      "CWE-404",
      "CWE-131",
      "CWE-787",
      "CWE-825",
      "CWE-362",
      "CWE-755",
      "CWE-822",
      "CWE-609",
      "CWE-119",
      "CWE-908"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}