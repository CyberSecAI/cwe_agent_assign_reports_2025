{
  "method": "sparse_weakness_1",
  "query": "In the Linux kernel, the following vulnerability has been resolved slab ensure slab->obj_exts is clear in a newly allocated slab page ktest recently reported crashes while running several buffered io tests with __alloc_tagging_slab_alloc_hook() at the top of the crash call stack. The signature indicates an invalid address dereference with low bits of slab->obj_exts being set. The bits were outside of the range used by page_memcg_data_flags and objext_flags and hence were not masked out by slab_obj_exts() when obtaining the pointer stored in slab->obj_exts. The typical crash log looks like this 00510 Unable to handle kernel NULL pointer dereference at virtual address 0000000000000010 00510 Mem abort info 00510 ESR = 0x0000000096000045 00510 EC = 0x25 DABT (current EL), IL = 32 bits 00510 SET = 0, FnV = 0 00510 EA = 0, S1PTW = 0 00510 FSC = 0x05 level 1 translation fault 00510 Data abort info 00510 ISV = 0, ISS = 0x00000045, ISS2 = 0x00000000 00510 CM = 0, WnR = 1, TnD = 0, TagAccess = 0 00510 GCS = 0, Overlay = 0, DirtyBit = 0, Xs = 0 00510 user pgtable 4k pages, 39-bit VAs, pgdp=0000000104175000 00510 [0000000000000010] pgd=0000000000000000, p4d=0000000000000000, pud=0000000000000000 00510 Internal error Oops 0000000096000045",
  "keyphrases": {
    "weakness": "invalid address dereference"
  },
  "timestamp": "2025-07-12T13:21:13.502964",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "476",
      "name": "NULL Pointer Dereference",
      "score": 592.9619121954598
    },
    {
      "doc_id": "787",
      "name": "Out-of-bounds Write",
      "score": 529.0091258285236
    },
    {
      "doc_id": "909",
      "name": "Missing Initialization of Resource",
      "score": 520.708581402331
    },
    {
      "doc_id": "822",
      "name": "Untrusted Pointer Dereference",
      "score": 516.2509876262732
    },
    {
      "doc_id": "665",
      "name": "Improper Initialization",
      "score": 514.0493347030966
    }
  ]
}