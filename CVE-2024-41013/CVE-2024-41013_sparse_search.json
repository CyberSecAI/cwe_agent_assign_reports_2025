{
  "retriever": "sparse",
  "query": "In the Linux kernel, the following vulnerability has been resolved xfs dont walk off the end of a directory data block This adds sanity checks for xfs_dir2_data_unused and xfs_dir2_data_entry to make sure dont stray beyond valid memory region. Before patching, the loop simply checks that the start offset of the dup and dep is within the range. So in a crafted image, if last entry is xfs_dir2_data_unused, we can change dup->length to dup->length-1 and leave 1 byte of space. In the next traversal, this space will be considered as dup or dep. We may encounter an out of bound read when accessing the fixed members. In the patch, we make sure that the remaining bytes large enough to hold an unused entry before accessing xfs_dir2_data_unused and xfs_dir2_data_unused is XFS_DIR2_DATA_ALIGN byte aligned. We also make sure that the remaining bytes large enough to hold a dirent with a single-byte name before accessing xfs_dir2_data_entry.",
  "keyphrases": {
    "rootcause": [
      "improper off-by-one boundary check"
    ],
    "weakness": [
      "out of bounds read"
    ]
  },
  "timestamp": "2025-07-12 03:21:25",
  "cve_id": "CVE-2024-41013",
  "result_count": 12,
  "results": [
    {
      "cwe_id": "125",
      "name": "Out-of-bounds Read",
      "score": 833.0804246910576,
      "search_source": "rootcause:improper off-by-one boundary check"
    },
    {
      "cwe_id": "193",
      "name": "Off-by-one Error",
      "score": 814.7931120734199,
      "search_source": "rootcause:improper off-by-one boundary check"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 801.6882679168257,
      "search_source": "rootcause:improper off-by-one boundary check"
    },
    {
      "cwe_id": "190",
      "name": "Integer Overflow or Wraparound",
      "score": 779.7133564454575,
      "search_source": "rootcause:improper off-by-one boundary check"
    },
    {
      "cwe_id": "787",
      "name": "Out-of-bounds Write",
      "score": 773.821270142776,
      "search_source": "rootcause:improper off-by-one boundary check"
    },
    {
      "cwe_id": "835",
      "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
      "score": 745.1747943876646,
      "search_source": "rootcause:improper off-by-one boundary check"
    },
    {
      "cwe_id": "194",
      "name": "Unexpected Sign Extension",
      "score": 731.7446277682848,
      "search_source": "rootcause:improper off-by-one boundary check"
    },
    {
      "cwe_id": "789",
      "name": "Memory Allocation with Excessive Size Value",
      "score": 728.861974671568,
      "search_source": "rootcause:improper off-by-one boundary check"
    },
    {
      "cwe_id": "617",
      "name": "Reachable Assertion",
      "score": 727.8750581601241,
      "search_source": "rootcause:improper off-by-one boundary check"
    },
    {
      "cwe_id": "126",
      "name": "Buffer Over-read",
      "score": 721.442244253695,
      "search_source": "rootcause:improper off-by-one boundary check"
    },
    {
      "cwe_id": "131",
      "name": "Incorrect Calculation of Buffer Size",
      "score": 691.5726237394779,
      "search_source": "weakness:out of bounds read"
    },
    {
      "cwe_id": "122",
      "name": "Heap-based Buffer Overflow",
      "score": 689.9804574348153,
      "search_source": "weakness:out of bounds read"
    }
  ]
}