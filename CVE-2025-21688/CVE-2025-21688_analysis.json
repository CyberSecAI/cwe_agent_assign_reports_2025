{
  "cve_id": "CVE-2025-21688",
  "description": "In the Linux kernel, the following vulnerability has been resolved drm/v3d Assign job pointer to NULL before signaling the fence In commit e4b5ccd392b9 (drm/v3d Ensure job pointer is set to NULL after job completion), we introduced a change to assign the job pointer to NULL after completing a job, indicating job completion. However, this approach created a **race condition** between the DRM scheduler workqueue and the IRQ execution thread. As soon as the fence is signaled in the IRQ execution thread, a new job starts to be executed. This results in a **race condition** where the IRQ execution thread sets the job pointer to NULL simultaneously as the `run_job()` function assigns a new job to the pointer. This **race condition** can lead to a NULL pointer dereference if the IRQ execution thread sets the job pointer to NULL after `run_job()` assigns it to the new job. When the new job completes and the GPU emits an interrupt, `v3d_irq()` is triggered, potentially causing a crash. [ 466.310099] Unable to handle **kernel NULL pointer dereference** at virtual address 00000000000000c0 [ 466.318928] Mem abort info [ 466.321723] ESR = 0x0000000096000005 [ 466.325479] EC = 0x25 DABT (current EL), IL = 32 bits [ 466.330807] SET = 0, FnV = 0 [ 466.333864] EA = 0, S1PTW = 0 [ 466.337010] FSC = 0x05 level 1 translation fault [ 466.341900] Data abort info [ 466.344783] ISV = 0, ISS = 0x00000005, ISS2 = 0x00000000 [ 466.350285] CM = 0, WnR = 0, TnD = 0, TagAccess = 0 [ 466.355350] GCS = 0, Overlay = 0, DirtyBit = 0, Xs = 0 [ 466.360677] user pgtable 4k pages, 39-bit VAs, pgdp=0000000089772000 [ 466.367140] [00000000000000c0] pgd=0000000000000000, p4d=0000000000000000, pud=0000000000000000 [ 466.375875] Internal error Oops 0000000096000005",
  "key_phrases": {
    "rootcause": "race condition",
    "weakness": "kernel NULL pointer dereference",
    "impact": [
      "crash",
      "Oops"
    ],
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": "drm/v3d"
  },
  "reference_content": null,
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('**Race Condition**') | 0.9 | Class | Allowed-with-Review | Primary CWE. The vulnerability is caused by a **race condition** between the DRM scheduler workqueue and the IRQ execution thread. |\n| CWE-476 | **NULL Pointer Dereference** | 0.8 | Base | Allowed | Secondary. The **race condition** can lead to a **NULL pointer dereference** when the IRQ execution thread sets the job pointer to NULL after run_job() assigns it to the new job. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.85\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is CWE-362, a Class-level CWE describing a **race condition**. CWE-476, a Base-level CWE, describes the resulting **NULL pointer dereference**. CWE-476 is a child of CWE-754 (Improper Check for Unusual or Exceptional Conditions), suggesting that the **NULL pointer dereference** occurs because a condition is not properly checked. CWE-362 can lead to CWE-476.\n\n```mermaid\ngraph TD\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    cwe476[\"CWE-476: NULL Pointer Dereference\"]\n    cwe754[\"CWE-754: Improper Check for Unusual or Exceptional Conditions\"]\n\n    cwe476 -->|CHILDOF| cwe754\n    cwe362 -->|CAN_LEAD_TO| cwe476\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe362 primary\n    class cwe476 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a **race condition** (CWE-362) where the IRQ execution thread and the DRM scheduler workqueue access the job pointer concurrently. This **race condition** leads to a **NULL pointer dereference** (CWE-476), which in turn causes a crash.\n\n## Summary of Analysis\nThe analysis is based on the provided vulnerability description and the retriever results. The vulnerability description explicitly mentions a **race condition** and a **NULL pointer dereference**.\n\nThe evidence from the vulnerability description includes:\n- \"This approach created a **race condition** between the DRM scheduler workqueue and the IRQ execution thread.\"\n- \"This **race condition** can lead to a NULL pointer dereference if the IRQ execution thread sets the job pointer to NULL after `run_job()` assigns it to the new job.\"\n- \"Unable to handle **kernel NULL pointer dereference** at virtual address 00000000000000c0\"\n\nCWE-362 is selected as the primary CWE because it represents the root cause of the vulnerability: the **race condition**. CWE-476 is selected as a secondary CWE because it represents the direct consequence of the **race condition**: a **NULL pointer dereference**.\n\nCWE-362 is a Class-level CWE. While it is recommended to use a Base-level CWE when possible, the description of CWE-362 closely matches the **race condition** described in the vulnerability.\nCWE-476 is a Base-level CWE which is the preferred level of abstraction.\n\nOther CWEs considered but not used:\n\n- CWE-665 (Improper Initialization): While initialization might be related, the core issue is the **race condition**, not the initialization itself.\n- CWE-364 (Signal Handler Race Condition): This is more specific than the general **race condition** and doesn't capture the essence of the vulnerability.\n- CWE-835 (Loop with Unreachable Exit Condition ('Infinite Loop')): This is not related to the vulnerability.\n- CWE-822 (Untrusted Pointer Dereference): The pointer is not necessarily from an untrusted source.\n- CWE-909 (Missing Initialization of Resource): Not the primary issue.\n- CWE-1325 (Improperly Controlled Sequential Memory Allocation): Not related to memory allocation issues.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('**Race Condition**') | 0.9 | Class | Allowed-with-Review | Primary CWE. The vulnerability is caused by a **race condition** between the DRM scheduler workqueue and the IRQ execution thread. |\n| CWE-476 | **NULL Pointer Dereference** | 0.8 | Base | Allowed | Secondary. The **race condition** can lead to a **NULL pointer dereference** when the IRQ execution thread sets the job pointer to NULL after run_job() assigns it to the new job. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.85\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is CWE-362, a Class-level CWE describing a **race condition**. CWE-476, a Base-level CWE, describes the resulting **NULL pointer dereference**. CWE-476 is a child of CWE-754 (Improper Check for Unusual or Exceptional Conditions), suggesting that the **NULL pointer dereference** occurs because a condition is not properly checked. CWE-362 can lead to CWE-476.\n\n```mermaid\ngraph TD\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    cwe476[\"CWE-476: NULL Pointer Dereference\"]\n    cwe754[\"CWE-754: Improper Check for Unusual or Exceptional Conditions\"]\n\n    cwe476 -->|CHILDOF| cwe754\n    cwe362 -->|CAN_LEAD_TO| cwe476\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe362 primary\n    class cwe476 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a **race condition** (CWE-362) where the IRQ execution thread and the DRM scheduler workqueue access the job pointer concurrently. This **race condition** leads to a **NULL pointer dereference** (CWE-476), which in turn causes a crash.\n\n## Summary of Analysis\nThe analysis is based on the provided vulnerability description and the retriever results. The vulnerability description explicitly mentions a **race condition** and a **NULL pointer dereference**.\n\nThe evidence from the vulnerability description includes:\n- \"This approach created a **race condition** between the DRM scheduler workqueue and the IRQ execution thread.\"\n- \"This **race condition** can lead to a NULL pointer dereference if the IRQ execution thread sets the job pointer to NULL after `run_job()` assigns it to the new job.\"\n- \"Unable to handle **kernel NULL pointer dereference** at virtual address 00000000000000c0\"\n\nCWE-362 is selected as the primary CWE because it represents the root cause of the vulnerability: the **race condition**. CWE-476 is selected as a secondary CWE because it represents the direct consequence of the **race condition**: a **NULL pointer dereference**.\n\nCWE-362 is a Class-level CWE. While it is recommended to use a Base-level CWE when possible, the description of CWE-362 closely matches the **race condition** described in the vulnerability.\nCWE-476 is a Base-level CWE which is the preferred level of abstraction.\n\nOther CWEs considered but not used:\n\n- CWE-665 (Improper Initialization): While initialization might be related, the core issue is the **race condition**, not the initialization itself.\n- CWE-364 (Signal Handler Race Condition): This is more specific than the general **race condition** and doesn't capture the essence of the vulnerability.\n- CWE-835 (Loop with Unreachable Exit Condition ('Infinite Loop')): This is not related to the vulnerability.\n- CWE-822 (Untrusted Pointer Dereference): The pointer is not necessarily from an untrusted source.\n- CWE-909 (Missing Initialization of Resource): Not the primary issue.\n- CWE-1325 (Improperly Controlled Sequential Memory Allocation): Not related to memory allocation issues.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-476:**\n- 476 (NULL Pointer Dereference) - ROOT\n\n\n**Chain starting from CWE-909:**\n- 909 (Missing Initialization of Resource) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Race Condition",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "476",
        "name": "NULL Pointer Dereference",
        "source": "sparse"
      },
      "similarity": 1162.1478389132378
    },
    {
      "metadata": {
        "doc_id": "617",
        "name": "Reachable Assertion",
        "source": "sparse"
      },
      "similarity": 1020.5698724756787
    },
    {
      "metadata": {
        "doc_id": "466",
        "name": "Return of Pointer Value Outside of Expected Range",
        "source": "sparse"
      },
      "similarity": 1014.8281875072228
    },
    {
      "metadata": {
        "doc_id": "665",
        "name": "Improper Initialization",
        "source": "sparse"
      },
      "similarity": 1005.935271282122
    },
    {
      "metadata": {
        "doc_id": "364",
        "name": "Signal Handler Race Condition",
        "source": "sparse"
      },
      "similarity": 1004.2170296413005
    },
    {
      "metadata": {
        "doc_id": "835",
        "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
        "source": "sparse"
      },
      "similarity": 1001.8798407919496
    },
    {
      "metadata": {
        "doc_id": "822",
        "name": "Untrusted Pointer Dereference",
        "source": "sparse"
      },
      "similarity": 995.4565563540248
    },
    {
      "metadata": {
        "doc_id": "909",
        "name": "Missing Initialization of Resource",
        "type": "Class",
        "original_content": "The product does not initialize a critical resource.",
        "keyphrase_source": "weakness:kernel NULL pointer dereference",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
          "comments": "Examine children of this entry to see if there is a better fit",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.5423927452188317
          }
        }
      },
      "similarity": 0.5423927452188317
    },
    {
      "doc_id": "1325",
      "text": "CWE-1325: Improperly Controlled Sequential Memory Allocation",
      "score": 2.73416,
      "metadata": {
        "doc_id": "1325",
        "name": "Improperly Controlled Sequential Memory Allocation",
        "type": "base",
        "original_content": "CWE-1325: Improperly Controlled Sequential Memory Allocation",
        "relationships": [
          {
            "source_id": "1325",
            "target_id": "476",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1325",
            "target_id": "789",
            "label": "PEEROF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1325",
            "target_id": "770",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "770",
            "target_id": "1325",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "476",
            "target_id": "1325",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "abstraction_path": 0.5760000000000002,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "476",
                  "1325",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "476"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "665",
                  "770",
                  "PARENTOF"
                ],
                [
                  "770",
                  "1325",
                  "PARENTOF"
                ]
              ],
              "score": 0.5760000000000002,
              "type": "abstraction_path_down",
              "source": "665"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "476",
                  "1325",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "476"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "1325",
                  "476",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "476"
            }
          }
        },
        "abstraction_level": "base",
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.73416
          }
        }
      },
      "similarity": 2.73416
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-476",
      "CWE-909",
      "CWE-835",
      "CWE-364",
      "CWE-362",
      "CWE-822",
      "CWE-754",
      "CWE-1325",
      "CWE-665"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}