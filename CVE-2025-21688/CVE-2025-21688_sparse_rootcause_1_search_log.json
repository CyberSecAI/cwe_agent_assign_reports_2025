{
  "method": "sparse_rootcause_1",
  "query": "In the Linux kernel, the following vulnerability has been resolved drm/v3d Assign job pointer to NULL before signaling the fence In commit e4b5ccd392b9 (drm/v3d Ensure job pointer is set to NULL after job completion), we introduced a change to assign the job pointer to NULL after completing a job, indicating job completion. However, this approach created a race condition between the DRM scheduler workqueue and the IRQ execution thread. As soon as the fence is signaled in the IRQ execution thread, a new job starts to be executed. This results in a race condition where the IRQ execution thread sets the job pointer to NULL simultaneously as the `run_job()` function assigns a new job to the pointer. This race condition can lead to a NULL pointer dereference if the IRQ execution thread sets the job pointer to NULL after `run_job()` assigns it to the new job. When the new job completes and the GPU emits an interrupt, `v3d_irq()` is triggered, potentially causing a crash. [ 466.310099] Unable to handle kernel NULL pointer dereference at virtual address 00000000000000c0 [ 466.318928] Mem abort info [ 466.321723] ESR = 0x0000000096000005 [ 466.325479] EC = 0x25 DABT (current EL), IL = 32 bits [ 466.330807] SET = 0, FnV = 0 [ 466.333864] EA = 0, S1PTW = 0 [ 466.337010] FSC = 0x05 level 1 translation fault [ 466.341900] Data abort info [ 466.344783] ISV = 0, ISS = 0x00000005, ISS2 = 0x00000000 [ 466.350285] CM = 0, WnR = 0, TnD = 0, TagAccess = 0 [ 466.355350] GCS = 0, Overlay = 0, DirtyBit = 0, Xs = 0 [ 466.360677] user pgtable 4k pages, 39-bit VAs, pgdp=0000000089772000 [ 466.367140] [00000000000000c0] pgd=0000000000000000, p4d=0000000000000000, pud=0000000000000000 [ 466.375875] Internal error Oops 0000000096000005",
  "keyphrases": {
    "rootcause": "race condition"
  },
  "timestamp": "2025-07-14T09:43:46.941071",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "476",
      "name": "NULL Pointer Dereference",
      "score": 1162.1478389132378
    },
    {
      "doc_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 1076.623374474416
    },
    {
      "doc_id": "617",
      "name": "Reachable Assertion",
      "score": 1020.5698724756787
    },
    {
      "doc_id": "466",
      "name": "Return of Pointer Value Outside of Expected Range",
      "score": 1014.8281875072228
    },
    {
      "doc_id": "665",
      "name": "Improper Initialization",
      "score": 1005.935271282122
    }
  ]
}