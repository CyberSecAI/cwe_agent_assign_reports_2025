{
  "method": "sparse_base",
  "query": "In the Linux kernel, the following vulnerability has been resolved ocfs2 fix slab-use-after-free due to dangling pointer dqi_priv When mounting ocfs2 and then remounting it as read-only, a slab-use-after-free occurs after the user uses a syscall to quota_getnextquota. Specifically, sb_dqinfo(sb, type)->dqi_priv is the dangling pointer. During the remounting process, the pointer dqi_priv is freed but is never set as null leaving it to be accessed. Additionally, the read-only option for remounting sets the DQUOT_SUSPENDED flag instead of setting the DQUOT_USAGE_ENABLED flags. Moreover, later in the process of getting the next quota, the function ocfs2_get_next_id is called and only checks the quota usage flags and not the quota suspended flags. To fix this, I set dqi_priv to null when it is freed after remounting with read-only and put a check for DQUOT_SUSPENDED in ocfs2_get_next_id. [akpm@linux-foundation.org coding-style cleanups]",
  "keyphrases": {
    "base_query": "In the Linux kernel, the following vulnerability has been resolved ocfs2 fix slab-use-after-free due to dangling pointer dqi_priv When mounting ocfs2 and then remounting it as read-only, a slab-use-after-free occurs after the user uses a syscall to quota_getnextquota. Specifically, sb_dqinfo(sb, type)->dqi_priv is the dangling pointer. During the remounting process, the pointer dqi_priv is freed but is never set as null leaving it to be accessed. Additionally, the read-only option for remounting sets the DQUOT_SUSPENDED flag instead of setting the DQUOT_USAGE_ENABLED flags. Moreover, later in the process of getting the next quota, the function ocfs2_get_next_id is called and only checks the quota usage flags and not the quota suspended flags. To fix this, I set dqi_priv to null when it is freed after remounting with read-only and put a check for DQUOT_SUSPENDED in ocfs2_get_next_id. [akpm@linux-foundation.org coding-style cleanups]"
  },
  "timestamp": "2025-07-12T06:56:10.491675",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 253.9570835200785
    },
    {
      "doc_id": "364",
      "name": "Signal Handler Race Condition",
      "score": 246.02459787667414
    },
    {
      "doc_id": "88",
      "name": "Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
      "score": 245.12900902346735
    },
    {
      "doc_id": "401",
      "name": "Missing Release of Memory after Effective Lifetime",
      "score": 244.28845017380638
    },
    {
      "doc_id": "415",
      "name": "Double Free",
      "score": 240.91783485867052
    }
  ]
}