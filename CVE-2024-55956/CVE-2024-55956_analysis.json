{
  "cve_id": "CVE-2024-55956",
  "description": "In Cleo Harmony before 5.8.0.24, VLTrader before 5.8.0.24, and LexiCom before 5.8.0.24, an unauthenticated user can import and execute arbitrary Bash or PowerShell commands on the host system by leveraging the **default settings of the Autorun directory**.",
  "key_phrases": {
    "rootcause": "default settings of the Autorun directory",
    "weakness": "",
    "impact": "import and execute arbitrary Bash or PowerShell commands",
    "vector": "",
    "attacker": "unauthenticated user",
    "product": [
      "Cleo Harmony",
      "VLTrader",
      "LexiCom"
    ],
    "version": "before 5.8.0.24",
    "component": ""
  },
  "reference_content": "This document provides a detailed analysis of CVE-2024-55956, an actively exploited vulnerability in Cleo's LexiCom, VLTrader, and Harmony software.\n\n**Root Cause of Vulnerability:**\nThe vulnerability is an arbitrary file-write vulnerability that allows a threat actor to write files to arbitrary locations on the file system. This is achieved by exploiting a flaw in the software's import functionality.\n\n**Weaknesses/Vulnerabilities Present:**\n- **Arbitrary File Write:** The core weakness is the ability to write files to any location on the server's file system due to improper input validation of the file import process.\n- **Insufficient Patching:** Although Cleo released a patch for CVE-2024-50623, this patch does not address the arbitrary file write vulnerability, leaving systems vulnerable.\n- **Abuse of Autorun Feature:** Attackers exploit the autorun feature of Cleo software to achieve code execution by writing malicious files into the autorun directory.\n\n**Impact of Exploitation:**\n- **Remote Code Execution:** Attackers can achieve remote code execution by exploiting the arbitrary file-write vulnerability and leveraging the autorun functionality.\n- **Post-Exploitation Activity:** After gaining initial access, attackers engage in post-exploitation activities including:\n    - Downloading and executing malicious JAR files for persistence.\n    - Performing domain reconnaissance using tools like nltest.exe.\n    - Enumerating and potentially compromising other systems on the network.\n- **Data Breach:** The access gained could lead to sensitive data exposure and exfiltration.\n\n**Attack Vectors:**\n- **Network Exploitation:** Attackers exploit internet-exposed Cleo servers. The vulnerability can be triggered by sending specially crafted data to the vulnerable application.\n- **Arbitrary File Write:** The vulnerability is triggered using the file import functionality, writing malicious files to the file system, specifically autorun directory.\n\n**Required Attacker Capabilities/Position:**\n- **Network Access:** The attacker requires network access to the vulnerable Cleo server.\n- **Exploitation Skills:** The attacker needs the ability to craft malicious data to trigger the arbitrary file-write vulnerability.\n- **Post-Exploitation Knowledge:** The attacker needs knowledge to perform post-exploitation activities and maintain persistence on the compromised system, which includes the knowledge of where to write files (autorun directory) and how to leverage the autorun functionality.\n\n**Additional Details:**\n- The analysis shows the attack chain, starting with writing a .txt file (`healthchecktemplate.txt`) in the autorun directory, importing a zip file which contains a main.xml file which defines additional actions, including the execution of a PowerShell command. The powershell command downloads JAR files from remote servers for persistence on the host.\n- The threat actors are observed deleting the JAR files after execution to remain stealthy.\n- The document provides specific IP addresses observed being used for callbacks by the threat actors.\n- It includes mitigation steps such as disabling the autorun feature via configuration.\n- It details detection methods implemented by Huntress to identify and neutralize this threat.\n- It provides Sigma rules and Indicators of Compromise (IOCs) for detection.\n- Huntress successfully recreated the proof of concept and confirmed with Cleo that the previously released patch does not mitigate the vulnerability.\n- The document provides a CyberChef recipe to decode the Powershell commands.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-434 | Unrestricted Upload of File with Dangerous Type | 0.9 | Base | Allowed | Primary CWE. The vulnerability is due to the ability to upload a file with a dangerous type, which leads to code execution. |\n| CWE-73 | External Control of File Name or Path | 0.7 | Base | Allowed | Secondary CWE. The **root cause** involves external control of the filename, enabling the upload of files to the autorun directory. |\n| CWE-306 | Missing Authentication for Critical Function | 0.6 | Base | Allowed | Secondary CWE. The **default settings of the Autorun directory** allow an unauthenticated user to import and execute arbitrary commands. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-434, representing the **unrestricted upload of a file with a dangerous type** which is the core of the vulnerability. CWE-73 and CWE-306 are contributing factors. CWE-73 explains how the location for file upload is determined, and CWE-306 explains why this upload is possible for an unauthenticated user.\n\n```mermaid\ngraph TD\n    cwe434[\"CWE-434: Unrestricted Upload of File with Dangerous Type\"]\n    cwe73[\"CWE-73: External Control of File Name or Path\"]\n    cwe306[\"CWE-306: Missing Authentication for Critical Function\"]\n    \n    cwe434 -->|CANFOLLOW| cwe73\n    cwe434 -->|REQUIRES| cwe306\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe434 primary\n    class cwe73,cwe306 secondary\n```\n\n## Vulnerability Chain\n1.  **Missing Authentication (CWE-306)**: Allows unauthenticated users to interact with the system.\n2.  **External Control of File Name or Path (CWE-73)**: Attackers control the destination of uploaded files.\n3.  **Unrestricted Upload of File with Dangerous Type (CWE-434)**: Attackers upload malicious files (e.g., scripts) without proper validation.\n4.  **Code Execution (Impact)**: The system executes the uploaded malicious code, leading to remote code execution.\n\n## Summary of Analysis\nThe primary weakness is CWE-434, as the vulnerability hinges on the ability to upload a file with a dangerous type without restrictions. This is supported by the **Vulnerability Description Key Phrases** which highlights the **default settings of the Autorun directory** and the ability to \"import and execute arbitrary Bash or PowerShell commands.\" The **CVE Reference Links Content Summary** states that the \"core weakness is the ability to write files to any location on the server's file system due to improper input validation of the file import process.\" The **abuse of autorun feature** leads to code execution. CWE-73 is selected as a secondary weakness because the location where the file is uploaded is controlled by the attacker. CWE-306 is selected as a secondary weakness because the attacker is unauthenticated.\n\nI considered other CWEs like CWE-22 (Path Traversal), CWE-78 (OS Command Injection), and CWE-95 (Eval Injection). However, they are not as accurate as CWE-434, CWE-73, and CWE-306. CWE-22 is not suitable because the file isn't necessarily traversing paths to get outside of a restricted directory. CWE-78 isn't suitable as the commands aren't directly injected but rather uploaded. CWE-95 isn't suitable because the uploaded file doesn't directly use eval().",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-434 | Unrestricted Upload of File with Dangerous Type | 0.9 | Base | Allowed | Primary CWE. The vulnerability is due to the ability to upload a file with a dangerous type, which leads to code execution. |\n| CWE-73 | External Control of File Name or Path | 0.7 | Base | Allowed | Secondary CWE. The **root cause** involves external control of the filename, enabling the upload of files to the autorun directory. |\n| CWE-306 | Missing Authentication for Critical Function | 0.6 | Base | Allowed | Secondary CWE. The **default settings of the Autorun directory** allow an unauthenticated user to import and execute arbitrary commands. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-434, representing the **unrestricted upload of a file with a dangerous type** which is the core of the vulnerability. CWE-73 and CWE-306 are contributing factors. CWE-73 explains how the location for file upload is determined, and CWE-306 explains why this upload is possible for an unauthenticated user.\n\n```mermaid\ngraph TD\n    cwe434[\"CWE-434: Unrestricted Upload of File with Dangerous Type\"]\n    cwe73[\"CWE-73: External Control of File Name or Path\"]\n    cwe306[\"CWE-306: Missing Authentication for Critical Function\"]\n    \n    cwe434 -->|CANFOLLOW| cwe73\n    cwe434 -->|REQUIRES| cwe306\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe434 primary\n    class cwe73,cwe306 secondary\n```\n\n## Vulnerability Chain\n1.  **Missing Authentication (CWE-306)**: Allows unauthenticated users to interact with the system.\n2.  **External Control of File Name or Path (CWE-73)**: Attackers control the destination of uploaded files.\n3.  **Unrestricted Upload of File with Dangerous Type (CWE-434)**: Attackers upload malicious files (e.g., scripts) without proper validation.\n4.  **Code Execution (Impact)**: The system executes the uploaded malicious code, leading to remote code execution.\n\n## Summary of Analysis\nThe primary weakness is CWE-434, as the vulnerability hinges on the ability to upload a file with a dangerous type without restrictions. This is supported by the **Vulnerability Description Key Phrases** which highlights the **default settings of the Autorun directory** and the ability to \"import and execute arbitrary Bash or PowerShell commands.\" The **CVE Reference Links Content Summary** states that the \"core weakness is the ability to write files to any location on the server's file system due to improper input validation of the file import process.\" The **abuse of autorun feature** leads to code execution. CWE-73 is selected as a secondary weakness because the location where the file is uploaded is controlled by the attacker. CWE-306 is selected as a secondary weakness because the attacker is unauthenticated.\n\nI considered other CWEs like CWE-22 (Path Traversal), CWE-78 (OS Command Injection), and CWE-95 (Eval Injection). However, they are not as accurate as CWE-434, CWE-73, and CWE-306. CWE-22 is not suitable because the file isn't necessarily traversing paths to get outside of a restricted directory. CWE-78 isn't suitable as the commands aren't directly injected but rather uploaded. CWE-95 isn't suitable because the uploaded file doesn't directly use eval().\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-22:**\n- 22 (Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')) - ROOT\n\n\n**Chain starting from CWE-73:**\n- 73 (External Control of File Name or Path) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "22",
        "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
        "source": "sparse"
      },
      "similarity": 292.32904663234586
    },
    {
      "metadata": {
        "doc_id": "276",
        "name": "Incorrect Default Permissions",
        "source": "sparse"
      },
      "similarity": 282.5648389438883
    },
    {
      "metadata": {
        "doc_id": "95",
        "name": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
        "source": "sparse"
      },
      "similarity": 264.8397815094843
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse"
      },
      "similarity": 260.550955617171
    },
    {
      "metadata": {
        "doc_id": "269",
        "name": "Improper Privilege Management",
        "source": "sparse"
      },
      "similarity": 255.20783767805938
    },
    {
      "metadata": {
        "doc_id": "668",
        "name": "Exposure of Resource to Wrong Sphere",
        "source": "sparse"
      },
      "similarity": 255.14128871852733
    },
    {
      "metadata": {
        "doc_id": "78",
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "source": "sparse"
      },
      "similarity": 254.72127539823472
    },
    {
      "metadata": {
        "doc_id": "306",
        "name": "Missing Authentication for Critical Function",
        "source": "sparse"
      },
      "similarity": 254.66507942735362
    },
    {
      "metadata": {
        "doc_id": "250",
        "name": "Execution with Unnecessary Privileges",
        "type": "Base",
        "original_content": "The product performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.",
        "keyphrase_source": "rootcause:default settings of the Autorun directory",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5382243842519904,
            "graph": 1.723891667703936
          }
        }
      },
      "similarity": 0.5382243842519904
    },
    {
      "doc_id": "98",
      "text": "CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')",
      "score": 2.0856000000000003,
      "metadata": {
        "doc_id": "98",
        "name": "Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')",
        "type": "variant",
        "original_content": "CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')",
        "relationships": [
          {
            "source_id": "98",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "473",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "456",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "425",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "426",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "94",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "829",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "706",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "94",
            "target_id": "98",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "829",
            "target_id": "98",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "706",
            "target_id": "98",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "473",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "456",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "425",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 0.8,
          "sequence_path": 0.8,
          "peer_group": 0.63
        },
        "abstraction_factor": 1.2,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "22",
                  "73",
                  "CANFOLLOW"
                ],
                [
                  "73",
                  "98",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "relationship_chain",
              "source": "22"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "78",
                  "184",
                  "CANFOLLOW"
                ],
                [
                  "184",
                  "98",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "vulnerability_sequence_forward",
              "source": "78"
            },
            "peer_relationship": {
              "path": [
                [
                  "426",
                  "427",
                  "PEEROF"
                ],
                [
                  "98",
                  "426",
                  "CANALSOBE"
                ]
              ],
              "score": 0.63,
              "type": "peer_relationship",
              "source": "427"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.0856000000000003
          }
        }
      },
      "similarity": 2.0856000000000003
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-22",
      "CWE-73",
      "CWE-306",
      "CWE-95",
      "CWE-78",
      "CWE-434"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}