{
  "cve_id": "CVE-2024-48353",
  "description": "Yealink Meeting Server before V26.0.0.67 allows attackers to obtain static key information from a front-end JS file and decrypt the plaintext passwords based on the obtained key information.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "",
    "impact": "",
    "vector": "",
    "attacker": "attackers",
    "product": "Yealink Meeting Server",
    "version": "before V26.0.0.67",
    "component": ""
  },
  "reference_content": "The provided content is related to CVE-2024-48353.\n\n**Root cause of vulnerability:**\nThe front-end JS file of the Yealink Meeting Server contains encryption methods and encryption keys.\n\n**Weaknesses/vulnerabilities present:**\n- Hardcoded encryption keys in the front-end JS file.\n- Insecure storage of encryption keys.\n\n**Impact of exploitation:**\nAttackers can obtain static key information from the JS file and successfully decrypt plaintext passwords based on the obtained key information.\n\n**Attack vectors:**\n- Access to the front-end JS file of the Yealink Meeting Server.\n\n**Required attacker capabilities/position:**\n- Ability to access the front-end JS file, which is likely publicly accessible through the web interface of the Yealink Meeting Server.\n\n**Additional Notes:**\n- The vulnerability affects Yealink Meeting Server versions prior to V26.0.0.67.\n- Yealink has released a software update (V26.0.0.67) to address the vulnerability and recommends all customers to upgrade to the latest version.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-798 | Use of Hard-coded Credentials | 1.0 | Base | Allowed | Primary CWE. The server **uses hard-coded credentials** which can be extracted to decrypt passwords. |\n| CWE-321 | Use of Hard-coded Cryptographic Key | 0.9 | Variant | Allowed | Secondary CWE. The hard-coded credential is specifically a **cryptographic key** used for decryption. |\n| CWE-312 | Cleartext Storage of Sensitive Information | 0.7 | Base | Allowed | Secondary CWE. The passwords are, in effect, being **stored in cleartext** because the key is readily available. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is the use of hard-coded credentials (CWE-798). This leads to the exposure of cryptographic keys (CWE-321) which in turn allows for the decryption of passwords that are effectively stored in cleartext (CWE-312). The relationship is hierarchical, with CWE-321 being a specific type of CWE-798.\n\n```mermaid\ngraph TD\n    cwe798[\"CWE-798: Use of Hard-coded Credentials\"]\n    cwe321[\"CWE-321: Use of Hard-coded Cryptographic Key\"]\n    cwe312[\"CWE-312: Cleartext Storage of Sensitive Information\"]\n\n    cwe321 -->|CHILDOF| cwe798\n    cwe312 -->|CANRESULTIN| cwe321\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe798 primary\n    class cwe321,cwe312 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **hard-coded credentials** (CWE-798), specifically a **cryptographic key** (CWE-321), which allows attackers to decrypt passwords resulting in **cleartext storage of sensitive information** (CWE-312).\n\n## Summary of Analysis\nThe primary weakness is the use of hard-coded credentials, which is a cryptographic key. This allows attackers to decrypt passwords, effectively storing them in cleartext.\n\nThe selection is based on the provided evidence: \"attackers to obtain static key information from a front-end JS file and decrypt the plaintext passwords based on the obtained key information.\"\n\nCWE-798 (Use of Hard-coded Credentials) is the most accurate root cause, as it describes the fundamental issue of embedding credentials directly in the code. CWE-321 (Use of Hard-coded Cryptographic Key) is included because the specific hard-coded credential is a cryptographic key. CWE-312 (Cleartext Storage of Sensitive Information) describes the final impact of the vulnerability, since the passwords are being decrypted.\n\nOther CWEs Considered and Rejected:\n\n*   CWE-256 (Plaintext Storage of a Password): While the passwords are ultimately decrypted, the root cause isn't simply storing them in plaintext. It's the **hard-coded key** that enables the decryption.\n*   CWE-319 (Cleartext Transmission of Sensitive Information): This doesn't apply as the issue is related to storage and decryption, not transmission.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-798 | Use of Hard-coded Credentials | 1.0 | Base | Allowed | Primary CWE. The server **uses hard-coded credentials** which can be extracted to decrypt passwords. |\n| CWE-321 | Use of Hard-coded Cryptographic Key | 0.9 | Variant | Allowed | Secondary CWE. The hard-coded credential is specifically a **cryptographic key** used for decryption. |\n| CWE-312 | Cleartext Storage of Sensitive Information | 0.7 | Base | Allowed | Secondary CWE. The passwords are, in effect, being **stored in cleartext** because the key is readily available. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is the use of hard-coded credentials (CWE-798). This leads to the exposure of cryptographic keys (CWE-321) which in turn allows for the decryption of passwords that are effectively stored in cleartext (CWE-312). The relationship is hierarchical, with CWE-321 being a specific type of CWE-798.\n\n```mermaid\ngraph TD\n    cwe798[\"CWE-798: Use of Hard-coded Credentials\"]\n    cwe321[\"CWE-321: Use of Hard-coded Cryptographic Key\"]\n    cwe312[\"CWE-312: Cleartext Storage of Sensitive Information\"]\n\n    cwe321 -->|CHILDOF| cwe798\n    cwe312 -->|CANRESULTIN| cwe321\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe798 primary\n    class cwe321,cwe312 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **hard-coded credentials** (CWE-798), specifically a **cryptographic key** (CWE-321), which allows attackers to decrypt passwords resulting in **cleartext storage of sensitive information** (CWE-312).\n\n## Summary of Analysis\nThe primary weakness is the use of hard-coded credentials, which is a cryptographic key. This allows attackers to decrypt passwords, effectively storing them in cleartext.\n\nThe selection is based on the provided evidence: \"attackers to obtain static key information from a front-end JS file and decrypt the plaintext passwords based on the obtained key information.\"\n\nCWE-798 (Use of Hard-coded Credentials) is the most accurate root cause, as it describes the fundamental issue of embedding credentials directly in the code. CWE-321 (Use of Hard-coded Cryptographic Key) is included because the specific hard-coded credential is a cryptographic key. CWE-312 (Cleartext Storage of Sensitive Information) describes the final impact of the vulnerability, since the passwords are being decrypted.\n\nOther CWEs Considered and Rejected:\n\n*   CWE-256 (Plaintext Storage of a Password): While the passwords are ultimately decrypted, the root cause isn't simply storing them in plaintext. It's the **hard-coded key** that enables the decryption.\n*   CWE-319 (Cleartext Transmission of Sensitive Information): This doesn't apply as the issue is related to storage and decryption, not transmission.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-321:**\n- 321 (Use of Hard-coded Cryptographic Key) - ROOT\n\n\n**Chain starting from CWE-319:**\n- 319 (Cleartext Transmission of Sensitive Information) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "798",
        "name": "Use of Hard-coded Credentials",
        "source": "sparse"
      },
      "similarity": 59.103340293107344
    },
    {
      "metadata": {
        "doc_id": "321",
        "name": "Use of Hard-coded Cryptographic Key",
        "source": "sparse"
      },
      "similarity": 55.40771090964577
    },
    {
      "metadata": {
        "doc_id": "327",
        "name": "Use of a Broken or Risky Cryptographic Algorithm",
        "source": "sparse"
      },
      "similarity": 53.12678337579067
    },
    {
      "metadata": {
        "doc_id": "522",
        "name": "Insufficiently Protected Credentials",
        "source": "sparse"
      },
      "similarity": 51.93446794823363
    },
    {
      "metadata": {
        "doc_id": "1204",
        "name": "Generation of Weak Initialization Vector (IV)",
        "source": "sparse"
      },
      "similarity": 51.40495891502578
    },
    {
      "metadata": {
        "doc_id": "319",
        "name": "Cleartext Transmission of Sensitive Information",
        "source": "sparse"
      },
      "similarity": 50.07753324831096
    },
    {
      "metadata": {
        "doc_id": "312",
        "name": "Cleartext Storage of Sensitive Information",
        "source": "sparse"
      },
      "similarity": 48.37212320455832
    },
    {
      "metadata": {
        "doc_id": "290",
        "name": "Authentication Bypass by Spoofing",
        "source": "sparse"
      },
      "similarity": 48.20935122622081
    },
    {
      "metadata": {
        "doc_id": "256",
        "name": "Plaintext Storage of a Password",
        "type": "Base",
        "original_content": "Storing a password in plaintext may result in a system compromise.",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5060767794357528,
            "graph": 1.71196287286463
          }
        }
      },
      "similarity": 0.5060767794357528
    },
    {
      "doc_id": "259",
      "text": "The product contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components.",
      "score": 0.550817301738007,
      "metadata": {
        "doc_id": "259",
        "name": "Use of Hard-coded Password",
        "type": "Variant",
        "extended_description": "\n\nA hard-coded password typically leads to a significant authentication failure that can be difficult for the system administrator to detect. Once detected, it can be difficult to fix, so the administrator may be forced into disabling the product entirely. There are two main variations:\n\n```\n\t\tInbound: the product contains an authentication mechanism that checks for a hard-coded password.\n\t\tOutbound: the product connects to another system or component, and it contains hard-coded password for connecting to that component.\n```\nIn the Inbound variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the product. If the password is ever discovered or published (a common occurrence on the Internet), then anybody with knowledge of this password can access the product. Finally, since all installations of the product will have the same password, even across different organizations, this enables massive attacks such as worms to take place.\n\nThe Outbound variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password which can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end product. Any user of that program may be able to extract the password. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple.\n",
        "alternate_terms": [],
        "original_content": "The product contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components.",
        "relationships": [
          {
            "source_id": "259",
            "target_id": "656",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "259",
            "target_id": "257",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "259",
            "target_id": "321",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "259",
            "target_id": "798",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1340"
            }
          },
          {
            "source_id": "259",
            "target_id": "798",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1305"
            }
          },
          {
            "source_id": "259",
            "target_id": "798",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "798",
            "target_id": "259",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "656",
            "target_id": "259",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "257",
            "target_id": "259",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "source": "graph",
        "sources": [
          "vector",
          "graph"
        ],
        "vector_score": 0.550817301738007,
        "graph_score": 4.0104,
        "score_components": {
          "relationship_chain": 0.7,
          "explicit_mention": 1.0,
          "abstraction_path": 0.76,
          "sequence_path": 0.8,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.2,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "259",
                  "321",
                  "PEEROF"
                ]
              ],
              "score": 0.7,
              "type": "relationship_chain",
              "source": "321"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "798",
                  "259",
                  "PARENTOF"
                ]
              ],
              "score": 0.76,
              "type": "abstraction_path_down",
              "source": "798"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "321",
                  "656",
                  "CANFOLLOW"
                ],
                [
                  "656",
                  "259",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "vulnerability_sequence_forward",
              "source": "321"
            },
            "peer_relationship": {
              "path": [
                [
                  "259",
                  "321",
                  "PEEROF"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "321"
            }
          }
        },
        "is_explicit": true,
        "abstraction_level": "variant",
        "position": "after",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse",
            "graph"
          ],
          "retriever_count": 3,
          "normalized_scores": {
            "dense": 0.47788973398329443,
            "sparse": 46.90565527677698,
            "graph": 2.6265669206952027
          }
        }
      },
      "similarity": 2.6265669206952027
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-321",
      "CWE-319",
      "CWE-256",
      "CWE-312",
      "CWE-798"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}