{
  "cve_id": "CVE-2025-21634",
  "description": "In the Linux kernel, the following vulnerability has been resolved cgroup/cpuset remove kernfs active break A warning was found WARNING CPU 10 PID 3486953 at fs/kernfs/file.c828 CPU 10 PID 3486953 Comm rmdir Kdump loaded Tainted G RIP 0010kernfs_should_drain_open_files+0x1a1/0x1b0 RSP 0018ffff8881107ef9e0 EFLAGS 00010202 RAX 0000000080000002 RBX ffff888154738c00 RCX dffffc0000000000 RDX 0000000000000007 RSI 0000000000000004 RDI ffff888154738c04 RBP ffff888154738c04 R08 ffffffffaf27fa15 R09 ffffed102a8e7180 R10 ffff888154738c07 R11 0000000000000000 R12 ffff888154738c08 R13 ffff888750f8c000 R14 ffff888750f8c0e8 R15 ffff888154738ca0 FS 00007f84cd0be740(0000) GSffff8887ddc00000(0000) knlGS0000000000000000 CS 0010 DS 0000 ES 0000 CR0 0000000080050033 CR2 0000555f9fbe00c8 CR3 0000000153eec001 CR4 0000000000370ee0 DR0 0000000000000000 DR1 0000000000000000 DR2 0000000000000000 DR3 0000000000000000 DR6 00000000fffe0ff0 DR7 0000000000000400 Call Trace kernfs_drain+0x15e/0x2f0 __kernfs_remove+0x165/0x300 kernfs_remove_by_name_ns+0x7b/0xc0 cgroup_rm_file+0x154/0x1c0 cgroup_addrm_files+0x1c2/0x1f0 css_clear_dir+0x77/0x110 kill_css+0x4c/0x1b0 cgroup_destroy_locked+0x194/0x380 cgroup_rmdir+0x2a/0x140 It can be explained by rmdir echo 1 > cpuset.cpus kernfs_fop_write_iter // active=0 cgroup_rm_file kernfs_remove_by_name_ns kernfs_get_active // active=1 __kernfs_remove // active=0x80000002 kernfs_drain cpuset_write_resmask wait_event //waiting (active == 0x80000001) kernfs_break_active_protection // active = 0x80000001 // continue kernfs_unbreak_active_protection // active = 0x80000002 ... kernfs_should_drain_open_files // warning occurs kernfs_put_active This warning is caused by kernfs_break_active_protection when it is writing to cpuset.cpus, and the cgroup is removed concurrently. The commit 3a5a6d0c2b03 (cpuset dont nest cgroup_mutex inside get_online_cpus()) made cpuset_hotplug_workfn asynchronous, This change involves calling flush_work(), which can create a multiple processes circular locking dependency that involve cgroup_mutex, potentially leading to a deadlock. To avoid deadlock. the commit 76bb5ab8f6e3 (cpuset break kernfs active protection in cpuset_write_resmask()) added kernfs_break_active_protection in the cpuset_write_resmask. This could lead to this warning. After the commit 2125c0034c5d (cgroup/cpuset Make cpuset hotplug processing synchronous), the cpuset_write_resmask no longer needs to wait the hotplug to finish, which means that concurrent hotplug and cpuset operations are no longer possible. Therefore, the deadlock doesnt exist anymore and it does not have to break active protection now. To fix this warning, just remove kernfs_break_active_protection operation in the cpuset_write_resmask.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "",
    "impact": "warning",
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": "cgroup/cpuset remove kernfs active break"
  },
  "reference_content": null,
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-833 | Deadlock | 0.7 | Base | Primary | Allowed |\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.6 | Class | Secondary | Allowed-with-Review |\n| CWE-667 | Improper Locking | 0.5 | Class | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.7\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary relationship that influenced the decision was the presence of deadlock scenarios. While **CWE-362** [Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')] and **CWE-667** [Improper Locking] are related, **CWE-833** [Deadlock] is a more specific outcome of these conditions. The analysis also considered that **CWE-833** [Deadlock] is a Base level CWE, while **CWE-362** [Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')] and **CWE-667** [Improper Locking] are Class level CWEs.\n\n```mermaid\ngraph TD\n    cwe833[\"CWE-833: Deadlock\"]\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    cwe667[\"CWE-667: Improper Locking\"]\n\n    cwe833 -->|CAUSES| cwe362\n    cwe833 -->|CAUSES| cwe667\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe833 primary\n    class cwe362,cwe667 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with asynchronous execution leading to potential circular locking dependencies. The breaking of active protection to avoid deadlock introduces a warning condition which could be fixed by removing the protection breaking operation now that the original deadlock source is gone.\n  - **Root Cause:** Asynchronous execution and circular locking dependencies\n  - **Intermediate:** Breaking active protection to avoid deadlock\n  - **Impact:** Warning due to concurrent cgroup removal\n\n## Summary of Analysis\nThe initial assessment focused on identifying the root cause of the vulnerability. The description clearly states that the vulnerability is related to a **deadlock** scenario in the Linux kernel's cgroup/cpuset component. The evidence from the vulnerability description supports this assessment: \"This change involves calling flush_work(), which can create a multiple processes circular locking dependency that involve cgroup_mutex, potentially leading to a deadlock.\" Based on this evidence, **CWE-833** [Deadlock] was selected as the primary CWE.\n\nThe retriever results also listed **CWE-362** [Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')] and **CWE-667** [Improper Locking] as potential candidates. These CWEs were considered as secondary because they represent conditions that could lead to a **deadlock**, but the description explicitly mentions the **deadlock** itself.\n\nThe analysis also considered the relationships between the CWEs. **CWE-362** [Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')] and **CWE-667** [Improper Locking] can contribute to **CWE-833** [Deadlock].\n\nThe final decision was based on the evidence from the vulnerability description and the relationships between the CWEs. **CWE-833** [Deadlock] was selected as the primary CWE because it directly represents the vulnerability, while **CWE-362** [Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')] and **CWE-667** [Improper Locking] were considered as contributing factors.\n\nThe selected CWEs are at the optimal level of specificity because they accurately represent the vulnerability and its contributing factors. **CWE-833** [Deadlock] is a Base level CWE, which is preferred for mapping to the root causes of vulnerabilities. **CWE-362** [Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')] and **CWE-667** [Improper Locking] are Class level CWEs, which provide additional context about the conditions that could lead to the **deadlock**.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-833 | Deadlock | 0.7 | Base | Primary | Allowed |\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.6 | Class | Secondary | Allowed-with-Review |\n| CWE-667 | Improper Locking | 0.5 | Class | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.7\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary relationship that influenced the decision was the presence of deadlock scenarios. While **CWE-362** [Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')] and **CWE-667** [Improper Locking] are related, **CWE-833** [Deadlock] is a more specific outcome of these conditions. The analysis also considered that **CWE-833** [Deadlock] is a Base level CWE, while **CWE-362** [Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')] and **CWE-667** [Improper Locking] are Class level CWEs.\n\n```mermaid\ngraph TD\n    cwe833[\"CWE-833: Deadlock\"]\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    cwe667[\"CWE-667: Improper Locking\"]\n\n    cwe833 -->|CAUSES| cwe362\n    cwe833 -->|CAUSES| cwe667\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe833 primary\n    class cwe362,cwe667 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with asynchronous execution leading to potential circular locking dependencies. The breaking of active protection to avoid deadlock introduces a warning condition which could be fixed by removing the protection breaking operation now that the original deadlock source is gone.\n  - **Root Cause:** Asynchronous execution and circular locking dependencies\n  - **Intermediate:** Breaking active protection to avoid deadlock\n  - **Impact:** Warning due to concurrent cgroup removal\n\n## Summary of Analysis\nThe initial assessment focused on identifying the root cause of the vulnerability. The description clearly states that the vulnerability is related to a **deadlock** scenario in the Linux kernel's cgroup/cpuset component. The evidence from the vulnerability description supports this assessment: \"This change involves calling flush_work(), which can create a multiple processes circular locking dependency that involve cgroup_mutex, potentially leading to a deadlock.\" Based on this evidence, **CWE-833** [Deadlock] was selected as the primary CWE.\n\nThe retriever results also listed **CWE-362** [Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')] and **CWE-667** [Improper Locking] as potential candidates. These CWEs were considered as secondary because they represent conditions that could lead to a **deadlock**, but the description explicitly mentions the **deadlock** itself.\n\nThe analysis also considered the relationships between the CWEs. **CWE-362** [Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')] and **CWE-667** [Improper Locking] can contribute to **CWE-833** [Deadlock].\n\nThe final decision was based on the evidence from the vulnerability description and the relationships between the CWEs. **CWE-833** [Deadlock] was selected as the primary CWE because it directly represents the vulnerability, while **CWE-362** [Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')] and **CWE-667** [Improper Locking] were considered as contributing factors.\n\nThe selected CWEs are at the optimal level of specificity because they accurately represent the vulnerability and its contributing factors. **CWE-833** [Deadlock] is a Base level CWE, which is preferred for mapping to the root causes of vulnerabilities. **CWE-362** [Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')] and **CWE-667** [Improper Locking] are Class level CWEs, which provide additional context about the conditions that could lead to the **deadlock**.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-667:**\n- 667 (Improper Locking) - ROOT\n\n\n**Chain starting from CWE-833:**\n- 833 (Deadlock) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "833",
        "name": "Deadlock",
        "source": "sparse"
      },
      "similarity": 323.1335585697829
    },
    {
      "metadata": {
        "doc_id": "667",
        "name": "Improper Locking",
        "source": "sparse"
      },
      "similarity": 287.02641579138543
    },
    {
      "metadata": {
        "doc_id": "288",
        "name": "Authentication Bypass Using an Alternate Path or Channel",
        "source": "sparse"
      },
      "similarity": 259.28034450051973
    },
    {
      "metadata": {
        "doc_id": "639",
        "name": "Authorization Bypass Through User-Controlled Key",
        "source": "sparse"
      },
      "similarity": 254.8283870176959
    },
    {
      "metadata": {
        "doc_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "source": "sparse"
      },
      "similarity": 252.12530515667294
    },
    {
      "metadata": {
        "doc_id": "451",
        "name": "User Interface (UI) Misrepresentation of Critical Information",
        "source": "sparse"
      },
      "similarity": 247.68090764027386
    },
    {
      "metadata": {
        "doc_id": "770",
        "name": "Allocation of Resources Without Limits or Throttling",
        "source": "sparse"
      },
      "similarity": 247.49917949927033
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 247.3753721741073
    },
    {
      "metadata": {
        "doc_id": "909",
        "name": "Missing Initialization of Resource",
        "type": "Class",
        "original_content": "The product does not initialize a critical resource.",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
          "comments": "Examine children of this entry to see if there is a better fit",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.4911016804152314
          }
        }
      },
      "similarity": 0.4911016804152314
    },
    {
      "doc_id": "1322",
      "text": "CWE-1322: Use of Blocking Code in Single-threaded, Non-blocking Context",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "1322",
        "name": "Use of Blocking Code in Single-threaded, Non-blocking Context",
        "type": "base",
        "original_content": "CWE-1322: Use of Blocking Code in Single-threaded, Non-blocking Context",
        "relationships": [
          {
            "source_id": "1322",
            "target_id": "835",
            "label": "CANPRECEDE",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1322",
            "target_id": "834",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "835",
            "target_id": "1322",
            "label": "CANFOLLOW",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "834",
            "target_id": "1322",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "835",
                  "1322",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "835"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "835",
                  "1322",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "835"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "1322",
                  "835",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "835"
            }
          }
        },
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-667",
      "CWE-833",
      "CWE-362"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}