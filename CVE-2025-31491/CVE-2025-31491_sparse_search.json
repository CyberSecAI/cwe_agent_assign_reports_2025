{
  "retriever": "sparse",
  "query": "AutoGPT is a platform that allows users to create, deploy, and manage continuous artificial intelligence agents that automate complex workflows. Prior to 0.6.1, AutoGPT allows of leakage of cross-domain cookies and protected headers in requests redirect. AutoGPT uses a wrapper around the requests python library, located in autogpt_platform/backend/backend/util/request.py. In this wrapper, redirects are specifically NOT followed for the first request. If the wrapper is used with allow_redirects set to True (which is the default), any redirect is not followed by the initial request, but rather re-requested by the wrapper using the new location. However, there is a fundamental flaw in manually re-requesting the new location it does not account for security-sensitive headers which should not be sent cross-origin, such as the Authorization and Proxy-Authorization header, and cookies. For example in autogpt_platform/backend/backend/blocks/github/_api.py, an Authorization header is set when retrieving data from the GitHub API. However, if GitHub suffers from an open redirect vulnerability (such as the made-up example of https//api.github.com/repos/{owner}/{repo}/issues/comments/{comment_id}/../../../../../redirect/?url=https//joshua.hu/), and the script can be coerced into visiting it with the Authorization header, the GitHub credentials in the Authorization header will be leaked. This allows leaking auth headers and private cookies. This vulnerability is fixed in 0.6.1.",
  "keyphrases": {
    "weakness": [
      "improper header handling",
      "open redirect"
    ]
  },
  "timestamp": "2025-07-12 12:39:17",
  "cve_id": "CVE-2025-31491",
  "result_count": 12,
  "results": [
    {
      "cwe_id": "212",
      "name": "Improper Removal of Sensitive Information Before Storage or Transfer",
      "score": 1419.6511103569035,
      "search_source": "weakness:open redirect"
    },
    {
      "cwe_id": "201",
      "name": "Insertion of Sensitive Information Into Sent Data",
      "score": 1302.4717900360356,
      "search_source": "weakness:open redirect"
    },
    {
      "cwe_id": "863",
      "name": "Incorrect Authorization",
      "score": 1126.673992383677,
      "search_source": "weakness:improper header handling"
    },
    {
      "cwe_id": "639",
      "name": "Authorization Bypass Through User-Controlled Key",
      "score": 1125.0305574469674,
      "search_source": "weakness:open redirect"
    },
    {
      "cwe_id": "79",
      "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
      "score": 1097.9208738153425,
      "search_source": "weakness:open redirect"
    },
    {
      "cwe_id": "113",
      "name": "Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')",
      "score": 1085.3754793031105,
      "search_source": "weakness:improper header handling"
    },
    {
      "cwe_id": "93",
      "name": "Improper Neutralization of CRLF Sequences ('CRLF Injection')",
      "score": 1066.0308531273581,
      "search_source": "weakness:improper header handling"
    },
    {
      "cwe_id": "138",
      "name": "Improper Neutralization of Special Elements",
      "score": 1061.3354007577482,
      "search_source": "weakness:improper header handling"
    },
    {
      "cwe_id": "614",
      "name": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute",
      "score": 1061.2083828970808,
      "search_source": "weakness:improper header handling"
    },
    {
      "cwe_id": "352",
      "name": "Cross-Site Request Forgery (CSRF)",
      "score": 1052.450693655137,
      "search_source": "weakness:open redirect"
    },
    {
      "cwe_id": "285",
      "name": "Improper Authorization",
      "score": 1051.354836535422,
      "search_source": "weakness:improper header handling"
    },
    {
      "cwe_id": "601",
      "name": "URL Redirection to Untrusted Site ('Open Redirect')",
      "score": 1000.0,
      "search_source": "alternate_term_match"
    }
  ]
}