{
  "method": "sparse_weakness_1",
  "query": "In the Linux kernel, the following vulnerability has been resolved mm/migrate fix shmem xarray update during migration A shmem folio can be either in page cache or in swap cache, but not at the same time. Namely, once it is in swap cache, folio->mapping should be NULL, and the folio is no longer in a shmem mapping. In __folio_migrate_mapping(), to determine the number of xarray entries to update, folio_test_swapbacked() is used, but that conflates shmem in page cache case and shmem in swap cache case. It leads to xarray multi-index entry corruption, since it turns a sibling entry to a normal entry during xas_store() (see [1] for a userspace reproduction). Fix it by only using folio_test_swapcache() to determine whether xarray is storing swap cache entries or not to choose the right number of xarray entries to update. [1] https//lore.kernel.org/linux-mm/Z8idPCkaJW1IChjT@casper.infradead.org/ Note In __split_huge_page(), folio_test_anon() && folio_test_swapcache() is used to get swap_cache address space, but that ignores the shmem folio in swap cache case. It could lead to NULL pointer dereferencing when a in-swap-cache shmem folio is split at __xa_store(), since !folio_test_anon() is true and folio->mapping is NULL. But fortunately, its caller split_huge_page_to_list_to_order() bails out early with EBUSY when folio->mapping is NULL. So no need to take care of it here.",
  "keyphrases": {
    "weakness": "xarray multi-index entry corruption"
  },
  "timestamp": "2025-07-12T10:00:13.688298",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "404",
      "name": "Improper Resource Shutdown or Release",
      "score": 953.3828574105979
    },
    {
      "doc_id": "617",
      "name": "Reachable Assertion",
      "score": 951.545411788447
    },
    {
      "doc_id": "476",
      "name": "NULL Pointer Dereference",
      "score": 945.8112167228833
    },
    {
      "doc_id": "1251",
      "name": "Mirrored Regions with Different Values",
      "score": 910.7332619308537
    },
    {
      "doc_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 909.2270350350461
    }
  ]
}