{
  "cve_id": "CVE-2025-48936",
  "description": "Zitadel is open-source identity infrastructure software. Prior to versions 2.70.12, 2.71.10, and 3.2.2, a potential vulnerability exists in the password reset mechanism. ZITADEL utilizes the Forwarded or X-Forwarded-Host header from incoming requests to construct the URL for the password reset confirmation link. This link, containing a secret code, is then emailed to the user. If an attacker can manipulate these headers (e.g., via **host header injection**), they could cause ZITADEL to generate a password reset link pointing to a malicious domain controlled by the attacker. If the user clicks this manipulated link in the email, the secret reset code embedded in the URL can be captured by the attacker. This captured code could then be used to reset the users password and gain unauthorized access to their account. This specific attack vector is mitigated for accounts that have Multi-Factor Authentication (MFA) or Passwordless authentication enabled. This issue has been patched in versions 2.70.12, 2.71.10, and 3.2.2.",
  "key_phrases": {
    "component": "password reset mechanism",
    "rootcause": "",
    "vector": "manipulate Forwarded or X-Forwarded-Host header",
    "weakness": "host header injection",
    "product": "ZITADEL",
    "impact": "reset user's password, gain unauthorized access",
    "attacker": "",
    "version": "prior to 2.70.12, 2.71.10, and 3.2.2"
  },
  "reference_content": "## Analysis of CVE-2025-48936 based on provided content\n\nThe provided content is **RELEVANT** to CVE-2025-48936. It details a vulnerability in ZITADEL related to account takeover via manipulation of the `X-Forwarded-Proto` header. Here's a breakdown of the information extracted:\n\n**Root cause of vulnerability:**\n\nZITADEL uses the `Forwarded` or `X-Forwarded-Host` header from incoming requests to construct the URL for password reset confirmation links. An attacker can manipulate these headers to point the link to a malicious domain.\n\n**Weaknesses/vulnerabilities present:**\n\n*   **Host Header Injection:** The vulnerability stems from insufficient validation of the `X-Forwarded-Proto` and `Forwarded` headers.\n*   **Insecure URL Generation:**  The password reset link is generated using potentially attacker-controlled header values.\n\n**Impact of exploitation:**\n\n*   **Account Takeover:** If a user clicks the manipulated link, the attacker can capture the secret reset code and use it to reset the user's password, gaining unauthorized access to their account.\n*   **Mitigation for MFA/Passwordless:** Accounts with Multi-Factor Authentication (MFA) or Passwordless authentication enabled are not vulnerable.\n\n**Attack vectors:**\n\n*   **Header Manipulation:** An attacker needs to be able to manipulate the `X-Forwarded-Proto` and `Forwarded` headers in requests to ZITADEL.\n\n**Required attacker capabilities/position:**\n\n*   The attacker needs to be able to send requests to the ZITADEL server with modified headers. This could be achieved through various means, depending on the deployment environment.\n\n**Mitigation or fix:**\n\n*   **Update ZITADEL:** Upgrade to patched versions: 3.2.2 or 2.70.12/2.71.11.\n*   **Proxy Configuration:** Configure a fronting proxy to delete all `Forwarded` and `X-Forwarded-Host` header values before sending requests to ZITADEL.\n*   **Header Validation:** The patched versions ensure proper validation of the headers and prevent downgrading from `https` to `http`.\n*   **Enforce HTTPS:** The commit c097887 explicitly enforces HTTPS, preventing the overwrite to HTTP.\n\n**Additional Details (compared to a hypothetical CVE description):**\n\n*   The content provides specific version numbers affected and patched.\n*   It details the technical implementation of the fix (header validation and HTTPS enforcement).\n*   It explains the workaround using a proxy.\n*   It includes CVSS scoring information (8.1/10) and a breakdown of the CVSS v3 base metrics.\n*   It credits the researcher who discovered the vulnerability (Amit Laish).\n*   The commit message provides further context on how the vulnerability works and how the fix addresses it.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-74 | Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') | 0.85 | Class | Allowed | Primary CWE. The **host header injection** allows the attacker to inject a malicious domain into the password reset link.|\n| CWE-306 | Missing Authentication for Critical Function | 0.6 | Base | Allowed | Secondary candidate. The password reset mechanism lacks proper authentication checks, allowing unauthorized modification of the reset link.|\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.7\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary CWE is CWE-74, which is a class-level weakness related to injection. CWE-306, a base-level weakness, is related to missing authentication. The vulnerability involves **host header injection** (CWE-74) leading to a malicious password reset link, which could be seen as stemming from a missing authentication check (CWE-306) on the header.\n\n```mermaid\ngraph TD\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n    cwe306[\"CWE-306: Missing Authentication for Critical Function\"]\n    \n    cwe306 -->|CANPRECEDE| cwe74\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe74 primary\n    class cwe306 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **host header injection** (**weakness**) (CWE-74), which allows an attacker to manipulate the password reset link. This leads to the exposure of the secret reset code, and ultimately to unauthorized access to the user's account. The lack of authentication (CWE-306) on the password reset mechanism facilitates the injection.\n\n## Summary of Analysis\nThe initial assessment identified CWE-74 as the primary weakness, stemming from the **host header injection** vulnerability. The content mentions that by manipulating the `Forwarded` or `X-Forwarded-Host` header an attacker can cause ZITADEL to generate a password reset link pointing to a malicious domain. This indicates an injection vulnerability. While the password reset mechanism is vulnerable and lacks sufficient authentication (CWE-306), the root cause is the **host header injection** leading to improper neutralization of special elements in the output.\n\nThe evidence from the vulnerability description key phrases includes:\n- **weakness:** **host header injection**\n\nThe evidence from the CVE Reference Links Content Summary includes:\n-   **Host Header Injection:** The vulnerability stems from insufficient validation of the `X-Forwarded-Proto` and `Forwarded` headers.\n\nI considered CWE-306 because the password reset mechanism lacks proper authentication checks, but the root cause is the improper neutralization of special elements, making CWE-74 the more appropriate primary classification.\n\nThe selected CWEs are at the optimal level of specificity, with CWE-74 being a class-level weakness and CWE-306 being a base-level weakness.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-74 | Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') | 0.85 | Class | Allowed | Primary CWE. The **host header injection** allows the attacker to inject a malicious domain into the password reset link.|\n| CWE-306 | Missing Authentication for Critical Function | 0.6 | Base | Allowed | Secondary candidate. The password reset mechanism lacks proper authentication checks, allowing unauthorized modification of the reset link.|\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.7\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary CWE is CWE-74, which is a class-level weakness related to injection. CWE-306, a base-level weakness, is related to missing authentication. The vulnerability involves **host header injection** (CWE-74) leading to a malicious password reset link, which could be seen as stemming from a missing authentication check (CWE-306) on the header.\n\n```mermaid\ngraph TD\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n    cwe306[\"CWE-306: Missing Authentication for Critical Function\"]\n    \n    cwe306 -->|CANPRECEDE| cwe74\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe74 primary\n    class cwe306 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **host header injection** (**weakness**) (CWE-74), which allows an attacker to manipulate the password reset link. This leads to the exposure of the secret reset code, and ultimately to unauthorized access to the user's account. The lack of authentication (CWE-306) on the password reset mechanism facilitates the injection.\n\n## Summary of Analysis\nThe initial assessment identified CWE-74 as the primary weakness, stemming from the **host header injection** vulnerability. The content mentions that by manipulating the `Forwarded` or `X-Forwarded-Host` header an attacker can cause ZITADEL to generate a password reset link pointing to a malicious domain. This indicates an injection vulnerability. While the password reset mechanism is vulnerable and lacks sufficient authentication (CWE-306), the root cause is the **host header injection** leading to improper neutralization of special elements in the output.\n\nThe evidence from the vulnerability description key phrases includes:\n- **weakness:** **host header injection**\n\nThe evidence from the CVE Reference Links Content Summary includes:\n-   **Host Header Injection:** The vulnerability stems from insufficient validation of the `X-Forwarded-Proto` and `Forwarded` headers.\n\nI considered CWE-306 because the password reset mechanism lacks proper authentication checks, but the root cause is the improper neutralization of special elements, making CWE-74 the more appropriate primary classification.\n\nThe selected CWEs are at the optimal level of specificity, with CWE-74 being a class-level weakness and CWE-306 being a base-level weakness.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-306:**\n- 306 (Missing Authentication for Critical Function) - ROOT\n\n\n**Chain starting from CWE-74:**\n- 74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "74",
        "name": "Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')",
        "source": "sparse"
      },
      "similarity": 945.2578155882895
    },
    {
      "metadata": {
        "doc_id": "1390",
        "name": "Weak Authentication",
        "source": "sparse"
      },
      "similarity": 937.4703474274187
    },
    {
      "metadata": {
        "doc_id": "287",
        "name": "Improper Authentication",
        "source": "sparse"
      },
      "similarity": 879.9495859708691
    },
    {
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "source": "sparse"
      },
      "similarity": 867.4124598486363
    },
    {
      "metadata": {
        "doc_id": "290",
        "name": "Authentication Bypass by Spoofing",
        "source": "sparse"
      },
      "similarity": 859.0976163112209
    },
    {
      "metadata": {
        "doc_id": "113",
        "name": "Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')",
        "source": "sparse"
      },
      "similarity": 848.5741222105842
    },
    {
      "metadata": {
        "doc_id": "306",
        "name": "Missing Authentication for Critical Function",
        "source": "sparse"
      },
      "similarity": 832.8833737441365
    },
    {
      "metadata": {
        "doc_id": "288",
        "name": "Authentication Bypass Using an Alternate Path or Channel",
        "source": "sparse"
      },
      "similarity": 830.2336669885858
    },
    {
      "metadata": {
        "doc_id": "620",
        "name": "Unverified Password Change",
        "type": "Base",
        "original_content": "When setting a new password for a user, the product does not require knowledge of the original password, or using another form of authentication.",
        "keyphrase_source": "weakness:host header injection",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse",
            "graph"
          ],
          "retriever_count": 3,
          "normalized_scores": {
            "dense": 0.51104396977095,
            "sparse": 293.4130397289232,
            "graph": 1.7084508403767513
          }
        }
      },
      "similarity": 0.51104396977095
    },
    {
      "doc_id": "321",
      "text": "CWE-321: Use of Hard-coded Cryptographic Key",
      "score": 2.68272,
      "metadata": {
        "doc_id": "321",
        "name": "Use of Hard-coded Cryptographic Key",
        "type": "variant",
        "original_content": "CWE-321: Use of Hard-coded Cryptographic Key",
        "relationships": [
          {
            "source_id": "321",
            "target_id": "656",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "321",
            "target_id": "798",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1340"
            }
          },
          {
            "source_id": "321",
            "target_id": "798",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1305"
            }
          },
          {
            "source_id": "321",
            "target_id": "798",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "798",
            "target_id": "321",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "656",
            "target_id": "321",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "259",
            "target_id": "321",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1291",
            "target_id": "321",
            "label": "PEEROF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 0.7,
          "abstraction_path": 0.6080000000000001,
          "sequence_path": 0.8,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.2,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "259",
                  "321",
                  "PEEROF"
                ]
              ],
              "score": 0.7,
              "type": "relationship_chain",
              "source": "259"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "287",
                  "798",
                  "PARENTOF"
                ],
                [
                  "798",
                  "321",
                  "PARENTOF"
                ]
              ],
              "score": 0.6080000000000001,
              "type": "abstraction_path_down",
              "source": "287"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "259",
                  "656",
                  "CANFOLLOW"
                ],
                [
                  "656",
                  "321",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "vulnerability_sequence_forward",
              "source": "259"
            },
            "peer_relationship": {
              "path": [
                [
                  "259",
                  "321",
                  "PEEROF"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "259"
            }
          }
        },
        "abstraction_level": "variant",
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.68272
          }
        }
      },
      "similarity": 2.68272
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-306",
      "CWE-74"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}