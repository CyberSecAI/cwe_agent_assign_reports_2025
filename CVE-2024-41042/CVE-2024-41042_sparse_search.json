{
  "retriever": "sparse",
  "query": "In the Linux kernel, the following vulnerability has been resolved netfilter nf_tables prefer nft_chain_validate nft_chain_validate already performs loop detection because a cycle will result in a call stack overflow (ctx->level >= NFT_JUMP_STACK_SIZE). It also follows maps via ->validate callback in nft_lookup, so there appears no reason to iterate the maps again. nf_tables_check_loops() and all its helper functions can be removed. This improves ruleset load time significantly, from 23s down to 12s. This also fixes a crash bug. Old loop detection code can result in unbounded recursion BUG TASK stack guard page was hit at .... Oops stack guard page 0000 [#1] PREEMPT SMP KASAN CPU 4 PID 1539 Comm nft Not tainted 6.10.0-rc5+ #1 [..] with a suitable ruleset during validation of register stores. I cant see any actual reason to attempt to check for this from nft_validate_register_store(), at this point the transaction is still in progress, so we dont have a full picture of the rule graph. For nf-next it might make sense to either remove it or make this depend on table->validate_state in case we could catch an error earlier (for improved error reporting to userspace).",
  "keyphrases": {
    "rootcause": [
      "unbounded recursion"
    ],
    "weakness": [
      "stack overflow"
    ]
  },
  "timestamp": "2025-07-13 12:50:28",
  "cve_id": "CVE-2024-41042",
  "result_count": 11,
  "results": [
    {
      "cwe_id": "121",
      "name": "Stack-based Buffer Overflow",
      "score": 1000.0,
      "search_source": "alternate_term_match"
    },
    {
      "cwe_id": "674",
      "name": "Uncontrolled Recursion",
      "score": 843.2771679621426,
      "search_source": "rootcause:unbounded recursion"
    },
    {
      "cwe_id": "190",
      "name": "Integer Overflow or Wraparound",
      "score": 800.0,
      "search_source": "alternate_term_match"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 763.8953064285413,
      "search_source": "rootcause:unbounded recursion"
    },
    {
      "cwe_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "score": 752.7103004817327,
      "search_source": "rootcause:unbounded recursion"
    },
    {
      "cwe_id": "125",
      "name": "Out-of-bounds Read",
      "score": 732.2676666236794,
      "search_source": "rootcause:unbounded recursion"
    },
    {
      "cwe_id": "863",
      "name": "Incorrect Authorization",
      "score": 723.2948626955316,
      "search_source": "rootcause:unbounded recursion"
    },
    {
      "cwe_id": "835",
      "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
      "score": 723.2224809895183,
      "search_source": "rootcause:unbounded recursion"
    },
    {
      "cwe_id": "194",
      "name": "Unexpected Sign Extension",
      "score": 716.708414625108,
      "search_source": "rootcause:unbounded recursion"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 713.007885111874,
      "search_source": "rootcause:unbounded recursion"
    },
    {
      "cwe_id": "789",
      "name": "Memory Allocation with Excessive Size Value",
      "score": 705.3820377933952,
      "search_source": "rootcause:unbounded recursion"
    }
  ]
}