{
  "method": "sparse_base",
  "query": "In the Linux kernel, the following vulnerability has been resolved netfilter nf_tables prefer nft_chain_validate nft_chain_validate already performs loop detection because a cycle will result in a call stack overflow (ctx->level >= NFT_JUMP_STACK_SIZE). It also follows maps via ->validate callback in nft_lookup, so there appears no reason to iterate the maps again. nf_tables_check_loops() and all its helper functions can be removed. This improves ruleset load time significantly, from 23s down to 12s. This also fixes a crash bug. Old loop detection code can result in unbounded recursion BUG TASK stack guard page was hit at .... Oops stack guard page 0000 [#1] PREEMPT SMP KASAN CPU 4 PID 1539 Comm nft Not tainted 6.10.0-rc5+ #1 [..] with a suitable ruleset during validation of register stores. I cant see any actual reason to attempt to check for this from nft_validate_register_store(), at this point the transaction is still in progress, so we dont have a full picture of the rule graph. For nf-next it might make sense to either remove it or make this depend on table->validate_state in case we could catch an error earlier (for improved error reporting to userspace).",
  "keyphrases": {
    "base_query": "In the Linux kernel, the following vulnerability has been resolved netfilter nf_tables prefer nft_chain_validate nft_chain_validate already performs loop detection because a cycle will result in a call stack overflow (ctx->level >= NFT_JUMP_STACK_SIZE). It also follows maps via ->validate callback in nft_lookup, so there appears no reason to iterate the maps again. nf_tables_check_loops() and all its helper functions can be removed. This improves ruleset load time significantly, from 23s down to 12s. This also fixes a crash bug. Old loop detection code can result in unbounded recursion BUG TASK stack guard page was hit at .... Oops stack guard page 0000 [#1] PREEMPT SMP KASAN CPU 4 PID 1539 Comm nft Not tainted 6.10.0-rc5+ #1 [..] with a suitable ruleset during validation of register stores. I cant see any actual reason to attempt to check for this from nft_validate_register_store(), at this point the transaction is still in progress, so we dont have a full picture of the rule graph. For nf-next it might make sense to either remove it or make this depend on table->validate_state in case we could catch an error earlier (for improved error reporting to userspace)."
  },
  "timestamp": "2025-07-13T12:50:28.514407",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "674",
      "name": "Uncontrolled Recursion",
      "score": 265.7674954211033
    },
    {
      "doc_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 254.63176880951374
    },
    {
      "doc_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "score": 247.53207426720343
    },
    {
      "doc_id": "125",
      "name": "Out-of-bounds Read",
      "score": 244.08922220789313
    },
    {
      "doc_id": "863",
      "name": "Incorrect Authorization",
      "score": 241.0982875651772
    }
  ]
}