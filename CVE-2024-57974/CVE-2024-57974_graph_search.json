{
  "retriever": "graph",
  "query": "In the Linux kernel, the following vulnerability has been resolved udp Deal with race between UDP socket address change and rehash If a UDP socket changes its local address while its receiving datagrams, as a result of connect(), there is a period during which a lookup operation might fail to find it, after the address is changed but before the secondary hash (port and address) and the four-tuple hash (local and remote ports and addresses) are updated. Secondary hash chains were introduced by commit 30fff9231fad (udp bind() optimisation) and, as a result, a rehash operation became needed to make a bound socket reachable again after a connect(). This operation was introduced by commit 719f835853a9 (udp add rehash on connect()) which isnt however a complete fix the socket will be found once the rehashing completes, but not while its pending. This is noticeable with a socat(1) server in UDP4-LISTEN mode, and a client sending datagrams to it. After the server receives the first datagram (cf. _xioopen_ipdgram_listen()), it issues a connect() to the address of the sender, in order to set up a directed flow. Now, if the client, running on a different CPU thread, happens to send a (subsequent) datagram while the servers socket changes its address, but is not rehashed yet, this will result in a failed lookup and a port unreachable error delivered to the client, as apparent from the following reproducer LEN=$(($(cat /proc/sys/net/core/wmem_default) / 4)) dd if=/dev/urandom bs=1 count=${LEN} of=tmp.in while do taskset -c 1 socat UDP4-LISTEN1337,null-eof OPENtmp.out,create,trunc & sleep 0.1 || sleep 1 taskset -c 2 socat OPENtmp.in UDP4localhost1337,shut-null wait done where the client will eventually get ECONNREFUSED on a write() (typically the second or third one of a given iteration) 2024/11/13 212823 socat[46901] E write(6, 0x556db2e3c000, 8192) Connection refused This issue was first observed as a seldom failure in Podmans tests checking UDP functionality while using pasta(1) to connect the containers network namespace, which leads us to a reproducer with the lookup error resulting in an ICMP packet on a tap device LOCAL_ADDR=$(ip -j -4 addr show|jq -rM .[] | .addr_info[0] | select(.scope == global).local) while do ./pasta --config-net -p pasta.pcap -u 1337 socat UDP4-LISTEN1337,null-eof OPENtmp.out,create,trunc & sleep 0.2 || sleep 1 socat OPENtmp.in UDP4${LOCAL_ADDR}1337,shut-null wait cmp tmp.in tmp.out done Once this fails tmp.in tmp.out differ char 8193, line 29 we can finally have a look at whats going on $ tshark -r pasta.pcap 1 0.000000 ? ff0216 ICMPv6 110 Multicast Listener Report Message v2 2 0.168690 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192 3 0.168767 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192 4 0.168806 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192 5 0.168827 c647058ddc04 ? Broadcast ARP 42 Who has 88.198.0.161? Tell 88.198.0.164 6 0.168851 9a559a559a55 ? c647058ddc04 ARP 42 88.198.0.161 is at 9a559a559a55 7 0.168875 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192 8 0.168896 88.198.0.164 ? 88.198.0.161 ICMP 590 Destination unreachable (Port unreachable) 9 0.168926 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192 10 0.168959 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192 11 0.168989 88.198.0.161 ? 88.198.0.164 UDP 4138 60260 ? 1337 Len=4096 12 0.169010 88.198.0.161 ? 88.198.0.164 UDP 42 60260 ? 1337 Len=0 On the third datagram received, the network namespace of the container initiates an ARP lookup to deliver the ICMP message. In another variant of this reproducer, starting the client with strace -f pasta --config-net -u 1337 socat UDP4-LISTEN1337,null-eof OPENtmp.out,create,tru ---truncated--- Consider specifically these CWEs: CWE-789 CWE-401 CWE-476 CWE-770 CWE-362 CWE-605 CWE-835",
  "keyphrases": {
    "original_query": "In the Linux kernel, the following vulnerability has been resolved udp Deal with race between UDP socket address change and rehash If a UDP socket changes its local address while its receiving datagrams, as a result of connect(), there is a period during which a lookup operation might fail to find it, after the address is changed but before the secondary hash (port and address) and the four-tuple hash (local and remote ports and addresses) are updated. Secondary hash chains were introduced by commit 30fff9231fad (udp bind() optimisation) and, as a result, a rehash operation became needed to make a bound socket reachable again after a connect(). This operation was introduced by commit 719f835853a9 (udp add rehash on connect()) which isnt however a complete fix the socket will be found once the rehashing completes, but not while its pending. This is noticeable with a socat(1) server in UDP4-LISTEN mode, and a client sending datagrams to it. After the server receives the first datagram (cf. _xioopen_ipdgram_listen()), it issues a connect() to the address of the sender, in order to set up a directed flow. Now, if the client, running on a different CPU thread, happens to send a (subsequent) datagram while the servers socket changes its address, but is not rehashed yet, this will result in a failed lookup and a port unreachable error delivered to the client, as apparent from the following reproducer LEN=$(($(cat /proc/sys/net/core/wmem_default) / 4)) dd if=/dev/urandom bs=1 count=${LEN} of=tmp.in while do taskset -c 1 socat UDP4-LISTEN1337,null-eof OPENtmp.out,create,trunc & sleep 0.1 || sleep 1 taskset -c 2 socat OPENtmp.in UDP4localhost1337,shut-null wait done where the client will eventually get ECONNREFUSED on a write() (typically the second or third one of a given iteration) 2024/11/13 212823 socat[46901] E write(6, 0x556db2e3c000, 8192) Connection refused This issue was first observed as a seldom failure in Podmans tests checking UDP functionality while using pasta(1) to connect the containers network namespace, which leads us to a reproducer with the lookup error resulting in an ICMP packet on a tap device LOCAL_ADDR=$(ip -j -4 addr show|jq -rM .[] | .addr_info[0] | select(.scope == global).local) while do ./pasta --config-net -p pasta.pcap -u 1337 socat UDP4-LISTEN1337,null-eof OPENtmp.out,create,trunc & sleep 0.2 || sleep 1 socat OPENtmp.in UDP4${LOCAL_ADDR}1337,shut-null wait cmp tmp.in tmp.out done Once this fails tmp.in tmp.out differ char 8193, line 29 we can finally have a look at whats going on $ tshark -r pasta.pcap 1 0.000000 ? ff0216 ICMPv6 110 Multicast Listener Report Message v2 2 0.168690 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192 3 0.168767 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192 4 0.168806 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192 5 0.168827 c647058ddc04 ? Broadcast ARP 42 Who has 88.198.0.161? Tell 88.198.0.164 6 0.168851 9a559a559a55 ? c647058ddc04 ARP 42 88.198.0.161 is at 9a559a559a55 7 0.168875 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192 8 0.168896 88.198.0.164 ? 88.198.0.161 ICMP 590 Destination unreachable (Port unreachable) 9 0.168926 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192 10 0.168959 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192 11 0.168989 88.198.0.161 ? 88.198.0.164 UDP 4138 60260 ? 1337 Len=4096 12 0.169010 88.198.0.161 ? 88.198.0.164 UDP 42 60260 ? 1337 Len=0 On the third datagram received, the network namespace of the container initiates an ARP lookup to deliver the ICMP message. In another variant of this reproducer, starting the client with strace -f pasta --config-net -u 1337 socat UDP4-LISTEN1337,null-eof OPENtmp.out,create,tru ---truncated---",
    "enhanced_query": "In the Linux kernel, the following vulnerability has been resolved udp Deal with race between UDP socket address change and rehash If a UDP socket changes its local address while its receiving datagrams, as a result of connect(), there is a period during which a lookup operation might fail to find it, after the address is changed but before the secondary hash (port and address) and the four-tuple hash (local and remote ports and addresses) are updated. Secondary hash chains were introduced by commit 30fff9231fad (udp bind() optimisation) and, as a result, a rehash operation became needed to make a bound socket reachable again after a connect(). This operation was introduced by commit 719f835853a9 (udp add rehash on connect()) which isnt however a complete fix the socket will be found once the rehashing completes, but not while its pending. This is noticeable with a socat(1) server in UDP4-LISTEN mode, and a client sending datagrams to it. After the server receives the first datagram (cf. _xioopen_ipdgram_listen()), it issues a connect() to the address of the sender, in order to set up a directed flow. Now, if the client, running on a different CPU thread, happens to send a (subsequent) datagram while the servers socket changes its address, but is not rehashed yet, this will result in a failed lookup and a port unreachable error delivered to the client, as apparent from the following reproducer LEN=$(($(cat /proc/sys/net/core/wmem_default) / 4)) dd if=/dev/urandom bs=1 count=${LEN} of=tmp.in while do taskset -c 1 socat UDP4-LISTEN1337,null-eof OPENtmp.out,create,trunc & sleep 0.1 || sleep 1 taskset -c 2 socat OPENtmp.in UDP4localhost1337,shut-null wait done where the client will eventually get ECONNREFUSED on a write() (typically the second or third one of a given iteration) 2024/11/13 212823 socat[46901] E write(6, 0x556db2e3c000, 8192) Connection refused This issue was first observed as a seldom failure in Podmans tests checking UDP functionality while using pasta(1) to connect the containers network namespace, which leads us to a reproducer with the lookup error resulting in an ICMP packet on a tap device LOCAL_ADDR=$(ip -j -4 addr show|jq -rM .[] | .addr_info[0] | select(.scope == global).local) while do ./pasta --config-net -p pasta.pcap -u 1337 socat UDP4-LISTEN1337,null-eof OPENtmp.out,create,trunc & sleep 0.2 || sleep 1 socat OPENtmp.in UDP4${LOCAL_ADDR}1337,shut-null wait cmp tmp.in tmp.out done Once this fails tmp.in tmp.out differ char 8193, line 29 we can finally have a look at whats going on $ tshark -r pasta.pcap 1 0.000000 ? ff0216 ICMPv6 110 Multicast Listener Report Message v2 2 0.168690 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192 3 0.168767 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192 4 0.168806 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192 5 0.168827 c647058ddc04 ? Broadcast ARP 42 Who has 88.198.0.161? Tell 88.198.0.164 6 0.168851 9a559a559a55 ? c647058ddc04 ARP 42 88.198.0.161 is at 9a559a559a55 7 0.168875 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192 8 0.168896 88.198.0.164 ? 88.198.0.161 ICMP 590 Destination unreachable (Port unreachable) 9 0.168926 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192 10 0.168959 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192 11 0.168989 88.198.0.161 ? 88.198.0.164 UDP 4138 60260 ? 1337 Len=4096 12 0.169010 88.198.0.161 ? 88.198.0.164 UDP 42 60260 ? 1337 Len=0 On the third datagram received, the network namespace of the container initiates an ARP lookup to deliver the ICMP message. In another variant of this reproducer, starting the client with strace -f pasta --config-net -u 1337 socat UDP4-LISTEN1337,null-eof OPENtmp.out,create,tru ---truncated--- Consider specifically these CWEs: CWE-789 CWE-401 CWE-476 CWE-770 CWE-362 CWE-605 CWE-835",
    "cwe_mentions": [
      "CWE-789",
      "CWE-401",
      "CWE-476",
      "CWE-770",
      "CWE-362",
      "CWE-605",
      "CWE-835"
    ],
    "search_time": 3.2881686687469482
  },
  "timestamp": "2025-07-12 06:58:07",
  "cve_id": "CVE-2024-57974",
  "result_count": 20,
  "results": [
    {
      "cwe_id": "1325",
      "name": "Improperly Controlled Sequential Memory Allocation",
      "type": "base",
      "score": 3.5671999999999997,
      "relationship_count": 0
    },
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "type": "Base",
      "score": 2.8049867852982815,
      "relationship_count": 0
    },
    {
      "cwe_id": "789",
      "name": "Memory Allocation with Excessive Size Value",
      "type": "Variant",
      "score": 2.5285093235511162,
      "relationship_count": 0
    },
    {
      "cwe_id": "252",
      "name": "Unchecked Return Value",
      "type": "base",
      "score": 2.2100000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "390",
      "name": "Detection of Error Condition Without Action",
      "type": "base",
      "score": 2.2100000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "1322",
      "name": "Use of Blocking Code in Single-threaded, Non-blocking Context",
      "type": "base",
      "score": 2.2100000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "129",
      "name": "Improper Validation of Array Index",
      "type": "variant",
      "score": 2.04,
      "relationship_count": 0
    },
    {
      "cwe_id": "416",
      "name": "Use After Free",
      "type": "variant",
      "score": 2.04,
      "relationship_count": 0
    },
    {
      "cwe_id": "823",
      "name": "Use of Out-of-range Pointer Offset",
      "type": "base",
      "score": 1.7680000000000005,
      "relationship_count": 0
    },
    {
      "cwe_id": "120",
      "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
      "type": "base",
      "score": 1.7680000000000005,
      "relationship_count": 0
    },
    {
      "cwe_id": "123",
      "name": "Write-what-where Condition",
      "type": "base",
      "score": 1.7680000000000005,
      "relationship_count": 0
    },
    {
      "cwe_id": "22",
      "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
      "type": "base",
      "score": 1.7680000000000005,
      "relationship_count": 0
    },
    {
      "cwe_id": "41",
      "name": "Improper Resolution of Path Equivalence",
      "type": "base",
      "score": 1.7680000000000005,
      "relationship_count": 0
    },
    {
      "cwe_id": "364",
      "name": "Signal Handler Race Condition",
      "type": "base",
      "score": 1.7550000000000001,
      "relationship_count": 0
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "type": "Class",
      "score": 1.748319509866342,
      "relationship_count": 0
    },
    {
      "cwe_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "type": "Base",
      "score": 1.6931795130469771,
      "relationship_count": 0
    },
    {
      "cwe_id": "1265",
      "name": "Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls",
      "type": "base",
      "score": 1.6848000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "386",
      "name": "Symbolic Name not Mapping to Correct Object",
      "type": "base",
      "score": 1.6744000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "61",
      "name": "UNIX Symbolic Link (Symlink) Following",
      "type": "compound",
      "score": 1.61,
      "relationship_count": 0
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "type": "Base",
      "score": 1.526037869630109,
      "relationship_count": 0
    }
  ]
}