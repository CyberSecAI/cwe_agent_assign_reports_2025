{
  "retriever": "dense",
  "query": "In the Linux kernel, the following vulnerability has been resolved libfs fix get_stashed_dentry() get_stashed_dentry() tries to optimistically retrieve a stashed dentry from a provided location. It needs to ensure to hold rcu lock before it dereference the stashed location to prevent UAF issues. Use rcu_dereference() instead of READ_ONCE() its effectively equivalent with some lockdep bells and whistles and it communicates clearly that this expects rcu protection.",
  "keyphrases": {
    "weakness": [
      "Use-After-Free"
    ]
  },
  "timestamp": "2025-07-12 04:47:01",
  "cve_id": "CVE-2024-46801",
  "result_count": 20,
  "results": [
    {
      "cwe_id": "911",
      "name": "Improper Update of Reference Count",
      "type": "Base",
      "score": 0.5286001489721496
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "type": "Class",
      "score": 0.5249360963320608
    },
    {
      "cwe_id": "909",
      "name": "Missing Initialization of Resource",
      "type": "Class",
      "score": 0.5132398790066599
    },
    {
      "cwe_id": "908",
      "name": "Use of Uninitialized Resource",
      "type": "Base",
      "score": 0.5095899128087984
    },
    {
      "cwe_id": "763",
      "name": "Release of Invalid Pointer or Reference",
      "type": "Base",
      "score": 0.4994233912269479
    },
    {
      "cwe_id": "822",
      "name": "Untrusted Pointer Dereference",
      "type": "Base",
      "score": 0.4993617546333181
    },
    {
      "cwe_id": "413",
      "name": "Improper Resource Locking",
      "type": "Base",
      "score": 0.49614470441177294
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "type": "Class",
      "score": 0.49605630720635163
    },
    {
      "cwe_id": "366",
      "name": "Race Condition within a Thread",
      "type": "Base",
      "score": 0.4858608580923035
    },
    {
      "cwe_id": "457",
      "name": "Use of Uninitialized Variable",
      "type": "Variant",
      "score": 0.48458907817107355
    },
    {
      "cwe_id": "591",
      "name": "Sensitive Data Storage in Improperly Locked Memory",
      "type": "Variant",
      "score": 0.4574402532689289
    },
    {
      "cwe_id": "825",
      "name": "Expired Pointer Dereference",
      "type": "Base",
      "score": 0.43722712997577606
    },
    {
      "cwe_id": "832",
      "name": "Unlock of a Resource that is not Locked",
      "type": "Base",
      "score": 0.4352268841423614
    },
    {
      "cwe_id": "1421",
      "name": "Exposure of Sensitive Information in Shared Microarchitectural Structures during Transient Execution",
      "type": "Base",
      "score": 0.43142082942636056
    },
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "type": "Base",
      "score": 0.430127867482371
    },
    {
      "cwe_id": "252",
      "name": "Unchecked Return Value",
      "type": "Base",
      "score": 0.42770876866763874
    },
    {
      "cwe_id": "833",
      "name": "Deadlock",
      "type": "Base",
      "score": 0.4259685204508893
    },
    {
      "cwe_id": "403",
      "name": "Exposure of File Descriptor to Unintended Control Sphere ('File Descriptor Leak')",
      "type": "Base",
      "score": 0.42383992792656316
    },
    {
      "cwe_id": "665",
      "name": "Improper Initialization",
      "type": "Class",
      "score": 0.4237872503628649
    },
    {
      "cwe_id": "62",
      "name": "UNIX Hard Link",
      "type": "Variant",
      "score": 0.4237104903955519
    }
  ]
}