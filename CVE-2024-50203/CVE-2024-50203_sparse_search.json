{
  "retriever": "sparse",
  "query": "In the Linux kernel, the following vulnerability has been resolved bpf, arm64 Fix address emission with tag-based KASAN enabled When BPF_TRAMP_F_CALL_ORIG is enabled, the address of a bpf_tramp_image struct on the stack is passed during the size calculation pass and an address on the heap is passed during code generation. This may cause a heap buffer overflow if the heap address is tagged because emit_a64_mov_i64() will emit longer code than it did during the size calculation pass. The same problem could occur without tag-based KASAN if one of the 16-bit words of the stack address happened to be all-ones during the size calculation pass. Fix the problem by assuming the worst case (4 instructions) when calculating the size of the bpf_tramp_image address emission.",
  "keyphrases": {
    "rootcause": [
      "address emission with tag-based KASAN enabled"
    ],
    "weakness": [
      "heap buffer overflow"
    ]
  },
  "timestamp": "2025-07-12 05:29:16",
  "cve_id": "CVE-2024-50203",
  "result_count": 12,
  "results": [
    {
      "cwe_id": "190",
      "name": "Integer Overflow or Wraparound",
      "score": 800.0,
      "search_source": "alternate_term_match"
    },
    {
      "cwe_id": "119",
      "name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
      "score": 800.0,
      "search_source": "alternate_term_match"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 736.4590470686154,
      "search_source": "rootcause:address emission with tag-based KASAN enabled"
    },
    {
      "cwe_id": "193",
      "name": "Off-by-one Error",
      "score": 721.5560190919394,
      "search_source": "rootcause:address emission with tag-based KASAN enabled"
    },
    {
      "cwe_id": "835",
      "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
      "score": 698.2653279068309,
      "search_source": "rootcause:address emission with tag-based KASAN enabled"
    },
    {
      "cwe_id": "191",
      "name": "Integer Underflow (Wrap or Wraparound)",
      "score": 693.4347456785943,
      "search_source": "rootcause:address emission with tag-based KASAN enabled"
    },
    {
      "cwe_id": "194",
      "name": "Unexpected Sign Extension",
      "score": 691.1349544344986,
      "search_source": "rootcause:address emission with tag-based KASAN enabled"
    },
    {
      "cwe_id": "122",
      "name": "Heap-based Buffer Overflow",
      "score": 675.574753716355,
      "search_source": "rootcause:address emission with tag-based KASAN enabled"
    },
    {
      "cwe_id": "789",
      "name": "Memory Allocation with Excessive Size Value",
      "score": 672.7670318872828,
      "search_source": "rootcause:address emission with tag-based KASAN enabled"
    },
    {
      "cwe_id": "131",
      "name": "Incorrect Calculation of Buffer Size",
      "score": 670.8970618726447,
      "search_source": "rootcause:address emission with tag-based KASAN enabled"
    },
    {
      "cwe_id": "681",
      "name": "Incorrect Conversion between Numeric Types",
      "score": 668.4594794547903,
      "search_source": "rootcause:address emission with tag-based KASAN enabled"
    },
    {
      "cwe_id": "197",
      "name": "Numeric Truncation Error",
      "score": 642.2125351161994,
      "search_source": "weakness:heap buffer overflow"
    }
  ]
}