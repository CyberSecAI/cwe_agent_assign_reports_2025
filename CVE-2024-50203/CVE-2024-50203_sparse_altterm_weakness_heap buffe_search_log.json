{
  "method": "sparse_altterm_weakness_heap buffe",
  "query": "In the Linux kernel, the following vulnerability has been resolved bpf, arm64 Fix address emission with tag-based KASAN enabled When BPF_TRAMP_F_CALL_ORIG is enabled, the address of a bpf_tramp_image struct on the stack is passed during the size calculation pass and an address on the heap is passed during code generation. This may cause a heap buffer overflow if the heap address is tagged because emit_a64_mov_i64() will emit longer code than it did during the size calculation pass. The same problem could occur without tag-based KASAN if one of the 16-bit words of the stack address happened to be all-ones during the size calculation pass. Fix the problem by assuming the worst case (4 instructions) when calculating the size of the bpf_tramp_image address emission.",
  "keyphrases": {
    "weakness": "heap buffer overflow"
  },
  "timestamp": "2025-07-12T05:29:16.611336",
  "results_count": 2,
  "results_summary": [
    {
      "doc_id": "119",
      "name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
      "score": 800.0
    },
    {
      "doc_id": "190",
      "name": "Integer Overflow or Wraparound",
      "score": 800.0
    }
  ]
}