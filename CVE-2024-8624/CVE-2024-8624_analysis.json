{
  "cve_id": "CVE-2024-8624",
  "description": "The MDTF - Meta Data and Taxonomies Filter plugin for WordPress is vulnerable to SQL Injection via the meta_key attribute of the mdf_select_title shortcode in all versions up to, and including, 1.3.3.3 due to **insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query**. This makes it possible for authenticated attackers, with Contributor-level access and above, to append additional SQL queries into already existing queries that can be used to extract sensitive information from the database.",
  "key_phrases": {
    "rootcause": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
    "weakness": "sql injection",
    "impact": "extract sensitive information from the database",
    "vector": "meta_key attribute of the mdf_select_title shortcode",
    "attacker": "authenticated attackers with Contributor-level access and above",
    "product": "MDTF - Meta Data and Taxonomies Filter plugin for WordPress",
    "version": "all versions up to and including 1.3.3.3",
    "component": "mdf_select_title shortcode"
  },
  "reference_content": "Based on the provided information, here's an analysis of CVE-2024-8624:\n\n**Root Cause of Vulnerability:**\nThe vulnerability stems from insufficient escaping of the user-supplied `meta_key` parameter within the 'mdf_select_title' shortcode, coupled with a lack of proper preparation in the existing SQL query within the \"MDTF \u2013 Meta Data and Taxonomies Filter\" WordPress plugin.\n\n**Weaknesses/Vulnerabilities Present:**\n- **SQL Injection:** The primary vulnerability is a SQL Injection flaw, arising from the direct inclusion of the unescaped `meta_key` parameter within an SQL query.\n\n**Impact of Exploitation:**\n- **Sensitive Information Disclosure:** Attackers can exploit the SQL injection to extract sensitive data from the WordPress database.\n\n**Attack Vectors:**\n- The vulnerability is triggered through the 'mdf_select_title' shortcode, using the 'meta_key' parameter.\n\n**Required Attacker Capabilities/Position:**\n- **Authentication:** Attackers must have at least Contributor-level access to the WordPress site.\n- **Ability to use Shortcodes:** Attackers must be able to utilize shortcodes, which is generally available to users with Contributor-level permissions or higher.\n\n**Additional Details:**\n- The vulnerable code is located in the `core.php` file of the plugin.\n- The vulnerable versions include all versions up to and including 1.3.3.3.\n- The patched version is 1.3.3.4\n- The fix involved using `$wpdb->prepare` to sanitize the input, preventing the SQL Injection vulnerability by properly escaping the `meta_key` parameter before embedding it in the SQL query.\n\nThe Wordfence article provides a good description of the vulnerability and confirms the CVE details. The Trac changeset shows the code change that was made to resolve the vulnerability.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-89 | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | 1.0 | Base | Allowed | Primary CWE. The root cause is **insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query** which leads to SQL injection. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship that influenced the decision was the hierarchical relationship of CWE-89 as a Base level weakness related to **improper neutralization of special elements**. The vulnerability description explicitly mentions **insufficient escaping** and **lack of sufficient preparation on the existing SQL query** as the root cause, directly aligning with the concept of **improper neutralization** in SQL queries.\n\n```mermaid\ngraph TD\n    cwe89[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"]\n    cwe943[\"CWE-943: Improper Neutralization of Special Elements in Data Query Logic\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n    \n    cwe89 -->|CHILDOF| cwe943\n    cwe89 -->|CHILDOF| cwe74\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe89 primary\n    class cwe943,cwe74 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query** (CWE-89), which allows attackers to inject malicious SQL code. This leads to the impact of extracting sensitive information from the database.\n\n## Summary of Analysis\nThe analysis is strongly based on the evidence provided in the vulnerability description, which explicitly states the root cause as \"**insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query**\". This directly corresponds to CWE-89, which focuses on **improper neutralization of special elements** in SQL commands. The \"CVE Reference Links Content Summary\" confirms that the fix involved using `$wpdb->prepare` to sanitize the input, further supporting the SQL Injection classification.\n\nThe retriever results also strongly support CWE-89 as the primary weakness, with a score of 1.0.\n\nCWE-94 (\"Improper Control of Generation of Code ('Code Injection')\") was considered but not selected because the vulnerability is specifically related to SQL injection, rather than generic code injection. CWE-90 (\"Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')\") was also considered but discarded as the vulnerability relates to SQL, not LDAP.\n\nThe selected CWE (CWE-89) is at the optimal level of specificity (Base), as it directly addresses the root cause of the vulnerability.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-89 | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | 1.0 | Base | Allowed | Primary CWE. The root cause is **insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query** which leads to SQL injection. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship that influenced the decision was the hierarchical relationship of CWE-89 as a Base level weakness related to **improper neutralization of special elements**. The vulnerability description explicitly mentions **insufficient escaping** and **lack of sufficient preparation on the existing SQL query** as the root cause, directly aligning with the concept of **improper neutralization** in SQL queries.\n\n```mermaid\ngraph TD\n    cwe89[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"]\n    cwe943[\"CWE-943: Improper Neutralization of Special Elements in Data Query Logic\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n    \n    cwe89 -->|CHILDOF| cwe943\n    cwe89 -->|CHILDOF| cwe74\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe89 primary\n    class cwe943,cwe74 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query** (CWE-89), which allows attackers to inject malicious SQL code. This leads to the impact of extracting sensitive information from the database.\n\n## Summary of Analysis\nThe analysis is strongly based on the evidence provided in the vulnerability description, which explicitly states the root cause as \"**insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query**\". This directly corresponds to CWE-89, which focuses on **improper neutralization of special elements** in SQL commands. The \"CVE Reference Links Content Summary\" confirms that the fix involved using `$wpdb->prepare` to sanitize the input, further supporting the SQL Injection classification.\n\nThe retriever results also strongly support CWE-89 as the primary weakness, with a score of 1.0.\n\nCWE-94 (\"Improper Control of Generation of Code ('Code Injection')\") was considered but not selected because the vulnerability is specifically related to SQL injection, rather than generic code injection. CWE-90 (\"Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')\") was also considered but discarded as the vulnerability relates to SQL, not LDAP.\n\nThe selected CWE (CWE-89) is at the optimal level of specificity (Base), as it directly addresses the root cause of the vulnerability.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-90:**\n- 90 (Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')) - ROOT\n\n\n**Chain starting from CWE-89:**\n- 89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: SQL injection",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse"
      },
      "similarity": 584.1570202593605
    },
    {
      "metadata": {
        "doc_id": "90",
        "name": "Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
        "source": "sparse"
      },
      "similarity": 555.9106651624188
    },
    {
      "metadata": {
        "doc_id": "790",
        "name": "Improper Filtering of Special Elements",
        "source": "sparse"
      },
      "similarity": 542.5304823946783
    },
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse"
      },
      "similarity": 538.4591355827893
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 530.2889838498417
    },
    {
      "metadata": {
        "doc_id": "502",
        "name": "Deserialization of Untrusted Data",
        "source": "sparse"
      },
      "similarity": 519.1895192628263
    },
    {
      "metadata": {
        "doc_id": "943",
        "name": "Improper Neutralization of Special Elements in Data Query Logic",
        "source": "sparse"
      },
      "similarity": 517.4650771197073
    },
    {
      "metadata": {
        "doc_id": "96",
        "name": "Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')",
        "type": "Base",
        "original_content": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.",
        "keyphrase_source": "rootcause:lack of sufficient preparation on the existing SQL query",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5014526022186925,
            "graph": 1.615968610352144
          }
        }
      },
      "similarity": 0.5014526022186925
    },
    {
      "doc_id": "94",
      "text": "CWE-94: Improper Control of Generation of Code ('Code Injection')",
      "score": 2.2776000000000005,
      "metadata": {
        "doc_id": "94",
        "name": "Improper Control of Generation of Code ('Code Injection')",
        "type": "base",
        "original_content": "CWE-94: Improper Control of Generation of Code ('Code Injection')",
        "relationships": [
          {
            "source_id": "94",
            "target_id": "98",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "94",
            "target_id": "96",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "94",
            "target_id": "95",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "94",
            "target_id": "1336",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "94",
            "target_id": "913",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "94",
            "target_id": "74",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "94",
            "target_id": "74",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "94",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "96",
            "target_id": "94",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "95",
            "target_id": "94",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "913",
            "target_id": "94",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "74",
            "target_id": "94",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1336",
            "target_id": "94",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 0.8,
          "abstraction_path": 0.5599999999999999,
          "sequence_path": 0.8
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_up",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "425",
                  "98",
                  "CANPRECEDE"
                ],
                [
                  "98",
                  "94",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "relationship_chain",
              "source": "425"
            },
            "abstraction_path_up": {
              "path": [
                [
                  "96",
                  "94",
                  "CHILDOF"
                ]
              ],
              "score": 0.5599999999999999,
              "type": "abstraction_path_up",
              "source": "96"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "425",
                  "98",
                  "CANPRECEDE"
                ],
                [
                  "98",
                  "94",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "vulnerability_sequence_forward",
              "source": "425"
            }
          }
        },
        "abstraction_level": "base",
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This entry is frequently misused for vulnerabilities with a technical impact of \"code execution,\" which does not by itself indicate a root cause weakness, since dozens of weaknesses can enable code execution.",
          "comments": "This weakness only applies when the product's functionality intentionally constructs all or part of a code segment. It could be that executing code could be the result of other weaknesses that do not involve the construction of code segments.",
          "reasons": [
            "Frequent Misuse",
            "Frequent Misinterpretation"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2776000000000005
          }
        }
      },
      "similarity": 2.2776000000000005
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-90",
      "CWE-89",
      "CWE-94",
      "CWE-74",
      "CWE-943"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}