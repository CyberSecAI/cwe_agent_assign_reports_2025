{
  "method": "sparse_combined",
  "query": "In the Linux kernel, the following vulnerability has been resolved drm/drm_file Fix pid refcounting race , Maxime Ripard , Thomas Zimmermann filp->pid is supposed to be a refcounted pointer however, before this patch, drm_file_update_pid() only increments the refcount of a struct pid after storing a pointer to it in filp->pid and dropping the dev->filelist_mutex, making the following race possible process A process B ========= ========= begin drm_file_update_pid mutex_lock(&dev->filelist_mutex) rcu_replace_pointer(filp->pid, , 1) mutex_unlock(&dev->filelist_mutex) begin drm_file_update_pid mutex_lock(&dev->filelist_mutex) rcu_replace_pointer(filp->pid, , 1) mutex_unlock(&dev->filelist_mutex) get_pid() synchronize_rcu() put_pid() *** pid B reaches refcount 0 and is freed here *** get_pid() *** UAF *** synchronize_rcu() put_pid() As far as I know, this race can only occur with CONFIG_PREEMPT_RCU=y because it requires RCU to detect a quiescent state in code that is not explicitly calling into the scheduler. This race leads to use-after-free of a struct pid. It is probably somewhat hard to hit because process A has to pass through a synchronize_rcu() oper",
  "keyphrases": {
    "rootcause": [
      "race condition in drm_file_update_pid()"
    ]
  },
  "timestamp": "2025-07-13T11:28:11.152122",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 805.896237959965
    },
    {
      "doc_id": "775",
      "name": "Missing Release of File Descriptor or Handle after Effective Lifetime",
      "score": 804.6518832855979
    },
    {
      "doc_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "score": 787.2314258304611
    },
    {
      "doc_id": "911",
      "name": "Improper Update of Reference Count",
      "score": 717.3148728971578
    },
    {
      "doc_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "score": 699.3538378794242
    }
  ]
}