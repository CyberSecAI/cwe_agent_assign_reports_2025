{
  "query": "In the Linux kernel, the following vulnerability has been resolved drm/drm_file Fix pid refcounting race , Maxime Ripard , Thomas Zimmermann filp->pid is supposed to be a refcounted pointer however, before this patch, drm_file_update_pid() only increments the refcount of a struct pid after storing a pointer to it in filp->pid and dropping the dev->filelist_mutex, making the following race possible process A process B ========= ========= begin drm_file_update_pid mutex_lock(&dev->filelist_mutex) rcu_replace_pointer(filp->pid, , 1) mutex_unlock(&dev->filelist_mutex) begin drm_file_update_pid mutex_lock(&dev->filelist_mutex) rcu_replace_pointer(filp->pid, , 1) mutex_unlock(&dev->filelist_mutex) get_pid() synchronize_rcu() put_pid() *** pid B reaches refcount 0 and is freed here *** get_pid() *** UAF *** synchronize_rcu() put_pid() As far as I know, this race can only occur with CONFIG_PREEMPT_RCU=y because it requires RCU to detect a quiescent state in code that is not explicitly calling into the scheduler. This race leads to use-after-free of a struct pid. It is probably somewhat hard to hit because process A has to pass through a synchronize_rcu() oper",
  "count": 10,
  "results": [
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "abstraction": "Class",
      "score": 805.896237959965,
      "original_score": 805.896237959965,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "775",
      "name": "Missing Release of File Descriptor or Handle after Effective Lifetime",
      "abstraction": "Variant",
      "score": 804.6518832855979,
      "original_score": 804.6518832855979,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "abstraction": "Base",
      "score": 787.2314258304611,
      "original_score": 787.2314258304611,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "911",
      "name": "Improper Update of Reference Count",
      "abstraction": "Base",
      "score": 717.3148728971578,
      "original_score": 717.3148728971578,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "abstraction": "Base",
      "score": 699.3538378794242,
      "original_score": 699.3538378794242,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "abstraction": "Class",
      "score": 692.8687132007535,
      "original_score": 692.8687132007535,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "364",
      "name": "Signal Handler Race Condition",
      "abstraction": "Base",
      "score": 690.377955156428,
      "original_score": 690.377955156428,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "415",
      "name": "Double Free",
      "abstraction": "Variant",
      "score": 689.2808930766834,
      "original_score": 689.2808930766834,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "909",
      "name": "Missing Initialization of Resource",
      "abstraction": "Class",
      "score": 657.785320807226,
      "original_score": 657.785320807226,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "93",
      "name": "Improper Neutralization of CRLF Sequences ('CRLF Injection')",
      "abstraction": "Base",
      "score": 653.4321602525024,
      "original_score": 653.4321602525024,
      "mapping_usage": "Allowed"
    }
  ],
  "statistics": {
    "min": 653.4321602525024,
    "max": 805.896237959965,
    "mean": 719.81933003462,
    "median": 696.1112755400889,
    "count": 10
  }
}