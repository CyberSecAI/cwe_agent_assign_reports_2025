{
  "cve_id": "CVE-2024-54660",
  "description": "A **JNDI injection** issue was discovered in Cloudera JDBC Connector for Hive before 2.6.26 and JDBC Connector for Impala before 2.6.35. Attackers can inject malicious parameters into the JDBC URL, triggering **JNDI injection** during the process when the JDBC Driver uses this URL to connect to the database. This could lead to remote code execution. **JNDI injection** is possible via the JDBC connection property krbJAASFile for the Java Authentication and Authorization Service (JAAS). Using untrusted parameters in the krbJAASFile and/or remote host can trigger **JNDI injection** in the JDBC URL through the krbJAASFile.",
  "key_phrases": {
    "component": "JDBC connection property krbJAASFile",
    "rootcause": "",
    "vector": "",
    "weakness": "JNDI injection",
    "product": "['Cloudera JDBC Connector for Hive', 'JDBC Connector for Impala']",
    "impact": "remote code execution, JNDI injection",
    "attacker": "Attackers",
    "version": "before 2.6.26, before 2.6.35"
  },
  "reference_content": "UNRELATED",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-502 | Deserialization of Untrusted Data | 0.9 | Base |  Primary | Allowed |\n| CWE-917 | Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection') | 0.7 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary relationship that influenced the decision was the identification of **JNDI injection** leading to remote code execution. The selection of CWE-502 as the primary weakness stems from its direct relevance to **deserialization of untrusted data**, a key mechanism exploited in **JNDI injection**. The secondary consideration of CWE-917 arises from the injection aspect, where special elements in an expression language statement are improperly neutralized.\n\n```mermaid\ngraph TD\n    cwe502[\"CWE-502: Deserialization of Untrusted Data\"]\n    cwe917[\"CWE-917: Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n\n    cwe917 -->|PEEROF| cwe74\n    cwe502 -->|CHILDOF| cwe913[\"CWE-913: Improper Control of Dynamically-Managed Code Resources\"]\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe502 primary\n    class cwe917 secondary\n    class cwe74 tertiary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **deserialization of untrusted data** (CWE-502) through **JNDI injection**. This leads to the execution of malicious code, resulting in remote code execution. The injection aspect can also be viewed as a secondary weakness, where special elements in an expression language statement are improperly neutralized (CWE-917).\n\n## Summary of Analysis\nThe analysis is based on the provided vulnerability description and the retriever results. The primary weakness is identified as CWE-502 (**Deserialization of Untrusted Data**), as the **JNDI injection** leverages the deserialization of untrusted data to achieve remote code execution. The description states that \"Attackers can inject malicious parameters into the JDBC URL, triggering **JNDI injection** during the process when the JDBC Driver uses this URL to connect to the database. This could lead to remote code execution.\"\n\nCWE-917 (**Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')**) is a secondary consideration, as the **injection** part of the vulnerability can be attributed to this CWE. \"Using untrusted parameters in the krbJAASFile and/or remote host can trigger **JNDI injection** in the JDBC URL through the krbJAASFile.\"\n\nThe retriever results and graph relationships influenced the final selection. CWE-502 has relationships to CWE-913 (**Improper Control of Dynamically-Managed Code Resources**), which is a child, and CWE-915 (**Improperly Controlled Modification of Dynamically-Determined Object Attributes**), which is a peer.\n\nThe selected CWEs are at the optimal level of specificity, representing the core weaknesses exploited in this vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-917: Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.78\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of an expression language (EL) statement in a framework such as a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-502: Deserialization of Untrusted Data\n**Abstraction Level**: base\n**Similarity Score**: 2.12\n**Source**: graph\n\n**Description**:\nCWE-502: Deserialization of Untrusted Data\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Relationships**:\n- PEEROF -> CWE-915\n- CHILDOF -> CWE-913\n- CHILDOF -> CWE-913\n- PEEROF -> CWE-502\n- PARENTOF -> CWE-502",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-502 | Deserialization of Untrusted Data | 0.9 | Base |  Primary | Allowed |\n| CWE-917 | Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection') | 0.7 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary relationship that influenced the decision was the identification of **JNDI injection** leading to remote code execution. The selection of CWE-502 as the primary weakness stems from its direct relevance to **deserialization of untrusted data**, a key mechanism exploited in **JNDI injection**. The secondary consideration of CWE-917 arises from the injection aspect, where special elements in an expression language statement are improperly neutralized.\n\n```mermaid\ngraph TD\n    cwe502[\"CWE-502: Deserialization of Untrusted Data\"]\n    cwe917[\"CWE-917: Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n\n    cwe917 -->|PEEROF| cwe74\n    cwe502 -->|CHILDOF| cwe913[\"CWE-913: Improper Control of Dynamically-Managed Code Resources\"]\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe502 primary\n    class cwe917 secondary\n    class cwe74 tertiary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **deserialization of untrusted data** (CWE-502) through **JNDI injection**. This leads to the execution of malicious code, resulting in remote code execution. The injection aspect can also be viewed as a secondary weakness, where special elements in an expression language statement are improperly neutralized (CWE-917).\n\n## Summary of Analysis\nThe analysis is based on the provided vulnerability description and the retriever results. The primary weakness is identified as CWE-502 (**Deserialization of Untrusted Data**), as the **JNDI injection** leverages the deserialization of untrusted data to achieve remote code execution. The description states that \"Attackers can inject malicious parameters into the JDBC URL, triggering **JNDI injection** during the process when the JDBC Driver uses this URL to connect to the database. This could lead to remote code execution.\"\n\nCWE-917 (**Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')**) is a secondary consideration, as the **injection** part of the vulnerability can be attributed to this CWE. \"Using untrusted parameters in the krbJAASFile and/or remote host can trigger **JNDI injection** in the JDBC URL through the krbJAASFile.\"\n\nThe retriever results and graph relationships influenced the final selection. CWE-502 has relationships to CWE-913 (**Improper Control of Dynamically-Managed Code Resources**), which is a child, and CWE-915 (**Improperly Controlled Modification of Dynamically-Determined Object Attributes**), which is a peer.\n\nThe selected CWEs are at the optimal level of specificity, representing the core weaknesses exploited in this vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-917: Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.78\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of an expression language (EL) statement in a framework such as a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-502: Deserialization of Untrusted Data\n**Abstraction Level**: base\n**Similarity Score**: 2.12\n**Source**: graph\n\n**Description**:\nCWE-502: Deserialization of Untrusted Data\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Relationships**:\n- PEEROF -> CWE-915\n- CHILDOF -> CWE-913\n- CHILDOF -> CWE-913\n- PEEROF -> CWE-502\n- PARENTOF -> CWE-502\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-502:**\n- 502 (Deserialization of Untrusted Data) - ROOT\n\n\n**Chain starting from CWE-917:**\n- 917 (Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "790",
        "name": "Improper Filtering of Special Elements",
        "source": "sparse"
      },
      "similarity": 670.4337908283692
    },
    {
      "metadata": {
        "doc_id": "917",
        "name": "Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')",
        "source": "sparse"
      },
      "similarity": 596.2372606442301
    },
    {
      "metadata": {
        "doc_id": "88",
        "name": "Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
        "source": "sparse"
      },
      "similarity": 552.197281623836
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse"
      },
      "similarity": 502.0716504024072
    },
    {
      "metadata": {
        "doc_id": "532",
        "name": "Insertion of Sensitive Information into Log File",
        "source": "sparse"
      },
      "similarity": 501.5729741126415
    },
    {
      "metadata": {
        "doc_id": "502",
        "name": "Deserialization of Untrusted Data",
        "source": "sparse"
      },
      "similarity": 490.5269353415764
    },
    {
      "metadata": {
        "doc_id": "74",
        "name": "Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')",
        "source": "sparse"
      },
      "similarity": 482.78812098660717
    },
    {
      "metadata": {
        "doc_id": "78",
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "source": "sparse"
      },
      "similarity": 479.9502379782936
    },
    {
      "metadata": {
        "doc_id": "564",
        "name": "SQL Injection: Hibernate",
        "type": "Variant",
        "original_content": "Using Hibernate to execute a dynamic SQL statement built with user-controlled input can allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.",
        "keyphrase_source": "weakness:JNDI injection",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5236190999028505,
            "graph": 1.363655886279199
          }
        }
      },
      "similarity": 0.5236190999028505
    },
    {
      "doc_id": "90",
      "text": "The product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component.",
      "score": 0.5335096751958059,
      "metadata": {
        "doc_id": "90",
        "name": "Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
        "type": "Base",
        "extended_description": null,
        "alternate_terms": [],
        "original_content": "The product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component.",
        "relationships": [
          {
            "source_id": "90",
            "target_id": "943",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "943",
            "target_id": "90",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "source": "graph",
        "sources": [
          "vector",
          "graph"
        ],
        "vector_score": 0.5335096751958059,
        "graph_score": 2.4699999999999998,
        "score_components": {
          "explicit_mention": 1.0,
          "relationship_chain": 0.3,
          "abstraction_path": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "943",
                  "90",
                  "PARENTOF"
                ]
              ],
              "score": 0.3,
              "type": "relationship_chain",
              "source": "943"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "943",
                  "90",
                  "PARENTOF"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "abstraction_path_down",
              "source": "943"
            }
          }
        },
        "is_explicit": true,
        "abstraction_level": "base",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5026661068466292,
            "graph": 1.695403870078322
          }
        }
      },
      "similarity": 1.695403870078322
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-502",
      "CWE-917",
      "CWE-915",
      "CWE-913",
      "CWE-74"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}