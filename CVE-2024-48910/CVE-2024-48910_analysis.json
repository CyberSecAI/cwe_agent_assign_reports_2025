{
  "cve_id": "CVE-2024-48910",
  "description": "DOMPurify is a DOM-only, super-fast, uber-tolerant **XSS** sanitizer for HTML, MathML and SVG. DOMPurify was vulnerable to **prototype pollution**. This vulnerability is fixed in 2.4.2.",
  "key_phrases": {
    "rootcause": "prototype pollution",
    "weakness": "XSS",
    "impact": "",
    "vector": "",
    "attacker": "",
    "product": "DOMPurify",
    "version": "2.4.2",
    "component": ""
  },
  "reference_content": "The provided content is related to CVE-2024-48910.\n\n**Root cause of vulnerability:**\nThe vulnerability is due to a prototype pollution issue in DOMPurify.\n\n**Weaknesses/vulnerabilities present:**\n- Prototype pollution: The vulnerability allows an attacker to modify the prototype of JavaScript objects, potentially leading to unexpected behavior or code execution.\n- The vulnerability is located in the `clone` function within `src/utils.js` where it iterates through the properties of an object and copies them. The code was vulnerable to prototype pollution via the hasOwnProperty check.\n\n**Impact of exploitation:**\n- The vulnerability could lead to a bypass of DOMPurify's sanitization, potentially leading to cross-site scripting (XSS) attacks if an attacker can control the input that is processed by the library.\n- In the specific test case added to address this vulnerability, arbitrary attributes could be injected into HTML tags even if they were not explicitly allowed.\n\n**Attack vectors:**\n- Network: The attack can be performed remotely.\n- The attacker needs to supply crafted input to the DOMPurify library, which will then modify the prototype chain.\n- The attacker can modify the prototype of the object that is being cloned, leading to unexpected behavior when DOMPurify uses this object to configure itself.\n\n**Required attacker capabilities/position:**\n- The attacker does not require any special privileges or user interaction.\n- The attacker needs to be able to control the input that is processed by the DOMPurify library.\n\n**Additional details:**\n- The vulnerability was fixed in version 2.4.2 by modifying the `clone` function within `src/utils.js` to explicitly check `hasOwnProperty` with call to avoid prototype pollution.\n- The commit `d1dd037` on Github includes the fix for this vulnerability, and adds a test case to ensure that the fix is effective. The test case demonstrates how an attacker can exploit the vulnerability via `__proto__` and `constructor.prototype` to inject arbitrary attributes in tags.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID   | CWE Name                                                                                                | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :------------------------------------------------------------------------------------------------------ | :--------- | :---------------------- | :------------------------------ | :------------------------------ |\n| CWE-1321 | Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution') | 1.0        | Variant                 | Primary                       | Allowed                       |\n| CWE-79  | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')             | 0.75       | Base                    | Secondary                     | Allowed                       |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-1321, which directly reflects the **prototype pollution** vulnerability. CWE-79 is a potential consequence (secondary) due to the bypass of sanitization leading to **XSS**. There isn't a direct parent-child relationship between CWE-1321 and CWE-79, but CWE-1321 can lead to other vulnerabilities such as CWE-79. Both CWE-1321 and CWE-79 are at preferred levels of abstraction (Variant and Base, respectively).\n\n```mermaid\ngraph TD\n    cwe1321[\"CWE-1321: Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    \n    cwe1321 -->|CAN_LEAD_TO| cwe79\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe1321 primary\n    class cwe79 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **improperly controlled modification of object prototype attributes (CWE-1321)**, which allows attackers to modify the prototype of JavaScript objects. This, in turn, can lead to a bypass of DOMPurify's sanitization mechanisms, potentially resulting in cross-site scripting (**XSS**, CWE-79) if the attacker can control the input processed by the library.\n\n## Summary of Analysis\nThe analysis is primarily based on the provided vulnerability description and CVE reference. The key evidence is the identification of **prototype pollution** as the root cause and the potential for resulting **XSS**.\n\nThe \"Vulnerability Description Key Phrases\" section explicitly identifies \"**prototype pollution**\" as the **rootcause** and \"**XSS**\" as a **weakness**.\n\nThe \"CVE Reference Links Content Summary\" section confirms the **prototype pollution** issue and its potential to bypass DOMPurify's sanitization, leading to **XSS** attacks. \"The vulnerability allows an attacker to modify the prototype of JavaScript objects, potentially leading to unexpected behavior or code execution...The vulnerability could lead to a bypass of DOMPurify's sanitization, potentially leading to cross-site scripting (XSS) attacks if an attacker can control the input that is processed by the library.\"\n\nCWE-1321 is selected as the primary CWE because it directly addresses the **root cause** of the vulnerability, i.e., the **improperly controlled modification of object prototype attributes**. CWE-79 is included as a secondary CWE because it represents a potential consequence of the vulnerability, i.e., the bypass of sanitization leading to cross-site scripting. Both CWEs are at appropriate levels of specificity (Variant and Base, respectively).\n\nCWE-843, CWE-1188, CWE-1333, CWE-116, CWE-138, CWE-184, CWE-80 and CWE-494 were considered, but not selected. They do not accurately represent the **root cause** of the vulnerability, which is **prototype pollution**. While some of these CWEs might be related to the impact or consequences of the vulnerability, they do not address the underlying weakness.",
  "analysis_with_relationships": "# Summary\n| CWE ID   | CWE Name                                                                                                | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :------------------------------------------------------------------------------------------------------ | :--------- | :---------------------- | :------------------------------ | :------------------------------ |\n| CWE-1321 | Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution') | 1.0        | Variant                 | Primary                       | Allowed                       |\n| CWE-79  | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')             | 0.75       | Base                    | Secondary                     | Allowed                       |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-1321, which directly reflects the **prototype pollution** vulnerability. CWE-79 is a potential consequence (secondary) due to the bypass of sanitization leading to **XSS**. There isn't a direct parent-child relationship between CWE-1321 and CWE-79, but CWE-1321 can lead to other vulnerabilities such as CWE-79. Both CWE-1321 and CWE-79 are at preferred levels of abstraction (Variant and Base, respectively).\n\n```mermaid\ngraph TD\n    cwe1321[\"CWE-1321: Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    \n    cwe1321 -->|CAN_LEAD_TO| cwe79\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe1321 primary\n    class cwe79 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **improperly controlled modification of object prototype attributes (CWE-1321)**, which allows attackers to modify the prototype of JavaScript objects. This, in turn, can lead to a bypass of DOMPurify's sanitization mechanisms, potentially resulting in cross-site scripting (**XSS**, CWE-79) if the attacker can control the input processed by the library.\n\n## Summary of Analysis\nThe analysis is primarily based on the provided vulnerability description and CVE reference. The key evidence is the identification of **prototype pollution** as the root cause and the potential for resulting **XSS**.\n\nThe \"Vulnerability Description Key Phrases\" section explicitly identifies \"**prototype pollution**\" as the **rootcause** and \"**XSS**\" as a **weakness**.\n\nThe \"CVE Reference Links Content Summary\" section confirms the **prototype pollution** issue and its potential to bypass DOMPurify's sanitization, leading to **XSS** attacks. \"The vulnerability allows an attacker to modify the prototype of JavaScript objects, potentially leading to unexpected behavior or code execution...The vulnerability could lead to a bypass of DOMPurify's sanitization, potentially leading to cross-site scripting (XSS) attacks if an attacker can control the input that is processed by the library.\"\n\nCWE-1321 is selected as the primary CWE because it directly addresses the **root cause** of the vulnerability, i.e., the **improperly controlled modification of object prototype attributes**. CWE-79 is included as a secondary CWE because it represents a potential consequence of the vulnerability, i.e., the bypass of sanitization leading to cross-site scripting. Both CWEs are at appropriate levels of specificity (Variant and Base, respectively).\n\nCWE-843, CWE-1188, CWE-1333, CWE-116, CWE-138, CWE-184, CWE-80 and CWE-494 were considered, but not selected. They do not accurately represent the **root cause** of the vulnerability, which is **prototype pollution**. While some of these CWEs might be related to the impact or consequences of the vulnerability, they do not address the underlying weakness.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-1321:**\n- 1321 (Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')) - ROOT\n\n\n**Chain starting from CWE-116:**\n- 116 (Improper Encoding or Escaping of Output) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: XSS",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "1321",
        "name": "Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')",
        "source": "sparse"
      },
      "similarity": 302.5644139864944
    },
    {
      "metadata": {
        "doc_id": "843",
        "name": "Access of Resource Using Incompatible Type ('Type Confusion')",
        "source": "sparse"
      },
      "similarity": 158.7237715508484
    },
    {
      "metadata": {
        "doc_id": "1188",
        "name": "Initialization of a Resource with an Insecure Default",
        "source": "sparse"
      },
      "similarity": 154.96192591989205
    },
    {
      "metadata": {
        "doc_id": "1333",
        "name": "Inefficient Regular Expression Complexity",
        "source": "sparse"
      },
      "similarity": 152.77934656959536
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse"
      },
      "similarity": 138.40555742096294
    },
    {
      "metadata": {
        "doc_id": "138",
        "name": "Improper Neutralization of Special Elements",
        "source": "sparse"
      },
      "similarity": 138.0913156269434
    },
    {
      "metadata": {
        "doc_id": "184",
        "name": "Incomplete List of Disallowed Inputs",
        "source": "sparse"
      },
      "similarity": 132.69603604230517
    },
    {
      "metadata": {
        "doc_id": "80",
        "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
        "type": "Variant",
        "original_content": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as \"<\", \">\", and \"&\" that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.",
        "keyphrase_source": "weakness:XSS",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.508559481352883,
            "sparse": 131.86196095728812
          }
        }
      },
      "similarity": 0.508559481352883
    },
    {
      "doc_id": "494",
      "text": "CWE-494: Download of Code Without Integrity Check",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "494",
        "name": "Download of Code Without Integrity Check",
        "type": "base",
        "original_content": "CWE-494: Download of Code Without Integrity Check",
        "relationships": [
          {
            "source_id": "494",
            "target_id": "79",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "494",
            "target_id": "669",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "494",
            "target_id": "669",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "494",
            "target_id": "345",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "494",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "669",
            "target_id": "494",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "345",
            "target_id": "494",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "79",
                  "494",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "79"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "79",
                  "494",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_forward",
              "source": "79"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-1321",
      "CWE-116",
      "CWE-80",
      "CWE-494",
      "CWE-79",
      "CWE-843",
      "CWE-138",
      "CWE-184",
      "CWE-1188",
      "CWE-1333"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}