{
  "query": "In the Linux kernel, the following vulnerability has been resolved fuse revert back to __readahead_folio() for readahead In commit 3eab9d7bc2f4 (fuse convert readahead to use folios), the logic was converted to using the new folio readahead code, which drops the reference on the folio once it is locked, using an inferred reference on the folio. Previously we held a reference on the folio for the entire duration of the readpages call. This is fine, however for the case for splice pipe responses where we will remove the old folio and splice in the new folio (see fuse_try_move_page()), we assume that there is a reference held on the folio for ap->folios, which is no longer the case. To fix this, revert back to __readahead_folio() which allows us to hold the reference on the folio for the duration of readpages until either we drop the reference ourselves in fuse_readpages_end() or the reference is dropped after its replaced in the page cache in the splice case. This will fix the UAF bug that was reported.",
  "count": 20,
  "results": [
    {
      "cwe_id": "911",
      "name": "Improper Update of Reference Count",
      "abstraction": "Base",
      "score": 0.4558779213665066,
      "original_score": 0.4558779213665066,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "124",
      "name": "Buffer Underwrite ('Buffer Underflow')",
      "abstraction": "Base",
      "score": 0.4557880591706218,
      "original_score": 0.4557880591706218,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "401",
      "name": "Missing Release of Memory after Effective Lifetime",
      "abstraction": "Variant",
      "score": 0.4446324368531291,
      "original_score": 0.4446324368531291,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "763",
      "name": "Release of Invalid Pointer or Reference",
      "abstraction": "Base",
      "score": 0.44454977364231246,
      "original_score": 0.44454977364231246,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "909",
      "name": "Missing Initialization of Resource",
      "abstraction": "Class",
      "score": 0.4399970501191667,
      "original_score": 0.4399970501191667,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "126",
      "name": "Buffer Over-read",
      "abstraction": "Variant",
      "score": 0.43961908000475497,
      "original_score": 0.43961908000475497,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1260",
      "name": "Improper Handling of Overlap Between Protected Memory Ranges",
      "abstraction": "Base",
      "score": 0.4282268444069655,
      "original_score": 0.4282268444069655,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "abstraction": "Class",
      "score": 0.42656270868376756,
      "original_score": 0.42656270868376756,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "1253",
      "name": "Incorrect Selection of Fuse Values",
      "abstraction": "Base",
      "score": 0.42518447161377687,
      "original_score": 0.42518447161377687,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1285",
      "name": "Improper Validation of Specified Index, Position, or Offset in Input",
      "abstraction": "Base",
      "score": 0.4242009723486756,
      "original_score": 0.4242009723486756,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1243",
      "name": "Sensitive Non-Volatile Information Not Protected During Debug",
      "abstraction": "Base",
      "score": 0.41249795464167377,
      "original_score": 0.41249795464167377,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1312",
      "name": "Missing Protection for Mirrored Regions in On-Chip Fabric Firewall",
      "abstraction": "Base",
      "score": 0.3973660721261906,
      "original_score": 0.3973660721261906,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "416",
      "name": "Use After Free",
      "abstraction": "Variant",
      "score": 0.3955406991766192,
      "original_score": 0.3955406991766192,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "abstraction": "Base",
      "score": 0.39405705706783906,
      "original_score": 0.39405705706783906,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "abstraction": "Base",
      "score": 0.3935335803163179,
      "original_score": 0.3935335803163179,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "786",
      "name": "Access of Memory Location Before Start of Buffer",
      "abstraction": "Base",
      "score": 0.39204521158401595,
      "original_score": 0.39204521158401595,
      "mapping_usage": "Discouraged"
    },
    {
      "cwe_id": "805",
      "name": "Buffer Access with Incorrect Length Value",
      "abstraction": "Base",
      "score": 0.3915529576649554,
      "original_score": 0.3915529576649554,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "abstraction": "Base",
      "score": 0.3913437229033008,
      "original_score": 0.3913437229033008,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "125",
      "name": "Out-of-bounds Read",
      "abstraction": "Base",
      "score": 0.3910595320039828,
      "original_score": 0.3910595320039828,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "abstraction": "Class",
      "score": 0.3909716744336693,
      "original_score": 0.3909716744336693,
      "mapping_usage": "Allowed-with-Review"
    }
  ],
  "statistics": {
    "min": 0.3909716744336693,
    "max": 0.4558779213665066,
    "mean": 0.41673038900641207,
    "median": 0.41834946349517466,
    "count": 20
  }
}