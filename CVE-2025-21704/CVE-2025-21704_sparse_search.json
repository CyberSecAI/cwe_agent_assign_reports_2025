{
  "retriever": "sparse",
  "query": "In the Linux kernel, the following vulnerability has been resolved usb cdc-acm Check control transfer buffer size before access If the first fragment is shorter than struct usb_cdc_notification, we cant calculate an expected_size. Log an error and discard the notification instead of reading lengths from memory outside the received data, which can lead to memory corruption when the expected_size decreases between fragments, causing `expected_size - acm->nb_index` to wrap. This issue has been present since the beginning of git history however, it only leads to memory corruption since commit ea2583529cd1 (cdc-acm reassemble fragmented notifications). A mitigating factor is that acm_ctrl_irq() can only execute after userspace has opened /dev/ttyACM* but if ModemManager is running, ModemManager will do that automatically depending on the USB devices vendor/product IDs and its other interfaces.",
  "keyphrases": {
    "weakness": [
      "memory corruption"
    ]
  },
  "timestamp": "2025-07-12 09:53:26",
  "cve_id": "CVE-2025-21704",
  "result_count": 10,
  "results": [
    {
      "cwe_id": "787",
      "name": "Out-of-bounds Write",
      "score": 1000.0,
      "search_source": "alternate_term_match"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 555.6063373332851,
      "search_source": "weakness:memory corruption"
    },
    {
      "cwe_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "score": 543.513806901623,
      "search_source": "weakness:memory corruption"
    },
    {
      "cwe_id": "190",
      "name": "Integer Overflow or Wraparound",
      "score": 540.492814043372,
      "search_source": "weakness:memory corruption"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 529.5633688545742,
      "search_source": "weakness:memory corruption"
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "score": 527.7081711898949,
      "search_source": "weakness:memory corruption"
    },
    {
      "cwe_id": "125",
      "name": "Out-of-bounds Read",
      "score": 519.1170844311184,
      "search_source": "weakness:memory corruption"
    },
    {
      "cwe_id": "823",
      "name": "Use of Out-of-range Pointer Offset",
      "score": 515.8940704056525,
      "search_source": "weakness:memory corruption"
    },
    {
      "cwe_id": "909",
      "name": "Missing Initialization of Resource",
      "score": 513.1002974353501,
      "search_source": "weakness:memory corruption"
    },
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "score": 510.3551773203631,
      "search_source": "weakness:memory corruption"
    }
  ]
}