{
  "cve_id": "CVE-2024-39701",
  "description": "Directus is a real-time API and App dashboard for managing SQL database content. Directus >=9.23.0, <=v10.5.3 **improperly handles _in, _nin operators**. It evaluates empty arrays as valid so expressions like {role {_in $CURRENT_USER.some_field}} would evaluate to true allowing the request to pass. This results in Broken Access Control because the rule fails to do what it was intended to do Pass rule if **field** matches any of the **values**. This vulnerability is fixed in 10.6.0.",
  "key_phrases": {
    "rootcause": "improperly handles _in, _nin operators",
    "weakness": "",
    "impact": "Broken Access Control",
    "vector": "",
    "attacker": "",
    "product": "Directus",
    "version": ">=9.23.0, <=v10.5.3",
    "component": ""
  },
  "reference_content": "Based on the provided content, here's a breakdown of the vulnerability:\n\n**Root Cause:**\n\n*   The vulnerability stems from the incorrect handling of the `_in` and `_nin` filter operators in Directus versions between 9.23.0 and 10.5.3. Specifically, these operators incorrectly evaluate empty arrays as valid matches.\n\n**Weaknesses/Vulnerabilities Present:**\n\n*   **Broken Access Control:** The core issue is a failure in access control. The system allows access based on faulty logic in filter rules. Empty arrays passed to `_in` operator cause the filter to incorrectly pass, granting unintended access.\n*   **Improper Input Validation:** Directus fails to properly validate filter rules leading to unintended behavior.\n\n**Impact of Exploitation:**\n\n*   **Unauthorized Access:** Exploiting this vulnerability can allow users to gain access to resources or functionalities that they are not supposed to. This can lead to users being able to perform actions or view data they are not authorized to.\n*  **Privilege Escalation:**  In a real world scenario, users could potentially elevate their privileges and gain access to administrative functions/data through the access control bypass.\n*   **Data Exposure:** Attackers might gain unauthorized access to sensitive information due to the broken access controls.\n\n**Attack Vectors:**\n\n*   **Network:** The vulnerability is exploitable over the network.\n*   **Filter Manipulation:** Attackers can exploit the vulnerability by manipulating filter rules, specifically by using the `_in` or `_nin` operator with empty arrays. This could be done through requests made to the Directus API.\n\n**Required Attacker Capabilities/Position:**\n\n*   **Low Privilege Access:** The attacker needs some access to the system, but doesn't need administrative privileges.\n*   **Knowledge of Directus:** The attacker needs some understanding of how Directus filter rules and operators function.\n\n**Additional Notes:**\n\n* The provided content includes a specific PoC demonstrating the vulnerability using a role-chooser extension, showing how a user with no role can set their role due to the validation rule failing with null values.\n* The CVSS score of 6.3 is given as \"Moderate\".\n* The advisory also includes CVSS v3 base metrics (AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N) which can help in assessing its impact.\n*   The vulnerability was fixed in version 10.6.0 and later of Directus.\n* The report also mentions that the vulnerability is tracked under CVE-2024-39701",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-863 | Incorrect Authorization | 0.9 | Class | Allowed-with-Review | The product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. |\n| CWE-697 | Incorrect Comparison | 0.7 | Pillar | Discouraged | The logic of the comparison is incorrect, such as using the wrong operator (>, <, >=, <=, !=, ==) or neglecting to account for the direction of the comparison. |\n| CWE-943 | Improper Neutralization of Special Elements in Data Query Logic ('So-called Injection') | 0.6 | Class | Allowed-with-Review | The product constructs all or part of a data query command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended query when it is executed by a downstream component. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-863, which is a Class-level weakness describing incorrect authorization. The vulnerability description clearly states that the Directus version incorrectly handles `_in` and `_nin` operators, leading to broken access control. This incorrect handling can be seen as an **incorrect authorization** check.\n\nCWE-697 (Incorrect Comparison) is a Pillar that could be a contributing factor because the `_in` and `_nin` operators perform comparisons, and their **improper handling** leads to incorrect results.\n\nCWE-943 (Improper Neutralization of Special Elements in Data Query Logic) is also a possible contributing factor because the `_in` and `_nin` operators can be considered part of the data query logic, and the system **improperly handles** them.\n\n```mermaid\ngraph TD\n    cwe863[\"CWE-863: Incorrect Authorization\"]\n    cwe697[\"CWE-697: Incorrect Comparison\"]\n    cwe943[\"CWE-943: Improper Neutralization of Special Elements in Data Query Logic\"]\n\n    cwe697 -->|PEEROF| cwe863\n    cwe943 -->|PEEROF| cwe863\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe863 primary\n    class cwe697,cwe943 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **improper handling** of `_in` and `_nin` operators in Directus. This leads to **incorrect authorization** checks, which then results in broken access control, allowing unauthorized users to access resources.\n\n## Summary of Analysis\nThe initial analysis pointed towards authorization issues due to the broken access control. The key phrase \"**improperly handles _in, _nin operators**\" indicates a flaw in the authorization logic. The \"CVE Reference Links Content Summary\" section confirms that the vulnerability results in broken access control due to the **incorrect handling** of operators.\n\nCWE-863 (Incorrect Authorization) is selected as the primary CWE because it accurately describes the core issue: Directus performs authorization checks, but does so incorrectly. The other CWEs, while relevant, are not as direct. CWE-697 (Incorrect Comparison) is a contributing factor because of the flawed logic in the comparison operators. CWE-943 (Improper Neutralization of Special Elements in Data Query Logic) is also a potential secondary CWE because the operators are part of the data query logic.\n\nThe final decision is based on the evidence from the vulnerability description and the mapping guidance provided. CWE-863 is the most specific and appropriate CWE for this vulnerability.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-863 | Incorrect Authorization | 0.9 | Class | Allowed-with-Review | The product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. |\n| CWE-697 | Incorrect Comparison | 0.7 | Pillar | Discouraged | The logic of the comparison is incorrect, such as using the wrong operator (>, <, >=, <=, !=, ==) or neglecting to account for the direction of the comparison. |\n| CWE-943 | Improper Neutralization of Special Elements in Data Query Logic ('So-called Injection') | 0.6 | Class | Allowed-with-Review | The product constructs all or part of a data query command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended query when it is executed by a downstream component. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-863, which is a Class-level weakness describing incorrect authorization. The vulnerability description clearly states that the Directus version incorrectly handles `_in` and `_nin` operators, leading to broken access control. This incorrect handling can be seen as an **incorrect authorization** check.\n\nCWE-697 (Incorrect Comparison) is a Pillar that could be a contributing factor because the `_in` and `_nin` operators perform comparisons, and their **improper handling** leads to incorrect results.\n\nCWE-943 (Improper Neutralization of Special Elements in Data Query Logic) is also a possible contributing factor because the `_in` and `_nin` operators can be considered part of the data query logic, and the system **improperly handles** them.\n\n```mermaid\ngraph TD\n    cwe863[\"CWE-863: Incorrect Authorization\"]\n    cwe697[\"CWE-697: Incorrect Comparison\"]\n    cwe943[\"CWE-943: Improper Neutralization of Special Elements in Data Query Logic\"]\n\n    cwe697 -->|PEEROF| cwe863\n    cwe943 -->|PEEROF| cwe863\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe863 primary\n    class cwe697,cwe943 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **improper handling** of `_in` and `_nin` operators in Directus. This leads to **incorrect authorization** checks, which then results in broken access control, allowing unauthorized users to access resources.\n\n## Summary of Analysis\nThe initial analysis pointed towards authorization issues due to the broken access control. The key phrase \"**improperly handles _in, _nin operators**\" indicates a flaw in the authorization logic. The \"CVE Reference Links Content Summary\" section confirms that the vulnerability results in broken access control due to the **incorrect handling** of operators.\n\nCWE-863 (Incorrect Authorization) is selected as the primary CWE because it accurately describes the core issue: Directus performs authorization checks, but does so incorrectly. The other CWEs, while relevant, are not as direct. CWE-697 (Incorrect Comparison) is a contributing factor because of the flawed logic in the comparison operators. CWE-943 (Improper Neutralization of Special Elements in Data Query Logic) is also a potential secondary CWE because the operators are part of the data query logic.\n\nThe final decision is based on the evidence from the vulnerability description and the mapping guidance provided. CWE-863 is the most specific and appropriate CWE for this vulnerability.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-863:**\n- 863 (Incorrect Authorization) - ROOT\n\n\n**Chain starting from CWE-943:**\n- 943 (Improper Neutralization of Special Elements in Data Query Logic) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "1390",
        "name": "Weak Authentication",
        "source": "sparse"
      },
      "similarity": 414.0610308969375
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 400.8783445868115
    },
    {
      "metadata": {
        "doc_id": "287",
        "name": "Improper Authentication",
        "source": "sparse"
      },
      "similarity": 375.04260532358234
    },
    {
      "metadata": {
        "doc_id": "95",
        "name": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
        "source": "sparse"
      },
      "similarity": 369.1174643926458
    },
    {
      "metadata": {
        "doc_id": "1333",
        "name": "Inefficient Regular Expression Complexity",
        "source": "sparse"
      },
      "similarity": 363.6789561438945
    },
    {
      "metadata": {
        "doc_id": "306",
        "name": "Missing Authentication for Critical Function",
        "source": "sparse"
      },
      "similarity": 360.4002667117553
    },
    {
      "metadata": {
        "doc_id": "697",
        "name": "Incorrect Comparison",
        "source": "sparse"
      },
      "similarity": 358.945890175949
    },
    {
      "metadata": {
        "doc_id": "94",
        "name": "Improper Control of Generation of Code ('Code Injection')",
        "source": "sparse"
      },
      "similarity": 356.97192024343536
    },
    {
      "metadata": {
        "doc_id": "943",
        "name": "Improper Neutralization of Special Elements in Data Query Logic",
        "type": "Class",
        "original_content": "The product generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query.",
        "keyphrase_source": "rootcause:improperly handles _in",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
          "comments": "Examine children of this entry to see if there is a better fit",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.4809555567534933
          }
        }
      },
      "similarity": 0.4809555567534933
    },
    {
      "doc_id": "613",
      "text": "CWE-613: Insufficient Session Expiration",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "613",
        "name": "Insufficient Session Expiration",
        "type": "base",
        "original_content": "CWE-613: Insufficient Session Expiration",
        "relationships": [
          {
            "source_id": "613",
            "target_id": "352",
            "label": "REQUIREDBY",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "613",
            "target_id": "287",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "613",
            "target_id": "672",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "613",
            "target_id": "672",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "672",
            "target_id": "613",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "352",
            "target_id": "613",
            "label": "REQUIRES",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "287",
            "target_id": "613",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "287",
                  "613",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "287"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "287",
                  "613",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "287"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "613",
                  "287",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "287"
            }
          }
        },
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-863",
      "CWE-943",
      "CWE-697"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}