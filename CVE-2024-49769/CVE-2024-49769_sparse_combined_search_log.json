{
  "method": "sparse_combined",
  "query": "Waitress is a Web Server Gateway Interface server for Python 2 and 3. When a remote client closes the connection before waitress has had the opportunity to call getpeername() waitress wont correctly clean up the connection leading to the main thread attempting to write to a socket that no longer exists, but not removing it from the list of sockets to attempt to process. This leads to a busy-loop calling the write function. A remote attacker could run waitress out of available sockets with very little resources required. Waitress 3.0.1 contains fixes that remove the race condition.",
  "keyphrases": {
    "rootcause": [
      "race condition"
    ]
  },
  "timestamp": "2025-07-13T19:34:53.466688",
  "results_count": 11,
  "results_summary": [
    {
      "doc_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 1000.0
    },
    {
      "doc_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "score": 516.0836506613332
    },
    {
      "doc_id": "476",
      "name": "NULL Pointer Dereference",
      "score": 510.08557246353917
    },
    {
      "doc_id": "667",
      "name": "Improper Locking",
      "score": 500.343022996188
    },
    {
      "doc_id": "833",
      "name": "Deadlock",
      "score": 493.0152226405613
    }
  ]
}