{
  "cve_id": "CVE-2025-37847",
  "description": "In the Linux kernel, the following vulnerability has been resolved accel/ivpu Fix **deadlock** in ivpu_ms_cleanup() Fix **deadlock** in ivpu_ms_cleanup() by preventing runtime resume after file_priv->ms_lock is acquired. During a failure in runtime resume, a cold boot is executed, which calls ivpu_ms_cleanup_all(). This function calls ivpu_ms_cleanup() that acquires file_priv->ms_lock and causes the **deadlock**.",
  "key_phrases": {
    "rootcause": "deadlock",
    "weakness": "",
    "impact": "",
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": "accel/ivpu"
  },
  "reference_content": null,
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-833 | Deadlock | 1.0 | Base | Primary | Allowed |\n| CWE-667 | Improper Locking | 0.7 | Class | Secondary | Allowed-with-Review |\n| CWE-413 | Improper Resource Locking | 0.6 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is **CWE-833 Deadlock**, which occurs due to improper locking. **CWE-667 Improper Locking** is a class-level CWE that describes the general problem of not properly acquiring or releasing a lock. **CWE-413 Improper Resource Locking** is another base-level candidate, more specific than CWE-667.\n\n```mermaid\ngraph TD\n    cwe833[\"CWE-833: Deadlock\"]\n    cwe667[\"CWE-667: Improper Locking\"]\n    cwe413[\"CWE-413: Improper Resource Locking\"]\n\n    cwe833 -->|ROOTCAUSE| cwe667\n    cwe413 -->|CHILDOF| cwe667\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe833 primary\n    class cwe667,cwe413 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain is as follows:\n1.  **Improper Locking** (CWE-667 or CWE-413): The root cause is that a lock is not properly acquired or released.\n2.  **Deadlock** (CWE-833): Because of the improper locking, multiple threads wait for each other, leading to a **deadlock**.\n\nThe primary CWE is CWE-833 because it describes the specific problem.\n\n## Summary of Analysis\nThe vulnerability description clearly indicates a **deadlock** condition in the Linux kernel due to improper locking in the `ivpu_ms_cleanup()` function. The function acquires `file_priv->ms_lock` and causes a **deadlock** during a failure in runtime resume when a cold boot is executed, which calls `ivpu_ms_cleanup_all()`.\n\nThe primary CWE is **CWE-833 Deadlock** because the description explicitly mentions a **deadlock**. This aligns with the definition of **CWE-833 Deadlock**: \"The product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in **deadlock**.\"\n\n**CWE-667 Improper Locking** is a related CWE, as the **deadlock** is a consequence of improper locking. The description says, \"Fix **deadlock** in ivpu_ms_cleanup() by preventing runtime resume after file_priv->ms_lock is acquired. During a failure in runtime resume, a cold boot is executed, which calls ivpu_ms_cleanup_all(). This function calls ivpu_ms_cleanup() that acquires file_priv->ms_lock and causes the **deadlock**.\"\n\nI am selecting CWE-833 as the primary CWE because the vulnerability description explicitly states that a **deadlock** occurs. The evidence provided supports this selection with high confidence. I am adding CWE-667 as a secondary CWE, as it is the class of weakness that leads to a deadlock. I am adding CWE-413 as a secondary CWE because it is more specific than CWE-667 and also leads to the deadlock.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-833: Deadlock\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-413: Improper Resource Locking\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product does not lock or does not correctly lock a resource when the product must have exclusive access to the resource.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-252: Unchecked Return Value\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-703: Improper Check or Handling of Exceptional Conditions\n**Abstraction Level**: Pillar\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is extremely high-level, a Pillar.\n\n## CWE-754: Improper Check for Unusual or Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-665: Improper Initialization\n**Abstraction Level**: Class\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n## CWE-824: Access of Uninitialized Pointer\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product accesses or uses a pointer that has not been initialized.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-755: Improper Handling of Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product does not handle or incorrectly handles an exceptional condition.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 441.10\n**Source**: sparse\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-833: Deadlock\n**Abstraction Level**: Base\n**Similarity Score**: 369.27\n**Source**: sparse\n\n**Description**:",
  "analysis_with_relationships": "# Summary\n\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-833 | Deadlock | 1.0 | Base | Primary | Allowed |\n| CWE-667 | Improper Locking | 0.7 | Class | Secondary | Allowed-with-Review |\n| CWE-413 | Improper Resource Locking | 0.6 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is **CWE-833 Deadlock**, which occurs due to improper locking. **CWE-667 Improper Locking** is a class-level CWE that describes the general problem of not properly acquiring or releasing a lock. **CWE-413 Improper Resource Locking** is another base-level candidate, more specific than CWE-667.\n\n```mermaid\ngraph TD\n    cwe833[\"CWE-833: Deadlock\"]\n    cwe667[\"CWE-667: Improper Locking\"]\n    cwe413[\"CWE-413: Improper Resource Locking\"]\n\n    cwe833 -->|ROOTCAUSE| cwe667\n    cwe413 -->|CHILDOF| cwe667\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe833 primary\n    class cwe667,cwe413 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain is as follows:\n1.  **Improper Locking** (CWE-667 or CWE-413): The root cause is that a lock is not properly acquired or released.\n2.  **Deadlock** (CWE-833): Because of the improper locking, multiple threads wait for each other, leading to a **deadlock**.\n\nThe primary CWE is CWE-833 because it describes the specific problem.\n\n## Summary of Analysis\nThe vulnerability description clearly indicates a **deadlock** condition in the Linux kernel due to improper locking in the `ivpu_ms_cleanup()` function. The function acquires `file_priv->ms_lock` and causes a **deadlock** during a failure in runtime resume when a cold boot is executed, which calls `ivpu_ms_cleanup_all()`.\n\nThe primary CWE is **CWE-833 Deadlock** because the description explicitly mentions a **deadlock**. This aligns with the definition of **CWE-833 Deadlock**: \"The product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in **deadlock**.\"\n\n**CWE-667 Improper Locking** is a related CWE, as the **deadlock** is a consequence of improper locking. The description says, \"Fix **deadlock** in ivpu_ms_cleanup() by preventing runtime resume after file_priv->ms_lock is acquired. During a failure in runtime resume, a cold boot is executed, which calls ivpu_ms_cleanup_all(). This function calls ivpu_ms_cleanup() that acquires file_priv->ms_lock and causes the **deadlock**.\"\n\nI am selecting CWE-833 as the primary CWE because the vulnerability description explicitly states that a **deadlock** occurs. The evidence provided supports this selection with high confidence. I am adding CWE-667 as a secondary CWE, as it is the class of weakness that leads to a deadlock. I am adding CWE-413 as a secondary CWE because it is more specific than CWE-667 and also leads to the deadlock.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-833: Deadlock\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-413: Improper Resource Locking\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product does not lock or does not correctly lock a resource when the product must have exclusive access to the resource.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-252: Unchecked Return Value\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-703: Improper Check or Handling of Exceptional Conditions\n**Abstraction Level**: Pillar\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is extremely high-level, a Pillar.\n\n## CWE-754: Improper Check for Unusual or Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-665: Improper Initialization\n**Abstraction Level**: Class\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n## CWE-824: Access of Uninitialized Pointer\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product accesses or uses a pointer that has not been initialized.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-755: Improper Handling of Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product does not handle or incorrectly handles an exceptional condition.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 441.10\n**Source**: sparse\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-833: Deadlock\n**Abstraction Level**: Base\n**Similarity Score**: 369.27\n**Source**: sparse\n\n**Description**:\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-665:**\n- 665 (Improper Initialization) - ROOT\n\n\n**Chain starting from CWE-667:**\n- 667 (Improper Locking) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "667",
        "name": "Improper Locking",
        "source": "sparse"
      },
      "similarity": 358.0128055421728
    },
    {
      "metadata": {
        "doc_id": "833",
        "name": "Deadlock",
        "source": "sparse"
      },
      "similarity": 345.33931159276614
    },
    {
      "metadata": {
        "doc_id": "663",
        "name": "Use of a Non-reentrant Function in a Concurrent Context",
        "source": "sparse"
      },
      "similarity": 271.21462644110744
    },
    {
      "metadata": {
        "doc_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "source": "sparse"
      },
      "similarity": 235.52511122140737
    },
    {
      "metadata": {
        "doc_id": "61",
        "name": "UNIX Symbolic Link (Symlink) Following",
        "source": "sparse"
      },
      "similarity": 235.06631843615395
    },
    {
      "metadata": {
        "doc_id": "835",
        "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
        "source": "sparse"
      },
      "similarity": 234.42131370963997
    },
    {
      "metadata": {
        "doc_id": "203",
        "name": "Observable Discrepancy",
        "source": "sparse"
      },
      "similarity": 233.71651020955625
    },
    {
      "metadata": {
        "doc_id": "401",
        "name": "Missing Release of Memory after Effective Lifetime",
        "source": "sparse"
      },
      "similarity": 231.45126972251768
    },
    {
      "metadata": {
        "doc_id": "413",
        "name": "Improper Resource Locking",
        "type": "Base",
        "original_content": "The product does not lock or does not correctly lock a resource when the product must have exclusive access to the resource.",
        "keyphrase_source": "rootcause:deadlock",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.4862322575403348,
            "graph": 1.7068381500895264
          }
        }
      },
      "similarity": 0.4862322575403348
    },
    {
      "doc_id": "1265",
      "text": "CWE-1265: Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls",
      "score": 2.3868000000000005,
      "metadata": {
        "doc_id": "1265",
        "name": "Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls",
        "type": "base",
        "original_content": "CWE-1265: Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls",
        "relationships": [
          {
            "source_id": "1265",
            "target_id": "416",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1265",
            "target_id": "663",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1265",
            "target_id": "691",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "691",
            "target_id": "1265",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "416",
            "target_id": "1265",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 0.8,
          "sequence_path": 0.7200000000000001,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "362",
                  "416",
                  "CANPRECEDE"
                ],
                [
                  "416",
                  "1265",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.8,
              "type": "relationship_chain",
              "source": "362"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "362",
                  "416",
                  "CANPRECEDE"
                ],
                [
                  "416",
                  "1265",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "vulnerability_sequence_forward",
              "source": "362"
            },
            "peer_relationship": {
              "path": [
                [
                  "1265",
                  "663",
                  "PEEROF"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "663"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.3868000000000005
          }
        }
      },
      "similarity": 2.3868000000000005
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-665",
      "CWE-667",
      "CWE-833",
      "CWE-413",
      "CWE-362",
      "CWE-755",
      "CWE-824",
      "CWE-252",
      "CWE-703",
      "CWE-754"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}