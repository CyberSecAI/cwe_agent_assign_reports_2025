{
  "query": "In the Linux kernel, the following vulnerability has been resolved block Prevent potential deadlocks in zone write plug error recovery Zone write plugging for handling writes to zones of a zoned block device always execute a zone report whenever a write BIO to a zone fails. The intent of this is to ensure that the tracking of a zone write pointer is always correct to ensure that the alignment to a zone write pointer of write BIOs can be checked on submission and that we can always correctly emulate zone append operations using regular write BIOs. However, this error recovery scheme introduces a potential deadlock if a device queue freeze is initiated while BIOs are still plugged in a zone write plug and one of these write operation fails. In such case, the disk zone write plug error recovery work is scheduled and executes a report zone. This in turn can result in a request allocation in the underlying driver to issue the report zones command to the device. But with the device queue freeze already started, this allocation will block, preventing the report zone execution and the continuation of the processing of the plugged BIOs. As plugged BIOs hold a queue usage reference, the queue freeze itself will never complete, resulting in a deadlock. Avoid this problem by completely removing from the zone write plugging code the use of report zones operations after a failed write operation, instead relying on the device user to either execute a report zones, reset the zone, finish the zone, or give up writing to the device (which is a fairly common pattern for file systems which degrade to read-only after write failures). This is not an unreasonnable requirement as all well-behaved applications, FSes and device mapper already use report zones to recover from write errors whenever possible by comparing the current position of a zone write pointer with what their assumption about the position is. The changes to remove the automatic error recovery are as follows - Completely remove the error recovery work and its associated resources (zone write plug list head, disk error list, and disk zone_wplugs_work work struct). This also removes the functions disk_zone_wplug_set_error() and disk_zone_wplug_clear_error(). - Change the BLK_ZONE_WPLUG_ERROR zone write plug flag into BLK_ZONE_WPLUG_NEED_WP_UPDATE. This new flag is set for a zone write plug whenever a write opration targetting the zone of the zone write plug fails. This flag indicates that the zone write pointer offset is not reliable and that it must be updated when the next report zone, reset zone, finish zone or disk revalidation is executed. - Modify blk_zone_write_plug_bio_endio() to set the BLK_ZONE_WPLUG_NEED_WP_UPDATE flag for the target zone of a failed write BIO. - Modify the function disk_zone_wplug_set_wp_offset() to clear this new flag, thus implementing recovery of a correct write pointer offset with the reset (all) zone and finish zone operations. - Modify blkdev_report_zones() to always use the disk_report_zones_cb() callback so that disk_zone_wplug_sync_wp_offset() can be called for any zone marked with the BLK_ZONE_WPLUG_NEED_WP_UPDATE flag. This implements recovery of a correct write pointer offset for zone write plugs marked with BLK_ZONE_WPLUG_NEED_WP_UPDATE and within the range of the report zones operation executed by the user. - Modify blk_revalidate_seq_zone() to call disk_zone_wplug_sync_wp_offset() for all sequential write required zones when a zoned block device is revalidated, thus always resolving any inconsistency between the write pointer offset of zone write plugs and the actual write pointer position of sequential zones.",
  "count": 20,
  "results": [
    {
      "cwe_id": "833",
      "name": "Deadlock",
      "abstraction": "Base",
      "score": 0.4964051394722726,
      "original_score": 0.4964051394722726,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "abstraction": "Class",
      "score": 0.4621386192264302,
      "original_score": 0.4621386192264302,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "1285",
      "name": "Improper Validation of Specified Index, Position, or Offset in Input",
      "abstraction": "Base",
      "score": 0.4543868356792511,
      "original_score": 0.4543868356792511,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "909",
      "name": "Missing Initialization of Resource",
      "abstraction": "Class",
      "score": 0.44292742734728296,
      "original_score": 0.44292742734728296,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "abstraction": "Class",
      "score": 0.43907568801021335,
      "original_score": 0.43907568801021335,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "1233",
      "name": "Security-Sensitive Hardware Controls with Missing Lock Bit Protection",
      "abstraction": "Base",
      "score": 0.4346764410459689,
      "original_score": 0.4346764410459689,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "413",
      "name": "Improper Resource Locking",
      "abstraction": "Base",
      "score": 0.43262676082214047,
      "original_score": 0.43262676082214047,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1246",
      "name": "Improper Write Handling in Limited-write Non-Volatile Memories",
      "abstraction": "Base",
      "score": 0.43152314437029726,
      "original_score": 0.43152314437029726,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1231",
      "name": "Improper Prevention of Lock Bit Modification",
      "abstraction": "Base",
      "score": 0.42986716302738104,
      "original_score": 0.42986716302738104,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "abstraction": "Base",
      "score": 0.4279985377316692,
      "original_score": 0.4279985377316692,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1260",
      "name": "Improper Handling of Overlap Between Protected Memory Ranges",
      "abstraction": "Base",
      "score": 0.41845493934856276,
      "original_score": 0.41845493934856276,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "835",
      "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
      "abstraction": "Base",
      "score": 0.41738534181167275,
      "original_score": 0.41738534181167275,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "abstraction": "Base",
      "score": 0.41541685538974804,
      "original_score": 0.41541685538974804,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "911",
      "name": "Improper Update of Reference Count",
      "abstraction": "Base",
      "score": 0.4125312920877645,
      "original_score": 0.4125312920877645,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1256",
      "name": "Improper Restriction of Software Interfaces to Hardware Features",
      "abstraction": "Base",
      "score": 0.41117860571550596,
      "original_score": 0.41117860571550596,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "401",
      "name": "Missing Release of Memory after Effective Lifetime",
      "abstraction": "Variant",
      "score": 0.4109785041817177,
      "original_score": 0.4109785041817177,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "abstraction": "Base",
      "score": 0.4106874882724556,
      "original_score": 0.4106874882724556,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "782",
      "name": "Exposed IOCTL with Insufficient Access Control",
      "abstraction": "Variant",
      "score": 0.4076953335471091,
      "original_score": 0.4076953335471091,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "119",
      "name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
      "abstraction": "Class",
      "score": 0.4076432665820427,
      "original_score": 0.4076432665820427,
      "mapping_usage": "Discouraged"
    },
    {
      "cwe_id": "126",
      "name": "Buffer Over-read",
      "abstraction": "Variant",
      "score": 0.4067135798950569,
      "original_score": 0.4067135798950569,
      "mapping_usage": "Allowed"
    }
  ],
  "statistics": {
    "min": 0.4067135798950569,
    "max": 0.4964051394722726,
    "mean": 0.4285155481782271,
    "median": 0.42322673854011594,
    "count": 20
  }
}