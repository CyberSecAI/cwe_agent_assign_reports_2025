{
  "retriever": "sparse",
  "query": "In the Linux kernel, the following vulnerability has been resolved sched sch_cake fix bulk flow accounting logic for host fairness In sch_cake, we keep track of the count of active bulk flows per host, when running in dst/src host fairness mode, which is used as the round-robin weight when iterating through flows. The count of active bulk flows is updated whenever a flow changes state. This has a peculiar interaction with the hash collision handling when a hash collision occurs (after the set-associative hashing), the state of the hash bucket is simply updated to match the new packet that collided, and if host fairness is enabled, that also means assigning new per-host state to the flow. For this reason, the bulk flow counters of the host(s) assigned to the flow are decremented, before new state is assigned (and the counters, which may not belong to the same host anymore, are incremented again). Back when this code was introduced, the host fairness mode was always enabled, so the decrement was unconditional. When the configuration flags were introduced the *increment* was made conditional, but the *decrement* was not. Which of course can lead to a spurious decrement (and associated wrap-around to U16_MAX). AFAICT, when host fairness is disabled, the decrement and wrap-around happens as soon as a hash collision occurs (which is not that common in itself, due to the set-associative hashing). However, in most cases this is harmless, as the value is only used when host f",
  "keyphrases": {
    "rootcause": [
      "hash collision"
    ],
    "weakness": [
      "spurious decrement"
    ]
  },
  "timestamp": "2025-07-12 04:47:09",
  "cve_id": "CVE-2024-46828",
  "result_count": 12,
  "results": [
    {
      "cwe_id": "190",
      "name": "Integer Overflow or Wraparound",
      "score": 1279.8956839976304,
      "search_source": "rootcause:hash collision"
    },
    {
      "cwe_id": "407",
      "name": "Inefficient Algorithmic Complexity",
      "score": 1257.520209387806,
      "search_source": "rootcause:hash collision"
    },
    {
      "cwe_id": "674",
      "name": "Uncontrolled Recursion",
      "score": 1243.235712306742,
      "search_source": "rootcause:hash collision"
    },
    {
      "cwe_id": "295",
      "name": "Improper Certificate Validation",
      "score": 1242.9328873572208,
      "search_source": "rootcause:hash collision"
    },
    {
      "cwe_id": "328",
      "name": "Use of Weak Hash",
      "score": 1235.4157389017948,
      "search_source": "rootcause:hash collision"
    },
    {
      "cwe_id": "863",
      "name": "Incorrect Authorization",
      "score": 1233.56575125917,
      "search_source": "rootcause:hash collision"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 1230.5907356016555,
      "search_source": "rootcause:hash collision"
    },
    {
      "cwe_id": "916",
      "name": "Use of Password Hash With Insufficient Computational Effort",
      "score": 1217.0633530435166,
      "search_source": "rootcause:hash collision"
    },
    {
      "cwe_id": "125",
      "name": "Out-of-bounds Read",
      "score": 1216.8795621170727,
      "search_source": "rootcause:hash collision"
    },
    {
      "cwe_id": "226",
      "name": "Sensitive Information in Resource Not Removed Before Reuse",
      "score": 1212.3295057843945,
      "search_source": "rootcause:hash collision"
    },
    {
      "cwe_id": "212",
      "name": "Improper Removal of Sensitive Information Before Storage or Transfer",
      "score": 1123.7078448750378,
      "search_source": "weakness:spurious decrement"
    },
    {
      "cwe_id": "201",
      "name": "Insertion of Sensitive Information Into Sent Data",
      "score": 1113.695452598591,
      "search_source": "weakness:spurious decrement"
    }
  ]
}