{
  "method": "sparse_base",
  "query": "In the Linux kernel, the following vulnerability has been resolved clk clk-loongson2 Fix memory corruption bug in struct loongson2_clk_provider Some heap space is allocated for the flexible structure `struct clk_hw_onecell_data` and its flexible-array member `hws` through the composite structure `struct loongson2_clk_provider` in function `loongson2_clk_probe()`, as shown below 289 struct loongson2_clk_provider *clp ... 296 for (p = data p->name p++) 297 clks_num++ 298 299 clp = devm_kzalloc(dev, struct_size(clp, clk_data.hws, clks_num), 300 GFP_KERNEL) Then some data is written into the flexible array 350 clp->clk_data.hws[p->id] = hw This corrupts `clk_lock`, which is the spinlock variable immediately following the `clk_data` member in `struct loongson2_clk_provider` struct loongson2_clk_provider { void __iomem *base struct device *dev struct clk_hw_onecell_data clk_data spinlock_t clk_lock /* protect access to DIV registers */ } The problem is that the flexible structure is currently placed in the middle of `struct loongson2_clk_provider` instead of at the end. Fix this by moving `struct clk_hw_onecell_data clk_data` to the end of `struct loongson2_clk_provider`. Also, add a code comment to help prevent this from happening again in case new members are added to the structure in the future. This change also fixes the following -Wflex-array-member-not-at-end warning drivers/clk/clk-loongson2.c3236 warning structure containing a flexible array member is not at the end of another structure [-Wflex-array-member-not-at-end]",
  "keyphrases": {
    "base_query": "In the Linux kernel, the following vulnerability has been resolved clk clk-loongson2 Fix memory corruption bug in struct loongson2_clk_provider Some heap space is allocated for the flexible structure `struct clk_hw_onecell_data` and its flexible-array member `hws` through the composite structure `struct loongson2_clk_provider` in function `loongson2_clk_probe()`, as shown below 289 struct loongson2_clk_provider *clp ... 296 for (p = data p->name p++) 297 clks_num++ 298 299 clp = devm_kzalloc(dev, struct_size(clp, clk_data.hws, clks_num), 300 GFP_KERNEL) Then some data is written into the flexible array 350 clp->clk_data.hws[p->id] = hw This corrupts `clk_lock`, which is the spinlock variable immediately following the `clk_data` member in `struct loongson2_clk_provider` struct loongson2_clk_provider { void __iomem *base struct device *dev struct clk_hw_onecell_data clk_data spinlock_t clk_lock /* protect access to DIV registers */ } The problem is that the flexible structure is currently placed in the middle of `struct loongson2_clk_provider` instead of at the end. Fix this by moving `struct clk_hw_onecell_data clk_data` to the end of `struct loongson2_clk_provider`. Also, add a code comment to help prevent this from happening again in case new members are added to the structure in the future. This change also fixes the following -Wflex-array-member-not-at-end warning drivers/clk/clk-loongson2.c3236 warning structure containing a flexible array member is not at the end of another structure [-Wflex-array-member-not-at-end]"
  },
  "timestamp": "2025-07-13T21:45:17.041406",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "909",
      "name": "Missing Initialization of Resource",
      "score": 321.941226290046
    },
    {
      "doc_id": "125",
      "name": "Out-of-bounds Read",
      "score": 287.9867312912208
    },
    {
      "doc_id": "252",
      "name": "Unchecked Return Value",
      "score": 283.06823959400936
    },
    {
      "doc_id": "226",
      "name": "Sensitive Information in Resource Not Removed Before Reuse",
      "score": 280.31246791401253
    },
    {
      "doc_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 279.90617440687873
    }
  ]
}