{
  "retriever": "sparse",
  "query": "In the Linux kernel, the following vulnerability has been resolved clk clk-loongson2 Fix memory corruption bug in struct loongson2_clk_provider Some heap space is allocated for the flexible structure `struct clk_hw_onecell_data` and its flexible-array member `hws` through the composite structure `struct loongson2_clk_provider` in function `loongson2_clk_probe()`, as shown below 289 struct loongson2_clk_provider *clp ... 296 for (p = data p->name p++) 297 clks_num++ 298 299 clp = devm_kzalloc(dev, struct_size(clp, clk_data.hws, clks_num), 300 GFP_KERNEL) Then some data is written into the flexible array 350 clp->clk_data.hws[p->id] = hw This corrupts `clk_lock`, which is the spinlock variable immediately following the `clk_data` member in `struct loongson2_clk_provider` struct loongson2_clk_provider { void __iomem *base struct device *dev struct clk_hw_onecell_data clk_data spinlock_t clk_lock /* protect access to DIV registers */ } The problem is that the flexible structure is currently placed in the middle of `struct loongson2_clk_provider` instead of at the end. Fix this by moving `struct clk_hw_onecell_data clk_data` to the end of `struct loongson2_clk_provider`. Also, add a code comment to help prevent this from happening again in case new members are added to the structure in the future. This change also fixes the following -Wflex-array-member-not-at-end warning drivers/clk/clk-loongson2.c3236 warning structure containing a flexible array member is not at the end of another structure [-Wflex-array-member-not-at-end]",
  "keyphrases": {
    "weakness": [
      "memory corruption"
    ]
  },
  "timestamp": "2025-07-12 06:03:30",
  "cve_id": "CVE-2024-53193",
  "result_count": 11,
  "results": [
    {
      "cwe_id": "787",
      "name": "Out-of-bounds Write",
      "score": 1000.0,
      "search_source": "alternate_term_match"
    },
    {
      "cwe_id": "909",
      "name": "Missing Initialization of Resource",
      "score": 915.0273397012962,
      "search_source": "weakness:memory corruption"
    },
    {
      "cwe_id": "125",
      "name": "Out-of-bounds Read",
      "score": 820.7031965271836,
      "search_source": "weakness:memory corruption"
    },
    {
      "cwe_id": "252",
      "name": "Unchecked Return Value",
      "score": 804.5103784685681,
      "search_source": "weakness:memory corruption"
    },
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "score": 798.9144792588693,
      "search_source": "weakness:memory corruption"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 796.8504686130033,
      "search_source": "weakness:memory corruption"
    },
    {
      "cwe_id": "226",
      "name": "Sensitive Information in Resource Not Removed Before Reuse",
      "score": 792.8372957519888,
      "search_source": "weakness:memory corruption"
    },
    {
      "cwe_id": "674",
      "name": "Uncontrolled Recursion",
      "score": 783.7965356272457,
      "search_source": "weakness:memory corruption"
    },
    {
      "cwe_id": "190",
      "name": "Integer Overflow or Wraparound",
      "score": 765.6285543746376,
      "search_source": "weakness:memory corruption"
    },
    {
      "cwe_id": "122",
      "name": "Heap-based Buffer Overflow",
      "score": 765.3787266853493,
      "search_source": "weakness:memory corruption"
    },
    {
      "cwe_id": "824",
      "name": "Access of Uninitialized Pointer",
      "score": 267.8201113498341,
      "search_source": "base_query"
    }
  ]
}