{
  "retriever": "sparse",
  "query": "In the Linux kernel, the following vulnerability has been resolved tcp prevent concurrent execution of tcp_sk_exit_batch Its possible that two threads call tcp_sk_exit_batch() concurrently, once from the cleanup_net workqueue, once from a task that failed to clone a new netns. In the latter case, error unwinding calls the exit handlers in reverse order for the failed netns. tcp_sk_exit_batch() calls tcp_twsk_purge(). Problem is that since commit b099ce2602d8 (net Batch inet_twsk_purge), this function picks up twsk in any dying netns, not just the one passed in via exit_batch list. This means that the error unwind of setup_net() can steal and destroy timewait sockets belonging to the exiting netns. This allows the netns exit worker to proceed to call WARN_ON_ONCE(!refcount_dec_and_test(&net->ipv4.tcp_death_row.tw_refcount)) without the expected 1 -> 0 transition, which then splats. At same time, error unwind path that is also running inet_twsk_purge() will splat as well WARNING .. at lib/refcount.c31 refcount_warn_saturate+0x1ed/0x210 ... refcount_dec include/linux/refcount.h351 [inline] inet_twsk_kill+0x758/0x9c0 net/ipv4/inet_timewait_sock.c70 inet_twsk_deschedule_put net/ipv4/inet_timewait_sock.c221 inet_twsk_purge+0x725/0x890 net/ipv4/inet_timewait_sock.c304 tcp_sk_exit_batch+0x1c/0x170 net/ipv4/tcp_ipv4.c3522 ops_exit_list+0x128/0x180 net/core/net_namespace.c178 setup_net+0x714/0xb40 net/core/net_namespace.c375 copy_net_ns+0x2f0/0x670",
  "keyphrases": {
    "rootcause": [
      "concurrent execution"
    ]
  },
  "timestamp": "2025-07-12 04:18:25",
  "cve_id": "CVE-2024-44991",
  "result_count": 11,
  "results": [
    {
      "cwe_id": "415",
      "name": "Double Free",
      "score": 715.3359527820951,
      "search_source": "rootcause:concurrent execution"
    },
    {
      "cwe_id": "923",
      "name": "Improper Restriction of Communication Channel to Intended Endpoints",
      "score": 697.8327052631023,
      "search_source": "rootcause:concurrent execution"
    },
    {
      "cwe_id": "909",
      "name": "Missing Initialization of Resource",
      "score": 686.4173161689921,
      "search_source": "rootcause:concurrent execution"
    },
    {
      "cwe_id": "674",
      "name": "Uncontrolled Recursion",
      "score": 685.7100645334895,
      "search_source": "rootcause:concurrent execution"
    },
    {
      "cwe_id": "502",
      "name": "Deserialization of Untrusted Data",
      "score": 680.7431172452511,
      "search_source": "rootcause:concurrent execution"
    },
    {
      "cwe_id": "401",
      "name": "Missing Release of Memory after Effective Lifetime",
      "score": 672.0994955051601,
      "search_source": "rootcause:concurrent execution"
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "score": 667.6984450450149,
      "search_source": "rootcause:concurrent execution"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 665.0799193983873,
      "search_source": "rootcause:concurrent execution"
    },
    {
      "cwe_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "score": 658.5010530655455,
      "search_source": "rootcause:concurrent execution"
    },
    {
      "cwe_id": "125",
      "name": "Out-of-bounds Read",
      "score": 656.8623835226149,
      "search_source": "rootcause:concurrent execution"
    },
    {
      "cwe_id": "61",
      "name": "UNIX Symbolic Link (Symlink) Following",
      "score": 217.4602825370917,
      "search_source": "base_query"
    }
  ]
}