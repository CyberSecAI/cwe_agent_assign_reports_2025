{
  "retriever": "graph",
  "query": "In the Linux kernel, the following vulnerability has been resolved tcp prevent concurrent execution of tcp_sk_exit_batch Its possible that two threads call tcp_sk_exit_batch() concurrently, once from the cleanup_net workqueue, once from a task that failed to clone a new netns. In the latter case, error unwinding calls the exit handlers in reverse order for the failed netns. tcp_sk_exit_batch() calls tcp_twsk_purge(). Problem is that since commit b099ce2602d8 (net Batch inet_twsk_purge), this function picks up twsk in any dying netns, not just the one passed in via exit_batch list. This means that the error unwind of setup_net() can steal and destroy timewait sockets belonging to the exiting netns. This allows the netns exit worker to proceed to call WARN_ON_ONCE(!refcount_dec_and_test(&net->ipv4.tcp_death_row.tw_refcount)) without the expected 1 -> 0 transition, which then splats. At same time, error unwind path that is also running inet_twsk_purge() will splat as well WARNING .. at lib/refcount.c31 refcount_warn_saturate+0x1ed/0x210 ... refcount_dec include/linux/refcount.h351 [inline] inet_twsk_kill+0x758/0x9c0 net/ipv4/inet_timewait_sock.c70 inet_twsk_deschedule_put net/ipv4/inet_timewait_sock.c221 inet_twsk_purge+0x725/0x890 net/ipv4/inet_timewait_sock.c304 tcp_sk_exit_batch+0x1c/0x170 net/ipv4/tcp_ipv4.c3522 ops_exit_list+0x128/0x180 net/core/net_namespace.c178 setup_net+0x714/0xb40 net/core/net_namespace.c375 copy_net_ns+0x2f0/0x670 Consider specifically these CWEs: CWE-415 CWE-191 CWE-401 CWE-923 CWE-362 CWE-909 CWE-674 CWE-502 CWE-394 CWE-833",
  "keyphrases": {
    "original_query": "In the Linux kernel, the following vulnerability has been resolved tcp prevent concurrent execution of tcp_sk_exit_batch Its possible that two threads call tcp_sk_exit_batch() concurrently, once from the cleanup_net workqueue, once from a task that failed to clone a new netns. In the latter case, error unwinding calls the exit handlers in reverse order for the failed netns. tcp_sk_exit_batch() calls tcp_twsk_purge(). Problem is that since commit b099ce2602d8 (net Batch inet_twsk_purge), this function picks up twsk in any dying netns, not just the one passed in via exit_batch list. This means that the error unwind of setup_net() can steal and destroy timewait sockets belonging to the exiting netns. This allows the netns exit worker to proceed to call WARN_ON_ONCE(!refcount_dec_and_test(&net->ipv4.tcp_death_row.tw_refcount)) without the expected 1 -> 0 transition, which then splats. At same time, error unwind path that is also running inet_twsk_purge() will splat as well WARNING .. at lib/refcount.c31 refcount_warn_saturate+0x1ed/0x210 ... refcount_dec include/linux/refcount.h351 [inline] inet_twsk_kill+0x758/0x9c0 net/ipv4/inet_timewait_sock.c70 inet_twsk_deschedule_put net/ipv4/inet_timewait_sock.c221 inet_twsk_purge+0x725/0x890 net/ipv4/inet_timewait_sock.c304 tcp_sk_exit_batch+0x1c/0x170 net/ipv4/tcp_ipv4.c3522 ops_exit_list+0x128/0x180 net/core/net_namespace.c178 setup_net+0x714/0xb40 net/core/net_namespace.c375 copy_net_ns+0x2f0/0x670",
    "enhanced_query": "In the Linux kernel, the following vulnerability has been resolved tcp prevent concurrent execution of tcp_sk_exit_batch Its possible that two threads call tcp_sk_exit_batch() concurrently, once from the cleanup_net workqueue, once from a task that failed to clone a new netns. In the latter case, error unwinding calls the exit handlers in reverse order for the failed netns. tcp_sk_exit_batch() calls tcp_twsk_purge(). Problem is that since commit b099ce2602d8 (net Batch inet_twsk_purge), this function picks up twsk in any dying netns, not just the one passed in via exit_batch list. This means that the error unwind of setup_net() can steal and destroy timewait sockets belonging to the exiting netns. This allows the netns exit worker to proceed to call WARN_ON_ONCE(!refcount_dec_and_test(&net->ipv4.tcp_death_row.tw_refcount)) without the expected 1 -> 0 transition, which then splats. At same time, error unwind path that is also running inet_twsk_purge() will splat as well WARNING .. at lib/refcount.c31 refcount_warn_saturate+0x1ed/0x210 ... refcount_dec include/linux/refcount.h351 [inline] inet_twsk_kill+0x758/0x9c0 net/ipv4/inet_timewait_sock.c70 inet_twsk_deschedule_put net/ipv4/inet_timewait_sock.c221 inet_twsk_purge+0x725/0x890 net/ipv4/inet_timewait_sock.c304 tcp_sk_exit_batch+0x1c/0x170 net/ipv4/tcp_ipv4.c3522 ops_exit_list+0x128/0x180 net/core/net_namespace.c178 setup_net+0x714/0xb40 net/core/net_namespace.c375 copy_net_ns+0x2f0/0x670 Consider specifically these CWEs: CWE-415 CWE-191 CWE-401 CWE-923 CWE-362 CWE-909 CWE-674 CWE-502 CWE-394 CWE-833",
    "cwe_mentions": [
      "CWE-415",
      "CWE-191",
      "CWE-401",
      "CWE-923",
      "CWE-362",
      "CWE-909",
      "CWE-674",
      "CWE-502",
      "CWE-394",
      "CWE-833"
    ],
    "search_time": 3.8930017948150635
  },
  "timestamp": "2025-07-12 04:18:29",
  "cve_id": "CVE-2024-44991",
  "result_count": 20,
  "results": [
    {
      "cwe_id": "416",
      "name": "Use After Free",
      "type": "variant",
      "score": 2.688,
      "relationship_count": 0
    },
    {
      "cwe_id": "123",
      "name": "Write-what-where Condition",
      "type": "base",
      "score": 2.4700000000000006,
      "relationship_count": 0
    },
    {
      "cwe_id": "415",
      "name": "Double Free",
      "type": "variant",
      "score": 2.4192,
      "relationship_count": 0
    },
    {
      "cwe_id": "390",
      "name": "Detection of Error Condition Without Action",
      "type": "base",
      "score": 2.2100000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "322",
      "name": "Key Exchange without Entity Authentication",
      "type": "base",
      "score": 2.2100000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "502",
      "name": "Deserialization of Untrusted Data",
      "type": "base",
      "score": 2.1189999999999998,
      "relationship_count": 0
    },
    {
      "cwe_id": "350",
      "name": "Reliance on Reverse DNS Resolution for a Security-Critical Action",
      "type": "variant",
      "score": 2.04,
      "relationship_count": 0
    },
    {
      "cwe_id": "364",
      "name": "Signal Handler Race Condition",
      "type": "Base",
      "score": 1.9100597985439625,
      "relationship_count": 0
    },
    {
      "cwe_id": "456",
      "name": "Missing Initialization of a Variable",
      "type": "variant",
      "score": 1.83936,
      "relationship_count": 0
    },
    {
      "cwe_id": "120",
      "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
      "type": "base",
      "score": 1.7680000000000005,
      "relationship_count": 0
    },
    {
      "cwe_id": "1265",
      "name": "Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls",
      "type": "base",
      "score": 1.6848000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "1325",
      "name": "Improperly Controlled Sequential Memory Allocation",
      "type": "base",
      "score": 1.6848000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "386",
      "name": "Symbolic Name not Mapping to Correct Object",
      "type": "base",
      "score": 1.6744000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "662",
      "name": "Improper Synchronization",
      "type": "class",
      "score": 1.6736000000000002,
      "relationship_count": 0
    },
    {
      "cwe_id": "833",
      "name": "Deadlock",
      "type": "Base",
      "score": 1.6537647124572914,
      "relationship_count": 0
    },
    {
      "cwe_id": "394",
      "name": "Unexpected Status Code or Return Value",
      "type": "Base",
      "score": 1.614668040169613,
      "relationship_count": 0
    },
    {
      "cwe_id": "61",
      "name": "UNIX Symbolic Link (Symlink) Following",
      "type": "compound",
      "score": 1.61,
      "relationship_count": 0
    },
    {
      "cwe_id": "134",
      "name": "Use of Externally-Controlled Format String",
      "type": "base",
      "score": 1.5350400000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "915",
      "name": "Improperly Controlled Modification of Dynamically-Determined Object Attributes",
      "type": "base",
      "score": 1.521,
      "relationship_count": 0
    },
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "type": "Base",
      "score": 1.518834178974919,
      "relationship_count": 0
    }
  ]
}