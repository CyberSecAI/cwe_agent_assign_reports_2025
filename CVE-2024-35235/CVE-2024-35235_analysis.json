{
  "cve_id": "CVE-2024-35235",
  "description": "OpenPrinting CUPS is an open source printing system for Linux and other Unix-like operating systems. In versions 2.4.8 and earlier, when starting the cupsd server with a Listen configuration item pointing to a symbolic link, the cupsd process can be caused to perform an **arbitrary chmod** of the provided argument, providing world-writable access to the target. Given that cupsd is often running as root, this can result in the change of permission of any user or system files to be world writable. Given the aforementioned Ubuntu AppArmor context, on such systems this vulnerability is limited to those files modifiable by the cupsd process. In that specific case it was found to be possible to turn the configuration of the Listen argument into full control over the cupsd.conf and cups-files.conf configuration files. By later setting the User and Group arguments in cups-files.conf, and printing with a printer configured by PPD with a `FoomaticRIPCommandLine` argument, arbitrary user and group (not root) command execution could be achieved, which can further be used on Ubuntu systems to achieve full root command execution. Commit ff1f8a623e090dee8a8aadf12a6a4b25efac143d contains a patch for the issue.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "arbitrary chmod",
    "impact": "full root command execution",
    "vector": "",
    "attacker": "",
    "product": "OpenPrinting CUPS",
    "version": "2.4.8 and earlier",
    "component": "cupsd server"
  },
  "reference_content": "```\n{\n  \"cve\": \"CVE-2024-35235\",\n  \"vulnerabilities\": [\n    {\n      \"root_cause\": \"The `cupsd` server, when configured with a `Listen` directive pointing to a symbolic link, attempts to `unlink` the target path and then bind to it as a domain socket. If either operation fails, due to, for example, AppArmor preventing the `unlink` on a symlink, or a race condition where the symlink is recreated before the bind, the server will proceed to change the file permissions of the target to world-writable using `chmod`, even if the binding failed.\",\n      \"weaknesses\": [\n        \"The code does not properly check the return value of `unlink` and `bind` before proceeding to `chmod`.\",\n        \"The code uses `chmod` on a path controlled by the user, not an explicit file descriptor, which could result in modification of an unintended target if the path is a symlink.\"\n      ],\n      \"impact\": \"An attacker can cause the `cupsd` process to perform an arbitrary `chmod` operation, making any file world writable if they can cause a bind to a symbolic link to fail. Since `cupsd` often runs as root, this can be leveraged to escalate privileges.\",\n      \"attack_vectors\": \"The attack requires modifying the `/etc/cups/cupsd.conf` file to contain a `Listen` directive with a path that resolves to a symbolic link. This can be done via a race condition or with a separate vulnerability that allows writing to the configuration file.\",\n      \"required_capabilities\": \"The attacker requires the ability to modify the `cupsd.conf` file to include a malicious `Listen` directive. They also need to be able to trigger a situation where the `unlink` and/or `bind` call fails, such as by planting a symlink in a location that will be later be called by `bind`.\"\n    }\n  ],\n  \"additional_details\": {\n     \"vulnerability_chain\": \"This vulnerability was found as part of a larger chain in Ubuntu 24.04, where the ability to make arbitrary files world-writable leads to further vulnerabilities including the capability to execute commands with specific users and groups. This was achieved by modifying the cupsd.conf and cups-files.conf configuration files and using a FoomaticRIPCommandLine printer config. The issue is compounded by a race condition where a symlink can be created after the initial unlink, ensuring the bind fails and the chmod occurs.\",\n     \"fix_description\": \"The suggested fix includes opening the configured paths using `openat` with `O_NOFOLLOW`, followed by using `fchmod` in place of `chmod`. Additionally, the return value of the `bind` call should be checked before proceeding to `chmod`.\",\n    \"debug_print_issues\":\"The use of `DEBUG_printf` without saving and restoring `errno` might make the `errno == ENOENT` check unreliable as `DEBUG_printf` itself can overwrite it.\"\n  }\n}\n```",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n\n| CWE ID  | CWE Name                                                        | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :-------------------------------------------------------------- | :--------- | :-------------------- | :------------------------------ | :------------------------------ |\n| CWE-732   | Incorrect Permission Assignment for Critical Resource           | 0.9        | Class                 | Allowed-with-Review             | Primary CWE                     |\n| CWE-367   | Time-of-check Time-of-use (TOCTOU) Race Condition               | 0.7        | Base                  | Allowed                         | Secondary Candidate             |\n| CWE-59    | Improper Link Resolution Before File Access ('Link Following') | 0.6        | Base                  | Allowed                         | Secondary Candidate             |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary weakness is identified as **CWE-732 Incorrect Permission Assignment for Critical Resource**, a Class-level CWE. While the description involves a race condition (**CWE-367 Time-of-check Time-of-use (TOCTOU) Race Condition**) and improper link resolution (**CWE-59 Improper Link Resolution Before File Access ('Link Following')**), these are contributing factors rather than the core issue. **CWE-732** reflects the direct consequence of the vulnerability: the incorrect assignment of permissions to critical resources. The relationships between these CWEs can be visualized as follows:\n\n```mermaid\ngraph TD\n    cwe732[\"CWE-732: Incorrect Permission Assignment for Critical Resource\"]\n    cwe367[\"CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\"]\n    cwe59[\"CWE-59: Improper Link Resolution Before File Access ('Link Following')\"]\n\n    cwe367 -->|CANPRECEDE| cwe59\n    cwe59 -->|CANLEADTO| cwe732\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe732 primary\n    class cwe367,cwe59 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain can be described as follows:\n\n1.  **Initial Configuration:** `cupsd` server is started with a `Listen` configuration item pointing to a symbolic link.\n2.  **Race Condition/Link Following:** A race condition (**CWE-367**) or AppArmor restrictions prevent the `unlink` or `bind` operation on the symbolic link, potentially involving **CWE-59**.\n3.  **Incorrect Permission Assignment:** Due to the **improper check** of the return values of `unlink` and `bind`, the `cupsd` process performs an **arbitrary chmod** on the target of the symbolic link, making it world-writable (**CWE-732**).\n4.  **Privilege Escalation (Impact):** This leads to the potential for full root command execution by modifying configuration files and leveraging `FoomaticRIPCommandLine`.\n\nThe primary weakness is **CWE-732**, which represents the immediate security flaw.\n\n## Summary of Analysis\n\nThe initial analysis considered several CWEs, including **CWE-367** and **CWE-59** due to the race condition and symbolic link aspects of the vulnerability. However, the core issue is the **incorrect assignment of permissions**, making **CWE-732** the most relevant. The evidence from the vulnerability description and CVE Reference Links Content Summary strongly supports this classification. The graph relationships helped to visualize the chain of events leading to the incorrect permission assignment, further solidifying the choice of **CWE-732** as the primary CWE. The fact that the code **does not properly check the return value of `unlink` and `bind` before proceeding to `chmod`** strongly points to **CWE-732**.\n\nThe selected CWEs are at the optimal level of specificity because **CWE-732** directly addresses the core weakness (incorrect permission assignment), while **CWE-367** and **CWE-59** provide context regarding the conditions that enable the vulnerability.\n\nRelevant CWE Information:\n\n**CWE-732: Incorrect Permission Assignment for Critical Resource**\nThe product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors. The **arbitrary chmod** directly leads to this condition.\n\n**CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition**\nThe product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This allows the attacker to cause a race condition.\n\n**CWE-59: Improper Link Resolution Before File Access ('Link Following')**\nThe product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource. This allows the attacker to cause a bind to a symbolic link to fail.",
  "analysis_with_relationships": "# Summary\n\n| CWE ID  | CWE Name                                                        | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :-------------------------------------------------------------- | :--------- | :-------------------- | :------------------------------ | :------------------------------ |\n| CWE-732   | Incorrect Permission Assignment for Critical Resource           | 0.9        | Class                 | Allowed-with-Review             | Primary CWE                     |\n| CWE-367   | Time-of-check Time-of-use (TOCTOU) Race Condition               | 0.7        | Base                  | Allowed                         | Secondary Candidate             |\n| CWE-59    | Improper Link Resolution Before File Access ('Link Following') | 0.6        | Base                  | Allowed                         | Secondary Candidate             |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary weakness is identified as **CWE-732 Incorrect Permission Assignment for Critical Resource**, a Class-level CWE. While the description involves a race condition (**CWE-367 Time-of-check Time-of-use (TOCTOU) Race Condition**) and improper link resolution (**CWE-59 Improper Link Resolution Before File Access ('Link Following')**), these are contributing factors rather than the core issue. **CWE-732** reflects the direct consequence of the vulnerability: the incorrect assignment of permissions to critical resources. The relationships between these CWEs can be visualized as follows:\n\n```mermaid\ngraph TD\n    cwe732[\"CWE-732: Incorrect Permission Assignment for Critical Resource\"]\n    cwe367[\"CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\"]\n    cwe59[\"CWE-59: Improper Link Resolution Before File Access ('Link Following')\"]\n\n    cwe367 -->|CANPRECEDE| cwe59\n    cwe59 -->|CANLEADTO| cwe732\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe732 primary\n    class cwe367,cwe59 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain can be described as follows:\n\n1.  **Initial Configuration:** `cupsd` server is started with a `Listen` configuration item pointing to a symbolic link.\n2.  **Race Condition/Link Following:** A race condition (**CWE-367**) or AppArmor restrictions prevent the `unlink` or `bind` operation on the symbolic link, potentially involving **CWE-59**.\n3.  **Incorrect Permission Assignment:** Due to the **improper check** of the return values of `unlink` and `bind`, the `cupsd` process performs an **arbitrary chmod** on the target of the symbolic link, making it world-writable (**CWE-732**).\n4.  **Privilege Escalation (Impact):** This leads to the potential for full root command execution by modifying configuration files and leveraging `FoomaticRIPCommandLine`.\n\nThe primary weakness is **CWE-732**, which represents the immediate security flaw.\n\n## Summary of Analysis\n\nThe initial analysis considered several CWEs, including **CWE-367** and **CWE-59** due to the race condition and symbolic link aspects of the vulnerability. However, the core issue is the **incorrect assignment of permissions**, making **CWE-732** the most relevant. The evidence from the vulnerability description and CVE Reference Links Content Summary strongly supports this classification. The graph relationships helped to visualize the chain of events leading to the incorrect permission assignment, further solidifying the choice of **CWE-732** as the primary CWE. The fact that the code **does not properly check the return value of `unlink` and `bind` before proceeding to `chmod`** strongly points to **CWE-732**.\n\nThe selected CWEs are at the optimal level of specificity because **CWE-732** directly addresses the core weakness (incorrect permission assignment), while **CWE-367** and **CWE-59** provide context regarding the conditions that enable the vulnerability.\n\nRelevant CWE Information:\n\n**CWE-732: Incorrect Permission Assignment for Critical Resource**\nThe product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors. The **arbitrary chmod** directly leads to this condition.\n\n**CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition**\nThe product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This allows the attacker to cause a race condition.\n\n**CWE-59: Improper Link Resolution Before File Access ('Link Following')**\nThe product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource. This allows the attacker to cause a bind to a symbolic link to fail.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-59:**\n- 59 (Improper Link Resolution Before File Access ('Link Following')) - ROOT\n\n\n**Chain starting from CWE-367:**\n- 367 (Time-of-check Time-of-use (TOCTOU) Race Condition) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "732",
        "name": "Incorrect Permission Assignment for Critical Resource",
        "source": "sparse"
      },
      "similarity": 1016.6496749697335
    },
    {
      "metadata": {
        "doc_id": "22",
        "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
        "source": "sparse"
      },
      "similarity": 1003.9871133523521
    },
    {
      "metadata": {
        "doc_id": "59",
        "name": "Improper Link Resolution Before File Access ('Link Following')",
        "source": "sparse"
      },
      "similarity": 978.9170047512843
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 976.4789974499421
    },
    {
      "metadata": {
        "doc_id": "427",
        "name": "Uncontrolled Search Path Element",
        "source": "sparse"
      },
      "similarity": 964.6064688370668
    },
    {
      "metadata": {
        "doc_id": "367",
        "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
        "source": "sparse"
      },
      "similarity": 958.1081544872067
    },
    {
      "metadata": {
        "doc_id": "269",
        "name": "Improper Privilege Management",
        "source": "sparse"
      },
      "similarity": 956.4171891300915
    },
    {
      "metadata": {
        "doc_id": "88",
        "name": "Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
        "source": "sparse"
      },
      "similarity": 954.913093731503
    },
    {
      "metadata": {
        "doc_id": "277",
        "name": "Insecure Inherited Permissions",
        "type": "Variant",
        "original_content": "A product defines a set of insecure permissions that are inherited by objects that are created by the program.",
        "keyphrase_source": "weakness:arbitrary chmod",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.49813213494269815,
            "graph": 1.5080681863887906
          }
        }
      },
      "similarity": 0.49813213494269815
    },
    {
      "doc_id": "363",
      "text": "CWE-363: Race Condition Enabling Link Following",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "363",
        "name": "Race Condition Enabling Link Following",
        "type": "base",
        "original_content": "CWE-363: Race Condition Enabling Link Following",
        "relationships": [
          {
            "source_id": "363",
            "target_id": "59",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "363",
            "target_id": "367",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "59",
            "target_id": "363",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "367",
            "target_id": "363",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "59",
                  "363",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "59"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "59",
                  "363",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "59"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "363",
                  "59",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "59"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-59",
      "CWE-367",
      "CWE-732"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}