{
  "cve_id": "CVE-2024-29511",
  "description": "Artifex Ghostscript before 10.03.1, when Tesseract is used for OCR, has a **directory traversal** issue that allows arbitrary file reading (and writing of error messages to arbitrary files) via OCRLanguage. For example, exploitation can use debug_file /tmp/out and user_patterns_file /etc/passwd.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "directory traversal",
    "impact": "arbitrary file reading and writing",
    "vector": "OCR input",
    "attacker": "",
    "product": "Artifex Ghostscript",
    "version": "before 10.03.1",
    "component": ""
  },
  "reference_content": "Based on the provided information, here's a breakdown of CVE-2024-29511:\n\n**Root Cause:**\n\nThe vulnerability stems from the way Ghostscript's `ocr` device interacts with Tesseract, an OCR engine. The `OCRLanguage` parameter, used to specify the language for OCR, allows for path traversal. By using a path like `../../../../../tmp/test`, an attacker can force Tesseract to load a language data file from an arbitrary location, such as `/tmp/test.traineddata`, instead of the expected location within the Ghostscript installation. Tesseract `traineddata` files can contain configuration values, `user_patterns_file` and `debug_file` parameters that are used to load a pattern file and write debug information to a given path respectively. An attacker can create a custom traineddata file with these parameters to perform arbitrary file read and write.\n\n**Weaknesses/Vulnerabilities Present:**\n\n1.  **Path Traversal:** The `OCRLanguage` parameter in Ghostscript's `ocr` device does not properly sanitize or validate the provided path, allowing for directory traversal to access arbitrary files.\n2.  **Unvalidated Tesseract Configuration:** Tesseract's configuration files (`traineddata`) include parameters that allow for loading of external files and outputting debug information to arbitrary file paths.\n3.  **Lack of Input Validation/Sanitization**: The combination of these allows an attacker to effectively control which files Tesseract will use and output, leading to arbitrary file read and write.\n\n**Impact of Exploitation:**\n\nAn attacker can achieve arbitrary file read and write capabilities:\n*   **Arbitrary File Read:** By crafting a malicious Tesseract `traineddata` file that specifies a `user_patterns_file`, the attacker can force Tesseract to attempt to load patterns from an arbitrary file (e.g., `/etc/passwd`). The verbose debug output will then contain the contents of that file prefixed by \"Error: failed to insert pattern\".\n*   **Arbitrary File Write:** By crafting a malicious `traineddata` file that specifies a `debug_file`, the attacker can write debug output, which includes contents of the pattern file, to any location the Ghostscript process has write access to.\n\n**Attack Vectors:**\n\n*   The attacker crafts a malicious Tesseract `traineddata` file.\n*   The attacker then crafts a PostScript file using the `ocr` device, specifying `OCRLanguage` with a path traversal to the location of the malicious `traineddata` file.\n*   When Ghostscript processes the PostScript file, it uses the path-traversal-modified `OCRLanguage` parameter to load the malicious `traineddata` file.\n*   Tesseract, based on configuration in the malicious traineddata file, loads and processes the attacker specified `user_patterns_file` and outputs its contents to the attacker specified `debug_file`.\n\n**Required Attacker Capabilities/Position:**\n\n*   The attacker needs the ability to provide a PostScript file that will be processed by Ghostscript with Tesseract support enabled.\n*   The attacker needs to have write access to a location where they can store the malicious `traineddata` file (e.g., `/tmp`).\n*   The attacker needs to be able to specify a path with path traversal through the `OCRLanguage` parameter in the PostScript file to force the use of the malicious Tesseract config.\n*   The attacker needs to have read access to the Ghostscript output file to extract data that was read by the Tesseract library.\n*   Ghostscript must be compiled with Tesseract support.\n\n**Additional Notes**\n\n*   The vulnerability does not lead to Remote Code Execution (RCE) directly, as stated in the changelog, despite being initially stated as a possible RCE vector.\n*   The vulnerability is a partial SAFER sandbox bypass, as it allows for file system access that is normally restricted.\n*   The fix for this vulnerability was included in Ghostscript version 10.03.0.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-22 | Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') | 1.0 | Base | Allowed | Primary CWE |\n| CWE-73 | External Control of File Name or Path | 0.7 | Base | Allowed | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship that impacts the CWE selection is the parent-child relationship between CWE-119 (Improper Restriction of Operations within the Bounds of a Memory Buffer) and CWE-22. While CWE-73 (External Control of File Name or Path) is related, CWE-22 is a more specific instance of a path traversal vulnerability, making it a better fit. CWE-22 is a base level CWE, which is the preferred level of abstraction.\n\n```mermaid\ngraph TD\n    cwe22[\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"]\n    cwe73[\"CWE-73: External Control of File Name or Path\"]\n    \n    cwe22 -->|CANFOLLOW| cwe73\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe22 primary\n    class cwe73 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **improper handling of the OCRLanguage parameter**, leading to **directory traversal** (CWE-22), which allows an attacker to control the files used by Tesseract. This then allows for arbitrary file read and write.\n\n## Summary of Analysis\nThe analysis is based on the provided evidence, specifically the vulnerability description key phrases highlighting \"**directory traversal**\" and the CVE Reference Links Content Summary detailing the **root cause** related to the `OCRLanguage` parameter. The retriever results also strongly suggest CWE-22 as the primary candidate.\n\nCWE-22 is chosen because it directly addresses the **path traversal** issue stemming from the **improper limitation of a pathname to a restricted directory**. This is the **root cause** of the vulnerability, enabling the subsequent arbitrary file operations.\n\nCWE-73 is considered as a secondary candidate since the user input (`OCRLanguage` parameter) influences the file path. However, CWE-22 is a more precise description of the core vulnerability, which is the **failure to properly restrict the pathname**.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## Vulnerability Description\nArtifex Ghostscript before 10.03.1, when Tesseract is used for OCR, has a **directory traversal** issue that allows arbitrary file reading (and writing of error messages to arbitrary files) via OCRLanguage. For example, exploitation can use debug_file /tmp/out and user_patterns_file /etc/passwd.\n\n### Vulnerability Description Key Phrases\n- **weakness:** **directory traversal**\n- **impact:** arbitrary file reading and writing\n- **vector:** OCR input\n- **product:** Artifex Ghostscript\n- **version:** before 10.03.1\n\n## CVE Reference Links Content Summary\nBased on the provided information, here's a breakdown of CVE-2024-29511:\n\n**Root Cause:**\n\nThe vulnerability stems from the way Ghostscript's `ocr` device interacts with Tesseract, an OCR engine. The `OCRLanguage` parameter, used to specify the language for OCR, allows for path traversal. By using a path like `../../../../../tmp/test`, an attacker can force Tesseract to load a language data file from an arbitrary location, such as `/tmp/test.traineddata`, instead of the expected location within the Ghostscript installation. Tesseract `traineddata` files can contain configuration values, `user_patterns_file` and `debug_file` parameters that are used to load a pattern file and write debug information to a given path respectively. An attacker can create a custom traineddata file with these parameters to perform arbitrary file read and write.\n\n**Weaknesses/Vulnerabilities Present:**\n\n1.  **Path Traversal:** The `OCRLanguage` parameter in Ghostscript's `ocr` device does not properly sanitize or validate the provided path, allowing for directory traversal to access arbitrary files.\n2.  **Unvalidated Tesseract Configuration:** Tesseract's configuration files (`traineddata`) include parameters that allow for loading of external files and outputting debug information to arbitrary file paths.\n3.  **Lack of Input Validation/Sanitization**: The combination of these allows an attacker to effectively control which files Tesseract will use and output, leading to arbitrary file read and write.\n\n**Impact of Exploitation:**\n\nAn attacker can achieve arbitrary file read and write capabilities:\n*   **Arbitrary File Read:** By crafting a malicious Tesseract `traineddata` file that specifies a `user_patterns_file`, the attacker can force Tesseract to attempt to load patterns from an arbitrary file (e.g., `/etc/passwd`). The verbose debug output will then contain the contents of that file prefixed by \"Error: failed to insert pattern\".\n*   **Arbitrary File Write:** By crafting a malicious `traineddata` file that specifies a `debug_file`, the attacker can write debug output, which includes contents of the pattern file, to any location the Ghostscript process has write access to.\n\n**Attack Vectors:**\n\n*   The attacker crafts a malicious Tesseract `traineddata` file.\n*   The attacker then crafts a PostScript file using the `ocr` device, specifying `OCRLanguage` with a path traversal to the location of the malicious `traineddata` file.\n*   When Ghostscript processes the PostScript file, it uses the path-traversal-modified `OCRLanguage` parameter to load the malicious `traineddata` file.\n*   Tesseract, based on configuration in the malicious traineddata file, loads and processes the attacker specified `user_patterns_file` and outputs its contents to the attacker specified `debug_file`.\n\n**Required Attacker Capabilities/Position:**\n\n*   The attacker needs the ability to provide a PostScript file that will be processed by Ghostscript with Tesseract support enabled.\n*   The attacker needs to have write access to a location where they can store the malicious `traineddata` file (e.g., `/tmp`).\n*   The attacker needs to be able to specify a path with path traversal through the `OCRLanguage` parameter in the PostScript file to force the use of the malicious Tesseract config.\n*   The attacker needs to have read access to the Ghostscript output file to extract data that was read by the Tesseract library.\n*   Ghostscript must be compiled with Tesseract support.\n\n**Additional Notes**\n\n*   The vulnerability does not lead to Remote Code Execution (RCE) directly, as stated in the changelog, despite being initially stated as a possible RCE vector.\n*   The vulnerability is a partial SAFER sandbox bypass, as it allows for file system access that is normally restricted.\n*   The fix for this vulnerability was included in Ghostscript version 10.03.0.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-22 | Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') | 1.0 | Base | Allowed | Primary CWE |\n| CWE-73 | External Control of File Name or Path | 0.7 | Base | Allowed | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship that impacts the CWE selection is the parent-child relationship between CWE-119 (Improper Restriction of Operations within the Bounds of a Memory Buffer) and CWE-22. While CWE-73 (External Control of File Name or Path) is related, CWE-22 is a more specific instance of a path traversal vulnerability, making it a better fit. CWE-22 is a base level CWE, which is the preferred level of abstraction.\n\n```mermaid\ngraph TD\n    cwe22[\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"]\n    cwe73[\"CWE-73: External Control of File Name or Path\"]\n    \n    cwe22 -->|CANFOLLOW| cwe73\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe22 primary\n    class cwe73 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **improper handling of the OCRLanguage parameter**, leading to **directory traversal** (CWE-22), which allows an attacker to control the files used by Tesseract. This then allows for arbitrary file read and write.\n\n## Summary of Analysis\nThe analysis is based on the provided evidence, specifically the vulnerability description key phrases highlighting \"**directory traversal**\" and the CVE Reference Links Content Summary detailing the **root cause** related to the `OCRLanguage` parameter. The retriever results also strongly suggest CWE-22 as the primary candidate.\n\nCWE-22 is chosen because it directly addresses the **path traversal** issue stemming from the **improper limitation of a pathname to a restricted directory**. This is the **root cause** of the vulnerability, enabling the subsequent arbitrary file operations.\n\nCWE-73 is considered as a secondary candidate since the user input (`OCRLanguage` parameter) influences the file path. However, CWE-22 is a more precise description of the core vulnerability, which is the **failure to properly restrict the pathname**.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## Vulnerability Description\nArtifex Ghostscript before 10.03.1, when Tesseract is used for OCR, has a **directory traversal** issue that allows arbitrary file reading (and writing of error messages to arbitrary files) via OCRLanguage. For example, exploitation can use debug_file /tmp/out and user_patterns_file /etc/passwd.\n\n### Vulnerability Description Key Phrases\n- **weakness:** **directory traversal**\n- **impact:** arbitrary file reading and writing\n- **vector:** OCR input\n- **product:** Artifex Ghostscript\n- **version:** before 10.03.1\n\n## CVE Reference Links Content Summary\nBased on the provided information, here's a breakdown of CVE-2024-29511:\n\n**Root Cause:**\n\nThe vulnerability stems from the way Ghostscript's `ocr` device interacts with Tesseract, an OCR engine. The `OCRLanguage` parameter, used to specify the language for OCR, allows for path traversal. By using a path like `../../../../../tmp/test`, an attacker can force Tesseract to load a language data file from an arbitrary location, such as `/tmp/test.traineddata`, instead of the expected location within the Ghostscript installation. Tesseract `traineddata` files can contain configuration values, `user_patterns_file` and `debug_file` parameters that are used to load a pattern file and write debug information to a given path respectively. An attacker can create a custom traineddata file with these parameters to perform arbitrary file read and write.\n\n**Weaknesses/Vulnerabilities Present:**\n\n1.  **Path Traversal:** The `OCRLanguage` parameter in Ghostscript's `ocr` device does not properly sanitize or validate the provided path, allowing for directory traversal to access arbitrary files.\n2.  **Unvalidated Tesseract Configuration:** Tesseract's configuration files (`traineddata`) include parameters that allow for loading of external files and outputting debug information to arbitrary file paths.\n3.  **Lack of Input Validation/Sanitization**: The combination of these allows an attacker to effectively control which files Tesseract will use and output, leading to arbitrary file read and write.\n\n**Impact of Exploitation:**\n\nAn attacker can achieve arbitrary file read and write capabilities:\n*   **Arbitrary File Read:** By crafting a malicious Tesseract `traineddata` file that specifies a `user_patterns_file`, the attacker can force Tesseract to attempt to load patterns from an arbitrary file (e.g., `/etc/passwd`). The verbose debug output will then contain the contents of that file prefixed by \"Error: failed to insert pattern\".\n*   **Arbitrary File Write:** By crafting a malicious `traineddata` file that specifies a `debug_file`, the attacker can write debug output, which includes contents of the pattern file, to any location the Ghostscript process has write access to.\n\n**Attack Vectors:**\n\n*   The attacker crafts a malicious Tesseract `traineddata` file.\n*   The attacker then crafts a PostScript file using the `ocr` device, specifying `OCRLanguage` with a path traversal to the location of the malicious `traineddata` file.\n*   When Ghostscript processes the PostScript file, it uses the path-traversal-modified `OCRLanguage` parameter to load the malicious `traineddata` file.\n*   Tesseract, based on configuration in the malicious traineddata file, loads and processes the attacker specified `user_patterns_file` and outputs its contents to the attacker specified `debug_file`.\n\n**Required Attacker Capabilities/Position:**\n\n*   The attacker needs the ability to provide a PostScript file that will be processed by Ghostscript with Tesseract support enabled.\n*   The attacker needs to have write access to a location where they can store the malicious `traineddata` file (e.g., `/tmp`).\n*   The attacker needs to be able to specify a path with path traversal through the `OCRLanguage` parameter in the PostScript file to force the use of the malicious Tesseract config.\n*   The attacker needs to have read access to the Ghostscript output file to extract data that was read by the Tesseract library.\n*   Ghostscript must be compiled with Tesseract support.\n\n**Additional Notes**\n\n*   The vulnerability does not lead to Remote Code Execution (RCE) directly, as stated in the changelog, despite being initially stated as a possible RCE vector.\n*   The vulnerability is a partial SAFER sandbox bypass, as it allows for file system access that is normally restricted.\n*   The fix for this vulnerability was included in Ghostscript version 10.03.0.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-119:**\n- 119 (Improper Restriction of Operations within the Bounds of a Memory Buffer) - ROOT\n\n\n**Chain starting from CWE-73:**\n- 73 (External Control of File Name or Path) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "22",
        "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Directory traversal",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "59",
        "name": "Improper Link Resolution Before File Access ('Link Following')",
        "source": "sparse"
      },
      "similarity": 211.8966955828645
    },
    {
      "metadata": {
        "doc_id": "23",
        "name": "Relative Path Traversal",
        "source": "sparse"
      },
      "similarity": 205.75312704188406
    },
    {
      "metadata": {
        "doc_id": "36",
        "name": "Absolute Path Traversal",
        "source": "sparse"
      },
      "similarity": 190.6030768162505
    },
    {
      "metadata": {
        "doc_id": "427",
        "name": "Uncontrolled Search Path Element",
        "source": "sparse"
      },
      "similarity": 188.21225004602587
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "source": "sparse"
      },
      "similarity": 185.98596195789187
    },
    {
      "metadata": {
        "doc_id": "732",
        "name": "Incorrect Permission Assignment for Critical Resource",
        "source": "sparse"
      },
      "similarity": 184.36426506818356
    },
    {
      "metadata": {
        "doc_id": "62",
        "name": "UNIX Hard Link",
        "source": "sparse"
      },
      "similarity": 180.04214675927795
    },
    {
      "metadata": {
        "doc_id": "24",
        "name": "Path Traversal: '../filedir'",
        "type": "Variant",
        "original_content": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize \"../\" sequences that can resolve to a location that is outside of that directory.",
        "keyphrase_source": "weakness:directory traversal",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse",
            "graph"
          ],
          "retriever_count": 3,
          "normalized_scores": {
            "dense": 0.5449316130315527,
            "sparse": 176.368810025837,
            "graph": 1.5343574994668734
          }
        }
      },
      "similarity": 0.5449316130315527
    },
    {
      "doc_id": "363",
      "text": "CWE-363: Race Condition Enabling Link Following",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "363",
        "name": "Race Condition Enabling Link Following",
        "type": "base",
        "original_content": "CWE-363: Race Condition Enabling Link Following",
        "relationships": [
          {
            "source_id": "363",
            "target_id": "59",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "363",
            "target_id": "367",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "59",
            "target_id": "363",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "367",
            "target_id": "363",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "59",
                  "363",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "59"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "59",
                  "363",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "59"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "363",
                  "59",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "59"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-119",
      "CWE-73",
      "CWE-22"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}