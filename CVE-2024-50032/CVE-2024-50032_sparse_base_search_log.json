{
  "method": "sparse_base",
  "query": "In the Linux kernel, the following vulnerability has been resolved rcu/nocb Fix rcuog wake-up from offline softirq After a CPU has set itself offline and before it eventually calls rcutree_report_cpu_dead(), there are still opportunities for callbacks to be enqueued, for example from a softirq. When that happens on NOCB, the rcuog wake-up is deferred through an IPI to an online CPU in order not to call into the scheduler and risk arming the RT-bandwidth after hrtimers have been migrated out and disabled. But performing a synchronized IPI from a softirq is buggy as reported in the following scenario WARNING CPU 1 PID 26 at kernel/smp.c633 smp_call_function_single Modules linked in rcutorture torture CPU 1 UID 0 PID 26 Comm migration/1 Not tainted 6.11.0-rc1-00012-g9139f93209d1 #1 Stopper multi_cpu_stop+0x0/0x320 swake_up_one_online __call_rcu_nocb_wake __call_rcu_common ? rcu_torture_one_read call_timer_fn __run_timers run_timer_softirq handle_softirqs irq_exit_rcu ? tick_handle_periodic sysvec_apic_timer_interrupt Fix this with forcing deferred rcuog wake up through the NOCB timer when the CPU is offline. The actual wake up will happen from rcutree_report_cpu_dead().",
  "keyphrases": {
    "base_query": "In the Linux kernel, the following vulnerability has been resolved rcu/nocb Fix rcuog wake-up from offline softirq After a CPU has set itself offline and before it eventually calls rcutree_report_cpu_dead(), there are still opportunities for callbacks to be enqueued, for example from a softirq. When that happens on NOCB, the rcuog wake-up is deferred through an IPI to an online CPU in order not to call into the scheduler and risk arming the RT-bandwidth after hrtimers have been migrated out and disabled. But performing a synchronized IPI from a softirq is buggy as reported in the following scenario WARNING CPU 1 PID 26 at kernel/smp.c633 smp_call_function_single Modules linked in rcutorture torture CPU 1 UID 0 PID 26 Comm migration/1 Not tainted 6.11.0-rc1-00012-g9139f93209d1 #1 Stopper multi_cpu_stop+0x0/0x320 swake_up_one_online __call_rcu_nocb_wake __call_rcu_common ? rcu_torture_one_read call_timer_fn __run_timers run_timer_softirq handle_softirqs irq_exit_rcu ? tick_handle_periodic sysvec_apic_timer_interrupt Fix this with forcing deferred rcuog wake up through the NOCB timer when the CPU is offline. The actual wake up will happen from rcutree_report_cpu_dead()."
  },
  "timestamp": "2025-07-13T19:46:27.010109",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "400",
      "name": "Uncontrolled Resource Consumption",
      "score": 219.82738403719964
    },
    {
      "doc_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 218.81868021947707
    },
    {
      "doc_id": "863",
      "name": "Incorrect Authorization",
      "score": 212.47410078813684
    },
    {
      "doc_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 212.1201859009661
    },
    {
      "doc_id": "835",
      "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
      "score": 211.2035519441251
    }
  ]
}