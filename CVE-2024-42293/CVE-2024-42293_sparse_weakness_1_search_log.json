{
  "method": "sparse_weakness_1",
  "query": "In the Linux kernel, the following vulnerability has been resolved arm64 mm Fix lockless walks with static and dynamic page-table folding Lina reports random oopsen originating from the fast GUP code when 16K pages are used with 4-level page-tables, the fourth level being folded at runtime due to lack of LPA2. In this configuration, the generic implementation of p4d_offset_lockless() will return a p4d_t * corresponding to the pgd_t allocated on the stack of the caller, gup_fast_pgd_range(). This is normally fine, but when the fourth level of page-table is folded at runtime, pud_offset_lockless() will offset from the address of the p4d_t to calculate the address of the PUD in the same page-table page. This results in a stray stack read when the p4d_t has been allocated on the stack and can send the walker into the weeds. Fix the problem by providing our own definition of p4d_offset_lockless() when CONFIG_PGTABLE_LEVELS <= 4 which returns the real page-table pointer rather than the address of the local stack variable.",
  "keyphrases": {
    "weakness": "stack corruption"
  },
  "timestamp": "2025-07-12T03:41:40.641173",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 822.3303205828628
    },
    {
      "doc_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 797.337635126268
    },
    {
      "doc_id": "125",
      "name": "Out-of-bounds Read",
      "score": 792.1852207128723
    },
    {
      "doc_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "score": 790.330442844914
    },
    {
      "doc_id": "789",
      "name": "Memory Allocation with Excessive Size Value",
      "score": 787.2460446912344
    }
  ]
}