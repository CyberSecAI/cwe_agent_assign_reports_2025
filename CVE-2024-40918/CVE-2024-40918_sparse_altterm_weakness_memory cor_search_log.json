{
  "method": "sparse_altterm_weakness_memory cor",
  "query": "In the Linux kernel, the following vulnerability has been resolved parisc Try to fix random segmentation faults in package builds PA-RISC systems with PA8800 and PA8900 processors have had problems with random segmentation faults for many years. Systems with earlier processors are much more stable. Systems with PA8800 and PA8900 processors have a large L2 cache which needs per page flushing for decent performance when a large range is flushed. The combined cache in these systems is also more sensitive to non-equivalent aliases than the caches in earlier systems. The majority of random segmentation faults that I have looked at appear to be memory corruption in memory allocated using mmap and malloc. My first attempt at fixing the random faults didnt work. On reviewing the cache code, I realized that there were two issues which the existing code didnt handle correctly. Both relate to cache move-in. Another issue is that the present bit in PTEs is racy. 1) PA-RISC caches have a mind of their own and they can speculatively load data and instructions for a page as long as there is a entry in the TLB for the page which allows move-in. TLBs are local to each CPU. Thus, the TLB entry for a page must be purged before flushing the page. This is particularly important on SMP systems. In some of the flush routines, the flush routine would be called and then the TLB entry would be purged. This was because the flush routine needed the TLB entry to do the flush. 2) My initial a",
  "keyphrases": {
    "weakness": "memory corruption"
  },
  "timestamp": "2025-07-13T12:42:15.918845",
  "results_count": 1,
  "results_summary": [
    {
      "doc_id": "787",
      "name": "Out-of-bounds Write",
      "score": 1000.0
    }
  ]
}