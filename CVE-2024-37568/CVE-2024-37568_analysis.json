{
  "cve_id": "CVE-2024-37568",
  "description": "lepture Authlib before 1.3.1 has **algorithm confusion with asymmetric public keys**. Unless an algorithm is specified in a jwt.decode call, HMAC verification is allowed with any asymmetric public key. (This is similar to CVE-2022-29217 and CVE-2024-33663.)",
  "key_phrases": {
    "rootcause": "algorithm confusion with asymmetric public keys",
    "weakness": "",
    "impact": "HMAC verification is allowed with any asymmetric public key",
    "vector": "",
    "attacker": "",
    "product": "lepture Authlib",
    "version": "before 1.3.1",
    "component": ""
  },
  "reference_content": "Based on the provided information, here's an analysis of CVE-2024-37568:\n\n**Root Cause of Vulnerability:**\n\nThe vulnerability stems from a lack of proper algorithm verification in the `jwt.decode` function of the `authlib` library. Specifically, when the `algorithm` parameter is not explicitly specified during JWT decoding, the library permits HMAC verification using asymmetric public keys. This means that an attacker could craft a malicious JWT using a symmetric HMAC algorithm with a public key intended for asymmetric cryptography (e.g. RSA) and successfully have it validated by the vulnerable library.\n\n**Weaknesses/Vulnerabilities Present:**\n\n*   **Algorithm Confusion:** The core issue is the library's failure to distinguish between symmetric (HMAC) and asymmetric (e.g., RSA) key types during JWT verification, leading to the possibility of using a public key as a secret key.\n*   **Missing Algorithm Check:** The library does not enforce or warn about the omission of the `algorithm` parameter in `jwt.decode`, leaving it up to the user to specify, which often leads to insecure configurations.\n*   **Inadequate Key Type Verification:** The library doesn't properly validate whether the provided key is appropriate for the specified algorithm. Specifically it does not check if a key is asymmetric when it's provided to a symmetric algorithm\n\n**Impact of Exploitation:**\n\n*   **Token Forgery:** Attackers can forge valid JWTs by using a public key as a secret key with a symmetric algorithm (like HS256), effectively bypassing the intended security mechanisms, thus allowing them to impersonate legitimate users.\n*   **Unauthorized Access:** By crafting forged tokens, attackers can gain unauthorized access to resources or functionalities protected by JWT-based authentication.\n*  **Privilege Escalation**: Attackers can potentially escalate their privileges by forging JWTs with higher access permissions.\n\n**Attack Vectors:**\n\n*   **Malicious JWT Crafting:** An attacker crafts a JWT using a symmetric HMAC algorithm (e.g., HS256) and signs it using a public key (intended for asymmetric cryptography such as RSA).\n*   **Bypassing Signature Verification:** By leveraging the algorithm confusion, the attacker's crafted JWT bypasses the server's intended verification process.\n\n**Required Attacker Capabilities/Position:**\n\n*   **Knowledge of Public Key:** The attacker needs access to the public key used by the server for asymmetric cryptography. This key is typically public information.\n*   **Ability to Craft JWT:** The attacker must be able to construct a JWT with a chosen payload and the ability to sign the JWT using a symmetric algorithm and the public key as a secret.\n*   **Network Access to Vulnerable System**: The attacker needs to be able to send requests with the forged JWT to the server.\n\n**Additional Information:**\n\n*   The vulnerability affects `authlib` versions prior to 1.3.1.\n*   The issue is also present in the `joserfc` library (Authlib's underlying library for JOSE).\n*   The vulnerability is similar to CVE-2022-29217 and CVE-2024-33663 but has a higher severity because it applies to all verification with asymmetric public keys and not just specific formats.\n*   The fix implemented in version 1.3.1 includes a blocklist of public key formats when verifying with HMAC.\n*   The recommended fix is to make the algorithm field mandatory when decoding or at least throw a warning when not used to prevent this class of vulnerabilties, and ensure the key is appropriate for the algorithm used.\n*  The error message when doing HMAC verification with a public key should be improved to more explicitly state what the problem is.\n\nThe provided information gives more detail than the official CVE description, elaborating on the specifics of the algorithm confusion, the method of exploitation, and the impact of this vulnerability.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-347 | Improper Verification of Cryptographic Signature | 0.9 | Base | Allowed | Primary CWE. The core issue is the library's failure to properly verify cryptographic signatures. |\n| CWE-327 | Use of a Broken or Risky Cryptographic Algorithm | 0.6 | Class | Allowed-with-Review | Secondary Candidate. The library allows algorithm confusion, which effectively uses a broken cryptographic approach. |\n| CWE-303 | Incorrect Implementation of Authentication Algorithm | 0.5 | Base | Allowed | Secondary Candidate. The root cause is the incorrect implementation of the authentication algorithm during JWT decoding. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.7\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-347, which describes the **improper verification of cryptographic signatures**. This is related to other CWEs through hierarchical and chain relationships.\n\n-   CWE-347 is related to CWE-327 (Use of a Broken or Risky Cryptographic Algorithm) because **improper verification** can lead to the use of a broken or risky algorithm.\n-   CWE-347 is related to CWE-303 (Incorrect Implementation of Authentication Algorithm) because the **improper verification** may happen due to an incorrect algorithm implementation.\n-   CWE-327 and CWE-303 are Class and Base level respectively.\n\n```mermaid\ngraph TD\n    cwe347[\"CWE-347: Improper Verification of Cryptographic Signature\"]\n    cwe327[\"CWE-327: Use of a Broken or Risky Cryptographic Algorithm\"]\n    cwe303[\"CWE-303: Incorrect Implementation of Authentication Algorithm\"]\n    \n    cwe347 -->|RELATED| cwe327\n    cwe347 -->|RELATED| cwe303\n    cwe303 -->|CHILDOF| cwe1390[\"CWE-1390: Weak Authentication\"]\n    cwe327 -->|CHILDOF| cwe780[\"CWE-780: Use of RSA Algorithm without OAEP\"]\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe347 primary\n    class cwe327,cwe303 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **algorithm confusion with asymmetric public keys**, leading to **improper verification of cryptographic signatures**, which enables attackers to perform **token forgery** and gain **unauthorized access**.\n\nVulnerability Chain:\n1.  **Algorithm Confusion (Root Cause):** The library fails to properly distinguish between symmetric and asymmetric key types.\n2.  **CWE-347: Improper Verification of Cryptographic Signature:** Due to the algorithm confusion, the cryptographic signature is not properly verified.\n3.  **Token Forgery (Impact):** Attackers can forge valid JWTs by using a public key as a secret key with a symmetric algorithm.\n4.  **Unauthorized Access (Impact):** By crafting forged tokens, attackers can gain unauthorized access to resources or functionalities.\n\n## Summary of Analysis\nThe initial assessment focused on the **algorithm confusion** and its direct impact on signature verification. The primary weakness, CWE-347, captures the essence of the vulnerability: the **improper verification of cryptographic signatures** due to the ability to use asymmetric public keys with symmetric HMAC algorithms.\n\nThe evidence supporting this decision is derived directly from the vulnerability description and CVE reference:\n- \"**algorithm confusion with asymmetric public keys**\"\n- \"HMAC verification is allowed with any asymmetric public key.\"\n- \"The vulnerability stems from a lack of proper algorithm verification in the `jwt.decode` function\"\n- \"The library does not enforce or warn about the omission of the `algorithm` parameter\"\n- \"The library doesn't properly validate whether the provided key is appropriate for the specified algorithm.\"\n- \"Attackers can forge valid JWTs by using a public key as a secret key with a symmetric algorithm\"\n\nThe graph relationships influenced the understanding of how the **improper verification** can lead to related weaknesses such as using broken algorithms or incorrect implementations.\n\nCWE-347 is the most specific and accurate representation of the vulnerability based on the available evidence, capturing the core issue of **improper signature verification** resulting from the algorithm confusion.\n\nOther CWEs Considered but Not Used:\n- CWE-327 (Use of a Broken or Risky Cryptographic Algorithm): Considered as a secondary weakness due to the resulting use of a public key in a symmetric algorithm, which can be viewed as a broken cryptographic approach.\n- CWE-303 (Incorrect Implementation of Authentication Algorithm): Considered as a secondary weakness due to the incorrect implementation of the algorithm verification, enabling the vulnerability.\n- CWE-328 (Use of Weak Hash), CWE-330 (Use of Insufficiently Random Values), CWE-321 (Use of Hard-coded Cryptographic Key), CWE-780 (Use of RSA Algorithm without OAEP): These were not selected as the vulnerability is not about weak hashes, random values or hardcoded keys but about the **improper verification of cryptographic signatures.**\n- CWE-203 (Observable Discrepancy), CWE-208 (Observable Timing Discrepancy), CWE-385 (Covert Timing Channel): These were not selected as the vulnerability is not about timing or observable discrepancies.\n- CWE-325 (Missing Cryptographic Step), CWE-304 (Missing Critical Step in Authentication): These were not selected as the vulnerability is not about a missing step, but an incorrect step.\n- CWE-804 (Guessable CAPTCHA): This was not selected as the vulnerability is not about CAPTCHA.\n- CWE-259 (Use of Hard-coded Password): This was not selected as the vulnerability is not about hard-coded passwords.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-347 | Improper Verification of Cryptographic Signature | 0.9 | Base | Allowed | Primary CWE. The core issue is the library's failure to properly verify cryptographic signatures. |\n| CWE-327 | Use of a Broken or Risky Cryptographic Algorithm | 0.6 | Class | Allowed-with-Review | Secondary Candidate. The library allows algorithm confusion, which effectively uses a broken cryptographic approach. |\n| CWE-303 | Incorrect Implementation of Authentication Algorithm | 0.5 | Base | Allowed | Secondary Candidate. The root cause is the incorrect implementation of the authentication algorithm during JWT decoding. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.7\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-347, which describes the **improper verification of cryptographic signatures**. This is related to other CWEs through hierarchical and chain relationships.\n\n-   CWE-347 is related to CWE-327 (Use of a Broken or Risky Cryptographic Algorithm) because **improper verification** can lead to the use of a broken or risky algorithm.\n-   CWE-347 is related to CWE-303 (Incorrect Implementation of Authentication Algorithm) because the **improper verification** may happen due to an incorrect algorithm implementation.\n-   CWE-327 and CWE-303 are Class and Base level respectively.\n\n```mermaid\ngraph TD\n    cwe347[\"CWE-347: Improper Verification of Cryptographic Signature\"]\n    cwe327[\"CWE-327: Use of a Broken or Risky Cryptographic Algorithm\"]\n    cwe303[\"CWE-303: Incorrect Implementation of Authentication Algorithm\"]\n    \n    cwe347 -->|RELATED| cwe327\n    cwe347 -->|RELATED| cwe303\n    cwe303 -->|CHILDOF| cwe1390[\"CWE-1390: Weak Authentication\"]\n    cwe327 -->|CHILDOF| cwe780[\"CWE-780: Use of RSA Algorithm without OAEP\"]\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe347 primary\n    class cwe327,cwe303 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **algorithm confusion with asymmetric public keys**, leading to **improper verification of cryptographic signatures**, which enables attackers to perform **token forgery** and gain **unauthorized access**.\n\nVulnerability Chain:\n1.  **Algorithm Confusion (Root Cause):** The library fails to properly distinguish between symmetric and asymmetric key types.\n2.  **CWE-347: Improper Verification of Cryptographic Signature:** Due to the algorithm confusion, the cryptographic signature is not properly verified.\n3.  **Token Forgery (Impact):** Attackers can forge valid JWTs by using a public key as a secret key with a symmetric algorithm.\n4.  **Unauthorized Access (Impact):** By crafting forged tokens, attackers can gain unauthorized access to resources or functionalities.\n\n## Summary of Analysis\nThe initial assessment focused on the **algorithm confusion** and its direct impact on signature verification. The primary weakness, CWE-347, captures the essence of the vulnerability: the **improper verification of cryptographic signatures** due to the ability to use asymmetric public keys with symmetric HMAC algorithms.\n\nThe evidence supporting this decision is derived directly from the vulnerability description and CVE reference:\n- \"**algorithm confusion with asymmetric public keys**\"\n- \"HMAC verification is allowed with any asymmetric public key.\"\n- \"The vulnerability stems from a lack of proper algorithm verification in the `jwt.decode` function\"\n- \"The library does not enforce or warn about the omission of the `algorithm` parameter\"\n- \"The library doesn't properly validate whether the provided key is appropriate for the specified algorithm.\"\n- \"Attackers can forge valid JWTs by using a public key as a secret key with a symmetric algorithm\"\n\nThe graph relationships influenced the understanding of how the **improper verification** can lead to related weaknesses such as using broken algorithms or incorrect implementations.\n\nCWE-347 is the most specific and accurate representation of the vulnerability based on the available evidence, capturing the core issue of **improper signature verification** resulting from the algorithm confusion.\n\nOther CWEs Considered but Not Used:\n- CWE-327 (Use of a Broken or Risky Cryptographic Algorithm): Considered as a secondary weakness due to the resulting use of a public key in a symmetric algorithm, which can be viewed as a broken cryptographic approach.\n- CWE-303 (Incorrect Implementation of Authentication Algorithm): Considered as a secondary weakness due to the incorrect implementation of the algorithm verification, enabling the vulnerability.\n- CWE-328 (Use of Weak Hash), CWE-330 (Use of Insufficiently Random Values), CWE-321 (Use of Hard-coded Cryptographic Key), CWE-780 (Use of RSA Algorithm without OAEP): These were not selected as the vulnerability is not about weak hashes, random values or hardcoded keys but about the **improper verification of cryptographic signatures.**\n- CWE-203 (Observable Discrepancy), CWE-208 (Observable Timing Discrepancy), CWE-385 (Covert Timing Channel): These were not selected as the vulnerability is not about timing or observable discrepancies.\n- CWE-325 (Missing Cryptographic Step), CWE-304 (Missing Critical Step in Authentication): These were not selected as the vulnerability is not about a missing step, but an incorrect step.\n- CWE-804 (Guessable CAPTCHA): This was not selected as the vulnerability is not about CAPTCHA.\n- CWE-259 (Use of Hard-coded Password): This was not selected as the vulnerability is not about hard-coded passwords.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-1390:**\n- 1390 (Weak Authentication) - ROOT\n\n\n**Chain starting from CWE-321:**\n- 321 (Use of Hard-coded Cryptographic Key) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "327",
        "name": "Use of a Broken or Risky Cryptographic Algorithm",
        "source": "sparse"
      },
      "similarity": 289.38666579383806
    },
    {
      "metadata": {
        "doc_id": "405",
        "name": "Asymmetric Resource Consumption (Amplification)",
        "source": "sparse"
      },
      "similarity": 282.2977005365823
    },
    {
      "metadata": {
        "doc_id": "325",
        "name": "Missing Cryptographic Step",
        "source": "sparse"
      },
      "similarity": 281.7424665577891
    },
    {
      "metadata": {
        "doc_id": "328",
        "name": "Use of Weak Hash",
        "source": "sparse"
      },
      "similarity": 266.59463072122963
    },
    {
      "metadata": {
        "doc_id": "203",
        "name": "Observable Discrepancy",
        "source": "sparse"
      },
      "similarity": 264.1002000282813
    },
    {
      "metadata": {
        "doc_id": "780",
        "name": "Use of RSA Algorithm without OAEP",
        "source": "sparse"
      },
      "similarity": 258.19507304023347
    },
    {
      "metadata": {
        "doc_id": "330",
        "name": "Use of Insufficiently Random Values",
        "source": "sparse"
      },
      "similarity": 253.21787562336993
    },
    {
      "metadata": {
        "doc_id": "321",
        "name": "Use of Hard-coded Cryptographic Key",
        "source": "sparse"
      },
      "similarity": 252.06386329251865
    },
    {
      "metadata": {
        "doc_id": "304",
        "name": "Missing Critical Step in Authentication",
        "type": "Base",
        "original_content": "The product implements an authentication technique, but it skips a step that weakens the technique.",
        "keyphrase_source": "rootcause:algorithm confusion with asymmetric public keys",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.47719003019982753,
            "graph": 1.4880046567411807
          }
        }
      },
      "similarity": 0.47719003019982753
    },
    {
      "doc_id": "208",
      "text": "Two separate operations in a product require different amounts of time to complete, in a way that is observable to an actor and reveals security-relevant information about the state of the product, such as whether a particular operation was successful or not.",
      "score": 0.47817450002453993,
      "metadata": {
        "doc_id": "208",
        "name": "Observable Timing Discrepancy",
        "type": "Base",
        "extended_description": "In security-relevant contexts, even small variations in timing can be exploited by attackers to indirectly infer certain details about the product's internal operations. For example, in some cryptographic algorithms, attackers can use timing differences to infer certain properties about a private key, making the key easier to guess. Timing discrepancies effectively form a timing side channel.",
        "alternate_terms": [],
        "original_content": "Two separate operations in a product require different amounts of time to complete, in a way that is observable to an actor and reveals security-relevant information about the state of the product, such as whether a particular operation was successful or not.",
        "relationships": [
          {
            "source_id": "208",
            "target_id": "1254",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "208",
            "target_id": "327",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "208",
            "target_id": "385",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "208",
            "target_id": "203",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "385",
            "target_id": "208",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "327",
            "target_id": "208",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "203",
            "target_id": "208",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1254",
            "target_id": "208",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "source": "graph",
        "sources": [
          "vector",
          "graph"
        ],
        "vector_score": 0.47817450002453993,
        "graph_score": 2.8651999999999997,
        "score_components": {
          "relationship_chain": 1.0,
          "abstraction_path": 0.7200000000000001,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "327",
                  "208",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "327"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "203",
                  "208",
                  "PARENTOF"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "abstraction_path_down",
              "source": "203"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "327",
                  "208",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "327"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "208",
                  "327",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "327"
            }
          }
        },
        "abstraction_level": "base",
        "position": "before",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 1.9103898000098156
          }
        }
      },
      "similarity": 1.9103898000098156
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-1390",
      "CWE-321",
      "CWE-259",
      "CWE-203",
      "CWE-327",
      "CWE-330",
      "CWE-780",
      "CWE-804",
      "CWE-347",
      "CWE-303",
      "CWE-208",
      "CWE-385",
      "CWE-328",
      "CWE-304",
      "CWE-325"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}