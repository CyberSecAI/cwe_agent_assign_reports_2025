{
  "method": "sparse_rootcause_1",
  "query": "In the Linux kernel, the following vulnerability has been resolved usb xhci Fix isochronous Ring Underrun/Overrun event handling The TRB pointer of these events points at enqueue at the time of error occurrence on xHCI 1.1+ HCs or its NULL on older ones. By the time we are handling the event, a new TD may be queued at this ring position. I can trigger this race by rising interrupt moderation to increase IRQ handling delay. Similar delay may occur naturally due to system load. If this ever happens after a Missed Service Error, missed TDs will be skipped and the new TD processed as if it matched the event. It could be given back prematurely, risking data loss or buffer UAF by the xHC. Dont complete TDs on xrun events and dont warn if queued TDs dont match the events TRB pointer, which can be NULL or a link/no-op TRB. Dont warn if there are no queued TDs at all. Now that its safe, also handle xrun events if the skip flag is clear. This ensures completion of any TD stuck in error mid TD state right before the xrun event, which could happen if a driver submits a finite number of URBs to a buggy HC and then an error occurs on the last TD.",
  "keyphrases": {
    "rootcause": "race condition"
  },
  "timestamp": "2025-07-12T13:27:20.762892",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 1010.6630225615347
    },
    {
      "doc_id": "364",
      "name": "Signal Handler Race Condition",
      "score": 1007.5525696454283
    },
    {
      "doc_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "score": 923.2560784890784
    },
    {
      "doc_id": "401",
      "name": "Missing Release of Memory after Effective Lifetime",
      "score": 919.0019483958348
    },
    {
      "doc_id": "476",
      "name": "NULL Pointer Dereference",
      "score": 907.424752110812
    }
  ]
}