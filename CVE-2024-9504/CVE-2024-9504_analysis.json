{
  "cve_id": "CVE-2024-9504",
  "description": "The Booking calendar, Appointment Booking System plugin for WordPress is vulnerable to Stored Cross-Site Scripting via SVG File uploads in all versions up to, and including, 3.2.15 due to **insufficient input sanitization and output escaping**. This makes it possible for unauthenticated attackers to inject arbitrary web scripts in pages that will execute whenever a user accesses the SVG file.",
  "key_phrases": {
    "rootcause": "insufficient input sanitization and output escaping",
    "weakness": "cross-site scripting",
    "impact": [
      "execute arbitrary web scripts",
      "inject arbitrary web scripts"
    ],
    "vector": "SVG File uploads",
    "attacker": "unauthenticated attackers",
    "product": [
      "Booking calendar",
      "Appointment Booking System WordPress plugin"
    ],
    "version": "all versions up to 3.2.15",
    "component": ""
  },
  "reference_content": "Based on the provided content, here's a breakdown of the vulnerability associated with CVE-2024-9504:\n\n**Root Cause:**\nThe root cause of the vulnerability lies in the insufficient input sanitization and output escaping within the \"Booking calendar, Appointment Booking System\" WordPress plugin. Specifically, the plugin allows unrestricted uploads of files with dangerous types (SVG), which can then be used to inject malicious scripts.\n\n**Weaknesses/Vulnerabilities Present:**\n*   **Unrestricted File Upload:** The plugin does not properly validate or restrict file types during the upload process, allowing the upload of SVG files.\n*   **Stored Cross-Site Scripting (XSS):** By allowing the upload of malicious SVG files, attackers can inject arbitrary web scripts that are stored on the server. These scripts will execute whenever a user accesses the uploaded SVG file.\n*   **Insufficient Sanitization:** The plugin does not adequately sanitize the content of uploaded SVG files, failing to remove potentially malicious script tags or other executable content.\n\n**Impact of Exploitation:**\nSuccessful exploitation of this vulnerability can lead to:\n*   **Arbitrary Code Execution:** An attacker can inject arbitrary web scripts that will execute in the context of the user's browser when they access the malicious SVG file.\n*   **Session Hijacking:** Attackers could potentially steal user session cookies or other sensitive information by injecting malicious JavaScript code into the SVG files, which could result in account compromise.\n*  **Malicious Redirects:** An attacker could redirect users to a malicious website through JavaScript injection within the SVG file.\n\n**Attack Vectors:**\n*   **File Upload:** The attack vector is through the file upload functionality within the plugin.\n*  **Unauthenticated Access:** The vulnerable function is accessible via an AJAX action that does not require user authentication, allowing unauthenticated attackers to exploit the vulnerability.\n*   **SVG File Injection:** The attacker uploads a specially crafted SVG file containing malicious JavaScript code.\n*   **User Interaction**: The malicious script executes when a user accesses the uploaded SVG file, triggering the XSS.\n\n**Required Attacker Capabilities/Position:**\n*   **No Authentication Required:** The attacker does not need any user credentials or specific privileges to exploit the vulnerability.\n*   **Network Access:** The attacker only needs network access to the vulnerable WordPress site.\n*   **Knowledge of Vulnerable Plugin:** The attacker needs to be aware of the vulnerable plugin and its file upload functionality.\n*   **Ability to Craft Malicious SVG File:** The attacker needs the ability to create an SVG file with a malicious JavaScript payload.\n\n**Additional Notes:**\n\n*   The vulnerability was found by grepping through WordPress plugins to find insecure file types in whitelists, using the regex `svg.*png`.\n*   The vulnerable function is `save_reserv` which is called via the `wpdevart_form_ajax` AJAX action, which is accessible to non-authenticated users.\n*   The vulnerability was patched in version 3.2.16 of the plugin with the addition of a `sanitizeSvgContent` function that attempts to strip potentially malicious elements from uploaded SVG files using regular expressions. However, this is not a comprehensive security solution and might still be bypassed.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 1.0 | Base | Primary | Allowed |\n| CWE-434 | Unrestricted Upload of File with Dangerous Type | 0.9 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.95\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship is that **insufficient input sanitization** (leading to CWE-79) can be caused by allowing **unrestricted file uploads** (CWE-434). CWE-79 is a child of CWE-20 (Improper Input Validation), indicating a more general class of input handling errors. CWE-434 can lead to CWE-79 if the uploaded file is not properly sanitized before being served.\n\n```mermaid\ngraph TD\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    cwe434[\"CWE-434: Unrestricted Upload of File with Dangerous Type\"]\n    cwe20[\"CWE-20: Improper Input Validation\"]\n\n    cwe79 -->|CHILDOF| cwe20\n    cwe434 -->|CANPRECEDE| cwe79\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe79 primary\n    class cwe434 secondary\n    class cwe20 tertiary\n```\n\n## Vulnerability Chain\n1.  **Unrestricted File Upload (CWE-434):** The application allows the upload of SVG files without proper validation.\n2.  **Insufficient Input Sanitization (CWE-79):** The SVG file is not properly sanitized, allowing malicious scripts to be embedded.\n3.  **Stored Cross-Site Scripting (CWE-79):** When a user accesses the SVG file, the malicious script is executed in their browser.\n\nRoot Cause: CWE-434 and CWE-79\nImpact: Stored Cross-Site Scripting\n\n## Summary of Analysis\nThe vulnerability is a Stored Cross-Site Scripting (XSS) vulnerability due to **insufficient input sanitization and output escaping** in the Booking calendar, Appointment Booking System plugin for WordPress. The plugin allows unauthenticated attackers to upload SVG files containing malicious scripts, which are then executed when a user accesses the file.\n\nThe primary CWE is CWE-79 (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')), as the core issue is the lack of proper sanitization of user-supplied input (the SVG file content) before it is rendered in a web page. The vulnerability description clearly states **\"insufficient input sanitization and output escaping\"**.\n\nThe secondary CWE is CWE-434 (Unrestricted Upload of File with Dangerous Type), which describes the ability to upload dangerous file types (SVG) that are automatically processed within the environment. This contributes to the vulnerability by allowing attackers to upload malicious files in the first place. The \"CVE Reference Links Content Summary\" section provides solid evidence of this weakness: \"The plugin allows unrestricted uploads of files with dangerous types (SVG), which can then be used to inject malicious scripts.\"\n\nCWE-79 directly addresses the XSS issue, while CWE-434 represents the precursor condition that enables the XSS vulnerability.\n\nOther CWEs Considered:\n\n*   CWE-116 (Improper Encoding or Escaping of Output): While related to XSS, the primary issue is the lack of sanitization rather than encoding/escaping problems.\n*   CWE-352 (Cross-Site Request Forgery (CSRF)): Not applicable as the vulnerability doesn't involve forging requests.\n*   CWE-425 (Direct Request ('Forced Browsing')): Not applicable as the vulnerability doesn't involve bypassing authorization checks to access restricted resources.\n\nBased on the evidence and relationship analysis, CWE-79 and CWE-434 are the most appropriate CWEs for this vulnerability. They accurately reflect the root cause and contributing factors, and are at the appropriate level of specificity.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 1.0 | Base | Primary | Allowed |\n| CWE-434 | Unrestricted Upload of File with Dangerous Type | 0.9 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.95\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship is that **insufficient input sanitization** (leading to CWE-79) can be caused by allowing **unrestricted file uploads** (CWE-434). CWE-79 is a child of CWE-20 (Improper Input Validation), indicating a more general class of input handling errors. CWE-434 can lead to CWE-79 if the uploaded file is not properly sanitized before being served.\n\n```mermaid\ngraph TD\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    cwe434[\"CWE-434: Unrestricted Upload of File with Dangerous Type\"]\n    cwe20[\"CWE-20: Improper Input Validation\"]\n\n    cwe79 -->|CHILDOF| cwe20\n    cwe434 -->|CANPRECEDE| cwe79\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe79 primary\n    class cwe434 secondary\n    class cwe20 tertiary\n```\n\n## Vulnerability Chain\n1.  **Unrestricted File Upload (CWE-434):** The application allows the upload of SVG files without proper validation.\n2.  **Insufficient Input Sanitization (CWE-79):** The SVG file is not properly sanitized, allowing malicious scripts to be embedded.\n3.  **Stored Cross-Site Scripting (CWE-79):** When a user accesses the SVG file, the malicious script is executed in their browser.\n\nRoot Cause: CWE-434 and CWE-79\nImpact: Stored Cross-Site Scripting\n\n## Summary of Analysis\nThe vulnerability is a Stored Cross-Site Scripting (XSS) vulnerability due to **insufficient input sanitization and output escaping** in the Booking calendar, Appointment Booking System plugin for WordPress. The plugin allows unauthenticated attackers to upload SVG files containing malicious scripts, which are then executed when a user accesses the file.\n\nThe primary CWE is CWE-79 (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')), as the core issue is the lack of proper sanitization of user-supplied input (the SVG file content) before it is rendered in a web page. The vulnerability description clearly states **\"insufficient input sanitization and output escaping\"**.\n\nThe secondary CWE is CWE-434 (Unrestricted Upload of File with Dangerous Type), which describes the ability to upload dangerous file types (SVG) that are automatically processed within the environment. This contributes to the vulnerability by allowing attackers to upload malicious files in the first place. The \"CVE Reference Links Content Summary\" section provides solid evidence of this weakness: \"The plugin allows unrestricted uploads of files with dangerous types (SVG), which can then be used to inject malicious scripts.\"\n\nCWE-79 directly addresses the XSS issue, while CWE-434 represents the precursor condition that enables the XSS vulnerability.\n\nOther CWEs Considered:\n\n*   CWE-116 (Improper Encoding or Escaping of Output): While related to XSS, the primary issue is the lack of sanitization rather than encoding/escaping problems.\n*   CWE-352 (Cross-Site Request Forgery (CSRF)): Not applicable as the vulnerability doesn't involve forging requests.\n*   CWE-425 (Direct Request ('Forced Browsing')): Not applicable as the vulnerability doesn't involve bypassing authorization checks to access restricted resources.\n\nBased on the evidence and relationship analysis, CWE-79 and CWE-434 are the most appropriate CWEs for this vulnerability. They accurately reflect the root cause and contributing factors, and are at the appropriate level of specificity.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-116:**\n- 116 (Improper Encoding or Escaping of Output) - ROOT\n\n\n**Chain starting from CWE-79:**\n- 79 (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse"
      },
      "similarity": 456.49397232258025
    },
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse"
      },
      "similarity": 436.9770636196307
    },
    {
      "metadata": {
        "doc_id": "138",
        "name": "Improper Neutralization of Special Elements",
        "source": "sparse"
      },
      "similarity": 427.2553570760541
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 404.3116615835738
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "source": "sparse"
      },
      "similarity": 367.1421873236659
    },
    {
      "metadata": {
        "doc_id": "862",
        "name": "Missing Authorization",
        "source": "sparse"
      },
      "similarity": 349.92606384036594
    },
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "sparse"
      },
      "similarity": 348.0331944956758
    },
    {
      "metadata": {
        "doc_id": "93",
        "name": "Improper Neutralization of CRLF Sequences ('CRLF Injection')",
        "source": "sparse"
      },
      "similarity": 332.61009483468473
    },
    {
      "metadata": {
        "doc_id": "1336",
        "name": "Improper Neutralization of Special Elements Used in a Template Engine",
        "type": "Base",
        "original_content": "The product uses a template engine to insert or process externally-influenced input, but it does not neutralize or incorrectly neutralizes special elements or syntax that can be interpreted as template expressions or other code directives when processed by the engine.",
        "keyphrase_source": "rootcause:insufficient input sanitization",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5025634196702495,
            "graph": 1.6128120613474706
          }
        }
      },
      "similarity": 0.5025634196702495
    },
    {
      "doc_id": "73",
      "text": "CWE-73: External Control of File Name or Path",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "73",
        "name": "External Control of File Name or Path",
        "type": "base",
        "original_content": "CWE-73: External Control of File Name or Path",
        "relationships": [
          {
            "source_id": "73",
            "target_id": "114",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "59",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "434",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "41",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "22",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "20",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "700"
            }
          },
          {
            "source_id": "73",
            "target_id": "610",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "642",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "99",
            "target_id": "73",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "642",
            "target_id": "73",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "610",
            "target_id": "73",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "59",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "41",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "22",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "20",
            "target_id": "73",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "700"
            }
          },
          {
            "source_id": "114",
            "target_id": "73",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "434",
                  "73",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "434"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "434",
                  "73",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "434"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "73",
                  "434",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "434"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-116",
      "CWE-79",
      "CWE-352",
      "CWE-20",
      "CWE-425",
      "CWE-434"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}