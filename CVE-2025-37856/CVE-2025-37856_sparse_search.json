{
  "retriever": "sparse",
  "query": "In the Linux kernel, the following vulnerability has been resolved btrfs harden block_groupbg_list against list_del() races As far as I can tell, these calls of list_del_init() on bg_list cannot run concurrently with btrfs_mark_bg_unused() or btrfs_mark_bg_to_reclaim(), as they are in transaction error paths and situations where the block group is readonly. However, if there is any chance at all of racing with mark_bg_unused(), or a different future user of bg_list, better to be safe than sorry. Otherwise we risk the following interleaving (bg_list refcount in parens) T1 (some random op) T2 (btrfs_mark_bg_unused) !list_empty(&bg->bg_list) (1) list_del_init(&bg->bg_list) (1) list_move_tail (1) btrfs_put_block_group (0) btrfs_delete_unused_bgs bg = list_first_entry list_del_init(&bg->bg_list) btrfs_put_block_group(bg) (-1) Ultimately, this results in a broken ref count that hits zero one deref early and the real final deref underflows the refcount, resulting in a WARNING.",
  "keyphrases": {
    "rootcause": [
      "races with list_del()"
    ],
    "weakness": [
      "double free"
    ]
  },
  "timestamp": "2025-07-14 21:39:22",
  "cve_id": "CVE-2025-37856",
  "result_count": 12,
  "results": [
    {
      "cwe_id": "617",
      "name": "Reachable Assertion",
      "score": 516.6661002624345,
      "search_source": "rootcause:races with list_del()"
    },
    {
      "cwe_id": "328",
      "name": "Use of Weak Hash",
      "score": 514.3101186303704,
      "search_source": "rootcause:races with list_del()"
    },
    {
      "cwe_id": "415",
      "name": "Double Free",
      "score": 513.410807825295,
      "search_source": "rootcause:races with list_del()"
    },
    {
      "cwe_id": "59",
      "name": "Improper Link Resolution Before File Access ('Link Following')",
      "score": 505.351776377073,
      "search_source": "rootcause:races with list_del()"
    },
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "score": 504.1646624685887,
      "search_source": "rootcause:races with list_del()"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 503.53190169253014,
      "search_source": "rootcause:races with list_del()"
    },
    {
      "cwe_id": "923",
      "name": "Improper Restriction of Communication Channel to Intended Endpoints",
      "score": 499.3912916789948,
      "search_source": "rootcause:races with list_del()"
    },
    {
      "cwe_id": "918",
      "name": "Server-Side Request Forgery (SSRF)",
      "score": 496.1244466294356,
      "search_source": "rootcause:races with list_del()"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 495.281761125029,
      "search_source": "rootcause:races with list_del()"
    },
    {
      "cwe_id": "212",
      "name": "Improper Removal of Sensitive Information Before Storage or Transfer",
      "score": 494.3486546583625,
      "search_source": "rootcause:races with list_del()"
    },
    {
      "cwe_id": "364",
      "name": "Signal Handler Race Condition",
      "score": 464.3286204048719,
      "search_source": "weakness:double free"
    },
    {
      "cwe_id": "335",
      "name": "Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG)",
      "score": 460.5941345228249,
      "search_source": "weakness:double free"
    }
  ]
}