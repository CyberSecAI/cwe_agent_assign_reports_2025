{
  "method": "sparse_rootcause_1",
  "query": "In the Linux kernel, the following vulnerability has been resolved md/md-bitmap Synchronize bitmap_get_stats() with bitmap lifetime After commit ec6bb299c7c3 (md/md-bitmap add sync_size into struct md_bitmap_stats), following panic is reported Oops general protection fault, probably for non-canonical address RIP 0010bitmap_get_stats+0x2b/0xa0 Call Trace md_seq_show+0x2d2/0x5b0 seq_read_iter+0x2b9/0x470 seq_read+0x12f/0x180 proc_reg_read+0x57/0xb0 vfs_read+0xf6/0x380 ksys_read+0x6c/0xf0 do_syscall_64+0x82/0x170 entry_SYSCALL_64_after_hwframe+0x76/0x7e Root cause is that bitmap_get_stats() can be called at anytime if mddev is still there, even if bitmap is destroyed, or not fully initialized. Deferenceing bitmap in this case can crash the kernel. Meanwhile, the above commit start to deferencing bitmap->storage, make the problem easier to trigger. Fix the problem by protecting bitmap_get_stats() with bitmap_info.mutex.",
  "keyphrases": {
    "rootcause": "Dereference bitmap in a destroyed"
  },
  "timestamp": "2025-07-12T09:53:40.518293",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "909",
      "name": "Missing Initialization of Resource",
      "score": 573.3230860757969
    },
    {
      "doc_id": "908",
      "name": "Use of Uninitialized Resource",
      "score": 476.90408223200114
    },
    {
      "doc_id": "667",
      "name": "Improper Locking",
      "score": 455.2446396369009
    },
    {
      "doc_id": "665",
      "name": "Improper Initialization",
      "score": 450.6558151768769
    },
    {
      "doc_id": "911",
      "name": "Improper Update of Reference Count",
      "score": 448.2254990873879
    }
  ]
}