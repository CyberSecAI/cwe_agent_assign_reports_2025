{
  "cve_id": "CVE-2025-1288",
  "description": "The WOOEXIM WordPress plugin through 5.0.0 **does not have CSRF check** in some places, and is missing **sanitisation** as well as escaping, which could allow attackers to make an unauthenticated user vulnerable to reflected XSS via a CSRF attack.",
  "key_phrases": {
    "rootcause": "does not have CSRF check",
    "weakness": [
      "missing CSRF check",
      "and escaping",
      "sanitisation"
    ],
    "impact": "make an unauthenticated user vulnerable to reflected XSS",
    "vector": "",
    "attacker": "attackers",
    "product": "WOOEXIM WordPress plugin",
    "version": "through 5.0.0",
    "component": ""
  },
  "reference_content": "## CVE-2025-1288 Analysis\n\nThe provided content is directly related to CVE-2025-1288. It provides significantly more detail than the placeholder CVE description.\n\n**Root cause of vulnerability:**\n\nThe plugin lacks CSRF checks in certain areas and has insufficient sanitization and escaping of user input.\n\n**Weaknesses/vulnerabilities present:**\n\n*   Cross-Site Scripting (XSS) - Reflected\n*   Cross-Site Request Forgery (CSRF)\n\n**Impact of exploitation:**\n\nAn attacker can make an unauthenticated user vulnerable to reflected XSS via a CSRF attack.\n\n**Attack vectors:**\n\n*   An attacker crafts a malicious HTML form and tricks a user into opening it.\n*   The form submits a POST request to `http://example.com/wp-content/plugins/wooexim/inc/wooexim-import-result.php` with a crafted payload.\n\n**Required attacker capabilities/position:**\n\n*   The attacker does not need to be authenticated.\n*   The attacker needs to be able to trick a user into opening a malicious link/form.\n\n**Mitigation or fix:**\n\nThe content states \"No known fix\" as of the provided date.  The vulnerability requires implementing CSRF protection and proper input sanitization and output escaping.\n\n**Additional Details:**\n\n*   **Affected Plugin:** wooexim <= 5.0.0\n*   **CVSS Score:** 4.7 (Medium)\n*   **Researcher:** Hassan Khan Yusufzai - Splint3r7\n*   **WPVDB ID:** 175af35d-6972-42c9-b7ac-913ce1fbac64\n*   **Published Date:** 2025-01-02\n*   **Publicly Published:** 2025-01-02\n*   **Last Updated:** 2025-02-20",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID  | CWE Name                                                                                  | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :------------------------------------------------------------------------------------------ | :---------- | :---------------------- | :------------------------------ | :------------------------------ |\n| CWE-352   | Cross-Site Request Forgery (CSRF)                                                           | 1.0         | Compound                | Primary                         | Allowed                         |\n| CWE-79    | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')        | 0.9         | Base                    | Secondary                       | Allowed                         |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.95\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is **CWE-352** Cross-Site Request Forgery (CSRF). This is because the vulnerability description explicitly states that the plugin **does not have CSRF check**. The secondary weakness is **CWE-79** Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'), which is due to **missing sanitisation** and escaping. **CWE-352** can lead to actions performed on behalf of the user without their consent, and **CWE-79** allows for the injection of malicious scripts into web pages viewed by other users.\n\n```mermaid\ngraph TD\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n\n    cwe79 -->|CANFOLLOW| cwe352\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe352 primary\n    class cwe79 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **missing CSRF check** (**CWE-352**), which allows an attacker to craft malicious requests. Because of the **missing sanitisation** and escaping (**CWE-79**), these requests can inject malicious scripts, leading to reflected XSS.\n\n## Summary of Analysis\nThe primary root cause is the **missing CSRF check** (**CWE-352**), as highlighted in the vulnerability description. The lack of **sanitisation** and escaping (**CWE-79**) exacerbates the issue, allowing for reflected XSS. Both weaknesses are explicitly mentioned in the description, providing a strong basis for their classification. The relationship analysis supports the selection of these CWEs, with **CWE-352** being the primary weakness that enables the reflected XSS attack.\n\nThe vulnerability description states, \"The WOOEXIM WordPress plugin through 5.0.0 **does not have CSRF check** in some places, and is **missing sanitisation** as well as escaping, which could allow attackers to make an unauthenticated user vulnerable to reflected XSS via a CSRF attack.\"\n\nThe selected CWEs are at the optimal level of specificity, with **CWE-352** being a Compound weakness that accurately represents the **missing CSRF check**, and **CWE-79** being a Base weakness that describes the **improper neutralization** of input. Other CWEs were considered, such as **CWE-862**, but they were not as directly supported by the evidence in the description as **CWE-352** and **CWE-79**.",
  "analysis_with_relationships": "# Summary\n| CWE ID  | CWE Name                                                                                  | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :------------------------------------------------------------------------------------------ | :---------- | :---------------------- | :------------------------------ | :------------------------------ |\n| CWE-352   | Cross-Site Request Forgery (CSRF)                                                           | 1.0         | Compound                | Primary                         | Allowed                         |\n| CWE-79    | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')        | 0.9         | Base                    | Secondary                       | Allowed                         |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.95\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is **CWE-352** Cross-Site Request Forgery (CSRF). This is because the vulnerability description explicitly states that the plugin **does not have CSRF check**. The secondary weakness is **CWE-79** Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'), which is due to **missing sanitisation** and escaping. **CWE-352** can lead to actions performed on behalf of the user without their consent, and **CWE-79** allows for the injection of malicious scripts into web pages viewed by other users.\n\n```mermaid\ngraph TD\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n\n    cwe79 -->|CANFOLLOW| cwe352\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe352 primary\n    class cwe79 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **missing CSRF check** (**CWE-352**), which allows an attacker to craft malicious requests. Because of the **missing sanitisation** and escaping (**CWE-79**), these requests can inject malicious scripts, leading to reflected XSS.\n\n## Summary of Analysis\nThe primary root cause is the **missing CSRF check** (**CWE-352**), as highlighted in the vulnerability description. The lack of **sanitisation** and escaping (**CWE-79**) exacerbates the issue, allowing for reflected XSS. Both weaknesses are explicitly mentioned in the description, providing a strong basis for their classification. The relationship analysis supports the selection of these CWEs, with **CWE-352** being the primary weakness that enables the reflected XSS attack.\n\nThe vulnerability description states, \"The WOOEXIM WordPress plugin through 5.0.0 **does not have CSRF check** in some places, and is **missing sanitisation** as well as escaping, which could allow attackers to make an unauthenticated user vulnerable to reflected XSS via a CSRF attack.\"\n\nThe selected CWEs are at the optimal level of specificity, with **CWE-352** being a Compound weakness that accurately represents the **missing CSRF check**, and **CWE-79** being a Base weakness that describes the **improper neutralization** of input. Other CWEs were considered, such as **CWE-862**, but they were not as directly supported by the evidence in the description as **CWE-352** and **CWE-79**.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-352:**\n- 352 (Cross-Site Request Forgery (CSRF)) - ROOT\n\n\n**Chain starting from CWE-79:**\n- 79 (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse",
        "original_content": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
        "keyphrase_sources": [
          {
            "id": "rootcause:does not have CSRF check",
            "keyphrase": "does not have CSRF check",
            "type": "rootcause"
          },
          {
            "id": "weakness:missing CSRF check",
            "keyphrase": "missing CSRF check",
            "type": "weakness"
          },
          {
            "id": "weakness:and escaping",
            "keyphrase": "and escaping",
            "type": "weakness"
          },
          {
            "id": "weakness:sanitisation",
            "keyphrase": "sanitisation",
            "type": "weakness"
          },
          {
            "id": "impact:make an unauthenticated user vulnerable to reflected XSS",
            "keyphrase": "make an unauthenticated user vulnerable to reflected XSS",
            "type": "impact"
          },
          {
            "id": "attacker:attackers",
            "keyphrase": "attackers",
            "type": "attacker"
          },
          {
            "id": "product:WOOEXIM WordPress plugin",
            "keyphrase": "WOOEXIM WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:through 5.0.0",
            "keyphrase": "through 5.0.0",
            "type": "version"
          }
        ]
      },
      "similarity": 496.7084106938715
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse",
        "original_content": "The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.",
        "keyphrase_sources": [
          {
            "id": "rootcause:does not have CSRF check",
            "keyphrase": "does not have CSRF check",
            "type": "rootcause"
          },
          {
            "id": "weakness:missing CSRF check",
            "keyphrase": "missing CSRF check",
            "type": "weakness"
          },
          {
            "id": "weakness:and escaping",
            "keyphrase": "and escaping",
            "type": "weakness"
          },
          {
            "id": "weakness:sanitisation",
            "keyphrase": "sanitisation",
            "type": "weakness"
          },
          {
            "id": "impact:make an unauthenticated user vulnerable to reflected XSS",
            "keyphrase": "make an unauthenticated user vulnerable to reflected XSS",
            "type": "impact"
          },
          {
            "id": "attacker:attackers",
            "keyphrase": "attackers",
            "type": "attacker"
          },
          {
            "id": "product:WOOEXIM WordPress plugin",
            "keyphrase": "WOOEXIM WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:through 5.0.0",
            "keyphrase": "through 5.0.0",
            "type": "version"
          }
        ]
      },
      "similarity": 377.3123576600793
    },
    {
      "metadata": {
        "doc_id": "862",
        "name": "Missing Authorization",
        "source": "sparse",
        "original_content": "The product does not perform an authorization check when an actor attempts to access a resource or perform an action.",
        "keyphrase_sources": [
          {
            "id": "rootcause:does not have CSRF check",
            "keyphrase": "does not have CSRF check",
            "type": "rootcause"
          },
          {
            "id": "weakness:missing CSRF check",
            "keyphrase": "missing CSRF check",
            "type": "weakness"
          },
          {
            "id": "weakness:and escaping",
            "keyphrase": "and escaping",
            "type": "weakness"
          },
          {
            "id": "weakness:sanitisation",
            "keyphrase": "sanitisation",
            "type": "weakness"
          },
          {
            "id": "impact:make an unauthenticated user vulnerable to reflected XSS",
            "keyphrase": "make an unauthenticated user vulnerable to reflected XSS",
            "type": "impact"
          },
          {
            "id": "attacker:attackers",
            "keyphrase": "attackers",
            "type": "attacker"
          },
          {
            "id": "product:WOOEXIM WordPress plugin",
            "keyphrase": "WOOEXIM WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:through 5.0.0",
            "keyphrase": "through 5.0.0",
            "type": "version"
          }
        ]
      },
      "similarity": 376.61239535391866
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "source": "sparse",
        "original_content": "The product allows the upload or transfer of dangerous file types that are automatically processed within its environment.",
        "keyphrase_sources": [
          {
            "id": "rootcause:does not have CSRF check",
            "keyphrase": "does not have CSRF check",
            "type": "rootcause"
          },
          {
            "id": "weakness:missing CSRF check",
            "keyphrase": "missing CSRF check",
            "type": "weakness"
          },
          {
            "id": "weakness:sanitisation",
            "keyphrase": "sanitisation",
            "type": "weakness"
          },
          {
            "id": "attacker:attackers",
            "keyphrase": "attackers",
            "type": "attacker"
          },
          {
            "id": "product:WOOEXIM WordPress plugin",
            "keyphrase": "WOOEXIM WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:through 5.0.0",
            "keyphrase": "through 5.0.0",
            "type": "version"
          }
        ]
      },
      "similarity": 337.46758272443276
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse",
        "original_content": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
        "keyphrase_sources": [
          {
            "id": "rootcause:does not have CSRF check",
            "keyphrase": "does not have CSRF check",
            "type": "rootcause"
          },
          {
            "id": "weakness:missing CSRF check",
            "keyphrase": "missing CSRF check",
            "type": "weakness"
          },
          {
            "id": "weakness:and escaping",
            "keyphrase": "and escaping",
            "type": "weakness"
          },
          {
            "id": "impact:make an unauthenticated user vulnerable to reflected XSS",
            "keyphrase": "make an unauthenticated user vulnerable to reflected XSS",
            "type": "impact"
          },
          {
            "id": "attacker:attackers",
            "keyphrase": "attackers",
            "type": "attacker"
          },
          {
            "id": "version:through 5.0.0",
            "keyphrase": "through 5.0.0",
            "type": "version"
          }
        ]
      },
      "similarity": 300.2564170352215
    },
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "sparse",
        "original_content": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
        "keyphrase_sources": [
          {
            "id": "weakness:and escaping",
            "keyphrase": "and escaping",
            "type": "weakness"
          },
          {
            "id": "weakness:sanitisation",
            "keyphrase": "sanitisation",
            "type": "weakness"
          },
          {
            "id": "impact:make an unauthenticated user vulnerable to reflected XSS",
            "keyphrase": "make an unauthenticated user vulnerable to reflected XSS",
            "type": "impact"
          }
        ]
      },
      "similarity": 261.78162339695433
    },
    {
      "metadata": {
        "doc_id": "425",
        "name": "Direct Request ('Forced Browsing')",
        "source": "sparse",
        "original_content": "The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.",
        "keyphrase_sources": [
          {
            "id": "product:WOOEXIM WordPress plugin",
            "keyphrase": "WOOEXIM WordPress plugin",
            "type": "product"
          }
        ]
      },
      "similarity": 95.5338425425817
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-352",
      "CWE-79",
      "CWE-862"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {
    "352": [
      {
        "id": "rootcause:does not have CSRF check",
        "keyphrase": "does not have CSRF check",
        "type": "rootcause"
      },
      {
        "id": "weakness:missing CSRF check",
        "keyphrase": "missing CSRF check",
        "type": "weakness"
      },
      {
        "id": "weakness:and escaping",
        "keyphrase": "and escaping",
        "type": "weakness"
      },
      {
        "id": "weakness:sanitisation",
        "keyphrase": "sanitisation",
        "type": "weakness"
      },
      {
        "id": "impact:make an unauthenticated user vulnerable to reflected XSS",
        "keyphrase": "make an unauthenticated user vulnerable to reflected XSS",
        "type": "impact"
      },
      {
        "id": "attacker:attackers",
        "keyphrase": "attackers",
        "type": "attacker"
      },
      {
        "id": "product:WOOEXIM WordPress plugin",
        "keyphrase": "WOOEXIM WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:through 5.0.0",
        "keyphrase": "through 5.0.0",
        "type": "version"
      }
    ],
    "116": [
      {
        "id": "rootcause:does not have CSRF check",
        "keyphrase": "does not have CSRF check",
        "type": "rootcause"
      },
      {
        "id": "weakness:missing CSRF check",
        "keyphrase": "missing CSRF check",
        "type": "weakness"
      },
      {
        "id": "weakness:and escaping",
        "keyphrase": "and escaping",
        "type": "weakness"
      },
      {
        "id": "weakness:sanitisation",
        "keyphrase": "sanitisation",
        "type": "weakness"
      },
      {
        "id": "impact:make an unauthenticated user vulnerable to reflected XSS",
        "keyphrase": "make an unauthenticated user vulnerable to reflected XSS",
        "type": "impact"
      },
      {
        "id": "attacker:attackers",
        "keyphrase": "attackers",
        "type": "attacker"
      },
      {
        "id": "product:WOOEXIM WordPress plugin",
        "keyphrase": "WOOEXIM WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:through 5.0.0",
        "keyphrase": "through 5.0.0",
        "type": "version"
      }
    ],
    "862": [
      {
        "id": "rootcause:does not have CSRF check",
        "keyphrase": "does not have CSRF check",
        "type": "rootcause"
      },
      {
        "id": "weakness:missing CSRF check",
        "keyphrase": "missing CSRF check",
        "type": "weakness"
      },
      {
        "id": "weakness:and escaping",
        "keyphrase": "and escaping",
        "type": "weakness"
      },
      {
        "id": "weakness:sanitisation",
        "keyphrase": "sanitisation",
        "type": "weakness"
      },
      {
        "id": "impact:make an unauthenticated user vulnerable to reflected XSS",
        "keyphrase": "make an unauthenticated user vulnerable to reflected XSS",
        "type": "impact"
      },
      {
        "id": "attacker:attackers",
        "keyphrase": "attackers",
        "type": "attacker"
      },
      {
        "id": "product:WOOEXIM WordPress plugin",
        "keyphrase": "WOOEXIM WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:through 5.0.0",
        "keyphrase": "through 5.0.0",
        "type": "version"
      }
    ],
    "434": [
      {
        "id": "rootcause:does not have CSRF check",
        "keyphrase": "does not have CSRF check",
        "type": "rootcause"
      },
      {
        "id": "weakness:missing CSRF check",
        "keyphrase": "missing CSRF check",
        "type": "weakness"
      },
      {
        "id": "weakness:sanitisation",
        "keyphrase": "sanitisation",
        "type": "weakness"
      },
      {
        "id": "attacker:attackers",
        "keyphrase": "attackers",
        "type": "attacker"
      },
      {
        "id": "product:WOOEXIM WordPress plugin",
        "keyphrase": "WOOEXIM WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:through 5.0.0",
        "keyphrase": "through 5.0.0",
        "type": "version"
      }
    ],
    "79": [
      {
        "id": "rootcause:does not have CSRF check",
        "keyphrase": "does not have CSRF check",
        "type": "rootcause"
      },
      {
        "id": "weakness:missing CSRF check",
        "keyphrase": "missing CSRF check",
        "type": "weakness"
      },
      {
        "id": "weakness:and escaping",
        "keyphrase": "and escaping",
        "type": "weakness"
      },
      {
        "id": "impact:make an unauthenticated user vulnerable to reflected XSS",
        "keyphrase": "make an unauthenticated user vulnerable to reflected XSS",
        "type": "impact"
      },
      {
        "id": "attacker:attackers",
        "keyphrase": "attackers",
        "type": "attacker"
      },
      {
        "id": "version:through 5.0.0",
        "keyphrase": "through 5.0.0",
        "type": "version"
      }
    ],
    "89": [
      {
        "id": "weakness:and escaping",
        "keyphrase": "and escaping",
        "type": "weakness"
      },
      {
        "id": "weakness:sanitisation",
        "keyphrase": "sanitisation",
        "type": "weakness"
      },
      {
        "id": "impact:make an unauthenticated user vulnerable to reflected XSS",
        "keyphrase": "make an unauthenticated user vulnerable to reflected XSS",
        "type": "impact"
      }
    ],
    "425": [
      {
        "id": "product:WOOEXIM WordPress plugin",
        "keyphrase": "WOOEXIM WordPress plugin",
        "type": "product"
      }
    ]
  }
}