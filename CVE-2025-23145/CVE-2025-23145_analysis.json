{
  "cve_id": "CVE-2025-23145",
  "description": "In the Linux kernel, the following vulnerability has been resolved mptcp fix NULL pointer in can_accept_new_subflow When testing valkey benchmark tool with MPTCP, the kernel panics in mptcp_can_accept_new_subflow because subflow_req->msk is NULL. Call trace mptcp_can_accept_new_subflow (./net/mptcp/subflow.c63 (discriminator 4)) (P) subflow_syn_recv_sock (./net/mptcp/subflow.c854) tcp_check_req (./net/ipv4/tcp_minisocks.c863) tcp_v4_rcv (./net/ipv4/tcp_ipv4.c2268) ip_protocol_deliver_rcu (./net/ipv4/ip_input.c207) ip_local_deliver_finish (./net/ipv4/ip_input.c234) ip_local_deliver (./net/ipv4/ip_input.c254) ip_rcv_finish (./net/ipv4/ip_input.c449) ... According to the debug log, the same req received two SYN-ACK in a very short time, very likely because the client retransmits the syn ack due to multiple reasons. Even if the packets are transmitted with a relevant time interval, they can be processed by the server on different CPUs concurrently). The subflow_req->msk ownership is transferred to the subflow the first, and there will be a risk of a **null pointer dereference** here. This patch fixes this issue by moving the subflow_req->msk under the `own_req == true` conditional. Note that the !msk check in subflow_hmac_valid() can be dropped, because the same check already exists under the own_req mpj branch where the code has been moved to.",
  "key_phrases": {
    "component": "mptcp_can_accept_new_subflow",
    "rootcause": "NULL pointer dereference in mptcp_can_accept_new_subflow, null pointer, race condition",
    "vector": "",
    "weakness": "null pointer dereference",
    "product": "Linux kernel",
    "impact": "kernel panics",
    "attacker": "",
    "version": ""
  },
  "reference_content": null,
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-476 | NULL Pointer Dereference | 1.0 | Base | Allowed | Primary CWE |\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.7 | Class | Allowed-with-Review | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship is that **CWE-476** [NULL Pointer Dereference] can be caused by a race condition, which is represented by **CWE-362** [Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')]. **CWE-476** [NULL Pointer Dereference] is a base CWE, while **CWE-362** [Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')] is a class CWE, meaning **CWE-476** [NULL Pointer Dereference] is more specific.\n\n```mermaid\ngraph TD\n    cwe476[\"CWE-476: NULL Pointer Dereference\"]\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n\n    cwe476 -->|CANFOLLOW| cwe362\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe476 primary\n    class cwe362 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a race condition (**CWE-362** [Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')]) where the same request is processed concurrently on different CPUs. This leads to the `subflow_req->msk` ownership being transferred to a subflow, and subsequently a **null pointer dereference** (**CWE-476** [NULL Pointer Dereference]) when the other CPU tries to access the same `subflow_req->msk` that is now NULL, leading to a kernel panic.\n\n## Summary of Analysis\nThe primary weakness is a **null pointer dereference** (**CWE-476** [NULL Pointer Dereference]) in `mptcp_can_accept_new_subflow`. The root cause is a race condition (**CWE-362** [Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')]) where the ownership of `subflow_req->msk` is not properly synchronized between multiple CPUs, leading to the **null pointer dereference**.\n\nThe vulnerability description clearly states: \"the kernel panics in mptcp_can_accept_new_subflow because subflow_req->msk is NULL\" and \"the subflow_req->msk ownership is transferred to the subflow the first, and there will be a risk of a **null pointer dereference** here.\" This is direct evidence for **CWE-476** [NULL Pointer Dereference]. The description also mentions \"the same req received two SYN-ACK in a very short time...they can be processed by the server on different CPUs concurrently),\" which indicates a race condition and supports **CWE-362** [Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')].\n\n**CWE-476** [NULL Pointer Dereference] is a base CWE and directly describes the error. **CWE-362** [Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')] is a class CWE, so it is a higher level of abstraction, but it does describe the cause of the dereference.\n\nOther CWEs considered but not used:\n\n*   CWE-617 (Reachable Assertion): The description does not indicate that the vulnerability involves an assertion, so it is not appropriate.\n*   CWE-909 (Missing Initialization of Resource): While it could be argued that the resource is not properly initialized in the context of concurrent access, the core issue is that it becomes null due to a race condition, making CWE-476 a more direct fit.\n*   CWE-667 (Improper Locking): The description doesn't explicitly mention locking mechanisms, so this is less relevant than the race condition itself.\n*   CWE-367 (Time-of-check Time-of-use (TOCTOU) Race Condition): TOCTOU is a specific type of race condition where the state of a resource changes between the check and the use. While this could be considered, CWE-362 is a broader category that fits the description better, as the issue isn't specifically about a check-then-use scenario but rather unsynchronized access.\n*   CWE-824 (Access of Uninitialized Pointer): This is similar to CWE-476, but CWE-476 is more accurate, because the pointer is set, and then becomes NULL, so it is not uninitialized.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-476 | NULL Pointer Dereference | 1.0 | Base | Allowed | Primary CWE |\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.7 | Class | Allowed-with-Review | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship is that **CWE-476** [NULL Pointer Dereference] can be caused by a race condition, which is represented by **CWE-362** [Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')]. **CWE-476** [NULL Pointer Dereference] is a base CWE, while **CWE-362** [Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')] is a class CWE, meaning **CWE-476** [NULL Pointer Dereference] is more specific.\n\n```mermaid\ngraph TD\n    cwe476[\"CWE-476: NULL Pointer Dereference\"]\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n\n    cwe476 -->|CANFOLLOW| cwe362\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe476 primary\n    class cwe362 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a race condition (**CWE-362** [Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')]) where the same request is processed concurrently on different CPUs. This leads to the `subflow_req->msk` ownership being transferred to a subflow, and subsequently a **null pointer dereference** (**CWE-476** [NULL Pointer Dereference]) when the other CPU tries to access the same `subflow_req->msk` that is now NULL, leading to a kernel panic.\n\n## Summary of Analysis\nThe primary weakness is a **null pointer dereference** (**CWE-476** [NULL Pointer Dereference]) in `mptcp_can_accept_new_subflow`. The root cause is a race condition (**CWE-362** [Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')]) where the ownership of `subflow_req->msk` is not properly synchronized between multiple CPUs, leading to the **null pointer dereference**.\n\nThe vulnerability description clearly states: \"the kernel panics in mptcp_can_accept_new_subflow because subflow_req->msk is NULL\" and \"the subflow_req->msk ownership is transferred to the subflow the first, and there will be a risk of a **null pointer dereference** here.\" This is direct evidence for **CWE-476** [NULL Pointer Dereference]. The description also mentions \"the same req received two SYN-ACK in a very short time...they can be processed by the server on different CPUs concurrently),\" which indicates a race condition and supports **CWE-362** [Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')].\n\n**CWE-476** [NULL Pointer Dereference] is a base CWE and directly describes the error. **CWE-362** [Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')] is a class CWE, so it is a higher level of abstraction, but it does describe the cause of the dereference.\n\nOther CWEs considered but not used:\n\n*   CWE-617 (Reachable Assertion): The description does not indicate that the vulnerability involves an assertion, so it is not appropriate.\n*   CWE-909 (Missing Initialization of Resource): While it could be argued that the resource is not properly initialized in the context of concurrent access, the core issue is that it becomes null due to a race condition, making CWE-476 a more direct fit.\n*   CWE-667 (Improper Locking): The description doesn't explicitly mention locking mechanisms, so this is less relevant than the race condition itself.\n*   CWE-367 (Time-of-check Time-of-use (TOCTOU) Race Condition): TOCTOU is a specific type of race condition where the state of a resource changes between the check and the use. While this could be considered, CWE-362 is a broader category that fits the description better, as the issue isn't specifically about a check-then-use scenario but rather unsynchronized access.\n*   CWE-824 (Access of Uninitialized Pointer): This is similar to CWE-476, but CWE-476 is more accurate, because the pointer is set, and then becomes NULL, so it is not uninitialized.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-476:**\n- 476 (NULL Pointer Dereference) - ROOT\n\n\n**Chain starting from CWE-667:**\n- 667 (Improper Locking) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Race Condition",
        "match_reason": "exact_match_compound_part_2"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "476",
        "name": "NULL Pointer Dereference",
        "source": "sparse"
      },
      "similarity": 847.075059550562
    },
    {
      "metadata": {
        "doc_id": "617",
        "name": "Reachable Assertion",
        "source": "sparse"
      },
      "similarity": 839.7062182256544
    },
    {
      "metadata": {
        "doc_id": "909",
        "name": "Missing Initialization of Resource",
        "source": "sparse"
      },
      "similarity": 821.0575226486608
    },
    {
      "metadata": {
        "doc_id": "667",
        "name": "Improper Locking",
        "source": "sparse"
      },
      "similarity": 798.5203366343144
    },
    {
      "metadata": {
        "doc_id": "923",
        "name": "Improper Restriction of Communication Channel to Intended Endpoints",
        "source": "sparse"
      },
      "similarity": 788.5572469124625
    },
    {
      "metadata": {
        "doc_id": "367",
        "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
        "source": "sparse"
      },
      "similarity": 777.9560222040261
    },
    {
      "metadata": {
        "doc_id": "125",
        "name": "Out-of-bounds Read",
        "source": "sparse"
      },
      "similarity": 776.946127976169
    },
    {
      "metadata": {
        "doc_id": "401",
        "name": "Missing Release of Memory after Effective Lifetime",
        "type": "Variant",
        "original_content": "The product does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory.",
        "keyphrase_source": "weakness:null pointer dereference",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.5420078560020143
          }
        }
      },
      "similarity": 0.5420078560020143
    },
    {
      "doc_id": "129",
      "text": "CWE-129: Improper Validation of Array Index",
      "score": 2.2704,
      "metadata": {
        "doc_id": "129",
        "name": "Improper Validation of Array Index",
        "type": "variant",
        "original_content": "CWE-129: Improper Validation of Array Index",
        "relationships": [
          {
            "source_id": "129",
            "target_id": "789",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "129",
            "target_id": "823",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "129",
            "target_id": "119",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "129",
            "target_id": "20",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "129",
            "target_id": "1285",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "823",
            "target_id": "129",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "789",
            "target_id": "129",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "20",
            "target_id": "129",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "1285",
            "target_id": "129",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "119",
            "target_id": "129",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 0.8,
          "abstraction_path": 0.76,
          "sequence_path": 0.8
        },
        "abstraction_factor": 1.2,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "476",
                  "789",
                  "CANFOLLOW"
                ],
                [
                  "789",
                  "129",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.8,
              "type": "relationship_chain",
              "source": "476"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "1285",
                  "129",
                  "PARENTOF"
                ]
              ],
              "score": 0.76,
              "type": "abstraction_path_down",
              "source": "1285"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "476",
                  "789",
                  "CANFOLLOW"
                ],
                [
                  "789",
                  "129",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "vulnerability_sequence_forward",
              "source": "476"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "789",
                  "476",
                  "CANPRECEDE"
                ],
                [
                  "129",
                  "789",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "vulnerability_sequence_backward",
              "source": "476"
            }
          }
        },
        "abstraction_level": "variant",
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2704
          }
        }
      },
      "similarity": 2.2704
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-476",
      "CWE-667",
      "CWE-909",
      "CWE-362",
      "CWE-824",
      "CWE-617",
      "CWE-367"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}