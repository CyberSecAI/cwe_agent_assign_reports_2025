{
  "retriever": "graph",
  "query": "OpenFGA is a high-performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar. OpenFGA < v1.8.4 (Helm chart < openfga-0.2.22, docker < v.1.8.4) are vulnerable to authorization bypass when certain Check and ListObject calls are executed. Users on OpenFGA v1.8.4 or previous, specifically under the following conditions are affected by this authorization bypass vulnerability 1. Calling Check API or ListObjects with a model that has a relation directly assignable to both public access AND userset with the same type. 2. A type bound public access tuple is assigned to an object. 3. userset tuple is not assigned to the same object. and 4. Check requests user field is a userset that has the same type as the type bound public access tuples user type. Users are advised to upgrade to v1.8.5 which is backwards compatible. There are no known workarounds for this vulnerability. Consider specifically these CWEs: CWE-284 CWE-612 CWE-862 CWE-286 CWE-639 CWE-285 CWE-863",
  "keyphrases": {
    "original_query": "OpenFGA is a high-performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar. OpenFGA < v1.8.4 (Helm chart < openfga-0.2.22, docker < v.1.8.4) are vulnerable to authorization bypass when certain Check and ListObject calls are executed. Users on OpenFGA v1.8.4 or previous, specifically under the following conditions are affected by this authorization bypass vulnerability 1. Calling Check API or ListObjects with a model that has a relation directly assignable to both public access AND userset with the same type. 2. A type bound public access tuple is assigned to an object. 3. userset tuple is not assigned to the same object. and 4. Check requests user field is a userset that has the same type as the type bound public access tuples user type. Users are advised to upgrade to v1.8.5 which is backwards compatible. There are no known workarounds for this vulnerability.",
    "enhanced_query": "OpenFGA is a high-performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar. OpenFGA < v1.8.4 (Helm chart < openfga-0.2.22, docker < v.1.8.4) are vulnerable to authorization bypass when certain Check and ListObject calls are executed. Users on OpenFGA v1.8.4 or previous, specifically under the following conditions are affected by this authorization bypass vulnerability 1. Calling Check API or ListObjects with a model that has a relation directly assignable to both public access AND userset with the same type. 2. A type bound public access tuple is assigned to an object. 3. userset tuple is not assigned to the same object. and 4. Check requests user field is a userset that has the same type as the type bound public access tuples user type. Users are advised to upgrade to v1.8.5 which is backwards compatible. There are no known workarounds for this vulnerability. Consider specifically these CWEs: CWE-284 CWE-612 CWE-862 CWE-286 CWE-639 CWE-285 CWE-863",
    "cwe_mentions": [
      "CWE-284",
      "CWE-612",
      "CWE-862",
      "CWE-286",
      "CWE-639",
      "CWE-285",
      "CWE-863"
    ],
    "search_time": 4.236587047576904
  },
  "timestamp": "2025-07-12 10:58:30",
  "cve_id": "CVE-2025-25196",
  "result_count": 20,
  "results": [
    {
      "cwe_id": "639",
      "name": "Authorization Bypass Through User-Controlled Key",
      "type": "Base",
      "score": 1.687320488828504,
      "relationship_count": 0
    },
    {
      "cwe_id": "612",
      "name": "Improper Authorization of Index Containing Sensitive Information",
      "type": "Base",
      "score": 1.604710439068408,
      "relationship_count": 0
    },
    {
      "cwe_id": "266",
      "name": "Incorrect Privilege Assignment",
      "type": "Base",
      "score": 1.418240309623775,
      "relationship_count": 0
    },
    {
      "cwe_id": "1299",
      "name": "Missing Protection Mechanism for Alternate Hardware Interface",
      "type": "base",
      "score": 1.1793600000000002,
      "relationship_count": 0
    },
    {
      "cwe_id": "1191",
      "name": "On-Chip Debug and Test Interface With Improper Access Control",
      "type": "base",
      "score": 1.1466,
      "relationship_count": 0
    },
    {
      "cwe_id": "285",
      "name": "Improper Authorization",
      "type": "Class",
      "score": 1.0576916809524464,
      "relationship_count": 0
    },
    {
      "cwe_id": "284",
      "name": "Improper Access Control",
      "type": "pillar",
      "score": 1.056,
      "relationship_count": 0
    },
    {
      "cwe_id": "286",
      "name": "Incorrect User Management",
      "type": "Class",
      "score": 1.0518782746007858,
      "relationship_count": 0
    },
    {
      "cwe_id": "863",
      "name": "Incorrect Authorization",
      "type": "Class",
      "score": 1.0455642332701667,
      "relationship_count": 0
    },
    {
      "cwe_id": "862",
      "name": "Missing Authorization",
      "type": "Class",
      "score": 1.0334944477236019,
      "relationship_count": 0
    },
    {
      "cwe_id": "1274",
      "name": "Improper Access Control for Volatile Memory Containing Boot Code",
      "type": "base",
      "score": 1.0062,
      "relationship_count": 0
    },
    {
      "cwe_id": "749",
      "name": "Exposed Dangerous Method or Function",
      "type": "base",
      "score": 1.0062,
      "relationship_count": 0
    },
    {
      "cwe_id": "1334",
      "name": "Unauthorized Error Injection Can Degrade Hardware Redundancy",
      "type": "base",
      "score": 1.0062,
      "relationship_count": 0
    },
    {
      "cwe_id": "1323",
      "name": "Improper Management of Sensitive Trace Data",
      "type": "base",
      "score": 1.0062,
      "relationship_count": 0
    },
    {
      "cwe_id": "1320",
      "name": "Improper Protection for Outbound Error Messages and Alert Signals",
      "type": "base",
      "score": 1.0062,
      "relationship_count": 0
    },
    {
      "cwe_id": "1317",
      "name": "Improper Access Control in Fabric Bridge",
      "type": "base",
      "score": 1.0062,
      "relationship_count": 0
    },
    {
      "cwe_id": "1316",
      "name": "Fabric-Address Map Allows Programming of Unwarranted Overlaps of Protected and Unprotected Ranges",
      "type": "base",
      "score": 1.0062,
      "relationship_count": 0
    },
    {
      "cwe_id": "1315",
      "name": "Improper Setting of Bus Controlling Capability in Fabric End-point",
      "type": "base",
      "score": 1.0062,
      "relationship_count": 0
    },
    {
      "cwe_id": "1313",
      "name": "Hardware Allows Activation of Test or Debug Logic at Runtime",
      "type": "base",
      "score": 1.0062,
      "relationship_count": 0
    },
    {
      "cwe_id": "1312",
      "name": "Missing Protection for Mirrored Regions in On-Chip Fabric Firewall",
      "type": "base",
      "score": 1.0062,
      "relationship_count": 0
    }
  ]
}