{
  "cve_id": "CVE-2024-41041",
  "description": "In the Linux kernel, the following vulnerability has been resolved udp Set SOCK_RCU_FREE earlier in udp_lib_get_port(). syzkaller triggered the warning [0] in udp_v4_early_demux(). In udp_v[46]_early_demux() and sk_lookup(), we do not touch the refcount of the looked-up sk and use sock_pfree() as skb->destructor, so we check SOCK_RCU_FREE to ensure that the sk is safe to access during the RCU grace period. Currently, SOCK_RCU_FREE is flagged for a bound socket after being put into the hash table. Moreover, the SOCK_RCU_FREE check is done too early in udp_v[46]_early_demux() and sk_lookup(), so there could be a small race window CPU1 CPU2 ---- ---- udp_v4_early_demux() udp_lib_get_port() | |- hlist_add_head_rcu() |- sk = __udp4_lib_demux_lookup() | |- DEBUG_NET_WARN_ON_ONCE(sk_is_refcounted(sk)) `- sock_set_flag(sk, SOCK_RCU_FREE) We had the same bug in TCP and fixed it in commit 871019b22d1b (net set SOCK_RCU_FREE before inserting socket into hashtable). Lets apply the same fix for UDP. [0] WARNING CPU 0 PID 11198 at net/ipv4/udp.c2599 udp_v4_early_demux+0x481/0xb70 net/ipv4/udp.c2599 Modules linked in CPU 0 PID 11198 Comm syz-executor.1 Not tainted 6.9.0-g93bda33046e7 #13 Hardware name QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.16.0-0-gd239552ce722-prebuilt.qemu.org 04/01/2",
  "key_phrases": {
    "rootcause": "UDP SOCK_RCU_FREE check too early",
    "weakness": "",
    "impact": "",
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": "udp_v4_early_demux() and sk_lookup()"
  },
  "reference_content": "Based on the provided content, here's an analysis of the vulnerability:\n\n**Root Cause:**\n\nThe root cause of the vulnerability is a race condition in the UDP socket handling within the Linux kernel. Specifically, the `SOCK_RCU_FREE` flag, which indicates that a socket is safe to access during an RCU (Read-Copy-Update) grace period, was being set *after* the socket was added to the hash table. This created a window where another CPU could attempt to access the socket via `udp_v4_early_demux()` or `sk_lookup()` before the `SOCK_RCU_FREE` flag was set, leading to a potential use-after-free condition.\n\n**Weaknesses/Vulnerabilities Present:**\n\n- **Race Condition:** A race condition exists between the process of binding a UDP socket (setting the `SOCK_RCU_FREE` flag) and the lookup operation that occurs when a UDP packet is received.\n- **Incorrect Flag Timing:** The `SOCK_RCU_FREE` flag was being set too late in the socket binding process.\n- **Use-After-Free Potential:** If the race condition is triggered, a CPU could access the socket after it has been freed, resulting in a use-after-free.\n\n**Impact of Exploitation:**\n\n- The primary impact is a kernel warning, which can lead to instability and potential crashes. This is evident in the provided syzkaller-triggered warning. The system might not always crash, but it indicates a potential vulnerability that can lead to more serious issues. The syzkaller report includes a stack trace when the race occurs\n\n**Attack Vectors:**\n\n- The vulnerability can be triggered by sending a UDP packet to a specific socket right after it is bound but before the SOCK_RCU_FREE flag is set.\n- An attacker could attempt to trigger this by rapidly creating and binding a large number of UDP sockets while simultaneously sending UDP packets.\n\n**Required Attacker Capabilities/Position:**\n\n- The attacker needs the ability to send UDP packets to the target machine.\n- The attacker would likely need to perform actions that can trigger the race condition, which includes binding to udp ports.\n- No special privileges are required since this vulnerability is present in the kernel network handling logic itself.\n\n**Technical Details:**\n\n- The issue resides in `net/ipv4/udp.c` within the functions `udp_lib_get_port()` (where the socket is bound) and `udp_v4_early_demux()` (where the socket is looked up).\n- The fix involves moving the `sock_set_flag(sk, SOCK_RCU_FREE)` call to *before* the `sk_add_node_rcu(sk, &hslot->head)` call, ensuring that the flag is set *before* the socket is added to the hash table.\n- The code diff shows that three lines have been inserted and one line has been deleted to resolve this issue, specifically moving the `sock_set_flag(sk, SOCK_RCU_FREE);` call.\n\n**Additional Notes:**\n\n- The provided content includes a syzkaller report showing the warning. Syzkaller is a fuzzer used to find bugs in the Linux kernel.\n- This vulnerability is similar to a previously fixed issue in TCP, highlighting a recurring pattern in the network stack.\n- The fix is present in multiple commits, and the changes are identical in all of them.\n\nIn summary, this CVE describes a race condition vulnerability that can result in a kernel warning and potential crashes due to improper socket flag handling in the Linux kernel UDP stack.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.9 | Class | Allowed-with-Review | Primary CWE. The vulnerability is caused by a race condition where the `SOCK_RCU_FREE` flag is set after the socket is added to the hash table.|\n| CWE-416 | Use After Free | 0.7 | Variant | Allowed | Secondary candidate. The race condition can lead to a use-after-free vulnerability if the socket is accessed before the `SOCK_RCU_FREE` flag is set. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship that impacted my decision was the parent-child relationship between CWE-362 and more specific race condition CWEs. Although CWE-367 (Time-of-check Time-of-use (TOCTOU) Race Condition) was a strong candidate, the description better aligns with the general `Race Condition` scenario as the timing issue isn't specifically a TOCTOU.\nThe chain relationship comes into play, because the **race condition** can lead to a **use-after-free**. Thus CWE-416 is a secondary issue that stems from the race.\n\n```mermaid\ngraph TD\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    cwe416[\"CWE-416: Use After Free\"]\n    \n    cwe416 -->|CANFOLLOW| cwe362\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe362 primary\n    class cwe416 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with a **race condition** (**CWE-362**) where the `SOCK_RCU_FREE` flag is set too late. This can lead to a **use-after-free** (**CWE-416**) if another CPU accesses the socket during the race window.\n\n## Summary of Analysis\nThe initial analysis identified a race condition related to setting the `SOCK_RCU_FREE` flag in the Linux kernel's UDP socket handling. The core issue is the **incorrect timing** of setting this flag, creating a window for potential use-after-free vulnerabilities.\n\nThe retriever results suggested several CWEs, with **CWE-362** (Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')) being the most relevant. The vulnerability description key phrases, specifically \"**UDP SOCK_RCU_FREE check too early**,\" supports this. The analysis of the CVE reference links content summary confirms this, stating: \"The root cause of the vulnerability is a **race condition**... Specifically, the `SOCK_RCU_FREE` flag... was being set *after* the socket was added to the hash table.\"\n\nWhile CWE-367 (Time-of-check Time-of-use (TOCTOU) Race Condition) was considered, the timing issue isn't specifically a TOCTOU, making CWE-362 a better fit. **CWE-416** (Use After Free) is added as a secondary issue as it can result from the race condition.\n\nThe selection of CWE-362 is at the Class level due to the lack of specifics to narrow it down to a Base or Variant level within the description. CWE-416 is a variant.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-366: Race Condition within a Thread\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nIf two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-416: Use After Free\n**Abstraction Level**: variant\n**Similarity Score**: 2.69\n**Source**: graph\n\n**Description**:\nCWE-416: Use After Free\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.9 | Class | Allowed-with-Review | Primary CWE. The vulnerability is caused by a race condition where the `SOCK_RCU_FREE` flag is set after the socket is added to the hash table.|\n| CWE-416 | Use After Free | 0.7 | Variant | Allowed | Secondary candidate. The race condition can lead to a use-after-free vulnerability if the socket is accessed before the `SOCK_RCU_FREE` flag is set. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship that impacted my decision was the parent-child relationship between CWE-362 and more specific race condition CWEs. Although CWE-367 (Time-of-check Time-of-use (TOCTOU) Race Condition) was a strong candidate, the description better aligns with the general `Race Condition` scenario as the timing issue isn't specifically a TOCTOU.\nThe chain relationship comes into play, because the **race condition** can lead to a **use-after-free**. Thus CWE-416 is a secondary issue that stems from the race.\n\n```mermaid\ngraph TD\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    cwe416[\"CWE-416: Use After Free\"]\n    \n    cwe416 -->|CANFOLLOW| cwe362\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe362 primary\n    class cwe416 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with a **race condition** (**CWE-362**) where the `SOCK_RCU_FREE` flag is set too late. This can lead to a **use-after-free** (**CWE-416**) if another CPU accesses the socket during the race window.\n\n## Summary of Analysis\nThe initial analysis identified a race condition related to setting the `SOCK_RCU_FREE` flag in the Linux kernel's UDP socket handling. The core issue is the **incorrect timing** of setting this flag, creating a window for potential use-after-free vulnerabilities.\n\nThe retriever results suggested several CWEs, with **CWE-362** (Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')) being the most relevant. The vulnerability description key phrases, specifically \"**UDP SOCK_RCU_FREE check too early**,\" supports this. The analysis of the CVE reference links content summary confirms this, stating: \"The root cause of the vulnerability is a **race condition**... Specifically, the `SOCK_RCU_FREE` flag... was being set *after* the socket was added to the hash table.\"\n\nWhile CWE-367 (Time-of-check Time-of-use (TOCTOU) Race Condition) was considered, the timing issue isn't specifically a TOCTOU, making CWE-362 a better fit. **CWE-416** (Use After Free) is added as a secondary issue as it can result from the race condition.\n\nThe selection of CWE-362 is at the Class level due to the lack of specifics to narrow it down to a Base or Variant level within the description. CWE-416 is a variant.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-366: Race Condition within a Thread\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nIf two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-416: Use After Free\n**Abstraction Level**: variant\n**Similarity Score**: 2.69\n**Source**: graph\n\n**Description**:\nCWE-416: Use After Free\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-366:**\n- 366 (Race Condition within a Thread) - ROOT\n\n\n**Chain starting from CWE-416:**\n- 416 (Use After Free) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "source": "sparse"
      },
      "similarity": 690.9737878379369
    },
    {
      "metadata": {
        "doc_id": "476",
        "name": "NULL Pointer Dereference",
        "source": "sparse"
      },
      "similarity": 687.2813276615752
    },
    {
      "metadata": {
        "doc_id": "125",
        "name": "Out-of-bounds Read",
        "source": "sparse"
      },
      "similarity": 681.9842312386814
    },
    {
      "metadata": {
        "doc_id": "415",
        "name": "Double Free",
        "source": "sparse"
      },
      "similarity": 667.4525257296817
    },
    {
      "metadata": {
        "doc_id": "367",
        "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
        "source": "sparse"
      },
      "similarity": 667.1926756433204
    },
    {
      "metadata": {
        "doc_id": "789",
        "name": "Memory Allocation with Excessive Size Value",
        "source": "sparse"
      },
      "similarity": 661.835579128106
    },
    {
      "metadata": {
        "doc_id": "923",
        "name": "Improper Restriction of Communication Channel to Intended Endpoints",
        "source": "sparse"
      },
      "similarity": 660.0970794369356
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse"
      },
      "similarity": 653.6642869994744
    },
    {
      "metadata": {
        "doc_id": "401",
        "name": "Missing Release of Memory after Effective Lifetime",
        "type": "Variant",
        "original_content": "The product does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory.",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.5314226741675419
          }
        }
      },
      "similarity": 0.5314226741675419
    },
    {
      "doc_id": "123",
      "text": "CWE-123: Write-what-where Condition",
      "score": 2.9120000000000004,
      "metadata": {
        "doc_id": "123",
        "name": "Write-what-where Condition",
        "type": "base",
        "original_content": "CWE-123: Write-what-where Condition",
        "relationships": [
          {
            "source_id": "123",
            "target_id": "590",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "479",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "416",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "364",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "134",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "120",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "119",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1340"
            }
          },
          {
            "source_id": "123",
            "target_id": "119",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1305"
            }
          },
          {
            "source_id": "123",
            "target_id": "787",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "787",
            "target_id": "123",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "590",
            "target_id": "123",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "479",
            "target_id": "123",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "416",
            "target_id": "123",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "415",
            "target_id": "123",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "364",
            "target_id": "123",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "134",
            "target_id": "123",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "120",
            "target_id": "123",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "119",
            "target_id": "123",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1305"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "416",
                  "123",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "416"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "416",
                  "123",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_forward",
              "source": "416"
            },
            "peer_relationship": {
              "path": [
                [
                  "415",
                  "123",
                  "PEEROF"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "415"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.9120000000000004
          }
        }
      },
      "similarity": 2.9120000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-366",
      "CWE-416",
      "CWE-362",
      "CWE-367"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}