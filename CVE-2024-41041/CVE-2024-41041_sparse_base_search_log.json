{
  "method": "sparse_base",
  "query": "In the Linux kernel, the following vulnerability has been resolved udp Set SOCK_RCU_FREE earlier in udp_lib_get_port(). syzkaller triggered the warning [0] in udp_v4_early_demux(). In udp_v[46]_early_demux() and sk_lookup(), we do not touch the refcount of the looked-up sk and use sock_pfree() as skb->destructor, so we check SOCK_RCU_FREE to ensure that the sk is safe to access during the RCU grace period. Currently, SOCK_RCU_FREE is flagged for a bound socket after being put into the hash table. Moreover, the SOCK_RCU_FREE check is done too early in udp_v[46]_early_demux() and sk_lookup(), so there could be a small race window CPU1 CPU2 ---- ---- udp_v4_early_demux() udp_lib_get_port() | |- hlist_add_head_rcu() |- sk = __udp4_lib_demux_lookup() | |- DEBUG_NET_WARN_ON_ONCE(sk_is_refcounted(sk)) `- sock_set_flag(sk, SOCK_RCU_FREE) We had the same bug in TCP and fixed it in commit 871019b22d1b (net set SOCK_RCU_FREE before inserting socket into hashtable). Lets apply the same fix for UDP. [0] WARNING CPU 0 PID 11198 at net/ipv4/udp.c2599 udp_v4_early_demux+0x481/0xb70 net/ipv4/udp.c2599 Modules linked in CPU 0 PID 11198 Comm syz-executor.1 Not tainted 6.9.0-g93bda33046e7 #13 Hardware name QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.16.0-0-gd239552ce722-prebuilt.qemu.org 04/01/2",
  "keyphrases": {
    "base_query": "In the Linux kernel, the following vulnerability has been resolved udp Set SOCK_RCU_FREE earlier in udp_lib_get_port(). syzkaller triggered the warning [0] in udp_v4_early_demux(). In udp_v[46]_early_demux() and sk_lookup(), we do not touch the refcount of the looked-up sk and use sock_pfree() as skb->destructor, so we check SOCK_RCU_FREE to ensure that the sk is safe to access during the RCU grace period. Currently, SOCK_RCU_FREE is flagged for a bound socket after being put into the hash table. Moreover, the SOCK_RCU_FREE check is done too early in udp_v[46]_early_demux() and sk_lookup(), so there could be a small race window CPU1 CPU2 ---- ---- udp_v4_early_demux() udp_lib_get_port() | |- hlist_add_head_rcu() |- sk = __udp4_lib_demux_lookup() | |- DEBUG_NET_WARN_ON_ONCE(sk_is_refcounted(sk)) `- sock_set_flag(sk, SOCK_RCU_FREE) We had the same bug in TCP and fixed it in commit 871019b22d1b (net set SOCK_RCU_FREE before inserting socket into hashtable). Lets apply the same fix for UDP. [0] WARNING CPU 0 PID 11198 at net/ipv4/udp.c2599 udp_v4_early_demux+0x481/0xb70 net/ipv4/udp.c2599 Modules linked in CPU 0 PID 11198 Comm syz-executor.1 Not tainted 6.9.0-g93bda33046e7 #13 Hardware name QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.16.0-0-gd239552ce722-prebuilt.qemu.org 04/01/2"
  },
  "timestamp": "2025-07-12T03:22:01.239319",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 227.9949405497321
    },
    {
      "doc_id": "125",
      "name": "Out-of-bounds Read",
      "score": 225.79706473035418
    },
    {
      "doc_id": "476",
      "name": "NULL Pointer Dereference",
      "score": 221.77131357207992
    },
    {
      "doc_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "score": 219.16543767739464
    },
    {
      "doc_id": "415",
      "name": "Double Free",
      "score": 218.59985254491409
    }
  ]
}