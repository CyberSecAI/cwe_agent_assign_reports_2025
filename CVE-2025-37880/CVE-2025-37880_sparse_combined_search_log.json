{
  "method": "sparse_combined",
  "query": "In the Linux kernel, the following vulnerability has been resolved um work around sched_yield not yielding in time-travel mode sched_yield by a userspace may not actually cause scheduling in time-travel mode as no time has passed. In the case seen it appears to be a badly implemented userspace spinlock in ASAN. Unfortunately, with time-travel it causes an extreme slowdown or even deadlock depending on the kernel configuration (CONFIG_UML_MAX_USERSPACE_ITERATIONS). Work around it by accounting time to the process whenever it executes a sched_yield syscall.",
  "keyphrases": {},
  "timestamp": "2025-07-12T13:27:08.365833",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "226",
      "name": "Sensitive Information in Resource Not Removed Before Reuse",
      "score": 140.5541976345914
    },
    {
      "doc_id": "335",
      "name": "Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG)",
      "score": 140.22081383575747
    },
    {
      "doc_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 139.1260064366448
    },
    {
      "doc_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "score": 138.67799704833607
    },
    {
      "doc_id": "1240",
      "name": "Use of a Cryptographic Primitive with a Risky Implementation",
      "score": 135.9744515505965
    }
  ]
}