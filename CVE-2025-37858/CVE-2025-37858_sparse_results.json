{
  "query": "In the Linux kernel, the following vulnerability has been resolved fs/jfs Prevent integer overflow in AG size calculation The JFS filesystem calculates allocation group (AG) size using 1 2TB aggregates on 32-bit systems), this 32-bit shift operation causes undefined behavior and improper AG sizing. On 32-bit architectures - Left-shifting 1 by 32+ bits results in 0 due to integer overflow - This creates invalid AG sizes (0 or garbage values) in sbi->bmap->db_agsize - Subsequent block allocations would reference invalid AG structures - Could lead to - Filesystem corruption during extend operations - Kernel crashes due to invalid memory accesses - Security vulnerabilities via malformed on-disk structures Fix by casting to s64 before shifting bmp->db_agsize = (s64)1 << l2agsize This ensures 64-bit arithmetic even on 32-bit architectures. The cast matches the data type of db_agsize (s64) and follows similar patterns in JFS block calculation code. Found by Linux Verification Center (linuxtesting.org) with SVACE.",
  "count": 12,
  "results": [
    {
      "cwe_id": "190",
      "name": "Integer Overflow or Wraparound",
      "abstraction": "Base",
      "score": 800.0,
      "original_score": 800.0,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "197",
      "name": "Numeric Truncation Error",
      "abstraction": "Base",
      "score": 727.377634678569,
      "original_score": 727.377634678569,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "194",
      "name": "Unexpected Sign Extension",
      "abstraction": "Variant",
      "score": 684.9799156683914,
      "original_score": 684.9799156683914,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1335",
      "name": "Incorrect Bitwise Shift of Integer",
      "abstraction": "Base",
      "score": 664.8162644514063,
      "original_score": 664.8162644514063,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "704",
      "name": "Incorrect Type Conversion or Cast",
      "abstraction": "Class",
      "score": 664.5106588521921,
      "original_score": 664.5106588521921,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "125",
      "name": "Out-of-bounds Read",
      "abstraction": "Base",
      "score": 655.3119759895503,
      "original_score": 655.3119759895503,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "681",
      "name": "Incorrect Conversion between Numeric Types",
      "abstraction": "Base",
      "score": 617.2525554008807,
      "original_score": 617.2525554008807,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "755",
      "name": "Improper Handling of Exceptional Conditions",
      "abstraction": "Class",
      "score": 585.2386555375182,
      "original_score": 585.2386555375182,
      "mapping_usage": "Discouraged"
    },
    {
      "cwe_id": "1342",
      "name": "Information Exposure through Microarchitectural State after Transient Execution",
      "abstraction": "Base",
      "score": 579.414184869474,
      "original_score": 579.414184869474,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "abstraction": "Base",
      "score": 572.1791259263384,
      "original_score": 572.1791259263384,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "682",
      "name": "Incorrect Calculation",
      "abstraction": "Pillar",
      "score": 567.0115672725663,
      "original_score": 567.0115672725663,
      "mapping_usage": "Discouraged"
    },
    {
      "cwe_id": "191",
      "name": "Integer Underflow (Wrap or Wraparound)",
      "abstraction": "Base",
      "score": 550.7951621766425,
      "original_score": 550.7951621766425,
      "mapping_usage": "Allowed"
    }
  ],
  "statistics": {
    "min": 550.7951621766425,
    "max": 800.0,
    "mean": 639.0739750686274,
    "median": 636.2822656952155,
    "count": 12
  }
}