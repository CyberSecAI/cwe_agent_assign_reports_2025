{
  "cve_id": "CVE-2024-12031",
  "description": "The Advanced Floating Content plugin for WordPress is vulnerable to **SQL Injection** via the floating_content_duplicate_post function in all versions up to, and including, 3.8.2 due to **insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query**. This makes it possible for authenticated attackers, with subscriber-level access and above, to append additional SQL queries into already existing queries that can be used to extract sensitive information from the database.",
  "key_phrases": {
    "component": "floating_content_duplicate_post function",
    "rootcause": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
    "vector": "",
    "weakness": "SQL Injection",
    "product": "Advanced Floating Content plugin for WordPress",
    "impact": "append additional SQL queries into already existing queries that can be used to extract sensitive information from the database, SQL query appending",
    "attacker": "authenticated attackers with subscriber-level access and above",
    "version": "up to and including 3.8.2"
  },
  "reference_content": "Based on the provided information, here's an analysis of CVE-2024-12031:\n\n**Root cause of vulnerability:**\n- The vulnerability is due to insufficient input sanitization and lack of proper SQL query preparation in the `floating_content_duplicate_post` function of the Advanced Floating Content WordPress plugin.\n\n**Weaknesses/vulnerabilities present:**\n- SQL Injection vulnerability. Specifically, it's an Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection').\n- The plugin does not properly escape or sanitize user-supplied parameters before using them in an SQL query.\n- The SQL query is not properly prepared, allowing for the injection of malicious SQL code.\n\n**Impact of exploitation:**\n- Attackers can append additional SQL queries into existing ones, potentially leading to:\n  - Extraction of sensitive information from the database.\n  - While the CVSS score indicates high impact on confidentiality, it does not impact integrity or availability.\n\n**Attack vectors:**\n- Network-based attack.\n- The vulnerability is triggered through the `floating_content_duplicate_post` function.\n\n**Required attacker capabilities/position:**\n- The attacker needs to be authenticated with at least subscriber-level access to the WordPress site.\n- The attacker needs to be able to access the vulnerable function, which is part of the Advanced Floating Content plugin.\n\n**Additional notes:**\n- The vulnerability was reported by Th\u00e1i An and patched in version 3.8.3 of the plugin.\n- The provided content includes detailed information about the plugin, changelog and vulnerability itself.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n\n| CWE ID  | CWE Name                                                                                    | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :------------------------------------------------------------------------------------------ | :--------- | :---------------------- | :------------------------------ | :------------------------------ |\n| CWE-89    | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')      | 1.0        | Base                    | Primary CWE                   | Allowed                       |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary relationship that influenced the decision was the hierarchical structure with CWE-89 as a base CWE directly addressing the **SQL Injection** vulnerability. While other CWEs like CWE-943 (Improper Neutralization of Special Elements in Data Query Logic) exist as a Class, CWE-89 is more specific and directly reflects the **SQL Injection** vulnerability described. The chain relationships and abstraction levels were considered to ensure the selection of the most accurate and specific CWE.\n\n```mermaid\ngraph TD\n    cwe89[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"]\n    cwe943[\"CWE-943: Improper Neutralization of Special Elements in Data Query Logic\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used to Build Another Data Structure\"]\n    \n    cwe89 -->|CHILDOF| cwe943\n    cwe89 -->|CHILDOF| cwe74\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe89 primary\n    class cwe943,cwe74 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with **insufficient escaping** and **lack of sufficient preparation on the existing SQL query** leading to **SQL Injection**, which then allows attackers to extract sensitive information from the database.\n\n*   Root Cause: **Insufficient escaping** and **lack of sufficient preparation on the existing SQL query**\n*   Weakness: **SQL Injection** (CWE-89)\n*   Impact: Extraction of sensitive information from the database.\n\n## Summary of Analysis\n\nThe analysis is based on the vulnerability description, which clearly indicates an **SQL Injection** vulnerability due to **insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query**. This aligns directly with CWE-89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')). The evidence for this includes:\n\n*   Vulnerability Description: \"The Advanced Floating Content plugin for WordPress is vulnerable to **SQL Injection** ... due to **insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query**.\"\n*   CVE Reference Links Content Summary: \"The vulnerability is due to insufficient input sanitization and lack of proper SQL query preparation... SQL Injection vulnerability. Specifically, it's an Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection').\"\n\nThe graph relationships were considered, and CWE-89 was selected as the most specific base CWE. The other candidate CWEs, such as CWE-943 and CWE-74, are class-level CWEs that are less specific than CWE-89.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\n\n## CWE-352: Cross-Site Request Forgery (CSRF)\n\nThis CWE was considered but is not applicable because the vulnerability is related to **SQL Injection**, not CSRF.\n\n## CWE-434: Unrestricted Upload of File with Dangerous Type\n\nThis CWE was considered but is not applicable because the vulnerability is not related to file uploads.\n\n## CWE-425: Direct Request ('Forced Browsing')\n\nThis CWE was considered but is not applicable because the vulnerability is related to **SQL Injection**, not authorization bypass.\n\n## CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\n\nThis CWE is the primary candidate and is selected due to the vulnerability being a clear case of **SQL Injection**. The vulnerability description explicitly mentions the **insufficient escaping** and **lack of sufficient preparation on the existing SQL query**, which directly aligns with the characteristics of CWE-89.\n\n## CWE-116: Improper Encoding or Escaping of Output\n\nThis CWE was considered but is not as specific as CWE-89. While improper escaping is a contributing factor, the core issue is the **SQL Injection** itself, making CWE-89 a more appropriate choice.\n\n## CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n\nThis CWE was considered but is not applicable because the vulnerability is related to **SQL Injection**, not Cross-site Scripting.\n\n## CWE-502: Deserialization of Untrusted Data\n\nThis CWE was considered but is not applicable because the vulnerability is not related to deserialization of untrusted data.\n\n## CWE-472: External Control of Assumed-Immutable Web Parameter\n\nThis CWE was considered but is not applicable because the vulnerability is related to **SQL Injection**, not modification of assumed-immutable parameters.\n\n## CWE-639: Authorization Bypass Through User-Controlled Key\n\nThis CWE was considered but is not applicable because the vulnerability is related to **SQL Injection**, not authorization bypass.\n\n## CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')\n\nThis CWE was considered but is not applicable because the vulnerability is related to **SQL Injection**, not static code injection.\n\n## CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')\n\nThis CWE was considered but is not applicable because the vulnerability is related to **SQL Injection**, not LDAP injection.\n\n## CWE-138: Improper Neutralization of Special Elements\n\nThis CWE was considered but is a class-level CWE and is less specific than CWE-89.\n\n## CWE-943: Improper Neutralization of Special Elements in Data Query Logic\n\nThis CWE was considered but CWE-89 is more specific as it directly identifies the vulnerability as **SQL Injection**.\n\n## CWE-73: External Control of File Name or Path\n\nThis CWE was considered but is not applicable because the vulnerability is related to **SQL Injection**, not file path manipulation.\n\n## CWE-41: Improper Resolution of Path Equivalence\n\nThis CWE was considered but is not applicable because the vulnerability is related to **SQL Injection**, not path equivalence.\n\n## CWE-471: Modification of Assumed-Immutable Data (MAID)\n\nThis CWE was considered but is not applicable because the vulnerability is related to **SQL Injection**, not modification of assumed-immutable data.\n\n## CWE-183: Permissive List of Allowed Inputs\n\nThis CWE was considered but is not applicable because the vulnerability is related to **SQL Injection**, not input validation.\n\n## CWE-59: Improper Link Resolution Before File Access ('Link Following')\n\nThis CWE was considered but is not applicable because the vulnerability is related to **SQL Injection**, not link following.",
  "analysis_with_relationships": "# Summary\n\n| CWE ID  | CWE Name                                                                                    | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :------------------------------------------------------------------------------------------ | :--------- | :---------------------- | :------------------------------ | :------------------------------ |\n| CWE-89    | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')      | 1.0        | Base                    | Primary CWE                   | Allowed                       |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary relationship that influenced the decision was the hierarchical structure with CWE-89 as a base CWE directly addressing the **SQL Injection** vulnerability. While other CWEs like CWE-943 (Improper Neutralization of Special Elements in Data Query Logic) exist as a Class, CWE-89 is more specific and directly reflects the **SQL Injection** vulnerability described. The chain relationships and abstraction levels were considered to ensure the selection of the most accurate and specific CWE.\n\n```mermaid\ngraph TD\n    cwe89[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"]\n    cwe943[\"CWE-943: Improper Neutralization of Special Elements in Data Query Logic\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used to Build Another Data Structure\"]\n    \n    cwe89 -->|CHILDOF| cwe943\n    cwe89 -->|CHILDOF| cwe74\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe89 primary\n    class cwe943,cwe74 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with **insufficient escaping** and **lack of sufficient preparation on the existing SQL query** leading to **SQL Injection**, which then allows attackers to extract sensitive information from the database.\n\n*   Root Cause: **Insufficient escaping** and **lack of sufficient preparation on the existing SQL query**\n*   Weakness: **SQL Injection** (CWE-89)\n*   Impact: Extraction of sensitive information from the database.\n\n## Summary of Analysis\n\nThe analysis is based on the vulnerability description, which clearly indicates an **SQL Injection** vulnerability due to **insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query**. This aligns directly with CWE-89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')). The evidence for this includes:\n\n*   Vulnerability Description: \"The Advanced Floating Content plugin for WordPress is vulnerable to **SQL Injection** ... due to **insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query**.\"\n*   CVE Reference Links Content Summary: \"The vulnerability is due to insufficient input sanitization and lack of proper SQL query preparation... SQL Injection vulnerability. Specifically, it's an Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection').\"\n\nThe graph relationships were considered, and CWE-89 was selected as the most specific base CWE. The other candidate CWEs, such as CWE-943 and CWE-74, are class-level CWEs that are less specific than CWE-89.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\n\n## CWE-352: Cross-Site Request Forgery (CSRF)\n\nThis CWE was considered but is not applicable because the vulnerability is related to **SQL Injection**, not CSRF.\n\n## CWE-434: Unrestricted Upload of File with Dangerous Type\n\nThis CWE was considered but is not applicable because the vulnerability is not related to file uploads.\n\n## CWE-425: Direct Request ('Forced Browsing')\n\nThis CWE was considered but is not applicable because the vulnerability is related to **SQL Injection**, not authorization bypass.\n\n## CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\n\nThis CWE is the primary candidate and is selected due to the vulnerability being a clear case of **SQL Injection**. The vulnerability description explicitly mentions the **insufficient escaping** and **lack of sufficient preparation on the existing SQL query**, which directly aligns with the characteristics of CWE-89.\n\n## CWE-116: Improper Encoding or Escaping of Output\n\nThis CWE was considered but is not as specific as CWE-89. While improper escaping is a contributing factor, the core issue is the **SQL Injection** itself, making CWE-89 a more appropriate choice.\n\n## CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n\nThis CWE was considered but is not applicable because the vulnerability is related to **SQL Injection**, not Cross-site Scripting.\n\n## CWE-502: Deserialization of Untrusted Data\n\nThis CWE was considered but is not applicable because the vulnerability is not related to deserialization of untrusted data.\n\n## CWE-472: External Control of Assumed-Immutable Web Parameter\n\nThis CWE was considered but is not applicable because the vulnerability is related to **SQL Injection**, not modification of assumed-immutable parameters.\n\n## CWE-639: Authorization Bypass Through User-Controlled Key\n\nThis CWE was considered but is not applicable because the vulnerability is related to **SQL Injection**, not authorization bypass.\n\n## CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')\n\nThis CWE was considered but is not applicable because the vulnerability is related to **SQL Injection**, not static code injection.\n\n## CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')\n\nThis CWE was considered but is not applicable because the vulnerability is related to **SQL Injection**, not LDAP injection.\n\n## CWE-138: Improper Neutralization of Special Elements\n\nThis CWE was considered but is a class-level CWE and is less specific than CWE-89.\n\n## CWE-943: Improper Neutralization of Special Elements in Data Query Logic\n\nThis CWE was considered but CWE-89 is more specific as it directly identifies the vulnerability as **SQL Injection**.\n\n## CWE-73: External Control of File Name or Path\n\nThis CWE was considered but is not applicable because the vulnerability is related to **SQL Injection**, not file path manipulation.\n\n## CWE-41: Improper Resolution of Path Equivalence\n\nThis CWE was considered but is not applicable because the vulnerability is related to **SQL Injection**, not path equivalence.\n\n## CWE-471: Modification of Assumed-Immutable Data (MAID)\n\nThis CWE was considered but is not applicable because the vulnerability is related to **SQL Injection**, not modification of assumed-immutable data.\n\n## CWE-183: Permissive List of Allowed Inputs\n\nThis CWE was considered but is not applicable because the vulnerability is related to **SQL Injection**, not input validation.\n\n## CWE-59: Improper Link Resolution Before File Access ('Link Following')\n\nThis CWE was considered but is not applicable because the vulnerability is related to **SQL Injection**, not link following.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-471:**\n- 471 (Modification of Assumed-Immutable Data (MAID)) - ROOT\n\n\n**Chain starting from CWE-639:**\n- 639 (Authorization Bypass Through User-Controlled Key) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: SQL injection",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse"
      },
      "similarity": 561.0367209489265
    },
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse"
      },
      "similarity": 518.4806598686316
    },
    {
      "metadata": {
        "doc_id": "862",
        "name": "Missing Authorization",
        "source": "sparse"
      },
      "similarity": 502.6259185830263
    },
    {
      "metadata": {
        "doc_id": "502",
        "name": "Deserialization of Untrusted Data",
        "source": "sparse"
      },
      "similarity": 495.9161606133842
    },
    {
      "metadata": {
        "doc_id": "90",
        "name": "Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
        "source": "sparse"
      },
      "similarity": 495.5567549506402
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 493.429977820491
    },
    {
      "metadata": {
        "doc_id": "138",
        "name": "Improper Neutralization of Special Elements",
        "source": "sparse"
      },
      "similarity": 488.36069314185454
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "type": "Base",
        "original_content": "The product allows the upload or transfer of dangerous file types that are automatically processed within its environment.",
        "keyphrase_source": "rootcause:insufficient escaping on the user supplied parameter",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5098491849480442,
            "graph": 1.9123629506947746
          }
        }
      },
      "similarity": 0.5098491849480442
    },
    {
      "doc_id": "73",
      "text": "CWE-73: External Control of File Name or Path",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "73",
        "name": "External Control of File Name or Path",
        "type": "base",
        "original_content": "CWE-73: External Control of File Name or Path",
        "relationships": [
          {
            "source_id": "73",
            "target_id": "114",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "59",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "434",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "41",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "22",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "20",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "700"
            }
          },
          {
            "source_id": "73",
            "target_id": "610",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "642",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "99",
            "target_id": "73",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "642",
            "target_id": "73",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "610",
            "target_id": "73",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "59",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "41",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "22",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "20",
            "target_id": "73",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "700"
            }
          },
          {
            "source_id": "114",
            "target_id": "73",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "434",
                  "73",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "434"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "434",
                  "73",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "434"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "73",
                  "434",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "434"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-471",
      "CWE-639",
      "CWE-79",
      "CWE-74",
      "CWE-90",
      "CWE-89",
      "CWE-183",
      "CWE-73",
      "CWE-352",
      "CWE-425",
      "CWE-41",
      "CWE-434",
      "CWE-59",
      "CWE-138",
      "CWE-96",
      "CWE-502",
      "CWE-116",
      "CWE-472",
      "CWE-943"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}