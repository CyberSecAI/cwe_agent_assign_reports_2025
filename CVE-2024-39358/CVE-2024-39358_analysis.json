{
  "cve_id": "CVE-2024-39358",
  "description": "A buffer overflow vulnerability exists in the adm.cgi set_wzap() functionality of Wavlink AC3000 M33A8.V5030.210505. A specially crafted HTTP request can lead to **stack-based buffer overflow**. An attacker can make an authenticated HTTP request to trigger this vulnerability.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "stack-based buffer overflow",
    "impact": "",
    "vector": "specially crafted HTTP request",
    "attacker": "",
    "product": "Wavlink AC3000",
    "version": "M33A8.V5030.210505",
    "component": "adm.cgi set_wzap() functionality"
  },
  "reference_content": "## CVE-2024-39358 Analysis\n\nThe content is **RELEVANT** to CVE-2024-39358. It provides a detailed vulnerability report from Talos Intelligence. Here's the extracted information:\n\n**Root cause of vulnerability:**\n\n*   A buffer overflow vulnerability exists in the `adm.cgi`'s `set_wzdap()` function of the Wavlink AC3000 router.\n*   The vulnerability is due to a lack of length checking on input buffers when processing HTTP POST requests. Specifically, the `wlan_ssid2g` parameter is copied to the stack without size validation.\n\n**Weaknesses/vulnerabilities present:**\n\n*   CWE-120 - Buffer Copy without Checking Size of Input (\u2018Classic Buffer Overflow\u2019)\n*   Stack-based buffer overflow.\n\n**Impact of exploitation:**\n\n*   Arbitrary code execution. An attacker can overwrite the return address of the `set_wzdap` function.\n\n**Attack vectors:**\n\n*   An attacker can send a specially crafted HTTP request to the vulnerable `adm.cgi` endpoint.\n*   Requires authenticated access (HTTP request with a valid session cookie).\n\n**Required attacker capabilities/position:**\n\n*   Network access to the Wavlink AC3000 router.\n*   Authenticated access to the router's web interface (valid session cookie).\n\n**Mitigation or fix:**\n\n*   The report does not explicitly state a fix, but implies patching is being worked on by the vendor. The product has been discontinued, but patches are being developed.\n\n**Additional Details (more detail than official CVE description):**\n\n*   **Affected Product:** Wavlink AC3000 M33A8.V5030.210505\n*   **CVSSv3 Score:** 9.1 (CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:C/C:H/I:H/A:H)\n*   The vulnerability is triggered by providing a `page=wzdap` parameter in an HTTP POST request.\n*   The `set_wzdap` function calls `strdup` on several parameters obtained from the HTTP request, including `wlan_ssid2g`, which is vulnerable to overflow.\n*   The report includes GDB debugging information and crash details.\n*   Timeline of vendor communication and disclosure.\n*   Discovered by Lilith >\\_> of Cisco Talos.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-120 | Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') | 1.0 | Base | Allowed-with-Review | Primary CWE. The vulnerability description and CVE analysis clearly indicate a buffer copy without size checking. |\n| CWE-121 | Stack-based Buffer Overflow | 0.9 | Variant | Allowed | Secondary. This CWE specifies the location of the buffer, providing more specific context. |\n| CWE-119 | Improper Restriction of Operations within the Bounds of a Memory Buffer | 0.6 | Class | Discouraged | Secondary. Considered, but too abstract. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is CWE-120 [Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')], which is a base-level CWE. CWE-121 [Stack-based Buffer Overflow] is a variant of a buffer overflow and specifies that the buffer is on the stack, providing more specific information. CWE-119 [Improper Restriction of Operations within the Bounds of a Memory Buffer] is a class-level CWE and is a parent of both CWE-120 and CWE-121. The relationship between these CWEs helped identify the most specific and accurate classification.\n\n```mermaid\ngraph TD\n    cwe120[\"CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\"]\n    cwe121[\"CWE-121: Stack-based Buffer Overflow\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\"]\n    \n    cwe120 -->|CHILDOF| cwe119\n    cwe121 -->|CHILDOF| cwe119\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe120 primary\n    class cwe121 secondary\n    class cwe119 tertiary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **improper handling of input size** (CWE-120), leading to a **stack-based buffer overflow** (CWE-121), which can then lead to arbitrary code execution.\n\n## Summary of Analysis\nThe initial assessment strongly indicated CWE-120 as the primary weakness due to the **lack of size checking** during the buffer copy operation. This is supported by the vulnerability description, which mentions a **stack-based buffer overflow** due to a **specially crafted HTTP request**. The CVE analysis confirms this by stating that the vulnerability is due to a **lack of length checking on input buffers** when processing HTTP POST requests, and specifically the `wlan_ssid2g` parameter is copied to the stack without size validation.\n\nCWE-121 was added as a secondary CWE because it gives the location of the buffer as the Stack.\n\nCWE-119 was considered, as it broadly covers memory buffer errors. However, the evidence allows for a more specific mapping to CWE-120 and CWE-121. Therefore, CWE-119 is less suitable due to its higher abstraction level.\n\nThe final selection of CWE-120 and CWE-121 provides a clear and specific representation of the vulnerability based on the available evidence.\n\n**Supporting Evidence:**\n\n*   \"A buffer overflow vulnerability exists in the adm.cgi set_wzap() functionality of Wavlink AC3000 M33A8.V5030.210505. A specially crafted HTTP request can lead to **stack-based buffer overflow**.\"\n*   \"The vulnerability is due to a lack of length checking on input buffers when processing HTTP POST requests. Specifically, the `wlan_ssid2g` parameter is copied to the stack without size validation.\"\n\nOther CWEs Considered but Not Used:\n\n*   CWE-131: Incorrect Calculation of Buffer Size - Considered but not selected because the core issue is not the incorrect calculation of the buffer size but the absence of size checking before copying data into the buffer.\n*   CWE-130: Improper Handling of Length Parameter Inconsistency - While length is a factor, the primary issue is the absence of any size check, not the inconsistency of a length parameter.\n*   CWE-805: Buffer Access with Incorrect Length Value - Similar to CWE-130, this focuses on incorrect length values, whereas the provided context emphasizes the complete absence of length validation.\n*   CWE-1284: Improper Validation of Specified Quantity in Input - This CWE is similar to CWE-120 but less specific. It focuses on improper validation of a quantity, while CWE-120 specifically addresses buffer copies without checking size.\n*   CWE-190: Integer Overflow or Wraparound - This is not relevant as the vulnerability is not directly related to integer overflows.\n*   CWE-195: Signed to Unsigned Conversion Error - This is not relevant as the vulnerability is not related to signed to unsigned conversion errors.\n*   CWE-425: Direct Request ('Forced Browsing') - This is not relevant, as the vulnerability is not about authorization bypass but about memory corruption due to improper handling of input size.\n*   CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere - This is not relevant, as the vulnerability is not about information exposure.\n*   CWE-790: Improper Filtering of Special Elements - This is not relevant, as the vulnerability is not about filtering special elements.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-120 | Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') | 1.0 | Base | Allowed-with-Review | Primary CWE. The vulnerability description and CVE analysis clearly indicate a buffer copy without size checking. |\n| CWE-121 | Stack-based Buffer Overflow | 0.9 | Variant | Allowed | Secondary. This CWE specifies the location of the buffer, providing more specific context. |\n| CWE-119 | Improper Restriction of Operations within the Bounds of a Memory Buffer | 0.6 | Class | Discouraged | Secondary. Considered, but too abstract. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is CWE-120 [Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')], which is a base-level CWE. CWE-121 [Stack-based Buffer Overflow] is a variant of a buffer overflow and specifies that the buffer is on the stack, providing more specific information. CWE-119 [Improper Restriction of Operations within the Bounds of a Memory Buffer] is a class-level CWE and is a parent of both CWE-120 and CWE-121. The relationship between these CWEs helped identify the most specific and accurate classification.\n\n```mermaid\ngraph TD\n    cwe120[\"CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\"]\n    cwe121[\"CWE-121: Stack-based Buffer Overflow\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\"]\n    \n    cwe120 -->|CHILDOF| cwe119\n    cwe121 -->|CHILDOF| cwe119\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe120 primary\n    class cwe121 secondary\n    class cwe119 tertiary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **improper handling of input size** (CWE-120), leading to a **stack-based buffer overflow** (CWE-121), which can then lead to arbitrary code execution.\n\n## Summary of Analysis\nThe initial assessment strongly indicated CWE-120 as the primary weakness due to the **lack of size checking** during the buffer copy operation. This is supported by the vulnerability description, which mentions a **stack-based buffer overflow** due to a **specially crafted HTTP request**. The CVE analysis confirms this by stating that the vulnerability is due to a **lack of length checking on input buffers** when processing HTTP POST requests, and specifically the `wlan_ssid2g` parameter is copied to the stack without size validation.\n\nCWE-121 was added as a secondary CWE because it gives the location of the buffer as the Stack.\n\nCWE-119 was considered, as it broadly covers memory buffer errors. However, the evidence allows for a more specific mapping to CWE-120 and CWE-121. Therefore, CWE-119 is less suitable due to its higher abstraction level.\n\nThe final selection of CWE-120 and CWE-121 provides a clear and specific representation of the vulnerability based on the available evidence.\n\n**Supporting Evidence:**\n\n*   \"A buffer overflow vulnerability exists in the adm.cgi set_wzap() functionality of Wavlink AC3000 M33A8.V5030.210505. A specially crafted HTTP request can lead to **stack-based buffer overflow**.\"\n*   \"The vulnerability is due to a lack of length checking on input buffers when processing HTTP POST requests. Specifically, the `wlan_ssid2g` parameter is copied to the stack without size validation.\"\n\nOther CWEs Considered but Not Used:\n\n*   CWE-131: Incorrect Calculation of Buffer Size - Considered but not selected because the core issue is not the incorrect calculation of the buffer size but the absence of size checking before copying data into the buffer.\n*   CWE-130: Improper Handling of Length Parameter Inconsistency - While length is a factor, the primary issue is the absence of any size check, not the inconsistency of a length parameter.\n*   CWE-805: Buffer Access with Incorrect Length Value - Similar to CWE-130, this focuses on incorrect length values, whereas the provided context emphasizes the complete absence of length validation.\n*   CWE-1284: Improper Validation of Specified Quantity in Input - This CWE is similar to CWE-120 but less specific. It focuses on improper validation of a quantity, while CWE-120 specifically addresses buffer copies without checking size.\n*   CWE-190: Integer Overflow or Wraparound - This is not relevant as the vulnerability is not directly related to integer overflows.\n*   CWE-195: Signed to Unsigned Conversion Error - This is not relevant as the vulnerability is not related to signed to unsigned conversion errors.\n*   CWE-425: Direct Request ('Forced Browsing') - This is not relevant, as the vulnerability is not about authorization bypass but about memory corruption due to improper handling of input size.\n*   CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere - This is not relevant, as the vulnerability is not about information exposure.\n*   CWE-790: Improper Filtering of Special Elements - This is not relevant, as the vulnerability is not about filtering special elements.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-121:**\n- 121 (Stack-based Buffer Overflow) - ROOT\n\n\n**Chain starting from CWE-130:**\n- 130 (Improper Handling of Length Parameter Inconsistency) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "119",
        "name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Buffer Overflow",
        "match_reason": "term_in_phrase_whole_phrase"
      },
      "similarity": 800.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "190",
        "name": "Integer Overflow or Wraparound",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Overflow",
        "match_reason": "term_in_phrase_whole_phrase"
      },
      "similarity": 800.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "120",
        "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
        "source": "sparse"
      },
      "similarity": 328.6208591658101
    },
    {
      "metadata": {
        "doc_id": "121",
        "name": "Stack-based Buffer Overflow",
        "source": "sparse"
      },
      "similarity": 316.0785470619959
    },
    {
      "metadata": {
        "doc_id": "1284",
        "name": "Improper Validation of Specified Quantity in Input",
        "source": "sparse"
      },
      "similarity": 282.25093976876764
    },
    {
      "metadata": {
        "doc_id": "195",
        "name": "Signed to Unsigned Conversion Error",
        "source": "sparse"
      },
      "similarity": 274.2379887527042
    },
    {
      "metadata": {
        "doc_id": "674",
        "name": "Uncontrolled Recursion",
        "source": "sparse"
      },
      "similarity": 272.36297738884997
    },
    {
      "metadata": {
        "doc_id": "122",
        "name": "Heap-based Buffer Overflow",
        "source": "sparse"
      },
      "similarity": 272.16386863234356
    },
    {
      "metadata": {
        "doc_id": "805",
        "name": "Buffer Access with Incorrect Length Value",
        "type": "Base",
        "original_content": "The product uses a sequential operation to read or write a buffer, but it uses an incorrect length value that causes it to access memory that is outside of the bounds of the buffer.",
        "keyphrase_source": "weakness:stack-based buffer overflow",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.592872782828354,
            "graph": 2.847076916949349
          }
        }
      },
      "similarity": 0.592872782828354
    },
    {
      "doc_id": "128",
      "text": "CWE-128: Wrap-around Error",
      "score": 2.9120000000000004,
      "metadata": {
        "doc_id": "128",
        "name": "Wrap-around Error",
        "type": "base",
        "original_content": "CWE-128: Wrap-around Error",
        "relationships": [
          {
            "source_id": "128",
            "target_id": "190",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "128",
            "target_id": "119",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "128",
            "target_id": "682",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "682",
            "target_id": "128",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "119",
            "target_id": "128",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "119",
                  "128",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "119"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "119",
                  "128",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "119"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "128",
                  "119",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "119"
            },
            "peer_relationship": {
              "path": [
                [
                  "128",
                  "190",
                  "PEEROF"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "190"
            }
          }
        },
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.9120000000000004
          }
        }
      },
      "similarity": 2.9120000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-121",
      "CWE-130",
      "CWE-805",
      "CWE-1284",
      "CWE-131",
      "CWE-790",
      "CWE-190",
      "CWE-195",
      "CWE-119",
      "CWE-120",
      "CWE-497",
      "CWE-425"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}