{
  "cve_id": "CVE-2025-26619",
  "description": "Vega is a visualization grammar, a declarative format for creating, saving, and sharing interactive visualization designs. In `vega` 5.30.0 and lower and in `vega-functions` 5.15.0 and lower , **it was possible to call JavaScript functions from the Vega expression language that were not meant to be supported**. The issue is patched in `vega` `5.31.0` and `vega-functions` `5.16.0`. Some workarounds are available. Run `vega` without `vega.expressionInterpreter`. This mode is not the default as it is slower. Alternatively, using the interpreter described in CSP safe mode (Content Security Policy) prevents arbitrary Javascript from running, so users of this mode are not affected by this vulnerability.",
  "key_phrases": {
    "rootcause": "it was possible to call JavaScript functions from the Vega expression language that were not meant to be supported",
    "weakness": "",
    "impact": "arbitrary Javascript from running",
    "vector": "",
    "attacker": "",
    "product": "vega",
    "version": [
      "5.30.0 and lower",
      "5.31.0"
    ],
    "component": ""
  },
  "reference_content": "## CVE-2025-26619 Analysis\n\nThe provided content relates to CVE-2025-26619. It provides significantly more detail than the placeholder CVE description.\n\n**Root cause of vulnerability:**\n\nThe vulnerability stems from the ability to call JavaScript functions from the Vega expression language that are not intended to be supported. Specifically, the `filter` property of a `select` parameter in Vega-Lite exposes the browser's `Window` object via `event.view`, allowing arbitrary code execution.\n\n**Weaknesses/vulnerabilities present:**\n\n*   **Cross-Site Scripting (XSS):** The core vulnerability is an XSS issue.\n*   **Unsafe Function Call:**  The Vega expression language allows calling functions without proper sanitization or restriction.\n*   **Exposure of `event.view`:** The exposure of the `event.view` object provides access to the browser's window object, enabling arbitrary JavaScript execution.\n\n**Impact of exploitation:**\n\nSuccessful exploitation allows an attacker to execute arbitrary JavaScript code in the context of the user's browser. This can lead to:\n\n*   Stealing sensitive information (cookies, tokens, etc.).\n*   Defacing the web page.\n*   Redirecting the user to malicious websites.\n*   Performing actions on behalf of the user.\n\n**Attack vectors:**\n\n*   Crafting a malicious Vega-Lite specification that includes a `select` parameter with a vulnerable `filter` expression.\n*   Embedding this malicious specification in a web page or application that uses Vega-Lite.\n\n**Required attacker capabilities/position:**\n\n*   The attacker needs to be able to control or influence the Vega-Lite specification used by the application. This could involve:\n    *   Directly modifying the specification if they have access.\n    *   Injecting malicious code into a data source that is used to generate the specification.\n*   Basic understanding of JavaScript and Vega-Lite syntax.\n\n**Mitigation or fix:**\n\n*   **Upgrade:** Upgrade to Vega version 5.31.0 or later, or Vega-Functions version 5.16.0 or later.\n*   **Disable `expressionInterpreter`:** Run Vega without the `vega.expressionInterpreter`. This is slower but avoids the vulnerability.\n*   **CSP Safe Mode:** Use Vega in CSP (Content Security Policy) safe mode, which prevents arbitrary JavaScript from running.\n*   **Input Validation:** Implement strict input validation and sanitization of any data used to generate Vega-Lite specifications.\n\nThe content also provides a proof-of-concept (PoC) Vega-Lite specification that demonstrates the vulnerability.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-95 | Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') | 0.8 | Variant | Allowed | Primary CWE. The vulnerability allows calling Javascript functions that were not meant to be supported, which directly aligns with the 'Eval Injection' concept where input is used in dynamic evaluation. |\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 0.7 | Base | Allowed | Secondary CWE. The ability to execute arbitrary Javascript code in the context of the user's browser aligns with the impact of XSS. |\n| CWE-917 | Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection') | 0.6 | Base | Allowed | Secondary CWE. The Vega expression language allows calling functions without proper sanitization, which is a form of expression language injection. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.7\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary weakness is CWE-95, which is a variant. CWE-79 and CWE-917 are related as they both describe issues where improper neutralization leads to unintended code execution. CWE-95 is a specific type of code injection. CWE-79 ('Cross-site Scripting') describes the impact of the vulnerability, and CWE-917 ('Expression Language Injection') describes how the injection occurs.\n\n```mermaid\ngraph TD\n    cwe95[\"CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    cwe917[\"CWE-917: Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')\"]\n    cwe95 -->|CAN_PRECEDE| cwe79\n    cwe917 -->|CAN_PRECEDE| cwe95\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe95 primary\n    class cwe79,cwe917 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with the **improper neutralization** of Javascript functions, leading to **'Eval Injection'** (CWE-95). This allows for the execution of arbitrary Javascript code in the user's browser, which manifests as **Cross-site Scripting (XSS)** (CWE-79). The improper neutralization can also be seen as an **Expression Language Injection** (CWE-917).\n\n## Summary of Analysis\nThe vulnerability allows the calling of arbitrary Javascript functions in Vega, which leads to the execution of arbitrary Javascript code in the context of the user's browser. This is a classic case of **'Eval Injection'** (CWE-95), as the Vega expression language does not properly neutralize the input, allowing for the execution of unintended code. The evidence lies in the \"**it was possible to call JavaScript functions from the Vega expression language that were not meant to be supported**\" phrase. The impact of this vulnerability is Cross-site Scripting (XSS), as an attacker can inject malicious Javascript code into the user's browser. This can be classified as CWE-79. The ability to call functions without proper sanitization can be viewed as an Expression Language Injection (CWE-917). The selection of CWE-95 as the primary weakness is based on the root cause, while CWE-79 and CWE-917 are based on the impact and mechanism, respectively.\n\nCWE-674 (Uncontrolled Recursion), CWE-1333 (Inefficient Regular Expression Complexity), CWE-863 (Incorrect Authorization), CWE-94 (Improper Control of Generation of Code ('Code Injection')), CWE-138 (Improper Neutralization of Special Elements), CWE-624 (Executable Regular Expression Error), and CWE-184 (Incomplete List of Disallowed Inputs) were considered but not selected. CWE-674 and CWE-1333 are not relevant to the vulnerability. CWE-863 is not relevant because there is no mention of authorization issues. CWE-94 is similar to CWE-95 but is more general and less specific. CWE-138 is too broad and doesn't fit the specific context of the vulnerability. CWE-624 and CWE-184 are not applicable to the vulnerability.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-95 | Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') | 0.8 | Variant | Allowed | Primary CWE. The vulnerability allows calling Javascript functions that were not meant to be supported, which directly aligns with the 'Eval Injection' concept where input is used in dynamic evaluation. |\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 0.7 | Base | Allowed | Secondary CWE. The ability to execute arbitrary Javascript code in the context of the user's browser aligns with the impact of XSS. |\n| CWE-917 | Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection') | 0.6 | Base | Allowed | Secondary CWE. The Vega expression language allows calling functions without proper sanitization, which is a form of expression language injection. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.7\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary weakness is CWE-95, which is a variant. CWE-79 and CWE-917 are related as they both describe issues where improper neutralization leads to unintended code execution. CWE-95 is a specific type of code injection. CWE-79 ('Cross-site Scripting') describes the impact of the vulnerability, and CWE-917 ('Expression Language Injection') describes how the injection occurs.\n\n```mermaid\ngraph TD\n    cwe95[\"CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    cwe917[\"CWE-917: Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')\"]\n    cwe95 -->|CAN_PRECEDE| cwe79\n    cwe917 -->|CAN_PRECEDE| cwe95\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe95 primary\n    class cwe79,cwe917 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with the **improper neutralization** of Javascript functions, leading to **'Eval Injection'** (CWE-95). This allows for the execution of arbitrary Javascript code in the user's browser, which manifests as **Cross-site Scripting (XSS)** (CWE-79). The improper neutralization can also be seen as an **Expression Language Injection** (CWE-917).\n\n## Summary of Analysis\nThe vulnerability allows the calling of arbitrary Javascript functions in Vega, which leads to the execution of arbitrary Javascript code in the context of the user's browser. This is a classic case of **'Eval Injection'** (CWE-95), as the Vega expression language does not properly neutralize the input, allowing for the execution of unintended code. The evidence lies in the \"**it was possible to call JavaScript functions from the Vega expression language that were not meant to be supported**\" phrase. The impact of this vulnerability is Cross-site Scripting (XSS), as an attacker can inject malicious Javascript code into the user's browser. This can be classified as CWE-79. The ability to call functions without proper sanitization can be viewed as an Expression Language Injection (CWE-917). The selection of CWE-95 as the primary weakness is based on the root cause, while CWE-79 and CWE-917 are based on the impact and mechanism, respectively.\n\nCWE-674 (Uncontrolled Recursion), CWE-1333 (Inefficient Regular Expression Complexity), CWE-863 (Incorrect Authorization), CWE-94 (Improper Control of Generation of Code ('Code Injection')), CWE-138 (Improper Neutralization of Special Elements), CWE-624 (Executable Regular Expression Error), and CWE-184 (Incomplete List of Disallowed Inputs) were considered but not selected. CWE-674 and CWE-1333 are not relevant to the vulnerability. CWE-863 is not relevant because there is no mention of authorization issues. CWE-94 is similar to CWE-95 but is more general and less specific. CWE-138 is too broad and doesn't fit the specific context of the vulnerability. CWE-624 and CWE-184 are not applicable to the vulnerability.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-863:**\n- 863 (Incorrect Authorization) - ROOT\n\n\n**Chain starting from CWE-94:**\n- 94 (Improper Control of Generation of Code ('Code Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "674",
        "name": "Uncontrolled Recursion",
        "source": "sparse"
      },
      "similarity": 679.4940456332646
    },
    {
      "metadata": {
        "doc_id": "1333",
        "name": "Inefficient Regular Expression Complexity",
        "source": "sparse"
      },
      "similarity": 678.9468056660655
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 675.5161782453088
    },
    {
      "metadata": {
        "doc_id": "95",
        "name": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
        "source": "sparse"
      },
      "similarity": 654.1794037038813
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 648.1501491617668
    },
    {
      "metadata": {
        "doc_id": "917",
        "name": "Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')",
        "source": "sparse"
      },
      "similarity": 645.7953054283458
    },
    {
      "metadata": {
        "doc_id": "94",
        "name": "Improper Control of Generation of Code ('Code Injection')",
        "source": "sparse"
      },
      "similarity": 644.2169598478378
    },
    {
      "metadata": {
        "doc_id": "138",
        "name": "Improper Neutralization of Special Elements",
        "source": "sparse"
      },
      "similarity": 641.1673033818856
    },
    {
      "metadata": {
        "doc_id": "624",
        "name": "Executable Regular Expression Error",
        "type": "Base",
        "original_content": "The product uses a regular expression that either (1) contains an executable component with user-controlled inputs, or (2) allows a user to enable execution by inserting pattern modifiers.",
        "keyphrase_source": "rootcause:it was possible to call JavaScript functions from the Vega expression language that were not meant to be supported",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.3841285167879042,
            "graph": 1.598361068197645
          }
        }
      },
      "similarity": 0.3841285167879042
    },
    {
      "doc_id": "184",
      "text": "CWE-184: Incomplete List of Disallowed Inputs",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "184",
        "name": "Incomplete List of Disallowed Inputs",
        "type": "base",
        "original_content": "CWE-184: Incomplete List of Disallowed Inputs",
        "relationships": [
          {
            "source_id": "184",
            "target_id": "692",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "434",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "78",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "79",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "1023",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "693",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "86",
            "target_id": "184",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "78",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "693",
            "target_id": "184",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "692",
            "target_id": "184",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "692",
            "target_id": "184",
            "label": "STARTSWITH",
            "properties": {
              "view_id": "709"
            }
          },
          {
            "source_id": "625",
            "target_id": "184",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "186",
            "target_id": "184",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1023",
            "target_id": "184",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "79",
                  "184",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "79"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "79",
                  "184",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "79"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "184",
                  "79",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "79"
            }
          }
        },
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-863",
      "CWE-94",
      "CWE-917",
      "CWE-79",
      "CWE-624",
      "CWE-95",
      "CWE-674",
      "CWE-138",
      "CWE-184",
      "CWE-1333"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}