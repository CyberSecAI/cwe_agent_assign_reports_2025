{
  "retriever": "graph",
  "query": "In the Linux kernel, the following vulnerability has been resolved bpf devmap provide rxq after redirect rxq contains a pointer to the device from where the redirect happened. Currently, the BPF program that was executed after a redirect via BPF_MAP_TYPE_DEVMAP* does not have it set. This is particularly bad since accessing ingress_ifindex, e.g. SEC(xdp) int prog(struct xdp_md *pkt) { return bpf_redirect_map(&dev_redirect_map, 0, 0) } SEC(xdp/devmap) int prog_after_redirect(struct xdp_md *pkt) { bpf_printk(ifindex %i, pkt->ingress_ifindex) return XDP_PASS } depends on access to rxq, so a NULL pointer gets dereferenced [ 574.475170] Consider specifically these CWEs: CWE-476 CWE-909 CWE-1285 CWE-362 CWE-822 CWE-252 CWE-665",
  "keyphrases": {
    "original_query": "In the Linux kernel, the following vulnerability has been resolved bpf devmap provide rxq after redirect rxq contains a pointer to the device from where the redirect happened. Currently, the BPF program that was executed after a redirect via BPF_MAP_TYPE_DEVMAP* does not have it set. This is particularly bad since accessing ingress_ifindex, e.g. SEC(xdp) int prog(struct xdp_md *pkt) { return bpf_redirect_map(&dev_redirect_map, 0, 0) } SEC(xdp/devmap) int prog_after_redirect(struct xdp_md *pkt) { bpf_printk(ifindex %i, pkt->ingress_ifindex) return XDP_PASS } depends on access to rxq, so a NULL pointer gets dereferenced [ 574.475170]",
    "enhanced_query": "In the Linux kernel, the following vulnerability has been resolved bpf devmap provide rxq after redirect rxq contains a pointer to the device from where the redirect happened. Currently, the BPF program that was executed after a redirect via BPF_MAP_TYPE_DEVMAP* does not have it set. This is particularly bad since accessing ingress_ifindex, e.g. SEC(xdp) int prog(struct xdp_md *pkt) { return bpf_redirect_map(&dev_redirect_map, 0, 0) } SEC(xdp/devmap) int prog_after_redirect(struct xdp_md *pkt) { bpf_printk(ifindex %i, pkt->ingress_ifindex) return XDP_PASS } depends on access to rxq, so a NULL pointer gets dereferenced [ 574.475170] Consider specifically these CWEs: CWE-476 CWE-909 CWE-1285 CWE-362 CWE-822 CWE-252 CWE-665",
    "cwe_mentions": [
      "CWE-476",
      "CWE-909",
      "CWE-1285",
      "CWE-362",
      "CWE-822",
      "CWE-252",
      "CWE-665"
    ],
    "search_time": 2.9089720249176025
  },
  "timestamp": "2025-07-13 19:55:16",
  "cve_id": "CVE-2024-50162",
  "result_count": 20,
  "results": [
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "type": "Base",
      "score": 2.813244223048255,
      "relationship_count": 0
    },
    {
      "cwe_id": "252",
      "name": "Unchecked Return Value",
      "type": "Base",
      "score": 2.811758048861396,
      "relationship_count": 0
    },
    {
      "cwe_id": "1325",
      "name": "Improperly Controlled Sequential Memory Allocation",
      "type": "base",
      "score": 2.73416,
      "relationship_count": 0
    },
    {
      "cwe_id": "781",
      "name": "Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code",
      "type": "variant",
      "score": 2.6784000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "789",
      "name": "Memory Allocation with Excessive Size Value",
      "type": "variant",
      "score": 2.5507200000000005,
      "relationship_count": 0
    },
    {
      "cwe_id": "129",
      "name": "Improper Validation of Array Index",
      "type": "variant",
      "score": 2.2704,
      "relationship_count": 0
    },
    {
      "cwe_id": "787",
      "name": "Out-of-bounds Write",
      "type": "base",
      "score": 2.2100000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "822",
      "name": "Untrusted Pointer Dereference",
      "type": "Base",
      "score": 2.05741789912521,
      "relationship_count": 0
    },
    {
      "cwe_id": "416",
      "name": "Use After Free",
      "type": "variant",
      "score": 2.04,
      "relationship_count": 0
    },
    {
      "cwe_id": "908",
      "name": "Use of Uninitialized Resource",
      "type": "Base",
      "score": 1.9234901404604259,
      "relationship_count": 0
    },
    {
      "cwe_id": "123",
      "name": "Write-what-where Condition",
      "type": "base",
      "score": 1.7680000000000005,
      "relationship_count": 0
    },
    {
      "cwe_id": "120",
      "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
      "type": "base",
      "score": 1.7680000000000005,
      "relationship_count": 0
    },
    {
      "cwe_id": "364",
      "name": "Signal Handler Race Condition",
      "type": "base",
      "score": 1.7550000000000001,
      "relationship_count": 0
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "type": "Class",
      "score": 1.7476776768284767,
      "relationship_count": 0
    },
    {
      "cwe_id": "1265",
      "name": "Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls",
      "type": "base",
      "score": 1.6848000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "386",
      "name": "Symbolic Name not Mapping to Correct Object",
      "type": "base",
      "score": 1.6744000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "1285",
      "name": "Improper Validation of Specified Index, Position, or Offset in Input",
      "type": "Base",
      "score": 1.667832778433308,
      "relationship_count": 0
    },
    {
      "cwe_id": "782",
      "name": "Exposed IOCTL with Insufficient Access Control",
      "type": "variant",
      "score": 1.6320000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "61",
      "name": "UNIX Symbolic Link (Symlink) Following",
      "type": "compound",
      "score": 1.61,
      "relationship_count": 0
    },
    {
      "cwe_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "type": "base",
      "score": 1.5912000000000004,
      "relationship_count": 0
    }
  ]
}