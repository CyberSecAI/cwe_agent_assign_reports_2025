{
  "cve_id": "CVE-2025-4007",
  "description": "A vulnerability classified as critical was found in Tenda W12 and i24 3.0.0.4(2887)/3.0.0.5(3644). Affected by this vulnerability is the function cgidhcpsCfgSet of the file /goform/modules of the component httpd. The manipulation of the argument json leads to stack-based buffer overflow. The attack can be launched remotely. The exploit has been disclosed to the public and may be used.",
  "key_phrases": {
    "component": "/goform/modules/httpd",
    "rootcause": "",
    "vector": "",
    "weakness": "stack-based buffer overflow, buffer overflow",
    "product": "Tenda W12 and i24",
    "impact": "",
    "attacker": "",
    "version": "3.0.0.4(2887), 3.0.0.5(3644)"
  },
  "reference_content": "## Analysis of CVE-2025-4007 Content\n\nBased on the provided content, this relates to a vulnerability in Tenda routers. Here's a breakdown of the information extracted:\n\n**Root cause of vulnerability:**\n\nThe vulnerability is a stack overflow in the `cgidhcpsCfgSet` function (located in `/bin/httpd`). This is due to a lack of length validation on the `startIp`, `endIp`, `gateway`, `mask`, `preDns`, and `altDns` parameters.\n\n**Weaknesses/vulnerabilities present:**\n\n*   Stack Overflow\n*   Lack of input validation\n\n**Impact of exploitation:**\n\nThe stack overflow allows modification of the `$RA` register, leading to a Remote Code Execution (RCE) vulnerability.\n\n**Attack vectors:**\n\n*   Network-based attack via HTTP POST request to the `/goform/modules` endpoint.\n*   Specifically targeting the `dhcpsCfgSet` parameter with a crafted payload.\n\n**Required attacker capabilities/position:**\n\n*   Network access to the vulnerable Tenda router.\n*   Ability to send HTTP POST requests with a crafted JSON payload.\n\n**Mitigation or fix:**\n\nThe content does not provide information on mitigation or fixes.\n\n**Affected Firmware:**\n\n*   Tenda w12 V3.0.0.5(3644)\n*   Tenda i24 V3.0.0.4(2887)\n\n**Additional Details (more than official CVE description):**\n\nThe provided content includes a Python exploit script demonstrating how to trigger the vulnerability by sending a malicious payload to the `altDns` parameter. The script pads the `altDns` parameter with a large string (`0x4e4` bytes) followed by \"bbbb\" to overwrite the `$RA` register.\n\n**Note:** The provided content offers significantly more detail than a typical CVE description, including a proof-of-concept exploit.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n\n| CWE ID  | CWE Name                                                                                                | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :------------------------------------------------------------------------------------------------------- | :---------- | :----------------------- | :--------------------------------- | :----------------------------------- |\n| CWE-121 | Stack-based Buffer Overflow                                                                            | 1.0         | Variant                 |                                     | Allowed - Primary CWE               |\n| CWE-120 | Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')                                | 0.7        | Base                 |                                     | Allowed-with-Review - Secondary Candidate              |\n| CWE-119 | Improper Restriction of Operations within the Bounds of a Memory Buffer                               | 0.6         | Class                   |                                     | Discouraged - Secondary Candidate              |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary CWE is CWE-121 **Stack-based Buffer Overflow**. CWE-121 is a variant of the class-level CWE-119 **Improper Restriction of Operations within the Bounds of a Memory Buffer**. CWE-120 **Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')** is also a child of CWE-119. CWE-120 can precede CWE-787 **Out-of-bounds Write**.\n\n```mermaid\ngraph TD\n    cwe121[\"CWE-121: Stack-based Buffer Overflow\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations\"]\n    cwe120[\"CWE-120: Buffer Copy without Checking Size of Input\"]\n    cwe787[\"CWE-787: Out-of-bounds Write\"]\n    \n    cwe121 -->|CHILDOF| cwe119\n    cwe120 -->|CHILDOF| cwe119\n    cwe120 -->|CANPRECEDE| cwe787\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe121 primary\n    class cwe119,cwe120 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with a **stack-based buffer overflow** due to the manipulation of the `json` argument in the `cgidhcpsCfgSet` function, which leads to remote code execution. The chain is:\n\n1.  **Root Cause:** CWE-121 **Stack-based Buffer Overflow** due to insufficient input validation.\n2.  Impact: Remote Code Execution (RCE).\n\n## Summary of Analysis\n\nThe vulnerability is a **stack-based buffer overflow** in the `cgidhcpsCfgSet` function of the `/goform/modules` component. The manipulation of the `json` argument leads to this overflow. This aligns directly with CWE-121 **Stack-based Buffer Overflow**, which is a variant-level CWE, making it a specific and appropriate choice. The detailed analysis of CVE-2025-4007 content confirms the root cause as a stack overflow due to a lack of length validation on input parameters. The provided exploit code further solidifies this classification.\n\nCWE-119 **Improper Restriction of Operations within the Bounds of a Memory Buffer** is a more general class-level CWE. While technically accurate, it is less specific than CWE-121. The MITRE mapping guidance discourages the use of CWE-119 when more specific CWEs are available.\n\nCWE-120 **Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')** is relevant because the vulnerability involves a buffer overflow. However, CWE-121 is more precise because it specifies that the buffer is on the stack.\n\nBased on the evidence and the principle of selecting the most specific CWE, CWE-121 is the primary and most appropriate choice.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\n\n## CWE-121: Stack-based Buffer Overflow\n**Abstraction Level**: Variant\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nA stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-121: Stack-based Buffer Overflow\n**Abstraction Level**: Variant\n**Similarity Score**: 992.95\n**Source**: sparse\n\n**Description**:\nA stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
  "analysis_with_relationships": "# Summary\n\n| CWE ID  | CWE Name                                                                                                | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :------------------------------------------------------------------------------------------------------- | :---------- | :----------------------- | :--------------------------------- | :----------------------------------- |\n| CWE-121 | Stack-based Buffer Overflow                                                                            | 1.0         | Variant                 |                                     | Allowed - Primary CWE               |\n| CWE-120 | Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')                                | 0.7        | Base                 |                                     | Allowed-with-Review - Secondary Candidate              |\n| CWE-119 | Improper Restriction of Operations within the Bounds of a Memory Buffer                               | 0.6         | Class                   |                                     | Discouraged - Secondary Candidate              |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary CWE is CWE-121 **Stack-based Buffer Overflow**. CWE-121 is a variant of the class-level CWE-119 **Improper Restriction of Operations within the Bounds of a Memory Buffer**. CWE-120 **Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')** is also a child of CWE-119. CWE-120 can precede CWE-787 **Out-of-bounds Write**.\n\n```mermaid\ngraph TD\n    cwe121[\"CWE-121: Stack-based Buffer Overflow\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations\"]\n    cwe120[\"CWE-120: Buffer Copy without Checking Size of Input\"]\n    cwe787[\"CWE-787: Out-of-bounds Write\"]\n    \n    cwe121 -->|CHILDOF| cwe119\n    cwe120 -->|CHILDOF| cwe119\n    cwe120 -->|CANPRECEDE| cwe787\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe121 primary\n    class cwe119,cwe120 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with a **stack-based buffer overflow** due to the manipulation of the `json` argument in the `cgidhcpsCfgSet` function, which leads to remote code execution. The chain is:\n\n1.  **Root Cause:** CWE-121 **Stack-based Buffer Overflow** due to insufficient input validation.\n2.  Impact: Remote Code Execution (RCE).\n\n## Summary of Analysis\n\nThe vulnerability is a **stack-based buffer overflow** in the `cgidhcpsCfgSet` function of the `/goform/modules` component. The manipulation of the `json` argument leads to this overflow. This aligns directly with CWE-121 **Stack-based Buffer Overflow**, which is a variant-level CWE, making it a specific and appropriate choice. The detailed analysis of CVE-2025-4007 content confirms the root cause as a stack overflow due to a lack of length validation on input parameters. The provided exploit code further solidifies this classification.\n\nCWE-119 **Improper Restriction of Operations within the Bounds of a Memory Buffer** is a more general class-level CWE. While technically accurate, it is less specific than CWE-121. The MITRE mapping guidance discourages the use of CWE-119 when more specific CWEs are available.\n\nCWE-120 **Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')** is relevant because the vulnerability involves a buffer overflow. However, CWE-121 is more precise because it specifies that the buffer is on the stack.\n\nBased on the evidence and the principle of selecting the most specific CWE, CWE-121 is the primary and most appropriate choice.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\n\n## CWE-121: Stack-based Buffer Overflow\n**Abstraction Level**: Variant\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nA stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-121: Stack-based Buffer Overflow\n**Abstraction Level**: Variant\n**Similarity Score**: 992.95\n**Source**: sparse\n\n**Description**:\nA stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-119:**\n- 119 (Improper Restriction of Operations within the Bounds of a Memory Buffer) - ROOT\n\n\n**Chain starting from CWE-121:**\n- 121 (Stack-based Buffer Overflow) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "119",
        "name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Buffer Overflow",
        "match_reason": "exact_match_compound_part_1"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "190",
        "name": "Integer Overflow or Wraparound",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Overflow",
        "match_reason": "term_in_phrase_compound_part_0"
      },
      "similarity": 800.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "120",
        "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Classic Buffer Overflow",
        "match_reason": "phrase_in_term_compound_part_1"
      },
      "similarity": 700.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "121",
        "name": "Stack-based Buffer Overflow",
        "source": "sparse"
      },
      "similarity": 456.33151793588013
    },
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "sparse"
      },
      "similarity": 436.8783523642264
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 420.55301254716665
    },
    {
      "metadata": {
        "doc_id": "125",
        "name": "Out-of-bounds Read",
        "source": "sparse"
      },
      "similarity": 415.3416164755244
    },
    {
      "metadata": {
        "doc_id": "674",
        "name": "Uncontrolled Recursion",
        "source": "sparse"
      },
      "similarity": 410.2317643932195
    },
    {
      "metadata": {
        "doc_id": "78",
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "type": "Base",
        "original_content": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
        "keyphrase_source": "weakness:stack-based buffer overflow",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.6404126320913023,
            "sparse": 126.56477864084299
          }
        }
      },
      "similarity": 0.6404126320913023
    },
    {
      "doc_id": "128",
      "text": "CWE-128: Wrap-around Error",
      "score": 2.9120000000000004,
      "metadata": {
        "doc_id": "128",
        "name": "Wrap-around Error",
        "type": "base",
        "original_content": "CWE-128: Wrap-around Error",
        "relationships": [
          {
            "source_id": "128",
            "target_id": "190",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "128",
            "target_id": "119",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "128",
            "target_id": "682",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "682",
            "target_id": "128",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "119",
            "target_id": "128",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "119",
                  "128",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "119"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "119",
                  "128",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "119"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "128",
                  "119",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "119"
            },
            "peer_relationship": {
              "path": [
                [
                  "128",
                  "190",
                  "PEEROF"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "190"
            }
          }
        },
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.9120000000000004
          }
        }
      },
      "similarity": 2.9120000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-119",
      "CWE-121",
      "CWE-120",
      "CWE-787"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}