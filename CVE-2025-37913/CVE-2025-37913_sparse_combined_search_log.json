{
  "method": "sparse_combined",
  "query": "In the Linux kernel, the following vulnerability has been resolved net_sched qfq Fix double list add in class with netem as child qdisc As described in Gerrards report [1], there are use cases where a netem child qdisc will make the parent qdiscs enqueue callback reentrant. In the case of qfq, there wont be a UAF, but the code will add the same classifier to the list twice, which will cause memory corruption. This patch checks whether the class was already added to the agg->active list (cl_is_active) before doing the addition to cater for the reentrant case. [1] https//lore.kernel.org/netdev/CAHcdcOm+03OD2j6R0=YHKqmy=VgJ8xEOKuP6c7mSgnp-TEJJbw@mail.gmail.com/",
  "keyphrases": {
    "rootcause": [
      "double list add"
    ],
    "weakness": [
      "memory corruption"
    ]
  },
  "timestamp": "2025-07-12T13:28:57.558016",
  "results_count": 14,
  "results_summary": [
    {
      "doc_id": "787",
      "name": "Out-of-bounds Write",
      "score": 1000.0
    },
    {
      "doc_id": "415",
      "name": "Double Free",
      "score": 504.49036426481325
    },
    {
      "doc_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 496.00672276984494
    },
    {
      "doc_id": "364",
      "name": "Signal Handler Race Condition",
      "score": 477.7535020597503
    },
    {
      "doc_id": "863",
      "name": "Incorrect Authorization",
      "score": 476.0878254626173
    }
  ]
}