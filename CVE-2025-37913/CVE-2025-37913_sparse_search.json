{
  "retriever": "sparse",
  "query": "In the Linux kernel, the following vulnerability has been resolved net_sched qfq Fix double list add in class with netem as child qdisc As described in Gerrards report [1], there are use cases where a netem child qdisc will make the parent qdiscs enqueue callback reentrant. In the case of qfq, there wont be a UAF, but the code will add the same classifier to the list twice, which will cause memory corruption. This patch checks whether the class was already added to the agg->active list (cl_is_active) before doing the addition to cater for the reentrant case. [1] https//lore.kernel.org/netdev/CAHcdcOm+03OD2j6R0=YHKqmy=VgJ8xEOKuP6c7mSgnp-TEJJbw@mail.gmail.com/",
  "keyphrases": {
    "rootcause": [
      "double list add"
    ],
    "weakness": [
      "memory corruption"
    ]
  },
  "timestamp": "2025-07-12 13:28:57",
  "cve_id": "CVE-2025-37913",
  "result_count": 14,
  "results": [
    {
      "cwe_id": "787",
      "name": "Out-of-bounds Write",
      "score": 1000.0,
      "search_source": "alternate_term_match"
    },
    {
      "cwe_id": "415",
      "name": "Double Free",
      "score": 504.49036426481325,
      "search_source": "rootcause:double list add"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 496.00672276984494,
      "search_source": "rootcause:double list add"
    },
    {
      "cwe_id": "364",
      "name": "Signal Handler Race Condition",
      "score": 477.7535020597503,
      "search_source": "rootcause:double list add"
    },
    {
      "cwe_id": "863",
      "name": "Incorrect Authorization",
      "score": 476.0878254626173,
      "search_source": "rootcause:double list add"
    },
    {
      "cwe_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "score": 475.3149953049657,
      "search_source": "rootcause:double list add"
    },
    {
      "cwe_id": "835",
      "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
      "score": 468.5527004281614,
      "search_source": "rootcause:double list add"
    },
    {
      "cwe_id": "191",
      "name": "Integer Underflow (Wrap or Wraparound)",
      "score": 462.36545775883326,
      "search_source": "rootcause:double list add"
    },
    {
      "cwe_id": "79",
      "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
      "score": 458.4263887366259,
      "search_source": "rootcause:double list add"
    },
    {
      "cwe_id": "184",
      "name": "Incomplete List of Disallowed Inputs",
      "score": 456.35669892736706,
      "search_source": "rootcause:double list add"
    },
    {
      "cwe_id": "201",
      "name": "Insertion of Sensitive Information Into Sent Data",
      "score": 454.8394608801127,
      "search_source": "rootcause:double list add"
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "score": 442.4513228866743,
      "search_source": "weakness:memory corruption"
    },
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "score": 432.5813952734736,
      "search_source": "weakness:memory corruption"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 421.9989522957508,
      "search_source": "weakness:memory corruption"
    }
  ]
}