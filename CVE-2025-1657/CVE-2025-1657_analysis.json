{
  "cve_id": "CVE-2025-1657",
  "description": "The Directory Listings WordPress plugin uListing plugin for WordPress is vulnerable to unauthorized modification of data and **PHP Object Injection** due to a **missing capability check** on the stm_listing_ajax AJAX action in all versions up to, and including, 2.1.7. This makes it possible for authenticated attackers, with subscriber-level access and above, to update post meta data and inject PHP Objects that may be unserialized.",
  "key_phrases": {
    "component": "stm_listing_ajax AJAX action",
    "rootcause": "missing capability check",
    "vector": "",
    "weakness": "PHP Object Injection",
    "product": "Directory Listings WordPress plugin uListing plugin for WordPress",
    "impact": "['unauthorized modification of data', 'PHP Object Injection']",
    "attacker": "authenticated attackers",
    "version": "all versions up to and including 2.1.7"
  },
  "reference_content": "## Analysis of CVE-2025-1657 Content - uListing WordPress Plugin\n\n**CVE ID:** CVE-2025-1657\n**CVE Description:** PLACEHOLDER - Implement CVE description retrieval\n\n**Analysis:**\n\nThe provided content is a detailed description of the \"uListing - Directory Listings WordPress Plugin\". It details the plugin's features, installation process, usage, customization options, available add-ons, changelog, and developer information.\n\n**Vulnerability Information:**\n\nThe content *does* contain a section titled \"How can I report security bugs?\". It states:\n\n\"You can report security bugs through the Patchstack Vulnerability Disclosure Program. The Patchstack team help validate, triage and handle any security vulnerabilities. [Report a security vulnerability](https://patchstack.com/database/vdp/ulisting).\"\n\nThis indicates that the plugin developers are aware of the potential for security vulnerabilities and have a process for reporting them. However, the content **does not detail any specific vulnerabilities** or weaknesses within the plugin itself. It only provides a mechanism for reporting them.\n\n**Extracted Information:**\n\n*   **Weaknesses/vulnerabilities present:** The document does not explicitly state any vulnerabilities. It only acknowledges the *possibility* of vulnerabilities and provides a reporting mechanism.\n*   **Attack vectors:** Not specified.\n*   **Required attacker capabilities/position:** Not specified.\n*   **Mitigation or fix:** Not specified.\n*   **Impact of exploitation:** Not specified.\n*   **Root cause of vulnerability:** Not specified.\n\n**Additional Notes:**\n\n*   The changelog section lists numerous fixes, some of which mention \"security changes\" or fixing \"SQL Injection issues\", \"CSRF requests\", and \"Unauthenticated Privilege Escalation\". However, these are brief mentions without specific details.\n*   The content provides more detail about the plugin's functionality than the placeholder CVE description.\n\n**Conclusion:**\n\nWhile the content confirms the existence of a vulnerability disclosure program for the uListing plugin, it does not provide sufficient information to understand the nature of any specific vulnerabilities related to CVE-2025-1657.\n\n**Response:**\n\nNOINFO",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-862 | Missing Authorization | 0.9 | Class | Allowed-with-Review | Primary CWE. The code doesn't check if the user has permission to perform an action. |\n| CWE-502 | Deserialization of Untrusted Data | 0.7 | Base | Allowed | Secondary. PHP Objects can be injected and may be unserialized leading to this. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary weakness is the **missing authorization** check (CWE-862). This **allows attackers to inject PHP Objects**, which can then be **deserialized** (CWE-502), leading to potential code execution or other malicious outcomes.\n\n```mermaid\ngraph TD\n    cwe862[\"CWE-862: Missing Authorization\"]\n    cwe502[\"CWE-502: Deserialization of Untrusted Data\"]\n\n    cwe502 -- CANFOLLOW --> cwe862\n    cwe862 -- CANPRECEDE --> cwe502\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe862 primary\n    class cwe502 secondary\n```\n\n## Vulnerability Chain\n1.  **Missing Authorization (CWE-862):** The application **fails to check** if the authenticated user has the necessary permissions to perform the requested action (stm_listing_ajax AJAX action). This is the root cause.\n2.  **PHP Object Injection:** Because of the **missing capability check**, an attacker can **inject malicious PHP objects** by updating post meta data.\n3.  **Deserialization of Untrusted Data (CWE-502):** The injected PHP objects may be unserialized by the application, potentially leading to code execution.\n\n## Summary of Analysis\nThe primary CWE is CWE-862 (**Missing Authorization**), because the vulnerability stems from the fact that there is **no check to verify** if the authenticated user has the necessary permissions to perform the requested action. The vulnerability description clearly states a \"**missing capability check**\".\n\nThe secondary CWE is CWE-502 (**Deserialization of Untrusted Data**), because the impact includes \"**PHP Object Injection** that may be unserialized.\" The **lack of authorization** allows the attacker to **inject malicious PHP objects**, which can be **deserialized**, potentially leading to arbitrary code execution.\n\nCWE-862 is a Class-level CWE, and per the mapping guidance, we should look for more specific Base-level children, but there isn't one that fits the **missing capability check**.\n\nCWE-502 is a Base-level CWE and accurately describes the impact of the vulnerability.\n\nThe evidence for these mappings comes directly from the vulnerability description.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-862 | Missing Authorization | 0.9 | Class | Allowed-with-Review | Primary CWE. The code doesn't check if the user has permission to perform an action. |\n| CWE-502 | Deserialization of Untrusted Data | 0.7 | Base | Allowed | Secondary. PHP Objects can be injected and may be unserialized leading to this. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary weakness is the **missing authorization** check (CWE-862). This **allows attackers to inject PHP Objects**, which can then be **deserialized** (CWE-502), leading to potential code execution or other malicious outcomes.\n\n```mermaid\ngraph TD\n    cwe862[\"CWE-862: Missing Authorization\"]\n    cwe502[\"CWE-502: Deserialization of Untrusted Data\"]\n\n    cwe502 -- CANFOLLOW --> cwe862\n    cwe862 -- CANPRECEDE --> cwe502\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe862 primary\n    class cwe502 secondary\n```\n\n## Vulnerability Chain\n1.  **Missing Authorization (CWE-862):** The application **fails to check** if the authenticated user has the necessary permissions to perform the requested action (stm_listing_ajax AJAX action). This is the root cause.\n2.  **PHP Object Injection:** Because of the **missing capability check**, an attacker can **inject malicious PHP objects** by updating post meta data.\n3.  **Deserialization of Untrusted Data (CWE-502):** The injected PHP objects may be unserialized by the application, potentially leading to code execution.\n\n## Summary of Analysis\nThe primary CWE is CWE-862 (**Missing Authorization**), because the vulnerability stems from the fact that there is **no check to verify** if the authenticated user has the necessary permissions to perform the requested action. The vulnerability description clearly states a \"**missing capability check**\".\n\nThe secondary CWE is CWE-502 (**Deserialization of Untrusted Data**), because the impact includes \"**PHP Object Injection** that may be unserialized.\" The **lack of authorization** allows the attacker to **inject malicious PHP objects**, which can be **deserialized**, potentially leading to arbitrary code execution.\n\nCWE-862 is a Class-level CWE, and per the mapping guidance, we should look for more specific Base-level children, but there isn't one that fits the **missing capability check**.\n\nCWE-502 is a Base-level CWE and accurately describes the impact of the vulnerability.\n\nThe evidence for these mappings comes directly from the vulnerability description.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-502:**\n- 502 (Deserialization of Untrusted Data) - ROOT\n\n\n**Chain starting from CWE-862:**\n- 862 (Missing Authorization) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "502",
        "name": "Deserialization of Untrusted Data",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: PHP Object Injection",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "915",
        "name": "Improperly Controlled Modification of Dynamically-Determined Object Attributes",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: PHP Object Injection",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse"
      },
      "similarity": 520.1297134599886
    },
    {
      "metadata": {
        "doc_id": "862",
        "name": "Missing Authorization",
        "source": "sparse"
      },
      "similarity": 506.56769267499635
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 478.0865535245848
    },
    {
      "metadata": {
        "doc_id": "285",
        "name": "Improper Authorization",
        "source": "sparse"
      },
      "similarity": 432.84387447355897
    },
    {
      "metadata": {
        "doc_id": "306",
        "name": "Missing Authentication for Critical Function",
        "source": "sparse"
      },
      "similarity": 422.99088936518626
    },
    {
      "metadata": {
        "doc_id": "138",
        "name": "Improper Neutralization of Special Elements",
        "source": "sparse"
      },
      "similarity": 418.491108299806
    },
    {
      "metadata": {
        "doc_id": "548",
        "name": "Exposure of Information Through Directory Listing",
        "type": "Variant",
        "original_content": "A directory listing is inappropriately exposed, yielding potentially sensitive information to attackers.",
        "keyphrase_source": "weakness:PHP Object Injection",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.5662018738078007
          }
        }
      },
      "similarity": 0.5662018738078007
    },
    {
      "doc_id": "434",
      "text": "The product allows the upload or transfer of dangerous file types that are automatically processed within its environment.",
      "score": 0.5204045785175283,
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "type": "Base",
        "extended_description": null,
        "alternate_terms": [
          "Unrestricted File Upload"
        ],
        "original_content": "The product allows the upload or transfer of dangerous file types that are automatically processed within its environment.",
        "relationships": [
          {
            "source_id": "434",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "183",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "430",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "436",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "351",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "669",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "434",
            "target_id": "669",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "434",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "669",
            "target_id": "434",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "430",
            "target_id": "434",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "434",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "183",
            "target_id": "434",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "source": "graph",
        "sources": [
          "vector",
          "graph"
        ],
        "vector_score": 0.5204045785175283,
        "graph_score": 3.4866,
        "score_components": {
          "relationship_chain": 0.6,
          "explicit_mention": 1.0,
          "abstraction_path": 0.9,
          "sequence_path": 0.6400000000000001
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "863",
                  "942",
                  "PARENTOF"
                ],
                [
                  "942",
                  "183",
                  "CHILDOF"
                ],
                [
                  "183",
                  "434",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.6,
              "type": "relationship_chain",
              "source": "863"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "425",
                  "98",
                  "CANPRECEDE"
                ],
                [
                  "98",
                  "73",
                  "CANFOLLOW"
                ],
                [
                  "73",
                  "434",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.6400000000000001,
              "type": "vulnerability_sequence_forward",
              "source": "425"
            }
          }
        },
        "is_explicit": true,
        "abstraction_level": "base",
        "position": "after",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.47752444719958054,
            "graph": 2.300121831407011
          }
        }
      },
      "similarity": 2.300121831407011
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-502",
      "CWE-862"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}