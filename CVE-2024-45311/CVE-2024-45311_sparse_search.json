{
  "retriever": "sparse",
  "query": "Quinn is a pure-Rust, async-compatible implementation of the IETF QUIC transport protocol. As of quinn-proto 0.11, it is possible for a server to `accept()`, `retry()`, `refuse()`, or `ignore()` an `Incoming` connection. However, calling `retry()` on an unvalidated connection exposes the server to a likely panic in the following situations 1. Calling `refuse` or `ignore` on the resulting validated connection, if a duplicate initial packet is received. This issue can go undetected until a servers `refuse()`/`ignore()` code path is exercised, such as to stop a denial of service attack. 2. Accepting when the initial packet for the resulting validated connection fails to decrypt or exhausts connection IDs, if a similar initial packet that successfully decrypts and doesnt exhaust connection IDs is received. This issue can go undetected if clients are well-behaved. The former situation was observed in a real application, while the latter is only theoretical.",
  "keyphrases": {
    "weakness": [
      "panic when calling retry() on unvalidated connection"
    ]
  },
  "timestamp": "2025-07-13 16:17:48",
  "cve_id": "CVE-2024-45311",
  "result_count": 11,
  "results": [
    {
      "cwe_id": "789",
      "name": "Memory Allocation with Excessive Size Value",
      "score": 751.7905894076309,
      "search_source": "weakness:panic when calling retry() on unvalidated connection"
    },
    {
      "cwe_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "score": 749.5886566228648,
      "search_source": "weakness:panic when calling retry() on unvalidated connection"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 720.2595839414587,
      "search_source": "weakness:panic when calling retry() on unvalidated connection"
    },
    {
      "cwe_id": "617",
      "name": "Reachable Assertion",
      "score": 713.5157157199233,
      "search_source": "weakness:panic when calling retry() on unvalidated connection"
    },
    {
      "cwe_id": "295",
      "name": "Improper Certificate Validation",
      "score": 705.6125923778554,
      "search_source": "weakness:panic when calling retry() on unvalidated connection"
    },
    {
      "cwe_id": "400",
      "name": "Uncontrolled Resource Consumption",
      "score": 704.635733209751,
      "search_source": "weakness:panic when calling retry() on unvalidated connection"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 702.8110929930936,
      "search_source": "weakness:panic when calling retry() on unvalidated connection"
    },
    {
      "cwe_id": "835",
      "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
      "score": 693.5986105225749,
      "search_source": "weakness:panic when calling retry() on unvalidated connection"
    },
    {
      "cwe_id": "346",
      "name": "Origin Validation Error",
      "score": 692.8580036253395,
      "search_source": "weakness:panic when calling retry() on unvalidated connection"
    },
    {
      "cwe_id": "1286",
      "name": "Improper Validation of Syntactic Correctness of Input",
      "score": 689.8094384589118,
      "search_source": "weakness:panic when calling retry() on unvalidated connection"
    },
    {
      "cwe_id": "119",
      "name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
      "score": 237.00729008317597,
      "search_source": "base_query"
    }
  ]
}