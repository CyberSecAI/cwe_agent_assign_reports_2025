{
  "retriever": "graph",
  "query": "In the Linux kernel, the following vulnerability has been resolved RDMA/mlx5 Fix a race for an ODP MR which leads to CQE with error This patch addresses a race condition for an ODP MR that can result in a CQE with an error on the UMR QP. During the __mlx5_ib_dereg_mr() flow, the following sequence of calls occurs mlx5_revoke_mr() mlx5r_umr_revoke_mr() mlx5r_umr_post_send_wait() At this point, the lkey is freed from the hardwares perspective. However, concurrently, mlx5_ib_invalidate_range() might be triggered by another task attempting to invalidate a range for the same freed lkey. This task will - Acquire the umem_odp->umem_mutex lock. - Call mlx5r_umr_update_xlt() on the UMR QP. - Since the lkey has already been freed, this can lead to a CQE error, causing the UMR QP to enter an error state [1]. To resolve this race condition, the umem_odp->umem_mutex lock is now also acquired as part of the mlx5_revoke_mr() scope. Upon successful revoke, we set umem_odp->private which points to that MR to NULL, preventing any further invalidation attempts on its lkey. [1] From dmesg infiniband rocep8s0f0 dump_cqe277(pid 0) WC error 6, Message memory bind operation error cqe_dump 00000000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 cqe_dump 00000010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 cqe_dump 00000020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 cqe_dump 00000030 00 00 00 00 08 00 78 06 25 00 11 b9 00 0e dd d2 WARNING CPU 15 PID 1506 at drivers/infiniband/hw/mlx5/umr.c394 mlx5r_umr_post_send_wait+0x15a/0x2b0 [mlx5_ib] Modules linked in ip6table_mangle ip6table_natip6table_filter ip6_tables iptable_mangle xt_conntrack xt_MASQUERADE nf_conntrack_netlink nfnetlink xt_addrtype iptable_nat nf_nat br_netfilter rpcsec_gss_krb5 auth_rpcgss oid_registry overlay rpcrdma rdma_ucm ib_iser libiscsi scsi_transport_iscsi rdma_cm iw_cm ib_umad ib_ipoib ib_cm mlx5_ib ib_uverbs ib_core fuse mlx5_core CPU 15 UID 0 PID 1506 Comm ibv_rc_pingpong Not tainted 6.12.0-rc7+ #1626 Hardware name QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014 RIP 0010mlx5r_umr_post_send_wait+0x15a/0x2b0 [mlx5_ib] [..] Call Trace mlx5r_umr_update_xlt+0x23c/0x3e0 [mlx5_ib] mlx5_ib_invalidate_range+0x2e1/0x330 [mlx5_ib] __mmu_notifier_invalidate_range_start+0x1e1/0x240 zap_page_range_single+0xf1/0x1a0 madvise_vma_behavior+0x677/0x6e0 do_madvise+0x1a2/0x4b0 __x64_sys_madvise+0x25/0x30 do_syscall_64+0x6b/0x140 entry_SYSCALL_64_after_hwframe+0x76/0x7e Consider specifically these CWEs: CWE-413 CWE-288 CWE-657 CWE-1285 CWE-1342 CWE-909 CWE-362 CWE-294 CWE-302 CWE-306",
  "keyphrases": {
    "original_query": "In the Linux kernel, the following vulnerability has been resolved RDMA/mlx5 Fix a race for an ODP MR which leads to CQE with error This patch addresses a race condition for an ODP MR that can result in a CQE with an error on the UMR QP. During the __mlx5_ib_dereg_mr() flow, the following sequence of calls occurs mlx5_revoke_mr() mlx5r_umr_revoke_mr() mlx5r_umr_post_send_wait() At this point, the lkey is freed from the hardwares perspective. However, concurrently, mlx5_ib_invalidate_range() might be triggered by another task attempting to invalidate a range for the same freed lkey. This task will - Acquire the umem_odp->umem_mutex lock. - Call mlx5r_umr_update_xlt() on the UMR QP. - Since the lkey has already been freed, this can lead to a CQE error, causing the UMR QP to enter an error state [1]. To resolve this race condition, the umem_odp->umem_mutex lock is now also acquired as part of the mlx5_revoke_mr() scope. Upon successful revoke, we set umem_odp->private which points to that MR to NULL, preventing any further invalidation attempts on its lkey. [1] From dmesg infiniband rocep8s0f0 dump_cqe277(pid 0) WC error 6, Message memory bind operation error cqe_dump 00000000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 cqe_dump 00000010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 cqe_dump 00000020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 cqe_dump 00000030 00 00 00 00 08 00 78 06 25 00 11 b9 00 0e dd d2 WARNING CPU 15 PID 1506 at drivers/infiniband/hw/mlx5/umr.c394 mlx5r_umr_post_send_wait+0x15a/0x2b0 [mlx5_ib] Modules linked in ip6table_mangle ip6table_natip6table_filter ip6_tables iptable_mangle xt_conntrack xt_MASQUERADE nf_conntrack_netlink nfnetlink xt_addrtype iptable_nat nf_nat br_netfilter rpcsec_gss_krb5 auth_rpcgss oid_registry overlay rpcrdma rdma_ucm ib_iser libiscsi scsi_transport_iscsi rdma_cm iw_cm ib_umad ib_ipoib ib_cm mlx5_ib ib_uverbs ib_core fuse mlx5_core CPU 15 UID 0 PID 1506 Comm ibv_rc_pingpong Not tainted 6.12.0-rc7+ #1626 Hardware name QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014 RIP 0010mlx5r_umr_post_send_wait+0x15a/0x2b0 [mlx5_ib] [..] Call Trace mlx5r_umr_update_xlt+0x23c/0x3e0 [mlx5_ib] mlx5_ib_invalidate_range+0x2e1/0x330 [mlx5_ib] __mmu_notifier_invalidate_range_start+0x1e1/0x240 zap_page_range_single+0xf1/0x1a0 madvise_vma_behavior+0x677/0x6e0 do_madvise+0x1a2/0x4b0 __x64_sys_madvise+0x25/0x30 do_syscall_64+0x6b/0x140 entry_SYSCALL_64_after_hwframe+0x76/0x7e",
    "enhanced_query": "In the Linux kernel, the following vulnerability has been resolved RDMA/mlx5 Fix a race for an ODP MR which leads to CQE with error This patch addresses a race condition for an ODP MR that can result in a CQE with an error on the UMR QP. During the __mlx5_ib_dereg_mr() flow, the following sequence of calls occurs mlx5_revoke_mr() mlx5r_umr_revoke_mr() mlx5r_umr_post_send_wait() At this point, the lkey is freed from the hardwares perspective. However, concurrently, mlx5_ib_invalidate_range() might be triggered by another task attempting to invalidate a range for the same freed lkey. This task will - Acquire the umem_odp->umem_mutex lock. - Call mlx5r_umr_update_xlt() on the UMR QP. - Since the lkey has already been freed, this can lead to a CQE error, causing the UMR QP to enter an error state [1]. To resolve this race condition, the umem_odp->umem_mutex lock is now also acquired as part of the mlx5_revoke_mr() scope. Upon successful revoke, we set umem_odp->private which points to that MR to NULL, preventing any further invalidation attempts on its lkey. [1] From dmesg infiniband rocep8s0f0 dump_cqe277(pid 0) WC error 6, Message memory bind operation error cqe_dump 00000000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 cqe_dump 00000010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 cqe_dump 00000020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 cqe_dump 00000030 00 00 00 00 08 00 78 06 25 00 11 b9 00 0e dd d2 WARNING CPU 15 PID 1506 at drivers/infiniband/hw/mlx5/umr.c394 mlx5r_umr_post_send_wait+0x15a/0x2b0 [mlx5_ib] Modules linked in ip6table_mangle ip6table_natip6table_filter ip6_tables iptable_mangle xt_conntrack xt_MASQUERADE nf_conntrack_netlink nfnetlink xt_addrtype iptable_nat nf_nat br_netfilter rpcsec_gss_krb5 auth_rpcgss oid_registry overlay rpcrdma rdma_ucm ib_iser libiscsi scsi_transport_iscsi rdma_cm iw_cm ib_umad ib_ipoib ib_cm mlx5_ib ib_uverbs ib_core fuse mlx5_core CPU 15 UID 0 PID 1506 Comm ibv_rc_pingpong Not tainted 6.12.0-rc7+ #1626 Hardware name QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014 RIP 0010mlx5r_umr_post_send_wait+0x15a/0x2b0 [mlx5_ib] [..] Call Trace mlx5r_umr_update_xlt+0x23c/0x3e0 [mlx5_ib] mlx5_ib_invalidate_range+0x2e1/0x330 [mlx5_ib] __mmu_notifier_invalidate_range_start+0x1e1/0x240 zap_page_range_single+0xf1/0x1a0 madvise_vma_behavior+0x677/0x6e0 do_madvise+0x1a2/0x4b0 __x64_sys_madvise+0x25/0x30 do_syscall_64+0x6b/0x140 entry_SYSCALL_64_after_hwframe+0x76/0x7e Consider specifically these CWEs: CWE-413 CWE-288 CWE-657 CWE-1285 CWE-1342 CWE-909 CWE-362 CWE-294 CWE-302 CWE-306",
    "cwe_mentions": [
      "CWE-413",
      "CWE-288",
      "CWE-657",
      "CWE-1285",
      "CWE-1342",
      "CWE-909",
      "CWE-362",
      "CWE-294",
      "CWE-302",
      "CWE-306"
    ],
    "search_time": 3.818122386932373
  },
  "timestamp": "2025-07-12 09:54:04",
  "cve_id": "CVE-2025-21732",
  "result_count": 20,
  "results": [
    {
      "cwe_id": "288",
      "name": "Authentication Bypass Using an Alternate Path or Channel",
      "type": "base",
      "score": 2.4699999999999998,
      "relationship_count": 0
    },
    {
      "cwe_id": "306",
      "name": "Missing Authentication for Critical Function",
      "type": "base",
      "score": 2.4699999999999998,
      "relationship_count": 0
    },
    {
      "cwe_id": "302",
      "name": "Authentication Bypass by Assumed-Immutable Data",
      "type": "base",
      "score": 2.3998000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "294",
      "name": "Authentication Bypass by Capture-replay",
      "type": "base",
      "score": 2.3295999999999997,
      "relationship_count": 0
    },
    {
      "cwe_id": "416",
      "name": "Use After Free",
      "type": "variant",
      "score": 2.04,
      "relationship_count": 0
    },
    {
      "cwe_id": "456",
      "name": "Missing Initialization of a Variable",
      "type": "variant",
      "score": 1.83936,
      "relationship_count": 0
    },
    {
      "cwe_id": "120",
      "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
      "type": "base",
      "score": 1.7680000000000005,
      "relationship_count": 0
    },
    {
      "cwe_id": "123",
      "name": "Write-what-where Condition",
      "type": "base",
      "score": 1.7680000000000005,
      "relationship_count": 0
    },
    {
      "cwe_id": "364",
      "name": "Signal Handler Race Condition",
      "type": "base",
      "score": 1.7550000000000001,
      "relationship_count": 0
    },
    {
      "cwe_id": "1325",
      "name": "Improperly Controlled Sequential Memory Allocation",
      "type": "base",
      "score": 1.6848000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "1265",
      "name": "Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls",
      "type": "base",
      "score": 1.6848000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "386",
      "name": "Symbolic Name not Mapping to Correct Object",
      "type": "base",
      "score": 1.6744000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "61",
      "name": "UNIX Symbolic Link (Symlink) Following",
      "type": "compound",
      "score": 1.61,
      "relationship_count": 0
    },
    {
      "cwe_id": "662",
      "name": "Improper Synchronization",
      "type": "class",
      "score": 1.57952,
      "relationship_count": 0
    },
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "type": "Base",
      "score": 1.5517948352627058,
      "relationship_count": 0
    },
    {
      "cwe_id": "908",
      "name": "Use of Uninitialized Resource",
      "type": "Base",
      "score": 1.5472899639815945,
      "relationship_count": 0
    },
    {
      "cwe_id": "420",
      "name": "Unprotected Alternate Channel",
      "type": "base",
      "score": 1.521,
      "relationship_count": 0
    },
    {
      "cwe_id": "1285",
      "name": "Improper Validation of Specified Index, Position, or Offset in Input",
      "type": "Base",
      "score": 1.5188310719551261,
      "relationship_count": 0
    },
    {
      "cwe_id": "129",
      "name": "Improper Validation of Array Index",
      "type": "variant",
      "score": 1.51536,
      "relationship_count": 0
    },
    {
      "cwe_id": "413",
      "name": "Improper Resource Locking",
      "type": "Base",
      "score": 1.5098357082982747,
      "relationship_count": 0
    }
  ]
}