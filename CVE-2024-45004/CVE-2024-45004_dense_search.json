{
  "retriever": "dense",
  "query": "In the Linux kernel, the following vulnerability has been resolved KEYS trusted dcp fix leak of blob encryption key Trusted keys unseal the key blob on load, but keep the sealed payload in the blob field so that every subsequent read (export) will simply convert this field to hex and send it to userspace. With DCP-based trusted keys, we decrypt the blob encryption key (BEK) in the Kernel due hardware limitations and then decrypt the blob payload. BEK decryption is done in-place which means that the trusted key blob field is modified and it consequently holds the BEK in plain text. Every subsequent read of that key thus send the plain text BEK instead of the encrypted BEK to userspace. This issue only occurs when importing a trusted DCP-based key and then exporting it again. This should rarely happen as the common use cases are to either create a new trusted key and export it, or import a key blob and then just use it without exporting it again. Fix this by performing BEK decryption and encryption in a dedicated buffer. Further always wipe the plain text BEK buffer to prevent leaking the key via uninitialized memory.",
  "keyphrases": {
    "rootcause": [
      "uninitialized memory"
    ],
    "weakness": [
      "Trusted keys unseal the key blob on load"
    ]
  },
  "timestamp": "2025-07-12 04:18:44",
  "cve_id": "CVE-2024-45004",
  "result_count": 20,
  "results": [
    {
      "cwe_id": "1394",
      "name": "Use of Default Cryptographic Key",
      "type": "Base",
      "score": 0.5025931183419151
    },
    {
      "cwe_id": "1231",
      "name": "Improper Prevention of Lock Bit Modification",
      "type": "Base",
      "score": 0.5005955185634638
    },
    {
      "cwe_id": "1291",
      "name": "Public Key Re-Use for Signing both Debug and Production Code",
      "type": "Base",
      "score": 0.49032737823616407
    },
    {
      "cwe_id": "327",
      "name": "Use of a Broken or Risky Cryptographic Algorithm",
      "type": "Class",
      "score": 0.4892843636687753
    },
    {
      "cwe_id": "316",
      "name": "Cleartext Storage of Sensitive Information in Memory",
      "type": "Variant",
      "score": 0.4884848030973703
    },
    {
      "cwe_id": "1326",
      "name": "Missing Immutable Root of Trust in Hardware",
      "type": "Base",
      "score": 0.48832785976984777
    },
    {
      "cwe_id": "321",
      "name": "Use of Hard-coded Cryptographic Key",
      "type": "Variant",
      "score": 0.48571638932801087
    },
    {
      "cwe_id": "822",
      "name": "Untrusted Pointer Dereference",
      "type": "Base",
      "score": 0.4815098584269121
    },
    {
      "cwe_id": "1285",
      "name": "Improper Validation of Specified Index, Position, or Offset in Input",
      "type": "Base",
      "score": 0.47905359992904417
    },
    {
      "cwe_id": "349",
      "name": "Acceptance of Extraneous Untrusted Data With Trusted Data",
      "type": "Base",
      "score": 0.4782612372781617
    },
    {
      "cwe_id": "1233",
      "name": "Security-Sensitive Hardware Controls with Missing Lock Bit Protection",
      "type": "Base",
      "score": 0.4757875843098449
    },
    {
      "cwe_id": "1258",
      "name": "Exposure of Sensitive System Information Due to Uncleared Debug Information",
      "type": "Base",
      "score": 0.4676909928406541
    },
    {
      "cwe_id": "1264",
      "name": "Hardware Logic with Insecure De-Synchronization between Control and Data Channels",
      "type": "Base",
      "score": 0.4664717867631573
    },
    {
      "cwe_id": "1323",
      "name": "Improper Management of Sensitive Trace Data",
      "type": "Base",
      "score": 0.4650113895638885
    },
    {
      "cwe_id": "1243",
      "name": "Sensitive Non-Volatile Information Not Protected During Debug",
      "type": "Base",
      "score": 0.4589188750495333
    },
    {
      "cwe_id": "1240",
      "name": "Use of a Cryptographic Primitive with a Risky Implementation",
      "type": "Base",
      "score": 0.45606738894550364
    },
    {
      "cwe_id": "312",
      "name": "Cleartext Storage of Sensitive Information",
      "type": "Base",
      "score": 0.4545867605797437
    },
    {
      "cwe_id": "318",
      "name": "Cleartext Storage of Sensitive Information in Executable",
      "type": "Variant",
      "score": 0.4537316187624453
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "type": "Class",
      "score": 0.4535615795560807
    },
    {
      "cwe_id": "834",
      "name": "Excessive Iteration",
      "type": "Class",
      "score": 0.45296417924044585
    }
  ]
}