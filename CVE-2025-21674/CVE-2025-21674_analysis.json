{
  "cve_id": "CVE-2025-21674",
  "description": "In the Linux kernel, the following vulnerability has been resolved net/mlx5e Fix **inversion dependency** warning while enabling IPsec tunnel Attempt to enable IPsec packet offload in tunnel mode in debug kernel generates the following kernel panic, which is happening due to two issues 1. In SA add section, the should be _bh() variant when marking SA mode. 2. There is not needed flush_workqueue in SA delete routine. It is not needed as at this stage as it is removed from SADB and the running work will be canceled later in SA free. ===================================================== WARNING SOFTIRQ-safe -> SOFTIRQ-unsafe lock order detected 6.12.0+ #4 Not tainted ----------------------------------------------------- charon/1337 [HC0[0]SC0[4]HE1SE0] is trying to acquire ffff88810f365020 (&xa->xa_lock#24){+.+.}-{33}, at mlx5e_xfrm_del_state+0xca/0x1e0 [mlx5_core] and this task is already holding ffff88813e0f0d48 (&x->lock){+.-.}-{33}, at xfrm_state_delete+0x16/0x30 which would create a new lock dependency (&x->lock){+.-.}-{33} -> (&xa->xa_lock#24){+.+.}-{33} but this new dependency connects a SOFTIRQ-irq-safe lock (&x->lock){+.-.}-{33} ... which became SOFTIRQ-irq-safe at lock_acquire+0x1be/0x520 _raw_spin_lock_bh+0x34/0x40 xfrm_timer_handler+0x91/0xd70 __hrtimer_run_queues+0x1dd/0xa60 hrtimer_run_softirq+0x146/0x2e0 handle_softirqs+0x266/0x860 irq_exit_rcu+0x115/0x1a0 sysvec_apic_timer_interrupt+0x6e/0x90 asm_sysvec_apic_timer_interrupt+0x16/0x20 default_idle+0x13/0x20 default_idle_call+0x67/0xa0 do_idle+0x2da/0x320 cpu_startup_entry+0x50/0x60 start_secondary+0x213/0x2a0 common_startup_64+0x129/0x138 to a SOFTIRQ-irq-unsafe lock (&xa->xa_lock#24){+.+.}-{33} ... which became SOFTIRQ-irq-unsafe at ... lock_acquire+0x1be/0x520 _raw_spin_lock+0x2c/0x40 xa_set_mark+0x70/0x110 mlx5e_xfrm_add_state+0xe48/0x2290 [mlx5_core] xfrm_dev_state_add+0x3bb/0xd70 xfrm_add_sa+0x2451/0x4a90 xfrm_user_rcv_msg+0x493/0x880 netlink_rcv_skb+0x12e/0x380 xfrm_netlink_rcv+0x6d/0x90 netlink_unicast+0x42f/0x740 netlink_sendmsg+0x745/0xbe0 __sock_sendmsg+0xc5/0x190 __sys_sendto+0x1fe/0x2c0 __x64_sys_sendto+0xdc/0x1b0 do_syscall_64+0x6d/0x140 entry_SYSCALL_64_after_hwframe+0x4b/0x53 other info that might help us debug this Possible interrupt unsafe locking scenario CPU0 CPU1 ---- ---- lock(&xa->xa_lock#24) local_irq_disable() lock(&x->lock) lock(&xa->xa_lock#24) lock(&x->lock) *** DEADLOCK *** 2 locks held by charon/1337 #0 ffffffff87f8f858 (&net->xfrm.xfrm_cfg_mutex){+.+.}-{44}, at xfrm_netlink_rcv+0x5e/0x90 #1 ffff88813e0f0d48 (&x->lock){+.-.}-{33}, at xfrm_state_delete+0x16/0x30 the dependencies between SOFTIRQ-irq-safe lock and the holding lock -> (&x->lock){+.-.}-{33} ops 29 { HARDIRQ-ON-W at lock_acquire+0x1be/0x520 _raw_spin_lock_bh+0x34/0x40 xfrm_alloc_spi+0xc0/0xe60 xfrm_alloc_userspi+0x5f6/0xbc0 xfrm_user_rcv_msg+0x493/0x880 netlink_rcv_skb+0x12e/0x380 xfrm_netlink_rcv+0x6d/0x90 netlink_unicast+0x42f/0x740 netlink_sendmsg+0x745/0xbe0 __sock_sendmsg+0xc5/0x190 __sys_sendto+0x1fe/0x2c0 __x64_sys_sendto+0xdc/0x1b0 do_syscall_64+0x6d/0x140 entry_SYSCALL_64_after_hwframe+0x4b/0x53 IN-SOFTIRQ-W at lock_acquire+0x1be/0x520 _raw_spin_lock_bh+0x34/0x40 xfrm_timer_handler+0x91/0xd70 __hrtimer_run_queues+0x1dd/0xa60 ---truncated---",
  "key_phrases": {
    "rootcause": "inversion dependency",
    "weakness": "",
    "impact": "kernel panic",
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": "net/mlx5e"
  },
  "reference_content": "UNRELATED",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-833 | Deadlock | 0.9 | Base | Primary | Allowed |\n| CWE-667 | Improper Locking | 0.7 | Class | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary relationship that influenced the decision was the parent-child relationship between CWE-667 (Improper Locking) and CWE-833 (Deadlock). Since the vulnerability description explicitly mentions a deadlock scenario arising from lock contention, the more specific CWE-833 was chosen as the primary. CWE-667 is still relevant as a contributing factor, representing the general class of improper locking issues that can lead to deadlocks.\n\n```mermaid\ngraph TD\n    cwe833[\"CWE-833: Deadlock\"]\n    cwe667[\"CWE-667: Improper Locking\"]\n    \n    cwe833 -->|CHILDOF| cwe667\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe833 primary\n    class cwe667 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with an **inversion dependency** between locks, leading to a deadlock, which then results in a kernel panic.\n\n## Summary of Analysis\nThe initial analysis considered several CWEs based on the retriever results, but the core issue appears to be a deadlock. The evidence from the vulnerability description clearly points to a locking **inversion dependency** that results in a deadlock, causing a kernel panic. This evidence is strongest for CWE-833.\n\nThe description explicitly states: \"WARNING SOFTIRQ-safe -> SOFTIRQ-unsafe lock order detected\" and \"*** DEADLOCK ***\".\n\nCWE-833 (Deadlock) is at the optimal level of specificity because it directly describes the observed issue. CWE-667 (Improper Locking) is a more general category, but the vulnerability description provides enough information to pinpoint the problem as a deadlock.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.80\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-833: Deadlock\n**Abstraction Level**: Base\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nThe product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-833\nCWE-833 (Deadlock)\n\n*   **Explanation:** The vulnerability description clearly indicates a deadlock situation due to an **inversion dependency** in lock acquisition order. The system hangs because multiple threads are waiting for each other to release locks.\n*   **Security Implications:** Deadlocks can cause denial of service by freezing system resources and preventing further operations.\n*   **Relationship:** CWE-833 is a child of CWE-667 (Improper Locking).\n*   **Primary/Secondary:** Primary.\n*   **Mapping Guidance Influence:** The \"Allowed\" usage for CWE-833 and its Base abstraction level makes it a suitable choice.\n\n## CWE-667\nCWE-667 (Improper Locking)\n\n*   **Explanation:** This CWE represents the general class of improper locking issues. While the specific issue is a deadlock, improper locking is the underlying cause.\n*   **Security Implications:** Improper locking can lead to race conditions, deadlocks, and other concurrency issues that can compromise system integrity and availability.\n*   **Relationship:** CWE-667 is the parent of CWE-833.\n*   **Primary/Secondary:** Secondary.\n*   **Mapping Guidance Influence:** The \"Allowed-with-Review\" usage acknowledges that more specific CWEs might be available.\n\nOther CWEs Considered:\n\n*   CWE-367 (Time-of-check Time-of-use (TOCTOU) Race Condition): While concurrency is involved, the vulnerability is not a TOCTOU race condition. It's a deadlock caused by lock inversion.\n*   CWE-362 (Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')) and CWE-667 (Improper Locking) are more general and less specific than CWE-833. The detailed description points to a deadlock, so CWE-833 is a better fit.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-833 | Deadlock | 0.9 | Base | Primary | Allowed |\n| CWE-667 | Improper Locking | 0.7 | Class | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary relationship that influenced the decision was the parent-child relationship between CWE-667 (Improper Locking) and CWE-833 (Deadlock). Since the vulnerability description explicitly mentions a deadlock scenario arising from lock contention, the more specific CWE-833 was chosen as the primary. CWE-667 is still relevant as a contributing factor, representing the general class of improper locking issues that can lead to deadlocks.\n\n```mermaid\ngraph TD\n    cwe833[\"CWE-833: Deadlock\"]\n    cwe667[\"CWE-667: Improper Locking\"]\n    \n    cwe833 -->|CHILDOF| cwe667\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe833 primary\n    class cwe667 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with an **inversion dependency** between locks, leading to a deadlock, which then results in a kernel panic.\n\n## Summary of Analysis\nThe initial analysis considered several CWEs based on the retriever results, but the core issue appears to be a deadlock. The evidence from the vulnerability description clearly points to a locking **inversion dependency** that results in a deadlock, causing a kernel panic. This evidence is strongest for CWE-833.\n\nThe description explicitly states: \"WARNING SOFTIRQ-safe -> SOFTIRQ-unsafe lock order detected\" and \"*** DEADLOCK ***\".\n\nCWE-833 (Deadlock) is at the optimal level of specificity because it directly describes the observed issue. CWE-667 (Improper Locking) is a more general category, but the vulnerability description provides enough information to pinpoint the problem as a deadlock.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.80\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-833: Deadlock\n**Abstraction Level**: Base\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nThe product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-833\nCWE-833 (Deadlock)\n\n*   **Explanation:** The vulnerability description clearly indicates a deadlock situation due to an **inversion dependency** in lock acquisition order. The system hangs because multiple threads are waiting for each other to release locks.\n*   **Security Implications:** Deadlocks can cause denial of service by freezing system resources and preventing further operations.\n*   **Relationship:** CWE-833 is a child of CWE-667 (Improper Locking).\n*   **Primary/Secondary:** Primary.\n*   **Mapping Guidance Influence:** The \"Allowed\" usage for CWE-833 and its Base abstraction level makes it a suitable choice.\n\n## CWE-667\nCWE-667 (Improper Locking)\n\n*   **Explanation:** This CWE represents the general class of improper locking issues. While the specific issue is a deadlock, improper locking is the underlying cause.\n*   **Security Implications:** Improper locking can lead to race conditions, deadlocks, and other concurrency issues that can compromise system integrity and availability.\n*   **Relationship:** CWE-667 is the parent of CWE-833.\n*   **Primary/Secondary:** Secondary.\n*   **Mapping Guidance Influence:** The \"Allowed-with-Review\" usage acknowledges that more specific CWEs might be available.\n\nOther CWEs Considered:\n\n*   CWE-367 (Time-of-check Time-of-use (TOCTOU) Race Condition): While concurrency is involved, the vulnerability is not a TOCTOU race condition. It's a deadlock caused by lock inversion.\n*   CWE-362 (Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')) and CWE-667 (Improper Locking) are more general and less specific than CWE-833. The detailed description points to a deadlock, so CWE-833 is a better fit.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-667:**\n- 667 (Improper Locking) - ROOT\n\n\n**Chain starting from CWE-833:**\n- 833 (Deadlock) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "667",
        "name": "Improper Locking",
        "source": "sparse"
      },
      "similarity": 1126.8089056383965
    },
    {
      "metadata": {
        "doc_id": "833",
        "name": "Deadlock",
        "source": "sparse"
      },
      "similarity": 1009.5388263344917
    },
    {
      "metadata": {
        "doc_id": "88",
        "name": "Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
        "source": "sparse"
      },
      "similarity": 963.6010397333432
    },
    {
      "metadata": {
        "doc_id": "319",
        "name": "Cleartext Transmission of Sensitive Information",
        "source": "sparse"
      },
      "similarity": 951.3084646230627
    },
    {
      "metadata": {
        "doc_id": "451",
        "name": "User Interface (UI) Misrepresentation of Critical Information",
        "source": "sparse"
      },
      "similarity": 943.5806915188698
    },
    {
      "metadata": {
        "doc_id": "1390",
        "name": "Weak Authentication",
        "source": "sparse"
      },
      "similarity": 909.3638180049361
    },
    {
      "metadata": {
        "doc_id": "770",
        "name": "Allocation of Resources Without Limits or Throttling",
        "source": "sparse"
      },
      "similarity": 896.1985141777852
    },
    {
      "metadata": {
        "doc_id": "367",
        "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
        "source": "sparse"
      },
      "similarity": 884.8271084980722
    },
    {
      "metadata": {
        "doc_id": "1285",
        "name": "Improper Validation of Specified Index, Position, or Offset in Input",
        "type": "Base",
        "original_content": "The product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties.",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5483445066882524,
            "graph": 1.6395328270418494
          }
        }
      },
      "similarity": 0.5483445066882524
    },
    {
      "doc_id": "456",
      "text": "CWE-456: Missing Initialization of a Variable",
      "score": 1.83936,
      "metadata": {
        "doc_id": "456",
        "name": "Missing Initialization of a Variable",
        "type": "variant",
        "original_content": "CWE-456: Missing Initialization of a Variable",
        "relationships": [
          {
            "source_id": "456",
            "target_id": "457",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "456",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "456",
            "target_id": "120",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "456",
            "target_id": "89",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "456",
            "target_id": "665",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1340"
            }
          },
          {
            "source_id": "456",
            "target_id": "665",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1305"
            }
          },
          {
            "source_id": "456",
            "target_id": "909",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "456",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "909",
            "target_id": "456",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "89",
            "target_id": "456",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "665",
            "target_id": "456",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1305"
            }
          },
          {
            "source_id": "457",
            "target_id": "456",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "454",
            "target_id": "456",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "120",
            "target_id": "456",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 0.6,
          "abstraction_path": 0.76,
          "sequence_path": 0.5760000000000002
        },
        "abstraction_factor": 1.2,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "88",
                  "74",
                  "CHILDOF"
                ],
                [
                  "74",
                  "89",
                  "PARENTOF"
                ],
                [
                  "89",
                  "456",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.6,
              "type": "relationship_chain",
              "source": "88"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "909",
                  "456",
                  "PARENTOF"
                ]
              ],
              "score": 0.76,
              "type": "abstraction_path_down",
              "source": "909"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "362",
                  "416",
                  "CANPRECEDE"
                ],
                [
                  "416",
                  "120",
                  "CANPRECEDE"
                ],
                [
                  "120",
                  "456",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.5760000000000002,
              "type": "vulnerability_sequence_forward",
              "source": "362"
            }
          }
        },
        "abstraction_level": "variant",
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 1.83936
          }
        }
      },
      "similarity": 1.83936
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-667",
      "CWE-833",
      "CWE-362",
      "CWE-367"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}