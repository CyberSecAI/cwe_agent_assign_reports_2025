{
  "retriever": "sparse",
  "query": "Refit is an automatic type-safe REST library for .NET Core, Xamarin and .NET The various header-related Refit attributes (Header, HeaderCollection and Authorize) are vulnerable to CRLF injection. The way HTTP headers are added to a request is via the `HttpHeaders.TryAddWithoutValidation` method. This method does not check for CRLF characters in the header value. This means that any headers added to a refit request are vulnerable to CRLF-injection. In general, CRLF-injection into a HTTP header (when using HTTP/1.1) means that one can inject additional HTTP headers or smuggle whole HTTP requests. If an application using the Refit library passes a user-controllable value through to a header, then that application becomes vulnerable to CRLF-injection. This is not necessarily a security issue for a command line application like the one above, but if such code were present in a web application then it becomes vulnerable to request splitting (as shown in the PoC) and thus Server Side Request Forgery. Strictly speaking this is a potential vulnerability in applications using Refit and not in Refit itself. This issue has been addressed in release versions 7.2.22 and 8.0.0 and all users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "keyphrases": {
    "rootcause": [
      "improper input sanitization"
    ],
    "weakness": [
      "CRLF injection"
    ]
  },
  "timestamp": "2025-07-12 05:42:36",
  "cve_id": "CVE-2024-51501",
  "result_count": 11,
  "results": [
    {
      "cwe_id": "113",
      "name": "Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')",
      "score": 1375.061029033331,
      "search_source": "rootcause:improper input sanitization"
    },
    {
      "cwe_id": "93",
      "name": "Improper Neutralization of CRLF Sequences ('CRLF Injection')",
      "score": 1370.9375757956946,
      "search_source": "rootcause:improper input sanitization"
    },
    {
      "cwe_id": "444",
      "name": "Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')",
      "score": 1183.9543723948727,
      "search_source": "rootcause:improper input sanitization"
    },
    {
      "cwe_id": "138",
      "name": "Improper Neutralization of Special Elements",
      "score": 1177.841001195427,
      "search_source": "rootcause:improper input sanitization"
    },
    {
      "cwe_id": "74",
      "name": "Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')",
      "score": 1141.9179025574183,
      "search_source": "rootcause:improper input sanitization"
    },
    {
      "cwe_id": "79",
      "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
      "score": 1131.470320795518,
      "search_source": "rootcause:improper input sanitization"
    },
    {
      "cwe_id": "201",
      "name": "Insertion of Sensitive Information Into Sent Data",
      "score": 1124.9544890322034,
      "search_source": "rootcause:improper input sanitization"
    },
    {
      "cwe_id": "1333",
      "name": "Inefficient Regular Expression Complexity",
      "score": 1119.6458800467713,
      "search_source": "rootcause:improper input sanitization"
    },
    {
      "cwe_id": "1336",
      "name": "Improper Neutralization of Special Elements Used in a Template Engine",
      "score": 1114.61256895532,
      "search_source": "rootcause:improper input sanitization"
    },
    {
      "cwe_id": "212",
      "name": "Improper Removal of Sensitive Information Before Storage or Transfer",
      "score": 1102.1341776024833,
      "search_source": "rootcause:improper input sanitization"
    },
    {
      "cwe_id": "502",
      "name": "Deserialization of Untrusted Data",
      "score": 1028.0031599592933,
      "search_source": "weakness:CRLF injection"
    }
  ]
}