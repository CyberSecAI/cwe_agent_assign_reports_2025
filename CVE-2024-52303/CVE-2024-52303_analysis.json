{
  "cve_id": "CVE-2024-52303",
  "description": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. In versions starting with 3.10.6 and prior to 3.10.11, a **memory leak** can occur when a request produces a MatchInfoError. This was caused by adding an entry to a cache on each request, due to the building of each MatchInfoError producing a unique cache entry. An attacker may be able to exhaust the memory resources of a server by sending a substantial number (100,000s to millions) of such requests. Those who use any middlewares with aiohttp.web should upgrade to version 3.10.11 to receive a patch.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "memory leak",
    "impact": "exhaust memory resources",
    "vector": "MatchInfoError producing unique cache entry",
    "attacker": "attacker",
    "product": "aiohttp",
    "version": "3.10.6 to 3.10.11",
    "component": ""
  },
  "reference_content": "Based on the provided information, here's an analysis of the vulnerability:\n\n**Root Cause:**\n\n- A memory leak occurs because the `_build_middlewares` function, which constructs middleware pipelines for requests, was being cached even when `MatchInfoError` was raised.\n- The issue stems from the fact that `MatchInfoError` handlers are built dynamically for each request, creating a new unique cache entry for each error. This results in uncontrolled growth of the cache with each request that produces a `MatchInfoError`.\n\n**Weaknesses/Vulnerabilities:**\n\n- **Uncontrolled Resource Consumption (CWE-772):** The vulnerability is a memory leak, which falls under the category of uncontrolled resource consumption. The middleware cache grows indefinitely if the application has system routes that cause `MatchInfoError`\n\n**Impact of Exploitation:**\n\n- **Denial of Service (DoS):** An attacker can exhaust the memory resources of a server by sending a large number of requests that generate `MatchInfoError` responses. This can lead to a denial of service, making the server unavailable.\n\n**Attack Vectors:**\n\n- **Network Requests:** The attack vector is through sending HTTP requests that would result in the server returning a `MatchInfoError` response.\n\n**Required Attacker Capabilities/Position:**\n\n- The attacker needs to be able to send network requests to the vulnerable server.\n- The attacker does not need any prior authentication or privileges\n\n**Additional Details:**\n\n- The vulnerability affects `aiohttp` versions `3.10.6` and later, but is fixed in `3.10.11`.\n- The patch, commit `bc15db6`, addresses the vulnerability by not caching the middleware building for `SystemRoute` instances. This prevents the cache from growing indefinitely.\n- The vulnerability is triggered when the user is making use of any middleware with `aiohttp.web`.\n- The patch also includes a test case to prevent future regressions of the memory leak.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-401 | Missing Release of Memory after Effective Lifetime | 0.9 | Variant | Primary | Allowed |\n| CWE-770 | Allocation of Resources Without Limits or Throttling | 0.7 | Base | Secondary | Allowed |\n| CWE-400 | Uncontrolled Resource Consumption | 0.6 | Class | Secondary | Discouraged |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is the **missing release of memory**, represented by CWE-401. This is a variant of the more general class CWE-404 Improper Resource Shutdown or Release. CWE-401 can be caused by **allocation of resources without limits**, CWE-770, which is also relevant. The ultimate impact is **uncontrolled resource consumption**, CWE-400.\n\n```mermaid\ngraph TD\n    cwe401[\"CWE-401: Missing Release of Memory after Effective Lifetime\"]\n    cwe770[\"CWE-770: Allocation of Resources Without Limits or Throttling\"]\n    cwe400[\"CWE-400: Uncontrolled Resource Consumption\"]\n    cwe404[\"CWE-404: Improper Resource Shutdown or Release\"]\n\n    cwe401 -->|CHILDOF| cwe404\n    cwe770 -->|PARENT OF| cwe401\n    cwe400 -->|ROOT CAUSE| cwe401\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe401 primary\n    class cwe770,cwe400 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with the dynamic creation of `MatchInfoError` handlers for each request, leading to the **uncontrolled allocation of resources** (cache entries). This, in turn, results in a **missing release of memory**, ultimately causing **uncontrolled resource consumption** and a denial-of-service.\n\n## Summary of Analysis\nThe primary CWE is CWE-401 Missing Release of Memory after Effective Lifetime, as the core issue is the **memory leak** due to the cache not being properly managed. The vulnerability description explicitly mentions a memory leak, and the reference link content summary highlights that the middleware cache grows indefinitely. CWE-770 is a contributing factor, as the cache grows without any limits. CWE-400 describes the impact, which is **uncontrolled resource consumption**, but is discouraged as a primary mapping.\n\nThe evidence supporting CWE-401 is the \"Vulnerability Description Key Phrases\" which has \"**weakness:** **memory leak**\". The \"CVE Reference Links Content Summary\" states \"**Uncontrolled Resource Consumption (CWE-772):** The vulnerability is a memory leak, which falls under the category of uncontrolled resource consumption.\" This supports the memory leak as the primary issue.\n\nI considered other CWEs, such as CWE-789 (Memory Allocation with Excessive Size Value), but this is not the core issue, as the problem is not the size of the allocation but the failure to release the memory. CWE-772 (Missing Release of Resource after Effective Lifetime) was also considered, but CWE-401 is a more specific variant of this.\n\nThe selected CWEs are at the optimal level of specificity, as they accurately represent the root cause and contributing factors to the vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-789: Memory Allocation with Excessive Size Value\n**Abstraction Level**: Variant\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-401: Missing Release of Memory after Effective Lifetime\n**Abstraction Level**: Variant\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Technical Explanation:**\nThe vulnerability in `aiohttp` arises from a **memory leak** within the middleware handling of `MatchInfoError` responses. Specifically, the `_build_middlewares` function, responsible for constructing middleware pipelines, caches the generated pipelines even when a `MatchInfoError` occurs. Because the `MatchInfoError` handlers are built dynamically for each request, this results in a new unique cache entry for each error. Over time, this leads to an uncontrolled growth of the cache and the **failure to release allocated memory**, aligning perfectly with CWE-401.\n\n**Security Implications:**\nThe security implication of this vulnerability is a denial-of-service (DoS). An attacker can exploit this weakness by sending numerous requests that trigger `MatchInfoError` responses, causing the server's memory resources to be exhausted. This makes the server unavailable to legitimate users.\n\n**Parent-Child Relationships:**\nCWE-401 is a variant of CWE-404 (Improper Resource Shutdown or Release), providing a more specific description of the memory management issue.\n\n**Chain Patterns:**\nThe vulnerability chain starts with the dynamic generation of error handlers, leading to an allocation of memory that is never released, and culminating in resource exhaustion (DoS).\n\n**MITRE Mapping Guidance:**\nThe MITRE mapping guidance for CWE-401 allows its usage.\n\n**Confidence:** 0.9\n\n## CWE-770: Allocation of Resources Without Limits or Throttling\n\n**Technical Explanation:**\nThe vulnerability involves the allocation of cache entries for middleware pipelines without any limits or throttling. Each unique `MatchInfoError` leads to a new cache entry, and there is no mechanism to prevent the cache from growing indefinitely. This aligns with CWE-770, which describes the **allocation of resources without limits**.\n\n**Security Implications:**\nThe lack of limits on resource allocation allows an attacker to exhaust server resources, leading to a denial-of-service (DoS).\n\n**Parent-Child Relationships:**\nCWE-770 is a parent of CWE-789 (Memory Allocation with Excessive Size Value), but the excessive size is not the primary issue here, but the **unlimited allocation**.\n\n**MITRE Mapping Guidance:**\nThe MITRE mapping guidance for CWE-770 allows its usage.\n\n**Confidence:** 0.7\n\n## CWE-400: Uncontrolled Resource Consumption\n\n**Technical Explanation:**\nThe consequence of the memory leak and the **unlimited allocation of resources** is that the server's memory resources are exhausted. This perfectly matches CWE-400 - Uncontrolled Resource Consumption.\n\n**Security Implications:**\nThe main implication is Denial of Service\n\n**MITRE Mapping Guidance:**\nThe MITRE mapping guidance for CWE-400 discourages its usage because it is a level-1 Class (i.e., a child of a Pillar).\n\n**Confidence:** 0.6",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-401 | Missing Release of Memory after Effective Lifetime | 0.9 | Variant | Primary | Allowed |\n| CWE-770 | Allocation of Resources Without Limits or Throttling | 0.7 | Base | Secondary | Allowed |\n| CWE-400 | Uncontrolled Resource Consumption | 0.6 | Class | Secondary | Discouraged |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is the **missing release of memory**, represented by CWE-401. This is a variant of the more general class CWE-404 Improper Resource Shutdown or Release. CWE-401 can be caused by **allocation of resources without limits**, CWE-770, which is also relevant. The ultimate impact is **uncontrolled resource consumption**, CWE-400.\n\n```mermaid\ngraph TD\n    cwe401[\"CWE-401: Missing Release of Memory after Effective Lifetime\"]\n    cwe770[\"CWE-770: Allocation of Resources Without Limits or Throttling\"]\n    cwe400[\"CWE-400: Uncontrolled Resource Consumption\"]\n    cwe404[\"CWE-404: Improper Resource Shutdown or Release\"]\n\n    cwe401 -->|CHILDOF| cwe404\n    cwe770 -->|PARENT OF| cwe401\n    cwe400 -->|ROOT CAUSE| cwe401\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe401 primary\n    class cwe770,cwe400 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with the dynamic creation of `MatchInfoError` handlers for each request, leading to the **uncontrolled allocation of resources** (cache entries). This, in turn, results in a **missing release of memory**, ultimately causing **uncontrolled resource consumption** and a denial-of-service.\n\n## Summary of Analysis\nThe primary CWE is CWE-401 Missing Release of Memory after Effective Lifetime, as the core issue is the **memory leak** due to the cache not being properly managed. The vulnerability description explicitly mentions a memory leak, and the reference link content summary highlights that the middleware cache grows indefinitely. CWE-770 is a contributing factor, as the cache grows without any limits. CWE-400 describes the impact, which is **uncontrolled resource consumption**, but is discouraged as a primary mapping.\n\nThe evidence supporting CWE-401 is the \"Vulnerability Description Key Phrases\" which has \"**weakness:** **memory leak**\". The \"CVE Reference Links Content Summary\" states \"**Uncontrolled Resource Consumption (CWE-772):** The vulnerability is a memory leak, which falls under the category of uncontrolled resource consumption.\" This supports the memory leak as the primary issue.\n\nI considered other CWEs, such as CWE-789 (Memory Allocation with Excessive Size Value), but this is not the core issue, as the problem is not the size of the allocation but the failure to release the memory. CWE-772 (Missing Release of Resource after Effective Lifetime) was also considered, but CWE-401 is a more specific variant of this.\n\nThe selected CWEs are at the optimal level of specificity, as they accurately represent the root cause and contributing factors to the vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-789: Memory Allocation with Excessive Size Value\n**Abstraction Level**: Variant\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-401: Missing Release of Memory after Effective Lifetime\n**Abstraction Level**: Variant\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Technical Explanation:**\nThe vulnerability in `aiohttp` arises from a **memory leak** within the middleware handling of `MatchInfoError` responses. Specifically, the `_build_middlewares` function, responsible for constructing middleware pipelines, caches the generated pipelines even when a `MatchInfoError` occurs. Because the `MatchInfoError` handlers are built dynamically for each request, this results in a new unique cache entry for each error. Over time, this leads to an uncontrolled growth of the cache and the **failure to release allocated memory**, aligning perfectly with CWE-401.\n\n**Security Implications:**\nThe security implication of this vulnerability is a denial-of-service (DoS). An attacker can exploit this weakness by sending numerous requests that trigger `MatchInfoError` responses, causing the server's memory resources to be exhausted. This makes the server unavailable to legitimate users.\n\n**Parent-Child Relationships:**\nCWE-401 is a variant of CWE-404 (Improper Resource Shutdown or Release), providing a more specific description of the memory management issue.\n\n**Chain Patterns:**\nThe vulnerability chain starts with the dynamic generation of error handlers, leading to an allocation of memory that is never released, and culminating in resource exhaustion (DoS).\n\n**MITRE Mapping Guidance:**\nThe MITRE mapping guidance for CWE-401 allows its usage.\n\n**Confidence:** 0.9\n\n## CWE-770: Allocation of Resources Without Limits or Throttling\n\n**Technical Explanation:**\nThe vulnerability involves the allocation of cache entries for middleware pipelines without any limits or throttling. Each unique `MatchInfoError` leads to a new cache entry, and there is no mechanism to prevent the cache from growing indefinitely. This aligns with CWE-770, which describes the **allocation of resources without limits**.\n\n**Security Implications:**\nThe lack of limits on resource allocation allows an attacker to exhaust server resources, leading to a denial-of-service (DoS).\n\n**Parent-Child Relationships:**\nCWE-770 is a parent of CWE-789 (Memory Allocation with Excessive Size Value), but the excessive size is not the primary issue here, but the **unlimited allocation**.\n\n**MITRE Mapping Guidance:**\nThe MITRE mapping guidance for CWE-770 allows its usage.\n\n**Confidence:** 0.7\n\n## CWE-400: Uncontrolled Resource Consumption\n\n**Technical Explanation:**\nThe consequence of the memory leak and the **unlimited allocation of resources** is that the server's memory resources are exhausted. This perfectly matches CWE-400 - Uncontrolled Resource Consumption.\n\n**Security Implications:**\nThe main implication is Denial of Service\n\n**MITRE Mapping Guidance:**\nThe MITRE mapping guidance for CWE-400 discourages its usage because it is a level-1 Class (i.e., a child of a Pillar).\n\n**Confidence:** 0.6\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-400:**\n- 400 (Uncontrolled Resource Consumption) - ROOT\n\n\n**Chain starting from CWE-770:**\n- 770 (Allocation of Resources Without Limits or Throttling) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "401",
        "name": "Missing Release of Memory after Effective Lifetime",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Memory Leak",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "770",
        "name": "Allocation of Resources Without Limits or Throttling",
        "source": "sparse"
      },
      "similarity": 581.0130220625315
    },
    {
      "metadata": {
        "doc_id": "400",
        "name": "Uncontrolled Resource Consumption",
        "source": "sparse"
      },
      "similarity": 557.4351827765825
    },
    {
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "source": "sparse"
      },
      "similarity": 556.9214581999529
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 548.8843752548
    },
    {
      "metadata": {
        "doc_id": "20",
        "name": "Improper Input Validation",
        "source": "sparse"
      },
      "similarity": 542.3523726329386
    },
    {
      "metadata": {
        "doc_id": "287",
        "name": "Improper Authentication",
        "source": "sparse"
      },
      "similarity": 539.5891853843323
    },
    {
      "metadata": {
        "doc_id": "200",
        "name": "Exposure of Sensitive Information to an Unauthorized Actor",
        "source": "sparse"
      },
      "similarity": 538.5964517420107
    },
    {
      "metadata": {
        "doc_id": "1325",
        "name": "Improperly Controlled Sequential Memory Allocation",
        "type": "Base",
        "original_content": "The product manages a group of objects or resources and performs a separate memory allocation for each object, but it does not properly limit the total amount of memory that is consumed by all of the combined objects.",
        "keyphrase_source": "weakness:memory leak",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.3640252589784274,
            "graph": 1.6495110170665934
          }
        }
      },
      "similarity": 0.3640252589784274
    },
    {
      "doc_id": "476",
      "text": "CWE-476: NULL Pointer Dereference",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "476",
        "name": "NULL Pointer Dereference",
        "type": "base",
        "original_content": "CWE-476: NULL Pointer Dereference",
        "relationships": [
          {
            "source_id": "476",
            "target_id": "789",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "476",
            "target_id": "362",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "476",
            "target_id": "252",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "476",
            "target_id": "1325",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "476",
            "target_id": "754",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "476",
            "target_id": "754",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "476",
            "target_id": "710",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "789",
            "target_id": "476",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "754",
            "target_id": "476",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "710",
            "target_id": "476",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "362",
            "target_id": "476",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "252",
            "target_id": "476",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1325",
            "target_id": "476",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "1325",
                  "476",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "1325"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "1325",
                  "476",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_forward",
              "source": "1325"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-400",
      "CWE-770",
      "CWE-404",
      "CWE-401",
      "CWE-789",
      "CWE-772"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}