{
  "retriever": "graph",
  "query": "In the Linux kernel, the following vulnerability has been resolved team prevent adding a device which is already a team device lower Prevent adding a device which is already a team device lower, e.g. adding veth0 if vlan1 was already added and veth0 is a lower of vlan1. This is not useful in practice and can lead to recursive locking $ ip link add veth0 type veth peer name veth1 $ ip link set veth0 up $ ip link set veth1 up $ ip link add link veth0 name veth0.1 type vlan protocol 802.1Q id 1 $ ip link add team0 type team $ ip link set veth0.1 down $ ip link set veth0.1 master team0 team0 Port device veth0.1 added $ ip link set veth0 down $ ip link set veth0 master team0 ============================================ WARNING possible recursive locking detected 6.13.0-rc2-virtme-00441-ga14a429069bb #46 Not tainted -------------------------------------------- ip/7684 is trying to acquire lock ffff888016848e00 (team->team_lock_key){+.+.}-{44}, at team_device_event (drivers/net/team/team_core.c2928 drivers/net/team/team_core.c2951 drivers/net/team/team_core.c2973) but task is already holding lock ffff888016848e00 (team->team_lock_key){+.+.}-{44}, at team_add_slave (drivers/net/team/team_core.c1147 drivers/net/team/team_core.c1977) other info that might help us debug this Possible unsafe locking scenario CPU0 ---- lock(team->team_lock_key) lock(team->team_lock_key) *** DEADLOCK *** May be due to missing lock nesting notation 2 locks held by ip/7684 stack backtrace CPU 3 UID 0 PID 7684 Comm ip Not tainted 6.13.0-rc2-virtme-00441-ga14a429069bb #46 Hardware name QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.16.3-debian-1.16.3-2 04/01/2014 Call Trace dump_stack_lvl (lib/dump_stack.c122) print_deadlock_bug.cold (kernel/locking/lockdep.c3040) __lock_acquire (kernel/locking/lockdep.c3893 kernel/locking/lockdep.c5226) ? netlink_broadcast_filtered (net/netlink/af_netlink.c1548) lock_acquire.part.0 (kernel/locking/lockdep.c467 kernel/locking/lockdep.c5851) ? team_device_event (drivers/net/team/team_core.c2928 drivers/net/team/team_core.c2951 drivers/net/team/team_core.c2973) ? trace_lock_acquire (./include/trace/events/lock.h24 (discriminator 2)) ? team_device_event (drivers/net/team/team_core.c2928 drivers/net/team/team_core.c2951 drivers/net/team/team_core.c2973) ? lock_acquire (kernel/locking/lockdep.c5822) ? team_device_event (drivers/net/team/team_core.c2928 drivers/net/team/team_core.c2951 drivers/net/team/team_core.c2973) __mutex_lock (kernel/locking/mutex.c587 kernel/locking/mutex.c735) ? team_device_event (drivers/net/team/team_core.c2928 drivers/net/team/team_core.c2951 drivers/net/team/team_core.c2973) ? team_device_event (drivers/net/team/team_core.c2928 drivers/net/team/team_core.c2951 drivers/net/team/team_core.c2973) ? fib_sync_up (net/ipv4/fib_semantics.c2167) ? team_device_event (drivers/net/team/team_core.c2928 drivers/net/team/team_core.c2951 drivers/net/team/team_core.c2973) team_device_event (drivers/net/team/team_core.c2928 drivers/net/team/team_core.c2951 drivers/net/team/team_core.c2973) notifier_call_chain (kernel/notifier.c85) call_netdevice_notifiers_info (net/core/dev.c1996) __dev_notify_flags (net/core/dev.c8993) ? __dev_change_flags (net/core/dev.c8975) dev_change_flags (net/core/dev.c9027) vlan_device_event (net/8021q/vlan.c85 net/8021q/vlan.c470) ? br_device_event (net/bridge/br.c143) notifier_call_chain (kernel/notifier.c85) call_netdevice_notifiers_info (net/core/dev.c1996) dev_open (net/core/dev.c1519 net/core/dev.c1505) team_add_slave (drivers/net/team/team_core.c1219 drivers/net/team/team_core.c1977) ? __pfx_team_add_slave (drivers/net/team/team_core.c1972) do_set_master (net/core/rtnetlink.c2917) do_setlink.isra.0 (net/core/rtnetlink.c3117) Consider specifically these CWEs: CWE-1276 CWE-338 CWE-667 CWE-833 CWE-413 CWE-401 CWE-1285 CWE-674 CWE-362",
  "keyphrases": {
    "original_query": "In the Linux kernel, the following vulnerability has been resolved team prevent adding a device which is already a team device lower Prevent adding a device which is already a team device lower, e.g. adding veth0 if vlan1 was already added and veth0 is a lower of vlan1. This is not useful in practice and can lead to recursive locking $ ip link add veth0 type veth peer name veth1 $ ip link set veth0 up $ ip link set veth1 up $ ip link add link veth0 name veth0.1 type vlan protocol 802.1Q id 1 $ ip link add team0 type team $ ip link set veth0.1 down $ ip link set veth0.1 master team0 team0 Port device veth0.1 added $ ip link set veth0 down $ ip link set veth0 master team0 ============================================ WARNING possible recursive locking detected 6.13.0-rc2-virtme-00441-ga14a429069bb #46 Not tainted -------------------------------------------- ip/7684 is trying to acquire lock ffff888016848e00 (team->team_lock_key){+.+.}-{44}, at team_device_event (drivers/net/team/team_core.c2928 drivers/net/team/team_core.c2951 drivers/net/team/team_core.c2973) but task is already holding lock ffff888016848e00 (team->team_lock_key){+.+.}-{44}, at team_add_slave (drivers/net/team/team_core.c1147 drivers/net/team/team_core.c1977) other info that might help us debug this Possible unsafe locking scenario CPU0 ---- lock(team->team_lock_key) lock(team->team_lock_key) *** DEADLOCK *** May be due to missing lock nesting notation 2 locks held by ip/7684 stack backtrace CPU 3 UID 0 PID 7684 Comm ip Not tainted 6.13.0-rc2-virtme-00441-ga14a429069bb #46 Hardware name QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.16.3-debian-1.16.3-2 04/01/2014 Call Trace dump_stack_lvl (lib/dump_stack.c122) print_deadlock_bug.cold (kernel/locking/lockdep.c3040) __lock_acquire (kernel/locking/lockdep.c3893 kernel/locking/lockdep.c5226) ? netlink_broadcast_filtered (net/netlink/af_netlink.c1548) lock_acquire.part.0 (kernel/locking/lockdep.c467 kernel/locking/lockdep.c5851) ? team_device_event (drivers/net/team/team_core.c2928 drivers/net/team/team_core.c2951 drivers/net/team/team_core.c2973) ? trace_lock_acquire (./include/trace/events/lock.h24 (discriminator 2)) ? team_device_event (drivers/net/team/team_core.c2928 drivers/net/team/team_core.c2951 drivers/net/team/team_core.c2973) ? lock_acquire (kernel/locking/lockdep.c5822) ? team_device_event (drivers/net/team/team_core.c2928 drivers/net/team/team_core.c2951 drivers/net/team/team_core.c2973) __mutex_lock (kernel/locking/mutex.c587 kernel/locking/mutex.c735) ? team_device_event (drivers/net/team/team_core.c2928 drivers/net/team/team_core.c2951 drivers/net/team/team_core.c2973) ? team_device_event (drivers/net/team/team_core.c2928 drivers/net/team/team_core.c2951 drivers/net/team/team_core.c2973) ? fib_sync_up (net/ipv4/fib_semantics.c2167) ? team_device_event (drivers/net/team/team_core.c2928 drivers/net/team/team_core.c2951 drivers/net/team/team_core.c2973) team_device_event (drivers/net/team/team_core.c2928 drivers/net/team/team_core.c2951 drivers/net/team/team_core.c2973) notifier_call_chain (kernel/notifier.c85) call_netdevice_notifiers_info (net/core/dev.c1996) __dev_notify_flags (net/core/dev.c8993) ? __dev_change_flags (net/core/dev.c8975) dev_change_flags (net/core/dev.c9027) vlan_device_event (net/8021q/vlan.c85 net/8021q/vlan.c470) ? br_device_event (net/bridge/br.c143) notifier_call_chain (kernel/notifier.c85) call_netdevice_notifiers_info (net/core/dev.c1996) dev_open (net/core/dev.c1519 net/core/dev.c1505) team_add_slave (drivers/net/team/team_core.c1219 drivers/net/team/team_core.c1977) ? __pfx_team_add_slave (drivers/net/team/team_core.c1972) do_set_master (net/core/rtnetlink.c2917) do_setlink.isra.0 (net/core/rtnetlink.c3117)",
    "enhanced_query": "In the Linux kernel, the following vulnerability has been resolved team prevent adding a device which is already a team device lower Prevent adding a device which is already a team device lower, e.g. adding veth0 if vlan1 was already added and veth0 is a lower of vlan1. This is not useful in practice and can lead to recursive locking $ ip link add veth0 type veth peer name veth1 $ ip link set veth0 up $ ip link set veth1 up $ ip link add link veth0 name veth0.1 type vlan protocol 802.1Q id 1 $ ip link add team0 type team $ ip link set veth0.1 down $ ip link set veth0.1 master team0 team0 Port device veth0.1 added $ ip link set veth0 down $ ip link set veth0 master team0 ============================================ WARNING possible recursive locking detected 6.13.0-rc2-virtme-00441-ga14a429069bb #46 Not tainted -------------------------------------------- ip/7684 is trying to acquire lock ffff888016848e00 (team->team_lock_key){+.+.}-{44}, at team_device_event (drivers/net/team/team_core.c2928 drivers/net/team/team_core.c2951 drivers/net/team/team_core.c2973) but task is already holding lock ffff888016848e00 (team->team_lock_key){+.+.}-{44}, at team_add_slave (drivers/net/team/team_core.c1147 drivers/net/team/team_core.c1977) other info that might help us debug this Possible unsafe locking scenario CPU0 ---- lock(team->team_lock_key) lock(team->team_lock_key) *** DEADLOCK *** May be due to missing lock nesting notation 2 locks held by ip/7684 stack backtrace CPU 3 UID 0 PID 7684 Comm ip Not tainted 6.13.0-rc2-virtme-00441-ga14a429069bb #46 Hardware name QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.16.3-debian-1.16.3-2 04/01/2014 Call Trace dump_stack_lvl (lib/dump_stack.c122) print_deadlock_bug.cold (kernel/locking/lockdep.c3040) __lock_acquire (kernel/locking/lockdep.c3893 kernel/locking/lockdep.c5226) ? netlink_broadcast_filtered (net/netlink/af_netlink.c1548) lock_acquire.part.0 (kernel/locking/lockdep.c467 kernel/locking/lockdep.c5851) ? team_device_event (drivers/net/team/team_core.c2928 drivers/net/team/team_core.c2951 drivers/net/team/team_core.c2973) ? trace_lock_acquire (./include/trace/events/lock.h24 (discriminator 2)) ? team_device_event (drivers/net/team/team_core.c2928 drivers/net/team/team_core.c2951 drivers/net/team/team_core.c2973) ? lock_acquire (kernel/locking/lockdep.c5822) ? team_device_event (drivers/net/team/team_core.c2928 drivers/net/team/team_core.c2951 drivers/net/team/team_core.c2973) __mutex_lock (kernel/locking/mutex.c587 kernel/locking/mutex.c735) ? team_device_event (drivers/net/team/team_core.c2928 drivers/net/team/team_core.c2951 drivers/net/team/team_core.c2973) ? team_device_event (drivers/net/team/team_core.c2928 drivers/net/team/team_core.c2951 drivers/net/team/team_core.c2973) ? fib_sync_up (net/ipv4/fib_semantics.c2167) ? team_device_event (drivers/net/team/team_core.c2928 drivers/net/team/team_core.c2951 drivers/net/team/team_core.c2973) team_device_event (drivers/net/team/team_core.c2928 drivers/net/team/team_core.c2951 drivers/net/team/team_core.c2973) notifier_call_chain (kernel/notifier.c85) call_netdevice_notifiers_info (net/core/dev.c1996) __dev_notify_flags (net/core/dev.c8993) ? __dev_change_flags (net/core/dev.c8975) dev_change_flags (net/core/dev.c9027) vlan_device_event (net/8021q/vlan.c85 net/8021q/vlan.c470) ? br_device_event (net/bridge/br.c143) notifier_call_chain (kernel/notifier.c85) call_netdevice_notifiers_info (net/core/dev.c1996) dev_open (net/core/dev.c1519 net/core/dev.c1505) team_add_slave (drivers/net/team/team_core.c1219 drivers/net/team/team_core.c1977) ? __pfx_team_add_slave (drivers/net/team/team_core.c1972) do_set_master (net/core/rtnetlink.c2917) do_setlink.isra.0 (net/core/rtnetlink.c3117) Consider specifically these CWEs: CWE-1276 CWE-338 CWE-667 CWE-833 CWE-413 CWE-401 CWE-1285 CWE-674 CWE-362",
    "cwe_mentions": [
      "CWE-1276",
      "CWE-338",
      "CWE-667",
      "CWE-833",
      "CWE-413",
      "CWE-401",
      "CWE-1285",
      "CWE-674",
      "CWE-362"
    ],
    "search_time": 2.68070650100708
  },
  "timestamp": "2025-07-14 00:46:57",
  "cve_id": "CVE-2024-58071",
  "result_count": 20,
  "results": [
    {
      "cwe_id": "390",
      "name": "Detection of Error Condition Without Action",
      "type": "base",
      "score": 2.2100000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "338",
      "name": "Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
      "type": "base",
      "score": 2.1189999999999998,
      "relationship_count": 0
    },
    {
      "cwe_id": "416",
      "name": "Use After Free",
      "type": "variant",
      "score": 2.04,
      "relationship_count": 0
    },
    {
      "cwe_id": "120",
      "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
      "type": "base",
      "score": 1.7680000000000005,
      "relationship_count": 0
    },
    {
      "cwe_id": "123",
      "name": "Write-what-where Condition",
      "type": "base",
      "score": 1.7680000000000005,
      "relationship_count": 0
    },
    {
      "cwe_id": "364",
      "name": "Signal Handler Race Condition",
      "type": "base",
      "score": 1.7550000000000001,
      "relationship_count": 0
    },
    {
      "cwe_id": "833",
      "name": "Deadlock",
      "type": "Base",
      "score": 1.6958484289213196,
      "relationship_count": 0
    },
    {
      "cwe_id": "413",
      "name": "Improper Resource Locking",
      "type": "Base",
      "score": 1.6944250414650983,
      "relationship_count": 0
    },
    {
      "cwe_id": "1265",
      "name": "Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls",
      "type": "base",
      "score": 1.6848000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "1325",
      "name": "Improperly Controlled Sequential Memory Allocation",
      "type": "base",
      "score": 1.6848000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "252",
      "name": "Unchecked Return Value",
      "type": "base",
      "score": 1.6848000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "386",
      "name": "Symbolic Name not Mapping to Correct Object",
      "type": "base",
      "score": 1.6744000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "662",
      "name": "Improper Synchronization",
      "type": "class",
      "score": 1.6736000000000002,
      "relationship_count": 0
    },
    {
      "cwe_id": "789",
      "name": "Memory Allocation with Excessive Size Value",
      "type": "variant",
      "score": 1.5552000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "type": "Base",
      "score": 1.5175112337271237,
      "relationship_count": 0
    },
    {
      "cwe_id": "129",
      "name": "Improper Validation of Array Index",
      "type": "variant",
      "score": 1.51536,
      "relationship_count": 0
    },
    {
      "cwe_id": "1285",
      "name": "Improper Validation of Specified Index, Position, or Offset in Input",
      "type": "Base",
      "score": 1.47936796871116,
      "relationship_count": 0
    },
    {
      "cwe_id": "415",
      "name": "Double Free",
      "type": "variant",
      "score": 1.4784000000000002,
      "relationship_count": 0
    },
    {
      "cwe_id": "1276",
      "name": "Hardware Child Block Incorrectly Connected to Parent System",
      "type": "Base",
      "score": 1.47454085145873,
      "relationship_count": 0
    },
    {
      "cwe_id": "170",
      "name": "Improper Null Termination",
      "type": "base",
      "score": 1.3010400000000002,
      "relationship_count": 0
    }
  ]
}