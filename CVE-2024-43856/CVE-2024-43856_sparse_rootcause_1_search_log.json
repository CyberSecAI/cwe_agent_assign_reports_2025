{
  "method": "sparse_rootcause_1",
  "query": "In the Linux kernel, the following vulnerability has been resolved dma fix call order in dmam_free_coherent dmam_free_coherent() frees a DMA allocation, which makes the freed vaddr available for reuse, then calls devres_destroy() to remove and free the data structure used to track the DMA allocation. Between the two calls, it is possible for a concurrent task to make an allocation with the same vaddr and add it to the devres list. If this happens, there will be two entries in the devres list with the same vaddr and devres_destroy() can free the wrong entry, triggering the WARN_ON() in dmam_match. Fix by destroying the devres entry before freeing the DMA allocation. kokonut //net/encryption http//sponge2/b9145fe6-0f72-4325-ac2f-a84d81075b03",
  "keyphrases": {
    "rootcause": "wrong call order"
  },
  "timestamp": "2025-07-12T04:07:40.648096",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "score": 663.4564864765422
    },
    {
      "doc_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 629.7725107566679
    },
    {
      "doc_id": "401",
      "name": "Missing Release of Memory after Effective Lifetime",
      "score": 629.6477719085381
    },
    {
      "doc_id": "415",
      "name": "Double Free",
      "score": 619.8759009521598
    },
    {
      "doc_id": "667",
      "name": "Improper Locking",
      "score": 591.6819016544082
    }
  ]
}