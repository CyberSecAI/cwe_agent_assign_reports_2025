{
  "cve_id": "CVE-2024-50346",
  "description": "WebFeed is a lightweight web feed reader extension for Firefox/Chrome. Multiple **HTML injection vulnerabilities** in WebFeed can lead to **CSRF** and UI spoofing attacks. A remote attacker can provide malicious RSS feeds and attract the victim user to visit it using WebFeed. The attacker can then inject malicious HTML into the extension page and fool the victim into sending out HTTP requests to arbitrary sites with the victims credentials. Users are vulnerable to **CSRF** attacks when visiting malicious RSS feeds via WebFeed. Unwanted actions could be executed on the users behalf on arbitrary websites. This issue has been addressed in release version 0.9.2. All users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "key_phrases": {
    "rootcause": "HTML injection vulnerabilities",
    "weakness": "CSRF",
    "impact": "UI spoofing attacks",
    "vector": "malicious RSS feeds",
    "attacker": "remote attacker",
    "product": "WebFeed",
    "version": "prior to 0.9.2",
    "component": ""
  },
  "reference_content": "The provided content relates to CVE-2024-50346.\n\n**Root cause of vulnerability:**\nThe vulnerability stems from multiple instances of improper HTML sanitization and injection within the WebFeed extension. Specifically, the extension uses `innerHTML` to render content from RSS feeds and other sources without adequate sanitization, allowing for injection of malicious HTML. The `html2txt` utility was found to be ineffective against deeply nested HTML structures.\n\n**Weaknesses/vulnerabilities present:**\n- **CWE-79 (Cross-site Scripting):** The core issue is the injection of malicious HTML into the extension's UI. This enables an attacker to execute arbitrary JavaScript code within the context of the extension.\n- **CWE-352 (Cross-Site Request Forgery):** By injecting malicious HTML, specifically forms, an attacker can force the user to perform actions on other websites without their consent or knowledge. This occurs because the extension has `<all_urls>` host permissions, allowing it to make cross-site requests with user cookies.\n\n**Impact of exploitation:**\n- **CSRF attacks:** An attacker can use the injected HTML forms to send cross-site requests with the victim's cookies, potentially leading to unwanted actions on arbitrary websites.\n- **UI spoofing:** Malicious HTML can be injected into the extension's UI, which could trick the user into performing actions they did not intend.\n- Potential execution of arbitrary Javascript within the context of the extension.\n\n**Attack vectors:**\n- A remote attacker provides malicious RSS feeds.\n- The victim user is tricked into visiting the malicious RSS feed using the WebFeed extension.\n- Malicious HTML within the feed is then rendered within the extension's UI.\n\n**Required attacker capabilities/position:**\n- The attacker needs to host a malicious RSS feed.\n- The attacker needs to entice a WebFeed user to subscribe to the malicious feed.\n- No special privileges are required as the exploit is triggered via user interaction with a malicious feed.\n\n**Additional Information:**\n- The vulnerability exists in versions <= 0.9.1 and was patched in version 0.9.2\n- The provided Proof of Concept (PoC) includes an `index.html`, `feed.xml`, and `server.py` demonstrating the vulnerability in a local testing environment.\n- The PoC shows that CSRF attacks are normally blocked by the Same-Origin Policy (SOP) but can be bypassed via the extension's permissions and the HTML injection.\n- The severity of the vulnerability is rated as \"Moderate\".\n- The advisory includes CVSS v4 metrics.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 1.0 | Base | Allowed | Primary CWE. The **HTML injection vulnerability** allows for script execution in the context of the web page. |\n| CWE-352 | Cross-Site Request Forgery (CSRF) | 0.9 | Compound | Allowed | Secondary CWE. The successful injection of HTML allows for the creation of forms that trigger **CSRF** attacks. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.95\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness, CWE-79, is the **improper neutralization of input**, leading to the ability to inject arbitrary HTML. This then allows for the exploitation of CWE-352, **Cross-Site Request Forgery**. CWE-79 is a base level CWE, providing a good level of specificity. CWE-352 is a compound CWE, reflecting the combination of factors that lead to the CSRF vulnerability. The graph visualization below shows the relationship between these two CWEs:\n\n```mermaid\ngraph TD\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n\n    cwe79 -->|CANPRECEDE| cwe352\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe79 primary\n    class cwe352 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **HTML injection vulnerabilities** (CWE-79) allowing an attacker to inject malicious HTML into the extension page. This can then be leveraged to perform **CSRF** attacks (CWE-352) by tricking the user into sending HTTP requests to arbitrary sites with their credentials.\n\n## Summary of Analysis\nThe analysis is strongly based on the provided evidence, especially the \"CVE Reference Links Content Summary\" section, which details the **root cause** as improper HTML sanitization leading to **HTML injection** (CWE-79). This injection enables the **CSRF** vulnerability (CWE-352).\n\nThe vulnerability description specifically mentions \"**HTML injection vulnerabilities** in WebFeed can lead to **CSRF** and UI spoofing attacks.\" and \"Users are vulnerable to **CSRF** attacks when visiting malicious RSS feeds via WebFeed.\"\n\nThe Retriever Results and Complete CWE Specifications confirm that CWE-79 and CWE-352 are relevant. The graph relationships show how CWE-79 can precede CWE-352 in an attack chain. I selected CWE-79 as the primary CWE because the **improper neutralization** is the root cause.\n\nOther CWEs were considered:\n*   CWE-20 (**Improper Input Validation**) was considered, but it is a high-level class and the evidence clearly points to **improper neutralization**, making CWE-79 a more specific and appropriate choice.\n*   CWE-74 (**Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')**) was also considered, but it's discouraged according to mapping guidance.\n*   CWE-116 (**Improper Encoding or Escaping of Output**) is a class CWE, and the vulnerability is more specifically about **improper neutralization** for web page generation.\n*   CWE-93 (**Improper Neutralization of CRLF Sequences ('CRLF Injection')**) and CWE-113 (**Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')**) are specific to CRLF sequences, and the vulnerability is broader than that.\n\nThe selected CWEs are at the optimal level of specificity because they accurately represent the root cause and the resulting vulnerability.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 1.0 | Base | Allowed | Primary CWE. The **HTML injection vulnerability** allows for script execution in the context of the web page. |\n| CWE-352 | Cross-Site Request Forgery (CSRF) | 0.9 | Compound | Allowed | Secondary CWE. The successful injection of HTML allows for the creation of forms that trigger **CSRF** attacks. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.95\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness, CWE-79, is the **improper neutralization of input**, leading to the ability to inject arbitrary HTML. This then allows for the exploitation of CWE-352, **Cross-Site Request Forgery**. CWE-79 is a base level CWE, providing a good level of specificity. CWE-352 is a compound CWE, reflecting the combination of factors that lead to the CSRF vulnerability. The graph visualization below shows the relationship between these two CWEs:\n\n```mermaid\ngraph TD\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n\n    cwe79 -->|CANPRECEDE| cwe352\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe79 primary\n    class cwe352 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **HTML injection vulnerabilities** (CWE-79) allowing an attacker to inject malicious HTML into the extension page. This can then be leveraged to perform **CSRF** attacks (CWE-352) by tricking the user into sending HTTP requests to arbitrary sites with their credentials.\n\n## Summary of Analysis\nThe analysis is strongly based on the provided evidence, especially the \"CVE Reference Links Content Summary\" section, which details the **root cause** as improper HTML sanitization leading to **HTML injection** (CWE-79). This injection enables the **CSRF** vulnerability (CWE-352).\n\nThe vulnerability description specifically mentions \"**HTML injection vulnerabilities** in WebFeed can lead to **CSRF** and UI spoofing attacks.\" and \"Users are vulnerable to **CSRF** attacks when visiting malicious RSS feeds via WebFeed.\"\n\nThe Retriever Results and Complete CWE Specifications confirm that CWE-79 and CWE-352 are relevant. The graph relationships show how CWE-79 can precede CWE-352 in an attack chain. I selected CWE-79 as the primary CWE because the **improper neutralization** is the root cause.\n\nOther CWEs were considered:\n*   CWE-20 (**Improper Input Validation**) was considered, but it is a high-level class and the evidence clearly points to **improper neutralization**, making CWE-79 a more specific and appropriate choice.\n*   CWE-74 (**Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')**) was also considered, but it's discouraged according to mapping guidance.\n*   CWE-116 (**Improper Encoding or Escaping of Output**) is a class CWE, and the vulnerability is more specifically about **improper neutralization** for web page generation.\n*   CWE-93 (**Improper Neutralization of CRLF Sequences ('CRLF Injection')**) and CWE-113 (**Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')**) are specific to CRLF sequences, and the vulnerability is broader than that.\n\nThe selected CWEs are at the optimal level of specificity because they accurately represent the root cause and the resulting vulnerability.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-116:**\n- 116 (Improper Encoding or Escaping of Output) - ROOT\n\n\n**Chain starting from CWE-93:**\n- 93 (Improper Neutralization of CRLF Sequences ('CRLF Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: HTML Injection",
        "match_reason": "term_in_phrase_whole_phrase"
      },
      "similarity": 800.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse"
      },
      "similarity": 666.4928579287493
    },
    {
      "metadata": {
        "doc_id": "93",
        "name": "Improper Neutralization of CRLF Sequences ('CRLF Injection')",
        "source": "sparse"
      },
      "similarity": 646.1027947637667
    },
    {
      "metadata": {
        "doc_id": "138",
        "name": "Improper Neutralization of Special Elements",
        "source": "sparse"
      },
      "similarity": 643.6637524228362
    },
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse"
      },
      "similarity": 633.8322824533379
    },
    {
      "metadata": {
        "doc_id": "20",
        "name": "Improper Input Validation",
        "source": "sparse"
      },
      "similarity": 615.1287735891685
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "source": "sparse"
      },
      "similarity": 614.2573769177666
    },
    {
      "metadata": {
        "doc_id": "74",
        "name": "Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')",
        "source": "sparse"
      },
      "similarity": 608.9898633513667
    },
    {
      "metadata": {
        "doc_id": "1385",
        "name": "Missing Origin Validation in WebSockets",
        "type": "Variant",
        "original_content": "The product uses a WebSocket, but it does not properly verify that the source of data or communication is valid.",
        "keyphrase_source": "weakness:CSRF",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.5641615616244443
          }
        }
      },
      "similarity": 0.5641615616244443
    },
    {
      "doc_id": "117",
      "text": "CWE-117: Improper Output Neutralization for Logs",
      "score": 2.8651999999999997,
      "metadata": {
        "doc_id": "117",
        "name": "Improper Output Neutralization for Logs",
        "type": "base",
        "original_content": "CWE-117: Improper Output Neutralization for Logs",
        "relationships": [
          {
            "source_id": "117",
            "target_id": "93",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "117",
            "target_id": "20",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "700"
            }
          },
          {
            "source_id": "117",
            "target_id": "116",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "93",
            "target_id": "117",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "20",
            "target_id": "117",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "700"
            }
          },
          {
            "source_id": "116",
            "target_id": "117",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "abstraction_path": 0.7200000000000001,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "93",
                  "117",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "93"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "116",
                  "117",
                  "PARENTOF"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "abstraction_path_down",
              "source": "116"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "93",
                  "117",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_forward",
              "source": "93"
            }
          }
        },
        "abstraction_level": "base",
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.8651999999999997
          }
        }
      },
      "similarity": 2.8651999999999997
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-116",
      "CWE-93",
      "CWE-79",
      "CWE-113",
      "CWE-352",
      "CWE-74",
      "CWE-20"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}