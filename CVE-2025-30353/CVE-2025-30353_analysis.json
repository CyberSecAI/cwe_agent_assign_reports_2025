{
  "cve_id": "CVE-2025-30353",
  "description": "Directus is a real-time API and App dashboard for managing SQL database content. Starting in version 9.12.0 and prior to version 11.5.0, when a Flow with the Webhook trigger and the Data of Last Operation response body encounters a ValidationError thrown by a failed condition operation, the API response includes sensitive data. This includes environmental variables, sensitive API keys, user accountability information, and operational data. This issue poses a significant security risk, as any unintended exposure of this data could lead to potential misuse. Version 11.5.0 fixes the issue.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "",
    "impact": "exposure of sensitive data",
    "vector": "",
    "attacker": "",
    "product": "Directus",
    "version": "9.12.0 to 11.5.0",
    "component": "Flow with the Webhook trigger"
  },
  "reference_content": "## Analysis of CVE-2025-30353 Content\n\nThis content is **RELEVANT** to CVE-2025-30353 and provides more detail than the placeholder description.\n\n**Root cause of vulnerability:**\n\nA Flow in Directus, configured with a Webhook trigger and \"Data of Last Operation\" response body, exposes sensitive data when a ValidationError is thrown by a failed condition operation.\n\n**Weaknesses/vulnerabilities present:**\n\n* **CWE-200:** Information Exposure - Sensitive data (environmental variables, API keys, user accountability information, operational data) is unintentionally disclosed in API responses.\n\n**Impact of exploitation:**\n\nExposure of sensitive data could lead to potential misuse, including unauthorized access to systems, data breaches, and compromise of user accounts. Specifically, the exposed data includes:\n* Environmental variables (`$env`)\n* Authorization headers\n* User details under `$accountability` (role, user, etc.)\n* Operational logs (`current_payments`, `$last`)\n\n**Attack vectors:**\n\n* Triggering a Directus Flow with a Webhook trigger and \"Data of Last Operation\" response body.\n* Creating a condition within the Flow that is designed to fail.\n* Sending input data that causes the condition to fail, resulting in a ValidationError.\n* The vulnerability is exploitable over the network (CVSS v3 base metrics: AV:N).\n\n**Required attacker capabilities/position:**\n\n* No privileges are required (CVSS v3 base metrics: PR:N).\n* No user interaction is required (CVSS v3 base metrics: UI:N).\n* An attacker can be remote (CVSS v3 base metrics: AV:N).\n\n**Mitigation or fix:**\n\nThe advisory states that the vulnerability is patched in version 11.5.0. The fix involves ensuring that API responses in the event of a ValidationError do not include sensitive information, only relevant error messages and details.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-201 | Insertion of Sensitive Information Into Sent Data | 1.0 | Base | Allowed | Primary CWE |\n| CWE-209 | Generation of Error Message Containing Sensitive Information | 0.7 | Base | Allowed | Secondary Candidate |\n| CWE-532 | Insertion of Sensitive Information into Log File | 0.6 | Base | Allowed | Secondary Candidate |\n| CWE-200 | Exposure of Sensitive Information to an Unauthorized Actor | 0.5 | Class | Discouraged | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship impacting the decision is the parent-child relationship. CWE-201, CWE-209 and CWE-532 are children of CWE-200, which is a more general case. The vulnerability specifically involves the insertion of sensitive information into sent data, error messages and log files, making CWE-201, CWE-209 and CWE-532 more appropriate. The CANFOLLOW relationship between CWE-201, CWE-209 and CWE-532 and other information exposure CWEs supports the idea of a potential chain of weaknesses related to data handling. Because CWE-201 most closely matches the vulnerability, it is chosen as the primary.\n\n```mermaid\ngraph TD\n    cwe201[\"CWE-201: Insertion of Sensitive Information Into Sent Data\"]\n    cwe209[\"CWE-209: Generation of Error Message Containing Sensitive Information\"]\n    cwe532[\"CWE-532: Insertion of Sensitive Information into Log File\"]\n    cwe200[\"CWE-200: Exposure of Sensitive Information to an Unauthorized Actor\"]\n\n    cwe201 -->|CHILDOF| cwe200\n    cwe209 -->|CHILDOF| cwe200\n    cwe532 -->|CHILDOF| cwe200\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe201 primary\n    class cwe209,cwe532 secondary\n    class cwe200 tertiary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a **misconfiguration** or **improper handling** of error messages within the Directus application. When a ValidationError occurs in a Flow with a Webhook trigger and the \"Data of Last Operation\" response body, sensitive information is inadvertently included in the API response. This leads to the **exposure of sensitive data** such as environmental variables, API keys, user accountability information, and operational data. The chain can be summarized as:\n\n1.  **Improper Handling of Error Messages** (Implicit, not a direct CWE match in the description but inferred)\n2.  **CWE-201: Insertion of Sensitive Information Into Sent Data** - Sensitive data is included in the API response.\n3.  **CWE-209: Generation of Error Message Containing Sensitive Information** - Sensitive data is included in the error message.\n4.  **CWE-532: Insertion of Sensitive Information into Log File** - The sensitive data could also be logged.\n5.  **Impact:** Potential misuse, unauthorized access, data breaches, and compromise of user accounts.\n\n## Summary of Analysis\nThe analysis is based on the provided vulnerability description and the CVE Reference Links Content Summary, which offer sufficient evidence for CWE classification. The primary weakness is the **exposure of sensitive data** due to the inclusion of environmental variables, API keys, user accountability information, and operational data in API responses when a ValidationError occurs. The retriever results and relationship analysis support the selection of CWE-201 as the primary CWE, as it directly addresses the insertion of sensitive information into sent data. The selection of CWE-201 is at the optimal level of specificity, as it accurately represents the vulnerability's root cause and impact.\nThe CVE Reference Links Content Summary explicitly mentions: \"A Flow in Directus, configured with a Webhook trigger and \"Data of Last Operation\" response body, exposes sensitive data when a ValidationError is thrown by a failed condition operation.\"\n\nThe evidence specifically states, \"the API response includes sensitive data. This includes environmental variables, sensitive API keys, user accountability information, and operational data.\" This aligns directly with CWE-201, \"Insertion of Sensitive Information Into Sent Data\".\n\nThe analysis considered CWE-200, \"Exposure of Sensitive Information to an Unauthorized Actor\", but it was deemed too general. While the vulnerability does result in the exposure of sensitive information, the more specific CWE-201, CWE-209 and CWE-532 capture the mechanism by which this exposure occurs (i.e., insertion into sent data, error messages and log files).\nOther CWEs considered but not selected:\n\n*   CWE-306: Missing Authentication for Critical Function - Authentication is not the primary issue. The vulnerability occurs after authentication (if any) when an error occurs.\n*   CWE-918: Server-Side Request Forgery (SSRF) - There's no indication of SSRF in the vulnerability description.\n*   CWE-540: Inclusion of Sensitive Information in Source Code - The issue is not about sensitive information in source code itself.\n*   CWE-184: Incomplete List of Disallowed Inputs - This is not related to input validation.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-201 | Insertion of Sensitive Information Into Sent Data | 1.0 | Base | Allowed | Primary CWE |\n| CWE-209 | Generation of Error Message Containing Sensitive Information | 0.7 | Base | Allowed | Secondary Candidate |\n| CWE-532 | Insertion of Sensitive Information into Log File | 0.6 | Base | Allowed | Secondary Candidate |\n| CWE-200 | Exposure of Sensitive Information to an Unauthorized Actor | 0.5 | Class | Discouraged | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship impacting the decision is the parent-child relationship. CWE-201, CWE-209 and CWE-532 are children of CWE-200, which is a more general case. The vulnerability specifically involves the insertion of sensitive information into sent data, error messages and log files, making CWE-201, CWE-209 and CWE-532 more appropriate. The CANFOLLOW relationship between CWE-201, CWE-209 and CWE-532 and other information exposure CWEs supports the idea of a potential chain of weaknesses related to data handling. Because CWE-201 most closely matches the vulnerability, it is chosen as the primary.\n\n```mermaid\ngraph TD\n    cwe201[\"CWE-201: Insertion of Sensitive Information Into Sent Data\"]\n    cwe209[\"CWE-209: Generation of Error Message Containing Sensitive Information\"]\n    cwe532[\"CWE-532: Insertion of Sensitive Information into Log File\"]\n    cwe200[\"CWE-200: Exposure of Sensitive Information to an Unauthorized Actor\"]\n\n    cwe201 -->|CHILDOF| cwe200\n    cwe209 -->|CHILDOF| cwe200\n    cwe532 -->|CHILDOF| cwe200\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe201 primary\n    class cwe209,cwe532 secondary\n    class cwe200 tertiary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a **misconfiguration** or **improper handling** of error messages within the Directus application. When a ValidationError occurs in a Flow with a Webhook trigger and the \"Data of Last Operation\" response body, sensitive information is inadvertently included in the API response. This leads to the **exposure of sensitive data** such as environmental variables, API keys, user accountability information, and operational data. The chain can be summarized as:\n\n1.  **Improper Handling of Error Messages** (Implicit, not a direct CWE match in the description but inferred)\n2.  **CWE-201: Insertion of Sensitive Information Into Sent Data** - Sensitive data is included in the API response.\n3.  **CWE-209: Generation of Error Message Containing Sensitive Information** - Sensitive data is included in the error message.\n4.  **CWE-532: Insertion of Sensitive Information into Log File** - The sensitive data could also be logged.\n5.  **Impact:** Potential misuse, unauthorized access, data breaches, and compromise of user accounts.\n\n## Summary of Analysis\nThe analysis is based on the provided vulnerability description and the CVE Reference Links Content Summary, which offer sufficient evidence for CWE classification. The primary weakness is the **exposure of sensitive data** due to the inclusion of environmental variables, API keys, user accountability information, and operational data in API responses when a ValidationError occurs. The retriever results and relationship analysis support the selection of CWE-201 as the primary CWE, as it directly addresses the insertion of sensitive information into sent data. The selection of CWE-201 is at the optimal level of specificity, as it accurately represents the vulnerability's root cause and impact.\nThe CVE Reference Links Content Summary explicitly mentions: \"A Flow in Directus, configured with a Webhook trigger and \"Data of Last Operation\" response body, exposes sensitive data when a ValidationError is thrown by a failed condition operation.\"\n\nThe evidence specifically states, \"the API response includes sensitive data. This includes environmental variables, sensitive API keys, user accountability information, and operational data.\" This aligns directly with CWE-201, \"Insertion of Sensitive Information Into Sent Data\".\n\nThe analysis considered CWE-200, \"Exposure of Sensitive Information to an Unauthorized Actor\", but it was deemed too general. While the vulnerability does result in the exposure of sensitive information, the more specific CWE-201, CWE-209 and CWE-532 capture the mechanism by which this exposure occurs (i.e., insertion into sent data, error messages and log files).\nOther CWEs considered but not selected:\n\n*   CWE-306: Missing Authentication for Critical Function - Authentication is not the primary issue. The vulnerability occurs after authentication (if any) when an error occurs.\n*   CWE-918: Server-Side Request Forgery (SSRF) - There's no indication of SSRF in the vulnerability description.\n*   CWE-540: Inclusion of Sensitive Information in Source Code - The issue is not about sensitive information in source code itself.\n*   CWE-184: Incomplete List of Disallowed Inputs - This is not related to input validation.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-540:**\n- 540 (Inclusion of Sensitive Information in Source Code) - ROOT\n\n\n**Chain starting from CWE-306:**\n- 306 (Missing Authentication for Critical Function) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "source": "sparse"
      },
      "similarity": 166.68565934099053
    },
    {
      "metadata": {
        "doc_id": "532",
        "name": "Insertion of Sensitive Information into Log File",
        "source": "sparse"
      },
      "similarity": 159.71926722858183
    },
    {
      "metadata": {
        "doc_id": "209",
        "name": "Generation of Error Message Containing Sensitive Information",
        "source": "sparse"
      },
      "similarity": 156.63461732909062
    },
    {
      "metadata": {
        "doc_id": "1390",
        "name": "Weak Authentication",
        "source": "sparse"
      },
      "similarity": 151.77388705026323
    },
    {
      "metadata": {
        "doc_id": "200",
        "name": "Exposure of Sensitive Information to an Unauthorized Actor",
        "source": "sparse"
      },
      "similarity": 151.54620744852488
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 148.92096950012314
    },
    {
      "metadata": {
        "doc_id": "306",
        "name": "Missing Authentication for Critical Function",
        "source": "sparse"
      },
      "similarity": 148.14838205149562
    },
    {
      "metadata": {
        "doc_id": "918",
        "name": "Server-Side Request Forgery (SSRF)",
        "source": "sparse"
      },
      "similarity": 148.09428549210693
    },
    {
      "metadata": {
        "doc_id": "540",
        "name": "Inclusion of Sensitive Information in Source Code",
        "type": "Base",
        "original_content": "Source code on a web server or repository often contains sensitive information and should generally not be accessible to users.",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.39031620722217586
          }
        }
      },
      "similarity": 0.39031620722217586
    },
    {
      "doc_id": "184",
      "text": "CWE-184: Incomplete List of Disallowed Inputs",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "184",
        "name": "Incomplete List of Disallowed Inputs",
        "type": "base",
        "original_content": "CWE-184: Incomplete List of Disallowed Inputs",
        "relationships": [
          {
            "source_id": "184",
            "target_id": "692",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "434",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "78",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "79",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "1023",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "693",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "86",
            "target_id": "184",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "78",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "693",
            "target_id": "184",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "692",
            "target_id": "184",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "692",
            "target_id": "184",
            "label": "STARTSWITH",
            "properties": {
              "view_id": "709"
            }
          },
          {
            "source_id": "625",
            "target_id": "184",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "186",
            "target_id": "184",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1023",
            "target_id": "184",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "79",
                  "184",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "79"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "79",
                  "184",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "79"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "184",
                  "79",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "79"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-540",
      "CWE-306",
      "CWE-201",
      "CWE-209",
      "CWE-184",
      "CWE-918",
      "CWE-200",
      "CWE-532"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}