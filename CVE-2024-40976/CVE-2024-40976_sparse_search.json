{
  "retriever": "sparse",
  "query": "In the Linux kernel, the following vulnerability has been resolved drm/lima mask irqs in timeout path before hard reset There is a race condition in which a rendering job might take just long enough to trigger the drm sched job timeout handler but also still complete before the hard reset is done by the timeout handler. This runs into race conditions not expected by the timeout handler. In some very specific cases it currently may result in a refcount imbalance on lima_pm_idle, with a stack dump such as [10136.669170] WARNING CPU 0 PID 0 at drivers/gpu/drm/lima/lima_devfreq.c205 lima_devfreq_record_idle+0xa0/0xb0 ... [10136.669459] pc lima_devfreq_record_idle+0xa0/0xb0 ... [10136.669628] Call trace [10136.669634] lima_devfreq_record_idle+0xa0/0xb0 [10136.669646] lima_sched_pipe_task_done+0x5c/0xb0 [10136.669656] lima_gp_irq_handler+0xa8/0x120 [10136.669666] __handle_irq_event_percpu+0x48/0x160 [10136.669679] handle_irq_event+0x4c/0xc0 We can prevent that race condition entirely by masking the irqs at the beginning of the timeout handler, at which point we give up on waiting for that job entirely. The irqs will be enabled again at the next hard reset which is already done as a recovery by the timeout handler.",
  "keyphrases": {
    "rootcause": [
      "race condition"
    ]
  },
  "timestamp": "2025-07-13 12:45:23",
  "cve_id": "CVE-2024-40976",
  "result_count": 11,
  "results": [
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 1000.0,
      "search_source": "alternate_term_match"
    },
    {
      "cwe_id": "364",
      "name": "Signal Handler Race Condition",
      "score": 773.3990515527543,
      "search_source": "rootcause:race condition"
    },
    {
      "cwe_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "score": 767.509090387812,
      "search_source": "rootcause:race condition"
    },
    {
      "cwe_id": "789",
      "name": "Memory Allocation with Excessive Size Value",
      "score": 766.7867038607353,
      "search_source": "rootcause:race condition"
    },
    {
      "cwe_id": "59",
      "name": "Improper Link Resolution Before File Access ('Link Following')",
      "score": 733.0318724126134,
      "search_source": "rootcause:race condition"
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "score": 713.1639165647196,
      "search_source": "rootcause:race condition"
    },
    {
      "cwe_id": "400",
      "name": "Uncontrolled Resource Consumption",
      "score": 694.5806674133715,
      "search_source": "rootcause:race condition"
    },
    {
      "cwe_id": "674",
      "name": "Uncontrolled Recursion",
      "score": 692.0761210772788,
      "search_source": "rootcause:race condition"
    },
    {
      "cwe_id": "835",
      "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
      "score": 684.6179609337529,
      "search_source": "rootcause:race condition"
    },
    {
      "cwe_id": "828",
      "name": "Signal Handler with Functionality that is not Asynchronous-Safe",
      "score": 682.9312805811425,
      "search_source": "rootcause:race condition"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 225.55791720580135,
      "search_source": "base_query"
    }
  ]
}