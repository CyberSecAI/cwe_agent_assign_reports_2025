{
  "cve_id": "CVE-2024-21797",
  "description": "A **command execution vulnerability** exists in the adm.cgi set_TR069() functionality of Wavlink AC3000 M33A8.V5030.210505. A specially crafted HTTP request can lead to arbitrary command execution. An attacker can make an authenticated HTTP request to trigger this vulnerability.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "command execution vulnerability",
    "impact": "arbitrary command execution",
    "vector": "specially crafted HTTP request",
    "attacker": "authenticated attacker",
    "product": "Wavlink AC3000",
    "version": "M33A8.V5030.210505",
    "component": "adm.cgi set_TR069() functionality"
  },
  "reference_content": "Here's an analysis of the provided content regarding CVE-2024-21797:\n\n**Relevant Content:**\n\n**Source:** Both provided contents (talosintelligence.com_8a698251_20250624_171224.html and talosintelligence.com_6dcf197d_20250624_171225.html) are identical and contain the same vulnerability information\n\n*   **Vulnerability:** Command injection vulnerability in the `adm.cgi` set\\_TR069() functionality of Wavlink AC3000 M33A8.V5030.210505.\n*   **Root cause:** The vulnerability is caused by a lack of input filtering for the `TR069_local_port` parameter. This allows attackers to inject subshell commands. The code snippets show that the `TR069_local_port` parameter is copied to the heap, and later used in `iptables` commands without sanitization.\n*   **Weaknesses/vulnerabilities present:** Command injection (CWE-74).\n*   **Impact of exploitation:** Arbitrary command execution.\n*   **Attack vector:** A specially crafted HTTP request to the `adm.cgi` file.\n*   **Required attacker capabilities/position:** An attacker can make an authenticated HTTP request to trigger this vulnerability. The attacker needs to be authenticated.\n*   **Affected version:** Wavlink AC3000 M33A8.V5030.210505\n*   **CVSSv3 Score:** 9.1 - CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:C/C:H/I:H/A:H\n*   **Mitigation or fix:** The vendor has discontinued the product but is working on patches.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-78 | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | 1 | Base | Allowed | Primary CWE: The vulnerability is a command injection vulnerability due to a lack of input filtering, leading to arbitrary command execution. |\n| CWE-20 | Improper Input Validation | 0.7 | Class | Allowed | Secondary CWE: The root cause is **missing input validation** of the `TR069_local_port` parameter that led to the command injection. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-78, which is a base-level CWE representing the specific type of injection vulnerability. CWE-78 is a child of CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')), which is a class-level CWE. CWE-78 also can follow CWE-20 (Improper Input Validation) if there is **missing input validation**. This relationship correctly describes the vulnerability chain.\n\n```mermaid\ngraph TD\n    cwe78[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"]\n    cwe20[\"CWE-20: Improper Input Validation\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n    \n    cwe78 -->|CHILDOF| cwe74\n    cwe20 -->|CANPRECEDE| cwe78\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe78 primary\n    class cwe20 secondary\n    class cwe74 tertiary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **improper input validation** (CWE-20), which leads to the injection of special elements into an OS command (CWE-78), resulting in arbitrary command execution.\n\n## Summary of Analysis\nThe analysis is based on the provided vulnerability description and the CVE reference content summary. The evidence clearly points to a **command injection vulnerability** in the `adm.cgi set_TR069()` functionality of Wavlink AC3000. The root cause is the **lack of input filtering** for the `TR069_local_port` parameter, which allows attackers to inject subshell commands. The injected commands are then executed by the system, leading to arbitrary command execution. The selected CWEs are at the optimal level of specificity, with CWE-78 representing the specific type of injection and CWE-20 representing the **lack of input validation** leading to the injection.\n\nOther CWEs Considered:\n\n*   CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection') - While similar to CWE-78, CWE-78 is more specific as it explicitly mentions OS commands.\n*   CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') - This is a more general class of injection vulnerabilities. CWE-78 is a child of CWE-74 and is more specific to OS command injection.\n*   CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') - This is specific to SQL injection, which is not the case here.\n*   CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') - This is specific to Cross-site Scripting, which is not the case here.\n*   CWE-134: Use of Externally-Controlled Format String - This is specific to format string vulnerabilities, which is not the case here.\n*   CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') - This is specific to Path Traversal, which is not the case here.\n*   CWE-425: Direct Request ('Forced Browsing') - This is specific to forced browsing, which is not the case here.\n*   CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') - This is specific to buffer overflows, which is not the case here.\n*   CWE-1287: Improper Validation of Specified Type of Input - This is a general input validation issue. CWE-20 is more appropriate.\n\nThe retriever results listed CWE-790 (Improper Filtering of Special Elements) and CWE-138 (Improper Neutralization of Special Elements). However, these are Class-level CWEs, and CWE-78 is a more specific Base-level CWE that better represents the **command injection vulnerability**.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-78 | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | 1 | Base | Allowed | Primary CWE: The vulnerability is a command injection vulnerability due to a lack of input filtering, leading to arbitrary command execution. |\n| CWE-20 | Improper Input Validation | 0.7 | Class | Allowed | Secondary CWE: The root cause is **missing input validation** of the `TR069_local_port` parameter that led to the command injection. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-78, which is a base-level CWE representing the specific type of injection vulnerability. CWE-78 is a child of CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')), which is a class-level CWE. CWE-78 also can follow CWE-20 (Improper Input Validation) if there is **missing input validation**. This relationship correctly describes the vulnerability chain.\n\n```mermaid\ngraph TD\n    cwe78[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"]\n    cwe20[\"CWE-20: Improper Input Validation\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n    \n    cwe78 -->|CHILDOF| cwe74\n    cwe20 -->|CANPRECEDE| cwe78\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe78 primary\n    class cwe20 secondary\n    class cwe74 tertiary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **improper input validation** (CWE-20), which leads to the injection of special elements into an OS command (CWE-78), resulting in arbitrary command execution.\n\n## Summary of Analysis\nThe analysis is based on the provided vulnerability description and the CVE reference content summary. The evidence clearly points to a **command injection vulnerability** in the `adm.cgi set_TR069()` functionality of Wavlink AC3000. The root cause is the **lack of input filtering** for the `TR069_local_port` parameter, which allows attackers to inject subshell commands. The injected commands are then executed by the system, leading to arbitrary command execution. The selected CWEs are at the optimal level of specificity, with CWE-78 representing the specific type of injection and CWE-20 representing the **lack of input validation** leading to the injection.\n\nOther CWEs Considered:\n\n*   CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection') - While similar to CWE-78, CWE-78 is more specific as it explicitly mentions OS commands.\n*   CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') - This is a more general class of injection vulnerabilities. CWE-78 is a child of CWE-74 and is more specific to OS command injection.\n*   CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') - This is specific to SQL injection, which is not the case here.\n*   CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') - This is specific to Cross-site Scripting, which is not the case here.\n*   CWE-134: Use of Externally-Controlled Format String - This is specific to format string vulnerabilities, which is not the case here.\n*   CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') - This is specific to Path Traversal, which is not the case here.\n*   CWE-425: Direct Request ('Forced Browsing') - This is specific to forced browsing, which is not the case here.\n*   CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') - This is specific to buffer overflows, which is not the case here.\n*   CWE-1287: Improper Validation of Specified Type of Input - This is a general input validation issue. CWE-20 is more appropriate.\n\nThe retriever results listed CWE-790 (Improper Filtering of Special Elements) and CWE-138 (Improper Neutralization of Special Elements). However, these are Class-level CWEs, and CWE-78 is a more specific Base-level CWE that better represents the **command injection vulnerability**.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-89:**\n- 89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')) - ROOT\n\n\n**Chain starting from CWE-77:**\n- 77 (Improper Neutralization of Special Elements used in a Command ('Command Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "1287",
        "name": "Improper Validation of Specified Type of Input",
        "source": "sparse"
      },
      "similarity": 279.9375049616562
    },
    {
      "metadata": {
        "doc_id": "78",
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "source": "sparse"
      },
      "similarity": 266.2045911439598
    },
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "sparse"
      },
      "similarity": 264.3035405601952
    },
    {
      "metadata": {
        "doc_id": "790",
        "name": "Improper Filtering of Special Elements",
        "source": "sparse"
      },
      "similarity": 264.1879333749186
    },
    {
      "metadata": {
        "doc_id": "120",
        "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
        "source": "sparse"
      },
      "similarity": 257.0130042169718
    },
    {
      "metadata": {
        "doc_id": "134",
        "name": "Use of Externally-Controlled Format String",
        "source": "sparse"
      },
      "similarity": 245.70870786513512
    },
    {
      "metadata": {
        "doc_id": "138",
        "name": "Improper Neutralization of Special Elements",
        "source": "sparse"
      },
      "similarity": 244.194188329012
    },
    {
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "source": "sparse"
      },
      "similarity": 233.57731065380253
    },
    {
      "metadata": {
        "doc_id": "77",
        "name": "Improper Neutralization of Special Elements used in a Command ('Command Injection')",
        "type": "Class",
        "original_content": "The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.",
        "keyphrase_source": "weakness:command execution vulnerability",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "CWE-77 is often misused when OS command injection (CWE-78) was intended instead [REF-1287].",
          "comments": "Ensure that the analysis focuses on the root-cause error that allows the execution of commands, as there are many weaknesses that can lead to this consequence. See Terminology Notes. If the weakness involves a command language besides OS shell invocation, then CWE-77 could be used.",
          "reasons": [
            "Frequent Misuse"
          ],
          "suggestions": [
            {
              "CweID": "78",
              "Comment": "OS Command Injection"
            }
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.5922779223048684
          }
        }
      },
      "similarity": 0.5922779223048684
    },
    {
      "doc_id": "425",
      "text": "The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.",
      "score": 0.6279257802595891,
      "metadata": {
        "doc_id": "425",
        "name": "Direct Request ('Forced Browsing')",
        "type": "Base",
        "extended_description": "Web applications susceptible to direct request attacks often make the false assumption that such resources can only be reached through a given navigation path and so only apply authorization at certain points in the path.",
        "alternate_terms": [
          "forced browsing"
        ],
        "original_content": "The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.",
        "relationships": [
          {
            "source_id": "425",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "425",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "425",
            "target_id": "424",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "425",
            "target_id": "288",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "425",
            "target_id": "862",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "425",
            "target_id": "862",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "425",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "862",
            "target_id": "425",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "425",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "424",
            "target_id": "425",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "288",
            "target_id": "425",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "source": "graph",
        "sources": [
          "vector",
          "graph"
        ],
        "vector_score": 0.6279257802595891,
        "graph_score": 3.4200400000000006,
        "score_components": {
          "relationship_chain": 0.6,
          "explicit_mention": 1.0,
          "abstraction_path": 0.9,
          "sequence_path": 0.5760000000000002
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "89",
                  "456",
                  "CANFOLLOW"
                ],
                [
                  "456",
                  "98",
                  "CANPRECEDE"
                ],
                [
                  "98",
                  "425",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.6,
              "type": "relationship_chain",
              "source": "89"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "78",
                  "184",
                  "CANFOLLOW"
                ],
                [
                  "184",
                  "98",
                  "CANPRECEDE"
                ],
                [
                  "98",
                  "425",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.5760000000000002,
              "type": "vulnerability_sequence_forward",
              "source": "78"
            }
          }
        },
        "is_explicit": true,
        "abstraction_level": "base",
        "position": "after",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse",
            "graph"
          ],
          "retriever_count": 3,
          "normalized_scores": {
            "dense": 0.5868573245851375,
            "sparse": 79.48407946326255,
            "graph": 2.303194312103836
          }
        }
      },
      "similarity": 2.303194312103836
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-89",
      "CWE-77",
      "CWE-22",
      "CWE-79",
      "CWE-790",
      "CWE-1287",
      "CWE-74",
      "CWE-120",
      "CWE-78",
      "CWE-20",
      "CWE-138",
      "CWE-134",
      "CWE-425"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}