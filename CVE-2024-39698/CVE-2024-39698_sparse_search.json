{
  "retriever": "sparse",
  "query": "electron-updater allows for automatic updates for Electron apps. The file `packages/electron-updater/src/windowsExecutableCodeSignatureVerifier.ts` implements the signature validation routine for Electron applications on Windows. Because of the surrounding shell, a first pass by `cmd.exe` expands any environment variable found in command-line above. This creates a situation where `verifySignature()` can be tricked into validating the certificate of a different file than the one that was just downloaded. If the step is successful, the malicious update will be executed even if its signature is invalid. This attack assumes a compromised update manifest (server compromise, Man-in-the-Middle attack if fetched over HTTP, Cross-Site Scripting to point the application to a malicious updater server, etc.). The patch is available starting from 6.3.0-alpha.6.",
  "keyphrases": {
    "rootcause": [
      "improper certificate validation"
    ],
    "weakness": [
      "Cross-Site Scripting"
    ]
  },
  "timestamp": "2025-07-12 03:00:24",
  "cve_id": "CVE-2024-39698",
  "result_count": 14,
  "results": [
    {
      "cwe_id": "347",
      "name": "Improper Verification of Cryptographic Signature",
      "score": 687.685232365797,
      "search_source": "rootcause:improper certificate validation"
    },
    {
      "cwe_id": "427",
      "name": "Uncontrolled Search Path Element",
      "score": 655.5443972397256,
      "search_source": "rootcause:improper certificate validation"
    },
    {
      "cwe_id": "79",
      "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
      "score": 639.5460133361239,
      "search_source": "rootcause:improper certificate validation"
    },
    {
      "cwe_id": "295",
      "name": "Improper Certificate Validation",
      "score": 636.3349325496174,
      "search_source": "rootcause:improper certificate validation"
    },
    {
      "cwe_id": "116",
      "name": "Improper Encoding or Escaping of Output",
      "score": 623.2716466802613,
      "search_source": "rootcause:improper certificate validation"
    },
    {
      "cwe_id": "1390",
      "name": "Weak Authentication",
      "score": 616.9896181788415,
      "search_source": "rootcause:improper certificate validation"
    },
    {
      "cwe_id": "61",
      "name": "UNIX Symbolic Link (Symlink) Following",
      "score": 604.2739201859217,
      "search_source": "rootcause:improper certificate validation"
    },
    {
      "cwe_id": "319",
      "name": "Cleartext Transmission of Sensitive Information",
      "score": 594.4931626010216,
      "search_source": "rootcause:improper certificate validation"
    },
    {
      "cwe_id": "287",
      "name": "Improper Authentication",
      "score": 593.1374253074332,
      "search_source": "rootcause:improper certificate validation"
    },
    {
      "cwe_id": "327",
      "name": "Use of a Broken or Risky Cryptographic Algorithm",
      "score": 592.2540067605069,
      "search_source": "rootcause:improper certificate validation"
    },
    {
      "cwe_id": "352",
      "name": "Cross-Site Request Forgery (CSRF)",
      "score": 570.1933846496337,
      "search_source": "weakness:Cross-Site Scripting"
    },
    {
      "cwe_id": "74",
      "name": "Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')",
      "score": 564.4331573886849,
      "search_source": "weakness:Cross-Site Scripting"
    },
    {
      "cwe_id": "918",
      "name": "Server-Side Request Forgery (SSRF)",
      "score": 563.3704796426462,
      "search_source": "weakness:Cross-Site Scripting"
    },
    {
      "cwe_id": "201",
      "name": "Insertion of Sensitive Information Into Sent Data",
      "score": 196.57223702881436,
      "search_source": "base_query"
    }
  ]
}