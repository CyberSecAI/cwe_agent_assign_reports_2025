{
  "cve_id": "CVE-2024-49748",
  "description": "In gatts_process_primary_service_req of gatt_sr.cc, there is a possible **out of bounds write** due to a ****heap buffer overflow****. This could lead to remote code execution with no additional execution privileges needed. User interaction is not needed for exploitation.",
  "key_phrases": {
    "rootcause": "heap buffer overflow",
    "weakness": [
      "heap buffer overflow",
      "out of bounds write"
    ],
    "impact": "remote code execution",
    "vector": "",
    "attacker": "",
    "product": "",
    "version": "",
    "component": "gatt_sr.cc"
  },
  "reference_content": "```\nNOINFO\n```",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID  | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| ------------- | ------------- | ------------- | ------------- | ------------- | ------------- |\n| CWE-122 | CWE-122: Heap-based Buffer Overflow | 1.0 | Base | Primary | Allowed |\n| CWE-787 | CWE-787: Out-of-bounds Write | 0.7 | Base | Secondary | Allowed |\n| CWE-131 | CWE-131: Incorrect Calculation of Buffer Size | 0.6 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is a heap-based buffer overflow (CWE-122). This can lead to an out-of-bounds write (CWE-787) if the overflow overwrites memory beyond the allocated buffer. An incorrect calculation of buffer size (CWE-131) could be the root cause of the heap overflow. These relationships are hierarchical and can represent a chain of events leading to the vulnerability. The abstraction levels of Base are appropriate for the specific nature of these weaknesses.\n\n```mermaid\ngraph TD\n    cwe122[\"CWE-122: Heap-based Buffer Overflow\"]\n    cwe787[\"CWE-787: Out-of-bounds Write\"]\n    cwe131[\"CWE-131: Incorrect Calculation of Buffer Size\"]\n    \n    cwe787 -->|CANFOLLOW| cwe122\n    cwe122 -->|CANPRECEDE| cwe131\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe122 primary\n    class cwe787,cwe131 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a **heap buffer overflow** (CWE-122), which is caused by an **out of bounds write** in `gatts_process_primary_service_req` of `gatt_sr.cc`. The overflow could be triggered by **incorrect calculation of buffer size** (CWE-131). This can then lead to remote code execution, indicating a successful exploitation of the overflow.\n  - Root Cause: CWE-131 (Incorrect Calculation of Buffer Size)\n  - Weakness: CWE-122 (Heap-based Buffer Overflow)\n  - Resulting Impact: CWE-787 (Out-of-bounds Write) -> Remote Code Execution\n\n## Summary of Analysis\nThe initial analysis identified the **heap buffer overflow** as the primary weakness. The description clearly states \"In gatts_process_primary_service_req of gatt_sr.cc, there is a possible **out of bounds write** due to a ****heap buffer overflow****.\" This statement provides direct evidence for CWE-122 and CWE-787. The possibility of **incorrect calculation of buffer size** (CWE-131) is considered a contributing factor leading to the overflow.\n\nThe graph relationships highlight how an incorrect calculation can lead to the overflow, which then results in an out-of-bounds write. The selection of CWE-122 as the primary weakness is based on its direct mention in the vulnerability description. CWE-787 and CWE-131 are secondary because they describe the mechanism and potential cause of the overflow, respectively.\n\nThe selected CWEs are at the optimal level of specificity because they accurately describe the type of buffer overflow (heap-based), the resulting write outside the buffer's boundaries, and a potential cause related to incorrect size calculation.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-131: Incorrect Calculation of Buffer Size\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-129: Improper Validation of Array Index\n**Abstraction Level**: Variant\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product uses untrusted input when calculating or using an array index, but the product does not validate or incorrectly validates the index to ensure the index references a valid position within the array.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-703: Improper Check or Handling of Exceptional Conditions\n**Abstraction Level**: Pillar\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is extremely high-level, a Pillar.\n\n\n\n## CWE-824: Access of Uninitialized Pointer\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product accesses or uses a pointer that has not been initialized.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-193: Off-by-one Error\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nA product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-130: Improper Handling of Length Parameter Inconsistency\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product parses a formatted message or structure, but it does not handle or incorrectly handles a length field that is inconsistent with the actual length of the associated data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-696: Incorrect Behavior Order\n**Abstraction Level**: Class\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product performs multiple related behaviors, but the behaviors are performed in the wrong order in ways which may produce resultant weaknesses.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-134: Use of Externally-Controlled Format String\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product uses a function that accepts a format string as an argument, but the format string originates from an external source.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-191: Integer Underflow (Wrap or Wraparound)\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-682: Incorrect Calculation\n**Abstraction Level**: Pillar\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product performs a calculation that generates incorrect or unintended results that are later used in security-critical decisions or resource management.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is extremely high-level, a Pillar. In many cases, lower-level children or descendants are more appropriate. However, sometimes this weakness is forced to be used due to the lack of in-depth weakness research. See Research Gaps.\n\n\n\n## CWE-190: Integer Overflow or Wraparound\n**Abstraction Level**: Base\n**Similarity Score**: 2780.00\n**Source**: sparse\n\n**Description**:\nThe product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an",
  "analysis_with_relationships": "# Summary\n| CWE ID  | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| ------------- | ------------- | ------------- | ------------- | ------------- | ------------- |\n| CWE-122 | CWE-122: Heap-based Buffer Overflow | 1.0 | Base | Primary | Allowed |\n| CWE-787 | CWE-787: Out-of-bounds Write | 0.7 | Base | Secondary | Allowed |\n| CWE-131 | CWE-131: Incorrect Calculation of Buffer Size | 0.6 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is a heap-based buffer overflow (CWE-122). This can lead to an out-of-bounds write (CWE-787) if the overflow overwrites memory beyond the allocated buffer. An incorrect calculation of buffer size (CWE-131) could be the root cause of the heap overflow. These relationships are hierarchical and can represent a chain of events leading to the vulnerability. The abstraction levels of Base are appropriate for the specific nature of these weaknesses.\n\n```mermaid\ngraph TD\n    cwe122[\"CWE-122: Heap-based Buffer Overflow\"]\n    cwe787[\"CWE-787: Out-of-bounds Write\"]\n    cwe131[\"CWE-131: Incorrect Calculation of Buffer Size\"]\n    \n    cwe787 -->|CANFOLLOW| cwe122\n    cwe122 -->|CANPRECEDE| cwe131\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe122 primary\n    class cwe787,cwe131 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a **heap buffer overflow** (CWE-122), which is caused by an **out of bounds write** in `gatts_process_primary_service_req` of `gatt_sr.cc`. The overflow could be triggered by **incorrect calculation of buffer size** (CWE-131). This can then lead to remote code execution, indicating a successful exploitation of the overflow.\n  - Root Cause: CWE-131 (Incorrect Calculation of Buffer Size)\n  - Weakness: CWE-122 (Heap-based Buffer Overflow)\n  - Resulting Impact: CWE-787 (Out-of-bounds Write) -> Remote Code Execution\n\n## Summary of Analysis\nThe initial analysis identified the **heap buffer overflow** as the primary weakness. The description clearly states \"In gatts_process_primary_service_req of gatt_sr.cc, there is a possible **out of bounds write** due to a ****heap buffer overflow****.\" This statement provides direct evidence for CWE-122 and CWE-787. The possibility of **incorrect calculation of buffer size** (CWE-131) is considered a contributing factor leading to the overflow.\n\nThe graph relationships highlight how an incorrect calculation can lead to the overflow, which then results in an out-of-bounds write. The selection of CWE-122 as the primary weakness is based on its direct mention in the vulnerability description. CWE-787 and CWE-131 are secondary because they describe the mechanism and potential cause of the overflow, respectively.\n\nThe selected CWEs are at the optimal level of specificity because they accurately describe the type of buffer overflow (heap-based), the resulting write outside the buffer's boundaries, and a potential cause related to incorrect size calculation.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-131: Incorrect Calculation of Buffer Size\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-129: Improper Validation of Array Index\n**Abstraction Level**: Variant\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product uses untrusted input when calculating or using an array index, but the product does not validate or incorrectly validates the index to ensure the index references a valid position within the array.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-703: Improper Check or Handling of Exceptional Conditions\n**Abstraction Level**: Pillar\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is extremely high-level, a Pillar.\n\n\n\n## CWE-824: Access of Uninitialized Pointer\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product accesses or uses a pointer that has not been initialized.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-193: Off-by-one Error\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nA product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-130: Improper Handling of Length Parameter Inconsistency\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product parses a formatted message or structure, but it does not handle or incorrectly handles a length field that is inconsistent with the actual length of the associated data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-696: Incorrect Behavior Order\n**Abstraction Level**: Class\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product performs multiple related behaviors, but the behaviors are performed in the wrong order in ways which may produce resultant weaknesses.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-134: Use of Externally-Controlled Format String\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product uses a function that accepts a format string as an argument, but the format string originates from an external source.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-191: Integer Underflow (Wrap or Wraparound)\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-682: Incorrect Calculation\n**Abstraction Level**: Pillar\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product performs a calculation that generates incorrect or unintended results that are later used in security-critical decisions or resource management.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is extremely high-level, a Pillar. In many cases, lower-level children or descendants are more appropriate. However, sometimes this weakness is forced to be used due to the lack of in-depth weakness research. See Research Gaps.\n\n\n\n## CWE-190: Integer Overflow or Wraparound\n**Abstraction Level**: Base\n**Similarity Score**: 2780.00\n**Source**: sparse\n\n**Description**:\nThe product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-130:**\n- 130 (Improper Handling of Length Parameter Inconsistency) - ROOT\n\n\n**Chain starting from CWE-131:**\n- 131 (Incorrect Calculation of Buffer Size) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "122",
        "name": "Heap-based Buffer Overflow",
        "source": "sparse",
        "original_content": "A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc().",
        "keyphrase_sources": [
          {
            "id": "rootcause:heap buffer overflow",
            "keyphrase": "heap buffer overflow",
            "type": "rootcause"
          },
          {
            "id": "weakness:heap buffer overflow",
            "keyphrase": "heap buffer overflow",
            "type": "weakness"
          },
          {
            "id": "weakness:out of bounds write",
            "keyphrase": "out of bounds write",
            "type": "weakness"
          },
          {
            "id": "impact:remote code execution",
            "keyphrase": "remote code execution",
            "type": "impact"
          },
          {
            "id": "component:gatt_sr.cc",
            "keyphrase": "gatt_sr.cc",
            "type": "component"
          }
        ]
      },
      "similarity": 412.9196312491751
    },
    {
      "metadata": {
        "doc_id": "131",
        "name": "Incorrect Calculation of Buffer Size",
        "source": "sparse",
        "original_content": "The product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.",
        "keyphrase_sources": [
          {
            "id": "rootcause:heap buffer overflow",
            "keyphrase": "heap buffer overflow",
            "type": "rootcause"
          },
          {
            "id": "weakness:heap buffer overflow",
            "keyphrase": "heap buffer overflow",
            "type": "weakness"
          },
          {
            "id": "weakness:out of bounds write",
            "keyphrase": "out of bounds write",
            "type": "weakness"
          },
          {
            "id": "impact:remote code execution",
            "keyphrase": "remote code execution",
            "type": "impact"
          },
          {
            "id": "component:gatt_sr.cc",
            "keyphrase": "gatt_sr.cc",
            "type": "component"
          }
        ]
      },
      "similarity": 405.01378520739536
    },
    {
      "metadata": {
        "doc_id": "190",
        "name": "Integer Overflow or Wraparound",
        "source": "sparse",
        "original_content": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number.",
        "keyphrase_sources": [
          {
            "id": "rootcause:heap buffer overflow",
            "keyphrase": "heap buffer overflow",
            "type": "rootcause"
          },
          {
            "id": "weakness:heap buffer overflow",
            "keyphrase": "heap buffer overflow",
            "type": "weakness"
          },
          {
            "id": "impact:remote code execution",
            "keyphrase": "remote code execution",
            "type": "impact"
          }
        ]
      },
      "similarity": 398.915854534178
    },
    {
      "metadata": {
        "doc_id": "191",
        "name": "Integer Underflow (Wrap or Wraparound)",
        "source": "sparse",
        "original_content": "The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.",
        "keyphrase_sources": [
          {
            "id": "rootcause:heap buffer overflow",
            "keyphrase": "heap buffer overflow",
            "type": "rootcause"
          },
          {
            "id": "weakness:heap buffer overflow",
            "keyphrase": "heap buffer overflow",
            "type": "weakness"
          },
          {
            "id": "weakness:out of bounds write",
            "keyphrase": "out of bounds write",
            "type": "weakness"
          },
          {
            "id": "impact:remote code execution",
            "keyphrase": "remote code execution",
            "type": "impact"
          },
          {
            "id": "component:gatt_sr.cc",
            "keyphrase": "gatt_sr.cc",
            "type": "component"
          }
        ]
      },
      "similarity": 392.6939540610662
    },
    {
      "metadata": {
        "doc_id": "1284",
        "name": "Improper Validation of Specified Quantity in Input",
        "source": "sparse",
        "original_content": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.",
        "keyphrase_sources": [
          {
            "id": "rootcause:heap buffer overflow",
            "keyphrase": "heap buffer overflow",
            "type": "rootcause"
          },
          {
            "id": "weakness:heap buffer overflow",
            "keyphrase": "heap buffer overflow",
            "type": "weakness"
          }
        ]
      },
      "similarity": 369.51454844567183
    },
    {
      "metadata": {
        "doc_id": "125",
        "name": "Out-of-bounds Read",
        "source": "sparse",
        "original_content": "The product reads data past the end, or before the beginning, of the intended buffer.",
        "keyphrase_sources": [
          {
            "id": "weakness:out of bounds write",
            "keyphrase": "out of bounds write",
            "type": "weakness"
          },
          {
            "id": "component:gatt_sr.cc",
            "keyphrase": "gatt_sr.cc",
            "type": "component"
          }
        ]
      },
      "similarity": 362.7783722108576
    },
    {
      "metadata": {
        "doc_id": "908",
        "name": "Use of Uninitialized Resource",
        "source": "sparse",
        "original_content": "The product uses or accesses a resource that has not been initialized.",
        "keyphrase_sources": [
          {
            "id": "weakness:out of bounds write",
            "keyphrase": "out of bounds write",
            "type": "weakness"
          },
          {
            "id": "impact:remote code execution",
            "keyphrase": "remote code execution",
            "type": "impact"
          },
          {
            "id": "component:gatt_sr.cc",
            "keyphrase": "gatt_sr.cc",
            "type": "component"
          }
        ]
      },
      "similarity": 360.08550937949013
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-130",
      "CWE-131",
      "CWE-787",
      "CWE-191",
      "CWE-682",
      "CWE-193",
      "CWE-190",
      "CWE-824",
      "CWE-696",
      "CWE-122",
      "CWE-129",
      "CWE-134",
      "CWE-703"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {
    "122": [
      {
        "id": "rootcause:heap buffer overflow",
        "keyphrase": "heap buffer overflow",
        "type": "rootcause"
      },
      {
        "id": "weakness:heap buffer overflow",
        "keyphrase": "heap buffer overflow",
        "type": "weakness"
      },
      {
        "id": "weakness:out of bounds write",
        "keyphrase": "out of bounds write",
        "type": "weakness"
      },
      {
        "id": "impact:remote code execution",
        "keyphrase": "remote code execution",
        "type": "impact"
      },
      {
        "id": "component:gatt_sr.cc",
        "keyphrase": "gatt_sr.cc",
        "type": "component"
      }
    ],
    "131": [
      {
        "id": "rootcause:heap buffer overflow",
        "keyphrase": "heap buffer overflow",
        "type": "rootcause"
      },
      {
        "id": "weakness:heap buffer overflow",
        "keyphrase": "heap buffer overflow",
        "type": "weakness"
      },
      {
        "id": "weakness:out of bounds write",
        "keyphrase": "out of bounds write",
        "type": "weakness"
      },
      {
        "id": "impact:remote code execution",
        "keyphrase": "remote code execution",
        "type": "impact"
      },
      {
        "id": "component:gatt_sr.cc",
        "keyphrase": "gatt_sr.cc",
        "type": "component"
      }
    ],
    "190": [
      {
        "id": "rootcause:heap buffer overflow",
        "keyphrase": "heap buffer overflow",
        "type": "rootcause"
      },
      {
        "id": "weakness:heap buffer overflow",
        "keyphrase": "heap buffer overflow",
        "type": "weakness"
      },
      {
        "id": "impact:remote code execution",
        "keyphrase": "remote code execution",
        "type": "impact"
      }
    ],
    "191": [
      {
        "id": "rootcause:heap buffer overflow",
        "keyphrase": "heap buffer overflow",
        "type": "rootcause"
      },
      {
        "id": "weakness:heap buffer overflow",
        "keyphrase": "heap buffer overflow",
        "type": "weakness"
      },
      {
        "id": "weakness:out of bounds write",
        "keyphrase": "out of bounds write",
        "type": "weakness"
      },
      {
        "id": "impact:remote code execution",
        "keyphrase": "remote code execution",
        "type": "impact"
      },
      {
        "id": "component:gatt_sr.cc",
        "keyphrase": "gatt_sr.cc",
        "type": "component"
      }
    ],
    "1284": [
      {
        "id": "rootcause:heap buffer overflow",
        "keyphrase": "heap buffer overflow",
        "type": "rootcause"
      },
      {
        "id": "weakness:heap buffer overflow",
        "keyphrase": "heap buffer overflow",
        "type": "weakness"
      }
    ],
    "125": [
      {
        "id": "weakness:out of bounds write",
        "keyphrase": "out of bounds write",
        "type": "weakness"
      },
      {
        "id": "component:gatt_sr.cc",
        "keyphrase": "gatt_sr.cc",
        "type": "component"
      }
    ],
    "908": [
      {
        "id": "weakness:out of bounds write",
        "keyphrase": "out of bounds write",
        "type": "weakness"
      },
      {
        "id": "impact:remote code execution",
        "keyphrase": "remote code execution",
        "type": "impact"
      },
      {
        "id": "component:gatt_sr.cc",
        "keyphrase": "gatt_sr.cc",
        "type": "component"
      }
    ]
  }
}