{
  "cve_id": "CVE-2024-40983",
  "description": "In the Linux kernel, the following vulnerability has been resolved tipc force a dst refcount before doing decryption As it says in commit 3bc07321ccc2 (xfrm Force a dst refcount before entering the xfrm type handlers) Crypto requests might return asynchronous. In this case we leave the rcu protected region, so force a refcount on the skbs destination entry before we enter the xfrm type input/output handlers. On TIPC decryption path it has the same problem, and skb_dst_force() should be called before doing decryption to avoid a possible crash. Shuang reported this issue when this warning is triggered [] WARNING include/net/dst.h337 tipc_sk_rcv+0x1055/0x1ea0 [tipc] [] Kdump loaded Tainted G W --------- - - 4.18.0-496.el8.x86_64+debug [] Workqueue crypto cryptd_queue_worker [] RIP 0010tipc_sk_rcv+0x1055/0x1ea0 [tipc] [] Call Trace [] tipc_sk_mcast_rcv+0x548/0xea0 [tipc] [] tipc_rcv+0xcf5/0x1060 [tipc] [] tipc_aead_decrypt_done+0x215/0x2e0 [tipc] [] cryptd_aead_crypt+0xdb/0x190 [] cryptd_queue_worker+0xed/0x190 [] process_one_work+0x93d/0x17e0",
  "key_phrases": {
    "rootcause": "",
    "weakness": "",
    "impact": "possible crash",
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "4.18.0-496.el8.x86_64+debug",
    "component": "TIPC"
  },
  "reference_content": "Based on the provided content, here's an analysis of the vulnerability:\n\n**Root Cause:**\nThe vulnerability lies in the TIPC (Transparent Inter-Process Communication) module of the Linux kernel. Specifically, the issue is that when decrypting TIPC packets, the code does not force a reference count on the skb's (socket buffer) destination entry before entering the decryption handler. This is problematic because the cryptographic operation might be asynchronous, potentially causing the code to leave the RCU (Read-Copy-Update) protected region without a valid reference, leading to a potential use-after-free condition and crash.\n\n**Weaknesses/Vulnerabilities:**\n- **Missing Reference Counting:** The core issue is the absence of `skb_dst_force(skb)` before the call to `tipc_crypto_rcv`. This function is meant to ensure that the destination entry associated with the socket buffer remains valid while the cryptographic operation, which might be asynchronous, is in progress.\n- **Asynchronous Operations:** The asynchronous nature of the crypto requests is a contributing factor as it allows the code to exit the RCU protected region without the needed reference count on the destination entry.\n\n**Impact of Exploitation:**\n- **Kernel Crash:** The primary impact is a kernel crash due to the use-after-free vulnerability. This happens when the destination entry is freed while the decryption operation is still pending or in progress, and the code later tries to access it.\n- **Denial of Service:** The crash can lead to a denial of service, as the system becomes unusable.\n\n**Attack Vectors:**\n- **Network Communication:** The attack vector is through network communication using the TIPC protocol.\n- **Encrypted TIPC packets:** The vulnerability is triggered specifically during the decryption of TIPC packets\n\n**Required Attacker Capabilities/Position:**\n- **Network Access:** The attacker needs to be able to send crafted, encrypted TIPC packets to a vulnerable system.\n- **Knowledge of TIPC Protocol:** The attacker needs to have a basic understanding of the TIPC protocol to formulate the malicious packets.\n- **No special privileges:** The attacker does not need special privileges on the target system other than the ability to send TIPC packets.\n\n**More Details than CVE Description:**\n\nThe provided content gives more context than a typical CVE description, including:\n- The specific code change that fixes the vulnerability, `skb_dst_force(skb)`\n- The warning message that triggers the issue, \"WARNING: include/net/dst.h:337 tipc\\_sk\\_rcv+0x1055/0x1ea0 [tipc]\" along with the kernel crash trace information.\n- The commit message from the fix which references the xfrm subsystem as having similar issues, and why the fix is needed.\n- The specific functions involved in the crash and call trace.\n\nIn summary, this is a use-after-free vulnerability in the TIPC module triggered by missing reference counting on the destination entry of a socket buffer before decryption, which can cause a kernel crash, triggered by sending encrypted TIPC packets.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-763 | Release of Invalid Pointer or Reference | 0.9 | Base | Primary | Allowed |\n| CWE-416 | Use After Free | 0.7 | Variant | Secondary | Allowed |\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.5 | Class | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.7\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary weakness is the **release of an invalid pointer or reference** due to missing reference counting, leading to a **use-after-free** condition. The asynchronous nature of the cryptographic operation introduces a potential **race condition**. CWE-763 is a base level CWE which can lead to CWE-416. There may also be an underlying CWE-362 race condition.\n\n```mermaid\ngraph TD\n    cwe763[\"CWE-763: Release of Invalid Pointer or Reference\"]\n    cwe416[\"CWE-416: Use After Free\"]\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n\n    cwe416 -- CANFOLLOW --> cwe763\n    cwe362 -- CAUSES --> cwe763\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe763 primary\n    class cwe416,cwe362 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **missing reference counting** on the destination entry of a socket buffer before decryption, which causes the **release of an invalid pointer or reference**. This leads to a **use-after-free** condition when the code later tries to access the freed memory, resulting in a kernel crash. The asynchronous nature of the cryptographic operation may introduce a **race condition** where the memory is freed by one thread while another thread is still using it.\n\n## Summary of Analysis\nThe analysis is based on the vulnerability description and the provided CVE reference content summary. The root cause is the **missing reference counting**, which results in the release of an invalid pointer, ultimately leading to a use-after-free. The vulnerability description mentions that `skb_dst_force()` should be called before decryption to avoid a possible crash. This strongly suggests that the **missing reference counting** is the primary issue. The asynchronous nature introduces a possible race condition.\n\n*   **CWE-763 Release of Invalid Pointer or Reference:** This CWE accurately describes the core issue of releasing an invalid pointer due to missing reference counting. The evidence from the vulnerability description clearly supports this classification.\n*   **CWE-416 Use After Free:** This CWE represents the direct consequence of releasing an invalid pointer. When the code attempts to access the freed memory, a use-after-free condition occurs, leading to a crash.\n*   **CWE-362 Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'):** The asynchronous nature of cryptographic operations may introduce a race condition. This is a contributing factor, but not the primary root cause.\n\nThe selected CWEs are at the optimal level of specificity, representing the root cause, the direct consequence, and a contributing factor.\n\n**CWE Considerations:**\n\n*   **CWE-415 Double Free:** This CWE was considered but rejected because the primary issue is not a double free, but the release of an invalid pointer or reference due to missing reference counting.\n*   **CWE-909 Missing Initialization of Resource:** This CWE was considered but rejected because the issue is not the missing initialization of a resource, but the failure to maintain a proper reference count, leading to premature release.\n*   **CWE-1284 Improper Validation of Specified Quantity in Input:** This CWE was considered but rejected as it is not related to the vulnerability description.\n*   **CWE-911 Improper Update of Reference Count:** This CWE was considered but rejected because while reference count is related it is the release that is the main issue.\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-755: Improper Handling of Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product does not handle or incorrectly handles an exceptional condition.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n\n\n## CWE-125: Out-of-bounds Read\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product reads data past the end, or before the beginning, of the intended buffer.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-617: Reachable Assertion\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-131: Incorrect Calculation of Buffer Size\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-476: NULL Pointer Dereference\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product dereferences a pointer that it expects to be valid but is NULL.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-191: Integer Underflow (Wrap or Wraparound)\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-252: Unchecked Return Value\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-1285: Improper Validation of Specified Index, Position, or Offset in Input\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- R",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-763 | Release of Invalid Pointer or Reference | 0.9 | Base | Primary | Allowed |\n| CWE-416 | Use After Free | 0.7 | Variant | Secondary | Allowed |\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.5 | Class | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.7\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary weakness is the **release of an invalid pointer or reference** due to missing reference counting, leading to a **use-after-free** condition. The asynchronous nature of the cryptographic operation introduces a potential **race condition**. CWE-763 is a base level CWE which can lead to CWE-416. There may also be an underlying CWE-362 race condition.\n\n```mermaid\ngraph TD\n    cwe763[\"CWE-763: Release of Invalid Pointer or Reference\"]\n    cwe416[\"CWE-416: Use After Free\"]\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n\n    cwe416 -- CANFOLLOW --> cwe763\n    cwe362 -- CAUSES --> cwe763\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe763 primary\n    class cwe416,cwe362 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **missing reference counting** on the destination entry of a socket buffer before decryption, which causes the **release of an invalid pointer or reference**. This leads to a **use-after-free** condition when the code later tries to access the freed memory, resulting in a kernel crash. The asynchronous nature of the cryptographic operation may introduce a **race condition** where the memory is freed by one thread while another thread is still using it.\n\n## Summary of Analysis\nThe analysis is based on the vulnerability description and the provided CVE reference content summary. The root cause is the **missing reference counting**, which results in the release of an invalid pointer, ultimately leading to a use-after-free. The vulnerability description mentions that `skb_dst_force()` should be called before decryption to avoid a possible crash. This strongly suggests that the **missing reference counting** is the primary issue. The asynchronous nature introduces a possible race condition.\n\n*   **CWE-763 Release of Invalid Pointer or Reference:** This CWE accurately describes the core issue of releasing an invalid pointer due to missing reference counting. The evidence from the vulnerability description clearly supports this classification.\n*   **CWE-416 Use After Free:** This CWE represents the direct consequence of releasing an invalid pointer. When the code attempts to access the freed memory, a use-after-free condition occurs, leading to a crash.\n*   **CWE-362 Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'):** The asynchronous nature of cryptographic operations may introduce a race condition. This is a contributing factor, but not the primary root cause.\n\nThe selected CWEs are at the optimal level of specificity, representing the root cause, the direct consequence, and a contributing factor.\n\n**CWE Considerations:**\n\n*   **CWE-415 Double Free:** This CWE was considered but rejected because the primary issue is not a double free, but the release of an invalid pointer or reference due to missing reference counting.\n*   **CWE-909 Missing Initialization of Resource:** This CWE was considered but rejected because the issue is not the missing initialization of a resource, but the failure to maintain a proper reference count, leading to premature release.\n*   **CWE-1284 Improper Validation of Specified Quantity in Input:** This CWE was considered but rejected as it is not related to the vulnerability description.\n*   **CWE-911 Improper Update of Reference Count:** This CWE was considered but rejected because while reference count is related it is the release that is the main issue.\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-755: Improper Handling of Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product does not handle or incorrectly handles an exceptional condition.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n\n\n## CWE-125: Out-of-bounds Read\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product reads data past the end, or before the beginning, of the intended buffer.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-617: Reachable Assertion\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-131: Incorrect Calculation of Buffer Size\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-476: NULL Pointer Dereference\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product dereferences a pointer that it expects to be valid but is NULL.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-191: Integer Underflow (Wrap or Wraparound)\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-252: Unchecked Return Value\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-1285: Improper Validation of Specified Index, Position, or Offset in Input\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- R\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-1284:**\n- 1284 (Improper Validation of Specified Quantity in Input) - ROOT\n\n\n**Chain starting from CWE-416:**\n- 416 (Use After Free) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "909",
        "name": "Missing Initialization of Resource",
        "source": "sparse"
      },
      "similarity": 179.7102613134477
    },
    {
      "metadata": {
        "doc_id": "415",
        "name": "Double Free",
        "source": "sparse"
      },
      "similarity": 160.07595507806423
    },
    {
      "metadata": {
        "doc_id": "1284",
        "name": "Improper Validation of Specified Quantity in Input",
        "source": "sparse"
      },
      "similarity": 153.42934333939007
    },
    {
      "metadata": {
        "doc_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "source": "sparse"
      },
      "similarity": 151.11797271350162
    },
    {
      "metadata": {
        "doc_id": "203",
        "name": "Observable Discrepancy",
        "source": "sparse"
      },
      "similarity": 149.4412710502761
    },
    {
      "metadata": {
        "doc_id": "327",
        "name": "Use of a Broken or Risky Cryptographic Algorithm",
        "source": "sparse"
      },
      "similarity": 149.1516761660974
    },
    {
      "metadata": {
        "doc_id": "617",
        "name": "Reachable Assertion",
        "source": "sparse"
      },
      "similarity": 145.90172089168396
    },
    {
      "metadata": {
        "doc_id": "911",
        "name": "Improper Update of Reference Count",
        "source": "sparse"
      },
      "similarity": 144.9003122454441
    },
    {
      "metadata": {
        "doc_id": "667",
        "name": "Improper Locking",
        "type": "Class",
        "original_content": "The product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
          "comments": "Examine children of this entry to see if there is a better fit",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.4809334903091881
          }
        }
      },
      "similarity": 0.4809334903091881
    },
    {
      "doc_id": "364",
      "text": "CWE-364: Signal Handler Race Condition",
      "score": 2.8651999999999997,
      "metadata": {
        "doc_id": "364",
        "name": "Signal Handler Race Condition",
        "type": "base",
        "original_content": "CWE-364: Signal Handler Race Condition",
        "relationships": [
          {
            "source_id": "364",
            "target_id": "831",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "364",
            "target_id": "828",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "364",
            "target_id": "432",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "364",
            "target_id": "123",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "364",
            "target_id": "416",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "364",
            "target_id": "415",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "364",
            "target_id": "362",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "831",
            "target_id": "364",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "828",
            "target_id": "364",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "432",
            "target_id": "364",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "416",
            "target_id": "364",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "415",
            "target_id": "364",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "368",
            "target_id": "364",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "362",
            "target_id": "364",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "364",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "abstraction_path": 0.7200000000000001,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "415",
                  "364",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "415"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "362",
                  "364",
                  "PARENTOF"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "abstraction_path_down",
              "source": "362"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "415",
                  "364",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "415"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "364",
                  "415",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "415"
            }
          }
        },
        "abstraction_level": "base",
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.8651999999999997
          }
        }
      },
      "similarity": 2.8651999999999997
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-1284",
      "CWE-416",
      "CWE-763",
      "CWE-911",
      "CWE-476",
      "CWE-125",
      "CWE-131",
      "CWE-667",
      "CWE-191",
      "CWE-909",
      "CWE-252",
      "CWE-1285",
      "CWE-362",
      "CWE-755",
      "CWE-617",
      "CWE-415"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}