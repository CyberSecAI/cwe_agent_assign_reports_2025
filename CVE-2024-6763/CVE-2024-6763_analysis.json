{
  "cve_id": "CVE-2024-6763",
  "description": "Eclipse Jetty is a lightweight, highly scalable, Java-based web server and Servlet engine . It includes a utility class, HttpURI, for URI/URL parsing. The HttpURI class does **insufficient validation** on the authority segment of a URI. However the behaviour of HttpURI differs from the common browsers in how it handles a URI that would be considered invalid if fully validated against the RRC. Specifically HttpURI and the browser may differ on the value of the host extracted from an invalid URI and thus a combination of Jetty and a vulnerable browser may be vulnerable to a **open redirect attack** or to a SSRF attack if the URI is used after passing validation checks.",
  "key_phrases": {
    "rootcause": "insufficient validation",
    "weakness": "open redirect attack",
    "impact": "SSRF attack",
    "vector": "",
    "attacker": "",
    "product": "Eclipse Jetty",
    "version": "",
    "component": "HttpURI class"
  },
  "reference_content": "Based on the provided content, here's a breakdown of the vulnerability associated with CVE-2024-6763:\n\n**Root Cause:**\n\n*   The `HttpURI` class in Eclipse Jetty performs insufficient validation on the authority segment of a URI. This leads to inconsistent parsing of the host component compared to common browsers.\n*   The vulnerability stems from the difference in how `HttpURI` and browsers (like Chrome) handle invalid URIs, specifically those containing user info (e.g., `username:password@hostname:port`). `HttpURI` doesn't fail on these invalid URIs, but it may extract a different hostname compared to the browser. This difference can lead to security issues.\n\n**Weaknesses/Vulnerabilities:**\n\n*   **Inconsistent Host Parsing:** `HttpURI` can extract a different host from a malformed URI compared to browsers.\n*   **Insufficient Input Validation:** `HttpURI` lacks proper validation of the authority part of the URI, particularly concerning user information, special characters, and the distinction between valid and invalid URIs.\n*   The use of RFC3986 for URI parsing in `HttpURI` and a different spec (WhatWG) used in browsers contributes to the discrepancy.\n*   The issue is not in the Jetty server or client directly, but in the `HttpURI` utility class itself when used by applications.\n\n**Impact of Exploitation:**\n\n*   **SSRF (Server-Side Request Forgery):** An attacker could potentially bypass host blocklists or other security measures implemented using `HttpURI` by crafting a malicious URI.\n*   **URL Redirection:** Attackers can cause a user to be redirected to an unintended host, by exploiting the different parsing between the Jetty's `HttpURI` class and browser's URI parsing implementation.\n*   **Bypass of Security Measures:** The vulnerability allows bypassing security mechanisms that rely on validating hostnames extracted by `HttpURI`, potentially leading to further attacks.\n\n**Attack Vectors:**\n\n*   **Malicious URI Input:** The primary attack vector is through a malformed URI supplied by an attacker. Examples include:\n    *   `http://browser.check &@vulndetector.com/`\n    *   `http://browser.check #@vulndetector.com/`\n    *   `http://browser.check?@vulndetector.com/`\n    *   `http://browser.check#@vulndetector.com/`\n    *   `http://vulndetector.com\\\\/`\n*   **302 Redirect Manipulation:** The vulnerability can be exploited through redirects where the browser interprets the malformed URL differently from Jetty.\n*   **HTML Links:** Attackers can use malformed URIs in HTML links (`<a href=\"...\">`) to trigger redirects.\n\n**Required Attacker Capabilities/Position:**\n\n*   The attacker needs to be able to supply a malformed URI that is processed by an application using `HttpURI`.\n*   The attacker doesn't require any specific user privileges.\n\n**Additional Notes:**\n\n*   The vulnerability exists in the `HttpURI` class when used as a utility within an application, and not directly within the Jetty server or client usage of the class.\n*   The fix involves adding more strict validation to the URI authority, and eventually deprecating user info in URI per RFC9110.\n*   The issue highlights the discrepancy between RFC3986 compliant parsers and WhatWG URL parsing implementations used in browsers.\n*   The CVE affects Jetty versions from 7.0.0 to 12.0.11.\n*   The vulnerability has a low severity score of 3.7.\n*   This CVE is due to the differences in URI parsing between Jetty (RFC3986) and browsers (WhatWG).\n*   The maintainers consider this a low severity issue as it requires an application to use HttpURI directly, and not the standard server/client functionality.\n*   Jetty 9/10/11 are going EOL on Jan 1, 2025 and will not be backported with a fix unless commercial support contracts dictate so.\n*   The current fix deprecates the use of user info in URLs in Jetty 12, in line with RFC 9110.\n\nThis information should provide a comprehensive understanding of the vulnerability described in the provided content.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-601 | URL Redirection to Untrusted Site ('Open Redirect') | 0.9 | Base | Allowed | Primary CWE |\n| CWE-918 | Server-Side Request Forgery (SSRF) | 0.7 | Base | Allowed | Secondary Candidate |\n| CWE-184 | Incomplete List of Disallowed Inputs | 0.6 | Base | Allowed | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE, CWE-601 URL Redirection to Untrusted Site ('Open Redirect'), is a Base level CWE. The vulnerability description clearly indicates an open redirect vulnerability. CWE-918 Server-Side Request Forgery (SSRF) is also a Base level CWE and listed as an impact. The root cause is **insufficient validation** which relates to **incomplete list of disallowed inputs** of the HttpURI class. This means that the `HttpURI` class does not properly filter or validate URIs, potentially allowing an attacker to redirect users to a malicious site.\n\n```mermaid\ngraph TD\n    cwe601[\"CWE-601: URL Redirection to Untrusted Site ('Open Redirect')\"]\n    cwe918[\"CWE-918: Server-Side Request Forgery (SSRF)\"]\n    cwe184[\"CWE-184: Incomplete List of Disallowed Inputs\"]\n    \n    cwe601 -->|CANRESULTIN| cwe918\n    cwe184 -->|CANPRECEDE| cwe601\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe601 primary\n    class cwe918,cwe184 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **insufficient validation** (**incomplete list of disallowed inputs** - CWE-184) within the `HttpURI` class. This leads to a URL Redirection to Untrusted Site ('Open Redirect') - CWE-601, which can further lead to a Server-Side Request Forgery (SSRF) - CWE-918 if the URI is used by the server.\n\n## Summary of Analysis\nBased on the vulnerability description and the provided CVE Reference Links Content Summary, the primary weakness is an open redirect due to **insufficient validation** in the `HttpURI` class. The `HttpURI` class does not properly filter or validate URIs, potentially allowing an attacker to redirect users to a malicious site. This aligns directly with the description of CWE-601.\n\nThe retriever results also support this, with CWE-601 having the highest similarity score.\n\nCWE-918 (Server-Side Request Forgery) is a secondary concern, as it is listed as an impact of the **insufficient validation**.\n\nCWE-184 (Incomplete List of Disallowed Inputs) is also a secondary concern, as it is the root cause that leads to the open redirect and SSRF.\n\nThe evidence provided clearly supports the selection of CWE-601 as the primary weakness, with CWE-918 as a potential impact and CWE-184 as the root cause. These CWEs are at the appropriate level of specificity (Base).\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 0.78\n**Source**: dense\n\n**Description**:\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*   **Not Used:** This is not directly related to encoding or escaping of output.\n\n## CWE-923: Improper Restriction of Communication Channel to Intended Endpoints\n**Abstraction Level**: Class\n**Similarity Score**: 0.78\n**Source**: dense\n\n**Description**:\nThe product establishes a communication channel to (or from) an endpoint for privileged or protected operations, but it does not properly ensure that it is communicating with the correct endpoint.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*   **Not Used:** This is not the primary issue, although SSRF (CWE-918) could be a consequence.\n\n## CWE-918: Server-Side Request Forgery (SSRF)\n**Abstraction Level**: Base\n**Similarity Score**: 0.78\n**Source**: dense\n\n**Description**:\nThe web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*   **Secondary Candidate:** This is a potential consequence of the primary weakness (open redirect).\n\n## CWE-41: Improper Resolution of Path Equivalence\n**Abstraction Level**: Base\n**Similarity Score**: 0.78\n**Source**: dense\n\n**Description**:\nThe product is vulnerable to file system contents disclosure through path equivalence. Path equivalence involves the use of special characters in file and directory names. The associated manipulations are intended to generate multiple names for the same object.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*   **Not Used:** This is not related to path equivalence issues.\n\n## CWE-451: User Interface (UI) Misrepresentation of Critical Information\n**Abstraction Level**: Class\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nThe user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*   **Not Used:** This is not related to UI misrepresentation.\n\n## CWE-346: Origin Validation Error\n**Abstraction Level**: Class\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nThe product does not properly verify that the source of data or communication is valid.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*   **Not Used:** While there's a validation issue, CWE-184 is more specific to the root cause.\n\n## CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')\n**Abstraction Level**: Variant\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nThe product receives data from an HTTP agent/component (e.g., web server, proxy, browser, etc.), but it does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*   **Not Used:** This is not related to CRLF injection.\n\n## CWE-917: Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of an expression language (EL) statement in a framework such as a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*   **Not Used:** This is not related to expression language injection.\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-601 | URL Redirection to Untrusted Site ('Open Redirect') | 0.9 | Base | Allowed | Primary CWE |\n| CWE-918 | Server-Side Request Forgery (SSRF) | 0.7 | Base | Allowed | Secondary Candidate |\n| CWE-184 | Incomplete List of Disallowed Inputs | 0.6 | Base | Allowed | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE, CWE-601 URL Redirection to Untrusted Site ('Open Redirect'), is a Base level CWE. The vulnerability description clearly indicates an open redirect vulnerability. CWE-918 Server-Side Request Forgery (SSRF) is also a Base level CWE and listed as an impact. The root cause is **insufficient validation** which relates to **incomplete list of disallowed inputs** of the HttpURI class. This means that the `HttpURI` class does not properly filter or validate URIs, potentially allowing an attacker to redirect users to a malicious site.\n\n```mermaid\ngraph TD\n    cwe601[\"CWE-601: URL Redirection to Untrusted Site ('Open Redirect')\"]\n    cwe918[\"CWE-918: Server-Side Request Forgery (SSRF)\"]\n    cwe184[\"CWE-184: Incomplete List of Disallowed Inputs\"]\n    \n    cwe601 -->|CANRESULTIN| cwe918\n    cwe184 -->|CANPRECEDE| cwe601\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe601 primary\n    class cwe918,cwe184 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **insufficient validation** (**incomplete list of disallowed inputs** - CWE-184) within the `HttpURI` class. This leads to a URL Redirection to Untrusted Site ('Open Redirect') - CWE-601, which can further lead to a Server-Side Request Forgery (SSRF) - CWE-918 if the URI is used by the server.\n\n## Summary of Analysis\nBased on the vulnerability description and the provided CVE Reference Links Content Summary, the primary weakness is an open redirect due to **insufficient validation** in the `HttpURI` class. The `HttpURI` class does not properly filter or validate URIs, potentially allowing an attacker to redirect users to a malicious site. This aligns directly with the description of CWE-601.\n\nThe retriever results also support this, with CWE-601 having the highest similarity score.\n\nCWE-918 (Server-Side Request Forgery) is a secondary concern, as it is listed as an impact of the **insufficient validation**.\n\nCWE-184 (Incomplete List of Disallowed Inputs) is also a secondary concern, as it is the root cause that leads to the open redirect and SSRF.\n\nThe evidence provided clearly supports the selection of CWE-601 as the primary weakness, with CWE-918 as a potential impact and CWE-184 as the root cause. These CWEs are at the appropriate level of specificity (Base).\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 0.78\n**Source**: dense\n\n**Description**:\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*   **Not Used:** This is not directly related to encoding or escaping of output.\n\n## CWE-923: Improper Restriction of Communication Channel to Intended Endpoints\n**Abstraction Level**: Class\n**Similarity Score**: 0.78\n**Source**: dense\n\n**Description**:\nThe product establishes a communication channel to (or from) an endpoint for privileged or protected operations, but it does not properly ensure that it is communicating with the correct endpoint.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*   **Not Used:** This is not the primary issue, although SSRF (CWE-918) could be a consequence.\n\n## CWE-918: Server-Side Request Forgery (SSRF)\n**Abstraction Level**: Base\n**Similarity Score**: 0.78\n**Source**: dense\n\n**Description**:\nThe web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*   **Secondary Candidate:** This is a potential consequence of the primary weakness (open redirect).\n\n## CWE-41: Improper Resolution of Path Equivalence\n**Abstraction Level**: Base\n**Similarity Score**: 0.78\n**Source**: dense\n\n**Description**:\nThe product is vulnerable to file system contents disclosure through path equivalence. Path equivalence involves the use of special characters in file and directory names. The associated manipulations are intended to generate multiple names for the same object.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*   **Not Used:** This is not related to path equivalence issues.\n\n## CWE-451: User Interface (UI) Misrepresentation of Critical Information\n**Abstraction Level**: Class\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nThe user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*   **Not Used:** This is not related to UI misrepresentation.\n\n## CWE-346: Origin Validation Error\n**Abstraction Level**: Class\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nThe product does not properly verify that the source of data or communication is valid.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*   **Not Used:** While there's a validation issue, CWE-184 is more specific to the root cause.\n\n## CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')\n**Abstraction Level**: Variant\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nThe product receives data from an HTTP agent/component (e.g., web server, proxy, browser, etc.), but it does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*   **Not Used:** This is not related to CRLF injection.\n\n## CWE-917: Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of an expression language (EL) statement in a framework such as a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*   **Not Used:** This is not related to expression language injection.\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-116:**\n- 116 (Improper Encoding or Escaping of Output) - ROOT\n\n\n**Chain starting from CWE-346:**\n- 346 (Origin Validation Error) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "601",
        "name": "URL Redirection to Untrusted Site ('Open Redirect')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Open Redirect",
        "match_reason": "term_in_phrase_whole_phrase"
      },
      "similarity": 800.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "1333",
        "name": "Inefficient Regular Expression Complexity",
        "source": "sparse"
      },
      "similarity": 683.0299596555307
    },
    {
      "metadata": {
        "doc_id": "611",
        "name": "Improper Restriction of XML External Entity Reference",
        "source": "sparse"
      },
      "similarity": 650.5522021234221
    },
    {
      "metadata": {
        "doc_id": "113",
        "name": "Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')",
        "source": "sparse"
      },
      "similarity": 640.6787888824558
    },
    {
      "metadata": {
        "doc_id": "295",
        "name": "Improper Certificate Validation",
        "source": "sparse"
      },
      "similarity": 632.3962939356861
    },
    {
      "metadata": {
        "doc_id": "918",
        "name": "Server-Side Request Forgery (SSRF)",
        "source": "sparse"
      },
      "similarity": 629.346501314916
    },
    {
      "metadata": {
        "doc_id": "23",
        "name": "Relative Path Traversal",
        "source": "sparse"
      },
      "similarity": 626.595457643106
    },
    {
      "metadata": {
        "doc_id": "88",
        "name": "Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
        "source": "sparse"
      },
      "similarity": 625.5786580645063
    },
    {
      "metadata": {
        "doc_id": "106",
        "name": "Struts: Plug-in Framework not in Use",
        "type": "Variant",
        "original_content": "When an application does not use an input validation framework such as the Struts Validator, there is a greater risk of introducing weaknesses related to insufficient input validation.",
        "keyphrase_source": "rootcause:insufficient validation",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.4944844564915166,
            "graph": 1.045618927053451
          }
        }
      },
      "similarity": 0.4944844564915166
    },
    {
      "doc_id": "79",
      "text": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
      "score": 2.7196000000000002,
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "type": "base",
        "original_content": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "relationships": [
          {
            "source_id": "79",
            "target_id": "87",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "86",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "85",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "84",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "83",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "81",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "80",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "113",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "352",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "494",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "74",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "79",
            "target_id": "74",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "87",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "86",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "85",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "84",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "83",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "81",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "80",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "74",
            "target_id": "79",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "494",
            "target_id": "79",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "79",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "113",
            "target_id": "79",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "abstraction_path": 0.5599999999999999,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_up",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "113",
                  "79",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "113"
            },
            "abstraction_path_up": {
              "path": [
                [
                  "84",
                  "79",
                  "CHILDOF"
                ]
              ],
              "score": 0.5599999999999999,
              "type": "abstraction_path_up",
              "source": "84"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "113",
                  "79",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_forward",
              "source": "113"
            }
          }
        },
        "abstraction_level": "base",
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "sparse": 612.345126265461,
            "graph": 2.7196000000000002
          }
        }
      },
      "similarity": 2.7196000000000002
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-116",
      "CWE-346",
      "CWE-601",
      "CWE-917",
      "CWE-113",
      "CWE-923",
      "CWE-74",
      "CWE-451",
      "CWE-184",
      "CWE-918",
      "CWE-41"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}