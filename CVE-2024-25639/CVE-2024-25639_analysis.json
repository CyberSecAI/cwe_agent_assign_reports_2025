{
  "cve_id": "CVE-2024-25639",
  "description": "Khoj is an application that creates personal AI agents. The Khoj Obsidian, Desktop and Web clients **inadequately sanitize the AI models response and user inputs**. This can trigger Cross Site Scripting (XSS) via Prompt Injection from untrusted documents either indexed by the user on Khoj or read by Khoj from the internet when the user invokes the /online command. This vulnerability is fixed in 1.13.0.",
  "key_phrases": {
    "rootcause": "inadequately sanitize the AI models response and user inputs",
    "weakness": "cross-site scripting",
    "impact": "",
    "vector": "prompt injection",
    "attacker": "",
    "product": "Khoj",
    "version": "before 1.13.0",
    "component": "Obsidian, Desktop and Web clients"
  },
  "reference_content": "Based on the provided content, here's an analysis of the vulnerability described:\n\n**Root Cause:**\n\nThe vulnerability stems from inadequate sanitization of AI model responses and user inputs within the Khoj Obsidian, Desktop, and Web clients. This lack of proper sanitization allows for the injection of malicious code, specifically through prompt injection, when processing untrusted documents or web content.\n\n**Weaknesses/Vulnerabilities Present:**\n\n*   **Cross-Site Scripting (XSS):** The core vulnerability is XSS, triggered by the injection of malicious HTML and JavaScript.\n*   **Prompt Injection:** The AI model can be manipulated through crafted prompts in indexed documents or read from adversarial websites, causing it to generate malicious responses.\n*  **Lack of Input Sanitization:** The application fails to properly sanitize user inputs and AI-generated content before rendering them in the chat interface.\n\n**Impact of Exploitation:**\n\n*   **Notification of Malicious Document Access:** Attackers can be notified when their malicious documents are accessed by Khoj.\n*   **Unwanted Image Loading:** Attackers can inject code to load unexpected images into a user's chat session.\n*   **Client Application Issues:** Malicious JavaScript can cause the user's client application to hang.\n*   **Potential Secret Stealing:** Attackers could potentially steal secrets from the desktop app by abusing exposed `preload.js` functions.\n*   **Potential Remote Code Execution (RCE):** Under specific system configurations, HTML injection combined with special URI schemes could lead to one-click RCE.\n\n**Attack Vectors:**\n\n*   **Maliciously Crafted Documents:** Users indexing documents containing malicious prompts can trigger the vulnerability.\n*   **Adversarial Websites:** When users invoke the `/online` command, Khoj might read malicious content from adversarial websites, which could then be used to trigger the vulnerability.\n*   **Direct User Input:** Malicious payloads can also be injected through direct user inputs in the chat modal.\n\n**Required Attacker Capabilities/Position:**\n\n*   **Ability to Create or Modify Documents:** Attackers need the ability to create or modify documents that are indexed by Khoj or to host malicious content on the internet that Khoj might access when using the `/online` command.\n*   **User Interaction:** Exploitation of this vulnerability requires user interaction, either by using the `/online` command or by interacting with the chat application.\n\n**Mitigation:**\n\nThe provided content also details the fix and mitigation:\n\n*   **DOMPurify Sanitization:** The rendered chat messages are now sanitized using DOMPurify.\n*   **Content Security Policy (CSP):** CSP restrictions have been implemented across Obsidian, Desktop, and Web chat clients.\n*   **Future Improvement**:  The team plans to use finetuned LLMs to separate Data from Instructions to better address prompt injection.\n\n**CVE ID:** CVE-2024-25639\n\n**CWE:** CWE-80 (Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS))",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 1.0 | Base | Allowed | Primary CWE: Root cause is **improper sanitization** leading to XSS. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship that influenced the decision was the direct match of the vulnerability description to CWE-79. While other CWEs like CWE-116 (Improper Encoding or Escaping of Output) were considered, CWE-79 directly addresses the **improper neutralization** of input leading to Cross-Site Scripting (XSS). The graph relationships between CWE-79 and other injection-related CWEs (e.g., CWE-89, CWE-78) highlight the broader context of input validation vulnerabilities, but CWE-79 remains the most specific and relevant.\n\n```mermaid\ngraph TD\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    cwe116[\"CWE-116: Improper Encoding or Escaping of Output\"]\n    cwe113[\"CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')\"]\n    cwe89[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"]\n    cwe78[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"]\n\n    cwe116 -->|PEEROF| cwe79\n    cwe113 -->|PEEROF| cwe79\n    cwe89 -->|CHILDOF| cwe74\n    cwe78 -->|CHILDOF| cwe74\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n    cwe79 -->|CANPRECEDE| cwe494\n    cwe494[\"CWE-494: Download of Code Without Integrity Check\"]\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe79 primary\n    class cwe116,cwe113,cwe89,cwe78,cwe74,cwe494 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with the **inadequate sanitization** of user inputs and AI model responses. This leads to the possibility of **prompt injection**, which then results in the generation of malicious web page content, and finally the execution of that content in a user's browser as **Cross-Site Scripting (XSS)**.\n\nInadequate Sanitization -> Prompt Injection -> Malicious Web Page Content -> XSS\n\n## Summary of Analysis\nThe initial analysis focused on identifying the root cause of the vulnerability, which is the **inadequate sanitization** of AI model responses and user inputs. The subsequent prompt injection leading to XSS confirms this. The vulnerability description clearly states that the Khoj application **inadequately sanitizes the AI models response and user inputs**, which is the primary cause. This leads to Cross Site Scripting (XSS).\n\nThe retriever results and graph relationships support the selection of CWE-79 as the primary CWE. CWE-79 (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')) directly addresses the core issue of failing to neutralize user-controllable input before placing it in a web page. The fix involving DOMPurify sanitization and CSP implementation further validates that improper output sanitization was the root cause.\n\nThe selection of CWE-79 is at the optimal level of specificity because it accurately reflects the **improper neutralization** of input leading directly to XSS. While other CWEs like CWE-116 (Improper Encoding or Escaping of Output) could be related, CWE-79 is the most direct and specific representation of the vulnerability.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 1.0 | Base | Allowed | Primary CWE: Root cause is **improper sanitization** leading to XSS. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship that influenced the decision was the direct match of the vulnerability description to CWE-79. While other CWEs like CWE-116 (Improper Encoding or Escaping of Output) were considered, CWE-79 directly addresses the **improper neutralization** of input leading to Cross-Site Scripting (XSS). The graph relationships between CWE-79 and other injection-related CWEs (e.g., CWE-89, CWE-78) highlight the broader context of input validation vulnerabilities, but CWE-79 remains the most specific and relevant.\n\n```mermaid\ngraph TD\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    cwe116[\"CWE-116: Improper Encoding or Escaping of Output\"]\n    cwe113[\"CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')\"]\n    cwe89[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"]\n    cwe78[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"]\n\n    cwe116 -->|PEEROF| cwe79\n    cwe113 -->|PEEROF| cwe79\n    cwe89 -->|CHILDOF| cwe74\n    cwe78 -->|CHILDOF| cwe74\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n    cwe79 -->|CANPRECEDE| cwe494\n    cwe494[\"CWE-494: Download of Code Without Integrity Check\"]\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe79 primary\n    class cwe116,cwe113,cwe89,cwe78,cwe74,cwe494 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with the **inadequate sanitization** of user inputs and AI model responses. This leads to the possibility of **prompt injection**, which then results in the generation of malicious web page content, and finally the execution of that content in a user's browser as **Cross-Site Scripting (XSS)**.\n\nInadequate Sanitization -> Prompt Injection -> Malicious Web Page Content -> XSS\n\n## Summary of Analysis\nThe initial analysis focused on identifying the root cause of the vulnerability, which is the **inadequate sanitization** of AI model responses and user inputs. The subsequent prompt injection leading to XSS confirms this. The vulnerability description clearly states that the Khoj application **inadequately sanitizes the AI models response and user inputs**, which is the primary cause. This leads to Cross Site Scripting (XSS).\n\nThe retriever results and graph relationships support the selection of CWE-79 as the primary CWE. CWE-79 (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')) directly addresses the core issue of failing to neutralize user-controllable input before placing it in a web page. The fix involving DOMPurify sanitization and CSP implementation further validates that improper output sanitization was the root cause.\n\nThe selection of CWE-79 is at the optimal level of specificity because it accurately reflects the **improper neutralization** of input leading directly to XSS. While other CWEs like CWE-116 (Improper Encoding or Escaping of Output) could be related, CWE-79 is the most direct and specific representation of the vulnerability.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-89:**\n- 89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')) - ROOT\n\n\n**Chain starting from CWE-116:**\n- 116 (Improper Encoding or Escaping of Output) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse"
      },
      "similarity": 388.7895941942493
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 377.7979398829913
    },
    {
      "metadata": {
        "doc_id": "113",
        "name": "Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')",
        "source": "sparse"
      },
      "similarity": 376.1511913416436
    },
    {
      "metadata": {
        "doc_id": "138",
        "name": "Improper Neutralization of Special Elements",
        "source": "sparse"
      },
      "similarity": 367.6882110150954
    },
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "sparse"
      },
      "similarity": 348.3013781493999
    },
    {
      "metadata": {
        "doc_id": "74",
        "name": "Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')",
        "source": "sparse"
      },
      "similarity": 346.94537220634834
    },
    {
      "metadata": {
        "doc_id": "918",
        "name": "Server-Side Request Forgery (SSRF)",
        "source": "sparse"
      },
      "similarity": 346.88234697173766
    },
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse"
      },
      "similarity": 339.9770496816193
    },
    {
      "metadata": {
        "doc_id": "502",
        "name": "Deserialization of Untrusted Data",
        "type": "Base",
        "original_content": "The product deserializes untrusted data without sufficiently ensuring that the resulting data will be valid.",
        "keyphrase_source": "rootcause:inadequately sanitize the AI models response",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.4495865288985786,
            "graph": 1.4647312009845008
          }
        }
      },
      "similarity": 0.4495865288985786
    },
    {
      "doc_id": "184",
      "text": "CWE-184: Incomplete List of Disallowed Inputs",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "184",
        "name": "Incomplete List of Disallowed Inputs",
        "type": "base",
        "original_content": "CWE-184: Incomplete List of Disallowed Inputs",
        "relationships": [
          {
            "source_id": "184",
            "target_id": "692",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "434",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "78",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "79",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "1023",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "693",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "86",
            "target_id": "184",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "78",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "693",
            "target_id": "184",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "692",
            "target_id": "184",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "692",
            "target_id": "184",
            "label": "STARTSWITH",
            "properties": {
              "view_id": "709"
            }
          },
          {
            "source_id": "625",
            "target_id": "184",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "186",
            "target_id": "184",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1023",
            "target_id": "184",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "79",
                  "184",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "79"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "79",
                  "184",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "79"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "184",
                  "79",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "79"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "sparse",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "sparse": 322.44986907601515,
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-89",
      "CWE-116",
      "CWE-494",
      "CWE-79",
      "CWE-113",
      "CWE-74",
      "CWE-78"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}