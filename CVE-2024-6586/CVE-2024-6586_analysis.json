{
  "cve_id": "CVE-2024-6586",
  "description": "Lightdash version 0.1024.6 allows users with the necessary permissions, such as Administrator or Editor, to create and share dashboards. A dashboard that contains HTML elements which point to a threat actor controlled source can trigger an SSRF request when exported, via a POST request to /api/v1/dashboards//export. The forged request contains the value of the exporting users session token. A threat actor could obtain the session token of any user who exports the dashboard. The obtained session token can be used to perform actions as the victim on the application, resulting in session takeover.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "",
    "impact": "session takeover",
    "vector": "",
    "attacker": "users with necessary permissions",
    "product": "Lightdash",
    "version": "0.1024.6",
    "component": ""
  },
  "reference_content": "Based on the provided content, here's a breakdown of the vulnerability associated with CVE-2024-6586:\n\n**Root Cause:**\nThe vulnerability stems from how Lightdash's dashboard export functionality uses Puppeteer. Specifically, Puppeteer was setting sensitive headers, including cookies, on requests made to the headless browser during dashboard export. This resulted in the exporting user's session cookie being included in requests to external domains embedded within the dashboard.\n\n**Weaknesses/Vulnerabilities Present:**\n*   **Server-Side Request Forgery (SSRF):** The application allows the injection of HTML elements into a dashboard, which, when exported, trigger HTTP requests to attacker-controlled domains.\n*   **Session Cookie Exposure:** The SSRF vulnerability leads to the leakage of the exporting user's session cookie to the attacker-controlled domain.\n\n**Impact of Exploitation:**\n*   **User Session Hijacking:** An attacker can steal the session cookie and use it to impersonate the user, gaining unauthorized access to the application.\n*   **Administrative Control Takeover:** If an administrative user's session is compromised, the attacker could gain complete control over the Lightdash instance.\n\n**Attack Vectors:**\n*   **HTML Injection:** The attacker injects malicious HTML, including `<iframe>` or `<img>` tags with attacker-controlled URLs, into a shared dashboard's markdown content.\n*   **Dashboard Export:** Any user who exports a dashboard containing the injected HTML will trigger the SSRF and leak their session cookie.\n\n**Required Attacker Capabilities/Position:**\n*   **Authenticated User:** The attacker must have an account on the Lightdash application.\n*   **Dashboard Creation/Editing Permissions:** The attacker needs the ability to create or edit shared dashboards to inject the malicious HTML.\n*   **Network Access:** The attacker needs an accessible endpoint to receive the exfiltrated cookies.\n\n**Additional Technical Details:**\n*   The vulnerability was present in Lightdash version 0.1024.6.\n*   The issue was resolved in version 0.1027.2 by changing the method of setting the cookie for the puppeteer browser.\n*   The fix involved extracting the `connect.sid` cookie value and using `page.setCookie` instead of `page.setExtraHTTPHeaders`, ensuring the cookie was properly scoped to the application's domain.\n*   The vulnerability can be triggered by any user exporting a dashboard with the injected code.\n*   The vulnerability can be combined with XSS attacks (CVE-2024-6585) to force users to export malicious dashboards.\n*   CVSS v3 score: 7.3 (High), CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:N\n\n**Remediation:**\nUpgrade to Lightdash version 0.1027.2 or later.\n\nThe provided content gives detailed information on how the vulnerability is exploited, how it was fixed by the vendor, and the impact it can have on the system.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID    | CWE Name                                                                 | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :----------------------------------------------------------------------- | :--------- | :-------------------- | :------------------------------ | :------------------------------ |\n| CWE-918   | Server-Side Request Forgery (SSRF)                                       | 0.9        | Base                  | Primary CWE                     | Allowed                       |\n| CWE-200   | Exposure of Sensitive Information to an Unauthorized Actor               | 0.8        | Class                 | Secondary Candidate             | Discouraged                    |\n| CWE-306   | Missing Authentication for Critical Function                             | 0.7        | Base                  | Secondary Candidate             | Allowed                       |\n| CWE-863   | Incorrect Authorization                                                  | 0.6        | Class                 | Secondary Candidate             | Allowed-with-Review           |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-918, representing the **Server-Side Request Forgery (SSRF)**. The secondary CWEs, such as CWE-200, CWE-306, and CWE-863, capture aspects of the impact and contributing factors. CWE-918 is a Base level CWE, which is preferred. The class level CWE-200, CWE-306 and CWE-863 are less specific but capture the high level vulnerabilities.\n\n```mermaid\ngraph TD\n    cwe918[\"CWE-918: Server-Side Request Forgery (SSRF)\"]\n    cwe200[\"CWE-200: Exposure of Sensitive Information\"]\n    cwe306[\"CWE-306: Missing Authentication for Critical Function\"]\n    cwe863[\"CWE-863: Incorrect Authorization\"]\n    \n    cwe200 -->|CANPRECEDE| cwe918\n    cwe306 -->|CANPRECEDE| cwe918\n    cwe863 -->|CANPRECEDE| cwe918\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe918 primary\n    class cwe200,cwe306,cwe863 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the injection of HTML elements into a dashboard, leading to **Server-Side Request Forgery (SSRF)** when the dashboard is exported. This SSRF allows the exposure of the user's session cookie to an attacker-controlled domain, potentially due to **Missing Authentication for Critical Function** in the export process or **Incorrect Authorization** allowing external requests with sensitive data. The ultimate impact is the **Exposure of Sensitive Information**, specifically the session token, enabling session takeover.\n\nVulnerability Chain:\n1.  HTML Injection (Implicit)\n2.  CWE-918: Server-Side Request Forgery (SSRF)\n3.  CWE-200: Exposure of Sensitive Information\n4.  Session Takeover (Impact)\n\n## Summary of Analysis\nThe analysis is based on the vulnerability description and CVE reference links. The primary weakness is clearly identified as **Server-Side Request Forgery (SSRF)**, where the application constructs a request to an external server based on user-controlled input without proper validation. The session token exposure and potential authorization bypass are secondary consequences.\n\nThe selection of CWE-918 as the primary CWE is strongly supported by the evidence from the CVE Reference Links Content Summary, which states: \"The vulnerability stems from how Lightdash's dashboard export functionality uses Puppeteer... This resulted in the exporting user's session cookie being included in requests to external domains embedded within the dashboard.\"\n\nThe other suggested CWEs are considered as contributing factors or impacts.\n\n*   CWE-200 is a class level weakness and the reference article points to specific sensitive data exposure i.e. session token which is more clearly defined by the SSRF. \n*   CWE-306 and CWE-863 could be contributing factors, but the primary issue is the SSRF itself.\n\nCWE-918 is at the optimal level of specificity, directly addressing the root cause of the vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-267: Privilege Defined With Unsafe Actions\n**Abstraction Level**: Base\n**Similarity Score**: 0.78\n**Source**: dense\n**Description**: A particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-668: Exposure of Resource to Wrong Sphere\n**Abstraction Level**: Class\n**Similarity Score**: 0.77\n**Source**: dense\n**Description**: The product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-668 is high-level and is often misused as a catch-all when lower-level CWE IDs might be applicable. It is sometimes used for low-information vulnerability reports [REF-1287]. It is a level-1 Class (i.e., a child of a Pillar). It is not useful for trend analysis.\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.77\n**Source**: dense\n**Description**: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n## CWE-472: External Control of Assumed-Immutable Web Parameter\n**Abstraction Level**: Base\n**Similarity Score**: 0.77\n**Source**: dense\n**Description**: The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-425: Direct Request ('Forced Browsing')\n**Abstraction Level**: Base\n**Similarity Score**: 0.77\n**Source**: dense\n**Description**: The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-639: Authorization Bypass Through User-Controlled Key\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n**Description**: The system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n**Description**: The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n**Description**: The product does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the product does.\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-918: Server-Side Request Forgery (SSRF)\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n**Description**: The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.\n**Mapping Guidance**:\n-",
  "analysis_with_relationships": "# Summary\n| CWE ID    | CWE Name                                                                 | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :----------------------------------------------------------------------- | :--------- | :-------------------- | :------------------------------ | :------------------------------ |\n| CWE-918   | Server-Side Request Forgery (SSRF)                                       | 0.9        | Base                  | Primary CWE                     | Allowed                       |\n| CWE-200   | Exposure of Sensitive Information to an Unauthorized Actor               | 0.8        | Class                 | Secondary Candidate             | Discouraged                    |\n| CWE-306   | Missing Authentication for Critical Function                             | 0.7        | Base                  | Secondary Candidate             | Allowed                       |\n| CWE-863   | Incorrect Authorization                                                  | 0.6        | Class                 | Secondary Candidate             | Allowed-with-Review           |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-918, representing the **Server-Side Request Forgery (SSRF)**. The secondary CWEs, such as CWE-200, CWE-306, and CWE-863, capture aspects of the impact and contributing factors. CWE-918 is a Base level CWE, which is preferred. The class level CWE-200, CWE-306 and CWE-863 are less specific but capture the high level vulnerabilities.\n\n```mermaid\ngraph TD\n    cwe918[\"CWE-918: Server-Side Request Forgery (SSRF)\"]\n    cwe200[\"CWE-200: Exposure of Sensitive Information\"]\n    cwe306[\"CWE-306: Missing Authentication for Critical Function\"]\n    cwe863[\"CWE-863: Incorrect Authorization\"]\n    \n    cwe200 -->|CANPRECEDE| cwe918\n    cwe306 -->|CANPRECEDE| cwe918\n    cwe863 -->|CANPRECEDE| cwe918\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe918 primary\n    class cwe200,cwe306,cwe863 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the injection of HTML elements into a dashboard, leading to **Server-Side Request Forgery (SSRF)** when the dashboard is exported. This SSRF allows the exposure of the user's session cookie to an attacker-controlled domain, potentially due to **Missing Authentication for Critical Function** in the export process or **Incorrect Authorization** allowing external requests with sensitive data. The ultimate impact is the **Exposure of Sensitive Information**, specifically the session token, enabling session takeover.\n\nVulnerability Chain:\n1.  HTML Injection (Implicit)\n2.  CWE-918: Server-Side Request Forgery (SSRF)\n3.  CWE-200: Exposure of Sensitive Information\n4.  Session Takeover (Impact)\n\n## Summary of Analysis\nThe analysis is based on the vulnerability description and CVE reference links. The primary weakness is clearly identified as **Server-Side Request Forgery (SSRF)**, where the application constructs a request to an external server based on user-controlled input without proper validation. The session token exposure and potential authorization bypass are secondary consequences.\n\nThe selection of CWE-918 as the primary CWE is strongly supported by the evidence from the CVE Reference Links Content Summary, which states: \"The vulnerability stems from how Lightdash's dashboard export functionality uses Puppeteer... This resulted in the exporting user's session cookie being included in requests to external domains embedded within the dashboard.\"\n\nThe other suggested CWEs are considered as contributing factors or impacts.\n\n*   CWE-200 is a class level weakness and the reference article points to specific sensitive data exposure i.e. session token which is more clearly defined by the SSRF. \n*   CWE-306 and CWE-863 could be contributing factors, but the primary issue is the SSRF itself.\n\nCWE-918 is at the optimal level of specificity, directly addressing the root cause of the vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-267: Privilege Defined With Unsafe Actions\n**Abstraction Level**: Base\n**Similarity Score**: 0.78\n**Source**: dense\n**Description**: A particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-668: Exposure of Resource to Wrong Sphere\n**Abstraction Level**: Class\n**Similarity Score**: 0.77\n**Source**: dense\n**Description**: The product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-668 is high-level and is often misused as a catch-all when lower-level CWE IDs might be applicable. It is sometimes used for low-information vulnerability reports [REF-1287]. It is a level-1 Class (i.e., a child of a Pillar). It is not useful for trend analysis.\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.77\n**Source**: dense\n**Description**: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n## CWE-472: External Control of Assumed-Immutable Web Parameter\n**Abstraction Level**: Base\n**Similarity Score**: 0.77\n**Source**: dense\n**Description**: The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-425: Direct Request ('Forced Browsing')\n**Abstraction Level**: Base\n**Similarity Score**: 0.77\n**Source**: dense\n**Description**: The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-639: Authorization Bypass Through User-Controlled Key\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n**Description**: The system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n**Description**: The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n**Description**: The product does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the product does.\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-918: Server-Side Request Forgery (SSRF)\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n**Description**: The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.\n**Mapping Guidance**:\n-\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-863:**\n- 863 (Incorrect Authorization) - ROOT\n\n\n**Chain starting from CWE-639:**\n- 639 (Authorization Bypass Through User-Controlled Key) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse"
      },
      "similarity": 184.37705432114876
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 182.53617893063543
    },
    {
      "metadata": {
        "doc_id": "425",
        "name": "Direct Request ('Forced Browsing')",
        "source": "sparse"
      },
      "similarity": 182.07073029554638
    },
    {
      "metadata": {
        "doc_id": "200",
        "name": "Exposure of Sensitive Information to an Unauthorized Actor",
        "source": "sparse"
      },
      "similarity": 181.0323590056504
    },
    {
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "source": "sparse"
      },
      "similarity": 180.96889712595063
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 180.69420072838656
    },
    {
      "metadata": {
        "doc_id": "306",
        "name": "Missing Authentication for Critical Function",
        "source": "sparse"
      },
      "similarity": 179.44752495948532
    },
    {
      "metadata": {
        "doc_id": "287",
        "name": "Improper Authentication",
        "source": "sparse"
      },
      "similarity": 179.40957574390413
    },
    {
      "metadata": {
        "doc_id": "918",
        "name": "Server-Side Request Forgery (SSRF)",
        "type": "Base",
        "original_content": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.3799980561471607
          }
        }
      },
      "similarity": 0.3799980561471607
    },
    {
      "doc_id": "202",
      "text": "When trying to keep information confidential, an attacker can often infer some of the information by using statistics.",
      "score": 0.4552449113465599,
      "metadata": {
        "doc_id": "202",
        "name": "Exposure of Sensitive Information Through Data Queries",
        "type": "Base",
        "extended_description": "In situations where data should not be tied to individual users, but a large number of users should be able to make queries that \"scrub\" the identity of users, it may be possible to get information about a user -- e.g., by specifying search terms that are known to be unique to that user.",
        "alternate_terms": [],
        "original_content": "When trying to keep information confidential, an attacker can often infer some of the information by using statistics.",
        "relationships": [
          {
            "source_id": "202",
            "target_id": "1230",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "201",
            "target_id": "202",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1230",
            "target_id": "202",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "source": "graph",
        "sources": [
          "vector",
          "graph"
        ],
        "vector_score": 0.4552449113465599,
        "graph_score": 3.6399999999999997,
        "score_components": {
          "relationship_chain": 0.7,
          "explicit_mention": 1.0,
          "abstraction_path": 0.9,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "201",
                  "202",
                  "CANALSOBE"
                ]
              ],
              "score": 0.7,
              "type": "relationship_chain",
              "source": "201"
            },
            "peer_relationship": {
              "path": [
                [
                  "201",
                  "202",
                  "CANALSOBE"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "201"
            }
          }
        },
        "is_explicit": true,
        "abstraction_level": "base",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.3748951869517281,
            "graph": 2.3660979645386235
          }
        }
      },
      "similarity": 2.3660979645386235
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-863",
      "CWE-639",
      "CWE-212",
      "CWE-306",
      "CWE-472",
      "CWE-74",
      "CWE-668",
      "CWE-267",
      "CWE-918",
      "CWE-200",
      "CWE-497",
      "CWE-425"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}