{
  "retriever": "sparse",
  "query": "In the Linux kernel, the following vulnerability has been resolved sched/fair Fix potential memory corruption in child_cfs_rq_on_list child_cfs_rq_on_list attempts to convert a prev pointer to a cfs_rq. This prev pointer can originate from struct rqs leaf_cfs_rq_list, making the conversion invalid and potentially leading to memory corruption. Depending on the relative positions of leaf_cfs_rq_list and the task group (tg) pointer within the struct, this can cause a memory fault or access garbage data. The issue arises in list_add_leaf_cfs_rq, where both cfs_rq->leaf_cfs_rq_list and rq->leaf_cfs_rq_list are added to the same leaf list. Also, rq->tmp_alone_branch can be set to rq->leaf_cfs_rq_list. This adds a check `if (prev == &rq->leaf_cfs_rq_list)` after the main conditional in child_cfs_rq_on_list. This ensures that the container_of operation will convert a correct cfs_rq struct. This check is sufficient because only cfs_rqs on the same CPU are added to the list, so verifying the prev pointer against the current rqs list head is enough. Fixes a potential memory corruption issue that due to current struct layout might not be manifesting as a crash but could lead to unpredictable behavior when the layout changes.",
  "keyphrases": {
    "weakness": [
      "memory corruption"
    ]
  },
  "timestamp": "2025-07-12 09:58:34",
  "cve_id": "CVE-2025-21919",
  "result_count": 10,
  "results": [
    {
      "cwe_id": "787",
      "name": "Out-of-bounds Write",
      "score": 1000.0,
      "search_source": "alternate_term_match"
    },
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "score": 900.0126520084771,
      "search_source": "weakness:memory corruption"
    },
    {
      "cwe_id": "909",
      "name": "Missing Initialization of Resource",
      "score": 875.3841537804569,
      "search_source": "weakness:memory corruption"
    },
    {
      "cwe_id": "415",
      "name": "Double Free",
      "score": 860.9638949301341,
      "search_source": "weakness:memory corruption"
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "score": 859.9109594388889,
      "search_source": "weakness:memory corruption"
    },
    {
      "cwe_id": "824",
      "name": "Access of Uninitialized Pointer",
      "score": 837.7610368528906,
      "search_source": "weakness:memory corruption"
    },
    {
      "cwe_id": "252",
      "name": "Unchecked Return Value",
      "score": 831.9337914948202,
      "search_source": "weakness:memory corruption"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 831.4743286436847,
      "search_source": "weakness:memory corruption"
    },
    {
      "cwe_id": "190",
      "name": "Integer Overflow or Wraparound",
      "score": 829.4222813332948,
      "search_source": "weakness:memory corruption"
    },
    {
      "cwe_id": "457",
      "name": "Use of Uninitialized Variable",
      "score": 827.063035614301,
      "search_source": "weakness:memory corruption"
    }
  ]
}