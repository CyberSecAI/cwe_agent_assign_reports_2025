{
  "cve_id": "CVE-2024-38460",
  "description": "In SonarQube before 10.4 and 9.9.4 LTA, encrypted values generated using the Settings Encryption feature are potentially exposed in cleartext as part of the URL parameters in the logs (such as SonarQube Access Logs, Proxy Logs, etc).",
  "key_phrases": {
    "rootcause": "",
    "weakness": "",
    "impact": "expose encrypted values generated using the Settings Encryption feature in cleartext",
    "vector": "",
    "attacker": "",
    "product": "SonarQube",
    "version": "before 10.4 and 9.9.4 LTA",
    "component": ""
  },
  "reference_content": "Based on the provided content, here's an analysis of the vulnerability:\n\n**Root Cause of Vulnerability:**\n\nThe vulnerability stems from the way SonarQube's settings encryption feature handles the values to be encrypted. Instead of passing these values in the request body, which is typically not logged, they are passed as URI parameters to the `/encrypt` API endpoint. This causes the values to be logged by the web server and potentially any intermediary HTTPS proxies.\n\n**Weaknesses/Vulnerabilities Present:**\n\n*   **Exposure of Sensitive Data in Logs:** The primary weakness is the logging of unencrypted sensitive data (the values intended for encryption) within web server logs. This completely defeats the purpose of the encryption feature itself.\n\n**Impact of Exploitation:**\n\n*   **Compromised Secrets:** Attackers with access to the web server logs or proxy logs can obtain the values intended to be encrypted. This can lead to a variety of security breaches depending on what secrets were exposed (e.g. database credentials, API keys etc.).\n*   **Loss of Confidentiality:** The leak compromises the confidentiality of sensitive information, which is the main objective of the encryption feature.\n\n**Attack Vectors:**\n\n*   **Access to Web Server Logs:** An attacker who gains unauthorized access to the web server's log files can extract the sensitive information that was logged as URI parameters.\n*   **Access to Proxy Logs:** If an HTTPS proxy is used, its logs might also contain the vulnerable information. Any attacker with access to these logs will be able to compromise the sensitive data.\n\n**Required Attacker Capabilities/Position:**\n\n*   **Access to Server Logs:** The attacker needs to be able to access the web server's log files. This could mean the attacker compromised the server, has access to a logging server, or otherwise has access to where these logs are being stored.\n*   **Access to Proxy Logs:** If proxies are being used, the attacker could also be in a position to obtain and analyze those log files.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-532 | Insertion of Sensitive Information into Log File | 1.0 | Base | Allowed | Primary CWE. The vulnerability results from logging sensitive information. |\n| CWE-598 | Use of GET Request Method With Sensitive Query Strings | 0.8 | Variant | Allowed | Secondary CWE. Using GET requests exposes the sensitive information through query strings. |\n| CWE-311 | Missing Encryption of Sensitive Data | 0.7 | Class | Discouraged | Secondary CWE. Data intended to be encrypted is exposed in plain text due to improper handling, which can be seen as a failure to encrypt it effectively, though encryption was attempted. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-532 (Insertion of Sensitive Information into Log File), which directly addresses the logging of sensitive data. CWE-598 (Use of GET Request Method With Sensitive Query Strings) is a variant that explains how the sensitive data gets into the logs, that is using GET requests exposes the data in the URL. CWE-311 (Missing Encryption of Sensitive Data) is a class-level CWE that describes the high-level issue of failing to encrypt sensitive data, although the attempt was there, which led to the exposure. The hierarchical relationship informed the selection, favoring the more specific Base level CWE-532.\n\n```mermaid\ngraph TD\n    cwe532[\"CWE-532: Insertion of Sensitive Information into Log File\"]\n    cwe598[\"CWE-598: Use of GET Request Method With Sensitive Query Strings\"]\n    cwe311[\"CWE-311: Missing Encryption of Sensitive Data\"]\n    cwe201[\"CWE-201: Insertion of Sensitive Information Into Sent Data\"]\n    \n    cwe598 -->|CHILDOF| cwe201\n    cwe532 -->|RELATED| cwe598\n    cwe598 -->|PART_OF| cwe532\n    cwe201 -->|PART_OF| cwe532\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe532 primary\n    class cwe598,cwe311 secondary\n```\n\n## Vulnerability Chain\n1.  The application uses a GET request to send data for encryption via the `/encrypt` API endpoint.\n2.  This results in the sensitive data being included in the URL query string (**CWE-598: Use of GET Request Method With Sensitive Query Strings**).\n3.  The web server logs the URL, including the sensitive data (**CWE-532: Insertion of Sensitive Information into Log File**).\n4.  The **impact** is that sensitive data intended for encryption is exposed in plain text, which can be seen as a failure to encrypt it effectively (**CWE-311: Missing Encryption of Sensitive Data**).\n\n## Summary of Analysis\nThe vulnerability is primarily due to the logging of sensitive information. The evidence clearly indicates that encrypted values are exposed in cleartext within the logs due to their presence in the URL parameters. This aligns directly with CWE-532 (Insertion of Sensitive Information into Log File). The use of GET requests (CWE-598) exacerbates the issue by placing the sensitive data in the URL. The attempt to encrypt the data was **insufficient**, leading to the exposure (**impact**).\n\nThe retriever results correctly identified CWE-532 as the top candidate. While other CWEs like CWE-312 (Cleartext Storage of Sensitive Information) and CWE-256 (Plaintext Storage of a Password) were considered, they were less relevant because the data was not stored in cleartext, but rather exposed in logs during transmission. The selection of CWE-532 is at the optimal level of specificity, as it accurately describes the core issue of sensitive data being logged.\n\nRelevant CWE Information:\n\n**CWE-532: Insertion of Sensitive Information into Log File**\nThe product writes sensitive information to a log file.\n\n**CWE-598: Use of GET Request Method With Sensitive Query Strings**\nThe product uses the GET request method to transmit sensitive information as part of a query string. This can expose the information to an unauthorized actor.\n\n**CWE-311: Missing Encryption of Sensitive Data**\nThe product does not encrypt sensitive or critical information before storage or transmission.\n\nThe selection of these CWEs is based on the evidence that the application logs sensitive information in URLs due to the use of GET requests. This leads to the **impact** that the data, intended to be encrypted, is exposed in plain text.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-532 | Insertion of Sensitive Information into Log File | 1.0 | Base | Allowed | Primary CWE. The vulnerability results from logging sensitive information. |\n| CWE-598 | Use of GET Request Method With Sensitive Query Strings | 0.8 | Variant | Allowed | Secondary CWE. Using GET requests exposes the sensitive information through query strings. |\n| CWE-311 | Missing Encryption of Sensitive Data | 0.7 | Class | Discouraged | Secondary CWE. Data intended to be encrypted is exposed in plain text due to improper handling, which can be seen as a failure to encrypt it effectively, though encryption was attempted. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-532 (Insertion of Sensitive Information into Log File), which directly addresses the logging of sensitive data. CWE-598 (Use of GET Request Method With Sensitive Query Strings) is a variant that explains how the sensitive data gets into the logs, that is using GET requests exposes the data in the URL. CWE-311 (Missing Encryption of Sensitive Data) is a class-level CWE that describes the high-level issue of failing to encrypt sensitive data, although the attempt was there, which led to the exposure. The hierarchical relationship informed the selection, favoring the more specific Base level CWE-532.\n\n```mermaid\ngraph TD\n    cwe532[\"CWE-532: Insertion of Sensitive Information into Log File\"]\n    cwe598[\"CWE-598: Use of GET Request Method With Sensitive Query Strings\"]\n    cwe311[\"CWE-311: Missing Encryption of Sensitive Data\"]\n    cwe201[\"CWE-201: Insertion of Sensitive Information Into Sent Data\"]\n    \n    cwe598 -->|CHILDOF| cwe201\n    cwe532 -->|RELATED| cwe598\n    cwe598 -->|PART_OF| cwe532\n    cwe201 -->|PART_OF| cwe532\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe532 primary\n    class cwe598,cwe311 secondary\n```\n\n## Vulnerability Chain\n1.  The application uses a GET request to send data for encryption via the `/encrypt` API endpoint.\n2.  This results in the sensitive data being included in the URL query string (**CWE-598: Use of GET Request Method With Sensitive Query Strings**).\n3.  The web server logs the URL, including the sensitive data (**CWE-532: Insertion of Sensitive Information into Log File**).\n4.  The **impact** is that sensitive data intended for encryption is exposed in plain text, which can be seen as a failure to encrypt it effectively (**CWE-311: Missing Encryption of Sensitive Data**).\n\n## Summary of Analysis\nThe vulnerability is primarily due to the logging of sensitive information. The evidence clearly indicates that encrypted values are exposed in cleartext within the logs due to their presence in the URL parameters. This aligns directly with CWE-532 (Insertion of Sensitive Information into Log File). The use of GET requests (CWE-598) exacerbates the issue by placing the sensitive data in the URL. The attempt to encrypt the data was **insufficient**, leading to the exposure (**impact**).\n\nThe retriever results correctly identified CWE-532 as the top candidate. While other CWEs like CWE-312 (Cleartext Storage of Sensitive Information) and CWE-256 (Plaintext Storage of a Password) were considered, they were less relevant because the data was not stored in cleartext, but rather exposed in logs during transmission. The selection of CWE-532 is at the optimal level of specificity, as it accurately describes the core issue of sensitive data being logged.\n\nRelevant CWE Information:\n\n**CWE-532: Insertion of Sensitive Information into Log File**\nThe product writes sensitive information to a log file.\n\n**CWE-598: Use of GET Request Method With Sensitive Query Strings**\nThe product uses the GET request method to transmit sensitive information as part of a query string. This can expose the information to an unauthorized actor.\n\n**CWE-311: Missing Encryption of Sensitive Data**\nThe product does not encrypt sensitive or critical information before storage or transmission.\n\nThe selection of these CWEs is based on the evidence that the application logs sensitive information in URLs due to the use of GET requests. This leads to the **impact** that the data, intended to be encrypted, is exposed in plain text.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-201:**\n- 201 (Insertion of Sensitive Information Into Sent Data) - ROOT\n\n\n**Chain starting from CWE-256:**\n- 256 (Plaintext Storage of a Password) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "532",
        "name": "Insertion of Sensitive Information into Log File",
        "source": "sparse"
      },
      "similarity": 87.46127889305738
    },
    {
      "metadata": {
        "doc_id": "598",
        "name": "Use of GET Request Method With Sensitive Query Strings",
        "source": "sparse"
      },
      "similarity": 76.74829224924315
    },
    {
      "metadata": {
        "doc_id": "256",
        "name": "Plaintext Storage of a Password",
        "source": "sparse"
      },
      "similarity": 74.88548630044268
    },
    {
      "metadata": {
        "doc_id": "276",
        "name": "Incorrect Default Permissions",
        "source": "sparse"
      },
      "similarity": 73.93779003082904
    },
    {
      "metadata": {
        "doc_id": "312",
        "name": "Cleartext Storage of Sensitive Information",
        "source": "sparse"
      },
      "similarity": 71.74379624377907
    },
    {
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "source": "sparse"
      },
      "similarity": 71.39529515794051
    },
    {
      "metadata": {
        "doc_id": "522",
        "name": "Insufficiently Protected Credentials",
        "source": "sparse"
      },
      "similarity": 70.47809975132184
    },
    {
      "metadata": {
        "doc_id": "321",
        "name": "Use of Hard-coded Cryptographic Key",
        "source": "sparse"
      },
      "similarity": 69.57649568909068
    },
    {
      "metadata": {
        "doc_id": "311",
        "name": "Missing Encryption of Sensitive Data",
        "type": "Class",
        "original_content": "The product does not encrypt sensitive or critical information before storage or transmission.",
        "source": "dense",
        "mapping_notes": {
          "usage": "Discouraged",
          "rationale": "CWE-311 is high-level with more precise children available. It is a level-1 Class (i.e., a child of a Pillar).",
          "comments": "Consider children CWE-312: Cleartext Storage of Sensitive Information or CWE-319: Cleartext Transmission of Sensitive Information.",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.4876459759284052,
            "graph": 1.0860165384770002
          }
        }
      },
      "similarity": 0.4876459759284052
    },
    {
      "doc_id": "523",
      "text": "CWE-523: Unprotected Transport of Credentials",
      "score": 1.521,
      "metadata": {
        "doc_id": "523",
        "name": "Unprotected Transport of Credentials",
        "type": "base",
        "original_content": "CWE-523: Unprotected Transport of Credentials",
        "relationships": [
          {
            "source_id": "523",
            "target_id": "312",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "523",
            "target_id": "522",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "522",
            "target_id": "523",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 0.7,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "523",
                  "312",
                  "CANALSOBE"
                ]
              ],
              "score": 0.7,
              "type": "relationship_chain",
              "source": "312"
            },
            "peer_relationship": {
              "path": [
                [
                  "523",
                  "312",
                  "CANALSOBE"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "312"
            }
          }
        },
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 1.521
          }
        }
      },
      "similarity": 1.521
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-201",
      "CWE-256",
      "CWE-312",
      "CWE-311",
      "CWE-598",
      "CWE-532"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}