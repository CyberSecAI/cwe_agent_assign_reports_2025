{
  "cve_id": "CVE-2025-27355",
  "description": "**Cross-Site Request Forgery (CSRF)** vulnerability in Nicolas GRILLET Woocommerce Loi Hamon allows Stored **XSS**. This issue affects Woocommerce Loi Hamon from n/a through 1.1.0.",
  "key_phrases": {
    "rootcause": "Cross-Site Request Forgery (CSRF)",
    "weakness": "XSS",
    "impact": "",
    "vector": "",
    "attacker": "",
    "product": "Nicolas GRILLET Woocommerce Loi Hamon",
    "version": "n/a through 1.1.0",
    "component": ""
  },
  "reference_content": "## Analysis of CVE-2025-27355 Content\n\nThe content relates to CVE-2025-27355 as indicated by the CVE ID present in the text. It provides more detail than the placeholder CVE description.\n\n**Root cause of vulnerability:**\n\nThe vulnerability is a Cross-Site Request Forgery (CSRF). The root cause is the lack of proper CSRF protection in the \"Woocommerce \u2013 Loi Hamon\" plugin.\n\n**Weaknesses/vulnerabilities present:**\n\n*   Cross-Site Request Forgery (CSRF)\n*   Broken Access Control (OWASP Top 10 - A1)\n\n**Impact of exploitation:**\n\nA malicious actor can force higher privileged users to execute unwanted actions under their current authentication. The impact varies case by case.\n\n**Attack vectors:**\n\nThe attack vector is through exploiting the lack of CSRF protection, allowing an attacker to craft malicious requests that are executed by an authenticated user.\n\n**Required attacker capabilities/position:**\n\n*   Unauthenticated attacker.\n*   Ability to craft malicious requests.\n\n**Mitigation or fix:**\n\n*   No official fix is currently available (as of February 24, 2025).\n*   Patchstack offers a \"vPatch\" to auto-mitigate the vulnerability.\n*   Plugin update to a fixed version (N/A as of the report).\n\n**Additional Details:**\n\n*   **Affected Software:** Woocommerce \u2013 Loi Hamon Plugin\n*   **Vulnerable Versions:** <= 1.1.0\n*   **CVSS Score:** 7.1 (Low severity)\n*   **Reported by:** 0xd4rk5id3\n*   **Published by:** Patchstack",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-352 | Cross-Site Request Forgery (CSRF) | 0.9 | Compound | Primary | Allowed |\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 0.7 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary weakness is CWE-352 [Cross-Site Request Forgery (CSRF)], a compound weakness that describes the lack of verification of request origin. The secondary weakness is CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')], which can be triggered because of the lack of CSRF protection.\n\n```mermaid\ngraph TD\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    \n    cwe79 -->|CANFOLLOW| cwe352\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe352 primary\n    class cwe79 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **lack of CSRF protection (CWE-352)**, which allows an attacker to forge requests on behalf of an authenticated user. This can then lead to stored **XSS (CWE-79)** if the forged requests modify data that is later displayed without proper sanitization.\n\n## Summary of Analysis\nThe initial assessment identified CWE-352 [Cross-Site Request Forgery (CSRF)] as the primary root cause because the vulnerability description and CVE summary explicitly mention it. The presence of stored XSS indicates a secondary weakness, CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')], which can be exploited due to the lack of CSRF protection.\n\nThe evidence for CWE-352 [Cross-Site Request Forgery (CSRF)] is strong, as the vulnerability description key phrases list \"Cross-Site Request Forgery (CSRF)\" as the rootcause. The CVE Reference Links Content Summary confirms the **root cause of the vulnerability** is a **Cross-Site Request Forgery (CSRF)**.\n\nThe evidence for CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')] is based on the \"XSS\" weakness mentioned in the Vulnerability Description Key Phrases.\n\nThe retriever results also listed CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')] and CWE-352 [Cross-Site Request Forgery (CSRF)] as the top candidates.\n\nThe final selection prioritizes CWE-352 [Cross-Site Request Forgery (CSRF)] as the root cause and CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')] as a secondary weakness that can be exploited as a result of the CSRF vulnerability. These CWEs are at the optimal level of specificity (Base and Compound, respectively) and accurately represent the identified weaknesses.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-352 | Cross-Site Request Forgery (CSRF) | 0.9 | Compound | Primary | Allowed |\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 0.7 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary weakness is CWE-352 [Cross-Site Request Forgery (CSRF)], a compound weakness that describes the lack of verification of request origin. The secondary weakness is CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')], which can be triggered because of the lack of CSRF protection.\n\n```mermaid\ngraph TD\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    \n    cwe79 -->|CANFOLLOW| cwe352\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe352 primary\n    class cwe79 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **lack of CSRF protection (CWE-352)**, which allows an attacker to forge requests on behalf of an authenticated user. This can then lead to stored **XSS (CWE-79)** if the forged requests modify data that is later displayed without proper sanitization.\n\n## Summary of Analysis\nThe initial assessment identified CWE-352 [Cross-Site Request Forgery (CSRF)] as the primary root cause because the vulnerability description and CVE summary explicitly mention it. The presence of stored XSS indicates a secondary weakness, CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')], which can be exploited due to the lack of CSRF protection.\n\nThe evidence for CWE-352 [Cross-Site Request Forgery (CSRF)] is strong, as the vulnerability description key phrases list \"Cross-Site Request Forgery (CSRF)\" as the rootcause. The CVE Reference Links Content Summary confirms the **root cause of the vulnerability** is a **Cross-Site Request Forgery (CSRF)**.\n\nThe evidence for CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')] is based on the \"XSS\" weakness mentioned in the Vulnerability Description Key Phrases.\n\nThe retriever results also listed CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')] and CWE-352 [Cross-Site Request Forgery (CSRF)] as the top candidates.\n\nThe final selection prioritizes CWE-352 [Cross-Site Request Forgery (CSRF)] as the root cause and CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')] as a secondary weakness that can be exploited as a result of the CSRF vulnerability. These CWEs are at the optimal level of specificity (Base and Compound, respectively) and accurately represent the identified weaknesses.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-352:**\n- 352 (Cross-Site Request Forgery (CSRF)) - ROOT\n\n\n**Chain starting from CWE-79:**\n- 79 (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: XSS",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse"
      },
      "similarity": 260.6059776370774
    },
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "sparse"
      },
      "similarity": 200.72928695500337
    },
    {
      "metadata": {
        "doc_id": "601",
        "name": "URL Redirection to Untrusted Site ('Open Redirect')",
        "source": "sparse"
      },
      "similarity": 184.49115694733268
    },
    {
      "metadata": {
        "doc_id": "1004",
        "name": "Sensitive Cookie Without 'HttpOnly' Flag",
        "source": "sparse"
      },
      "similarity": 182.51393733855235
    },
    {
      "metadata": {
        "doc_id": "918",
        "name": "Server-Side Request Forgery (SSRF)",
        "source": "sparse"
      },
      "similarity": 180.5207819105262
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "source": "sparse"
      },
      "similarity": 179.53733216347786
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse"
      },
      "similarity": 177.87373068821537
    },
    {
      "metadata": {
        "doc_id": "1385",
        "name": "Missing Origin Validation in WebSockets",
        "type": "Variant",
        "original_content": "The product uses a WebSocket, but it does not properly verify that the source of data or communication is valid.",
        "keyphrase_source": "weakness:XSS",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.5303979251759433
          }
        }
      },
      "similarity": 0.5303979251759433
    },
    {
      "doc_id": "94",
      "text": "CWE-94: Improper Control of Generation of Code ('Code Injection')",
      "score": 2.2776000000000005,
      "metadata": {
        "doc_id": "94",
        "name": "Improper Control of Generation of Code ('Code Injection')",
        "type": "base",
        "original_content": "CWE-94: Improper Control of Generation of Code ('Code Injection')",
        "relationships": [
          {
            "source_id": "94",
            "target_id": "98",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "94",
            "target_id": "96",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "94",
            "target_id": "95",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "94",
            "target_id": "1336",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "94",
            "target_id": "913",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "94",
            "target_id": "74",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "94",
            "target_id": "74",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "94",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "96",
            "target_id": "94",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "95",
            "target_id": "94",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "913",
            "target_id": "94",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "74",
            "target_id": "94",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1336",
            "target_id": "94",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 0.8,
          "abstraction_path": 0.5599999999999999,
          "sequence_path": 0.8
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_up",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "425",
                  "98",
                  "CANPRECEDE"
                ],
                [
                  "98",
                  "94",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "relationship_chain",
              "source": "425"
            },
            "abstraction_path_up": {
              "path": [
                [
                  "1336",
                  "94",
                  "CHILDOF"
                ]
              ],
              "score": 0.5599999999999999,
              "type": "abstraction_path_up",
              "source": "1336"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "425",
                  "98",
                  "CANPRECEDE"
                ],
                [
                  "98",
                  "94",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "vulnerability_sequence_forward",
              "source": "425"
            }
          }
        },
        "abstraction_level": "base",
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This entry is frequently misused for vulnerabilities with a technical impact of \"code execution,\" which does not by itself indicate a root cause weakness, since dozens of weaknesses can enable code execution.",
          "comments": "This weakness only applies when the product's functionality intentionally constructs all or part of a code segment. It could be that executing code could be the result of other weaknesses that do not involve the construction of code segments.",
          "reasons": [
            "Frequent Misuse",
            "Frequent Misinterpretation"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2776000000000005
          }
        }
      },
      "similarity": 2.2776000000000005
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-352",
      "CWE-79"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}