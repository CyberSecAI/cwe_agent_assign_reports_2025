{
  "cve_id": "CVE-2024-12282",
  "description": "The WordPress WordPress plugin through 2.5.6 **does not have CSRF check** in some places, and is missing sanitisation as well as escaping, which could allow attackers to make logged in admin add **Stored XSS** payloads via a CSRF attack.",
  "key_phrases": {
    "rootcause": [
      "does not have CSRF check",
      "cross-site scripting",
      "missing CSRF check"
    ],
    "weakness": [
      "Stored XSS",
      "weakness"
    ],
    "impact": "Stored XSS payloads",
    "vector": "",
    "attacker": "attackers",
    "product": "WordPress WordPress plugin",
    "version": "through 2.5.6",
    "component": ""
  },
  "reference_content": "## CVE-2024-12282 Analysis\n\nThe provided content is directly related to CVE-2024-12282. It provides significantly more detail than the placeholder CVE description.\n\n**Root cause of vulnerability:**\n\nThe plugin lacks CSRF checks in certain areas and also has insufficient sanitization and escaping of user input.\n\n**Weaknesses/vulnerabilities present:**\n\n*   Stored Cross-Site Scripting (XSS) via Cross-Site Request Forgery (CSRF).\n\n**Impact of exploitation:**\n\nAttackers can inject malicious scripts into the WordPress site, which will be executed in the context of a logged-in administrator's browser.\n\n**Attack vectors:**\n\n*   CSRF attack: An attacker tricks a logged-in administrator into submitting a malicious form.\n*   The provided Proof of Concept (PoC) demonstrates how to craft a malicious HTML file that, when opened by a logged-in admin, will execute JavaScript code (alert(999)).\n\n**Required attacker capabilities/position:**\n\n*   The attacker needs to be able to induce a logged-in administrator to perform an action (e.g., open a malicious link or visit a crafted webpage). No authentication is required to trigger the XSS, but a logged-in admin is required for the CSRF to work.\n\n**Mitigation or fix:**\n\n*   No known fix is currently available as of the provided information. The plugin is listed as \"Plugin closed\". Implementing proper CSRF protection and input sanitization/escaping are necessary to address this vulnerability.\n\n**Additional Details:**\n\n*   **Affected Plugin:** WordPress\u8fde\u63a5\u5fae\u535a (wp-connect) <= 2.5.6\n*   **CVSS Score:** 7.1 (High)\n*   **Original Researcher:** Bob Matyas\n*   **WPVDB ID:** 2d81f038-e2bb-4906-a954-78dc971ed793\n*   **Published Date:** 2024-12-04\n*   **Classification:** XSS, OWASP Top 10 A7, CWE-79",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-352 | Cross-Site Request Forgery (CSRF) | 1.0 | Compound | ROOTCAUSE | Allowed |\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 1.0 | Base | WEAKNESS | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is the **missing CSRF check**, which allows attackers to inject **Stored XSS** payloads. CWE-352 (Cross-Site Request Forgery) is the root cause, and CWE-79 (Improper Neutralization of Input During Web Page Generation) is the resulting weakness due to the lack of sanitization and escaping.\n\n```mermaid\ngraph TD\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n\n    cwe79 -- CANFOLLOW --> cwe352\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe352 primary\n    class cwe79 secondary\n```\n\n## Vulnerability Chain\n1.  **Root Cause:** **Missing CSRF check** (CWE-352)\n2.  **Weakness:** **Missing sanitization and escaping**, leading to **Improper Neutralization of Input** (CWE-79)\n3.  **Impact:** Attackers inject **Stored XSS** payloads.\n\n## Summary of Analysis\nThe analysis is based on the provided evidence that the WordPress plugin **does not have CSRF check** and is **missing sanitisation** as well as escaping. This allows attackers to inject **Stored XSS** payloads via a CSRF attack.\nThe most relevant CWEs are CWE-352 and CWE-79.\nCWE-352 is the primary cause, as the **missing CSRF check** enables the attack.\nCWE-79 is a secondary weakness, resulting from the **missing sanitisation** and escaping, allowing for the injection of **Stored XSS**.\nThe selected CWEs are at the optimal level of specificity, with CWE-352 being a Compound weakness and CWE-79 being a Base weakness.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-352: Cross-Site Request Forgery (CSRF)\n**Abstraction Level**: Compound\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This is a well-known Composite of multiple weaknesses that must all occur simultaneously, although it is attack-oriented in nature.\n\n**Technical Explanation:** The vulnerability description explicitly states that the plugin **does not have CSRF check**. This aligns directly with the description of CWE-352, which states that the web application **does not sufficiently verify** the request origin.\n**Security Implications:** Attackers can perform actions on behalf of legitimate users without their knowledge or consent.\n**Relationship to Other CWEs:** N/A\n**Primary/Secondary:** Primary. This is the root cause of the vulnerability.\n**Mapping Guidance Influence:** The official mapping guidance ALLOWS the use of CWE-352.\n\n## CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Technical Explanation:** The vulnerability description states that the plugin is **missing sanitisation** as well as escaping, which allows attackers to inject **Stored XSS** payloads. This aligns directly with CWE-79, which describes **improper neutralization of input**.\n**Security Implications:** Attackers can inject malicious scripts into web pages, which will be executed by other users' browsers.\n**Relationship to Other CWEs:** ChildOf CWE-116, ParentOf CWE-87, 86, 85, 84, 83\n**Primary/Secondary:** Secondary. This is a result of the missing CSRF check and **missing sanitisation**.\n**Mapping Guidance Influence:** The official mapping guidance ALLOWS the use of CWE-79.\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n**Technical Explanation:** While the description mentions **missing sanitisation** as well as escaping, CWE-116 is too general. CWE-79, which is a child of CWE-116, is a better fit because it specifically addresses improper neutralization of input during web page generation, leading to **Cross-site Scripting**.\n**Security Implications:** Incorrect encoding can lead to injection vulnerabilities.\n**Relationship to Other CWEs:** Parent of CWE-79.\n**Primary/Secondary:** Not applicable.\n**Mapping Guidance Influence:** The official mapping guidance ALLOWS the use of CWE-116 with review, but suggests considering more specific Base-level children.\n\n## CWE-862: Missing Authorization\n**Abstraction Level**: Class\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product does not perform an authorization check when an actor attempts to access a resource or perform an action.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n**Technical Explanation:** While there's a **missing CSRF check**, which relates to authorization, CWE-352 is a more specific and appropriate classification.\n**Security Implications:** Unauthorized access to resources or actions.\n**Relationship to Other CWEs:** N/A\n**Primary/Secondary:** Not applicable.\n**Mapping Guidance Influence:** The official mapping guidance ALLOWS the use of CWE-862 with review, but suggests considering more specific Base-level children.\n\n## CWE-425: Direct Request ('Forced Browsing')\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Technical Explanation:** Similar to CWE-862, CWE-425 relates to authorization, but the **missing CSRF check** is more directly addressed by CWE-352.\n**Security Implications:** Users can access restricted resources without proper authorization.\n**Relationship to Other CWEs:** N/A\n**Primary/Secondary:** Not applicable.\n**Mapping Guidance Influence:** The official mapping guidance ALLOWS the use of CWE-425.\n\n## CWE-434: Unrestricted Upload of File with Dangerous Type\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product allows the upload or transfer of dangerous file types that are automatically processed within its environment.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Technical Explanation:** This CWE is not relevant to the vulnerability description. There is no mention of file uploads.\n**Security Implications:** N/A\n**Relationship to Other CWEs:** N/A\n**Primary/Secondary:** Not applicable.\n**Mapping Guidance Influence:** The official mapping guidance ALLOWS the use of CWE-434.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-352 | Cross-Site Request Forgery (CSRF) | 1.0 | Compound | ROOTCAUSE | Allowed |\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 1.0 | Base | WEAKNESS | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is the **missing CSRF check**, which allows attackers to inject **Stored XSS** payloads. CWE-352 (Cross-Site Request Forgery) is the root cause, and CWE-79 (Improper Neutralization of Input During Web Page Generation) is the resulting weakness due to the lack of sanitization and escaping.\n\n```mermaid\ngraph TD\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n\n    cwe79 -- CANFOLLOW --> cwe352\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe352 primary\n    class cwe79 secondary\n```\n\n## Vulnerability Chain\n1.  **Root Cause:** **Missing CSRF check** (CWE-352)\n2.  **Weakness:** **Missing sanitization and escaping**, leading to **Improper Neutralization of Input** (CWE-79)\n3.  **Impact:** Attackers inject **Stored XSS** payloads.\n\n## Summary of Analysis\nThe analysis is based on the provided evidence that the WordPress plugin **does not have CSRF check** and is **missing sanitisation** as well as escaping. This allows attackers to inject **Stored XSS** payloads via a CSRF attack.\nThe most relevant CWEs are CWE-352 and CWE-79.\nCWE-352 is the primary cause, as the **missing CSRF check** enables the attack.\nCWE-79 is a secondary weakness, resulting from the **missing sanitisation** and escaping, allowing for the injection of **Stored XSS**.\nThe selected CWEs are at the optimal level of specificity, with CWE-352 being a Compound weakness and CWE-79 being a Base weakness.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-352: Cross-Site Request Forgery (CSRF)\n**Abstraction Level**: Compound\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This is a well-known Composite of multiple weaknesses that must all occur simultaneously, although it is attack-oriented in nature.\n\n**Technical Explanation:** The vulnerability description explicitly states that the plugin **does not have CSRF check**. This aligns directly with the description of CWE-352, which states that the web application **does not sufficiently verify** the request origin.\n**Security Implications:** Attackers can perform actions on behalf of legitimate users without their knowledge or consent.\n**Relationship to Other CWEs:** N/A\n**Primary/Secondary:** Primary. This is the root cause of the vulnerability.\n**Mapping Guidance Influence:** The official mapping guidance ALLOWS the use of CWE-352.\n\n## CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Technical Explanation:** The vulnerability description states that the plugin is **missing sanitisation** as well as escaping, which allows attackers to inject **Stored XSS** payloads. This aligns directly with CWE-79, which describes **improper neutralization of input**.\n**Security Implications:** Attackers can inject malicious scripts into web pages, which will be executed by other users' browsers.\n**Relationship to Other CWEs:** ChildOf CWE-116, ParentOf CWE-87, 86, 85, 84, 83\n**Primary/Secondary:** Secondary. This is a result of the missing CSRF check and **missing sanitisation**.\n**Mapping Guidance Influence:** The official mapping guidance ALLOWS the use of CWE-79.\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n**Technical Explanation:** While the description mentions **missing sanitisation** as well as escaping, CWE-116 is too general. CWE-79, which is a child of CWE-116, is a better fit because it specifically addresses improper neutralization of input during web page generation, leading to **Cross-site Scripting**.\n**Security Implications:** Incorrect encoding can lead to injection vulnerabilities.\n**Relationship to Other CWEs:** Parent of CWE-79.\n**Primary/Secondary:** Not applicable.\n**Mapping Guidance Influence:** The official mapping guidance ALLOWS the use of CWE-116 with review, but suggests considering more specific Base-level children.\n\n## CWE-862: Missing Authorization\n**Abstraction Level**: Class\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product does not perform an authorization check when an actor attempts to access a resource or perform an action.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n**Technical Explanation:** While there's a **missing CSRF check**, which relates to authorization, CWE-352 is a more specific and appropriate classification.\n**Security Implications:** Unauthorized access to resources or actions.\n**Relationship to Other CWEs:** N/A\n**Primary/Secondary:** Not applicable.\n**Mapping Guidance Influence:** The official mapping guidance ALLOWS the use of CWE-862 with review, but suggests considering more specific Base-level children.\n\n## CWE-425: Direct Request ('Forced Browsing')\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Technical Explanation:** Similar to CWE-862, CWE-425 relates to authorization, but the **missing CSRF check** is more directly addressed by CWE-352.\n**Security Implications:** Users can access restricted resources without proper authorization.\n**Relationship to Other CWEs:** N/A\n**Primary/Secondary:** Not applicable.\n**Mapping Guidance Influence:** The official mapping guidance ALLOWS the use of CWE-425.\n\n## CWE-434: Unrestricted Upload of File with Dangerous Type\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product allows the upload or transfer of dangerous file types that are automatically processed within its environment.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Technical Explanation:** This CWE is not relevant to the vulnerability description. There is no mention of file uploads.\n**Security Implications:** N/A\n**Relationship to Other CWEs:** N/A\n**Primary/Secondary:** Not applicable.\n**Mapping Guidance Influence:** The official mapping guidance ALLOWS the use of CWE-434.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-87:**\n- 87 (Improper Neutralization of Alternate XSS Syntax) - ROOT\n\n\n**Chain starting from CWE-116:**\n- 116 (Improper Encoding or Escaping of Output) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse",
        "original_content": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
        "keyphrase_sources": [
          {
            "id": "rootcause:does not have CSRF check",
            "keyphrase": "does not have CSRF check",
            "type": "rootcause"
          },
          {
            "id": "rootcause:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "rootcause"
          },
          {
            "id": "rootcause:missing CSRF check",
            "keyphrase": "missing CSRF check",
            "type": "rootcause"
          },
          {
            "id": "weakness:Stored XSS",
            "keyphrase": "Stored XSS",
            "type": "weakness"
          },
          {
            "id": "weakness:weakness",
            "keyphrase": "weakness",
            "type": "weakness"
          },
          {
            "id": "impact:Stored XSS payloads",
            "keyphrase": "Stored XSS payloads",
            "type": "impact"
          },
          {
            "id": "attacker:attackers",
            "keyphrase": "attackers",
            "type": "attacker"
          },
          {
            "id": "product:WordPress WordPress plugin",
            "keyphrase": "WordPress WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:through 2.5.6",
            "keyphrase": "through 2.5.6",
            "type": "version"
          }
        ]
      },
      "similarity": 552.6842523558735
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse",
        "original_content": "The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.",
        "keyphrase_sources": [
          {
            "id": "rootcause:does not have CSRF check",
            "keyphrase": "does not have CSRF check",
            "type": "rootcause"
          },
          {
            "id": "rootcause:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "rootcause"
          },
          {
            "id": "rootcause:missing CSRF check",
            "keyphrase": "missing CSRF check",
            "type": "rootcause"
          },
          {
            "id": "weakness:Stored XSS",
            "keyphrase": "Stored XSS",
            "type": "weakness"
          },
          {
            "id": "weakness:weakness",
            "keyphrase": "weakness",
            "type": "weakness"
          },
          {
            "id": "impact:Stored XSS payloads",
            "keyphrase": "Stored XSS payloads",
            "type": "impact"
          },
          {
            "id": "attacker:attackers",
            "keyphrase": "attackers",
            "type": "attacker"
          },
          {
            "id": "product:WordPress WordPress plugin",
            "keyphrase": "WordPress WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:through 2.5.6",
            "keyphrase": "through 2.5.6",
            "type": "version"
          }
        ]
      },
      "similarity": 415.45025092057915
    },
    {
      "metadata": {
        "doc_id": "862",
        "name": "Missing Authorization",
        "source": "sparse",
        "original_content": "The product does not perform an authorization check when an actor attempts to access a resource or perform an action.",
        "keyphrase_sources": [
          {
            "id": "rootcause:does not have CSRF check",
            "keyphrase": "does not have CSRF check",
            "type": "rootcause"
          },
          {
            "id": "rootcause:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "rootcause"
          },
          {
            "id": "rootcause:missing CSRF check",
            "keyphrase": "missing CSRF check",
            "type": "rootcause"
          },
          {
            "id": "weakness:Stored XSS",
            "keyphrase": "Stored XSS",
            "type": "weakness"
          },
          {
            "id": "weakness:weakness",
            "keyphrase": "weakness",
            "type": "weakness"
          },
          {
            "id": "impact:Stored XSS payloads",
            "keyphrase": "Stored XSS payloads",
            "type": "impact"
          },
          {
            "id": "attacker:attackers",
            "keyphrase": "attackers",
            "type": "attacker"
          },
          {
            "id": "product:WordPress WordPress plugin",
            "keyphrase": "WordPress WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:through 2.5.6",
            "keyphrase": "through 2.5.6",
            "type": "version"
          }
        ]
      },
      "similarity": 404.12896026468104
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "source": "sparse",
        "original_content": "The product allows the upload or transfer of dangerous file types that are automatically processed within its environment.",
        "keyphrase_sources": [
          {
            "id": "rootcause:does not have CSRF check",
            "keyphrase": "does not have CSRF check",
            "type": "rootcause"
          },
          {
            "id": "rootcause:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "rootcause"
          },
          {
            "id": "rootcause:missing CSRF check",
            "keyphrase": "missing CSRF check",
            "type": "rootcause"
          },
          {
            "id": "weakness:Stored XSS",
            "keyphrase": "Stored XSS",
            "type": "weakness"
          },
          {
            "id": "weakness:weakness",
            "keyphrase": "weakness",
            "type": "weakness"
          },
          {
            "id": "impact:Stored XSS payloads",
            "keyphrase": "Stored XSS payloads",
            "type": "impact"
          },
          {
            "id": "attacker:attackers",
            "keyphrase": "attackers",
            "type": "attacker"
          },
          {
            "id": "product:WordPress WordPress plugin",
            "keyphrase": "WordPress WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:through 2.5.6",
            "keyphrase": "through 2.5.6",
            "type": "version"
          }
        ]
      },
      "similarity": 363.7390074443179
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse",
        "original_content": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
        "keyphrase_sources": [
          {
            "id": "rootcause:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "rootcause"
          },
          {
            "id": "weakness:Stored XSS",
            "keyphrase": "Stored XSS",
            "type": "weakness"
          },
          {
            "id": "impact:Stored XSS payloads",
            "keyphrase": "Stored XSS payloads",
            "type": "impact"
          }
        ]
      },
      "similarity": 341.043737722691
    },
    {
      "metadata": {
        "doc_id": "425",
        "name": "Direct Request ('Forced Browsing')",
        "source": "sparse",
        "original_content": "The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.",
        "keyphrase_sources": [
          {
            "id": "rootcause:does not have CSRF check",
            "keyphrase": "does not have CSRF check",
            "type": "rootcause"
          },
          {
            "id": "rootcause:missing CSRF check",
            "keyphrase": "missing CSRF check",
            "type": "rootcause"
          },
          {
            "id": "weakness:weakness",
            "keyphrase": "weakness",
            "type": "weakness"
          },
          {
            "id": "attacker:attackers",
            "keyphrase": "attackers",
            "type": "attacker"
          },
          {
            "id": "product:WordPress WordPress plugin",
            "keyphrase": "WordPress WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:through 2.5.6",
            "keyphrase": "through 2.5.6",
            "type": "version"
          }
        ]
      },
      "similarity": 313.19780178971916
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-87",
      "CWE-116",
      "CWE-862",
      "CWE-79",
      "CWE-352",
      "CWE-425",
      "CWE-434"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {
    "352": [
      {
        "id": "rootcause:does not have CSRF check",
        "keyphrase": "does not have CSRF check",
        "type": "rootcause"
      },
      {
        "id": "rootcause:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "rootcause"
      },
      {
        "id": "rootcause:missing CSRF check",
        "keyphrase": "missing CSRF check",
        "type": "rootcause"
      },
      {
        "id": "weakness:Stored XSS",
        "keyphrase": "Stored XSS",
        "type": "weakness"
      },
      {
        "id": "weakness:weakness",
        "keyphrase": "weakness",
        "type": "weakness"
      },
      {
        "id": "impact:Stored XSS payloads",
        "keyphrase": "Stored XSS payloads",
        "type": "impact"
      },
      {
        "id": "attacker:attackers",
        "keyphrase": "attackers",
        "type": "attacker"
      },
      {
        "id": "product:WordPress WordPress plugin",
        "keyphrase": "WordPress WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:through 2.5.6",
        "keyphrase": "through 2.5.6",
        "type": "version"
      }
    ],
    "116": [
      {
        "id": "rootcause:does not have CSRF check",
        "keyphrase": "does not have CSRF check",
        "type": "rootcause"
      },
      {
        "id": "rootcause:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "rootcause"
      },
      {
        "id": "rootcause:missing CSRF check",
        "keyphrase": "missing CSRF check",
        "type": "rootcause"
      },
      {
        "id": "weakness:Stored XSS",
        "keyphrase": "Stored XSS",
        "type": "weakness"
      },
      {
        "id": "weakness:weakness",
        "keyphrase": "weakness",
        "type": "weakness"
      },
      {
        "id": "impact:Stored XSS payloads",
        "keyphrase": "Stored XSS payloads",
        "type": "impact"
      },
      {
        "id": "attacker:attackers",
        "keyphrase": "attackers",
        "type": "attacker"
      },
      {
        "id": "product:WordPress WordPress plugin",
        "keyphrase": "WordPress WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:through 2.5.6",
        "keyphrase": "through 2.5.6",
        "type": "version"
      }
    ],
    "862": [
      {
        "id": "rootcause:does not have CSRF check",
        "keyphrase": "does not have CSRF check",
        "type": "rootcause"
      },
      {
        "id": "rootcause:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "rootcause"
      },
      {
        "id": "rootcause:missing CSRF check",
        "keyphrase": "missing CSRF check",
        "type": "rootcause"
      },
      {
        "id": "weakness:Stored XSS",
        "keyphrase": "Stored XSS",
        "type": "weakness"
      },
      {
        "id": "weakness:weakness",
        "keyphrase": "weakness",
        "type": "weakness"
      },
      {
        "id": "impact:Stored XSS payloads",
        "keyphrase": "Stored XSS payloads",
        "type": "impact"
      },
      {
        "id": "attacker:attackers",
        "keyphrase": "attackers",
        "type": "attacker"
      },
      {
        "id": "product:WordPress WordPress plugin",
        "keyphrase": "WordPress WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:through 2.5.6",
        "keyphrase": "through 2.5.6",
        "type": "version"
      }
    ],
    "434": [
      {
        "id": "rootcause:does not have CSRF check",
        "keyphrase": "does not have CSRF check",
        "type": "rootcause"
      },
      {
        "id": "rootcause:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "rootcause"
      },
      {
        "id": "rootcause:missing CSRF check",
        "keyphrase": "missing CSRF check",
        "type": "rootcause"
      },
      {
        "id": "weakness:Stored XSS",
        "keyphrase": "Stored XSS",
        "type": "weakness"
      },
      {
        "id": "weakness:weakness",
        "keyphrase": "weakness",
        "type": "weakness"
      },
      {
        "id": "impact:Stored XSS payloads",
        "keyphrase": "Stored XSS payloads",
        "type": "impact"
      },
      {
        "id": "attacker:attackers",
        "keyphrase": "attackers",
        "type": "attacker"
      },
      {
        "id": "product:WordPress WordPress plugin",
        "keyphrase": "WordPress WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:through 2.5.6",
        "keyphrase": "through 2.5.6",
        "type": "version"
      }
    ],
    "425": [
      {
        "id": "rootcause:does not have CSRF check",
        "keyphrase": "does not have CSRF check",
        "type": "rootcause"
      },
      {
        "id": "rootcause:missing CSRF check",
        "keyphrase": "missing CSRF check",
        "type": "rootcause"
      },
      {
        "id": "weakness:weakness",
        "keyphrase": "weakness",
        "type": "weakness"
      },
      {
        "id": "attacker:attackers",
        "keyphrase": "attackers",
        "type": "attacker"
      },
      {
        "id": "product:WordPress WordPress plugin",
        "keyphrase": "WordPress WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:through 2.5.6",
        "keyphrase": "through 2.5.6",
        "type": "version"
      }
    ],
    "79": [
      {
        "id": "rootcause:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "rootcause"
      },
      {
        "id": "weakness:Stored XSS",
        "keyphrase": "Stored XSS",
        "type": "weakness"
      },
      {
        "id": "impact:Stored XSS payloads",
        "keyphrase": "Stored XSS payloads",
        "type": "impact"
      }
    ]
  }
}