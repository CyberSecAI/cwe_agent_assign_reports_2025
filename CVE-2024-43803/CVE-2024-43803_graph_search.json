{
  "retriever": "graph",
  "query": "The Bare Metal Operator (BMO) implements a Kubernetes API for managing bare metal hosts in Metal3. The `BareMetalHost` (BMH) CRD allows the `userData`, `metaData`, and `networkData` for the provisioned host to be specified as links to Kubernetes Secrets. There are fields for both the `Name` and `Namespace` of the Secret, meaning that versions of the baremetal-operator prior to 0.8.0, 0.6.2, and 0.5.2 will read a `Secret` from any namespace. A user with access to create or edit a `BareMetalHost` can thus exfiltrate a `Secret` from another namespace by using it as e.g. the `userData` for provisioning some host (note that this need not be a real host, it could be a VM somewhere). BMO will only read a key with the name `value` (or `userData`, `metaData`, or `networkData`), so that limits the exposure somewhat. `value` is probably a pretty common key though. Secrets used by _other_ `BareMetalHost`s in different namespaces are always vulnerable. It is probably relatively unusual for anyone other than cluster administrators to have RBAC access to create/edit a `BareMetalHost`. This vulnerability is only meaningful, if the cluster has users other than administrators and users privileges are limited to their respective namespaces. The patch prevents BMO from accepting links to Secrets from other namespaces as BMH input. Any BMH configuration is only read from the same namespace only. The problem is patched in BMO releases v0.7.0, v0.6.2 and v0.5.2 and users should upgrade to those Consider specifically these CWEs: CWE-1230 CWE-201 CWE-277 CWE-200 CWE-286 CWE-923 CWE-359 CWE-306 CWE-863 CWE-532",
  "keyphrases": {
    "original_query": "The Bare Metal Operator (BMO) implements a Kubernetes API for managing bare metal hosts in Metal3. The `BareMetalHost` (BMH) CRD allows the `userData`, `metaData`, and `networkData` for the provisioned host to be specified as links to Kubernetes Secrets. There are fields for both the `Name` and `Namespace` of the Secret, meaning that versions of the baremetal-operator prior to 0.8.0, 0.6.2, and 0.5.2 will read a `Secret` from any namespace. A user with access to create or edit a `BareMetalHost` can thus exfiltrate a `Secret` from another namespace by using it as e.g. the `userData` for provisioning some host (note that this need not be a real host, it could be a VM somewhere). BMO will only read a key with the name `value` (or `userData`, `metaData`, or `networkData`), so that limits the exposure somewhat. `value` is probably a pretty common key though. Secrets used by _other_ `BareMetalHost`s in different namespaces are always vulnerable. It is probably relatively unusual for anyone other than cluster administrators to have RBAC access to create/edit a `BareMetalHost`. This vulnerability is only meaningful, if the cluster has users other than administrators and users privileges are limited to their respective namespaces. The patch prevents BMO from accepting links to Secrets from other namespaces as BMH input. Any BMH configuration is only read from the same namespace only. The problem is patched in BMO releases v0.7.0, v0.6.2 and v0.5.2 and users should upgrade to those",
    "enhanced_query": "The Bare Metal Operator (BMO) implements a Kubernetes API for managing bare metal hosts in Metal3. The `BareMetalHost` (BMH) CRD allows the `userData`, `metaData`, and `networkData` for the provisioned host to be specified as links to Kubernetes Secrets. There are fields for both the `Name` and `Namespace` of the Secret, meaning that versions of the baremetal-operator prior to 0.8.0, 0.6.2, and 0.5.2 will read a `Secret` from any namespace. A user with access to create or edit a `BareMetalHost` can thus exfiltrate a `Secret` from another namespace by using it as e.g. the `userData` for provisioning some host (note that this need not be a real host, it could be a VM somewhere). BMO will only read a key with the name `value` (or `userData`, `metaData`, or `networkData`), so that limits the exposure somewhat. `value` is probably a pretty common key though. Secrets used by _other_ `BareMetalHost`s in different namespaces are always vulnerable. It is probably relatively unusual for anyone other than cluster administrators to have RBAC access to create/edit a `BareMetalHost`. This vulnerability is only meaningful, if the cluster has users other than administrators and users privileges are limited to their respective namespaces. The patch prevents BMO from accepting links to Secrets from other namespaces as BMH input. Any BMH configuration is only read from the same namespace only. The problem is patched in BMO releases v0.7.0, v0.6.2 and v0.5.2 and users should upgrade to those Consider specifically these CWEs: CWE-1230 CWE-201 CWE-277 CWE-200 CWE-286 CWE-923 CWE-359 CWE-306 CWE-863 CWE-532",
    "cwe_mentions": [
      "CWE-1230",
      "CWE-201",
      "CWE-277",
      "CWE-200",
      "CWE-286",
      "CWE-923",
      "CWE-359",
      "CWE-306",
      "CWE-863",
      "CWE-532"
    ],
    "search_time": 3.0861358642578125
  },
  "timestamp": "2025-07-12 04:06:49",
  "cve_id": "CVE-2024-43803",
  "result_count": 20,
  "results": [
    {
      "cwe_id": "322",
      "name": "Key Exchange without Entity Authentication",
      "type": "base",
      "score": 2.8651999999999997,
      "relationship_count": 0
    },
    {
      "cwe_id": "532",
      "name": "Insertion of Sensitive Information into Log File",
      "type": "base",
      "score": 2.4699999999999998,
      "relationship_count": 0
    },
    {
      "cwe_id": "226",
      "name": "Sensitive Information in Resource Not Removed Before Reuse",
      "type": "base",
      "score": 2.2100000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "1272",
      "name": "Sensitive Information Uncleared Before Debug/Power State Transition",
      "type": "base",
      "score": 2.2100000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "202",
      "name": "Exposure of Sensitive Information Through Data Queries",
      "type": "base",
      "score": 2.1762,
      "relationship_count": 0
    },
    {
      "cwe_id": "209",
      "name": "Generation of Error Message Containing Sensitive Information",
      "type": "base",
      "score": 2.1762,
      "relationship_count": 0
    },
    {
      "cwe_id": "499",
      "name": "Serializable Class Containing Sensitive Data",
      "type": "variant",
      "score": 2.04,
      "relationship_count": 0
    },
    {
      "cwe_id": "498",
      "name": "Cloneable Class Containing Sensitive Information",
      "type": "variant",
      "score": 2.04,
      "relationship_count": 0
    },
    {
      "cwe_id": "350",
      "name": "Reliance on Reverse DNS Resolution for a Security-Critical Action",
      "type": "variant",
      "score": 2.04,
      "relationship_count": 0
    },
    {
      "cwe_id": "201",
      "name": "Insertion of Sensitive Information Into Sent Data",
      "type": "Base",
      "score": 1.8415846978148473,
      "relationship_count": 0
    },
    {
      "cwe_id": "1295",
      "name": "Debug Messages Revealing Unnecessary Information",
      "type": "base",
      "score": 1.8018000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "359",
      "name": "Exposure of Private Personal Information to an Unauthorized Actor",
      "type": "Base",
      "score": 1.6733752660549888,
      "relationship_count": 0
    },
    {
      "cwe_id": "1230",
      "name": "Exposure of Sensitive Information Through Metadata",
      "type": "Base",
      "score": 1.629587136151292,
      "relationship_count": 0
    },
    {
      "cwe_id": "306",
      "name": "Missing Authentication for Critical Function",
      "type": "Base",
      "score": 1.6139390353945144,
      "relationship_count": 0
    },
    {
      "cwe_id": "212",
      "name": "Improper Removal of Sensitive Information Before Storage or Transfer",
      "type": "Base",
      "score": 1.5070220354699941,
      "relationship_count": 0
    },
    {
      "cwe_id": "942",
      "name": "Permissive Cross-domain Policy with Untrusted Domains",
      "type": "variant",
      "score": 1.5024,
      "relationship_count": 0
    },
    {
      "cwe_id": "923",
      "name": "Improper Restriction of Communication Channel to Intended Endpoints",
      "type": "class",
      "score": 1.3648,
      "relationship_count": 0
    },
    {
      "cwe_id": "425",
      "name": "Direct Request ('Forced Browsing')",
      "type": "base",
      "score": 1.2261600000000001,
      "relationship_count": 0
    },
    {
      "cwe_id": "266",
      "name": "Incorrect Privilege Assignment",
      "type": "Base",
      "score": 1.0849912897904876,
      "relationship_count": 0
    },
    {
      "cwe_id": "81",
      "name": "Improper Neutralization of Script in an Error Message Web Page",
      "type": "variant",
      "score": 1.0584,
      "relationship_count": 0
    }
  ]
}