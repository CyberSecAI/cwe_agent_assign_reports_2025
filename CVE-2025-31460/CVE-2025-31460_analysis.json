{
  "cve_id": "CVE-2025-31460",
  "description": "Cross-Site Request Forgery (**CSRF**) vulnerability in danielmuldernl OmniLeads Scripts and Tags Manager allows Stored **XSS**. This issue affects OmniLeads Scripts and Tags Manager from n/a through 1.3.",
  "key_phrases": {
    "rootcause": "",
    "weakness": [
      "cross-site scripting",
      "CSRF",
      "XSS"
    ],
    "impact": "",
    "vector": "",
    "attacker": "",
    "product": "danielmuldernl OmniLeads Scripts and Tags Manager",
    "version": "n/a through 1.3",
    "component": ""
  },
  "reference_content": "## Analysis of CVE-2025-31460 Content\n\nThe content relates to CVE-2025-31460 as indicated by the CVE ID present in the document. It provides more detail than a standard CVE description, detailing the vulnerability, impact, and mitigation.\n\n**Root cause of vulnerability:**\n\nThe vulnerability is a Cross-Site Request Forgery (CSRF). The document doesn't specify the exact root cause within the OmniLeads Scripts and Tags Manager plugin, only that it exists.\n\n**Weaknesses/vulnerabilities present:**\n\n*   Cross-Site Request Forgery (CSRF)\n\n**Impact of exploitation:**\n\nA malicious actor could force higher privileged users to execute unwanted actions under their current authentication. The specific impact varies case by case.\n\n**Attack vectors:**\n\nThe attack vector is through Cross-Site Request Forgery, meaning an attacker would need to trick a logged-in user into performing an action on the vulnerable website.\n\n**Required attacker capabilities/position:**\n\n*   Unauthenticated - The attacker does not need to be authenticated.\n*   Ability to create a malicious website or inject malicious content into a trusted site.\n*   Ability to trick a logged-in user into visiting the malicious site or clicking a malicious link.\n\n**Mitigation or fix:**\n\n*   No official fix is currently available (as of March 28, 2025).\n*   Patchstack offers \"vPatching\" as a mitigation, which auto-mitigates the vulnerability even without an official patch.\n*   The report indicates a low severity impact and low likelihood of exploitation.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-352 | Cross-Site Request Forgery (CSRF) | 0.9 | Compound | Primary | Allowed |\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 0.8 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.85\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is CWE-352, which is a compound weakness. The secondary weakness is CWE-79, which is a base weakness. CWE-352 requires multiple weaknesses to occur simultaneously. The relationship between CWE-352 and CWE-79 is that the **CSRF** vulnerability can lead to **XSS** if the attacker is able to inject malicious code into the application.\n\n```mermaid\ngraph TD\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    cwe80[\"CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\"]\n    \n    cwe79 -->|CHILDOF| cwe80\n    cwe352 -->|CANPRECEDE| cwe79\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe352 primary\n    class cwe79 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **CSRF** (CWE-352), which allows an attacker to trick a user into performing actions they did not intend to. If the application does not properly neutralize user-controllable input, this can lead to Stored **XSS** (CWE-79). The root cause is the **lack of CSRF protection**, leading to the **XSS** vulnerability.\n  - CWE-352 (Cross-Site Request Forgery) - Root Cause\n  - CWE-79 (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')) - Impact\n\n## Summary of Analysis\nThe vulnerability description clearly states the presence of both **CSRF** and Stored **XSS**. The analysis instructions specify to identify the most appropriate CWEs for each keyphrase and consider how they relate to each other.\n\nThe description states: \"Cross-Site Request Forgery (**CSRF**) vulnerability in danielmuldernl OmniLeads Scripts and Tags Manager allows Stored **XSS**.\"\n\nBased on the provided information, the primary CWE is CWE-352 (Cross-Site Request Forgery), as it's the initial vulnerability. The secondary CWE is CWE-79 (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')), as the **CSRF** vulnerability allows for Stored **XSS**.\n\nCWE-80 was considered, but CWE-79 is a better fit as it describes the broader issue of improper neutralization, while CWE-80 is more specific to script-related HTML tags.\n\nThe selected CWEs are at the optimal level of specificity. CWE-352 is a compound weakness that accurately represents the **CSRF** vulnerability, and CWE-79 is a base weakness that accurately represents the **XSS** vulnerability.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-352 | Cross-Site Request Forgery (CSRF) | 0.9 | Compound | Primary | Allowed |\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 0.8 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.85\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is CWE-352, which is a compound weakness. The secondary weakness is CWE-79, which is a base weakness. CWE-352 requires multiple weaknesses to occur simultaneously. The relationship between CWE-352 and CWE-79 is that the **CSRF** vulnerability can lead to **XSS** if the attacker is able to inject malicious code into the application.\n\n```mermaid\ngraph TD\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    cwe80[\"CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\"]\n    \n    cwe79 -->|CHILDOF| cwe80\n    cwe352 -->|CANPRECEDE| cwe79\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe352 primary\n    class cwe79 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **CSRF** (CWE-352), which allows an attacker to trick a user into performing actions they did not intend to. If the application does not properly neutralize user-controllable input, this can lead to Stored **XSS** (CWE-79). The root cause is the **lack of CSRF protection**, leading to the **XSS** vulnerability.\n  - CWE-352 (Cross-Site Request Forgery) - Root Cause\n  - CWE-79 (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')) - Impact\n\n## Summary of Analysis\nThe vulnerability description clearly states the presence of both **CSRF** and Stored **XSS**. The analysis instructions specify to identify the most appropriate CWEs for each keyphrase and consider how they relate to each other.\n\nThe description states: \"Cross-Site Request Forgery (**CSRF**) vulnerability in danielmuldernl OmniLeads Scripts and Tags Manager allows Stored **XSS**.\"\n\nBased on the provided information, the primary CWE is CWE-352 (Cross-Site Request Forgery), as it's the initial vulnerability. The secondary CWE is CWE-79 (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')), as the **CSRF** vulnerability allows for Stored **XSS**.\n\nCWE-80 was considered, but CWE-79 is a better fit as it describes the broader issue of improper neutralization, while CWE-80 is more specific to script-related HTML tags.\n\nThe selected CWEs are at the optimal level of specificity. CWE-352 is a compound weakness that accurately represents the **CSRF** vulnerability, and CWE-79 is a base weakness that accurately represents the **XSS** vulnerability.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-352:**\n- 352 (Cross-Site Request Forgery (CSRF)) - ROOT\n\n\n**Chain starting from CWE-79:**\n- 79 (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse",
        "original_content": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
        "keyphrase_sources": [
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "weakness:CSRF",
            "keyphrase": "CSRF",
            "type": "weakness"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "product:danielmuldernl OmniLeads Scripts and Tags Manager",
            "keyphrase": "danielmuldernl OmniLeads Scripts and Tags Manager",
            "type": "product"
          },
          {
            "id": "version:n/a through 1.3",
            "keyphrase": "n/a through 1.3",
            "type": "version"
          }
        ]
      },
      "similarity": 294.87385448367695
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse",
        "original_content": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
        "keyphrase_sources": [
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "weakness:CSRF",
            "keyphrase": "CSRF",
            "type": "weakness"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "product:danielmuldernl OmniLeads Scripts and Tags Manager",
            "keyphrase": "danielmuldernl OmniLeads Scripts and Tags Manager",
            "type": "product"
          },
          {
            "id": "version:n/a through 1.3",
            "keyphrase": "n/a through 1.3",
            "type": "version"
          }
        ]
      },
      "similarity": 280.64969631536604
    },
    {
      "metadata": {
        "doc_id": "80",
        "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
        "source": "sparse",
        "original_content": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as \"<\", \">\", and \"&\" that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.",
        "keyphrase_sources": [
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "product:danielmuldernl OmniLeads Scripts and Tags Manager",
            "keyphrase": "danielmuldernl OmniLeads Scripts and Tags Manager",
            "type": "product"
          }
        ]
      },
      "similarity": 244.03135393182484
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse",
        "original_content": "The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.",
        "keyphrase_sources": [
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "weakness:CSRF",
            "keyphrase": "CSRF",
            "type": "weakness"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "product:danielmuldernl OmniLeads Scripts and Tags Manager",
            "keyphrase": "danielmuldernl OmniLeads Scripts and Tags Manager",
            "type": "product"
          },
          {
            "id": "version:n/a through 1.3",
            "keyphrase": "n/a through 1.3",
            "type": "version"
          }
        ]
      },
      "similarity": 243.26496275545432
    },
    {
      "metadata": {
        "doc_id": "1004",
        "name": "Sensitive Cookie Without 'HttpOnly' Flag",
        "source": "sparse",
        "original_content": "The product uses a cookie to store sensitive information, but the cookie is not marked with the HttpOnly flag.",
        "keyphrase_sources": [
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "weakness:CSRF",
            "keyphrase": "CSRF",
            "type": "weakness"
          }
        ]
      },
      "similarity": 221.66330715789877
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "source": "sparse",
        "original_content": "The product allows the upload or transfer of dangerous file types that are automatically processed within its environment.",
        "keyphrase_sources": [
          {
            "id": "weakness:CSRF",
            "keyphrase": "CSRF",
            "type": "weakness"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "version:n/a through 1.3",
            "keyphrase": "n/a through 1.3",
            "type": "version"
          }
        ]
      },
      "similarity": 191.77239360549535
    },
    {
      "metadata": {
        "doc_id": "22",
        "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
        "source": "sparse",
        "original_content": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
        "keyphrase_sources": [
          {
            "id": "version:n/a through 1.3",
            "keyphrase": "n/a through 1.3",
            "type": "version"
          }
        ]
      },
      "similarity": 76.988964977996
    },
    {
      "metadata": {
        "doc_id": "138",
        "name": "Improper Neutralization of Special Elements",
        "source": "sparse",
        "original_content": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.",
        "keyphrase_sources": [
          {
            "id": "product:danielmuldernl OmniLeads Scripts and Tags Manager",
            "keyphrase": "danielmuldernl OmniLeads Scripts and Tags Manager",
            "type": "product"
          }
        ]
      },
      "similarity": 76.48112054971102
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-352",
      "CWE-79",
      "CWE-80"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {
    "352": [
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "weakness:CSRF",
        "keyphrase": "CSRF",
        "type": "weakness"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "product:danielmuldernl OmniLeads Scripts and Tags Manager",
        "keyphrase": "danielmuldernl OmniLeads Scripts and Tags Manager",
        "type": "product"
      },
      {
        "id": "version:n/a through 1.3",
        "keyphrase": "n/a through 1.3",
        "type": "version"
      }
    ],
    "79": [
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "weakness:CSRF",
        "keyphrase": "CSRF",
        "type": "weakness"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "product:danielmuldernl OmniLeads Scripts and Tags Manager",
        "keyphrase": "danielmuldernl OmniLeads Scripts and Tags Manager",
        "type": "product"
      },
      {
        "id": "version:n/a through 1.3",
        "keyphrase": "n/a through 1.3",
        "type": "version"
      }
    ],
    "80": [
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "product:danielmuldernl OmniLeads Scripts and Tags Manager",
        "keyphrase": "danielmuldernl OmniLeads Scripts and Tags Manager",
        "type": "product"
      }
    ],
    "116": [
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "weakness:CSRF",
        "keyphrase": "CSRF",
        "type": "weakness"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "product:danielmuldernl OmniLeads Scripts and Tags Manager",
        "keyphrase": "danielmuldernl OmniLeads Scripts and Tags Manager",
        "type": "product"
      },
      {
        "id": "version:n/a through 1.3",
        "keyphrase": "n/a through 1.3",
        "type": "version"
      }
    ],
    "1004": [
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "weakness:CSRF",
        "keyphrase": "CSRF",
        "type": "weakness"
      }
    ],
    "434": [
      {
        "id": "weakness:CSRF",
        "keyphrase": "CSRF",
        "type": "weakness"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "version:n/a through 1.3",
        "keyphrase": "n/a through 1.3",
        "type": "version"
      }
    ],
    "138": [
      {
        "id": "product:danielmuldernl OmniLeads Scripts and Tags Manager",
        "keyphrase": "danielmuldernl OmniLeads Scripts and Tags Manager",
        "type": "product"
      }
    ],
    "22": [
      {
        "id": "version:n/a through 1.3",
        "keyphrase": "n/a through 1.3",
        "type": "version"
      }
    ]
  }
}