{
  "cve_id": "CVE-2024-10247",
  "description": "The Video Gallery Best WordPress YouTube Gallery Plugin plugin for WordPress is vulnerable to **time-based SQL Injection** via the orderby parameter in all versions up to, and including, 2.4.2 due to **insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query**. This makes it possible for authenticated attackers, with Administrator-level access and above, to append additional SQL queries into already existing queries that can be used to extract sensitive information from the database.",
  "key_phrases": {
    "rootcause": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
    "weakness": "time-based SQL Injection",
    "impact": [
      "extract sensitive information from the database",
      "information disclosure"
    ],
    "vector": "",
    "attacker": "authenticated attackers with admin access",
    "product": "Video Gallery Best WordPress YouTube Gallery Plugin",
    "version": "up to and including 2.4.2",
    "component": "orderby parameter"
  },
  "reference_content": "Based on the provided content, here's a breakdown of the vulnerability:\n\n**CVE ID:** CVE-2024-10247\n\n**Root Cause of Vulnerability:**\n- The vulnerability is a time-based SQL Injection due to insufficient escaping of the user-supplied `orderby` parameter and the lack of sufficient preparation on the existing SQL query.\n\n**Weaknesses/Vulnerabilities Present:**\n- **SQL Injection:** The plugin fails to properly sanitize and escape user-supplied input, specifically the `orderby` parameter, before using it in an SQL query. This allows an attacker to inject arbitrary SQL code.\n- **Insufficient Input Validation:** The plugin does not adequately validate or sanitize the `orderby` parameter, allowing malicious SQL code to be introduced.\n\n**Impact of Exploitation:**\n- **Sensitive Information Disclosure:** Attackers can extract sensitive information from the database by appending malicious SQL queries into the existing queries.\n- **Complete Database Takeover:** In severe cases, an attacker could potentially gain full control of the database, potentially modifying or deleting data, adding rogue admin users, etc.\n\n**Attack Vectors:**\n- **HTTP Request:** The attacker injects malicious SQL code through the `orderby` parameter in a crafted HTTP request to the WordPress site.\n\n**Required Attacker Capabilities/Position:**\n- **Authentication:** The attacker must be authenticated as an administrator or higher-level user on the WordPress site.\n- **Network Access:** The attacker must have network access to the WordPress site.\n\n**Technical Details:**\n- The vulnerable code is located in the `tsvg_get_galleries` function within the `class-tsvg-list.php` file of the plugin.\n- The `orderby` parameter is not properly sanitized before being concatenated into the SQL query, allowing for SQL injection.\n- The `sanitize_sql_orderby()` function, while present, is not used effectively to prevent the injection.\n- The vulnerability is present in versions 2.4.2 and earlier.\n\n**Additional Notes:**\n- The Wordfence article provides a CVSS score of 7.2 (High) for the vulnerability.\n- The vulnerability was publicly published on December 5, 2024.\n- The vulnerability was discovered by the researcher `tmrswrr`.\n- The vulnerability was patched in version 2.4.3 of the plugin.\n\n**References:**\n- [packetstormsecurity.com](https://packetstormsecurity.com/files/179387/WordPress-Video-Gallery-YouTube-Gallery-And-Vimeo-Gallery-2.3.6-SQL-Injection.html)\n- [plugins.trac.wordpress.org](https://plugins.trac.wordpress.org/browser/gallery-videos/trunk/admin/class-tsvg-list.php#L15)\n- [plugins.trac.wordpress.org](https://plugins.trac.wordpress.org/changeset/3200979/gallery-videos/trunk/admin/class-tsvg-list.php)",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-89 | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | 1.0 | Base | Allowed | Primary CWE |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship is that CWE-89 [Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')] is the root cause. There are child CWEs of CWE-89 such as CWE-564 [SQL Injection: Oracle Specific], CWE-943 [ Improper Neutralization of Special Elements in a Data Query Logic] and CWE-74 [Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')] but none of these child CWEs describe the vulnerability any better than the parent CWE-89. There are no relevant chain relationships.\n\n```mermaid\ngraph TD\n    cwe89[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"]\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    class cwe89 primary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query** (root cause), leading to **time-based SQL Injection**, which then allows attackers to extract sensitive information from the database (impact).\n\n## Summary of Analysis\nThe vulnerability is a **time-based SQL Injection** due to **insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query**. This allows an attacker to extract sensitive information from the database.\n\nThe most appropriate CWE is CWE-89 [Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')], which is a Base level CWE.\n\nThe evidence supporting this decision is:\n\n*   The vulnerability description explicitly states the presence of **SQL Injection** and describes the root cause as **insufficient escaping** and **lack of sufficient preparation** which directly aligns with CWE-89.\n*   The CVE Reference Links Content Summary highlights the **SQL Injection** due to **insufficient escaping** of the `orderby` parameter.\n*   The \"Retriever Results\" lists CWE-89 as the top match.\n\nOther CWEs were considered but deemed less suitable:\n\n*   CWE-116 [Improper Encoding or Escaping of Output]: While related to escaping, it is a more general class. The issue is specifically about SQL injection.\n*   CWE-352 [Cross-Site Request Forgery (CSRF)]: This is not related to the vulnerability description.\n*   CWE-434 [Unrestricted Upload of File with Dangerous Type]: This is not related to the vulnerability description.\n*   CWE-425 [Direct Request ('Forced Browsing')]: This is not related to the vulnerability description.\n*   CWE-90 [Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')]: This is for LDAP injection, not SQL injection.\n\nThe final decision is based on the direct evidence of SQL injection and the root cause of **insufficient escaping** in SQL queries, which aligns perfectly with CWE-89.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-89 | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | 1.0 | Base | Allowed | Primary CWE |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship is that CWE-89 [Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')] is the root cause. There are child CWEs of CWE-89 such as CWE-564 [SQL Injection: Oracle Specific], CWE-943 [ Improper Neutralization of Special Elements in a Data Query Logic] and CWE-74 [Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')] but none of these child CWEs describe the vulnerability any better than the parent CWE-89. There are no relevant chain relationships.\n\n```mermaid\ngraph TD\n    cwe89[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"]\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    class cwe89 primary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query** (root cause), leading to **time-based SQL Injection**, which then allows attackers to extract sensitive information from the database (impact).\n\n## Summary of Analysis\nThe vulnerability is a **time-based SQL Injection** due to **insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query**. This allows an attacker to extract sensitive information from the database.\n\nThe most appropriate CWE is CWE-89 [Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')], which is a Base level CWE.\n\nThe evidence supporting this decision is:\n\n*   The vulnerability description explicitly states the presence of **SQL Injection** and describes the root cause as **insufficient escaping** and **lack of sufficient preparation** which directly aligns with CWE-89.\n*   The CVE Reference Links Content Summary highlights the **SQL Injection** due to **insufficient escaping** of the `orderby` parameter.\n*   The \"Retriever Results\" lists CWE-89 as the top match.\n\nOther CWEs were considered but deemed less suitable:\n\n*   CWE-116 [Improper Encoding or Escaping of Output]: While related to escaping, it is a more general class. The issue is specifically about SQL injection.\n*   CWE-352 [Cross-Site Request Forgery (CSRF)]: This is not related to the vulnerability description.\n*   CWE-434 [Unrestricted Upload of File with Dangerous Type]: This is not related to the vulnerability description.\n*   CWE-425 [Direct Request ('Forced Browsing')]: This is not related to the vulnerability description.\n*   CWE-90 [Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')]: This is for LDAP injection, not SQL injection.\n\nThe final decision is based on the direct evidence of SQL injection and the root cause of **insufficient escaping** in SQL queries, which aligns perfectly with CWE-89.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-90:**\n- 90 (Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')) - ROOT\n\n\n**Chain starting from CWE-89:**\n- 89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: SQL injection",
        "match_reason": "term_in_phrase_whole_phrase"
      },
      "similarity": 800.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse"
      },
      "similarity": 585.6822105579204
    },
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse"
      },
      "similarity": 561.5085992756711
    },
    {
      "metadata": {
        "doc_id": "502",
        "name": "Deserialization of Untrusted Data",
        "source": "sparse"
      },
      "similarity": 523.639152475777
    },
    {
      "metadata": {
        "doc_id": "862",
        "name": "Missing Authorization",
        "source": "sparse"
      },
      "similarity": 518.0144160579675
    },
    {
      "metadata": {
        "doc_id": "90",
        "name": "Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
        "source": "sparse"
      },
      "similarity": 517.7823335981041
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 517.378849679051
    },
    {
      "metadata": {
        "doc_id": "790",
        "name": "Improper Filtering of Special Elements",
        "source": "sparse"
      },
      "similarity": 514.0499308652686
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "type": "Base",
        "original_content": "The product allows the upload or transfer of dangerous file types that are automatically processed within its environment.",
        "keyphrase_source": "rootcause:lack of sufficient preparation on the existing SQL query",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse",
            "graph"
          ],
          "retriever_count": 3,
          "normalized_scores": {
            "dense": 0.4412236070590727,
            "sparse": 506.1244544963784,
            "graph": 2.2825298994094814
          }
        }
      },
      "similarity": 0.4412236070590727
    },
    {
      "doc_id": "425",
      "text": "The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.",
      "score": 0.4603714897885171,
      "metadata": {
        "doc_id": "425",
        "name": "Direct Request ('Forced Browsing')",
        "type": "Base",
        "extended_description": "Web applications susceptible to direct request attacks often make the false assumption that such resources can only be reached through a given navigation path and so only apply authorization at certain points in the path.",
        "alternate_terms": [
          "forced browsing"
        ],
        "original_content": "The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.",
        "relationships": [
          {
            "source_id": "425",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "425",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "425",
            "target_id": "424",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "425",
            "target_id": "288",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "425",
            "target_id": "862",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "425",
            "target_id": "862",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "425",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "862",
            "target_id": "425",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "425",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "424",
            "target_id": "425",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "288",
            "target_id": "425",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "source": "graph",
        "sources": [
          "vector",
          "graph"
        ],
        "vector_score": 0.4603714897885171,
        "graph_score": 3.4200400000000006,
        "score_components": {
          "relationship_chain": 0.6,
          "explicit_mention": 1.0,
          "abstraction_path": 0.9,
          "sequence_path": 0.5760000000000002
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "89",
                  "456",
                  "CANFOLLOW"
                ],
                [
                  "456",
                  "98",
                  "CANPRECEDE"
                ],
                [
                  "98",
                  "425",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.6,
              "type": "relationship_chain",
              "source": "89"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "862",
                  "425",
                  "PARENTOF"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "abstraction_path_down",
              "source": "862"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "434",
                  "73",
                  "CANFOLLOW"
                ],
                [
                  "73",
                  "98",
                  "CANPRECEDE"
                ],
                [
                  "98",
                  "425",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.5760000000000002,
              "type": "vulnerability_sequence_forward",
              "source": "434"
            }
          }
        },
        "is_explicit": true,
        "abstraction_level": "base",
        "position": "after",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.4211036567142915,
            "graph": 2.236172595915407
          }
        }
      },
      "similarity": 2.236172595915407
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-90",
      "CWE-89",
      "CWE-564",
      "CWE-116",
      "CWE-352",
      "CWE-74",
      "CWE-943",
      "CWE-425",
      "CWE-434"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}