{
  "cve_id": "CVE-2024-6265",
  "description": "The UsersWP - Front-end login form, User Registration, User Profile & Members Directory plugin for WordPress plugin for WordPress is vulnerable to time-based SQL Injection via the uwp_sort_by parameter in all versions up to, and including, 1.2.10 due to **insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query**. This makes it possible for unauthenticated attackers to append additional SQL queries into already existing queries that can be used to extract sensitive information from the database.",
  "key_phrases": {
    "rootcause": "insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query",
    "weakness": "time-based SQL injection",
    "impact": [
      "extract sensitive information from the database",
      "information disclosure"
    ],
    "vector": "",
    "attacker": "unauthenticated attackers",
    "product": [
      "UsersWP - Front-end login form",
      "User Registration",
      "User Profile & Members Directory plugin for WordPress"
    ],
    "version": "up to and including 1.2.10",
    "component": "uwp_sort_by parameter"
  },
  "reference_content": "Based on the provided information, here's a breakdown of the vulnerability associated with CVE-2024-6265:\n\n**1. Verification:**\n\n*   The provided content directly relates to the specified CVE ID (CVE-2024-6265), as confirmed by the Wordfence description, which explicitly mentions \"UsersWP \u2013 Front-end login form, User Registration, User Profile & Members Directory plugin for WordPress <= 1.2.10 - Unauthenticated SQL Injection via 'uwp_sort_by'\" and also indicates CVE-2024-6265. This is further supported by the Trac links showing code changes that address the vulnerability.\n\n**2. Root Cause of Vulnerability:**\n\n*   **Insufficient Input Sanitization:** The vulnerability stems from a lack of proper input sanitization and escaping of the `uwp_sort_by` parameter in the `class-uwp-settings-user-sorting.php` file.\n*   **Lack of Prepared Statements:** The SQL query using this unsanitized input lacked sufficient preparation.\n\n**3. Weaknesses/Vulnerabilities Present:**\n\n*   **SQL Injection:** The primary vulnerability is an SQL injection flaw. This occurs because the `uwp_sort_by` parameter, taken directly from user input (HTTP GET request), is directly incorporated into an SQL query without adequate sanitization or use of prepared statements.\n\n**4. Impact of Exploitation:**\n\n*   **Sensitive Data Exposure:** Successful exploitation of this vulnerability allows unauthenticated attackers to inject arbitrary SQL queries. This can lead to the extraction of sensitive data, including user credentials, private information, or other data stored in the database.\n*   **Potential System Compromise:** In some cases, depending on the database configuration and user privileges, SQL injection can lead to further compromise of the system hosting the database.\n*   **Time-Based SQL Injection:** The specific type of SQL injection is described as time-based. This implies an attacker might not be able to see the output of their queries directly, and would instead use techniques to induce timed responses from the server which reveal information.\n\n**5. Attack Vectors:**\n\n*   **Unauthenticated HTTP GET Request:** Attackers can exploit this vulnerability via an HTTP GET request by providing malicious SQL code within the `uwp_sort_by` parameter, typically on a user listing page.\n\n**6. Required Attacker Capabilities/Position:**\n\n*   **Unauthenticated Access:** The attacker does not need to have any prior user credentials or authenticated access to the WordPress site.\n*   **Network Access:** The attacker needs network access to send HTTP requests to the WordPress site.\n\n**Additional Information from the Provided Content:**\n\n*   **Patch Information:** The vulnerability is addressed in version 1.2.11 of the plugin, which includes changes in `class-uwp-settings-user-sorting.php` and a change log documenting the fix.\n*   **Specific Code Changes:**\n    *   In `class-uwp-settings-user-sorting.php`, the `strip_tags` and `esc_sql` are replaced with `sanitize_key` and `esc_sql` in sanitizing the `uwp_sort_by` parameter.\n    *   An additional check to make sure meta keys exist in `class-uwp-settings-user-sorting.php` before using them in the query\n    *  A fix for a bug that resulted in incorrect listing counts of custom post types was also implemented.\n*   **Affected Versions:** The vulnerability is present in all versions of the plugin up to and including 1.2.10.\n*   **CVE Assignment:** The vulnerability has been officially assigned the CVE ID CVE-2024-6265.\n*   **CVSS Score:** The vulnerability has a CVSS score of 9.8, classified as Critical.\n\n**Summary of Changes in the Fixed Version:**\n\n*   The `uwp_sort_by` parameter is now sanitized using `sanitize_key()` instead of `strip_tags()`\n*   Added a check if a user-provided meta key exists before using it in the query.\n*   Corrected incorrect listing count for GD post types\n\nIn conclusion, the provided information confirms an unauthenticated SQL injection vulnerability (CVE-2024-6265) in the UsersWP plugin, exploitable via the `uwp_sort_by` parameter. The vulnerability allows attackers to extract sensitive data from the database. Plugin versions up to and including 1.2.10 are vulnerable, and users should update to version 1.2.11 or later to remediate this security issue.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-89 | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | 1.0 | Base | Allowed | Primary CWE |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship that influenced the CWE selection is the parent-child relationship. While several CWEs were considered, CWE-89 directly addresses the root cause described in the vulnerability, which is the **improper neutralization of special elements used in an SQL command**. The other CWEs represent related but less direct aspects of the vulnerability, or represent impacts rather than root causes.\n\n```mermaid\ngraph TD\n    cwe89[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"]\n    cwe116[\"CWE-116: Improper Encoding or Escaping of Output\"]\n    cwe425[\"CWE-425: Direct Request ('Forced Browsing')\"]\n    \n    cwe89 -->|PeerOf| cwe116\n    cwe89 -->|CanPrecede| cwe425\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe89 primary\n    class cwe116,cwe425 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query**, leading to a **time-based SQL injection** vulnerability. This allows unauthenticated attackers to **extract sensitive information from the database**, leading to information disclosure.\n\n## Summary of Analysis\nThe initial analysis focused on identifying the root cause of the vulnerability, which the description clearly states as **insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query**. This aligns directly with the definition of CWE-89, \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\".\n\nThe evidence supporting this decision is strong, with explicit mentions of the **lack of sufficient preparation on the existing SQL query** and the resulting **time-based SQL injection** vulnerability. The CVE Reference Links Content Summary further confirms this by stating, \"The primary vulnerability is an SQL injection flaw. This occurs because the `uwp_sort_by` parameter, taken directly from user input (HTTP GET request), is directly incorporated into an SQL query without adequate sanitization or use of prepared statements.\"\n\nThe graph relationships reinforce this choice, as CWE-89 is often related to other CWEs involving input validation and output encoding, but it remains the most direct representation of the root cause.\n\nThe selected CWE is at the optimal level of specificity because it directly addresses the coding error that leads to the vulnerability. More general CWEs like CWE-200 (Information Exposure) would describe the impact of the vulnerability but not the underlying cause.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-352: Cross-Site Request Forgery (CSRF)\n**Abstraction Level**: Compound\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This is a well-known Composite of multiple weaknesses that must all occur simultaneously, although it is attack-oriented in nature.\n\n*CWE-352 was considered but rejected as the vulnerability is not a CSRF issue.*\n\n## CWE-472: External Control of Assumed-Immutable Web Parameter\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*CWE-472 was considered but rejected as the vulnerability is not related to assumed-immutable data.*\n\n## CWE-425: Direct Request ('Forced Browsing')\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*CWE-425 was considered but rejected as the vulnerability is not related to authorization bypass.*\n\n## CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*CWE-89 is the selected CWE as the vulnerability is an SQL Injection.*\n\n## CWE-434: Unrestricted Upload of File with Dangerous Type\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product allows the upload or transfer of dangerous file types that are automatically processed within its environment.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*CWE-434 was considered but rejected as the vulnerability is not related to unrestricted file uploads.*\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*CWE-116 was considered but rejected as the vulnerability is an SQL Injection related to escaping of input.*\n\n## CWE-639: Authorization Bypass Through User-Controlled Key\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*CWE-639 was considered but rejected as the vulnerability is not related to authorization bypass using user-controlled keys.*\n\n## CWE-201: Insertion of Sensitive Information Into Sent Data\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*CWE-201 was considered but rejected as the vulnerability is not related to insertion of sensitive information into sent data.*\n\n## CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*CWE-79 was considered but rejected as the vulnerability is not related to Cross-site scripting.*\n\n## CWE-862: Missing Authorization\n**Abstraction Level**: Class\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product does not perform an authorization check when an actor attempts to access",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-89 | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | 1.0 | Base | Allowed | Primary CWE |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship that influenced the CWE selection is the parent-child relationship. While several CWEs were considered, CWE-89 directly addresses the root cause described in the vulnerability, which is the **improper neutralization of special elements used in an SQL command**. The other CWEs represent related but less direct aspects of the vulnerability, or represent impacts rather than root causes.\n\n```mermaid\ngraph TD\n    cwe89[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"]\n    cwe116[\"CWE-116: Improper Encoding or Escaping of Output\"]\n    cwe425[\"CWE-425: Direct Request ('Forced Browsing')\"]\n    \n    cwe89 -->|PeerOf| cwe116\n    cwe89 -->|CanPrecede| cwe425\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe89 primary\n    class cwe116,cwe425 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query**, leading to a **time-based SQL injection** vulnerability. This allows unauthenticated attackers to **extract sensitive information from the database**, leading to information disclosure.\n\n## Summary of Analysis\nThe initial analysis focused on identifying the root cause of the vulnerability, which the description clearly states as **insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query**. This aligns directly with the definition of CWE-89, \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\".\n\nThe evidence supporting this decision is strong, with explicit mentions of the **lack of sufficient preparation on the existing SQL query** and the resulting **time-based SQL injection** vulnerability. The CVE Reference Links Content Summary further confirms this by stating, \"The primary vulnerability is an SQL injection flaw. This occurs because the `uwp_sort_by` parameter, taken directly from user input (HTTP GET request), is directly incorporated into an SQL query without adequate sanitization or use of prepared statements.\"\n\nThe graph relationships reinforce this choice, as CWE-89 is often related to other CWEs involving input validation and output encoding, but it remains the most direct representation of the root cause.\n\nThe selected CWE is at the optimal level of specificity because it directly addresses the coding error that leads to the vulnerability. More general CWEs like CWE-200 (Information Exposure) would describe the impact of the vulnerability but not the underlying cause.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-352: Cross-Site Request Forgery (CSRF)\n**Abstraction Level**: Compound\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This is a well-known Composite of multiple weaknesses that must all occur simultaneously, although it is attack-oriented in nature.\n\n*CWE-352 was considered but rejected as the vulnerability is not a CSRF issue.*\n\n## CWE-472: External Control of Assumed-Immutable Web Parameter\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*CWE-472 was considered but rejected as the vulnerability is not related to assumed-immutable data.*\n\n## CWE-425: Direct Request ('Forced Browsing')\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*CWE-425 was considered but rejected as the vulnerability is not related to authorization bypass.*\n\n## CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*CWE-89 is the selected CWE as the vulnerability is an SQL Injection.*\n\n## CWE-434: Unrestricted Upload of File with Dangerous Type\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product allows the upload or transfer of dangerous file types that are automatically processed within its environment.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*CWE-434 was considered but rejected as the vulnerability is not related to unrestricted file uploads.*\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*CWE-116 was considered but rejected as the vulnerability is an SQL Injection related to escaping of input.*\n\n## CWE-639: Authorization Bypass Through User-Controlled Key\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*CWE-639 was considered but rejected as the vulnerability is not related to authorization bypass using user-controlled keys.*\n\n## CWE-201: Insertion of Sensitive Information Into Sent Data\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*CWE-201 was considered but rejected as the vulnerability is not related to insertion of sensitive information into sent data.*\n\n## CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*CWE-79 was considered but rejected as the vulnerability is not related to Cross-site scripting.*\n\n## CWE-862: Missing Authorization\n**Abstraction Level**: Class\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product does not perform an authorization check when an actor attempts to access\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-89:**\n- 89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')) - ROOT\n\n\n**Chain starting from CWE-116:**\n- 116 (Improper Encoding or Escaping of Output) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: SQL injection",
        "match_reason": "term_in_phrase_whole_phrase"
      },
      "similarity": 800.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse"
      },
      "similarity": 571.7218186112865
    },
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse"
      },
      "similarity": 529.4749975406223
    },
    {
      "metadata": {
        "doc_id": "90",
        "name": "Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
        "source": "sparse"
      },
      "similarity": 528.2406925273042
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "source": "sparse"
      },
      "similarity": 511.694043125672
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 509.92828957317647
    },
    {
      "metadata": {
        "doc_id": "502",
        "name": "Deserialization of Untrusted Data",
        "source": "sparse"
      },
      "similarity": 509.6437049368676
    },
    {
      "metadata": {
        "doc_id": "862",
        "name": "Missing Authorization",
        "source": "sparse"
      },
      "similarity": 505.0270055834941
    },
    {
      "metadata": {
        "doc_id": "472",
        "name": "External Control of Assumed-Immutable Web Parameter",
        "type": "Base",
        "original_content": "The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.",
        "keyphrase_source": "weakness:time-based SQL injection",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.49417562008820903,
            "graph": 2.05180377329427
          }
        }
      },
      "similarity": 0.49417562008820903
    },
    {
      "doc_id": "471",
      "text": "CWE-471: Modification of Assumed-Immutable Data (MAID)",
      "score": 2.7196000000000002,
      "metadata": {
        "doc_id": "471",
        "name": "Modification of Assumed-Immutable Data (MAID)",
        "type": "base",
        "original_content": "CWE-471: Modification of Assumed-Immutable Data (MAID)",
        "relationships": [
          {
            "source_id": "471",
            "target_id": "621",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "607",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "602",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "473",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "472",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "425",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "291",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "1321",
            "label": "CANFOLLOW",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "1282",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "664",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "664",
            "target_id": "471",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "621",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "607",
            "target_id": "471",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "602",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "473",
            "target_id": "471",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "472",
            "target_id": "471",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "425",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "291",
            "target_id": "471",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1321",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1282",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "abstraction_path": 0.5599999999999999,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_up",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "425",
                  "471",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "425"
            },
            "abstraction_path_up": {
              "path": [
                [
                  "472",
                  "471",
                  "CHILDOF"
                ]
              ],
              "score": 0.5599999999999999,
              "type": "abstraction_path_up",
              "source": "472"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "425",
                  "471",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_forward",
              "source": "425"
            }
          }
        },
        "abstraction_level": "base",
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.7196000000000002
          }
        }
      },
      "similarity": 2.7196000000000002
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-89",
      "CWE-116",
      "CWE-862",
      "CWE-639",
      "CWE-79",
      "CWE-201",
      "CWE-472",
      "CWE-352",
      "CWE-200",
      "CWE-425",
      "CWE-434"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}