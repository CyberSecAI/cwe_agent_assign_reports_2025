{
  "cve_id": "CVE-2024-56744",
  "description": "In the Linux kernel, the following vulnerability has been resolved f2fs fix to avoid potential **deadlock** in f2fs_record_stop_reason() syzbot reports **deadlock** issue of f2fs as below ====================================================== WARNING possible circular locking dependency detected 6.12.0-rc3-syzkaller-00087-gc964ced77262 #0 Not tainted ------------------------------------------------------ kswapd0/79 is trying to acquire lock ffff888011824088 (&sbi->sb_lock){++++}-{33}, at f2fs_down_write fs/f2fs/f2fs.h2199 [inline] ffff888011824088 (&sbi->sb_lock){++++}-{33}, at f2fs_record_stop_reason+0x52/0x1d0 fs/f2fs/super.c4068 but task is already holding lock ffff88804bd92610 (sb_internal#2){.+.+}-{00}, at f2fs_evict_inode+0x662/0x15c0 fs/f2fs/inode.c842 which lock already depends on the new lock. the existing dependency chain (in reverse order) is -> #2 (sb_internal#2){.+.+}-{00} lock_acquire+0x1ed/0x550 kernel/locking/lockdep.c5825 percpu_down_read include/linux/percpu-rwsem.h51 [inline] __sb_start_write include/linux/fs.h1716 [inline] sb_start_intwrite+0x4d/0x1c0 include/linux/fs.h1899 f2fs_evict_inode+0x662/0x15c0 fs/f2fs/inode.c842 evict+0x4e8/0x9b0 fs/inode.c725 f2fs_evict_inode+0x1a4/0x15c0 fs/f2fs/inode.c807 evict+0x4e8/0x9b0 fs/inode.c725 dispose_list fs/inode.c774 [inline] prune_icache_sb+0x239/0x2f0 fs/inode.c963 super_cache_scan+0x38c/0x4b0 fs/super.c223 do_shrink_slab+0x701/0x1160 mm/shrinker.c435 shrink_slab+0x1093/0x14d0 mm/shrinker.c662 shrink_one+0x43b/0x850 mm/vmscan.c4818 shrink_many mm/vmscan.c4879 [inline] lru_gen_shrink_node mm/vmscan.c4957 [inline] shrink_node+0x3799/0x3de0 mm/vmscan.c5937 kswapd_shrink_node mm/vmscan.c6765 [inline] balance_pgdat mm/vmscan.c6957 [inline] kswapd+0x1ca3/0x3700 mm/vmscan.c7226 kthread+0x2f0/0x390 kernel/kthread.c389 ret_from_fork+0x4b/0x80 arch/x86/kernel/process.c147 ret_from_fork_asm+0x1a/0x30 arch/x86/entry/entry_64.S244 -> #1 (fs_reclaim){+.+.}-{00} lock_acquire+0x1ed/0x550 kernel/locking/lockdep.c5825 __fs_reclaim_acquire mm/page_alloc.c3834 [inline] fs_reclaim_acquire+0x88/0x130 mm/page_alloc.c3848 might_alloc include/linux/sched/mm.h318 [inline] prepare_alloc_pages+0x147/0x5b0 mm/page_alloc.c4493 __alloc_pages_noprof+0x16f/0x710 mm/page_alloc.c4722 alloc_pages_mpol_noprof+0x3e8/0x680 mm/mempolicy.c2265 alloc_pages_noprof mm/mempolicy.c2345 [inline] folio_alloc_noprof+0x128/0x180 mm/mempolicy.c2352 filemap_alloc_folio_noprof+0xdf/0x500 mm/filemap.c1010 do_read_cache_folio+0x2eb/0x850 mm/filemap.c3787 read_mapping_folio include/linux/pagemap.h1011 [inline] f2fs_commit_super+0x3c0/0x7d0 fs/f2fs/super.c4032 f2fs_record_stop_reason+0x13b/0x1d0 fs/f2fs/super.c4079 f2fs_handle_critical_error+0x2ac/0x5c0 fs/f2fs/super.c4174 f2fs_write_inode+0x35f/0x4d0 fs/f2fs/inode.c785 write_inode fs/fs-writeback.c1503 [inline] __writeback_single_inode+0x711/0x10d0 fs/fs-writeback.c1723 writeback_single_inode+0x1f3/0x660 fs/fs-writeback.c1779 sync_inode_metadata+0xc4/0x120 fs/fs-writeback.c2849 f2fs_release_file+0xa8/0x100 fs/f2fs/file.c1941 __fput+0x23f/0x880 fs/file_table.c431 task_work_run+0x24f/0x310 kernel/task_work.c228 resume_user_mode_work include/linux/resume_user_mode.h50 [inline] exit_to_user_mode_loop kernel/entry/common.c114 [inline] exit_to_user_mode_prepare include/linux/entry-common.h328 [inline] __syscall_exit_to_user_mode_work kernel/entry/common.c207 [inline] syscall_exit_to_user_mode+0x168/0x370 kernel/entry/common.c218 do_syscall_64+0x100/0x230 arch/x86/entry/common.c89 entry_SYSCALL_64_after_hwframe+0x77/0x7f ---truncated---",
  "key_phrases": {
    "rootcause": "",
    "weakness": "deadlock",
    "impact": "",
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": "f2fs"
  },
  "reference_content": "Based on the provided content, here's a breakdown of the vulnerability:\n\n**Root Cause:**\n\n- A potential deadlock can occur in the f2fs filesystem when `f2fs_record_stop_reason()` is called synchronously from `f2fs_handle_critical_error()`. This is due to a circular locking dependency involving `&sbi->sb_lock`, `fs_reclaim`, and `sb_internal#2`.\n- The deadlock arises when two threads (specifically `kswapd` and a thread performing file operations) try to acquire read locks and then write locks on the same resource in a conflicting order.\n\n**Weaknesses/Vulnerabilities:**\n\n- **Circular Locking Dependency:**  The core issue is a circular dependency between locks.  A thread can hold `sb_internal#2` while trying to acquire `&sbi->sb_lock`, while another thread is holding `&sbi->sb_lock` and trying to acquire `sb_internal#2` via `fs_reclaim`.\n- **Synchronous Call:** The synchronous call to `f2fs_record_stop_reason()` within `f2fs_handle_critical_error()` is the trigger for this deadlock.\n\n**Impact of Exploitation:**\n\n- **Deadlock:** The primary impact is a system deadlock, which leads to the system becoming unresponsive.\n- **System Unavailability:**  The deadlock will block the threads and the system is not able to operate.\n\n**Attack Vectors:**\n\n- The vulnerability is triggered during normal file system operations that involve error handling within the F2FS filesystem.\n- The `kswapd` thread and file operation threads needs to call into the `f2fs_handle_critical_error` and `f2fs_record_stop_reason`\n\n**Required Attacker Capabilities/Position:**\n\n- An attacker would need to be able to cause specific error conditions within the F2FS filesystem that lead to the execution of `f2fs_handle_critical_error()` and the synchronous call to `f2fs_record_stop_reason()`. \n- This can be achieved by writing data to the filesystem which causes specific errors that will cause the function call.\n- No specific privilege is needed for the exploit.\n\n**More Details than CVE Description:**\n\n- The provided content gives a detailed explanation of the locking dependency chain and the call stack leading to the deadlock. It also includes a potential scenario demonstrating how the deadlock is triggered between two threads which are `kswapd` and file operation thread.\n- The patch changes the call of `f2fs_record_stop_reason()` from synchronous to asynchronous to avoid the deadlock.\n- The content gives the specific function names and line number where the deadlock occurs.\n\nIn summary, the vulnerability is a deadlock caused by a circular locking dependency in the F2FS filesystem, triggered when certain error conditions occur. The fix is to always use an asynchronous task to call `f2fs_record_stop_reason()`.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-833 | Deadlock | 1.0 | Base | Primary | Allowed |\n| CWE-667 | Improper Locking | 0.7 | Class | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-833 (Deadlock), which is caused by the program entering a deadlock state. CWE-833 is a Base level CWE. CWE-667 (Improper Locking) is a Class-level CWE that could be considered a parent of CWE-833. The vulnerability description clearly states the occurrence of a deadlock, making CWE-833 the most accurate and specific choice.\n\n```mermaid\ngraph TD\n    cwe833[\"CWE-833: Deadlock\"]\n    cwe667[\"CWE-667: Improper Locking\"]\n\n    cwe833 -->|CHILDOF| cwe667\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe833 primary\n    class cwe667 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **circular locking dependency** caused by the synchronous call to `f2fs_record_stop_reason()` within `f2fs_handle_critical_error()`. This leads to a **deadlock** where two threads are waiting for each other to release locks. The impact is system unavailability.\n\n## Summary of Analysis\nThe primary vulnerability is a deadlock in the Linux kernel's f2fs filesystem. The evidence strongly supports the selection of CWE-833 (Deadlock) as the primary CWE. The vulnerability description explicitly mentions a **deadlock** due to a circular locking dependency. The synchronous call to `f2fs_record_stop_reason()` within `f2fs_handle_critical_error()` triggers this **deadlock**.\n\nThe CWE-833 accurately represents the vulnerability because the system becomes unresponsive due to the threads waiting for each other to release locks. The retriever results also listed CWE-833 and CWE-667 as top candidates, further supporting this selection.\n\nCWE-667 (Improper Locking) was considered as a possible cause and secondary issue but was not selected as the primary CWE because it is a class-level CWE. The more specific, base-level CWE of CWE-833 (Deadlock) is a more precise classification.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-833: Deadlock\n**Abstraction Level**: Base\n**Similarity Score**: 0.78\n**Source**: dense\n\n**Description**:\nThe product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-833 | Deadlock | 1.0 | Base | Primary | Allowed |\n| CWE-667 | Improper Locking | 0.7 | Class | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-833 (Deadlock), which is caused by the program entering a deadlock state. CWE-833 is a Base level CWE. CWE-667 (Improper Locking) is a Class-level CWE that could be considered a parent of CWE-833. The vulnerability description clearly states the occurrence of a deadlock, making CWE-833 the most accurate and specific choice.\n\n```mermaid\ngraph TD\n    cwe833[\"CWE-833: Deadlock\"]\n    cwe667[\"CWE-667: Improper Locking\"]\n\n    cwe833 -->|CHILDOF| cwe667\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe833 primary\n    class cwe667 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **circular locking dependency** caused by the synchronous call to `f2fs_record_stop_reason()` within `f2fs_handle_critical_error()`. This leads to a **deadlock** where two threads are waiting for each other to release locks. The impact is system unavailability.\n\n## Summary of Analysis\nThe primary vulnerability is a deadlock in the Linux kernel's f2fs filesystem. The evidence strongly supports the selection of CWE-833 (Deadlock) as the primary CWE. The vulnerability description explicitly mentions a **deadlock** due to a circular locking dependency. The synchronous call to `f2fs_record_stop_reason()` within `f2fs_handle_critical_error()` triggers this **deadlock**.\n\nThe CWE-833 accurately represents the vulnerability because the system becomes unresponsive due to the threads waiting for each other to release locks. The retriever results also listed CWE-833 and CWE-667 as top candidates, further supporting this selection.\n\nCWE-667 (Improper Locking) was considered as a possible cause and secondary issue but was not selected as the primary CWE because it is a class-level CWE. The more specific, base-level CWE of CWE-833 (Deadlock) is a more precise classification.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-833: Deadlock\n**Abstraction Level**: Base\n**Similarity Score**: 0.78\n**Source**: dense\n\n**Description**:\nThe product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-667:**\n- 667 (Improper Locking) - ROOT\n\n\n**Chain starting from CWE-833:**\n- 833 (Deadlock) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "667",
        "name": "Improper Locking",
        "source": "sparse"
      },
      "similarity": 863.2056823186919
    },
    {
      "metadata": {
        "doc_id": "833",
        "name": "Deadlock",
        "source": "sparse"
      },
      "similarity": 837.6688310587255
    },
    {
      "metadata": {
        "doc_id": "912",
        "name": "Hidden Functionality",
        "source": "sparse"
      },
      "similarity": 781.4734832135642
    },
    {
      "metadata": {
        "doc_id": "763",
        "name": "Release of Invalid Pointer or Reference",
        "source": "sparse"
      },
      "similarity": 774.8280846178395
    },
    {
      "metadata": {
        "doc_id": "392",
        "name": "Missing Report of Error Condition",
        "source": "sparse"
      },
      "similarity": 772.4862000988269
    },
    {
      "metadata": {
        "doc_id": "288",
        "name": "Authentication Bypass Using an Alternate Path or Channel",
        "source": "sparse"
      },
      "similarity": 756.5807777027904
    },
    {
      "metadata": {
        "doc_id": "367",
        "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
        "source": "sparse"
      },
      "similarity": 635.0296253956536
    },
    {
      "metadata": {
        "doc_id": "835",
        "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
        "source": "sparse"
      },
      "similarity": 587.2352770134313
    },
    {
      "metadata": {
        "doc_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "type": "Class",
        "original_content": "The product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
          "comments": "Examine children of this entry to see if there is a better fit",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse",
            "graph"
          ],
          "retriever_count": 3,
          "normalized_scores": {
            "dense": 0.578603998153264,
            "sparse": 570.8328740938457,
            "graph": 1.3186260859688061
          }
        }
      },
      "similarity": 0.578603998153264
    },
    {
      "doc_id": "123",
      "text": "CWE-123: Write-what-where Condition",
      "score": 1.7680000000000005,
      "metadata": {
        "doc_id": "123",
        "name": "Write-what-where Condition",
        "type": "base",
        "original_content": "CWE-123: Write-what-where Condition",
        "relationships": [
          {
            "source_id": "123",
            "target_id": "590",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "479",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "416",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "364",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "134",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "120",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "119",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1340"
            }
          },
          {
            "source_id": "123",
            "target_id": "119",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1305"
            }
          },
          {
            "source_id": "123",
            "target_id": "787",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "787",
            "target_id": "123",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "590",
            "target_id": "123",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "479",
            "target_id": "123",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "416",
            "target_id": "123",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "415",
            "target_id": "123",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "364",
            "target_id": "123",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "134",
            "target_id": "123",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "120",
            "target_id": "123",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "119",
            "target_id": "123",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1305"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 0.8,
          "sequence_path": 0.8
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "362",
                  "364",
                  "PARENTOF"
                ],
                [
                  "364",
                  "123",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "relationship_chain",
              "source": "362"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "362",
                  "416",
                  "CANPRECEDE"
                ],
                [
                  "416",
                  "123",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "vulnerability_sequence_forward",
              "source": "362"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 1.7680000000000005
          }
        }
      },
      "similarity": 1.7680000000000005
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-667",
      "CWE-833"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}