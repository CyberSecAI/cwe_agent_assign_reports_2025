{
  "query": "In the Linux kernel, the following vulnerability has been resolved sched_ext Fix pick_task_scx() picking non-queued tasks when its called without balance() a6250aa251ea (sched_ext Handle cases where pick_task_scx() is called without preceding balance_scx()) added a workaround to handle the cases where pick_task_scx() is called without prececing balance_scx() which is due to a fair class bug where pick_taks_fair() may return NULL after a true return from balance_fair(). The workaround detects when pick_task_scx() is called without preceding balance_scx() and emulates SCX_RQ_BAL_KEEP and triggers kicking to avoid stalling. Unfortunately, the workaround code was testing whether @prev was on SCX to decide whether to keep the task running. This is incorrect as the task may be on SCX but no longer runnable. This could lead to a non-runnable task to be returned from pick_task_scx() which cause interesting confusions and failures. e.g. A common failure mode is the task ending up with (!on_rq && on_cpu) state which can cause potential wakers to busy loop, which can easily lead to deadlocks. Fix it by testing whether @prev has SCX_TASK_QUEUED set. This makes @prev_on_scx only used in one place. Open code the usage and improve the comment while at it.",
  "count": 10,
  "results": [
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "abstraction": "Class",
      "score": 822.6149181893006,
      "original_score": 822.6149181893006,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "abstraction": "Base",
      "score": 790.0304016028074,
      "original_score": 790.0304016028074,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "364",
      "name": "Signal Handler Race Condition",
      "abstraction": "Base",
      "score": 788.3587509418811,
      "original_score": 788.3587509418811,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "79",
      "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
      "abstraction": "Base",
      "score": 786.258427084265,
      "original_score": 786.258427084265,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "59",
      "name": "Improper Link Resolution Before File Access ('Link Following')",
      "abstraction": "Base",
      "score": 779.5528423065563,
      "original_score": 779.5528423065563,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "863",
      "name": "Incorrect Authorization",
      "abstraction": "Class",
      "score": 779.4768180430318,
      "original_score": 779.4768180430318,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "abstraction": "Base",
      "score": 768.6613174735029,
      "original_score": 768.6613174735029,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "203",
      "name": "Observable Discrepancy",
      "abstraction": "Base",
      "score": 768.3963289963202,
      "original_score": 768.3963289963202,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1333",
      "name": "Inefficient Regular Expression Complexity",
      "abstraction": "Base",
      "score": 767.8040045825979,
      "original_score": 767.8040045825979,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1390",
      "name": "Weak Authentication",
      "abstraction": "Class",
      "score": 760.3993296198122,
      "original_score": 760.3993296198122,
      "mapping_usage": "Allowed-with-Review"
    }
  ],
  "statistics": {
    "min": 760.3993296198122,
    "max": 822.6149181893006,
    "mean": 781.1553138840076,
    "median": 779.514830174794,
    "count": 10
  }
}