{
  "cve_id": "CVE-2024-36983",
  "description": "In Splunk Enterprise versions below 9.2.2, 9.1.5, and 9.0.10 and Splunk Cloud Platform versions below 9.1.2312.109 and 9.1.2308.207, an authenticated user could create an external lookup that calls a legacy internal function. The authenticated user could use this internal function to insert code into the Splunk platform installation directory. From there, the user could execute arbitrary code on the Splunk platform Instance.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "",
    "impact": [
      "arbitrary code execution",
      "execute arbitrary code"
    ],
    "vector": "create an external lookup that calls a legacy internal function",
    "attacker": "authenticated user",
    "product": [
      "['Splunk Enterprise'",
      "'Splunk Cloud Platform']"
    ],
    "version": [
      "['below 9.2.2",
      "9.1.5",
      "and 9.0.10'",
      "'below 9.1.2312.109 and 9.1.2308.207']"
    ],
    "component": ""
  },
  "reference_content": "Based on the provided content, here's a breakdown of CVE-2024-36983:\n\n**Root Cause:**\n\n*   The vulnerability stems from the use of a deprecated internal function, `runshellscript`, within scripted alert actions, in combination with external command lookups.\n\n**Weaknesses/Vulnerabilities:**\n\n*   **Command Injection:** Authenticated users can create external lookups that call the deprecated `runshellscript` function. This allows them to inject arbitrary code into the Splunk platform's installation directory.\n*   **Insecure Use of Deprecated Function:** The `runshellscript` command, intended for internal use, is being exposed through external lookups.\n*   **Lack of Input Sanitization:** The vulnerability implies that user-supplied input to the external lookup is not properly sanitized or validated before being used to construct commands executed on the system.\n\n**Impact of Exploitation:**\n\n*   **Arbitrary Code Execution (ACE):** Successful exploitation allows an attacker to execute arbitrary code on the Splunk platform instance, within a privileged context.\n*   **System Compromise:** This could lead to complete system compromise, data loss, unauthorized data transfer, and other malicious activities.\n\n**Attack Vectors:**\n\n*   **Network:** The attack vector is network-based (AV:N).\n*   **External Lookups:**  The vulnerability is triggered by creating a malicious external lookup.\n*   **User Interaction (UI):** The attack requires user interaction (UI:R) as the attacker needs to configure the malicious external lookup.\n\n**Required Attacker Capabilities/Position:**\n\n*   **Authenticated Access:** The attacker needs to be an authenticated user with the ability to create external lookups (PR:L).\n*   **Knowledge of Deprecated Function:** The attacker must be aware of the `runshellscript` function and how to call it using an external lookup.\n\n**Additional Details:**\n*   The vulnerability is rated as high severity (8.0) with a CVSSv3.1 vector of CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:H.\n*   The affected versions are Splunk Enterprise below 9.2.2, 9.1.5, and 9.0.10, and Splunk Cloud Platform versions below 9.1.2312.109 and 9.1.2308.207.\n*   The provided detection query helps identify the usage of the vulnerable command `runshellscript` along with other risky commands such as `collect`, `delete` and `sendemail`.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-94 | Improper Control of Generation of Code ('Code Injection') | 0.9 | Base | Allowed-with-Review | Primary CWE. The **improper control of generation of code** allows an authenticated user to inject code into the Splunk platform installation directory. |\n| CWE-668 | Exposure of Resource to Wrong Sphere | 0.7 | Class | Discouraged | Secondary candidate. The `runshellscript` command, intended for internal use, is being exposed through external lookups. |\n| CWE-267 | Privilege Defined With Unsafe Actions | 0.6 | Base | Allowed | Secondary candidate. A particular privilege can be used to perform unsafe actions that were not intended. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-94, which is a base-level CWE. CWE-94 has parent-child relationships with CWE-96, CWE-95, CWE-1336, and CWE-913. The vulnerability involves injecting code, making CWE-94 a relevant choice. The chain relationship shows that CWE-94 can follow CWE-98 which is 'PHP Remote File Inclusion'. CWE-668 and CWE-267 are related as both involve misconfiguration of resources or privileges, but are secondary to the root cause of code injection.\n\n```mermaid\ngraph TD\n    cwe94[\"CWE-94: Improper Control of Generation of Code ('Code Injection')\"]\n    cwe668[\"CWE-668: Exposure of Resource to Wrong Sphere\"]\n    cwe267[\"CWE-267: Privilege Defined With Unsafe Actions\"]\n    cwe98[\"CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')\"]\n    \n    cwe94 -->|CANFOLLOW| cwe98\n    cwe668 -->|RELATED| cwe267\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe94 primary\n    class cwe668,cwe267 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the authenticated user's ability to create an external lookup. The user then calls a legacy internal function (`runshellscript`). This leads to **improper control of code generation** (CWE-94), which allows the user to inject code into the Splunk platform's installation directory. Finally, the injected code is executed, resulting in arbitrary code execution.\n  - The **Primary CWE** is CWE-94 because the root cause is the **improper control of code generation**.\n\n## Summary of Analysis\nThe initial analysis identified CWE-94 as the primary weakness due to the **improper control of code generation**. This aligns with the vulnerability description, which states that an authenticated user can inject code into the Splunk platform installation directory, leading to arbitrary code execution. The retriever results also listed CWE-94 as a potential match.\n\nThe evidence from the \"CVE Reference Links Content Summary\" section supports this: \"Authenticated users can create external lookups that call the deprecated `runshellscript` function. This allows them to inject arbitrary code into the Splunk platform's installation directory.\"\n\nThe graph relationships and abstraction levels were considered to ensure the selected CWEs are at the appropriate level of specificity. CWE-94 is a base-level CWE, providing a good balance between specificity and generality.\n\nOther CWEs considered but not used:\n\n*   CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')): While injection is involved, CWE-94 is more specific to code injection.\n*   CWE-22 (Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')): Not applicable as the vulnerability does not involve path traversal.\n*   CWE-502 (Deserialization of Untrusted Data): Not applicable as the vulnerability does not involve deserialization of untrusted data.\n*   CWE-427 (Uncontrolled Search Path Element): While the attacker is placing files in the Splunk directory, it is not related to the search path.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\n**Abstraction Level**: Base\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nThe product does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the product does.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n\n\n## CWE-267: Privilege Defined With Unsafe Actions\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nA particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-668: Exposure of Resource to Wrong Sphere\n**Abstraction Level**: Class\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-668 is high-level and is often misused as a catch-all when lower-level CWE IDs might be applicable. It is sometimes used for low-information vulnerability reports [REF-1287]. It is a level-1 Class (i.e., a child of a Pillar). It is not useful for trend analysis.\n\n\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-538: Insertion of Sensitive Information into Externally-Accessible File or Directory\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product places sensitive information into files or directories that are accessible to actors who are allowed to have access to the files, but not to the sensitive information.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-138: Improper Neutralization of Special Elements\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n\n\n## CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-42",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-94 | Improper Control of Generation of Code ('Code Injection') | 0.9 | Base | Allowed-with-Review | Primary CWE. The **improper control of generation of code** allows an authenticated user to inject code into the Splunk platform installation directory. |\n| CWE-668 | Exposure of Resource to Wrong Sphere | 0.7 | Class | Discouraged | Secondary candidate. The `runshellscript` command, intended for internal use, is being exposed through external lookups. |\n| CWE-267 | Privilege Defined With Unsafe Actions | 0.6 | Base | Allowed | Secondary candidate. A particular privilege can be used to perform unsafe actions that were not intended. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-94, which is a base-level CWE. CWE-94 has parent-child relationships with CWE-96, CWE-95, CWE-1336, and CWE-913. The vulnerability involves injecting code, making CWE-94 a relevant choice. The chain relationship shows that CWE-94 can follow CWE-98 which is 'PHP Remote File Inclusion'. CWE-668 and CWE-267 are related as both involve misconfiguration of resources or privileges, but are secondary to the root cause of code injection.\n\n```mermaid\ngraph TD\n    cwe94[\"CWE-94: Improper Control of Generation of Code ('Code Injection')\"]\n    cwe668[\"CWE-668: Exposure of Resource to Wrong Sphere\"]\n    cwe267[\"CWE-267: Privilege Defined With Unsafe Actions\"]\n    cwe98[\"CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')\"]\n    \n    cwe94 -->|CANFOLLOW| cwe98\n    cwe668 -->|RELATED| cwe267\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe94 primary\n    class cwe668,cwe267 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the authenticated user's ability to create an external lookup. The user then calls a legacy internal function (`runshellscript`). This leads to **improper control of code generation** (CWE-94), which allows the user to inject code into the Splunk platform's installation directory. Finally, the injected code is executed, resulting in arbitrary code execution.\n  - The **Primary CWE** is CWE-94 because the root cause is the **improper control of code generation**.\n\n## Summary of Analysis\nThe initial analysis identified CWE-94 as the primary weakness due to the **improper control of code generation**. This aligns with the vulnerability description, which states that an authenticated user can inject code into the Splunk platform installation directory, leading to arbitrary code execution. The retriever results also listed CWE-94 as a potential match.\n\nThe evidence from the \"CVE Reference Links Content Summary\" section supports this: \"Authenticated users can create external lookups that call the deprecated `runshellscript` function. This allows them to inject arbitrary code into the Splunk platform's installation directory.\"\n\nThe graph relationships and abstraction levels were considered to ensure the selected CWEs are at the appropriate level of specificity. CWE-94 is a base-level CWE, providing a good balance between specificity and generality.\n\nOther CWEs considered but not used:\n\n*   CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')): While injection is involved, CWE-94 is more specific to code injection.\n*   CWE-22 (Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')): Not applicable as the vulnerability does not involve path traversal.\n*   CWE-502 (Deserialization of Untrusted Data): Not applicable as the vulnerability does not involve deserialization of untrusted data.\n*   CWE-427 (Uncontrolled Search Path Element): While the attacker is placing files in the Splunk directory, it is not related to the search path.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\n**Abstraction Level**: Base\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nThe product does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the product does.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n\n\n## CWE-267: Privilege Defined With Unsafe Actions\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nA particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-668: Exposure of Resource to Wrong Sphere\n**Abstraction Level**: Class\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-668 is high-level and is often misused as a catch-all when lower-level CWE IDs might be applicable. It is sometimes used for low-information vulnerability reports [REF-1287]. It is a level-1 Class (i.e., a child of a Pillar). It is not useful for trend analysis.\n\n\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-538: Insertion of Sensitive Information into Externally-Accessible File or Directory\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product places sensitive information into files or directories that are accessible to actors who are allowed to have access to the files, but not to the sensitive information.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-138: Improper Neutralization of Special Elements\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n\n\n## CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-42\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-502:**\n- 502 (Deserialization of Untrusted Data) - ROOT\n\n\n**Chain starting from CWE-427:**\n- 427 (Uncontrolled Search Path Element) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "732",
        "name": "Incorrect Permission Assignment for Critical Resource",
        "source": "sparse"
      },
      "similarity": 120.53701243809462
    },
    {
      "metadata": {
        "doc_id": "200",
        "name": "Exposure of Sensitive Information to an Unauthorized Actor",
        "source": "sparse"
      },
      "similarity": 117.77672914399355
    },
    {
      "metadata": {
        "doc_id": "23",
        "name": "Relative Path Traversal",
        "source": "sparse"
      },
      "similarity": 115.56414704755254
    },
    {
      "metadata": {
        "doc_id": "1336",
        "name": "Improper Neutralization of Special Elements Used in a Template Engine",
        "source": "sparse"
      },
      "similarity": 114.56393253748544
    },
    {
      "metadata": {
        "doc_id": "502",
        "name": "Deserialization of Untrusted Data",
        "source": "sparse"
      },
      "similarity": 114.33794979666371
    },
    {
      "metadata": {
        "doc_id": "95",
        "name": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
        "source": "sparse"
      },
      "similarity": 114.25846354224555
    },
    {
      "metadata": {
        "doc_id": "94",
        "name": "Improper Control of Generation of Code ('Code Injection')",
        "source": "sparse"
      },
      "similarity": 113.99812304297829
    },
    {
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "source": "sparse"
      },
      "similarity": 113.52303980075506
    },
    {
      "metadata": {
        "doc_id": "426",
        "name": "Untrusted Search Path",
        "type": "Base",
        "original_content": "The product searches for critical resources using an externally-supplied search path that can point to resources that are not under the product's direct control.",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.47793548013896664,
            "graph": 2.415941079262362
          }
        }
      },
      "similarity": 0.47793548013896664
    },
    {
      "doc_id": "427",
      "text": "The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors.",
      "score": 0.5517457469371081,
      "metadata": {
        "doc_id": "427",
        "name": "Uncontrolled Search Path Element",
        "type": "Base",
        "extended_description": "\n\nAlthough this weakness can occur with any type of resource, it is frequently introduced when a product uses a directory search path to find executables or code libraries, but the path contains a directory that can be modified by an attacker, such as \"/tmp\" or the current working directory.\n\n\nIn Windows-based systems, when the LoadLibrary or LoadLibraryEx function is called with a DLL name that does not contain a fully qualified path, the function follows a search order that includes two path elements that might be uncontrolled:\n\n\n  - the directory from which the program has been loaded\n\n  - the current working directory\n\nIn some cases, the attack can be conducted remotely, such as when SMB or WebDAV network shares are used.\n\nOne or more locations in that path could include the Windows drive root or its subdirectories. This often exists in Linux-based code assuming the controlled nature of the root directory (/) or its subdirectories (/etc, etc), or a code that recursively accesses the parent directory. In Windows, the drive root and some of its subdirectories have weak permissions by default, which makes them uncontrolled.\n\n\nIn some Unix-based systems, a PATH might be created that contains an empty element, e.g. by splicing an empty variable into the PATH. This empty element can be interpreted as equivalent to the current working directory, which might be an untrusted search element.\n\n\nIn software package management frameworks (e.g., npm, RubyGems, or PyPi), the framework may identify dependencies on third-party libraries or other packages, then consult a repository that contains the desired package. The framework may search a public repository before a private repository. This could be exploited by attackers by placing a malicious package in the public repository that has the same name as a package from the private repository. The search path might not be directly under control of the developer relying on the framework, but this search order effectively contains an untrusted element.\n",
        "alternate_terms": [
          "DLL preloading",
          "Binary planting",
          "Insecure library loading",
          "Dependency confusion"
        ],
        "original_content": "The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors.",
        "relationships": [
          {
            "source_id": "427",
            "target_id": "668",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "427",
            "target_id": "668",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "668",
            "target_id": "427",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "426",
            "target_id": "427",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "source": "graph",
        "sources": [
          "vector",
          "graph"
        ],
        "vector_score": 0.5517457469371081,
        "graph_score": 3.6399999999999997,
        "score_components": {
          "explicit_mention": 1.0,
          "relationship_chain": 0.7,
          "abstraction_path": 0.9,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "426",
                  "427",
                  "PEEROF"
                ]
              ],
              "score": 0.7,
              "type": "relationship_chain",
              "source": "426"
            },
            "peer_relationship": {
              "path": [
                [
                  "426",
                  "427",
                  "PEEROF"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "426"
            }
          }
        },
        "is_explicit": true,
        "abstraction_level": "base",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.4574017064524201,
            "graph": 2.404698298774843
          }
        }
      },
      "similarity": 2.404698298774843
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-502",
      "CWE-427",
      "CWE-94",
      "CWE-116",
      "CWE-22",
      "CWE-42",
      "CWE-1336",
      "CWE-98",
      "CWE-95",
      "CWE-913",
      "CWE-538",
      "CWE-74",
      "CWE-668",
      "CWE-138",
      "CWE-267",
      "CWE-96",
      "CWE-497",
      "CWE-212"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}