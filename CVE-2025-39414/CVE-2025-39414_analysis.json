{
  "cve_id": "CVE-2025-39414",
  "description": "Cross-Site Request Forgery (CSRF) vulnerability in Mike spam-stopper allows Stored XSS. This issue affects spam-stopper from n/a through 3.1.3.",
  "key_phrases": {
    "rootcause": "cross-site request forgery",
    "weakness": "stored XSS",
    "impact": "",
    "vector": "",
    "attacker": "",
    "product": "Mike spam-stopper",
    "version": "n/a through 3.1.3",
    "component": ""
  },
  "reference_content": "Root cause of vulnerability:\nThe WordPress spam-stopper Plugin <= 3.1.3 is vulnerable to Cross Site Request Forgery (CSRF).\n\nWeaknesses/vulnerabilities present:\nCross Site Request Forgery (CSRF) - allows a malicious actor to force higher privileged users to execute unwanted actions under their current authentication.\n\nImpact of exploitation:\nA malicious actor can force higher privileged users to execute unwanted actions. The specific impact varies case by case.\n\nAttack vectors:\nNot specified in the content.\n\nRequired attacker capabilities/position:\nUnauthenticated.\n\nMitigation or fix:\nNo official fix available. Patchstack vPatching can auto-mitigate the vulnerability.\n\nAdditional details:\n- CVSS score: 7.1 (Low severity)\n- Vulnerable versions: <= 3.1.3\n- Fixed in: N/A\n- OWASP Top 10: A3: Injection\n- Reported by: johska\n- Published by Patchstack: 17 April 2025",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-352 | Cross-Site Request Forgery (CSRF) | 0.9 | Compound | Allowed | Primary CWE. The root cause is the lack of CSRF protection. |\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 0.8 | Base | Allowed | Secondary CWE. The CSRF allows for stored XSS. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.85\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe vulnerability is a combination of **CWE-352 Cross-Site Request Forgery (CSRF)** and **CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')**. The **CWE-352 Cross-Site Request Forgery (CSRF)** enables the **CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')** vulnerability.\n\n```mermaid\ngraph TD\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    \n    cwe352 -->|CANPRECEDE| cwe79\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe352 primary\n    class cwe79 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a **missing CSRF protection** (**CWE-352 Cross-Site Request Forgery (CSRF)**). This allows an attacker to inject malicious input without proper validation, leading to **stored XSS** (**CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')**).\n\n## Summary of Analysis\nThe primary weakness is **CWE-352 Cross-Site Request Forgery (CSRF)**, as indicated by the \"rootcause\" key phrase and the CVE Reference Links summary. This allows a malicious actor to force higher privileged users to execute unwanted actions. The secondary weakness is **CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')**, as indicated by the \"weakness\" key phrase and the impact described in the CVE Reference Links summary. The **CWE-352 Cross-Site Request Forgery (CSRF)** vulnerability enables the **CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')** vulnerability.\n\nThe retriever results also support **CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')** as the top combined result and **CWE-352 Cross-Site Request Forgery (CSRF)** as the second. Both are at the appropriate Base and Compound level of abstraction.\n\nCWEs considered but not used:\n*   CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection'): While Injection is mentioned in the OWASP Top 10, the specific vulnerability is Stored XSS, not SQL Injection.\n*   CWE-918: Server-Side Request Forgery (SSRF): Not directly relevant to the vulnerability description.\n*   CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag: Not directly relevant to the vulnerability description.\n*   CWE-601: URL Redirection to Untrusted Site ('Open Redirect'): Not directly relevant to the vulnerability description.\n*   CWE-116: Improper Encoding or Escaping of Output: The vulnerability is specifically Stored XSS, so CWE-79 is more accurate.\n*   CWE-1275: Sensitive Cookie with Improper SameSite Attribute: Not directly relevant to the vulnerability description.\n*   CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS): CWE-79 is a better fit as it is more general.\n*   CWE-494: Download of Code Without Integrity Check: Not directly relevant to the vulnerability description.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-352 | Cross-Site Request Forgery (CSRF) | 0.9 | Compound | Allowed | Primary CWE. The root cause is the lack of CSRF protection. |\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 0.8 | Base | Allowed | Secondary CWE. The CSRF allows for stored XSS. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.85\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe vulnerability is a combination of **CWE-352 Cross-Site Request Forgery (CSRF)** and **CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')**. The **CWE-352 Cross-Site Request Forgery (CSRF)** enables the **CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')** vulnerability.\n\n```mermaid\ngraph TD\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    \n    cwe352 -->|CANPRECEDE| cwe79\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe352 primary\n    class cwe79 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a **missing CSRF protection** (**CWE-352 Cross-Site Request Forgery (CSRF)**). This allows an attacker to inject malicious input without proper validation, leading to **stored XSS** (**CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')**).\n\n## Summary of Analysis\nThe primary weakness is **CWE-352 Cross-Site Request Forgery (CSRF)**, as indicated by the \"rootcause\" key phrase and the CVE Reference Links summary. This allows a malicious actor to force higher privileged users to execute unwanted actions. The secondary weakness is **CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')**, as indicated by the \"weakness\" key phrase and the impact described in the CVE Reference Links summary. The **CWE-352 Cross-Site Request Forgery (CSRF)** vulnerability enables the **CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')** vulnerability.\n\nThe retriever results also support **CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')** as the top combined result and **CWE-352 Cross-Site Request Forgery (CSRF)** as the second. Both are at the appropriate Base and Compound level of abstraction.\n\nCWEs considered but not used:\n*   CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection'): While Injection is mentioned in the OWASP Top 10, the specific vulnerability is Stored XSS, not SQL Injection.\n*   CWE-918: Server-Side Request Forgery (SSRF): Not directly relevant to the vulnerability description.\n*   CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag: Not directly relevant to the vulnerability description.\n*   CWE-601: URL Redirection to Untrusted Site ('Open Redirect'): Not directly relevant to the vulnerability description.\n*   CWE-116: Improper Encoding or Escaping of Output: The vulnerability is specifically Stored XSS, so CWE-79 is more accurate.\n*   CWE-1275: Sensitive Cookie with Improper SameSite Attribute: Not directly relevant to the vulnerability description.\n*   CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS): CWE-79 is a better fit as it is more general.\n*   CWE-494: Download of Code Without Integrity Check: Not directly relevant to the vulnerability description.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-89:**\n- 89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')) - ROOT\n\n\n**Chain starting from CWE-116:**\n- 116 (Improper Encoding or Escaping of Output) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: XSS",
        "match_reason": "term_in_phrase_whole_phrase"
      },
      "similarity": 800.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse"
      },
      "similarity": 228.4781321571304
    },
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "sparse"
      },
      "similarity": 189.1750390904155
    },
    {
      "metadata": {
        "doc_id": "918",
        "name": "Server-Side Request Forgery (SSRF)",
        "source": "sparse"
      },
      "similarity": 183.61494144845938
    },
    {
      "metadata": {
        "doc_id": "1004",
        "name": "Sensitive Cookie Without 'HttpOnly' Flag",
        "source": "sparse"
      },
      "similarity": 169.6506831716625
    },
    {
      "metadata": {
        "doc_id": "601",
        "name": "URL Redirection to Untrusted Site ('Open Redirect')",
        "source": "sparse"
      },
      "similarity": 164.49794178650816
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse"
      },
      "similarity": 151.33957180737934
    },
    {
      "metadata": {
        "doc_id": "1275",
        "name": "Sensitive Cookie with Improper SameSite Attribute",
        "source": "sparse"
      },
      "similarity": 150.6562496029627
    },
    {
      "metadata": {
        "doc_id": "80",
        "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
        "type": "Variant",
        "original_content": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as \"<\", \">\", and \"&\" that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.",
        "keyphrase_source": "weakness:stored XSS",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse",
            "graph"
          ],
          "retriever_count": 3,
          "normalized_scores": {
            "dense": 0.5477648971716722,
            "sparse": 147.54991171721136,
            "graph": 1.5318960542413906
          }
        }
      },
      "similarity": 0.5477648971716722
    },
    {
      "doc_id": "494",
      "text": "CWE-494: Download of Code Without Integrity Check",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "494",
        "name": "Download of Code Without Integrity Check",
        "type": "base",
        "original_content": "CWE-494: Download of Code Without Integrity Check",
        "relationships": [
          {
            "source_id": "494",
            "target_id": "79",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "494",
            "target_id": "669",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "494",
            "target_id": "669",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "494",
            "target_id": "345",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "494",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "669",
            "target_id": "494",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "345",
            "target_id": "494",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "79",
                  "494",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "79"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "79",
                  "494",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_forward",
              "source": "79"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-89",
      "CWE-116",
      "CWE-494",
      "CWE-80",
      "CWE-601",
      "CWE-79",
      "CWE-1004",
      "CWE-352",
      "CWE-1275",
      "CWE-918"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}