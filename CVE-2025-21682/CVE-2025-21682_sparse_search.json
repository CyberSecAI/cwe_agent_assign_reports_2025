{
  "retriever": "sparse",
  "query": "In the Linux kernel, the following vulnerability has been resolved eth bnxt always recalculate features after XDP clearing, fix null-deref Recalculate features when XDP is detached. Before # ip li set dev eth0 xdp obj xdp_dummy.bpf.o sec xdp # ip li set dev eth0 xdp off # ethtool -k eth0 | grep gro rx-gro-hw off [requested on] After # ip li set dev eth0 xdp obj xdp_dummy.bpf.o sec xdp # ip li set dev eth0 xdp off # ethtool -k eth0 | grep gro rx-gro-hw on The fact that HW-GRO doesnt get re-enabled automatically is just a minor annoyance. The real issue is that the features will randomly come back during another reconfiguration which just happens to invoke netdev_update_features(). The driver doesnt handle reconfiguring two things at a time very robustly. Starting with commit 98ba1d931f61 (bnxt_en Fix RSS logic in __bnxt_reserve_rings()) we only reconfigure the RSS hash table if the effective number of Rx rings has changed. If HW-GRO is enabled effective number of rings is 2x what user sees. So if we are in the bad state, with HW-GRO re-enablement pending after XDP off, and we lower the rings by / 2 - the HW-GRO rings doing 2x and the ethtool -L doing / 2 may cancel each other out, and the if (old_rx_rings != bp->hw_resc.resv_rx_rings && condition in __bnxt_reserve_rings() will be false. The RSS map wont get updated, and well crash with",
  "keyphrases": {
    "weakness": [
      "null dereference"
    ]
  },
  "timestamp": "2025-07-14 09:43:04",
  "cve_id": "CVE-2025-21682",
  "result_count": 10,
  "results": [
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "score": 800.0,
      "search_source": "alternate_term_match"
    },
    {
      "cwe_id": "789",
      "name": "Memory Allocation with Excessive Size Value",
      "score": 794.0748741486246,
      "search_source": "weakness:null dereference"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 781.6431165168184,
      "search_source": "weakness:null dereference"
    },
    {
      "cwe_id": "193",
      "name": "Off-by-one Error",
      "score": 697.8536796976279,
      "search_source": "weakness:null dereference"
    },
    {
      "cwe_id": "400",
      "name": "Uncontrolled Resource Consumption",
      "score": 692.237272167758,
      "search_source": "weakness:null dereference"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 690.9327939116378,
      "search_source": "weakness:null dereference"
    },
    {
      "cwe_id": "909",
      "name": "Missing Initialization of Resource",
      "score": 689.8630825950039,
      "search_source": "weakness:null dereference"
    },
    {
      "cwe_id": "617",
      "name": "Reachable Assertion",
      "score": 679.9176257137584,
      "search_source": "weakness:null dereference"
    },
    {
      "cwe_id": "674",
      "name": "Uncontrolled Recursion",
      "score": 672.0315680698777,
      "search_source": "weakness:null dereference"
    },
    {
      "cwe_id": "1423",
      "name": "Exposure of Sensitive Information caused by Shared Microarchitectural Predictor State that Influences Transient Execution",
      "score": 661.41756753258,
      "search_source": "weakness:null dereference"
    }
  ]
}