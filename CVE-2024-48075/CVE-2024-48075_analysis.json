{
  "cve_id": "CVE-2024-48075",
  "description": "A **Heap buffer overflow** in the server-site handshake implementation in Real Time Logic SharkSSL from 09/09/24 and earlier allows a remote attacker to trigger a Denial-of-Service via a malformed TLS Client Key Exchange message.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "Heap buffer overflow",
    "impact": "Denial-of-Service",
    "vector": "malformed TLS Client Key Exchange message",
    "attacker": "remote attacker",
    "product": "Real Time Logic SharkSSL",
    "version": "09/09/24 and earlier",
    "component": "server-site handshake implementation"
  },
  "reference_content": "Based on the provided content, here's an analysis of CVE-2024-48075:\n\n**Root cause of vulnerability:**\n- The vulnerability is located in the TLSv1.2 server-side handshake implementation of the SharkSSL library when processing a fragmented TLS Client Key Exchange message.\n- Specifically, the `SharkSslCon_decrypt` function manipulates a pointer (`registeredevent`) based on data within the received TLS Client Key Exchange message.\n\n**Weaknesses/vulnerabilities present:**\n- **Remote Buffer Overflow:** The code calculates an offset using a 16-bit integer (`backupdata`) derived from the attacker-controlled message data, and adds this offset to the `registeredevent` pointer. This can result in the pointer pointing to an address outside of allocated memory.\n- **Unvalidated Pointer Arithmetic:** The value of `backupdata` is derived from the attacker-controlled TLS Client Key Exchange message, and this value is directly used to advance the `registeredevent` pointer without proper bounds checking.\n\n**Impact of exploitation:**\n- **Denial of Service (DoS):** By sending a crafted TLS Client Key Exchange message, an attacker can trigger the buffer overflow, causing a segmentation fault and terminating the SharkSSL TLS server process, preventing legitimate clients from connecting.\n- **Potential Information Leak:**  The controlled manipulation of the `registeredevent` pointer could potentially be used to leak information from unallocated memory regions.\n- **Potential Remote Code Execution:** With further exploitation, by utilizing write instructions to the manipulated pointer, it may be possible to achieve remote code execution\n\n**Attack vectors:**\n- Sending a specially crafted, fragmented TLS Client Key Exchange message to the vulnerable SharkSSL TLS server.\n\n**Required attacker capabilities/position:**\n- The attacker needs to be able to communicate with the vulnerable SharkSSL TLS server. This likely means the attacker needs to be on the network as the server.\n- The attacker needs to have the ability to send TLS messages to the server.\n- The attacker needs knowledge of the specific structure of TLS handshake messages to trigger the vulnerability by crafting the Client Key Exchange message with specific parameters.\n\n**Additional Details:**\n- The vulnerability was discovered using code-coverage based fuzzing with AddressSanitizer.\n- The code snippets provided in the appendix show the exact lines where the pointer arithmetic and subsequent dereference occur. The vulnerability is triggered at `SharkSSL.c:21319`.\n- The fix was introduced in commit 7045f6f254060640ff77eef2027f108fcc20e2f2. The fix adds checks to the code to prevent manipulating pointer `registeredevent` out of the intended memory region.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID  | CWE Name                                                                         | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :------------------------------------------------------------------------------- | :--------- | :-------------------- | :------------------------------ | :------------------------------ |\n| CWE-122 | Heap-based Buffer Overflow                                                       | 0.9        | Variant               | Primary                         | Allowed                       |\n| CWE-787 | Out-of-bounds Write                                                              | 0.8        | Base                  | Secondary                       | Allowed                       |\n| CWE-119 | Improper Restriction of Operations within the Bounds of a Memory Buffer         | 0.7        | Class                 | Secondary                       | Discouraged                   |\n| CWE-190 | Integer Overflow or Wraparound                                                   | 0.6        | Base                  | Secondary                       | Allowed                       |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is a Heap-based Buffer Overflow (CWE-122), a variant of the more general Improper Restriction of Operations within the Bounds of a Memory Buffer (CWE-119). The overflow leads to an Out-of-bounds Write (CWE-787). An Integer Overflow (CWE-190) can precede the buffer overflow if the size calculation is based on attacker-controlled data and not properly validated. The relationships informed the choice of CWE-122 as the most specific root cause.\n\n```mermaid\ngraph TD\n    cwe122[\"CWE-122: Heap-based Buffer Overflow\"]\n    cwe787[\"CWE-787: Out-of-bounds Write\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\"]\n    cwe190[\"CWE-190: Integer Overflow or Wraparound\"]\n\n    cwe122 -->|CHILDOF| cwe119\n    cwe787 -->|CANFOLLOW| cwe122\n    cwe190 -->|CANPRECEDE| cwe122\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe122 primary\n    class cwe787,cwe119,cwe190 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with potentially **CWE-190 Integer Overflow or Wraparound** due to a calculation based on attacker-controlled input. This leads to **CWE-122 Heap-based Buffer Overflow** when writing data to the heap without proper bounds checking. The overflow then results in **CWE-787 Out-of-bounds Write**, potentially causing a denial of service, information leak, or remote code execution. The root cause is the heap-based buffer overflow, stemming from the **improper** calculation and validation of the buffer size before copying data.\n\n## Summary of Analysis\nThe analysis is strongly based on the provided evidence, particularly the \"CVE Reference Links Content Summary\" which describes the **heap buffer overflow** due to **unvalidated pointer arithmetic** using attacker-controlled data. This aligns directly with CWE-122. The retriever results and graph relationships support this choice, with CWE-122 being a variant of CWE-119 and potentially preceded by CWE-190. Other CWEs were considered but ultimately deemed less specific or relevant. The selection of CWE-122 provides the optimal level of specificity, accurately reflecting the nature of the vulnerability as a heap-based buffer overflow.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-131: Incorrect Calculation of Buffer Size\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-824: Access of Uninitialized Pointer\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product accesses or uses a pointer that has not been initialized.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-193: Off-by-one Error\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nA product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-208: Observable Timing Discrepancy\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nTwo separate operations in a product require different amounts of time to complete, in a way that is observable to an actor and reveals security-relevant information about the state of the product, such as whether a particular operation was successful or not.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-617: Reachable Assertion\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-789: Memory Allocation with Excessive Size Value\n**Abstraction Level**: Variant\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-755: Improper Handling of Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product does not handle or incorrectly handles an exceptional condition.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n## CWE-125: Out-of-bounds Read\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product reads data past the end, or before the beginning, of the intended buffer.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-346: Origin Validation Error\n**Abstraction Level**: Class\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product does not properly verify that the source of data or communication is valid.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-130: Improper Handling of Length Parameter Inconsistency\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product parses a formatted message or structure, but it does not handle or incorrectly handles a length field that is inconsistent with the actual length of the associated data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-190: Integer Overflow or Wraparound\n**Abstraction Level**: Base\n**Similarity Score**: 1187.06\n**Source**: sparse\n\n**Description**:\nThe product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value",
  "analysis_with_relationships": "# Summary\n| CWE ID  | CWE Name                                                                         | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :------------------------------------------------------------------------------- | :--------- | :-------------------- | :------------------------------ | :------------------------------ |\n| CWE-122 | Heap-based Buffer Overflow                                                       | 0.9        | Variant               | Primary                         | Allowed                       |\n| CWE-787 | Out-of-bounds Write                                                              | 0.8        | Base                  | Secondary                       | Allowed                       |\n| CWE-119 | Improper Restriction of Operations within the Bounds of a Memory Buffer         | 0.7        | Class                 | Secondary                       | Discouraged                   |\n| CWE-190 | Integer Overflow or Wraparound                                                   | 0.6        | Base                  | Secondary                       | Allowed                       |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is a Heap-based Buffer Overflow (CWE-122), a variant of the more general Improper Restriction of Operations within the Bounds of a Memory Buffer (CWE-119). The overflow leads to an Out-of-bounds Write (CWE-787). An Integer Overflow (CWE-190) can precede the buffer overflow if the size calculation is based on attacker-controlled data and not properly validated. The relationships informed the choice of CWE-122 as the most specific root cause.\n\n```mermaid\ngraph TD\n    cwe122[\"CWE-122: Heap-based Buffer Overflow\"]\n    cwe787[\"CWE-787: Out-of-bounds Write\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\"]\n    cwe190[\"CWE-190: Integer Overflow or Wraparound\"]\n\n    cwe122 -->|CHILDOF| cwe119\n    cwe787 -->|CANFOLLOW| cwe122\n    cwe190 -->|CANPRECEDE| cwe122\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe122 primary\n    class cwe787,cwe119,cwe190 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with potentially **CWE-190 Integer Overflow or Wraparound** due to a calculation based on attacker-controlled input. This leads to **CWE-122 Heap-based Buffer Overflow** when writing data to the heap without proper bounds checking. The overflow then results in **CWE-787 Out-of-bounds Write**, potentially causing a denial of service, information leak, or remote code execution. The root cause is the heap-based buffer overflow, stemming from the **improper** calculation and validation of the buffer size before copying data.\n\n## Summary of Analysis\nThe analysis is strongly based on the provided evidence, particularly the \"CVE Reference Links Content Summary\" which describes the **heap buffer overflow** due to **unvalidated pointer arithmetic** using attacker-controlled data. This aligns directly with CWE-122. The retriever results and graph relationships support this choice, with CWE-122 being a variant of CWE-119 and potentially preceded by CWE-190. Other CWEs were considered but ultimately deemed less specific or relevant. The selection of CWE-122 provides the optimal level of specificity, accurately reflecting the nature of the vulnerability as a heap-based buffer overflow.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-131: Incorrect Calculation of Buffer Size\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-824: Access of Uninitialized Pointer\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product accesses or uses a pointer that has not been initialized.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-193: Off-by-one Error\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nA product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-208: Observable Timing Discrepancy\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nTwo separate operations in a product require different amounts of time to complete, in a way that is observable to an actor and reveals security-relevant information about the state of the product, such as whether a particular operation was successful or not.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-617: Reachable Assertion\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-789: Memory Allocation with Excessive Size Value\n**Abstraction Level**: Variant\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-755: Improper Handling of Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product does not handle or incorrectly handles an exceptional condition.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n## CWE-125: Out-of-bounds Read\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product reads data past the end, or before the beginning, of the intended buffer.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-346: Origin Validation Error\n**Abstraction Level**: Class\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product does not properly verify that the source of data or communication is valid.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-130: Improper Handling of Length Parameter Inconsistency\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product parses a formatted message or structure, but it does not handle or incorrectly handles a length field that is inconsistent with the actual length of the associated data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-190: Integer Overflow or Wraparound\n**Abstraction Level**: Base\n**Similarity Score**: 1187.06\n**Source**: sparse\n\n**Description**:\nThe product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-130:**\n- 130 (Improper Handling of Length Parameter Inconsistency) - ROOT\n\n\n**Chain starting from CWE-346:**\n- 346 (Origin Validation Error) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "119",
        "name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Buffer Overflow",
        "match_reason": "term_in_phrase_whole_phrase"
      },
      "similarity": 800.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "190",
        "name": "Integer Overflow or Wraparound",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Overflow",
        "match_reason": "term_in_phrase_whole_phrase"
      },
      "similarity": 800.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "122",
        "name": "Heap-based Buffer Overflow",
        "source": "sparse"
      },
      "similarity": 267.75318798611136
    },
    {
      "metadata": {
        "doc_id": "193",
        "name": "Off-by-one Error",
        "source": "sparse"
      },
      "similarity": 256.9172923291472
    },
    {
      "metadata": {
        "doc_id": "1284",
        "name": "Improper Validation of Specified Quantity in Input",
        "source": "sparse"
      },
      "similarity": 248.40485258074935
    },
    {
      "metadata": {
        "doc_id": "126",
        "name": "Buffer Over-read",
        "source": "sparse"
      },
      "similarity": 241.1044858149497
    },
    {
      "metadata": {
        "doc_id": "125",
        "name": "Out-of-bounds Read",
        "source": "sparse"
      },
      "similarity": 238.30388920148883
    },
    {
      "metadata": {
        "doc_id": "131",
        "name": "Incorrect Calculation of Buffer Size",
        "source": "sparse"
      },
      "similarity": 235.666471312976
    },
    {
      "metadata": {
        "doc_id": "121",
        "name": "Stack-based Buffer Overflow",
        "type": "Variant",
        "original_content": "A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).",
        "keyphrase_source": "weakness:Heap buffer overflow",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5623259863218809,
            "sparse": 227.12351098081214
          }
        }
      },
      "similarity": 0.5623259863218809
    },
    {
      "doc_id": "128",
      "text": "CWE-128: Wrap-around Error",
      "score": 2.9120000000000004,
      "metadata": {
        "doc_id": "128",
        "name": "Wrap-around Error",
        "type": "base",
        "original_content": "CWE-128: Wrap-around Error",
        "relationships": [
          {
            "source_id": "128",
            "target_id": "190",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "128",
            "target_id": "119",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "128",
            "target_id": "682",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "682",
            "target_id": "128",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "119",
            "target_id": "128",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "119",
                  "128",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "119"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "119",
                  "128",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "119"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "128",
                  "119",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "119"
            },
            "peer_relationship": {
              "path": [
                [
                  "128",
                  "190",
                  "PEEROF"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "190"
            }
          }
        },
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.9120000000000004
          }
        }
      },
      "similarity": 2.9120000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-130",
      "CWE-346",
      "CWE-125",
      "CWE-131",
      "CWE-787",
      "CWE-193",
      "CWE-190",
      "CWE-208",
      "CWE-122",
      "CWE-755",
      "CWE-824",
      "CWE-119",
      "CWE-789",
      "CWE-617"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}