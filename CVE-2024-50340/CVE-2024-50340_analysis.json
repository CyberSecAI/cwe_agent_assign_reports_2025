{
  "cve_id": "CVE-2024-50340",
  "description": "symfony/runtime is a module for the Symphony PHP framework which enables decoupling PHP applications from global state. When the `register_argv_argc` php directive is set to `on` , and users call any URL with a special crafted query string, they are able to change the environment or debug mode used by the kernel when handling the request. As of versions 5.4.46, 6.4.14, and 7.1.7 the `SymfonyRuntime` now ignores the `argv` values for non-SAPI PHP runtimes. All users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "",
    "impact": "change the environment or debug mode used by the kernel",
    "vector": "special crafted query string",
    "attacker": "",
    "product": "symfony/runtime",
    "version": "5.4.46, 6.4.14, and 7.1.7",
    "component": ""
  },
  "reference_content": "Based on the provided content, here's a breakdown of the vulnerability:\n\n**Root Cause:**\n\n- The vulnerability arises when the PHP directive `register_argc_argv` is set to `on`.\n- When this directive is enabled, the `SymfonyRuntime` component incorrectly uses values from the `argv` array (command-line arguments), even when the application is not running in a command-line interface (CLI) environment, like when handling web requests.\n\n**Weaknesses/Vulnerabilities:**\n\n- **Incorrect use of `argv`:** The `SymfonyRuntime` component was designed to use command-line arguments (`argv`) to determine the environment or debug mode, but it was not correctly distinguishing between CLI and non-CLI SAPI environments. When `register_argc_argv` is on, the server populates $_SERVER['argv'] even in a non-CLI context.\n- **Environment manipulation:**  By crafting a special query string, attackers can influence the `argv` array. Because the runtime uses `argv` to determine which environment or debug mode to use, this allows attackers to change the environment/debug mode of the kernel.\n\n**Impact of Exploitation:**\n\n- **Environment Modification:** Attackers can change the application's environment or debug mode by using a specially crafted query string. This can have a range of consequences, including:\n    - Potential exposure of sensitive information.\n    - Altering application behavior in unintended ways.\n    - Facilitating further attacks by placing the application in a debug state or specific environment where further vulnerabilities might be present.\n\n**Attack Vectors:**\n\n- **Network-based:** The attack is performed via HTTP requests by sending a specifically crafted query string in the URL.\n\n**Required Attacker Capabilities/Position:**\n\n- **No authentication required:** The attacker does not need any special privileges to perform the attack.\n- **Network access:** The attacker needs to be able to send HTTP requests to the vulnerable application.\n- **Knowledge of the vulnerability**: the attacker must be aware of the vulnerability and craft their query string accordingly.\n\n**Additional Details:**\n\n- The fix implemented in the commit `a77b308c3f179ed7c8a8bc295f82b2d6ee3493fa` addresses the issue by ensuring that `SymfonyRuntime` ignores `argv` values for non-CLI SAPIs.\n- The provided CVSS score is 7.3, which is considered high severity.\n\n**Summary of the fix:**\n\nThe fix modifies the SymfonyRuntime.php file to check if the request contains GET parameters. If it does, and if `register_argc_argv` is enabled, an exception is thrown to prevent CLI parameters from being interpreted in a web context, which is an unsafe operation. Additionally, the fix modifies the kernel test file to construct the test kernel with both the environment and a variable value so the test can more accurately represent the expected kernel creation.\n\nThis vulnerability highlights a case where a feature intended for CLI use was improperly extended to non-CLI environments, leading to a security risk.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-473 | PHP External Variable Modification | 0.8 | Variant | Allowed | Primary CWE - Root Cause  |\n| CWE-20 | Improper Input Validation | 0.6 | Class | Allowed | Secondary Candidate - Input Validation |\n| CWE-201 | Insertion of Sensitive Information Into Sent Data | 0.5 | Base | Allowed | Secondary Candidate - Impact |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.7\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary CWE, CWE-473 (PHP External Variable Modification), is a variant of CWE-471 (Modification of Assumed-Immutable Data). The attack involves modifying external variables, which leads to the program behaving unexpectedly. The secondary CWE, CWE-20 (Improper Input Validation), is a parent of CWE-473, indicating a lack of proper validation on the external variable being modified. CWE-201 (Insertion of Sensitive Information Into Sent Data) is a potential impact, as modifying the environment or debug mode can lead to sensitive information being exposed. The abstraction levels guided the selection, focusing on the most specific (Variant) for the root cause and broader (Class, Base) for related weaknesses and potential impact.\n\n```mermaid\ngraph TD\n    cwe473[\"CWE-473: PHP External Variable Modification\"]\n    cwe471[\"CWE-471: Modification of Assumed-Immutable Data\"]\n    cwe20[\"CWE-20: Improper Input Validation\"]\n    cwe201[\"CWE-201: Insertion of Sensitive Information Into Sent Data\"]\n    \n    cwe473 -->|CHILDOF| cwe471\n    cwe473 -->|CANPRECEDE| cwe20\n    cwe471 -->|REQUIRES| cwe20\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe473 primary\n    class cwe20,cwe201 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with the **improper use of external variables** (CWE-473), where a specially crafted query string is used to modify the environment or debug mode of the kernel. A prerequisite to this is **improper input validation** (CWE-20) of these external variables from the HTTP request. The modification can then lead to **insertion of sensitive information into sent data** (CWE-201), as changing the debug mode might expose sensitive information.\n\n## Summary of Analysis\nThe analysis is primarily based on the provided evidence, which clearly points to the modification of external PHP variables via a crafted query string. The core issue is that the `SymfonyRuntime` component incorrectly uses command-line arguments (`argv`) in non-CLI SAPI environments when the `register_argc_argv` PHP directive is enabled, leading to the ability to manipulate the environment or debug mode.\n\nThe graph relationships helped to identify potential related weaknesses. CWE-473 is a variant of CWE-471, further emphasizing the modification aspect. CWE-20 was considered due to the **lack of input validation** on the external variables.\n\nCWE-473 is the optimal level of specificity, as it directly describes the **PHP external variable modification** vulnerability. Other considered CWEs, such as CWE-79 (Cross-site Scripting) and CWE-78 (OS Command Injection), were deemed less relevant because the vulnerability does not involve direct injection of code or scripting in the traditional sense. The vulnerability is about manipulating PHP variables that influence the application's behavior.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-88: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n**Description**:\nThe product constructs a string for a command to be executed by a separate component\nin another control sphere, but it does not properly delimit the\nintended arguments, options, or switches within that command string.\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-918: Server-Side Request Forgery (SSRF)\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n**Description**:\nThe web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n**Description**:\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-138: Improper Neutralization of Special Elements\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n**Description**:\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n## CWE-502: Deserialization of Untrusted Data\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n**Description**:\nThe product deserializes untrusted data without sufficiently ensuring that the resulting data will be valid.\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-425: Direct Request ('Forced Browsing')\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n**Description**:\nThe web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n**Description**:\nThe product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-472: External Control of Assumed-Immutable Web Parameter\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n**Description**:\nThe web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-1286: Improper Validation of Syntactic Correctness of Input\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n**Description**:\nThe product receives input that is expected to be well-formed - i.e., to comply with a certain syntax - but it does not validate or incorrectly validates that the input complies",
  "analysis_with_relationships": "# Summary\n\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-473 | PHP External Variable Modification | 0.8 | Variant | Allowed | Primary CWE - Root Cause  |\n| CWE-20 | Improper Input Validation | 0.6 | Class | Allowed | Secondary Candidate - Input Validation |\n| CWE-201 | Insertion of Sensitive Information Into Sent Data | 0.5 | Base | Allowed | Secondary Candidate - Impact |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.7\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary CWE, CWE-473 (PHP External Variable Modification), is a variant of CWE-471 (Modification of Assumed-Immutable Data). The attack involves modifying external variables, which leads to the program behaving unexpectedly. The secondary CWE, CWE-20 (Improper Input Validation), is a parent of CWE-473, indicating a lack of proper validation on the external variable being modified. CWE-201 (Insertion of Sensitive Information Into Sent Data) is a potential impact, as modifying the environment or debug mode can lead to sensitive information being exposed. The abstraction levels guided the selection, focusing on the most specific (Variant) for the root cause and broader (Class, Base) for related weaknesses and potential impact.\n\n```mermaid\ngraph TD\n    cwe473[\"CWE-473: PHP External Variable Modification\"]\n    cwe471[\"CWE-471: Modification of Assumed-Immutable Data\"]\n    cwe20[\"CWE-20: Improper Input Validation\"]\n    cwe201[\"CWE-201: Insertion of Sensitive Information Into Sent Data\"]\n    \n    cwe473 -->|CHILDOF| cwe471\n    cwe473 -->|CANPRECEDE| cwe20\n    cwe471 -->|REQUIRES| cwe20\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe473 primary\n    class cwe20,cwe201 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with the **improper use of external variables** (CWE-473), where a specially crafted query string is used to modify the environment or debug mode of the kernel. A prerequisite to this is **improper input validation** (CWE-20) of these external variables from the HTTP request. The modification can then lead to **insertion of sensitive information into sent data** (CWE-201), as changing the debug mode might expose sensitive information.\n\n## Summary of Analysis\nThe analysis is primarily based on the provided evidence, which clearly points to the modification of external PHP variables via a crafted query string. The core issue is that the `SymfonyRuntime` component incorrectly uses command-line arguments (`argv`) in non-CLI SAPI environments when the `register_argc_argv` PHP directive is enabled, leading to the ability to manipulate the environment or debug mode.\n\nThe graph relationships helped to identify potential related weaknesses. CWE-473 is a variant of CWE-471, further emphasizing the modification aspect. CWE-20 was considered due to the **lack of input validation** on the external variables.\n\nCWE-473 is the optimal level of specificity, as it directly describes the **PHP external variable modification** vulnerability. Other considered CWEs, such as CWE-79 (Cross-site Scripting) and CWE-78 (OS Command Injection), were deemed less relevant because the vulnerability does not involve direct injection of code or scripting in the traditional sense. The vulnerability is about manipulating PHP variables that influence the application's behavior.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-88: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n**Description**:\nThe product constructs a string for a command to be executed by a separate component\nin another control sphere, but it does not properly delimit the\nintended arguments, options, or switches within that command string.\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-918: Server-Side Request Forgery (SSRF)\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n**Description**:\nThe web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n**Description**:\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-138: Improper Neutralization of Special Elements\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n**Description**:\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n## CWE-502: Deserialization of Untrusted Data\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n**Description**:\nThe product deserializes untrusted data without sufficiently ensuring that the resulting data will be valid.\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-425: Direct Request ('Forced Browsing')\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n**Description**:\nThe web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n**Description**:\nThe product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-472: External Control of Assumed-Immutable Web Parameter\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n**Description**:\nThe web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-1286: Improper Validation of Syntactic Correctness of Input\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n**Description**:\nThe product receives input that is expected to be well-formed - i.e., to comply with a certain syntax - but it does not validate or incorrectly validates that the input complies\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-471:**\n- 471 (Modification of Assumed-Immutable Data (MAID)) - ROOT\n\n\n**Chain starting from CWE-502:**\n- 502 (Deserialization of Untrusted Data) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 177.89235737691243
    },
    {
      "metadata": {
        "doc_id": "94",
        "name": "Improper Control of Generation of Code ('Code Injection')",
        "source": "sparse"
      },
      "similarity": 177.3057023752158
    },
    {
      "metadata": {
        "doc_id": "1336",
        "name": "Improper Neutralization of Special Elements Used in a Template Engine",
        "source": "sparse"
      },
      "similarity": 175.3076759013403
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse"
      },
      "similarity": 175.25059934813703
    },
    {
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "source": "sparse"
      },
      "similarity": 173.910166083366
    },
    {
      "metadata": {
        "doc_id": "502",
        "name": "Deserialization of Untrusted Data",
        "source": "sparse"
      },
      "similarity": 171.2121801266892
    },
    {
      "metadata": {
        "doc_id": "1236",
        "name": "Improper Neutralization of Formula Elements in a CSV File",
        "source": "sparse"
      },
      "similarity": 170.3996929899436
    },
    {
      "metadata": {
        "doc_id": "639",
        "name": "Authorization Bypass Through User-Controlled Key",
        "source": "sparse"
      },
      "similarity": 169.29074530825008
    },
    {
      "metadata": {
        "doc_id": "473",
        "name": "PHP External Variable Modification",
        "type": "Variant",
        "original_content": "A PHP application does not properly protect against the modification of variables from external sources, such as query parameters or cookies. This can expose the application to numerous weaknesses that would not exist otherwise.",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.4030279222341391,
            "graph": 2.1254545762521166
          }
        }
      },
      "similarity": 0.4030279222341391
    },
    {
      "doc_id": "79",
      "text": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
      "score": 2.4700000000000006,
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "type": "base",
        "original_content": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "relationships": [
          {
            "source_id": "79",
            "target_id": "87",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "86",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "85",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "84",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "83",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "81",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "80",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "113",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "352",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "494",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "74",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "79",
            "target_id": "74",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "87",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "86",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "85",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "84",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "83",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "81",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "80",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "74",
            "target_id": "79",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "494",
            "target_id": "79",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "79",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "113",
            "target_id": "79",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 0.8,
          "sequence_path": 0.8,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "98",
                  "184",
                  "CANFOLLOW"
                ],
                [
                  "184",
                  "79",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "relationship_chain",
              "source": "98"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "98",
                  "184",
                  "CANFOLLOW"
                ],
                [
                  "184",
                  "79",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "vulnerability_sequence_forward",
              "source": "98"
            },
            "peer_relationship": {
              "path": [
                [
                  "79",
                  "352",
                  "PEEROF"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "352"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.4700000000000006
          }
        }
      },
      "similarity": 2.4700000000000006
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-471",
      "CWE-502",
      "CWE-116",
      "CWE-88",
      "CWE-212",
      "CWE-79",
      "CWE-201",
      "CWE-1286",
      "CWE-472",
      "CWE-473",
      "CWE-74",
      "CWE-78",
      "CWE-20",
      "CWE-138",
      "CWE-918",
      "CWE-425"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}