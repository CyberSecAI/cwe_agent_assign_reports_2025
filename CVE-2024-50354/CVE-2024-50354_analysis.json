{
  "cve_id": "CVE-2024-50354",
  "description": "gnark is a fast zk-SNARK library that offers a high-level API to design circuits. In gnark 0.11.0 and earlier, **deserialization of Groth16 verification keys allocate excessive memory**, consuming a lot of resources and triggering a crash with the error fatal error runtime out of memory.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "deserialization of Groth16 verification keys allocate excessive memory",
    "impact": "crash",
    "vector": "",
    "attacker": "",
    "product": "gnark",
    "version": "0.11.0 and earlier",
    "component": ""
  },
  "reference_content": "Based on the provided information, here's an analysis of the vulnerability described in the content, which relates to CVE-2024-50354:\n\n**Root Cause of Vulnerability:**\n\n- The vulnerability stems from how the `VerifyingKey` (and potentially `ProvingKey`) is deserialized in the `gnark` library, specifically within the `ReadFrom` function in `backend/groth16/<curve>/marshal.go`.\n- During deserialization, the code reads a value `nbCommitments` from the input file, which specifies the number of expected Pedersen verification keys. This value is then directly used to allocate a slice in memory.\n- A malicious actor can craft an input file with an extremely large `nbCommitments` value, leading to an attempt to allocate an excessive amount of memory.\n\n**Weaknesses/Vulnerabilities Present:**\n\n- **Unvalidated Input:** The `nbCommitments` value is read from the input file without any validation or bounds checking.\n- **Unbounded Memory Allocation:** The code attempts to allocate a slice of size `nbCommitments` without any checks on the size, leading to a potential out-of-memory condition.\n- **Lack of Input Sanitization:** The vulnerability lies in the lack of sanitization of the input data, specifically the number of commitments.\n\n**Impact of Exploitation:**\n\n- **Denial of Service (DoS):** A successful exploit leads to an out-of-memory error, causing the program to crash or become unresponsive, effectively resulting in a denial of service for the prover and verifier.\n- **Resource Exhaustion:** Exploiting the vulnerability can consume excessive memory resources, impacting system stability.\n\n**Attack Vectors:**\n\n- **Malicious Input Files:** An attacker can craft malicious input files (such as a `VerifyingKey` file) containing a large `nbCommitments` value.\n- **Deserialization:** The vulnerability is triggered during the deserialization process of these crafted files.\n\n**Required Attacker Capabilities/Position:**\n\n- **Ability to Provide Input Files:** The attacker needs to be able to provide a maliciously crafted `VerifyingKey` or `ProvingKey` file to the vulnerable component.\n- **No Special Privileges Needed:** The vulnerability can be triggered without requiring any special privileges, however, the attack vector is local.\n\n**Additional Details:**\n\n- The vulnerability was found via fuzzing.\n- The issue affects multiple elliptic curve implementations within the `gnark` library including `bn254`, `bls12-377`, and others.\n- The fix involves reading the commitment keys from the input file to check how many there actually are, instead of relying on the number of expected commitments and allocating a slice beforehand. This bounds the in-memory key size to the serialized size.\n\nThe provided content includes a detailed description of the vulnerability, its root cause, impact, and the fix that was implemented. It also includes the CVSS v3 base metrics which reflects that the attack vector is local with low complexity and privileges, no user interaction, and results in a high availability impact.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-789 | Memory Allocation with Excessive Size Value | 0.9 | Variant | Allowed | Primary CWE: The vulnerability stems from allocating memory based on an untrusted, large size value without proper validation. |\n| CWE-770 | Allocation of Resources Without Limits or Throttling | 0.7 | Base | Allowed | Secondary CWE: The system allocates resources without any limits on the number of resources that can be allocated, exacerbating the issue. |\n| CWE-400 | Uncontrolled Resource Consumption | 0.6 | Class | Discouraged | Secondary CWE: The vulnerability leads to uncontrolled consumption of memory resources, causing a denial-of-service condition. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is **CWE-789: Memory Allocation with Excessive Size Value**, where the program allocates memory based on an untrusted size. This is related to **CWE-770: Allocation of Resources Without Limits or Throttling**, as the allocation happens without proper limits, which in turn can lead to **CWE-400: Uncontrolled Resource Consumption** causing a denial-of-service. CWE-789 is a child of CWE-770. CWE-400 is a parent of CWE-770. Selecting the variant level CWE-789 provides a more specific identification of the weakness than the base or class level CWEs.\n\n```mermaid\ngraph TD\n    cwe400[\"CWE-400: Uncontrolled Resource Consumption\"]\n    cwe770[\"CWE-770: Allocation of Resources Without Limits or Throttling\"]\n    cwe789[\"CWE-789: Memory Allocation with Excessive Size Value\"]\n    \n    cwe789 -->|CHILDOF| cwe770\n    cwe770 -->|CHILDOF| cwe400\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe789 primary\n    class cwe770 secondary\n    class cwe400 tertiary\n```\n\n## Vulnerability Chain\n1.  The initial flaw is the **lack of validation** of the `nbCommitments` value read from the input file.\n2.  This leads to **CWE-789: Memory Allocation with Excessive Size Value**, where the code attempts to allocate an excessive amount of memory based on the unvalidated input.\n3.  Since the allocation is done without any limits or throttling (**CWE-770: Allocation of Resources Without Limits or Throttling**), the excessive memory allocation leads to **CWE-400: Uncontrolled Resource Consumption**.\n4.  The ultimate impact is a **crash** due to an out-of-memory error, resulting in a denial of service.\n\n## Summary of Analysis\nThe analysis indicates that the primary vulnerability is due to the **deserialization of Groth16 verification keys allocating excessive memory**. The root cause is the **lack of validation of the `nbCommitments` value**, which is then used to allocate memory. The evidence from the CVE Reference Links Content Summary clearly states that the `nbCommitments` value is read from the input file without any validation or bounds checking, leading to an unbounded memory allocation. This directly aligns with the description of **CWE-789: Memory Allocation with Excessive Size Value**, making it the most appropriate primary CWE. The lack of limits on resource allocation contributes to **CWE-770: Allocation of Resources Without Limits or Throttling**. The resulting uncontrolled resource consumption and crash align with **CWE-400: Uncontrolled Resource Consumption**, making it a secondary candidate.\n\nThe retriever results also support the selection of CWE-789, CWE-770, and CWE-400, further strengthening the confidence in this assessment.\n\nOther CWEs Considered but Not Used:\n\n*   **CWE-502: Deserialization of Untrusted Data:** While deserialization is involved, the core issue is the excessive memory allocation based on an unvalidated size, making CWE-789 more specific.\n*   **CWE-1284: Improper Validation of Specified Quantity in Input:** While there's improper validation, the direct consequence is excessive memory allocation, making CWE-789 more relevant as the primary cause.\n*   **CWE-125: Out-of-bounds Read:** This is not applicable as the issue is with memory allocation size, not reading out of bounds.\n*   **CWE-190: Integer Overflow or Wraparound:** This is not applicable because there is no integer overflow mentioned in the description.\n*   **CWE-131: Incorrect Calculation of Buffer Size:** This is not applicable as the issue is with the size value received from the input, not the calculation of the buffer itself.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-789 | Memory Allocation with Excessive Size Value | 0.9 | Variant | Allowed | Primary CWE: The vulnerability stems from allocating memory based on an untrusted, large size value without proper validation. |\n| CWE-770 | Allocation of Resources Without Limits or Throttling | 0.7 | Base | Allowed | Secondary CWE: The system allocates resources without any limits on the number of resources that can be allocated, exacerbating the issue. |\n| CWE-400 | Uncontrolled Resource Consumption | 0.6 | Class | Discouraged | Secondary CWE: The vulnerability leads to uncontrolled consumption of memory resources, causing a denial-of-service condition. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is **CWE-789: Memory Allocation with Excessive Size Value**, where the program allocates memory based on an untrusted size. This is related to **CWE-770: Allocation of Resources Without Limits or Throttling**, as the allocation happens without proper limits, which in turn can lead to **CWE-400: Uncontrolled Resource Consumption** causing a denial-of-service. CWE-789 is a child of CWE-770. CWE-400 is a parent of CWE-770. Selecting the variant level CWE-789 provides a more specific identification of the weakness than the base or class level CWEs.\n\n```mermaid\ngraph TD\n    cwe400[\"CWE-400: Uncontrolled Resource Consumption\"]\n    cwe770[\"CWE-770: Allocation of Resources Without Limits or Throttling\"]\n    cwe789[\"CWE-789: Memory Allocation with Excessive Size Value\"]\n    \n    cwe789 -->|CHILDOF| cwe770\n    cwe770 -->|CHILDOF| cwe400\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe789 primary\n    class cwe770 secondary\n    class cwe400 tertiary\n```\n\n## Vulnerability Chain\n1.  The initial flaw is the **lack of validation** of the `nbCommitments` value read from the input file.\n2.  This leads to **CWE-789: Memory Allocation with Excessive Size Value**, where the code attempts to allocate an excessive amount of memory based on the unvalidated input.\n3.  Since the allocation is done without any limits or throttling (**CWE-770: Allocation of Resources Without Limits or Throttling**), the excessive memory allocation leads to **CWE-400: Uncontrolled Resource Consumption**.\n4.  The ultimate impact is a **crash** due to an out-of-memory error, resulting in a denial of service.\n\n## Summary of Analysis\nThe analysis indicates that the primary vulnerability is due to the **deserialization of Groth16 verification keys allocating excessive memory**. The root cause is the **lack of validation of the `nbCommitments` value**, which is then used to allocate memory. The evidence from the CVE Reference Links Content Summary clearly states that the `nbCommitments` value is read from the input file without any validation or bounds checking, leading to an unbounded memory allocation. This directly aligns with the description of **CWE-789: Memory Allocation with Excessive Size Value**, making it the most appropriate primary CWE. The lack of limits on resource allocation contributes to **CWE-770: Allocation of Resources Without Limits or Throttling**. The resulting uncontrolled resource consumption and crash align with **CWE-400: Uncontrolled Resource Consumption**, making it a secondary candidate.\n\nThe retriever results also support the selection of CWE-789, CWE-770, and CWE-400, further strengthening the confidence in this assessment.\n\nOther CWEs Considered but Not Used:\n\n*   **CWE-502: Deserialization of Untrusted Data:** While deserialization is involved, the core issue is the excessive memory allocation based on an unvalidated size, making CWE-789 more specific.\n*   **CWE-1284: Improper Validation of Specified Quantity in Input:** While there's improper validation, the direct consequence is excessive memory allocation, making CWE-789 more relevant as the primary cause.\n*   **CWE-125: Out-of-bounds Read:** This is not applicable as the issue is with memory allocation size, not reading out of bounds.\n*   **CWE-190: Integer Overflow or Wraparound:** This is not applicable because there is no integer overflow mentioned in the description.\n*   **CWE-131: Incorrect Calculation of Buffer Size:** This is not applicable as the issue is with the size value received from the input, not the calculation of the buffer itself.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-502:**\n- 502 (Deserialization of Untrusted Data) - ROOT\n\n\n**Chain starting from CWE-1284:**\n- 1284 (Improper Validation of Specified Quantity in Input) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "789",
        "name": "Memory Allocation with Excessive Size Value",
        "source": "sparse"
      },
      "similarity": 313.9324064881512
    },
    {
      "metadata": {
        "doc_id": "502",
        "name": "Deserialization of Untrusted Data",
        "source": "sparse"
      },
      "similarity": 265.13897063158663
    },
    {
      "metadata": {
        "doc_id": "755",
        "name": "Improper Handling of Exceptional Conditions",
        "source": "sparse"
      },
      "similarity": 256.6252228138411
    },
    {
      "metadata": {
        "doc_id": "770",
        "name": "Allocation of Resources Without Limits or Throttling",
        "source": "sparse"
      },
      "similarity": 256.58470524222065
    },
    {
      "metadata": {
        "doc_id": "1284",
        "name": "Improper Validation of Specified Quantity in Input",
        "source": "sparse"
      },
      "similarity": 254.63040658019094
    },
    {
      "metadata": {
        "doc_id": "125",
        "name": "Out-of-bounds Read",
        "source": "sparse"
      },
      "similarity": 253.13565899333148
    },
    {
      "metadata": {
        "doc_id": "400",
        "name": "Uncontrolled Resource Consumption",
        "source": "sparse"
      },
      "similarity": 251.62696392561838
    },
    {
      "metadata": {
        "doc_id": "834",
        "name": "Excessive Iteration",
        "source": "sparse"
      },
      "similarity": 249.3140462440565
    },
    {
      "metadata": {
        "doc_id": "194",
        "name": "Unexpected Sign Extension",
        "type": "Variant",
        "original_content": "The product performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses.",
        "keyphrase_source": "weakness:deserialization of Groth16 verification keys allocate excessive memory",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.3562534019788204
          }
        }
      },
      "similarity": 0.3562534019788204
    },
    {
      "doc_id": "1325",
      "text": "The product manages a group of objects or resources and performs a separate memory allocation for each object, but it does not properly limit the total amount of memory that is consumed by all of the combined objects.",
      "score": 0.3912042737487755,
      "metadata": {
        "doc_id": "1325",
        "name": "Improperly Controlled Sequential Memory Allocation",
        "type": "Base",
        "extended_description": "\n\nWhile the product might limit the amount of memory that is allocated in a single operation for a single object (such as a malloc of an array), if an attacker can cause multiple objects to be allocated in separate operations, then this might cause higher total memory consumption than the developer intended, leading to a denial of service.\n",
        "alternate_terms": [
          "Stack Exhaustion"
        ],
        "original_content": "The product manages a group of objects or resources and performs a separate memory allocation for each object, but it does not properly limit the total amount of memory that is consumed by all of the combined objects.",
        "relationships": [
          {
            "source_id": "1325",
            "target_id": "476",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1325",
            "target_id": "789",
            "label": "PEEROF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1325",
            "target_id": "770",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "770",
            "target_id": "1325",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "476",
            "target_id": "1325",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "source": "graph",
        "sources": [
          "vector",
          "graph"
        ],
        "vector_score": 0.3912042737487755,
        "graph_score": 4.3888,
        "score_components": {
          "relationship_chain": 0.7,
          "explicit_mention": 1.0,
          "abstraction_path": 0.9,
          "sequence_path": 0.7200000000000001,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "1325",
                  "789",
                  "PEEROF"
                ]
              ],
              "score": 0.7,
              "type": "relationship_chain",
              "source": "789"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "770",
                  "1325",
                  "PARENTOF"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "abstraction_path_down",
              "source": "770"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "789",
                  "476",
                  "CANPRECEDE"
                ],
                [
                  "476",
                  "1325",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "vulnerability_sequence_forward",
              "source": "789"
            },
            "peer_relationship": {
              "path": [
                [
                  "1325",
                  "789",
                  "PEEROF"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "789"
            }
          }
        },
        "is_explicit": true,
        "abstraction_level": "base",
        "position": "after",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.32568328438349325,
            "graph": 2.7897617094995097
          }
        }
      },
      "similarity": 2.7897617094995097
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-502",
      "CWE-1284",
      "CWE-400",
      "CWE-770",
      "CWE-125",
      "CWE-131",
      "CWE-190",
      "CWE-789"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}