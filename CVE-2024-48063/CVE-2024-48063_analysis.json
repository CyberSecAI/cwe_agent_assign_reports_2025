{
  "cve_id": "CVE-2024-48063",
  "description": "In PyTorch <=2.4.1, the RemoteModule has Deserialization RCE. NOTE this is disputed by multiple parties because this is intended behavior in PyTorch distributed computing.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "deserialization",
    "impact": [
      "RCE",
      "remote code execution"
    ],
    "vector": "",
    "attacker": "",
    "product": "PyTorch",
    "version": "<= 2.4.1",
    "component": "RemoteModule"
  },
  "reference_content": "Based on the provided information, here's an analysis of CVE-2024-48063:\n\n**Root Cause of Vulnerability:**\nThe vulnerability stems from the `rpc.remote` function within PyTorch's distributed RPC framework. This function is susceptible to serialization attacks, which can lead to command injection and remote code execution.\n\n**Weaknesses/Vulnerabilities Present:**\n- **Command Injection (CWE-77):**  The core weakness is the ability to inject malicious commands into the RPC framework via crafted payloads.\n- **Insecure Deserialization:** The vulnerability arises from the lack of proper sanitization or validation of data being deserialized when using `rpc.remote`. This enables attackers to send malicious serialized data that can be executed when deserialized on the receiving end.\n\n**Impact of Exploitation:**\n- **Remote Code Execution (RCE):** Successful exploitation allows an attacker to execute arbitrary code on the affected nodes within a distributed system.\n- **Full System Compromise:** The attacker gains control over the targeted system with the privileges of the user running the PyTorch application.\n\n**Attack Vectors:**\n- **Network-Based:** Attackers can exploit the `rpc.remote` function over the network, sending malicious payloads to vulnerable nodes.\n- **Malicious Payloads:** The attack is facilitated by crafting and delivering malicious serialized data to the vulnerable `rpc.remote` function.\n\n**Required Attacker Capabilities/Position:**\n- **Network Access:** The attacker must have network access to the PyTorch distributed system to send malicious RPC requests.\n- **Understanding of PyTorch RPC:** The attacker needs to understand how the `rpc.remote` function and the underlying serialization mechanisms work to craft a successful attack.\n- **Ability to Send RPC Requests:**  The attacker needs the capability to send data to the PyTorch distributed RPC framework.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-502 | Deserialization of Untrusted Data | 1.0 | Base | Primary | Allowed |\n| CWE-94 | Improper Control of Generation of Code ('Code Injection') | 0.7 | Base | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.85\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship that influenced my decision was the parent-child relationship between CWE-94 and CWE-502. CWE-502, Deserialization of Untrusted Data, can lead to CWE-94, Improper Control of Generation of Code ('Code Injection'), if the deserialized data contains malicious code. The vulnerability description explicitly mentions \"deserialization RCE\" and the \"ability to inject malicious commands,\" strengthening this connection. The abstraction levels were also considered, preferring the Base level for both CWEs as they best represent the root cause and its immediate consequence.\n\n```mermaid\ngraph TD\n    cwe502[\"CWE-502: Deserialization of Untrusted Data\"]\n    cwe94[\"CWE-94: Improper Control of Generation of Code ('Code Injection')\"]\n\n    cwe94 -->|CANFOLLOW| cwe502\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe502 primary\n    class cwe94 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **deserialization** of untrusted data (CWE-502). This **deserialization** leads to the improper control of code generation, resulting in code injection (CWE-94). The final impact is remote code execution (RCE).\n\nCWE-502 (Root Cause) -> CWE-94 (Impact) -> RCE\n\n## Summary of Analysis\nThe initial analysis focused on identifying the root cause and immediate impact of the vulnerability. The vulnerability description clearly indicates that the issue stems from **deserialization** and results in remote code execution. The \"CVE Reference Links Content Summary\" section provides strong evidence, stating that the vulnerability arises from \"lack of proper sanitization or validation of data being deserialized\" and the \"ability to inject malicious commands.\"\n\nBased on this evidence, CWE-502 (Deserialization of Untrusted Data) was selected as the primary CWE because it directly addresses the root cause. The description of CWE-502, \"The product deserializes untrusted data without sufficiently ensuring that the resulting data will be valid,\" aligns perfectly with the vulnerability description.\n\nCWE-94 (Improper Control of Generation of Code ('Code Injection')) was selected as a secondary CWE, as it represents the immediate consequence of the **deserialization** vulnerability. The evidence for this comes from the CVE summary, which mentions \"command injection\" and the ability to \"execute arbitrary code.\"\n\nThe relationship between CWE-502 and CWE-94 further supports this classification. Deserialization of untrusted data can directly lead to code injection if the deserialized data contains malicious code.\n\nThe retriever results also support this classification, with CWE-502 being the top-ranked CWE. Other CWEs were considered but ultimately not selected because they did not accurately represent the root cause or immediate impact of the vulnerability. For example, CWE-22 (Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')) was considered due to the term \"path,\" but it doesn't accurately reflect the **deserialization** nature of the vulnerability.\n\nThe final decision is based on a combination of direct evidence from the vulnerability description, relationship analysis, and retriever results. The selected CWEs are at the optimal level of specificity, representing both the root cause and immediate impact of the vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-502: Deserialization of Untrusted Data\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product deserializes untrusted data without sufficiently ensuring that the resulting data will be valid.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**How the Vulnerability Details Match:** The vulnerability description explicitly states that the issue is related to **deserialization** and that the product does not sufficiently ensure the validity of the resulting data.\n**Security Implications and Potential Impact:** This can lead to remote code execution (RCE), as the attacker can inject malicious code during **deserialization**.\n**Parent-Child Relationships or Chain Patterns:** This can lead to code injection (CWE-94).\n**Whether the Weakness is Primary or Secondary in the Vulnerability:** This is the primary weakness.\n**How the Official MITRE Mapping Guidance Influenced Your Decision:** The usage is \"Allowed\" and the rationale mentions that it is at the Base level of abstraction, which is preferred.\n\n## CWE-94: Improper Control of Generation of Code ('Code Injection')\n**Abstraction Level**: base\n**Similarity Score**: 2.28\n**Source**: graph\n\n**Description**:\nCWE-94: Improper Control of Generation of Code ('Code Injection')\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This entry is frequently misused for vulnerabilities with a technical impact of \"code execution,\" which does not by itself indicate a root cause weakness, since dozens of weaknesses can enable code execution.\n\n**How the Vulnerability Details Match:** The \"CVE Reference Links Content Summary\" states that there is \"command injection\".\n**Security Implications and Potential Impact:** The potential impact is that an attacker can run arbitrary code on the system.\n**Parent-Child Relationships or Chain Patterns:** This can be a result of CWE-502.\n**Whether the Weakness is Primary or Secondary in the Vulnerability:** This is a secondary weakness and a consequence of the primary weakness CWE-502.\n**How the Official MITRE Mapping Guidance Influenced Your Decision:** The usage is \"Allowed-with-Review\", indicating that this entry needs to be considered carefully. Since the root cause is due to deserialization of untrusted data (CWE-502), and that leads to code injection (CWE-94), the usage of Allowed-with-Review is appropriate in this situation.\n\n### Other CWEs Considered but Not Used\n\n*   **CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')**: While related to code execution, it's more specific to 'eval' calls, which wasn't specified in the vulnerability description. Therefore, it was considered less accurate than CWE-94.\n*   **CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')**: This was considered due to the possibility of file path manipulation during deserialization, but the core issue is the deserialization itself, not path traversal.\n*   **CWE-73: External Control of File Name or Path**: Similar to CWE-22, this relates to file path manipulation, but the root cause remains **deserialization**.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-502 | Deserialization of Untrusted Data | 1.0 | Base | Primary | Allowed |\n| CWE-94 | Improper Control of Generation of Code ('Code Injection') | 0.7 | Base | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.85\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship that influenced my decision was the parent-child relationship between CWE-94 and CWE-502. CWE-502, Deserialization of Untrusted Data, can lead to CWE-94, Improper Control of Generation of Code ('Code Injection'), if the deserialized data contains malicious code. The vulnerability description explicitly mentions \"deserialization RCE\" and the \"ability to inject malicious commands,\" strengthening this connection. The abstraction levels were also considered, preferring the Base level for both CWEs as they best represent the root cause and its immediate consequence.\n\n```mermaid\ngraph TD\n    cwe502[\"CWE-502: Deserialization of Untrusted Data\"]\n    cwe94[\"CWE-94: Improper Control of Generation of Code ('Code Injection')\"]\n\n    cwe94 -->|CANFOLLOW| cwe502\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe502 primary\n    class cwe94 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **deserialization** of untrusted data (CWE-502). This **deserialization** leads to the improper control of code generation, resulting in code injection (CWE-94). The final impact is remote code execution (RCE).\n\nCWE-502 (Root Cause) -> CWE-94 (Impact) -> RCE\n\n## Summary of Analysis\nThe initial analysis focused on identifying the root cause and immediate impact of the vulnerability. The vulnerability description clearly indicates that the issue stems from **deserialization** and results in remote code execution. The \"CVE Reference Links Content Summary\" section provides strong evidence, stating that the vulnerability arises from \"lack of proper sanitization or validation of data being deserialized\" and the \"ability to inject malicious commands.\"\n\nBased on this evidence, CWE-502 (Deserialization of Untrusted Data) was selected as the primary CWE because it directly addresses the root cause. The description of CWE-502, \"The product deserializes untrusted data without sufficiently ensuring that the resulting data will be valid,\" aligns perfectly with the vulnerability description.\n\nCWE-94 (Improper Control of Generation of Code ('Code Injection')) was selected as a secondary CWE, as it represents the immediate consequence of the **deserialization** vulnerability. The evidence for this comes from the CVE summary, which mentions \"command injection\" and the ability to \"execute arbitrary code.\"\n\nThe relationship between CWE-502 and CWE-94 further supports this classification. Deserialization of untrusted data can directly lead to code injection if the deserialized data contains malicious code.\n\nThe retriever results also support this classification, with CWE-502 being the top-ranked CWE. Other CWEs were considered but ultimately not selected because they did not accurately represent the root cause or immediate impact of the vulnerability. For example, CWE-22 (Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')) was considered due to the term \"path,\" but it doesn't accurately reflect the **deserialization** nature of the vulnerability.\n\nThe final decision is based on a combination of direct evidence from the vulnerability description, relationship analysis, and retriever results. The selected CWEs are at the optimal level of specificity, representing both the root cause and immediate impact of the vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-502: Deserialization of Untrusted Data\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product deserializes untrusted data without sufficiently ensuring that the resulting data will be valid.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**How the Vulnerability Details Match:** The vulnerability description explicitly states that the issue is related to **deserialization** and that the product does not sufficiently ensure the validity of the resulting data.\n**Security Implications and Potential Impact:** This can lead to remote code execution (RCE), as the attacker can inject malicious code during **deserialization**.\n**Parent-Child Relationships or Chain Patterns:** This can lead to code injection (CWE-94).\n**Whether the Weakness is Primary or Secondary in the Vulnerability:** This is the primary weakness.\n**How the Official MITRE Mapping Guidance Influenced Your Decision:** The usage is \"Allowed\" and the rationale mentions that it is at the Base level of abstraction, which is preferred.\n\n## CWE-94: Improper Control of Generation of Code ('Code Injection')\n**Abstraction Level**: base\n**Similarity Score**: 2.28\n**Source**: graph\n\n**Description**:\nCWE-94: Improper Control of Generation of Code ('Code Injection')\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This entry is frequently misused for vulnerabilities with a technical impact of \"code execution,\" which does not by itself indicate a root cause weakness, since dozens of weaknesses can enable code execution.\n\n**How the Vulnerability Details Match:** The \"CVE Reference Links Content Summary\" states that there is \"command injection\".\n**Security Implications and Potential Impact:** The potential impact is that an attacker can run arbitrary code on the system.\n**Parent-Child Relationships or Chain Patterns:** This can be a result of CWE-502.\n**Whether the Weakness is Primary or Secondary in the Vulnerability:** This is a secondary weakness and a consequence of the primary weakness CWE-502.\n**How the Official MITRE Mapping Guidance Influenced Your Decision:** The usage is \"Allowed-with-Review\", indicating that this entry needs to be considered carefully. Since the root cause is due to deserialization of untrusted data (CWE-502), and that leads to code injection (CWE-94), the usage of Allowed-with-Review is appropriate in this situation.\n\n### Other CWEs Considered but Not Used\n\n*   **CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')**: While related to code execution, it's more specific to 'eval' calls, which wasn't specified in the vulnerability description. Therefore, it was considered less accurate than CWE-94.\n*   **CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')**: This was considered due to the possibility of file path manipulation during deserialization, but the core issue is the deserialization itself, not path traversal.\n*   **CWE-73: External Control of File Name or Path**: Similar to CWE-22, this relates to file path manipulation, but the root cause remains **deserialization**.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-502:**\n- 502 (Deserialization of Untrusted Data) - ROOT\n\n\n**Chain starting from CWE-94:**\n- 94 (Improper Control of Generation of Code ('Code Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "502",
        "name": "Deserialization of Untrusted Data",
        "source": "sparse"
      },
      "similarity": 166.32557719804112
    },
    {
      "metadata": {
        "doc_id": "95",
        "name": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
        "source": "sparse"
      },
      "similarity": 148.0870151074504
    },
    {
      "metadata": {
        "doc_id": "915",
        "name": "Improperly Controlled Modification of Dynamically-Determined Object Attributes",
        "source": "sparse"
      },
      "similarity": 130.19982348239722
    },
    {
      "metadata": {
        "doc_id": "917",
        "name": "Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')",
        "source": "sparse"
      },
      "similarity": 129.3699261102346
    },
    {
      "metadata": {
        "doc_id": "22",
        "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
        "source": "sparse"
      },
      "similarity": 119.90521235753529
    },
    {
      "metadata": {
        "doc_id": "918",
        "name": "Server-Side Request Forgery (SSRF)",
        "source": "sparse"
      },
      "similarity": 116.92494471798423
    },
    {
      "metadata": {
        "doc_id": "941",
        "name": "Incorrectly Specified Destination in a Communication Channel",
        "source": "sparse"
      },
      "similarity": 114.75550289387033
    },
    {
      "metadata": {
        "doc_id": "183",
        "name": "Permissive List of Allowed Inputs",
        "source": "sparse"
      },
      "similarity": 113.93931512865261
    },
    {
      "metadata": {
        "doc_id": "294",
        "name": "Authentication Bypass by Capture-replay",
        "type": "Base",
        "original_content": "A capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).",
        "keyphrase_source": "weakness:deserialization",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.44557141820263535,
            "graph": 1.4797599885893908
          }
        }
      },
      "similarity": 0.44557141820263535
    },
    {
      "doc_id": "73",
      "text": "CWE-73: External Control of File Name or Path",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "73",
        "name": "External Control of File Name or Path",
        "type": "base",
        "original_content": "CWE-73: External Control of File Name or Path",
        "relationships": [
          {
            "source_id": "73",
            "target_id": "114",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "59",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "434",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "41",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "22",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "20",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "700"
            }
          },
          {
            "source_id": "73",
            "target_id": "610",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "642",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "99",
            "target_id": "73",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "642",
            "target_id": "73",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "610",
            "target_id": "73",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "59",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "41",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "22",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "20",
            "target_id": "73",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "700"
            }
          },
          {
            "source_id": "114",
            "target_id": "73",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "22",
                  "73",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "22"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "22",
                  "73",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "22"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "73",
                  "22",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "22"
            }
          }
        },
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-502",
      "CWE-94",
      "CWE-22",
      "CWE-73",
      "CWE-95"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}