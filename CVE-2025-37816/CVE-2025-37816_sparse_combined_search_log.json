{
  "method": "sparse_combined",
  "query": "In the Linux kernel, the following vulnerability has been resolved mei vsc Fix fortify-panic caused by invalid counted_by() use gcc 15 honors the __counted_by(len) attribute on vsc_tp_packet.buf[] and the vsc-tp.c code is using this in a wrong way. len does not contain the available size in the buffer, it contains the actual packet length *without* the crc. So as soon as vsc_tp_xfer() tries to add the crc to buf[] the fortify-panic handler gets triggered [ 80.842193] memcpy detected buffer overflow 4 byte write of buffer size 0 [ 80.842243] WARNING CPU 4 PID 272 at lib/string_helpers.c1032 __fortify_report+0x45/0x50 ... [ 80.843175] __fortify_panic+0x9/0xb [ 80.843186] vsc_tp_xfer.cold+0x67/0x67 [mei_vsc_hw] [ 80.843210] ? seqcount_lockdep_reader_access.constprop.0+0x82/0x90 [ 80.843229] ? lockdep_hardirqs_on+0x7c/0x110 [ 80.843250] mei_vsc_hw_start+0x98/0x120 [mei_vsc] [ 80.843270] mei_reset+0x11d/0x420 [mei] The easiest fix would be to just drop the counted-by but with the exception of the ack buffer in vsc_tp_xfer_helper() which only contains enough room for the packet-header, all other uses of vsc_tp_packet always use a buffer of VSC_TP_MAX_XFER_SIZE bytes for the packet. Instead of just dropping the counted-by, split the vsc_tp_packet struct definition into a header and a full-packet definition and use a fixed size buf[] in the packet definition, this way fortify-source buffer overrun checking still works when enabled.",
  "keyphrases": {
    "rootcause": [
      "invalid counted_by() use"
    ],
    "weakness": [
      "buffer overflow"
    ]
  },
  "timestamp": "2025-07-14T21:29:09.919246",
  "results_count": 11,
  "results_summary": [
    {
      "doc_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 1028.5230382574307
    },
    {
      "doc_id": "119",
      "name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
      "score": 1000.0
    },
    {
      "doc_id": "190",
      "name": "Integer Overflow or Wraparound",
      "score": 966.9294989062098
    },
    {
      "doc_id": "125",
      "name": "Out-of-bounds Read",
      "score": 942.2703999362686
    },
    {
      "doc_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "score": 925.7776997565384
    }
  ]
}