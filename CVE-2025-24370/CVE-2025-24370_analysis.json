{
  "cve_id": "CVE-2025-24370",
  "description": "Django-Unicorn adds modern reactive component functionality to Django templates. Affected versions of Django-Unicorn are vulnerable to **python class pollution vulnerability**. The vulnerability arises from the core functionality `set_property_value`, which can be remotely triggered by users by crafting appropriate component requests and feeding in values of second and third parameter to the vulnerable function, leading to arbitrary changes to the python runtime status. With this finding at least five ways of vulnerability exploitation have been observed, stably resulting in Cross-Site Scripting (XSS), Denial of Service (DoS), and Authentication Bypass attacks in almost every Django-Unicorn-based application. This issue has been addressed in version 0.62.0 and all users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "key_phrases": {
    "component": "set_property_value",
    "rootcause": "python class pollution vulnerability",
    "vector": "crafting appropriate component requests and feeding in values of second and third parameter to the vulnerable function",
    "weakness": "",
    "product": "Django-Unicorn",
    "impact": "arbitrary changes to the python runtime status, Authentication Bypass, Cross-Site Scripting (XSS), Denial of Service (DoS)",
    "attacker": "users",
    "version": ""
  },
  "reference_content": "Here's an analysis of the provided content, focusing on CVE-2025-24370:\n\n**github.com_0d89c993_20250624_191048.html**\n\n*   **Relevance:** YES\n*   **Extraction:**\n\n    *   **Root cause of vulnerability:** The `set_property_value` function in `django-unicorn/views/action_parsers/utils.py` is vulnerable. It allows modification of a property value of an object based on user-supplied parameters (`property_name` and `property_value`) via component requests. The vulnerability arises because this function fails to adequately prevent attackers from traversing to other objects in the python runtime using \"magic attributes\" such as `__init__.__globals__`.\n    *   **Weaknesses/vulnerabilities present:** Python class pollution vulnerability, categorized as CWE-915.\n    *   **Impact of exploitation:**\n        *   Cross-Site Scripting (XSS)\n        *   Denial of Service (DoS)\n        *   Authentication Bypass\n        *   Remote Code Execution (RCE)\n    *   **Attack vectors:**\n        *   Crafting `syncInput` requests to the `/unicorn/message/COMPONENT_NAME` endpoint with a payload that sets the `name` and `value` parameters of the `syncInput` action to exploit the `set_property_value` function. Specifically, the attacker controls the \"dotted path\" (`property_name`) to modify specific objects and their attributes and the assigned value (`property_value`).\n    *   **Required attacker capabilities/position:** Remote user, able to send crafted HTTP POST requests to a Django-Unicorn application.\n    *   **Mitigation or fix:** The provided content details a patch. The patch involves adding a check within the `set_property_value` function. The check filters out any property names, that start and end with \"__\".\n\n    *   **More detail than official CVE description:** YES, the content provides a detailed technical analysis of the vulnerability, including the vulnerable code, exploitation techniques (with Proofs of Concept), and potential impact.\n    *   **Proof of Concepts (PoCs):** The content provides multiple PoCs, including:\n        *   Reflected XSS by overwriting `bs4.dammit.EntitySubstitution.CHARACTER_TO_XML_ENTITY.<`.\n        *   Stored XSS by overwriting `django_unicorn.settings.MORPHER_NAMES`, `django_unicorn.settings.DEFAULT_MORPHER_NAME` and `django.utils.html._json_script_escapes`.\n        *   Stored XSS by overwriting `django.views.defaults.ERROR_PAGE_TEMPLATE`.\n        *   Authentication bypass by overwriting `django.template.backends.django.settings.SECRET_KEY`.\n        *   Denial of Service by overwriting `timed` decorator method.\n        *   Remote Code Execution (RCE) by polluting `location_cache` and OS environment variable `BROWSER`.\n\n**github.com_5eaf16a7_20250624_191045.html**\n\n*   **Relevance:** YES\n*   **Extraction:**\n    *   **Details:** This content is a commit that applies a patch to mitigate the class pollution vulnerability in the `django-unicorn/views/action_parsers/utils.py` file.\n    *   **Mitigation:** The patch adds a check in the `set_property_value` function to prevent modification of properties starting and ending with \"__\". This prevents attackers from using magic attributes.\n    *   **More detail than official CVE description:** YES, the content details the specific code changes that fix the vulnerability.\n\n**www.offensiveweb.com_c6597170_20250624_210650.html**\n\n*   **Relevance:** NOINFO",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-915 | Improperly Controlled Modification of Dynamically-Determined Object Attributes | 0.9 | Base | Allowed | Primary CWE: Root cause of the vulnerability is that user-controlled input is used to modify object attributes.|\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 0.7 | Base | Allowed | Secondary CWE: One of the impacts of the root cause is XSS. |\n| CWE-471 | Modification of Assumed-Immutable Data (MAID) | 0.6 | Base | Allowed | Secondary CWE: The vulnerability involves modification of data that is assumed to be immutable. |\n| CWE-288 | Authentication Bypass Using an Alternate Path or Channel | 0.5 | Base | Allowed | Secondary CWE: The vulnerability leads to authentication bypass. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-915, which describes the root cause of the vulnerability where user-controlled input can modify object attributes. This can lead to several other weaknesses like CWE-79 (XSS), CWE-471 (MAID), and CWE-288 (Authentication Bypass). CWE-915 is a base-level CWE, making it a suitable choice for describing the core weakness.\n\n```mermaid\ngraph TD\n    cwe915[\"CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    cwe471[\"CWE-471: Modification of Assumed-Immutable Data (MAID)\"]\n    cwe288[\"CWE-288: Authentication Bypass Using an Alternate Path or Channel\"]\n\n    cwe79 -- CANFOLLOW --> cwe915\n    cwe471 -- CANFOLLOW --> cwe915\n    cwe288 -- CANFOLLOW --> cwe915\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe915 primary\n    class cwe79,cwe471,cwe288 secondary\n```\n\n## Vulnerability Chain\n1.  **Root Cause:** CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes. The `set_property_value` function allows modification of object attributes based on user-supplied input without proper validation.\n2.  **Impact 1:** CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'). By modifying certain object attributes, an attacker can inject malicious scripts into web pages.\n3.  **Impact 2:** CWE-471: Modification of Assumed-Immutable Data (MAID). The vulnerability allows modification of data that should be immutable, leading to unexpected behavior.\n4.  **Impact 3:** CWE-288: Authentication Bypass Using an Alternate Path or Channel. By modifying authentication-related attributes, an attacker can bypass authentication mechanisms.\n\n## Summary of Analysis\nThe initial analysis correctly identifies the root cause as a **python class pollution vulnerability** in the `set_property_value` function, which aligns with CWE-915. The vulnerability chain starts with the improper modification of object attributes (CWE-915) and leads to various impacts such as XSS (CWE-79), Modification of Assumed-Immutable Data (CWE-471), and Authentication Bypass (CWE-288). The evidence from the CVE reference links confirms the root cause and impacts. The patch mitigates the vulnerability by preventing modification of properties starting and ending with \"__\", further supporting the chosen CWEs.\n\nThe selection of CWE-915 as the primary CWE is appropriate because it directly addresses the **root cause** of the vulnerability, where user-controlled input is used to modify object attributes without proper validation.\n\nThe evidence supporting CWE-915 comes from:\n*   \"**Root cause of vulnerability:** The `set_property_value` function in `django-unicorn/views/action_parsers/utils.py` is vulnerable. It allows modification of a property value of an object based on user-supplied parameters (`property_name` and `property_value`) via component requests. The vulnerability arises because this function fails to adequately prevent attackers from traversing to other objects in the python runtime using \"magic attributes\" such as `__init__.__globals__`.\"\n*   \"**Weaknesses/vulnerabilities present:** Python class pollution vulnerability, categorized as CWE-915.\"\n\nThe graph relationships influenced the final selection by highlighting the potential chain of weaknesses that stem from the root cause. The selected CWEs are at the optimal level of specificity, with CWE-915 accurately representing the core weakness and the other CWEs representing the potential impacts.\n\n**CWEs Considered But Not Used:**\n\n*   CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') - While injection is an impact, this CWE is too high level and doesn't capture the specific nature of the object attribute modification.\n*   CWE-94: Improper Control of Generation of Code ('Code Injection') - While RCE is a possible impact, the vulnerability doesn't directly involve code injection but rather object attribute modification.\n*   CWE-285: Improper Authorization - While the vulnerability can lead to authentication bypass, this is an indirect result of object attribute modification, not a direct authorization issue.\n*   CWE-502: Deserialization of Untrusted Data - Deserialization is not part of the attack vector.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-915 | Improperly Controlled Modification of Dynamically-Determined Object Attributes | 0.9 | Base | Allowed | Primary CWE: Root cause of the vulnerability is that user-controlled input is used to modify object attributes.|\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 0.7 | Base | Allowed | Secondary CWE: One of the impacts of the root cause is XSS. |\n| CWE-471 | Modification of Assumed-Immutable Data (MAID) | 0.6 | Base | Allowed | Secondary CWE: The vulnerability involves modification of data that is assumed to be immutable. |\n| CWE-288 | Authentication Bypass Using an Alternate Path or Channel | 0.5 | Base | Allowed | Secondary CWE: The vulnerability leads to authentication bypass. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-915, which describes the root cause of the vulnerability where user-controlled input can modify object attributes. This can lead to several other weaknesses like CWE-79 (XSS), CWE-471 (MAID), and CWE-288 (Authentication Bypass). CWE-915 is a base-level CWE, making it a suitable choice for describing the core weakness.\n\n```mermaid\ngraph TD\n    cwe915[\"CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    cwe471[\"CWE-471: Modification of Assumed-Immutable Data (MAID)\"]\n    cwe288[\"CWE-288: Authentication Bypass Using an Alternate Path or Channel\"]\n\n    cwe79 -- CANFOLLOW --> cwe915\n    cwe471 -- CANFOLLOW --> cwe915\n    cwe288 -- CANFOLLOW --> cwe915\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe915 primary\n    class cwe79,cwe471,cwe288 secondary\n```\n\n## Vulnerability Chain\n1.  **Root Cause:** CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes. The `set_property_value` function allows modification of object attributes based on user-supplied input without proper validation.\n2.  **Impact 1:** CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'). By modifying certain object attributes, an attacker can inject malicious scripts into web pages.\n3.  **Impact 2:** CWE-471: Modification of Assumed-Immutable Data (MAID). The vulnerability allows modification of data that should be immutable, leading to unexpected behavior.\n4.  **Impact 3:** CWE-288: Authentication Bypass Using an Alternate Path or Channel. By modifying authentication-related attributes, an attacker can bypass authentication mechanisms.\n\n## Summary of Analysis\nThe initial analysis correctly identifies the root cause as a **python class pollution vulnerability** in the `set_property_value` function, which aligns with CWE-915. The vulnerability chain starts with the improper modification of object attributes (CWE-915) and leads to various impacts such as XSS (CWE-79), Modification of Assumed-Immutable Data (CWE-471), and Authentication Bypass (CWE-288). The evidence from the CVE reference links confirms the root cause and impacts. The patch mitigates the vulnerability by preventing modification of properties starting and ending with \"__\", further supporting the chosen CWEs.\n\nThe selection of CWE-915 as the primary CWE is appropriate because it directly addresses the **root cause** of the vulnerability, where user-controlled input is used to modify object attributes without proper validation.\n\nThe evidence supporting CWE-915 comes from:\n*   \"**Root cause of vulnerability:** The `set_property_value` function in `django-unicorn/views/action_parsers/utils.py` is vulnerable. It allows modification of a property value of an object based on user-supplied parameters (`property_name` and `property_value`) via component requests. The vulnerability arises because this function fails to adequately prevent attackers from traversing to other objects in the python runtime using \"magic attributes\" such as `__init__.__globals__`.\"\n*   \"**Weaknesses/vulnerabilities present:** Python class pollution vulnerability, categorized as CWE-915.\"\n\nThe graph relationships influenced the final selection by highlighting the potential chain of weaknesses that stem from the root cause. The selected CWEs are at the optimal level of specificity, with CWE-915 accurately representing the core weakness and the other CWEs representing the potential impacts.\n\n**CWEs Considered But Not Used:**\n\n*   CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') - While injection is an impact, this CWE is too high level and doesn't capture the specific nature of the object attribute modification.\n*   CWE-94: Improper Control of Generation of Code ('Code Injection') - While RCE is a possible impact, the vulnerability doesn't directly involve code injection but rather object attribute modification.\n*   CWE-285: Improper Authorization - While the vulnerability can lead to authentication bypass, this is an indirect result of object attribute modification, not a direct authorization issue.\n*   CWE-502: Deserialization of Untrusted Data - Deserialization is not part of the attack vector.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-288:**\n- 288 (Authentication Bypass Using an Alternate Path or Channel) - ROOT\n\n\n**Chain starting from CWE-471:**\n- 471 (Modification of Assumed-Immutable Data (MAID)) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 655.4487741530518
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse"
      },
      "similarity": 622.9612360865458
    },
    {
      "metadata": {
        "doc_id": "1321",
        "name": "Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')",
        "source": "sparse"
      },
      "similarity": 621.515551154866
    },
    {
      "metadata": {
        "doc_id": "1333",
        "name": "Inefficient Regular Expression Complexity",
        "source": "sparse"
      },
      "similarity": 614.8976264343437
    },
    {
      "metadata": {
        "doc_id": "502",
        "name": "Deserialization of Untrusted Data",
        "source": "sparse"
      },
      "similarity": 609.2034484523044
    },
    {
      "metadata": {
        "doc_id": "288",
        "name": "Authentication Bypass Using an Alternate Path or Channel",
        "source": "sparse"
      },
      "similarity": 592.0877581146108
    },
    {
      "metadata": {
        "doc_id": "1336",
        "name": "Improper Neutralization of Special Elements Used in a Template Engine",
        "source": "sparse"
      },
      "similarity": 589.0072691602184
    },
    {
      "metadata": {
        "doc_id": "94",
        "name": "Improper Control of Generation of Code ('Code Injection')",
        "source": "sparse"
      },
      "similarity": 586.5026593853972
    },
    {
      "metadata": {
        "doc_id": "915",
        "name": "Improperly Controlled Modification of Dynamically-Determined Object Attributes",
        "type": "Base",
        "original_content": "The product receives input from an upstream component that specifies multiple attributes, properties, or fields that are to be initialized or updated in an object, but it does not properly control which attributes can be modified.",
        "keyphrase_source": "rootcause:python class pollution vulnerability",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.48034648891798143,
            "graph": 2.388552821999488
          }
        }
      },
      "similarity": 0.48034648891798143
    },
    {
      "doc_id": "471",
      "text": "CWE-471: Modification of Assumed-Immutable Data (MAID)",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "471",
        "name": "Modification of Assumed-Immutable Data (MAID)",
        "type": "base",
        "original_content": "CWE-471: Modification of Assumed-Immutable Data (MAID)",
        "relationships": [
          {
            "source_id": "471",
            "target_id": "621",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "607",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "602",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "473",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "472",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "425",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "291",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "1321",
            "label": "CANFOLLOW",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "1282",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "664",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "664",
            "target_id": "471",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "621",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "607",
            "target_id": "471",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "602",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "473",
            "target_id": "471",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "472",
            "target_id": "471",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "425",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "291",
            "target_id": "471",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1321",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1282",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "1321",
                  "471",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "1321"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "1321",
                  "471",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_forward",
              "source": "1321"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-288",
      "CWE-471",
      "CWE-502",
      "CWE-94",
      "CWE-79",
      "CWE-915",
      "CWE-74",
      "CWE-285"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}