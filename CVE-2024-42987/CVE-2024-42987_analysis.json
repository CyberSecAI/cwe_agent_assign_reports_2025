{
  "cve_id": "CVE-2024-42987",
  "description": "Tenda FH1206 v02.03.01.35 was discovered to contain a **stack overflow** via the modino parameter in the fromPptpUserAdd function. This vulnerability allows attackers to cause a Denial of Service (DoS) via a crafted POST request.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "stack overflow",
    "impact": "Denial of Service (DoS)",
    "vector": "crafted POST request",
    "attacker": "attackers",
    "product": "Tenda FH1206",
    "version": "v02.03.01.35",
    "component": "fromPptpUserAdd function"
  },
  "reference_content": "- **Root cause of vulnerability:** A stack-based buffer overflow vulnerability exists in the `fromPptpUserAdd` function of the Tenda FH1206 router firmware. This vulnerability stems from the use of `sprintf` without proper bounds checking when handling user-supplied data.\n\n- **Weaknesses/vulnerabilities present:** The vulnerability is a classic stack buffer overflow. The `sprintf` function is used to copy data into fixed-size buffers (`v16` and `v20`) without verifying the size of the input, which can cause the buffer to overflow if the input is larger than the buffer's capacity.\n\n- **Impact of exploitation:** An attacker could potentially overwrite parts of the stack, including the return address, which could allow arbitrary code execution on the affected device. This could lead to a complete compromise of the router.\n\n- **Attack vectors:** The vulnerability is triggered via a POST request to `/goform/PPTPDClient`. The `modino` parameter in the POST data is the source of the overflow.\n\n- **Required attacker capabilities/position:** The attacker needs to be able to send HTTP POST requests to the vulnerable router. This would require the attacker to be on the same network as the router, or have a way to send requests to the router through a vulnerable network configuration. The attacker does not need to be authenticated since the vulnerable parameter is received prior authentication procedures.",
  "similar_info": {
    "cwe_distribution": {
      "95": {
        "cwe_counts": {
          "CWE-787": 1
        },
        "total_samples": 1,
        "distribution": [
          {
            "cwes": [
              "CWE-787"
            ],
            "frequency": 1,
            "proportion": 1.0
          }
        ]
      },
      "90": {
        "cwe_counts": {
          "CWE-787": 29
        },
        "total_samples": 29,
        "distribution": [
          {
            "cwes": [
              "CWE-787"
            ],
            "frequency": 29,
            "proportion": 1.0
          }
        ]
      },
      "85": {
        "cwe_counts": {
          "CWE-787": 29
        },
        "total_samples": 29,
        "distribution": [
          {
            "cwes": [
              "CWE-787"
            ],
            "frequency": 29,
            "proportion": 1.0
          }
        ]
      },
      "80": {
        "cwe_counts": {
          "CWE-787": 21,
          "CWE-120": 4
        },
        "total_samples": 25,
        "distribution": [
          {
            "cwes": [
              "CWE-787"
            ],
            "frequency": 21,
            "proportion": 0.84
          },
          {
            "cwes": [
              "CWE-120"
            ],
            "frequency": 4,
            "proportion": 0.16
          }
        ]
      },
      "75": {
        "cwe_counts": {
          "CWE-787": 35
        },
        "total_samples": 35,
        "distribution": [
          {
            "cwes": [
              "CWE-787"
            ],
            "frequency": 35,
            "proportion": 1.0
          }
        ]
      },
      "70": {
        "cwe_counts": {
          "CWE-787": 30
        },
        "total_samples": 31,
        "distribution": [
          {
            "cwes": [
              "CWE-787"
            ],
            "frequency": 30,
            "proportion": 0.968
          },
          {
            "cwes": [],
            "frequency": 1,
            "proportion": 0.032
          }
        ]
      }
    },
    "cwe_consensus": "CWE-787",
    "similarity_stats": {
      "thresholds": [
        95,
        90,
        85,
        80,
        75,
        70
      ],
      "total_samples_by_threshold": {
        "95": 1,
        "90": 29,
        "85": 29,
        "80": 25,
        "75": 35,
        "70": 31
      },
      "top_cwes_by_threshold": {
        "95": [
          [
            "CWE-787",
            1
          ]
        ],
        "90": [
          [
            "CWE-787",
            29
          ]
        ],
        "85": [
          [
            "CWE-787",
            29
          ]
        ],
        "80": [
          [
            "CWE-787",
            21
          ],
          [
            "CWE-120",
            4
          ]
        ],
        "75": [
          [
            "CWE-787",
            35
          ]
        ],
        "70": [
          [
            "CWE-787",
            30
          ]
        ]
      }
    },
    "raw_matches": [
      {
        "similarity": 95,
        "cwes": [
          "787"
        ],
        "total": 1,
        "frequency": 1,
        "proportion": 1.0
      },
      {
        "similarity": 90,
        "cwes": [
          "787"
        ],
        "total": 29,
        "frequency": 29,
        "proportion": 1.0
      },
      {
        "similarity": 85,
        "cwes": [
          "787"
        ],
        "total": 29,
        "frequency": 29,
        "proportion": 1.0
      },
      {
        "similarity": 80,
        "cwes": [
          "787"
        ],
        "total": 25,
        "frequency": 21,
        "proportion": 0.84
      },
      {
        "similarity": 80,
        "cwes": [
          "120"
        ],
        "total": 25,
        "frequency": 4,
        "proportion": 0.16
      },
      {
        "similarity": 75,
        "cwes": [
          "787"
        ],
        "total": 35,
        "frequency": 35,
        "proportion": 1.0
      },
      {
        "similarity": 70,
        "cwes": [
          "787"
        ],
        "total": 31,
        "frequency": 30,
        "proportion": 0.968
      },
      {
        "similarity": 70,
        "cwes": [],
        "total": 31,
        "frequency": 1,
        "proportion": 0.032
      }
    ]
  },
  "similarity_summary": {
    "consensus_cwe": "CWE-787",
    "top_cwes": [
      [
        "CWE-787",
        145
      ],
      [
        "CWE-120",
        4
      ]
    ],
    "confidence_levels": {
      "high": [],
      "medium": [],
      "low": []
    },
    "total_samples": 150
  },
  "analysis": "# Summary\n| CWE ID  | CWE Name                                                      | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :------------------------------------------------------------ | :--------- | :---------------------- | :------------------------------ | :------------------------------ |\n| CWE-121 | Stack-based Buffer Overflow                                   | 1.0        | Variant               | Allowed                       | Primary CWE                     |\n| CWE-787 | Out-of-bounds Write                                           | 0.7        | Base                  | Allowed                       | Secondary Candidate             |\n| CWE-120 | Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') | 0.6        | Base                  | Allowed-with-Review           | Secondary Candidate             |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary CWE is CWE-121 Stack-based Buffer Overflow, which is a variant of the more general CWE-119 Improper Restriction of Operations within the Bounds of a Memory Buffer. CWE-787 Out-of-bounds Write is a parent of CWE-124 Buffer Underwrite. CWE-120 Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') can precede CWE-416 Use After Free. CWE-121 is more specific than CWE-787 and CWE-120, aligning well with the vulnerability description.\n\n```mermaid\ngraph TD\n    cwe121[\"CWE-121: Stack-based Buffer Overflow\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\"]\n    cwe787[\"CWE-787: Out-of-bounds Write\"]\n    cwe120[\"CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\"]\n    \n    cwe121 -->|CHILDOF| cwe119\n    cwe787 -->|CHILDOF| cwe119\n    cwe120 -->|CHILDOF| cwe119\n    cwe120 -->|CANPRECEDE| cwe787\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe121 primary\n    class cwe787,cwe120 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with the **stack overflow** due to the use of `sprintf` without proper bounds checking. This leads to an out-of-bounds write, potentially overwriting the return address on the stack, and ultimately causing a Denial of Service (DoS).\n  - Root Cause: **Stack overflow** in `fromPptpUserAdd` function due to unbounded `sprintf`.\n  - Weakness: Out-of-bounds write due to buffer overflow.\n  - Impact: Denial of Service (DoS) via a crafted POST request.\n\n## Summary of Analysis\n\nThe vulnerability description clearly indicates a **stack overflow** condition in the `fromPptpUserAdd` function, caused by using `sprintf` without proper bounds checking. The \"CVE Reference Links Content Summary\" explicitly states that \"This vulnerability stems from the use of `sprintf` without proper bounds checking when handling user-supplied data.\" The primary CWE match from similar CVE descriptions is CWE-787, but the retriever results list CWE-121 Stack-based Buffer Overflow with the highest similarity score. Given the explicit mention of a \"stack overflow\" and the root cause being an unbounded write to a stack-allocated buffer, CWE-121 is the most appropriate and specific classification.\n\nCWE-787 Out-of-bounds Write is considered as a secondary candidate because it represents the nature of the write operation that caused the overflow.\n\nCWE-120 Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') is also considered because the rootcause involves a buffer copy without size checking. However, since the overflow occurs on the stack, CWE-121 is the best fit.\n\nThe selected CWEs are at the optimal level of specificity, with CWE-121 being a Variant that accurately captures the stack-based nature of the overflow, while CWE-787 and CWE-120 represent the write operation and lack of size checking respectively.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-121: Stack-based Buffer Overflow\n**Abstraction Level**: Variant\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nA stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Justification:** This CWE is the best fit as the vulnerability is explicitly described as a **stack overflow**.\n\n## CWE-134: Use of Externally-Controlled Format String\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product uses a function that accepts a format string as an argument, but the format string originates from an external source.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Justification:** This CWE is not the best fit because the **stack overflow** is not caused by an externally controlled format string.\n\n## CWE-755: Improper Handling of Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product does not handle or incorrectly handles an exceptional condition.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n**Justification:** This CWE is too generic.\n\n## CWE-191: Integer Underflow (Wrap or Wraparound)\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Justification:** This CWE is not related to the vulnerability.\n\n## CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Justification:** This CWE is not related to the vulnerability.\n\n## CWE-1285: Improper Validation of Specified Index, Position, or Offset in Input\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Justification:** This CWE is not directly related, although the lack of bounds checking could be seen as a form of improper validation.\n\n## CWE-912: Hidden Functionality\n**Abstraction Level**: Class\n**Similarity Score**: 0.69\n**Source**: dense\n\n**Description**:\nThe product contains functionality that is not documented, not part of the specification, and not accessible through an interface or command sequence that is obvious to the product's users or administrators.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n**Justification:** This CWE is not related to the vulnerability.\n\n## CWE-259: Use of Hard-coded Password\n**Abstraction Level**: Variant\n**Similarity Score**: 0.69\n**Source**: dense\n\n**Description**:\nThe product contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components.\n\n**",
  "analysis_with_relationships": "# Summary\n| CWE ID  | CWE Name                                                      | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :------------------------------------------------------------ | :--------- | :---------------------- | :------------------------------ | :------------------------------ |\n| CWE-121 | Stack-based Buffer Overflow                                   | 1.0        | Variant               | Allowed                       | Primary CWE                     |\n| CWE-787 | Out-of-bounds Write                                           | 0.7        | Base                  | Allowed                       | Secondary Candidate             |\n| CWE-120 | Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') | 0.6        | Base                  | Allowed-with-Review           | Secondary Candidate             |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary CWE is CWE-121 Stack-based Buffer Overflow, which is a variant of the more general CWE-119 Improper Restriction of Operations within the Bounds of a Memory Buffer. CWE-787 Out-of-bounds Write is a parent of CWE-124 Buffer Underwrite. CWE-120 Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') can precede CWE-416 Use After Free. CWE-121 is more specific than CWE-787 and CWE-120, aligning well with the vulnerability description.\n\n```mermaid\ngraph TD\n    cwe121[\"CWE-121: Stack-based Buffer Overflow\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\"]\n    cwe787[\"CWE-787: Out-of-bounds Write\"]\n    cwe120[\"CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\"]\n    \n    cwe121 -->|CHILDOF| cwe119\n    cwe787 -->|CHILDOF| cwe119\n    cwe120 -->|CHILDOF| cwe119\n    cwe120 -->|CANPRECEDE| cwe787\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe121 primary\n    class cwe787,cwe120 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with the **stack overflow** due to the use of `sprintf` without proper bounds checking. This leads to an out-of-bounds write, potentially overwriting the return address on the stack, and ultimately causing a Denial of Service (DoS).\n  - Root Cause: **Stack overflow** in `fromPptpUserAdd` function due to unbounded `sprintf`.\n  - Weakness: Out-of-bounds write due to buffer overflow.\n  - Impact: Denial of Service (DoS) via a crafted POST request.\n\n## Summary of Analysis\n\nThe vulnerability description clearly indicates a **stack overflow** condition in the `fromPptpUserAdd` function, caused by using `sprintf` without proper bounds checking. The \"CVE Reference Links Content Summary\" explicitly states that \"This vulnerability stems from the use of `sprintf` without proper bounds checking when handling user-supplied data.\" The primary CWE match from similar CVE descriptions is CWE-787, but the retriever results list CWE-121 Stack-based Buffer Overflow with the highest similarity score. Given the explicit mention of a \"stack overflow\" and the root cause being an unbounded write to a stack-allocated buffer, CWE-121 is the most appropriate and specific classification.\n\nCWE-787 Out-of-bounds Write is considered as a secondary candidate because it represents the nature of the write operation that caused the overflow.\n\nCWE-120 Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') is also considered because the rootcause involves a buffer copy without size checking. However, since the overflow occurs on the stack, CWE-121 is the best fit.\n\nThe selected CWEs are at the optimal level of specificity, with CWE-121 being a Variant that accurately captures the stack-based nature of the overflow, while CWE-787 and CWE-120 represent the write operation and lack of size checking respectively.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-121: Stack-based Buffer Overflow\n**Abstraction Level**: Variant\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nA stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Justification:** This CWE is the best fit as the vulnerability is explicitly described as a **stack overflow**.\n\n## CWE-134: Use of Externally-Controlled Format String\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product uses a function that accepts a format string as an argument, but the format string originates from an external source.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Justification:** This CWE is not the best fit because the **stack overflow** is not caused by an externally controlled format string.\n\n## CWE-755: Improper Handling of Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product does not handle or incorrectly handles an exceptional condition.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n**Justification:** This CWE is too generic.\n\n## CWE-191: Integer Underflow (Wrap or Wraparound)\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Justification:** This CWE is not related to the vulnerability.\n\n## CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Justification:** This CWE is not related to the vulnerability.\n\n## CWE-1285: Improper Validation of Specified Index, Position, or Offset in Input\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Justification:** This CWE is not directly related, although the lack of bounds checking could be seen as a form of improper validation.\n\n## CWE-912: Hidden Functionality\n**Abstraction Level**: Class\n**Similarity Score**: 0.69\n**Source**: dense\n\n**Description**:\nThe product contains functionality that is not documented, not part of the specification, and not accessible through an interface or command sequence that is obvious to the product's users or administrators.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n**Justification:** This CWE is not related to the vulnerability.\n\n## CWE-259: Use of Hard-coded Password\n**Abstraction Level**: Variant\n**Similarity Score**: 0.69\n**Source**: dense\n\n**Description**:\nThe product contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components.\n\n**\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-121:**\n- 121 (Stack-based Buffer Overflow) - ROOT\n\n\n**Chain starting from CWE-416:**\n- 416 (Use After Free) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "121",
        "name": "Stack-based Buffer Overflow",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Stack Overflow",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "190",
        "name": "Integer Overflow or Wraparound",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Overflow",
        "match_reason": "term_in_phrase_whole_phrase"
      },
      "similarity": 800.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "674",
        "name": "Uncontrolled Recursion",
        "source": "sparse"
      },
      "similarity": 236.00419475280958
    },
    {
      "metadata": {
        "doc_id": "1284",
        "name": "Improper Validation of Specified Quantity in Input",
        "source": "sparse"
      },
      "similarity": 211.22460763820607
    },
    {
      "metadata": {
        "doc_id": "770",
        "name": "Allocation of Resources Without Limits or Throttling",
        "source": "sparse"
      },
      "similarity": 209.46408917072236
    },
    {
      "metadata": {
        "doc_id": "130",
        "name": "Improper Handling of Length Parameter Inconsistency",
        "source": "sparse"
      },
      "similarity": 207.93593785651296
    },
    {
      "metadata": {
        "doc_id": "122",
        "name": "Heap-based Buffer Overflow",
        "source": "sparse"
      },
      "similarity": 204.13730555007018
    },
    {
      "metadata": {
        "doc_id": "125",
        "name": "Out-of-bounds Read",
        "source": "sparse"
      },
      "similarity": 203.93835836338027
    },
    {
      "metadata": {
        "doc_id": "78",
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "type": "Base",
        "original_content": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
        "keyphrase_source": "weakness:stack overflow",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse",
            "graph"
          ],
          "retriever_count": 3,
          "normalized_scores": {
            "dense": 0.5633831655853605,
            "sparse": 69.37413623493003,
            "graph": 1.6370018116953147
          }
        }
      },
      "similarity": 0.5633831655853605
    },
    {
      "doc_id": "128",
      "text": "CWE-128: Wrap-around Error",
      "score": 2.2698,
      "metadata": {
        "doc_id": "128",
        "name": "Wrap-around Error",
        "type": "base",
        "original_content": "CWE-128: Wrap-around Error",
        "relationships": [
          {
            "source_id": "128",
            "target_id": "190",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "128",
            "target_id": "119",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "128",
            "target_id": "682",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "682",
            "target_id": "128",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "119",
            "target_id": "128",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 0.7,
          "sequence_path": 0.7200000000000001,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "128",
                  "190",
                  "PEEROF"
                ]
              ],
              "score": 0.7,
              "type": "relationship_chain",
              "source": "190"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "190",
                  "119",
                  "CANPRECEDE"
                ],
                [
                  "119",
                  "128",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "vulnerability_sequence_forward",
              "source": "190"
            },
            "peer_relationship": {
              "path": [
                [
                  "128",
                  "190",
                  "PEEROF"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "190"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2698
          }
        }
      },
      "similarity": 2.2698
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-121",
      "CWE-416",
      "CWE-787",
      "CWE-191",
      "CWE-1285",
      "CWE-124",
      "CWE-134",
      "CWE-755",
      "CWE-78",
      "CWE-119",
      "CWE-259",
      "CWE-120",
      "CWE-912"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}