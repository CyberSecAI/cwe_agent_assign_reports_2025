{
  "retriever": "graph",
  "query": "sentry-sdk is the official Python SDK for Sentry.io. A bug in Sentrys Python SDK < 2.8.0 allows the environment variables to be passed to subprocesses despite the `env={}` setting. In Pythons `subprocess` calls, all environment variables are passed to subprocesses by default. However, if you specifically do not want them to be passed to subprocesses, you may use `env` argument in `subprocess` calls. Due to the bug in Sentry SDK, with the Stdlib integration enabled (which is enabled by default), this expectation is not fulfilled, and all environment variables are being passed to subprocesses instead. The issue has been patched in pull request #3251 and is included in sentry-sdk==2.8.0. We strongly recommend upgrading to the latest SDK version. However, if its not possible, and if passing environment variables to child processes poses a security risk for you, you can disable all default integrations. Consider specifically these CWEs: CWE-214 CWE-453 CWE-201 CWE-525 CWE-290 CWE-923 CWE-526 CWE-278 CWE-1258 CWE-668",
  "keyphrases": {
    "original_query": "sentry-sdk is the official Python SDK for Sentry.io. A bug in Sentrys Python SDK < 2.8.0 allows the environment variables to be passed to subprocesses despite the `env={}` setting. In Pythons `subprocess` calls, all environment variables are passed to subprocesses by default. However, if you specifically do not want them to be passed to subprocesses, you may use `env` argument in `subprocess` calls. Due to the bug in Sentry SDK, with the Stdlib integration enabled (which is enabled by default), this expectation is not fulfilled, and all environment variables are being passed to subprocesses instead. The issue has been patched in pull request #3251 and is included in sentry-sdk==2.8.0. We strongly recommend upgrading to the latest SDK version. However, if its not possible, and if passing environment variables to child processes poses a security risk for you, you can disable all default integrations.",
    "enhanced_query": "sentry-sdk is the official Python SDK for Sentry.io. A bug in Sentrys Python SDK < 2.8.0 allows the environment variables to be passed to subprocesses despite the `env={}` setting. In Pythons `subprocess` calls, all environment variables are passed to subprocesses by default. However, if you specifically do not want them to be passed to subprocesses, you may use `env` argument in `subprocess` calls. Due to the bug in Sentry SDK, with the Stdlib integration enabled (which is enabled by default), this expectation is not fulfilled, and all environment variables are being passed to subprocesses instead. The issue has been patched in pull request #3251 and is included in sentry-sdk==2.8.0. We strongly recommend upgrading to the latest SDK version. However, if its not possible, and if passing environment variables to child processes poses a security risk for you, you can disable all default integrations. Consider specifically these CWEs: CWE-214 CWE-453 CWE-201 CWE-525 CWE-290 CWE-923 CWE-526 CWE-278 CWE-1258 CWE-668",
    "cwe_mentions": [
      "CWE-214",
      "CWE-453",
      "CWE-201",
      "CWE-525",
      "CWE-290",
      "CWE-923",
      "CWE-526",
      "CWE-278",
      "CWE-1258",
      "CWE-668"
    ],
    "search_time": 3.705493688583374
  },
  "timestamp": "2025-07-12 03:13:40",
  "cve_id": "CVE-2024-40647",
  "result_count": 20,
  "results": [
    {
      "cwe_id": "942",
      "name": "Permissive Cross-domain Policy with Untrusted Domains",
      "type": "variant",
      "score": 2.6784000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "350",
      "name": "Reliance on Reverse DNS Resolution for a Security-Critical Action",
      "type": "variant",
      "score": 2.6784000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "290",
      "name": "Authentication Bypass by Spoofing",
      "type": "base",
      "score": 2.3998000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "214",
      "name": "Invocation of Process Using Visible Sensitive Information",
      "type": "Base",
      "score": 2.3259172493091214,
      "relationship_count": 0
    },
    {
      "cwe_id": "226",
      "name": "Sensitive Information in Resource Not Removed Before Reuse",
      "type": "base",
      "score": 2.2100000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "322",
      "name": "Key Exchange without Entity Authentication",
      "type": "base",
      "score": 2.2100000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "209",
      "name": "Generation of Error Message Containing Sensitive Information",
      "type": "base",
      "score": 2.04516,
      "relationship_count": 0
    },
    {
      "cwe_id": "472",
      "name": "External Control of Assumed-Immutable Web Parameter",
      "type": "base",
      "score": 1.8215600000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "923",
      "name": "Improper Restriction of Communication Channel to Intended Endpoints",
      "type": "class",
      "score": 1.768,
      "relationship_count": 0
    },
    {
      "cwe_id": "526",
      "name": "Cleartext Storage of Sensitive Information in an Environment Variable",
      "type": "Variant",
      "score": 1.736912748026295,
      "relationship_count": 0
    },
    {
      "cwe_id": "525",
      "name": "Use of Web Browser Cache Containing Sensitive Information",
      "type": "variant",
      "score": 1.71072,
      "relationship_count": 0
    },
    {
      "cwe_id": "1295",
      "name": "Debug Messages Revealing Unnecessary Information",
      "type": "base",
      "score": 1.6707600000000002,
      "relationship_count": 0
    },
    {
      "cwe_id": "613",
      "name": "Insufficient Session Expiration",
      "type": "base",
      "score": 1.6016000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "1275",
      "name": "Sensitive Cookie with Improper SameSite Attribute",
      "type": "variant",
      "score": 1.5768,
      "relationship_count": 0
    },
    {
      "cwe_id": "1258",
      "name": "Exposure of Sensitive System Information Due to Uncleared Debug Information",
      "type": "Base",
      "score": 1.5721324946775659,
      "relationship_count": 0
    },
    {
      "cwe_id": "201",
      "name": "Insertion of Sensitive Information Into Sent Data",
      "type": "Base",
      "score": 1.5213480453310082,
      "relationship_count": 0
    },
    {
      "cwe_id": "202",
      "name": "Exposure of Sensitive Information Through Data Queries",
      "type": "base",
      "score": 1.521,
      "relationship_count": 0
    },
    {
      "cwe_id": "358",
      "name": "Improperly Implemented Security Check for Standard",
      "type": "base",
      "score": 1.521,
      "relationship_count": 0
    },
    {
      "cwe_id": "499",
      "name": "Serializable Class Containing Sensitive Data",
      "type": "variant",
      "score": 1.5024,
      "relationship_count": 0
    },
    {
      "cwe_id": "498",
      "name": "Cloneable Class Containing Sensitive Information",
      "type": "variant",
      "score": 1.5024,
      "relationship_count": 0
    }
  ]
}