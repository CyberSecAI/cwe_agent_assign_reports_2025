{
  "method": "sparse_base",
  "query": "In the Linux kernel, the following vulnerability has been resolved filemap replace pte_offset_map() with pte_offset_map_nolock() The vmf->ptl in filemap_fault_recheck_pte_none() is still set from handle_pte_fault(). But at the same time, we did a pte_unmap(vmf->pte). After a pte_unmap(vmf->pte) unmap and rcu_read_unlock(), the page table may be racily changed and vmf->ptl maybe fails to protect the actual page table. Fix this by replacing pte_offset_map() with pte_offset_map_nolock(). As David said, the PTL pointer might be stale so if we continue to use it infilemap_fault_recheck_pte_none(), it might trigger UAF. Also, if the PTL fails, the issue fixed by commit 58f327f2ce80 (filemap avoid unnecessary major faults in filemap_fault()) might reappear.",
  "keyphrases": {
    "base_query": "In the Linux kernel, the following vulnerability has been resolved filemap replace pte_offset_map() with pte_offset_map_nolock() The vmf->ptl in filemap_fault_recheck_pte_none() is still set from handle_pte_fault(). But at the same time, we did a pte_unmap(vmf->pte). After a pte_unmap(vmf->pte) unmap and rcu_read_unlock(), the page table may be racily changed and vmf->ptl maybe fails to protect the actual page table. Fix this by replacing pte_offset_map() with pte_offset_map_nolock(). As David said, the PTL pointer might be stale so if we continue to use it infilemap_fault_recheck_pte_none(), it might trigger UAF. Also, if the PTL fails, the issue fixed by commit 58f327f2ce80 (filemap avoid unnecessary major faults in filemap_fault()) might reappear."
  },
  "timestamp": "2025-07-13T13:51:12.830451",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 162.29583491853094
    },
    {
      "doc_id": "415",
      "name": "Double Free",
      "score": 158.5395246587261
    },
    {
      "doc_id": "125",
      "name": "Out-of-bounds Read",
      "score": 155.84464339927428
    },
    {
      "doc_id": "61",
      "name": "UNIX Symbolic Link (Symlink) Following",
      "score": 151.996450389664
    },
    {
      "doc_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "score": 151.57041486488126
    }
  ]
}