{
  "method": "sparse_base",
  "query": "In the Linux kernel, the following vulnerability has been resolved i3c Add NULL pointer check in i3c_master_queue_ibi() The I3C master driver may receive an IBI from a target device that has not been probed yet. In such cases, the master calls `i3c_master_queue_ibi()` to queue an IBI work task, leading to Unable to handle kernel read from unreadable memory and resulting in a kernel panic. Typical IBI handling flow 1. The I3C master scans target devices and probes their respective drivers. 2. The target device driver calls `i3c_device_request_ibi()` to enable IBI and assigns `dev->ibi = ibi`. 3. The I3C master receives an IBI from the target device and calls `i3c_master_queue_ibi()` to queue the target device drivers IBI handler task. However, since target device events are asynchronous to the I3C probe sequence, step 3 may occur before step 2, causing `dev->ibi` to be `NULL`, leading to a kernel panic. Add a NULL pointer check in `i3c_master_queue_ibi()` to prevent accessing an uninitialized `dev->ibi`, ensuring stability.",
  "keyphrases": {
    "base_query": "In the Linux kernel, the following vulnerability has been resolved i3c Add NULL pointer check in i3c_master_queue_ibi() The I3C master driver may receive an IBI from a target device that has not been probed yet. In such cases, the master calls `i3c_master_queue_ibi()` to queue an IBI work task, leading to Unable to handle kernel read from unreadable memory and resulting in a kernel panic. Typical IBI handling flow 1. The I3C master scans target devices and probes their respective drivers. 2. The target device driver calls `i3c_device_request_ibi()` to enable IBI and assigns `dev->ibi = ibi`. 3. The I3C master receives an IBI from the target device and calls `i3c_master_queue_ibi()` to queue the target device drivers IBI handler task. However, since target device events are asynchronous to the I3C probe sequence, step 3 may occur before step 2, causing `dev->ibi` to be `NULL`, leading to a kernel panic. Add a NULL pointer check in `i3c_master_queue_ibi()` to prevent accessing an uninitialized `dev->ibi`, ensuring stability."
  },
  "timestamp": "2025-07-12T10:15:56.331241",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "1285",
      "name": "Improper Validation of Specified Index, Position, or Offset in Input",
      "score": 251.4592507313978
    },
    {
      "doc_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 251.21068403217606
    },
    {
      "doc_id": "667",
      "name": "Improper Locking",
      "score": 248.48442205793552
    },
    {
      "doc_id": "476",
      "name": "NULL Pointer Dereference",
      "score": 248.16916808355268
    },
    {
      "doc_id": "908",
      "name": "Use of Uninitialized Resource",
      "score": 248.15995451694948
    }
  ]
}