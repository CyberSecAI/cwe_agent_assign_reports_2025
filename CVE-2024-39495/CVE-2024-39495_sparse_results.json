{
  "query": "In the Linux kernel, the following vulnerability has been resolved greybus Fix use-after-free bug in gb_interface_release due to race condition. In gb_interface_create, &intf->mode_switch_completion is bound with gb_interface_mode_switch_work. Then it will be started by gb_interface_request_mode_switch. Here is the relevant code. if (!queue_work(system_long_wq, &intf->mode_switch_work)) { ... } If we call gb_interface_release to make cleanup, there may be an unfinished work. This function will call kfree to free the object intf. However, if gb_interface_mode_switch_work is scheduled to run after kfree, it may cause use-after-free error as gb_interface_mode_switch_work will use the object intf. The possible execution flow that may lead to the issue is as follows CPU0 CPU1 | gb_interface_create | gb_interface_request_mode_switch gb_interface_release | kfree(intf) (free) | | gb_interface_mode_switch_work | mutex_lock(&intf->mutex) (use) Fix it by canceling the work before kfree.",
  "count": 11,
  "results": [
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "abstraction": "Class",
      "score": 1000.0,
      "original_score": 1000.0,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "416",
      "name": "Use After Free",
      "abstraction": "Variant",
      "score": 1000.0,
      "original_score": 1000.0,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "415",
      "name": "Double Free",
      "abstraction": "Variant",
      "score": 633.7845283958561,
      "original_score": 633.7845283958561,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "abstraction": "Class",
      "score": 632.5770480919639,
      "original_score": 632.5770480919639,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "abstraction": "Base",
      "score": 586.8631403808965,
      "original_score": 586.8631403808965,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "401",
      "name": "Missing Release of Memory after Effective Lifetime",
      "abstraction": "Variant",
      "score": 570.3981108706521,
      "original_score": 570.3981108706521,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "364",
      "name": "Signal Handler Race Condition",
      "abstraction": "Base",
      "score": 570.38773479957,
      "original_score": 570.38773479957,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "911",
      "name": "Improper Update of Reference Count",
      "abstraction": "Base",
      "score": 560.8106221533826,
      "original_score": 560.8106221533826,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "662",
      "name": "Improper Synchronization",
      "abstraction": "Class",
      "score": 553.3581462709587,
      "original_score": 553.3581462709587,
      "mapping_usage": "Discouraged"
    },
    {
      "cwe_id": "190",
      "name": "Integer Overflow or Wraparound",
      "abstraction": "Base",
      "score": 525.9769274945068,
      "original_score": 525.9769274945068,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "252",
      "name": "Unchecked Return Value",
      "abstraction": "Base",
      "score": 502.3559355625452,
      "original_score": 502.3559355625452,
      "mapping_usage": "Allowed"
    }
  ],
  "statistics": {
    "min": 502.3559355625452,
    "max": 1000.0,
    "mean": 648.7738358200301,
    "median": 570.3981108706521,
    "count": 11
  }
}