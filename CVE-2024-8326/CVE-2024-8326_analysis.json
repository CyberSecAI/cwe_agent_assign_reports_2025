{
  "cve_id": "CVE-2024-8326",
  "description": "The s2Member Excellent for All Kinds of Memberships, Content Restriction Paywalls & Member Access Subscriptions plugin for WordPress is vulnerable to **Sensitive Information Exposure** in all versions up to, and including, 241114 via the sc_get_details function. This makes it possible for authenticated attackers, with Contributor-level access and above, to extract sensitive data including user data and database configuration information, which can lead to reading, updating, or dropping database tables. The vulnerability was partially patched in version 241114.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "Sensitive Information Exposure",
    "impact": "extract sensitive data including user data and database configuration information",
    "vector": "",
    "attacker": "authenticated attackers with Contributor-level access and above",
    "product": "s2Member Excellent for All Kinds of Memberships",
    "version": "all versions up to and including 241114",
    "component": "sc_get_details function"
  },
  "reference_content": "Based on the provided content, here's a breakdown of the vulnerability:\n\n**Root Cause:**\n\nThe vulnerability stems from the `sc_get_details` function in the s2Member plugin, which allows retrieval of sensitive information via the `[s2Get /]` shortcode.  The initial implementation of the shortcode did not properly validate the `constant`, `user_field`, and `user_option` attributes, allowing for the extraction of various user data, site configuration details and even arbitrary constants.\n\n**Weaknesses/Vulnerabilities:**\n\n*   **Insecure Shortcode Handling:** The `sc_get_details` function lacks sufficient validation and sanitization for the attributes passed to the `[s2Get /]` shortcode.\n*   **Sensitive Data Exposure:** The shortcode allows access to user data, including login information, email, names, custom fields, subscription details, IP addresses, and more.\n*   **Configuration Exposure:** The shortcode can expose internal constants, potentially including database configuration parameters.\n\n**Impact of Exploitation:**\n\n*   **Unauthorized Data Access:** Attackers can obtain sensitive user information.\n*   **Account Hijacking:** Exposed login information can lead to account takeovers.\n*   **Data Breach:** Sensitive data leaks could harm users and the site owner.\n*   **Complete Site Compromise:** Exposed database configuration information could allow the attacker to read, modify or drop database tables, leading to a complete site compromise\n\n**Attack Vectors:**\n\n*   **Shortcode Injection:** Attackers use the `[s2Get /]` shortcode with crafted attributes on a page or post.\n\n**Required Attacker Capabilities/Position:**\n\n*   **Authenticated User:** The attacker needs to have at least \"Contributor\" level access on the WordPress site.\n*   **Shortcode Usage:** The attacker needs to be able to create or edit content that allows usage of shortcodes.\n\n**Technical Details:**\n\n*   The `sc_get_details` function processes attributes like `constant`, `user_field`, and `user_option` to fetch data.\n*   The vulnerability was partially patched in version 241114 by limiting the constants that can be accessed.\n*   Version 241216 added extra validation to address the issue further and fully fix the vulnerability.\n*   The file `sc-gets-in.inc.php` is the core of the vulnerability. The initial patch in version 241114 (changeset 3188157) limited the constants that can be accessed with the shortcode to only those starting with `S2MEMBER_CURRENT_USER`. The final patch in version 241216 (changeset 3208315) fixed the vulnerability completely by adding an allowlist of valid attribute values.\n\n**Additional Notes:**\n*   The Wordfence article provides a clear description of the vulnerability and its impact.\n*   The provided Trac links show the evolution of the code and the patches.\n*   The vulnerability is rated as High severity (CVSS 8.8).\n*   The vulnerability was discovered by wesley (wcraft).",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-200 | Exposure of Sensitive Information to an Unauthorized Actor | 0.9 | Class | Primary | Allowed |\n| CWE-863 | Incorrect Authorization | 0.6 | Class | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.75\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary CWE is CWE-200 [Exposure of Sensitive Information to an Unauthorized Actor] which is a Class-level CWE. The retriever results suggest some base-level CWEs related to authorization, such as CWE-639 [Authorization Bypass Through User-Controlled Key] or CWE-306 [Missing Authentication for Critical Function]. However, the vulnerability description indicates that authenticated users with Contributor-level access could access sensitive information. The vulnerability description indicates there is **Sensitive Information Exposure** but there is no mention of bypassing authentication or authorization. Therefore, CWE-200 [Exposure of Sensitive Information to an Unauthorized Actor] is a better fit as the primary weakness. A secondary weakness could be CWE-863 [Incorrect Authorization] since a contributor should not have access to the exposed data.\n\n```mermaid\ngraph TD\n    cwe200[\"CWE-200: Exposure of Sensitive Information to an Unauthorized Actor\"]\n    cwe863[\"CWE-863: Incorrect Authorization\"]\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe200 primary\n    class cwe863 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **Sensitive Information Exposure** via the `sc_get_details` function. Authenticated users with Contributor-level access can extract sensitive data including user data and database configuration information. This leads to potential account hijacking, data breaches, and complete site compromise.\n\n## Summary of Analysis\nThe initial analysis focused on identifying the root cause of the vulnerability, which is the **Sensitive Information Exposure** via the `sc_get_details` function. The retriever results suggested several CWEs, including CWE-200 [Exposure of Sensitive Information to an Unauthorized Actor], CWE-863 [Incorrect Authorization], and CWE-306 [Missing Authentication for Critical Function].\n\nThe vulnerability description states that the `sc_get_details` function allows retrieval of sensitive information via the `[s2Get /]` shortcode. The shortcode did not properly validate the `constant`, `user_field`, and `user_option` attributes, allowing for the extraction of various user data, site configuration details and even arbitrary constants. This aligns well with CWE-200 [Exposure of Sensitive Information to an Unauthorized Actor], which describes a scenario where sensitive information is exposed to an unauthorized actor.\n\nWhile the attacker needs to be authenticated, the primary issue is that they can access information they should not be able to access, suggesting a potential authorization issue. Therefore, CWE-863 [Incorrect Authorization] is considered as a secondary weakness, indicating that the authorization checks are not correctly performed, allowing contributors to access data they should not have access to.\n\nCWE-306 [Missing Authentication for Critical Function] is not applicable, as authentication is present, but it does not prevent the described data exposure.\n\nThe selected CWEs are at the optimal level of specificity, with CWE-200 [Exposure of Sensitive Information to an Unauthorized Actor] at the Class level and CWE-863 [Incorrect Authorization] at the Class level, providing a clear understanding of the vulnerability's nature.\n\nRelevant CWE Information:\n- \"The s2Member Excellent for All Kinds of Memberships, Content Restriction Paywalls & Member Access Subscriptions plugin for WordPress is vulnerable to **Sensitive Information Exposure** in all versions up to, and including, 241114 via the sc_get_details function.\"\n- \"**weakness:** **Sensitive Information Exposure**\"\n- \"This makes it possible for authenticated attackers, with Contributor-level access and above, to extract sensitive data including user data and database configuration information, which can lead to reading, updating, or dropping database tables.\"",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-200 | Exposure of Sensitive Information to an Unauthorized Actor | 0.9 | Class | Primary | Allowed |\n| CWE-863 | Incorrect Authorization | 0.6 | Class | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.75\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary CWE is CWE-200 [Exposure of Sensitive Information to an Unauthorized Actor] which is a Class-level CWE. The retriever results suggest some base-level CWEs related to authorization, such as CWE-639 [Authorization Bypass Through User-Controlled Key] or CWE-306 [Missing Authentication for Critical Function]. However, the vulnerability description indicates that authenticated users with Contributor-level access could access sensitive information. The vulnerability description indicates there is **Sensitive Information Exposure** but there is no mention of bypassing authentication or authorization. Therefore, CWE-200 [Exposure of Sensitive Information to an Unauthorized Actor] is a better fit as the primary weakness. A secondary weakness could be CWE-863 [Incorrect Authorization] since a contributor should not have access to the exposed data.\n\n```mermaid\ngraph TD\n    cwe200[\"CWE-200: Exposure of Sensitive Information to an Unauthorized Actor\"]\n    cwe863[\"CWE-863: Incorrect Authorization\"]\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    \n    class cwe200 primary\n    class cwe863 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **Sensitive Information Exposure** via the `sc_get_details` function. Authenticated users with Contributor-level access can extract sensitive data including user data and database configuration information. This leads to potential account hijacking, data breaches, and complete site compromise.\n\n## Summary of Analysis\nThe initial analysis focused on identifying the root cause of the vulnerability, which is the **Sensitive Information Exposure** via the `sc_get_details` function. The retriever results suggested several CWEs, including CWE-200 [Exposure of Sensitive Information to an Unauthorized Actor], CWE-863 [Incorrect Authorization], and CWE-306 [Missing Authentication for Critical Function].\n\nThe vulnerability description states that the `sc_get_details` function allows retrieval of sensitive information via the `[s2Get /]` shortcode. The shortcode did not properly validate the `constant`, `user_field`, and `user_option` attributes, allowing for the extraction of various user data, site configuration details and even arbitrary constants. This aligns well with CWE-200 [Exposure of Sensitive Information to an Unauthorized Actor], which describes a scenario where sensitive information is exposed to an unauthorized actor.\n\nWhile the attacker needs to be authenticated, the primary issue is that they can access information they should not be able to access, suggesting a potential authorization issue. Therefore, CWE-863 [Incorrect Authorization] is considered as a secondary weakness, indicating that the authorization checks are not correctly performed, allowing contributors to access data they should not have access to.\n\nCWE-306 [Missing Authentication for Critical Function] is not applicable, as authentication is present, but it does not prevent the described data exposure.\n\nThe selected CWEs are at the optimal level of specificity, with CWE-200 [Exposure of Sensitive Information to an Unauthorized Actor] at the Class level and CWE-863 [Incorrect Authorization] at the Class level, providing a clear understanding of the vulnerability's nature.\n\nRelevant CWE Information:\n- \"The s2Member Excellent for All Kinds of Memberships, Content Restriction Paywalls & Member Access Subscriptions plugin for WordPress is vulnerable to **Sensitive Information Exposure** in all versions up to, and including, 241114 via the sc_get_details function.\"\n- \"**weakness:** **Sensitive Information Exposure**\"\n- \"This makes it possible for authenticated attackers, with Contributor-level access and above, to extract sensitive data including user data and database configuration information, which can lead to reading, updating, or dropping database tables.\"\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-863:**\n- 863 (Incorrect Authorization) - ROOT\n\n\n**Chain starting from CWE-200:**\n- 200 (Exposure of Sensitive Information to an Unauthorized Actor) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "200",
        "name": "Exposure of Sensitive Information to an Unauthorized Actor",
        "source": "sparse"
      },
      "similarity": 398.08064452449634
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 396.4285147226047
    },
    {
      "metadata": {
        "doc_id": "306",
        "name": "Missing Authentication for Critical Function",
        "source": "sparse"
      },
      "similarity": 386.7632110504643
    },
    {
      "metadata": {
        "doc_id": "285",
        "name": "Improper Authorization",
        "source": "sparse"
      },
      "similarity": 385.20694680310504
    },
    {
      "metadata": {
        "doc_id": "284",
        "name": "Improper Access Control",
        "source": "sparse"
      },
      "similarity": 380.6218083722162
    },
    {
      "metadata": {
        "doc_id": "862",
        "name": "Missing Authorization",
        "source": "sparse"
      },
      "similarity": 379.3217207576434
    },
    {
      "metadata": {
        "doc_id": "639",
        "name": "Authorization Bypass Through User-Controlled Key",
        "source": "sparse"
      },
      "similarity": 377.8865741649562
    },
    {
      "metadata": {
        "doc_id": "668",
        "name": "Exposure of Resource to Wrong Sphere",
        "source": "sparse"
      },
      "similarity": 376.47642563410517
    },
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "type": "Compound",
        "original_content": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
        "keyphrase_source": "weakness:Sensitive Information Exposure",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This is a well-known Composite of multiple weaknesses that must all occur simultaneously, although it is attack-oriented in nature.",
          "comments": "While attack-oriented composites are supported in CWE, they have not been a focus of research. There is a chance that future research or CWE scope clarifications will change or deprecate them. Perform root-cause analysis to determine if other weaknesses allow CSRF attacks to occur, and map to those weaknesses. For example, predictable CSRF tokens might allow bypass of CSRF protection mechanisms; if this occurs, they might be better characterized as randomness/predictability weaknesses.",
          "reasons": [
            "Other"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5734722521928461,
            "sparse": 127.40996864077447
          }
        }
      },
      "similarity": 0.5734722521928461
    },
    {
      "doc_id": "1275",
      "text": "CWE-1275: Sensitive Cookie with Improper SameSite Attribute",
      "score": 2.5507200000000005,
      "metadata": {
        "doc_id": "1275",
        "name": "Sensitive Cookie with Improper SameSite Attribute",
        "type": "variant",
        "original_content": "CWE-1275: Sensitive Cookie with Improper SameSite Attribute",
        "relationships": [
          {
            "source_id": "1275",
            "target_id": "352",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1275",
            "target_id": "923",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "923",
            "target_id": "1275",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "352",
            "target_id": "1275",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "abstraction_path": 0.6080000000000001,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.2,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "352",
                  "1275",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "352"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "284",
                  "923",
                  "PARENTOF"
                ],
                [
                  "923",
                  "1275",
                  "PARENTOF"
                ]
              ],
              "score": 0.6080000000000001,
              "type": "abstraction_path_down",
              "source": "284"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "352",
                  "1275",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "352"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "1275",
                  "352",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "352"
            }
          }
        },
        "abstraction_level": "variant",
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.5507200000000005
          }
        }
      },
      "similarity": 2.5507200000000005
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-863",
      "CWE-200",
      "CWE-306",
      "CWE-639"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}