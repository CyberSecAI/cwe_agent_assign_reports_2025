{
  "retriever": "graph",
  "query": "In the Linux kernel, the following vulnerability has been resolved rtmutex Drop rt_mutexwait_lock before scheduling rt_mutex_handle_deadlock() is called with rt_mutexwait_lock held. In the good case it returns with the lock held and in the deadlock case it emits a warning and goes into an endless scheduling loop with the lock held, which triggers the scheduling in atomic warning. Unlock rt_mutexwait_lock in the dead lock case before issuing the warning and dropping into the schedule for ever loop. [ tglx Moved unlock before the WARN(), removed the pointless comment, massaged changelog, added Fixes tag ] Consider specifically these CWEs: CWE-413 CWE-765 CWE-362 CWE-451 CWE-832 CWE-356 CWE-667 CWE-833",
  "keyphrases": {
    "original_query": "In the Linux kernel, the following vulnerability has been resolved rtmutex Drop rt_mutexwait_lock before scheduling rt_mutex_handle_deadlock() is called with rt_mutexwait_lock held. In the good case it returns with the lock held and in the deadlock case it emits a warning and goes into an endless scheduling loop with the lock held, which triggers the scheduling in atomic warning. Unlock rt_mutexwait_lock in the dead lock case before issuing the warning and dropping into the schedule for ever loop. [ tglx Moved unlock before the WARN(), removed the pointless comment, massaged changelog, added Fixes tag ]",
    "enhanced_query": "In the Linux kernel, the following vulnerability has been resolved rtmutex Drop rt_mutexwait_lock before scheduling rt_mutex_handle_deadlock() is called with rt_mutexwait_lock held. In the good case it returns with the lock held and in the deadlock case it emits a warning and goes into an endless scheduling loop with the lock held, which triggers the scheduling in atomic warning. Unlock rt_mutexwait_lock in the dead lock case before issuing the warning and dropping into the schedule for ever loop. [ tglx Moved unlock before the WARN(), removed the pointless comment, massaged changelog, added Fixes tag ] Consider specifically these CWEs: CWE-413 CWE-765 CWE-362 CWE-451 CWE-832 CWE-356 CWE-667 CWE-833",
    "cwe_mentions": [
      "CWE-413",
      "CWE-765",
      "CWE-362",
      "CWE-451",
      "CWE-832",
      "CWE-356",
      "CWE-667",
      "CWE-833"
    ],
    "search_time": 3.253718376159668
  },
  "timestamp": "2025-07-12 04:47:19",
  "cve_id": "CVE-2024-46829",
  "result_count": 20,
  "results": [
    {
      "cwe_id": "356",
      "name": "Product UI does not Warn User of Unsafe Actions",
      "type": "base",
      "score": 2.3998000000000004,
      "relationship_count": 0
    },
    {
      "cwe_id": "416",
      "name": "Use After Free",
      "type": "variant",
      "score": 2.04,
      "relationship_count": 0
    },
    {
      "cwe_id": "123",
      "name": "Write-what-where Condition",
      "type": "base",
      "score": 1.7680000000000005,
      "relationship_count": 0
    },
    {
      "cwe_id": "120",
      "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
      "type": "base",
      "score": 1.7680000000000005,
      "relationship_count": 0
    },
    {
      "cwe_id": "833",
      "name": "Deadlock",
      "type": "Base",
      "score": 1.7089526197750529,
      "relationship_count": 0
    },
    {
      "cwe_id": "832",
      "name": "Unlock of a Resource that is not Locked",
      "type": "Base",
      "score": 1.691637477201127,
      "relationship_count": 0
    },
    {
      "cwe_id": "413",
      "name": "Improper Resource Locking",
      "type": "Base",
      "score": 1.6908011936638145,
      "relationship_count": 0
    },
    {
      "cwe_id": "765",
      "name": "Multiple Unlocks of a Critical Resource",
      "type": "Base",
      "score": 1.6879864241998939,
      "relationship_count": 0
    },
    {
      "cwe_id": "1325",
      "name": "Improperly Controlled Sequential Memory Allocation",
      "type": "base",
      "score": 1.6848000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "1265",
      "name": "Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls",
      "type": "base",
      "score": 1.6848000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "386",
      "name": "Symbolic Name not Mapping to Correct Object",
      "type": "base",
      "score": 1.6744000000000003,
      "relationship_count": 0
    },
    {
      "cwe_id": "61",
      "name": "UNIX Symbolic Link (Symlink) Following",
      "type": "compound",
      "score": 1.61,
      "relationship_count": 0
    },
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "type": "Base",
      "score": 1.5078999564139757,
      "relationship_count": 0
    },
    {
      "cwe_id": "415",
      "name": "Double Free",
      "type": "variant",
      "score": 1.4784000000000002,
      "relationship_count": 0
    },
    {
      "cwe_id": "134",
      "name": "Use of Externally-Controlled Format String",
      "type": "base",
      "score": 1.3010400000000002,
      "relationship_count": 0
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "type": "base",
      "score": 1.3010400000000002,
      "relationship_count": 0
    },
    {
      "cwe_id": "170",
      "name": "Improper Null Termination",
      "type": "base",
      "score": 1.3010400000000002,
      "relationship_count": 0
    },
    {
      "cwe_id": "364",
      "name": "Signal Handler Race Condition",
      "type": "Base",
      "score": 1.2279444625010392,
      "relationship_count": 0
    },
    {
      "cwe_id": "363",
      "name": "Race Condition Enabling Link Following",
      "type": "base",
      "score": 1.2261600000000001,
      "relationship_count": 0
    },
    {
      "cwe_id": "590",
      "name": "Free of Memory not on the Heap",
      "type": "variant",
      "score": 1.20096,
      "relationship_count": 0
    }
  ]
}