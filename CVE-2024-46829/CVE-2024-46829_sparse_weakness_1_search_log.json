{
  "method": "sparse_weakness_1",
  "query": "In the Linux kernel, the following vulnerability has been resolved rtmutex Drop rt_mutexwait_lock before scheduling rt_mutex_handle_deadlock() is called with rt_mutexwait_lock held. In the good case it returns with the lock held and in the deadlock case it emits a warning and goes into an endless scheduling loop with the lock held, which triggers the scheduling in atomic warning. Unlock rt_mutexwait_lock in the dead lock case before issuing the warning and dropping into the schedule for ever loop. [ tglx Moved unlock before the WARN(), removed the pointless comment, massaged changelog, added Fixes tag ]",
  "keyphrases": {
    "weakness": "unlocking rt_mutexwait_lock before scheduling"
  },
  "timestamp": "2025-07-12T04:47:15.904152",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "833",
      "name": "Deadlock",
      "score": 506.9896195748562
    },
    {
      "doc_id": "667",
      "name": "Improper Locking",
      "score": 473.9124140369752
    },
    {
      "doc_id": "356",
      "name": "Product UI does not Warn User of Unsafe Actions",
      "score": 400.4636716456097
    },
    {
      "doc_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 390.2995051275298
    },
    {
      "doc_id": "451",
      "name": "User Interface (UI) Misrepresentation of Critical Information",
      "score": 382.5327789566056
    }
  ]
}