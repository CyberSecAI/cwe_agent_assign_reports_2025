{
  "cve_id": "CVE-2025-31479",
  "description": "canonical/get-workflow-version-action is a GitHub composite action to get commit SHA that GitHub Actions reusable workflow was called with. Prior to 1.0.1, if the get-workflow-version-action step fails, the exception output may include the GITHUB_TOKEN. If the full token is included in the exception output, GitHub will automatically redact the secret from the GitHub Actions logs. However, the token may be truncatedcausing part of the GITHUB_TOKEN to be displayed in plaintext in the GitHub Actions logs. Anyone with read access to the GitHub repository can view GitHub Actions logs. For public repositories, anyone can view the GitHub Actions logs. The opportunity to exploit this vulnerability is limitedthe GITHUB_TOKEN is automatically revoked when the job completes. However, there is an opportunity for an attack in the time between the GITHUB_TOKEN being displayed in the logs and the completion of the job. Users using the github-token input are impacted. This vulnerability is fixed in 1.0.1.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "",
    "impact": [
      "disclose GITHUB_TOKEN",
      "read access"
    ],
    "vector": "",
    "attacker": "",
    "product": "GitHub Actions reusable workflow",
    "version": "Prior to 1.0.1",
    "component": "canonical/get-workflow-version-action"
  },
  "reference_content": "## Analysis of CVE-2025-31479 based on provided content\n\nThe provided content is **RELEVANT** to CVE-2025-31479. It details a vulnerability in the `get-workflow-version-action` GitHub Action that can lead to partial leakage of the `GITHUB_TOKEN` secret. Here's a breakdown of the information:\n\n**Root cause of vulnerability:**\n\nThe root cause is the way the action's traceback formatting library displays exception output, which includes a partial version of the `GITHUB_TOKEN` secret.  GitHub's secret redaction mechanism doesn't catch this partial exposure.\n\n**Weaknesses/vulnerabilities present:**\n\n*   **Information Leakage:**  Partial exposure of a sensitive secret (`GITHUB_TOKEN`).\n*   **Insecure Exception Handling:**  Displaying potentially sensitive information in exception outputs.\n\n**Impact of exploitation:**\n\n*   An attacker with read access to the repository's GitHub Actions logs could potentially obtain a partial `GITHUB_TOKEN`.\n*   Although the token is automatically revoked upon job completion, there's a window of opportunity for exploitation, especially if `continue-on-error` is used or status check functions are present.\n*   A sophisticated attacker could potentially use the leaked token to perform actions on the repository, even with read-only permissions, potentially impacting other actions via the cache.\n\n**Attack vectors:**\n\n*   Triggering a failure in the `get-workflow-version-action` step.\n*   Reading the GitHub Actions logs.\n\n**Required attacker capabilities/position:**\n\n*   Read access to the GitHub repository.\n*   Ability to observe GitHub Actions logs.\n\n**Mitigation or fix:**\n\n*   **Update to v1.0.1:** The vulnerability is fixed in version 1.0.1 of the action. The `v1` tag has also been updated to include the fix.\n*   **Disable displaying locals in exceptions:** The commit message indicates the fix involves disabling the display of locals in exceptions (`pretty_exceptions_show_locals=False`) to prevent the token from being included in the output.\n*   **Revoke long-lived secrets:** If a long-lived secret (e.g., a personal access token) was used instead of the `GITHUB_TOKEN`, it should be immediately revoked.\n\n**Additional Details (more than official CVE description):**\n\n*   The issue was initially reported as GitHub Issue #2.\n*   The CVSS score is 8.2 (High).\n*   CVSS v3 base metrics: AV:N/AC:H/PR:L/UI:N/S:C/C:N/I:H/A:H\n*   The vulnerability was discovered by @dannystaple.\n*   A reference to a blog post detailing a similar attack scenario (CodeQL leaked secrets) is provided: <https://www.praetorian.com/blog/codeqleaked-public-secrets-exposure-leads-to-supply-chain-attack-on-github-codeql/>\n*   A reference to Cacheract is also provided: <https://github.com/AdnaneKhan/Cacheract>",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-532 | Insertion of Sensitive Information into Log File | 0.9 | Base | Allowed | Primary CWE |\n| CWE-201 | Insertion of Sensitive Information Into Sent Data | 0.7 | Base | Allowed | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship that influenced my decision was the parent-child relationship between CWE-538 (Insertion of Sensitive Information into Externally-Accessible File or Directory) and CWE-532 (Insertion of Sensitive Information into Log File). Since the vulnerability specifically involves the leakage of the GITHUB_TOKEN into log files, CWE-532 is a more precise classification. CWE-201 (Insertion of Sensitive Information Into Sent Data) was also considered as a potential secondary CWE because the logs are sent data, but CWE-532 provides more specificity.\n\n```mermaid\ngraph TD\n    cwe532[\"CWE-532: Insertion of Sensitive Information into Log File\"]\n    cwe538[\"CWE-538: Insertion of Sensitive Information into Externally-Accessible File or Directory\"]\n    cwe201[\"CWE-201: Insertion of Sensitive Information Into Sent Data\"]\n\n    cwe532 -->|CHILDOF| cwe538\n    cwe532 -->|CANALSOBE| cwe201\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe532 primary\n    class cwe538,cwe201 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **insecure exception handling**, which leads to the **insertion of the GITHUB_TOKEN (or a portion of it) into the log file**, and finally to **information disclosure** because anyone with read access can view the logs.\n  - Root Cause: **Insecure exception handling**\n  - Weakness: CWE-532 Insertion of Sensitive Information into Log File\n  - Impact: Information Disclosure\n\n## Summary of Analysis\nThe primary vulnerability is the **insertion of the GITHUB_TOKEN into the log file**. This aligns perfectly with CWE-532 (Insertion of Sensitive Information into Log File). The \"CVE Reference Links Content Summary\" confirms this, stating, \"Partial exposure of a sensitive secret (`GITHUB_TOKEN`).\" The retriever results also list CWE-532 as a candidate. While CWE-201 (Insertion of Sensitive Information Into Sent Data) is a plausible secondary CWE, CWE-532's specificity regarding log files makes it the better primary choice. The abstraction level of CWE-532 is Base, which is preferred. The evidence strongly supports the selection of CWE-532 as the primary CWE.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-214: Invocation of Process Using Visible Sensitive Information\n**Abstraction Level**: Base\n**Similarity Score**: 0.69\n**Source**: dense\n\n**Description**:\nA process is invoked with sensitive command-line arguments, environment variables, or other elements that can be seen by other processes on the operating system.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-639: Authorization Bypass Through User-Controlled Key\n**Abstraction Level**: Base\n**Similarity Score**: 0.68\n**Source**: dense\n\n**Description**:\nThe system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-88: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.67\n**Source**: dense\n\n**Description**:\nThe product constructs a string for a command to be executed by a separate component\nin another control sphere, but it does not properly delimit the\nintended arguments, options, or switches within that command string.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-538: Insertion of Sensitive Information into Externally-Accessible File or Directory\n**Abstraction Level**: Base\n**Similarity Score**: 0.67\n**Source**: dense\n\n**Description**:\nThe product places sensitive information into files or directories that are accessible to actors who are allowed to have access to the files, but not to the sensitive information.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-201: Insertion of Sensitive Information Into Sent Data\n**Abstraction Level**: Base\n**Similarity Score**: 0.67\n**Source**: dense\n\n**Description**:\nThe code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-1286: Improper Validation of Syntactic Correctness of Input\n**Abstraction Level**: Base\n**Similarity Score**: 0.67\n**Source**: dense\n\n**Description**:\nThe product receives input that is expected to be well-formed - i.e., to comply with a certain syntax - but it does not validate or incorrectly validates that the input complies with the syntax.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-209: Generation of Error Message Containing Sensitive Information\n**Abstraction Level**: Base\n**Similarity Score**: 0.67\n**Source**: dense\n\n**Description**:\nThe product generates an error message that includes sensitive information about its environment, users, or associated data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-267: Privilege Defined With Unsafe Actions\n**Abstraction Level**: Base\n**Similarity Score**: 0.67\n**Source**: dense\n\n**Description**:\nA particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\n**Abstraction Level**: Base\n**Similarity Score**: 0.67\n**Source**: dense\n\n**Description**:\nThe product does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the product does.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-214: Invocation of Process Using Visible Sensitive Information\n**Abstraction Level**: Base\n**Similarity Score**: 1349.41\n**Source**: sparse\n\n**Description**:\nA process is invoked with sensitive command-line arguments, environment variables, or other elements that can be seen by other processes on the operating system.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-285: Improper Authorization\n**Abstraction Level**: Class\n**Similarity Score**: 1228.53\n**Source**: sparse\n\n**Description**:\nThe product does not perform or incorrectly performs an",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-532 | Insertion of Sensitive Information into Log File | 0.9 | Base | Allowed | Primary CWE |\n| CWE-201 | Insertion of Sensitive Information Into Sent Data | 0.7 | Base | Allowed | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship that influenced my decision was the parent-child relationship between CWE-538 (Insertion of Sensitive Information into Externally-Accessible File or Directory) and CWE-532 (Insertion of Sensitive Information into Log File). Since the vulnerability specifically involves the leakage of the GITHUB_TOKEN into log files, CWE-532 is a more precise classification. CWE-201 (Insertion of Sensitive Information Into Sent Data) was also considered as a potential secondary CWE because the logs are sent data, but CWE-532 provides more specificity.\n\n```mermaid\ngraph TD\n    cwe532[\"CWE-532: Insertion of Sensitive Information into Log File\"]\n    cwe538[\"CWE-538: Insertion of Sensitive Information into Externally-Accessible File or Directory\"]\n    cwe201[\"CWE-201: Insertion of Sensitive Information Into Sent Data\"]\n\n    cwe532 -->|CHILDOF| cwe538\n    cwe532 -->|CANALSOBE| cwe201\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe532 primary\n    class cwe538,cwe201 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **insecure exception handling**, which leads to the **insertion of the GITHUB_TOKEN (or a portion of it) into the log file**, and finally to **information disclosure** because anyone with read access can view the logs.\n  - Root Cause: **Insecure exception handling**\n  - Weakness: CWE-532 Insertion of Sensitive Information into Log File\n  - Impact: Information Disclosure\n\n## Summary of Analysis\nThe primary vulnerability is the **insertion of the GITHUB_TOKEN into the log file**. This aligns perfectly with CWE-532 (Insertion of Sensitive Information into Log File). The \"CVE Reference Links Content Summary\" confirms this, stating, \"Partial exposure of a sensitive secret (`GITHUB_TOKEN`).\" The retriever results also list CWE-532 as a candidate. While CWE-201 (Insertion of Sensitive Information Into Sent Data) is a plausible secondary CWE, CWE-532's specificity regarding log files makes it the better primary choice. The abstraction level of CWE-532 is Base, which is preferred. The evidence strongly supports the selection of CWE-532 as the primary CWE.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-214: Invocation of Process Using Visible Sensitive Information\n**Abstraction Level**: Base\n**Similarity Score**: 0.69\n**Source**: dense\n\n**Description**:\nA process is invoked with sensitive command-line arguments, environment variables, or other elements that can be seen by other processes on the operating system.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-639: Authorization Bypass Through User-Controlled Key\n**Abstraction Level**: Base\n**Similarity Score**: 0.68\n**Source**: dense\n\n**Description**:\nThe system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-88: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.67\n**Source**: dense\n\n**Description**:\nThe product constructs a string for a command to be executed by a separate component\nin another control sphere, but it does not properly delimit the\nintended arguments, options, or switches within that command string.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-538: Insertion of Sensitive Information into Externally-Accessible File or Directory\n**Abstraction Level**: Base\n**Similarity Score**: 0.67\n**Source**: dense\n\n**Description**:\nThe product places sensitive information into files or directories that are accessible to actors who are allowed to have access to the files, but not to the sensitive information.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-201: Insertion of Sensitive Information Into Sent Data\n**Abstraction Level**: Base\n**Similarity Score**: 0.67\n**Source**: dense\n\n**Description**:\nThe code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-1286: Improper Validation of Syntactic Correctness of Input\n**Abstraction Level**: Base\n**Similarity Score**: 0.67\n**Source**: dense\n\n**Description**:\nThe product receives input that is expected to be well-formed - i.e., to comply with a certain syntax - but it does not validate or incorrectly validates that the input complies with the syntax.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-209: Generation of Error Message Containing Sensitive Information\n**Abstraction Level**: Base\n**Similarity Score**: 0.67\n**Source**: dense\n\n**Description**:\nThe product generates an error message that includes sensitive information about its environment, users, or associated data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-267: Privilege Defined With Unsafe Actions\n**Abstraction Level**: Base\n**Similarity Score**: 0.67\n**Source**: dense\n\n**Description**:\nA particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\n**Abstraction Level**: Base\n**Similarity Score**: 0.67\n**Source**: dense\n\n**Description**:\nThe product does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the product does.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-214: Invocation of Process Using Visible Sensitive Information\n**Abstraction Level**: Base\n**Similarity Score**: 1349.41\n**Source**: sparse\n\n**Description**:\nA process is invoked with sensitive command-line arguments, environment variables, or other elements that can be seen by other processes on the operating system.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-285: Improper Authorization\n**Abstraction Level**: Class\n**Similarity Score**: 1228.53\n**Source**: sparse\n\n**Description**:\nThe product does not perform or incorrectly performs an\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-88:**\n- 88 (Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')) - ROOT\n\n\n**Chain starting from CWE-639:**\n- 639 (Authorization Bypass Through User-Controlled Key) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "214",
        "name": "Invocation of Process Using Visible Sensitive Information",
        "source": "sparse"
      },
      "similarity": 372.21282044480125
    },
    {
      "metadata": {
        "doc_id": "285",
        "name": "Improper Authorization",
        "source": "sparse"
      },
      "similarity": 316.3595900093933
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 307.1883301897009
    },
    {
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "source": "sparse"
      },
      "similarity": 302.36977633599025
    },
    {
      "metadata": {
        "doc_id": "287",
        "name": "Improper Authentication",
        "source": "sparse"
      },
      "similarity": 300.446860293517
    },
    {
      "metadata": {
        "doc_id": "532",
        "name": "Insertion of Sensitive Information into Log File",
        "source": "sparse"
      },
      "similarity": 299.3962063650344
    },
    {
      "metadata": {
        "doc_id": "639",
        "name": "Authorization Bypass Through User-Controlled Key",
        "source": "sparse"
      },
      "similarity": 293.98327720162973
    },
    {
      "metadata": {
        "doc_id": "212",
        "name": "Improper Removal of Sensitive Information Before Storage or Transfer",
        "source": "sparse"
      },
      "similarity": 288.49659511126384
    },
    {
      "metadata": {
        "doc_id": "527",
        "name": "Exposure of Version-Control Repository to an Unauthorized Control Sphere",
        "type": "Variant",
        "original_content": "The product stores a CVS, git, or other repository in a directory, archive, or other resource that is stored, transferred, or otherwise made accessible to unauthorized actors.",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.3909851226237646,
            "graph": 1.3566437389849013
          }
        }
      },
      "similarity": 0.3909851226237646
    },
    {
      "doc_id": "613",
      "text": "CWE-613: Insufficient Session Expiration",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "613",
        "name": "Insufficient Session Expiration",
        "type": "base",
        "original_content": "CWE-613: Insufficient Session Expiration",
        "relationships": [
          {
            "source_id": "613",
            "target_id": "352",
            "label": "REQUIREDBY",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "613",
            "target_id": "287",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "613",
            "target_id": "672",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "613",
            "target_id": "672",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "672",
            "target_id": "613",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "352",
            "target_id": "613",
            "label": "REQUIRES",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "287",
            "target_id": "613",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "287",
                  "613",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "287"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "287",
                  "613",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "287"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "613",
                  "287",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "287"
            }
          }
        },
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-88",
      "CWE-639",
      "CWE-1286",
      "CWE-201",
      "CWE-532",
      "CWE-209",
      "CWE-538",
      "CWE-285",
      "CWE-267",
      "CWE-497",
      "CWE-214",
      "CWE-212"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}