{
  "method": "sparse_rootcause_1",
  "query": "In the Linux kernel, the following vulnerability has been resolved drm/i915/gt Use spin_lock_irqsave() in interruptible context spin_lock/unlock() functions used in interrupt contexts could result in a deadlock, as seen in GitLab issue #13399, which occurs when interrupt comes in while holding a lock. Try to remedy the problem by saving irq state before spin lock acquisition. v2 add irqs state save/restore calls to all locks/unlocks in signal_irq_work() execution (Maciej) v3 use with spin_lock_irqsave() in guc_lrc_desc_unpin() instead of other lock/unlock calls and add Fixes and Cc tags (Tvrtko) change title and commit message (cherry picked from commit c088387ddd6482b40f21ccf23db1125e8fa4af7e)",
  "keyphrases": {
    "rootcause": "deadlock"
  },
  "timestamp": "2025-07-12T09:56:02.395711",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "667",
      "name": "Improper Locking",
      "score": 502.322726040373
    },
    {
      "doc_id": "833",
      "name": "Deadlock",
      "score": 470.3757511905388
    },
    {
      "doc_id": "663",
      "name": "Use of a Non-reentrant Function in a Concurrent Context",
      "score": 411.80315803598836
    },
    {
      "doc_id": "116",
      "name": "Improper Encoding or Escaping of Output",
      "score": 401.64637042993553
    },
    {
      "doc_id": "364",
      "name": "Signal Handler Race Condition",
      "score": 397.4089304530273
    }
  ]
}