{
  "cve_id": "CVE-2025-23142",
  "description": "In the Linux kernel, the following vulnerability has been resolved sctp detect and prevent references to a freed transport in sendmsg sctp_sendmsg() re-uses associations and transports when possible by doing a lookup based on the socket endpoint and the message destination address, and then sctp_sendmsg_to_asoc() sets the selected transport in all the message chunks to be sent. Theres a possible **race condition** if another thread triggers the removal of that selected transport, for instance, by explicitly unbinding an address with setsockopt(SCTP_SOCKOPT_BINDX_REM), after the chunks have been set up and before the message is sent. This can happen if the send buffer is full, during the period when the sender thread temporarily releases the socket lock in sctp_wait_for_sndbuf(). This causes the access to the transport data in sctp_outq_select_transport(), when the association outqueue is flushed, to result in a **use-after-free read**. This change avoids this scenario by having sctp_transport_free() signal the freeing of the transport, tagging it as dead. In order to do this, the patch restores the dead bit in struct sctp_transport, which was removed in commit 47faa1e4c50e (sctp remove the dead field of sctp_transport). Then, in the scenario where the sender thread has released the socket lock in sctp_wait_for_sndbuf(), the bit is checked again after re-acquiring the socket lock to detect the deletion. This is done while holding a reference to the transport to prevent it from being freed in the process. If the transport was deleted while the socket lock was relinquished, sctp_sendmsg_to_asoc() will return -EAGAIN to let userspace retry the send. The bug was found by a private syzbot instance (see the error report [1] and the C reproducer that triggers it [2]).",
  "key_phrases": {
    "rootcause": "race condition",
    "weakness": "use-after-free read",
    "impact": "",
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": "sendmsg sctp_sendmsg()"
  },
  "reference_content": "UNRELATED\n\nAll provided content describes Anubis, a system designed to mitigate website scraping by AI companies. It does not relate to any vulnerability or CVE. The content details a defense mechanism, not a weakness.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.9 | Class | Allowed-with-Review | Primary CWE. The **race condition** is the root cause. |\n| CWE-416 | Use After Free | 0.8 | Variant | Allowed | Secondary CWE. The **use-after-free read** is a direct consequence of the race condition. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.85\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary relationship is that the **race condition** (CWE-362) leads to the **use-after-free** (CWE-416). CWE-362 is a Class, while CWE-416 is a Variant, which is the preferred level of abstraction. CWE-362 has a child CWE, CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition, but the description doesn't specify a TOCTOU condition.\n\n```mermaid\ngraph TD\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    cwe416[\"CWE-416: Use After Free\"]\n    cwe367[\"CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\"]\n\n    cwe416 -- CANFOLLOW --> cwe362\n    cwe367 -- CHILDOF --> cwe362\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe362 primary\n    class cwe416 secondary\n    class cwe367 tertiary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a **race condition** (CWE-362) where a transport is freed by one thread while another thread is still using it, leading to a **use-after-free read** (CWE-416).\n\n## Summary of Analysis\nThe vulnerability description clearly indicates a **race condition** as the root cause, which results in a **use-after-free read**. The evidence lies in the description: \"Theres a possible **race condition** if another thread triggers the removal of that selected transport... This causes the access to the transport data... to result in a **use-after-free read**.\"\n\nCWE-362 (Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')) is chosen as the primary CWE because it represents the root cause of the vulnerability. The **race condition** allows a resource to be freed prematurely.\n\nCWE-416 (Use After Free) is selected as a secondary CWE because it is the direct result of the **race condition**. The thread attempts to access the freed transport, leading to the **use-after-free**.\n\nOther CWEs considered but not used:\n\n*   CWE-367 (Time-of-check Time-of-use (TOCTOU) Race Condition): While related to **race conditions**, the description doesn't explicitly mention a check-then-use scenario.\n*   CWE-667 (Improper Locking): Locking is mentioned as part of the mitigation, but the core issue is the **race condition**, not the locking mechanism itself.\n* CWE-366 (Race Condition within a Thread): This is a more specific version of CWE-362, but the description doesn't provide enough information to limit the race condition to within a single thread.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.9 | Class | Allowed-with-Review | Primary CWE. The **race condition** is the root cause. |\n| CWE-416 | Use After Free | 0.8 | Variant | Allowed | Secondary CWE. The **use-after-free read** is a direct consequence of the race condition. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.85\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary relationship is that the **race condition** (CWE-362) leads to the **use-after-free** (CWE-416). CWE-362 is a Class, while CWE-416 is a Variant, which is the preferred level of abstraction. CWE-362 has a child CWE, CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition, but the description doesn't specify a TOCTOU condition.\n\n```mermaid\ngraph TD\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    cwe416[\"CWE-416: Use After Free\"]\n    cwe367[\"CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\"]\n\n    cwe416 -- CANFOLLOW --> cwe362\n    cwe367 -- CHILDOF --> cwe362\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe362 primary\n    class cwe416 secondary\n    class cwe367 tertiary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a **race condition** (CWE-362) where a transport is freed by one thread while another thread is still using it, leading to a **use-after-free read** (CWE-416).\n\n## Summary of Analysis\nThe vulnerability description clearly indicates a **race condition** as the root cause, which results in a **use-after-free read**. The evidence lies in the description: \"Theres a possible **race condition** if another thread triggers the removal of that selected transport... This causes the access to the transport data... to result in a **use-after-free read**.\"\n\nCWE-362 (Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')) is chosen as the primary CWE because it represents the root cause of the vulnerability. The **race condition** allows a resource to be freed prematurely.\n\nCWE-416 (Use After Free) is selected as a secondary CWE because it is the direct result of the **race condition**. The thread attempts to access the freed transport, leading to the **use-after-free**.\n\nOther CWEs considered but not used:\n\n*   CWE-367 (Time-of-check Time-of-use (TOCTOU) Race Condition): While related to **race conditions**, the description doesn't explicitly mention a check-then-use scenario.\n*   CWE-667 (Improper Locking): Locking is mentioned as part of the mitigation, but the core issue is the **race condition**, not the locking mechanism itself.\n* CWE-366 (Race Condition within a Thread): This is a more specific version of CWE-362, but the description doesn't provide enough information to limit the race condition to within a single thread.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-416:**\n- 416 (Use After Free) - ROOT\n\n\n**Chain starting from CWE-667:**\n- 667 (Improper Locking) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Race Condition",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "416",
        "name": "Use After Free",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Use-After-Free",
        "match_reason": "term_in_phrase_whole_phrase"
      },
      "similarity": 800.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "667",
        "name": "Improper Locking",
        "source": "sparse"
      },
      "similarity": 1502.8277072966166
    },
    {
      "metadata": {
        "doc_id": "367",
        "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
        "source": "sparse"
      },
      "similarity": 1467.325867876559
    },
    {
      "metadata": {
        "doc_id": "319",
        "name": "Cleartext Transmission of Sensitive Information",
        "source": "sparse"
      },
      "similarity": 1451.0175651074615
    },
    {
      "metadata": {
        "doc_id": "833",
        "name": "Deadlock",
        "source": "sparse"
      },
      "similarity": 1406.8200023397185
    },
    {
      "metadata": {
        "doc_id": "295",
        "name": "Improper Certificate Validation",
        "source": "sparse"
      },
      "similarity": 1402.5626629199346
    },
    {
      "metadata": {
        "doc_id": "364",
        "name": "Signal Handler Race Condition",
        "source": "sparse"
      },
      "similarity": 1396.7412959536869
    },
    {
      "metadata": {
        "doc_id": "366",
        "name": "Race Condition within a Thread",
        "type": "Base",
        "original_content": "If two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.",
        "keyphrase_source": "weakness:use-after-free read",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5445680867700547,
            "graph": 1.7109262549283042
          }
        }
      },
      "similarity": 0.5445680867700547
    },
    {
      "doc_id": "609",
      "text": "CWE-609: Double-Checked Locking",
      "score": 2.8651999999999997,
      "metadata": {
        "doc_id": "609",
        "name": "Double-Checked Locking",
        "type": "base",
        "original_content": "CWE-609: Double-Checked Locking",
        "relationships": [
          {
            "source_id": "609",
            "target_id": "367",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "609",
            "target_id": "667",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "667",
            "target_id": "609",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "367",
            "target_id": "609",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "abstraction_path": 0.7200000000000001,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "367",
                  "609",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "367"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "667",
                  "609",
                  "PARENTOF"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "abstraction_path_down",
              "source": "667"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "367",
                  "609",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "367"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "609",
                  "367",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "367"
            }
          }
        },
        "abstraction_level": "base",
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.8651999999999997
          }
        }
      },
      "similarity": 2.8651999999999997
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-416",
      "CWE-667",
      "CWE-362",
      "CWE-366",
      "CWE-367"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}