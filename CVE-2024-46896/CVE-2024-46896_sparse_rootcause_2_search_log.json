{
  "method": "sparse_rootcause_2",
  "query": "In the Linux kernel, the following vulnerability has been resolved drm/amdgpu dont access invalid sched Since 2320c9e6a768 (drm/sched memset() job in drm_sched_job_init()) accessing job->base.sched can produce unexpected results as the initialisation of (*job)->base.sched done in amdgpu_job_alloc is overwritten by the memset. This commit fixes an issue when a CS would fail validation and would be rejected after job->num_ibs is incremented. In this case, amdgpu_ib_free(ring->adev, ...) will be called, which would crash the machine because the ring value is bogus. To fix this, pass a NULL pointer to amdgpu_ib_free() we can do this because the device is actually not used in this function. The next commit will remove the ring argument completely. (cherry picked from commit 2ae520cb12831d264ceb97c61f72c59d33c0dbd7)",
  "keyphrases": {
    "rootcause": "memset() in drm_sched_job_init() overwrites job->base.sched"
  },
  "timestamp": "2025-07-13T17:42:15.273969",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "911",
      "name": "Improper Update of Reference Count",
      "score": 696.428806696798
    },
    {
      "doc_id": "835",
      "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
      "score": 633.0595635551556
    },
    {
      "doc_id": "824",
      "name": "Access of Uninitialized Pointer",
      "score": 622.1541957998156
    },
    {
      "doc_id": "667",
      "name": "Improper Locking",
      "score": 619.9921983059974
    },
    {
      "doc_id": "617",
      "name": "Reachable Assertion",
      "score": 615.5156110987592
    }
  ]
}