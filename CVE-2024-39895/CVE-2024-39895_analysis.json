{
  "cve_id": "CVE-2024-39895",
  "description": "Directus is a real-time API and App dashboard for managing SQL database content. A denial of service (DoS) attack by **field duplication in GraphQL** is a type of attack where an attacker exploits the flexibility of GraphQL to overwhelm a server by requesting the same field multiple times in a single query. This can cause the server to perform redundant computations and consume excessive resources, leading to a denial of service for legitimate users. Request to the endpoint /graphql are sent when visualizing graphs generated at a dashboard. By modifying the data sent and duplicating many times the fields a DoS attack is possible. This vulnerability is fixed in 10.12.0.",
  "key_phrases": {
    "rootcause": "field duplication in GraphQL",
    "weakness": "",
    "impact": [
      "DoS attack",
      "denial of service"
    ],
    "vector": "",
    "attacker": "",
    "product": "Directus",
    "version": "10.12.0",
    "component": "/graphql endpoint"
  },
  "reference_content": "Based on the provided information, here's an analysis of CVE-2024-39895:\n\n**Root Cause of Vulnerability:**\nThe vulnerability stems from the lack of a limit on the number of tokens parsed in GraphQL queries. This allows an attacker to craft a query with a large number of duplicated fields, leading to excessive resource consumption on the server.\n\n**Weaknesses/Vulnerabilities Present:**\n- **Unrestricted GraphQL Query Complexity:** The primary weakness is the absence of a mechanism to limit the complexity of GraphQL queries, specifically regarding the number of tokens being parsed. This allows for field duplication attacks.\n- **Denial of Service (DoS):** The vulnerability allows for a denial-of-service attack by overwhelming the server with computationally intensive queries.\n\n**Impact of Exploitation:**\n- **Service Unavailability:** Successful exploitation leads to the server becoming unresponsive, causing a denial of service for legitimate users.\n- **Resource Exhaustion:** The attack causes excessive consumption of server resources, leading to performance degradation and potential service crashes.\n\n**Attack Vectors:**\n- **Network:** The attack is performed over the network by sending a crafted HTTP request to the `/graphql` endpoint.\n- **GraphQL API:** The attack leverages the GraphQL API to send a malicious query.\n\n**Required Attacker Capabilities/Position:**\n- **Network Access:** The attacker needs to be able to send HTTP requests to the vulnerable server.\n- **Basic Understanding of GraphQL:** The attacker needs to understand how to construct GraphQL queries with duplicated fields.\n- **Low Privileges:** The attacker only needs low privileges to exploit this vulnerability, as no special permissions are required to send the crafted queries.\n\n**Technical Details:**\n- The vulnerability occurs in the Directus application, specifically in how it handles GraphQL queries.\n- The fix involves adding a configurable limit (`GRAPHQL_QUERY_TOKEN_LIMIT`) to the number of tokens parsed when processing GraphQL queries. This limit is set to 5000 by default.\n- The patch introduces a `maxTokens` option in the GraphQL parser to limit the number of tokens, preventing excessively large queries from being processed.\n- The vulnerability is located in the `/api/src/middleware/graphql.ts` file, and the fix is implemented by adding the maxTokens option when parsing the query with the `graphql-js` library\n\n**Code Snippets:**\n- The vulnerability is triggered by sending a GraphQL query where fields are massively duplicated, as seen in the provided PoC example:\n```\n{'query': 'query { query_4f4722ea: test_table_aggregated { max {id id id id id id id id id id } max {id id id id id id id id id id } max {id id id id id id id id id id } max {id id id id id id id id id id } max {id id id id id id id id id id } max {id id id id id id id id id id } max {id id id id id id id id id id } max {id id id id id id id id id id } max {id id id id id id id id id id } max {id id id id id id id id id id } } }'}\n```\n- The fix includes changes in `api/src/middleware/graphql.ts` which introduces the `maxTokens` setting to the parser:\n```\n document = parse(new Source(query), {\n        maxTokens: Number(env['GRAPHQL_QUERY_TOKEN_LIMIT']),\n      });\n```\n\n**CVSS Metrics:**\n- CVSS v3 Base Score: 6.5\n- Attack Vector: Network\n- Attack Complexity: Low\n- Privileges Required: Low\n- User Interaction: None\n- Scope: Unchanged\n- Confidentiality: None\n- Integrity: None\n- Availability: High\n- CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H\n\n**CVE ID:** CVE-2024-39895\n\n**CWE:** CWE-400 (Uncontrolled Resource Consumption)\n\nIn summary, CVE-2024-39895 is a moderate severity vulnerability that allows an attacker to cause a denial of service by sending specially crafted GraphQL queries with duplicated fields, leading to excessive resource consumption. The fix introduces a limit on the number of tokens parsed in GraphQL queries.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-400 | Uncontrolled Resource Consumption | 1.0 | Class | Allowed-with-Review | The primary weakness is the lack of a limit on the number of tokens parsed in GraphQL queries, leading to excessive resource consumption. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship that influenced my decision was the parent-child relationship between CWE-400 and its potential children. While more specific CWEs like CWE-770 (Allocation of Resources Without Limits or Throttling) exist, the vulnerability description focuses on the general exhaustion of resources due to the **field duplication in GraphQL**. Therefore, CWE-400, a class-level CWE, is the most appropriate.\n\n```mermaid\ngraph TD\n    cwe400[\"CWE-400: Uncontrolled Resource Consumption\"]\n    cwe770[\"CWE-770: Allocation of Resources Without Limits or Throttling\"]\n    cwe789[\"CWE-789: Memory Allocation with Excessive Size Value\"]\n    cwe1333[\"CWE-1333: Inefficient Regular Expression Complexity\"]\n\n    cwe770 -->|CHILDOF| cwe400\n    cwe789 -->|CHILDOF| cwe400\n    cwe1333 -->|CHILDOF| cwe400\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe400 primary\n    class cwe770,cwe789,cwe1333 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **uncontrolled** **field duplication in GraphQL** leading to excessive resource consumption, and culminating in a denial-of-service (DoS) attack.\n\n**Chain:**\n1.  **Root Cause:** **Uncontrolled** **field duplication in GraphQL** (Lack of input validation or limits)\n2.  **Weakness:** Excessive Resource Consumption\n3.  **Impact:** Denial of Service\n\n## Summary of Analysis\nThe initial analysis strongly pointed towards CWE-400 (Uncontrolled Resource Consumption) as the primary weakness. The description clearly states that the vulnerability allows an attacker to overwhelm the server by requesting the same field multiple times, leading to excessive resource consumption and a denial of service. The provided evidence from the CVE Reference Links Content Summary reinforces this assessment, highlighting the lack of a limit on the number of tokens parsed in GraphQL queries as the root cause.\n\nThe graph relationships further solidified this decision. While CWE-770 (Allocation of Resources Without Limits or Throttling) and CWE-789 (Memory Allocation with Excessive Size Value) are potential candidates, they are more specific cases of uncontrolled resource consumption. The vulnerability description does not specifically mention memory allocation or resource throttling issues, making CWE-400 the most appropriate and general classification.\n\nThe selected CWE is at the optimal level of specificity because it captures the core weakness of uncontrolled resource consumption without being overly specific about the type of resource being consumed or the mechanism by which it is being exhausted.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-400: Uncontrolled Resource Consumption\n**Abstraction Level**: Class\n**Similarity Score**: 0.68\n**Source**: dense\n\n**Description**:\nThe product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-400 is intended for incorrect behaviors in which the product is expected to track and restrict how many resources it consumes, but CWE-400 is often misused because it is conflated with the \"technical impact\" of vulnerabilities in which resource consumption occurs. It is sometimes used for low-information vulnerability reports. It is a level-1 Class (i.e., a child of a Pillar).\n\n## CWE-770: Allocation of Resources Without Limits or Throttling\n**Abstraction Level**: Base\n**Similarity Score**: 0.68\n**Source**: dense\n\n**Description**:\nThe product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-1284: Improper Validation of Specified Quantity in Input\n**Abstraction Level**: Base\n**Similarity Score**: 0.68\n**Source**: dense\n\n**Description**:\nThe product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-789: Memory Allocation with Excessive Size Value\n**Abstraction Level**: Variant\n**Similarity Score**: 2.60\n**Source**: graph\n\n**Description**:\nThe product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**CWEs Considered but Not Used:**\n\n*   **CWE-770 (Allocation of Resources Without Limits or Throttling):** While this CWE is related to resource consumption, it focuses specifically on the allocation of resources without limits. The vulnerability description is broader and encompasses general resource exhaustion, not just allocation issues. Therefore, CWE-400 is a more appropriate fit.\n*   **CWE-1284 (Improper Validation of Specified Quantity in Input):** This CWE relates to the improper validation of input quantities. While the **field duplication in GraphQL** can be seen as a quantity, the primary issue is not the validation of that quantity but the lack of a limit on the complexity of the query.\n*   **CWE-789 (Memory Allocation with Excessive Size Value):** Similar to CWE-770, this CWE is more specific than the general resource exhaustion described in the vulnerability. It focuses on memory allocation with excessive size values, which is not the primary issue in this case.\n\nI am overriding the discouraged usage of CWE-400 as a class level CWE because the description of this CVE is high-level and doesn't go into the details of the resources consumed which would allow selection of a lower level CWE.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-400 | Uncontrolled Resource Consumption | 1.0 | Class | Allowed-with-Review | The primary weakness is the lack of a limit on the number of tokens parsed in GraphQL queries, leading to excessive resource consumption. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship that influenced my decision was the parent-child relationship between CWE-400 and its potential children. While more specific CWEs like CWE-770 (Allocation of Resources Without Limits or Throttling) exist, the vulnerability description focuses on the general exhaustion of resources due to the **field duplication in GraphQL**. Therefore, CWE-400, a class-level CWE, is the most appropriate.\n\n```mermaid\ngraph TD\n    cwe400[\"CWE-400: Uncontrolled Resource Consumption\"]\n    cwe770[\"CWE-770: Allocation of Resources Without Limits or Throttling\"]\n    cwe789[\"CWE-789: Memory Allocation with Excessive Size Value\"]\n    cwe1333[\"CWE-1333: Inefficient Regular Expression Complexity\"]\n\n    cwe770 -->|CHILDOF| cwe400\n    cwe789 -->|CHILDOF| cwe400\n    cwe1333 -->|CHILDOF| cwe400\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe400 primary\n    class cwe770,cwe789,cwe1333 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **uncontrolled** **field duplication in GraphQL** leading to excessive resource consumption, and culminating in a denial-of-service (DoS) attack.\n\n**Chain:**\n1.  **Root Cause:** **Uncontrolled** **field duplication in GraphQL** (Lack of input validation or limits)\n2.  **Weakness:** Excessive Resource Consumption\n3.  **Impact:** Denial of Service\n\n## Summary of Analysis\nThe initial analysis strongly pointed towards CWE-400 (Uncontrolled Resource Consumption) as the primary weakness. The description clearly states that the vulnerability allows an attacker to overwhelm the server by requesting the same field multiple times, leading to excessive resource consumption and a denial of service. The provided evidence from the CVE Reference Links Content Summary reinforces this assessment, highlighting the lack of a limit on the number of tokens parsed in GraphQL queries as the root cause.\n\nThe graph relationships further solidified this decision. While CWE-770 (Allocation of Resources Without Limits or Throttling) and CWE-789 (Memory Allocation with Excessive Size Value) are potential candidates, they are more specific cases of uncontrolled resource consumption. The vulnerability description does not specifically mention memory allocation or resource throttling issues, making CWE-400 the most appropriate and general classification.\n\nThe selected CWE is at the optimal level of specificity because it captures the core weakness of uncontrolled resource consumption without being overly specific about the type of resource being consumed or the mechanism by which it is being exhausted.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-400: Uncontrolled Resource Consumption\n**Abstraction Level**: Class\n**Similarity Score**: 0.68\n**Source**: dense\n\n**Description**:\nThe product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-400 is intended for incorrect behaviors in which the product is expected to track and restrict how many resources it consumes, but CWE-400 is often misused because it is conflated with the \"technical impact\" of vulnerabilities in which resource consumption occurs. It is sometimes used for low-information vulnerability reports. It is a level-1 Class (i.e., a child of a Pillar).\n\n## CWE-770: Allocation of Resources Without Limits or Throttling\n**Abstraction Level**: Base\n**Similarity Score**: 0.68\n**Source**: dense\n\n**Description**:\nThe product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-1284: Improper Validation of Specified Quantity in Input\n**Abstraction Level**: Base\n**Similarity Score**: 0.68\n**Source**: dense\n\n**Description**:\nThe product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-789: Memory Allocation with Excessive Size Value\n**Abstraction Level**: Variant\n**Similarity Score**: 2.60\n**Source**: graph\n\n**Description**:\nThe product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**CWEs Considered but Not Used:**\n\n*   **CWE-770 (Allocation of Resources Without Limits or Throttling):** While this CWE is related to resource consumption, it focuses specifically on the allocation of resources without limits. The vulnerability description is broader and encompasses general resource exhaustion, not just allocation issues. Therefore, CWE-400 is a more appropriate fit.\n*   **CWE-1284 (Improper Validation of Specified Quantity in Input):** This CWE relates to the improper validation of input quantities. While the **field duplication in GraphQL** can be seen as a quantity, the primary issue is not the validation of that quantity but the lack of a limit on the complexity of the query.\n*   **CWE-789 (Memory Allocation with Excessive Size Value):** Similar to CWE-770, this CWE is more specific than the general resource exhaustion described in the vulnerability. It focuses on memory allocation with excessive size values, which is not the primary issue in this case.\n\nI am overriding the discouraged usage of CWE-400 as a class level CWE because the description of this CVE is high-level and doesn't go into the details of the resources consumed which would allow selection of a lower level CWE.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-1284:**\n- 1284 (Improper Validation of Specified Quantity in Input) - ROOT\n\n\n**Chain starting from CWE-400:**\n- 400 (Uncontrolled Resource Consumption) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 708.4537547629157
    },
    {
      "metadata": {
        "doc_id": "1176",
        "name": "Inefficient CPU Computation",
        "source": "sparse"
      },
      "similarity": 689.2910423204212
    },
    {
      "metadata": {
        "doc_id": "674",
        "name": "Uncontrolled Recursion",
        "source": "sparse"
      },
      "similarity": 688.7006752089065
    },
    {
      "metadata": {
        "doc_id": "770",
        "name": "Allocation of Resources Without Limits or Throttling",
        "source": "sparse"
      },
      "similarity": 669.6515959697756
    },
    {
      "metadata": {
        "doc_id": "400",
        "name": "Uncontrolled Resource Consumption",
        "source": "sparse"
      },
      "similarity": 668.8451334297184
    },
    {
      "metadata": {
        "doc_id": "1284",
        "name": "Improper Validation of Specified Quantity in Input",
        "source": "sparse"
      },
      "similarity": 665.8574269621683
    },
    {
      "metadata": {
        "doc_id": "789",
        "name": "Memory Allocation with Excessive Size Value",
        "source": "sparse"
      },
      "similarity": 663.4083001967188
    },
    {
      "metadata": {
        "doc_id": "1333",
        "name": "Inefficient Regular Expression Complexity",
        "source": "sparse"
      },
      "similarity": 656.6120875182712
    },
    {
      "metadata": {
        "doc_id": "943",
        "name": "Improper Neutralization of Special Elements in Data Query Logic",
        "type": "Class",
        "original_content": "The product generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query.",
        "keyphrase_source": "rootcause:field duplication in GraphQL",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
          "comments": "Examine children of this entry to see if there is a better fit",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.4590822680788435
          }
        }
      },
      "similarity": 0.4590822680788435
    },
    {
      "doc_id": "410",
      "text": "The product's resource pool is not large enough to handle peak demand, which allows an attacker to prevent others from accessing the resource by using a (relatively) large number of requests for resources.",
      "score": 0.498519609392658,
      "metadata": {
        "doc_id": "410",
        "name": "Insufficient Resource Pool",
        "type": "Base",
        "extended_description": "Frequently the consequence is a \"flood\" of connection or sessions.",
        "alternate_terms": [],
        "original_content": "The product's resource pool is not large enough to handle peak demand, which allows an attacker to prevent others from accessing the resource by using a (relatively) large number of requests for resources.",
        "relationships": [
          {
            "source_id": "410",
            "target_id": "400",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "410",
            "target_id": "664",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "664",
            "target_id": "410",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "412",
            "target_id": "410",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "400",
            "target_id": "410",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "source": "graph",
        "sources": [
          "vector",
          "graph"
        ],
        "vector_score": 0.498519609392658,
        "graph_score": 4.329000000000001,
        "score_components": {
          "relationship_chain": 1.0,
          "explicit_mention": 1.0,
          "abstraction_path": 0.9,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "400",
                  "410",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "400"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "400",
                  "410",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "400"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "410",
                  "400",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "400"
            }
          }
        },
        "is_explicit": true,
        "abstraction_level": "base",
        "position": "before",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.45142771436647755,
            "graph": 2.7968078437570636
          }
        }
      },
      "similarity": 2.7968078437570636
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-1284",
      "CWE-400",
      "CWE-770",
      "CWE-789",
      "CWE-1333"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}