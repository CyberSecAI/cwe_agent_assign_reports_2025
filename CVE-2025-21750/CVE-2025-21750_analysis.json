{
  "cve_id": "CVE-2025-21750",
  "description": "In the Linux kernel, the following vulnerability has been resolved wifi brcmfmac Check the return value of of_property_read_string_index() Somewhen between 6.10 and 6.11 the driver started to crash on my MacBookPro14,3. The property doesnt exist and **tmp remains uninitialized**, so we pass a random pointer to devm_kstrdup(). The crash I am getting looks like this BUG unable to handle page fault for address 00007f033c669379 PF supervisor read access in kernel mode PF error_code(0x0001) - permissions violation PGD 8000000101341067 P4D 8000000101341067 PUD 101340067 PMD 1013bb067 PTE 800000010aee9025 Oops Oops 0001",
  "key_phrases": {
    "rootcause": "tmp remains uninitialized",
    "weakness": "",
    "impact": [
      "read access",
      "page fault",
      "crash",
      "Oops"
    ],
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "6.10 to 6.11",
    "component": "wifi brcmfmac"
  },
  "reference_content": null,
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-908 | Use of Uninitialized Resource | 0.9 | Base | Allowed | Primary CWE |\n| CWE-476 | NULL Pointer Dereference | 0.7 | Base | Allowed | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary CWE is CWE-908 which is a Base level CWE. CWE-908 has a ChildOf relationship with CWE-665 (Improper Initialization) and a ParentOf relationship with CWE-457 (Use of Uninitialized Variable). In this case, the code uses an uninitialized resource (tmp), which directly leads to the crash. CWE-476 is also a possible CWE since the crash is due to a NULL pointer dereference.\n\n```mermaid\ngraph TD\n    cwe908[\"CWE-908: Use of Uninitialized Resource\"]\n    cwe665[\"CWE-665: Improper Initialization\"]\n    cwe457[\"CWE-457: Use of Uninitialized Variable\"]\n    cwe476[\"CWE-476: NULL Pointer Dereference\"]\n\n    cwe908 -->|CHILDOF| cwe665\n    cwe457 -->|PARENTOF| cwe908\n    cwe476 -->|CANFOLLOW| cwe908\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe908 primary\n    class cwe665,cwe457, cwe476 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **tmp remains uninitialized**. Then a random pointer is passed to devm_kstrdup(), which leads to read access and a page fault, then a crash and finally an \"Oops\".\nThe primary CWE is CWE-908 and a secondary CWE could be CWE-476.\n\n## Summary of Analysis\nThe vulnerability description clearly states that \"**tmp remains uninitialized**\", so we pass a random pointer to devm_kstrdup(). The crash I am getting looks like this BUG unable to handle page fault for address 00007f033c669379 PF supervisor read access in kernel mode\".\nThe graph relationships influenced the selection because CWE-908 is the root cause, and CWE-476 is the result of it.\nCWE-908 is at the optimal level of specificity because it directly describes the **root cause** of the vulnerability (the use of an uninitialized resource).\n\nOther CWEs Considered:\n\n*   CWE-476: NULL Pointer Dereference: This is a consequence of using the uninitialized variable, but not the root cause. The code is attempting to dereference a pointer that happens to be NULL because it was not properly initialized.\n*   CWE-457: Use of Uninitialized Variable: Similar to CWE-908, but CWE-908 describes the use of an uninitialized *resource*, which is a broader and more accurate fit in this context since it involves memory being allocated to the uninitialized variable.\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.79\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n**Why it was not selected**: This CWE is not relevant because the vulnerability is not related to locking.\n\n## CWE-280: Improper Handling of Insufficient Permissions or Privileges \n**Abstraction Level**: Base\n**Similarity Score**: 0.78\n\n**Description**:\nThe product does not handle or incorrectly handles when it has insufficient privileges to access resources or functionality as specified by their permissions. This may cause it to follow unexpected code paths that may leave the product in an invalid state.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Why it was not selected**: This CWE is not relevant because the vulnerability is not related to permissions or privileges.\n\n## CWE-404: Improper Resource Shutdown or Release\n**Abstraction Level**: Class\n**Similarity Score**: 0.78\n\n**Description**:\nThe product does not release or incorrectly releases a resource before it is made available for re-use.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n**Why it was not selected**: This CWE is not relevant because the vulnerability is not related to shutdown or release of a resource.\n\n## CWE-274: Improper Handling of Insufficient Privileges\n**Abstraction Level**: Base\n**Similarity Score**: 0.78\n\n**Description**:\nThe product does not handle or incorrectly handles when it has insufficient privileges to perform an operation, leading to resultant weaknesses.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry could be deprecated in a future version of CWE.\n\n**Why it was not selected**: This CWE is not relevant because the vulnerability is not related to privileges.\n\n## CWE-754: Improper Check for Unusual or Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.77\n\n**Description**:\nThe product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n**Why it was not selected**: While the crash is an exceptional condition, the **root cause** is the missing initialization, not the lack of a check.\n\n## CWE-266: Incorrect Privilege Assignment\n**Abstraction Level**: Base\n**Similarity Score**: 0.77\n\n**Description**:\nA product incorrectly assigns a privilege to a particular actor, creating an unintended sphere of control for that actor.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Why it was not selected**: This CWE is not relevant because the vulnerability is not related to privilege assignment.\n\n## CWE-267: Privilege Defined With Unsafe Actions\n**Abstraction Level**: Base\n**Similarity Score**: 0.77\n\n**Description**:\nA particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Why it was not selected**: This CWE is not relevant because the vulnerability is not related to privilege definitions.\n\n## CWE-703: Improper Check or Handling of Exceptional Conditions\n**Abstraction Level**: Pillar\n**Similarity Score**: 0.77\n\n**Description**:\nThe product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is extremely high-level, a Pillar.\n\n**Why it was not selected**: This is too general and does not describe the **root cause**.\n\n## CWE-824: Access of Uninitialized Pointer\n**Abstraction Level**: Base\n**Similarity Score**: 0.77\n\n**Description**:\nThe product accesses or uses a pointer that has not been initialized.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Why it was not selected**: Access of an uninitialized pointer is a symptom, not the root cause. The root cause is that the pointer was not initialized in the first place, which is CWE-908.\n\n## CWE-665: Improper Initialization\n**Abstraction Level**: Class\n**Similarity Score**: 0.77\n\n**Description**:\nThe product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n**Why it was not selected**: While this CWE is related, CWE-908 is more specific because it describes the use",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-908 | Use of Uninitialized Resource | 0.9 | Base | Allowed | Primary CWE |\n| CWE-476 | NULL Pointer Dereference | 0.7 | Base | Allowed | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary CWE is CWE-908 which is a Base level CWE. CWE-908 has a ChildOf relationship with CWE-665 (Improper Initialization) and a ParentOf relationship with CWE-457 (Use of Uninitialized Variable). In this case, the code uses an uninitialized resource (tmp), which directly leads to the crash. CWE-476 is also a possible CWE since the crash is due to a NULL pointer dereference.\n\n```mermaid\ngraph TD\n    cwe908[\"CWE-908: Use of Uninitialized Resource\"]\n    cwe665[\"CWE-665: Improper Initialization\"]\n    cwe457[\"CWE-457: Use of Uninitialized Variable\"]\n    cwe476[\"CWE-476: NULL Pointer Dereference\"]\n\n    cwe908 -->|CHILDOF| cwe665\n    cwe457 -->|PARENTOF| cwe908\n    cwe476 -->|CANFOLLOW| cwe908\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe908 primary\n    class cwe665,cwe457, cwe476 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **tmp remains uninitialized**. Then a random pointer is passed to devm_kstrdup(), which leads to read access and a page fault, then a crash and finally an \"Oops\".\nThe primary CWE is CWE-908 and a secondary CWE could be CWE-476.\n\n## Summary of Analysis\nThe vulnerability description clearly states that \"**tmp remains uninitialized**\", so we pass a random pointer to devm_kstrdup(). The crash I am getting looks like this BUG unable to handle page fault for address 00007f033c669379 PF supervisor read access in kernel mode\".\nThe graph relationships influenced the selection because CWE-908 is the root cause, and CWE-476 is the result of it.\nCWE-908 is at the optimal level of specificity because it directly describes the **root cause** of the vulnerability (the use of an uninitialized resource).\n\nOther CWEs Considered:\n\n*   CWE-476: NULL Pointer Dereference: This is a consequence of using the uninitialized variable, but not the root cause. The code is attempting to dereference a pointer that happens to be NULL because it was not properly initialized.\n*   CWE-457: Use of Uninitialized Variable: Similar to CWE-908, but CWE-908 describes the use of an uninitialized *resource*, which is a broader and more accurate fit in this context since it involves memory being allocated to the uninitialized variable.\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.79\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n**Why it was not selected**: This CWE is not relevant because the vulnerability is not related to locking.\n\n## CWE-280: Improper Handling of Insufficient Permissions or Privileges \n**Abstraction Level**: Base\n**Similarity Score**: 0.78\n\n**Description**:\nThe product does not handle or incorrectly handles when it has insufficient privileges to access resources or functionality as specified by their permissions. This may cause it to follow unexpected code paths that may leave the product in an invalid state.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Why it was not selected**: This CWE is not relevant because the vulnerability is not related to permissions or privileges.\n\n## CWE-404: Improper Resource Shutdown or Release\n**Abstraction Level**: Class\n**Similarity Score**: 0.78\n\n**Description**:\nThe product does not release or incorrectly releases a resource before it is made available for re-use.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n**Why it was not selected**: This CWE is not relevant because the vulnerability is not related to shutdown or release of a resource.\n\n## CWE-274: Improper Handling of Insufficient Privileges\n**Abstraction Level**: Base\n**Similarity Score**: 0.78\n\n**Description**:\nThe product does not handle or incorrectly handles when it has insufficient privileges to perform an operation, leading to resultant weaknesses.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry could be deprecated in a future version of CWE.\n\n**Why it was not selected**: This CWE is not relevant because the vulnerability is not related to privileges.\n\n## CWE-754: Improper Check for Unusual or Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.77\n\n**Description**:\nThe product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n**Why it was not selected**: While the crash is an exceptional condition, the **root cause** is the missing initialization, not the lack of a check.\n\n## CWE-266: Incorrect Privilege Assignment\n**Abstraction Level**: Base\n**Similarity Score**: 0.77\n\n**Description**:\nA product incorrectly assigns a privilege to a particular actor, creating an unintended sphere of control for that actor.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Why it was not selected**: This CWE is not relevant because the vulnerability is not related to privilege assignment.\n\n## CWE-267: Privilege Defined With Unsafe Actions\n**Abstraction Level**: Base\n**Similarity Score**: 0.77\n\n**Description**:\nA particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Why it was not selected**: This CWE is not relevant because the vulnerability is not related to privilege definitions.\n\n## CWE-703: Improper Check or Handling of Exceptional Conditions\n**Abstraction Level**: Pillar\n**Similarity Score**: 0.77\n\n**Description**:\nThe product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is extremely high-level, a Pillar.\n\n**Why it was not selected**: This is too general and does not describe the **root cause**.\n\n## CWE-824: Access of Uninitialized Pointer\n**Abstraction Level**: Base\n**Similarity Score**: 0.77\n\n**Description**:\nThe product accesses or uses a pointer that has not been initialized.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n**Why it was not selected**: Access of an uninitialized pointer is a symptom, not the root cause. The root cause is that the pointer was not initialized in the first place, which is CWE-908.\n\n## CWE-665: Improper Initialization\n**Abstraction Level**: Class\n**Similarity Score**: 0.77\n\n**Description**:\nThe product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n**Why it was not selected**: While this CWE is related, CWE-908 is more specific because it describes the use\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-274:**\n- 274 (Improper Handling of Insufficient Privileges) - ROOT\n\n\n**Chain starting from CWE-280:**\n- 280 (Improper Handling of Insufficient Permissions or Privileges ) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "476",
        "name": "NULL Pointer Dereference",
        "source": "sparse"
      },
      "similarity": 393.0152202849439
    },
    {
      "metadata": {
        "doc_id": "909",
        "name": "Missing Initialization of Resource",
        "source": "sparse"
      },
      "similarity": 372.78207987142514
    },
    {
      "metadata": {
        "doc_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "source": "sparse"
      },
      "similarity": 367.5807519956644
    },
    {
      "metadata": {
        "doc_id": "457",
        "name": "Use of Uninitialized Variable",
        "source": "sparse"
      },
      "similarity": 366.51004231567964
    },
    {
      "metadata": {
        "doc_id": "770",
        "name": "Allocation of Resources Without Limits or Throttling",
        "source": "sparse"
      },
      "similarity": 357.4993381997222
    },
    {
      "metadata": {
        "doc_id": "125",
        "name": "Out-of-bounds Read",
        "source": "sparse"
      },
      "similarity": 354.52366864899784
    },
    {
      "metadata": {
        "doc_id": "908",
        "name": "Use of Uninitialized Resource",
        "source": "sparse"
      },
      "similarity": 351.4523531728569
    },
    {
      "metadata": {
        "doc_id": "787",
        "name": "Out-of-bounds Write",
        "source": "sparse"
      },
      "similarity": 351.01249508834206
    },
    {
      "metadata": {
        "doc_id": "1285",
        "name": "Improper Validation of Specified Index, Position, or Offset in Input",
        "type": "Base",
        "original_content": "The product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties.",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5406307158320045,
            "graph": 1.6667387060039065
          }
        }
      },
      "similarity": 0.5406307158320045
    },
    {
      "doc_id": "1325",
      "text": "CWE-1325: Improperly Controlled Sequential Memory Allocation",
      "score": 2.8651999999999997,
      "metadata": {
        "doc_id": "1325",
        "name": "Improperly Controlled Sequential Memory Allocation",
        "type": "base",
        "original_content": "CWE-1325: Improperly Controlled Sequential Memory Allocation",
        "relationships": [
          {
            "source_id": "1325",
            "target_id": "476",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1325",
            "target_id": "789",
            "label": "PEEROF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1325",
            "target_id": "770",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "770",
            "target_id": "1325",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "476",
            "target_id": "1325",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "abstraction_path": 0.7200000000000001,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "476",
                  "1325",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "476"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "770",
                  "1325",
                  "PARENTOF"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "abstraction_path_down",
              "source": "770"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "476",
                  "1325",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "476"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "1325",
                  "476",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "476"
            }
          }
        },
        "abstraction_level": "base",
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.8651999999999997
          }
        }
      },
      "similarity": 2.8651999999999997
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-274",
      "CWE-280",
      "CWE-457",
      "CWE-476",
      "CWE-404",
      "CWE-667",
      "CWE-267",
      "CWE-824",
      "CWE-266",
      "CWE-754",
      "CWE-703",
      "CWE-908",
      "CWE-665"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}