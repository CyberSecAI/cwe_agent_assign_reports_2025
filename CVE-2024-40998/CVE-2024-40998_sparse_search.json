{
  "retriever": "sparse",
  "query": "In the Linux kernel, the following vulnerability has been resolved ext4 fix uninitialized ratelimit_state->lock access in __ext4_fill_super() In the following concurrency we will access the uninitialized rs->lock ext4_fill_super ext4_register_sysfs // sysfs registered msg_ratelimit_interval_ms // Other processes modify rs->interval to // non-zero via msg_ratelimit_interval_ms ext4_orphan_cleanup ext4_msg(sb, KERN_INFO, Errors on filesystem, __ext4_msg ___ratelimit(&(EXT4_SB(sb)->s_msg_ratelimit_state) if (!rs->interval) // do nothing if interval is 0 return 1 raw_spin_trylock_irqsave(&rs->lock, flags) raw_spin_trylock(lock) _raw_spin_trylock __raw_spin_trylock spin_acquire(&lock->dep_map, 0, 1, _RET_IP_) lock_acquire __lock_acquire register_lock_class assign_lock_key dump_stack() ratelimit_state_init(&sbi->s_msg_ratelimit_state, 5 * HZ, 10) raw_spin_lock_init(&rs->lock) // init rs->lock here and get the following dump_stack ========================================================= INFO trying to register non-static key. The code is fine but needs lockdep annotation, or maybe you didnt initialize this object before use? turning off the locking correctness val",
  "keyphrases": {
    "weakness": [
      "uninitialized lock access"
    ]
  },
  "timestamp": "2025-07-12 03:20:52",
  "cve_id": "CVE-2024-40998",
  "result_count": 12,
  "results": [
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "score": 427.90387738781345,
      "search_source": "weakness:uninitialized lock access"
    },
    {
      "cwe_id": "833",
      "name": "Deadlock",
      "score": 398.8950441187522,
      "search_source": "weakness:uninitialized lock access"
    },
    {
      "cwe_id": "252",
      "name": "Unchecked Return Value",
      "score": 387.34749974987386,
      "search_source": "weakness:uninitialized lock access"
    },
    {
      "cwe_id": "457",
      "name": "Use of Uninitialized Variable",
      "score": 377.5958941544331,
      "search_source": "weakness:uninitialized lock access"
    },
    {
      "cwe_id": "909",
      "name": "Missing Initialization of Resource",
      "score": 368.93231334444795,
      "search_source": "weakness:uninitialized lock access"
    },
    {
      "cwe_id": "824",
      "name": "Access of Uninitialized Pointer",
      "score": 368.54558453245323,
      "search_source": "weakness:uninitialized lock access"
    },
    {
      "cwe_id": "451",
      "name": "User Interface (UI) Misrepresentation of Critical Information",
      "score": 361.1431914875325,
      "search_source": "weakness:uninitialized lock access"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 356.95862034077805,
      "search_source": "weakness:uninitialized lock access"
    },
    {
      "cwe_id": "413",
      "name": "Improper Resource Locking",
      "score": 356.59081994661517,
      "search_source": "weakness:uninitialized lock access"
    },
    {
      "cwe_id": "1233",
      "name": "Security-Sensitive Hardware Controls with Missing Lock Bit Protection",
      "score": 355.5367205297432,
      "search_source": "weakness:uninitialized lock access"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 121.47905946483958,
      "search_source": "base_query"
    },
    {
      "cwe_id": "912",
      "name": "Hidden Functionality",
      "score": 120.84726744501292,
      "search_source": "base_query"
    }
  ]
}