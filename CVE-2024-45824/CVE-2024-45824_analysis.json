{
  "cve_id": "CVE-2024-45824",
  "description": "CVE-2024-45824 IMPACT A **remote code vulnerability** exists in the affected products. The vulnerability occurs when chained with **Path Traversal**, **Command Injection**, and **XSS** Vulnerabilities and allows for full unauthenticated remote code execution. The link in the mitigations section below contains patches to fix this issue.",
  "key_phrases": {
    "rootcause": "",
    "weakness": [
      "Command Injection",
      "Path Traversal",
      "XSS",
      "remote code vulnerability"
    ],
    "impact": "full unauthenticated remote code execution",
    "vector": "",
    "attacker": "",
    "product": "",
    "version": "",
    "component": ""
  },
  "reference_content": "Based on the provided content, here's a breakdown of the vulnerability:\n\n**Root Cause:** The vulnerability stems from a lack of input validation in FactoryTalk\u00ae View Site Edition software.\n\n**Weaknesses/Vulnerabilities Present:**\n*   **Remote Code Execution:** The primary vulnerability is the ability to execute code remotely.\n*   **Chained Vulnerabilities:** The remote code execution is achieved by chaining together multiple vulnerabilities:\n    *   **Path Traversal:** Allows an attacker to access files or directories outside of the intended scope.\n    *   **Command Injection:** Enables an attacker to inject and execute arbitrary commands on the system.\n    *   **Cross-Site Scripting (XSS):** Allows attackers to inject malicious scripts into web pages viewed by other users.\n*   **Improper Neutralization of Special Elements used in a Command (CWE-77):** The specific CWE identified, directly relates to the command injection aspect of the vulnerability.\n\n**Impact of Exploitation:** Successful exploitation allows for full unauthenticated remote code execution, potentially leading to:\n*   Complete compromise of the affected system.\n*   Data theft or manipulation.\n*   Disruption of industrial processes.\n*   Unauthorized access to sensitive information.\n\n**Attack Vectors:**\n*   **Network:** The vulnerability is remotely exploitable.\n*   **Unauthenticated:** Attackers do not need to authenticate to exploit the vulnerability.\n\n**Required Attacker Capabilities/Position:**\n*   **Network Access:** Attackers need to have network access to the affected system.\n*   **No Authentication Required:** The vulnerability can be exploited without authentication.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID    | CWE Name                                                                          | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| --------- | --------------------------------------------------------------------------------- | ---------- | --------------------- | ------------------------------- | ------------------------------- |\n| CWE-78    | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | 0.9        | Base                  | Primary                         | Allowed                         |\n| CWE-22    | Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')    | 0.8        | Base                  | Secondary                       | Allowed                         |\n| CWE-79    | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 0.8        | Base                  | Secondary                       | Allowed                         |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is CWE-78, which is a base-level CWE. CWE-22 and CWE-79 are also base-level CWEs, indicating that they are specific weaknesses that can be directly mapped to the vulnerability. CWE-78 can follow CWE-184, suggesting that an incomplete list of disallowed inputs could lead to command injection. CWE-22 can follow CWE-73 or CWE-20, indicating that external control of file names or improper input validation can lead to path traversal. CWE-79 can follow CWE-113 or CWE-184, suggesting that improper neutralization of CRLF sequences or an incomplete list of disallowed inputs can lead to cross-site scripting. The selection of these CWEs is based on their direct relevance to the described **weaknesses** and their base-level abstraction.\n\n```mermaid\ngraph TD\n    cwe78[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"]\n    cwe22[\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    cwe184[\"CWE-184: Incomplete List of Disallowed Inputs\"]\n    cwe73[\"CWE-73: External Control of File Name or Path\"]\n    cwe20[\"CWE-20: Improper Input Validation\"]\n    cwe113[\"CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')\"]\n    \n    cwe78 -->|CANFOLLOW| cwe184\n    cwe22 -->|CANFOLLOW| cwe73\n    cwe22 -->|CANFOLLOW| cwe20\n    cwe79 -->|CANFOLLOW| cwe113\n    cwe79 -->|CANFOLLOW| cwe184\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe78 primary\n    class cwe22,cwe79 secondary\n    class cwe184,cwe73,cwe20,cwe113 tertiary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **Path Traversal** (CWE-22), which allows an attacker to manipulate file paths. This is followed by **Command Injection** (CWE-78), where the attacker can inject arbitrary commands into the system. Finally, **XSS** (CWE-79) allows the attacker to execute scripts in the user's browser. This chain leads to full unauthenticated remote code execution.\n\nCWE-22 --> CWE-78 --> CWE-79 --> Remote Code Execution\n\n## Summary of Analysis\nThe analysis is based on the provided evidence, specifically the vulnerability description and the keyphrase analysis. The description explicitly mentions **Path Traversal**, **Command Injection**, and **XSS** vulnerabilities, which directly correspond to CWE-22, CWE-78, and CWE-79, respectively. The retriever results also support these CWEs, with high scores for each. The graph relationships indicate potential chains of vulnerabilities, where improper input validation or incomplete lists of disallowed inputs can lead to these weaknesses. The selected CWEs are at the optimal level of specificity, as they directly represent the described weaknesses and are base-level CWEs.\n\nCWE-78 is the primary CWE because the **remote code vulnerability** is the final result of the chained vulnerabilities of **Path Traversal**, **Command Injection**, and **XSS**, which allows for full unauthenticated remote code execution.\n\nThe following CWEs were considered but not used:\n\n*   CWE-20: Improper Input Validation - While input validation is often a factor in vulnerabilities, the description provides more specific weaknesses (CWE-22, CWE-78, CWE-79) that are more appropriate. CWE-20 is also discouraged for usage.\n*   CWE-23: Relative Path Traversal - CWE-22 is the more general case of Path Traversal.\n*   CWE-41: Improper Resolution of Path Equivalence - While path equivalence could be a factor, the description focuses on basic path traversal.\n*   CWE-59: Improper Link Resolution Before File Access ('Link Following') - While link following could be a factor, the description focuses on basic path traversal.\n*   CWE-73: External Control of File Name or Path - While this is related to path traversal, CWE-22 is more specific.\n*   CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') - This is a higher-level CWE, and CWE-78 is a more specific type of injection.\n*   CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS) - This is a more specific variant of CWE-79 but the description doesn't give enough evidence to select this over CWE-79.\n*   CWE-94: Improper Control of Generation of Code ('Code Injection') - CWE-78 is more specific.\n*   CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting') - This is not explicitly mentioned in the description.\n*   CWE-138: Improper Neutralization of Special Elements - This is a more general CWE, and CWE-78 and CWE-79 are more specific.\n*   CWE-184: Incomplete List of Disallowed Inputs - While this could contribute, it is not the direct cause of the vulnerability.\n*   CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere - This is not explicitly mentioned in the description.\n*   CWE-807: Reliance on Untrusted Inputs in a Security Decision - This is not explicitly mentioned in the description.",
  "analysis_with_relationships": "# Summary\n| CWE ID    | CWE Name                                                                          | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| --------- | --------------------------------------------------------------------------------- | ---------- | --------------------- | ------------------------------- | ------------------------------- |\n| CWE-78    | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | 0.9        | Base                  | Primary                         | Allowed                         |\n| CWE-22    | Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')    | 0.8        | Base                  | Secondary                       | Allowed                         |\n| CWE-79    | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 0.8        | Base                  | Secondary                       | Allowed                         |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is CWE-78, which is a base-level CWE. CWE-22 and CWE-79 are also base-level CWEs, indicating that they are specific weaknesses that can be directly mapped to the vulnerability. CWE-78 can follow CWE-184, suggesting that an incomplete list of disallowed inputs could lead to command injection. CWE-22 can follow CWE-73 or CWE-20, indicating that external control of file names or improper input validation can lead to path traversal. CWE-79 can follow CWE-113 or CWE-184, suggesting that improper neutralization of CRLF sequences or an incomplete list of disallowed inputs can lead to cross-site scripting. The selection of these CWEs is based on their direct relevance to the described **weaknesses** and their base-level abstraction.\n\n```mermaid\ngraph TD\n    cwe78[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"]\n    cwe22[\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    cwe184[\"CWE-184: Incomplete List of Disallowed Inputs\"]\n    cwe73[\"CWE-73: External Control of File Name or Path\"]\n    cwe20[\"CWE-20: Improper Input Validation\"]\n    cwe113[\"CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')\"]\n    \n    cwe78 -->|CANFOLLOW| cwe184\n    cwe22 -->|CANFOLLOW| cwe73\n    cwe22 -->|CANFOLLOW| cwe20\n    cwe79 -->|CANFOLLOW| cwe113\n    cwe79 -->|CANFOLLOW| cwe184\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe78 primary\n    class cwe22,cwe79 secondary\n    class cwe184,cwe73,cwe20,cwe113 tertiary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **Path Traversal** (CWE-22), which allows an attacker to manipulate file paths. This is followed by **Command Injection** (CWE-78), where the attacker can inject arbitrary commands into the system. Finally, **XSS** (CWE-79) allows the attacker to execute scripts in the user's browser. This chain leads to full unauthenticated remote code execution.\n\nCWE-22 --> CWE-78 --> CWE-79 --> Remote Code Execution\n\n## Summary of Analysis\nThe analysis is based on the provided evidence, specifically the vulnerability description and the keyphrase analysis. The description explicitly mentions **Path Traversal**, **Command Injection**, and **XSS** vulnerabilities, which directly correspond to CWE-22, CWE-78, and CWE-79, respectively. The retriever results also support these CWEs, with high scores for each. The graph relationships indicate potential chains of vulnerabilities, where improper input validation or incomplete lists of disallowed inputs can lead to these weaknesses. The selected CWEs are at the optimal level of specificity, as they directly represent the described weaknesses and are base-level CWEs.\n\nCWE-78 is the primary CWE because the **remote code vulnerability** is the final result of the chained vulnerabilities of **Path Traversal**, **Command Injection**, and **XSS**, which allows for full unauthenticated remote code execution.\n\nThe following CWEs were considered but not used:\n\n*   CWE-20: Improper Input Validation - While input validation is often a factor in vulnerabilities, the description provides more specific weaknesses (CWE-22, CWE-78, CWE-79) that are more appropriate. CWE-20 is also discouraged for usage.\n*   CWE-23: Relative Path Traversal - CWE-22 is the more general case of Path Traversal.\n*   CWE-41: Improper Resolution of Path Equivalence - While path equivalence could be a factor, the description focuses on basic path traversal.\n*   CWE-59: Improper Link Resolution Before File Access ('Link Following') - While link following could be a factor, the description focuses on basic path traversal.\n*   CWE-73: External Control of File Name or Path - While this is related to path traversal, CWE-22 is more specific.\n*   CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') - This is a higher-level CWE, and CWE-78 is a more specific type of injection.\n*   CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS) - This is a more specific variant of CWE-79 but the description doesn't give enough evidence to select this over CWE-79.\n*   CWE-94: Improper Control of Generation of Code ('Code Injection') - CWE-78 is more specific.\n*   CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting') - This is not explicitly mentioned in the description.\n*   CWE-138: Improper Neutralization of Special Elements - This is a more general CWE, and CWE-78 and CWE-79 are more specific.\n*   CWE-184: Incomplete List of Disallowed Inputs - While this could contribute, it is not the direct cause of the vulnerability.\n*   CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere - This is not explicitly mentioned in the description.\n*   CWE-807: Reliance on Untrusted Inputs in a Security Decision - This is not explicitly mentioned in the description.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-807:**\n- 807 (Reliance on Untrusted Inputs in a Security Decision) - ROOT\n\n\n**Chain starting from CWE-94:**\n- 94 (Improper Control of Generation of Code ('Code Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "78",
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "source": "sparse",
        "original_content": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
        "keyphrase_sources": [
          {
            "id": "weakness:Command Injection",
            "keyphrase": "Command Injection",
            "type": "weakness"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "weakness:remote code vulnerability",
            "keyphrase": "remote code vulnerability",
            "type": "weakness"
          },
          {
            "id": "impact:full unauthenticated remote code execution",
            "keyphrase": "full unauthenticated remote code execution",
            "type": "impact"
          }
        ]
      },
      "similarity": 306.73702308126906
    },
    {
      "metadata": {
        "doc_id": "22",
        "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
        "source": "sparse",
        "original_content": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
        "keyphrase_sources": [
          {
            "id": "weakness:Command Injection",
            "keyphrase": "Command Injection",
            "type": "weakness"
          },
          {
            "id": "weakness:Path Traversal",
            "keyphrase": "Path Traversal",
            "type": "weakness"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "weakness:remote code vulnerability",
            "keyphrase": "remote code vulnerability",
            "type": "weakness"
          },
          {
            "id": "impact:full unauthenticated remote code execution",
            "keyphrase": "full unauthenticated remote code execution",
            "type": "impact"
          }
        ]
      },
      "similarity": 287.40338698258824
    },
    {
      "metadata": {
        "doc_id": "23",
        "name": "Relative Path Traversal",
        "source": "sparse",
        "original_content": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as \"..\" that can resolve to a location that is outside of that directory.",
        "keyphrase_sources": [
          {
            "id": "weakness:Command Injection",
            "keyphrase": "Command Injection",
            "type": "weakness"
          },
          {
            "id": "weakness:Path Traversal",
            "keyphrase": "Path Traversal",
            "type": "weakness"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "weakness:remote code vulnerability",
            "keyphrase": "remote code vulnerability",
            "type": "weakness"
          },
          {
            "id": "impact:full unauthenticated remote code execution",
            "keyphrase": "full unauthenticated remote code execution",
            "type": "impact"
          }
        ]
      },
      "similarity": 283.11650650816654
    },
    {
      "metadata": {
        "doc_id": "73",
        "name": "External Control of File Name or Path",
        "source": "sparse",
        "original_content": "The product allows user input to control or influence paths or file names that are used in filesystem operations.",
        "keyphrase_sources": [
          {
            "id": "weakness:Path Traversal",
            "keyphrase": "Path Traversal",
            "type": "weakness"
          }
        ]
      },
      "similarity": 273.70100074183046
    },
    {
      "metadata": {
        "doc_id": "138",
        "name": "Improper Neutralization of Special Elements",
        "source": "sparse",
        "original_content": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.",
        "keyphrase_sources": [
          {
            "id": "weakness:Command Injection",
            "keyphrase": "Command Injection",
            "type": "weakness"
          }
        ]
      },
      "similarity": 269.84521348715907
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse",
        "original_content": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
        "keyphrase_sources": [
          {
            "id": "weakness:Command Injection",
            "keyphrase": "Command Injection",
            "type": "weakness"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "weakness:remote code vulnerability",
            "keyphrase": "remote code vulnerability",
            "type": "weakness"
          },
          {
            "id": "impact:full unauthenticated remote code execution",
            "keyphrase": "full unauthenticated remote code execution",
            "type": "impact"
          }
        ]
      },
      "similarity": 269.24362750120747
    },
    {
      "metadata": {
        "doc_id": "184",
        "name": "Incomplete List of Disallowed Inputs",
        "source": "sparse",
        "original_content": "The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete.",
        "keyphrase_sources": [
          {
            "id": "weakness:Path Traversal",
            "keyphrase": "Path Traversal",
            "type": "weakness"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "weakness:remote code vulnerability",
            "keyphrase": "remote code vulnerability",
            "type": "weakness"
          }
        ]
      },
      "similarity": 269.12361716588475
    },
    {
      "metadata": {
        "doc_id": "59",
        "name": "Improper Link Resolution Before File Access ('Link Following')",
        "source": "sparse",
        "original_content": "The product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.",
        "keyphrase_sources": [
          {
            "id": "weakness:Path Traversal",
            "keyphrase": "Path Traversal",
            "type": "weakness"
          }
        ]
      },
      "similarity": 267.7256963656602
    },
    {
      "metadata": {
        "doc_id": "20",
        "name": "Improper Input Validation",
        "source": "sparse",
        "original_content": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
        "keyphrase_sources": [
          {
            "id": "impact:full unauthenticated remote code execution",
            "keyphrase": "full unauthenticated remote code execution",
            "type": "impact"
          }
        ]
      },
      "similarity": 97.18626529579652
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-807",
      "CWE-94",
      "CWE-80",
      "CWE-22",
      "CWE-59",
      "CWE-73",
      "CWE-79",
      "CWE-113",
      "CWE-74",
      "CWE-78",
      "CWE-20",
      "CWE-184",
      "CWE-138",
      "CWE-497",
      "CWE-23",
      "CWE-41"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {
    "78": [
      {
        "id": "weakness:Command Injection",
        "keyphrase": "Command Injection",
        "type": "weakness"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "weakness:remote code vulnerability",
        "keyphrase": "remote code vulnerability",
        "type": "weakness"
      },
      {
        "id": "impact:full unauthenticated remote code execution",
        "keyphrase": "full unauthenticated remote code execution",
        "type": "impact"
      }
    ],
    "22": [
      {
        "id": "weakness:Command Injection",
        "keyphrase": "Command Injection",
        "type": "weakness"
      },
      {
        "id": "weakness:Path Traversal",
        "keyphrase": "Path Traversal",
        "type": "weakness"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "weakness:remote code vulnerability",
        "keyphrase": "remote code vulnerability",
        "type": "weakness"
      },
      {
        "id": "impact:full unauthenticated remote code execution",
        "keyphrase": "full unauthenticated remote code execution",
        "type": "impact"
      }
    ],
    "23": [
      {
        "id": "weakness:Command Injection",
        "keyphrase": "Command Injection",
        "type": "weakness"
      },
      {
        "id": "weakness:Path Traversal",
        "keyphrase": "Path Traversal",
        "type": "weakness"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "weakness:remote code vulnerability",
        "keyphrase": "remote code vulnerability",
        "type": "weakness"
      },
      {
        "id": "impact:full unauthenticated remote code execution",
        "keyphrase": "full unauthenticated remote code execution",
        "type": "impact"
      }
    ],
    "138": [
      {
        "id": "weakness:Command Injection",
        "keyphrase": "Command Injection",
        "type": "weakness"
      }
    ],
    "79": [
      {
        "id": "weakness:Command Injection",
        "keyphrase": "Command Injection",
        "type": "weakness"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "weakness:remote code vulnerability",
        "keyphrase": "remote code vulnerability",
        "type": "weakness"
      },
      {
        "id": "impact:full unauthenticated remote code execution",
        "keyphrase": "full unauthenticated remote code execution",
        "type": "impact"
      }
    ],
    "73": [
      {
        "id": "weakness:Path Traversal",
        "keyphrase": "Path Traversal",
        "type": "weakness"
      }
    ],
    "184": [
      {
        "id": "weakness:Path Traversal",
        "keyphrase": "Path Traversal",
        "type": "weakness"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "weakness:remote code vulnerability",
        "keyphrase": "remote code vulnerability",
        "type": "weakness"
      }
    ],
    "59": [
      {
        "id": "weakness:Path Traversal",
        "keyphrase": "Path Traversal",
        "type": "weakness"
      }
    ],
    "20": [
      {
        "id": "impact:full unauthenticated remote code execution",
        "keyphrase": "full unauthenticated remote code execution",
        "type": "impact"
      }
    ]
  }
}