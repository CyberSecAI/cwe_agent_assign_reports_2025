{
  "cve_id": "CVE-2024-6712",
  "description": "The MapFig Studio WordPress plugin through 0.2.1 **does not have CSRF check in some places**, and is **missing sanitisation** as well as **escaping**, which could allow attackers to make logged in admin add Stored XSS payloads via a CSRF attack",
  "key_phrases": {
    "rootcause": [
      "does not have CSRF check in some places",
      "missing sanitisation",
      "escaping"
    ],
    "weakness": "cross-site scripting",
    "impact": "Stored XSS payloads",
    "vector": "CSRF attack",
    "attacker": "attackers",
    "product": "MapFig Studio WordPress plugin",
    "version": "through 0.2.1",
    "component": ""
  },
  "reference_content": "## CVE-2024-6712 Analysis\n\nThe provided content is **RELEVANT** to CVE-2024-6712. It details a Stored Cross-Site Scripting (XSS) vulnerability in MapFig Studio plugin versions up to and including 0.2.1. Here's a breakdown of the extracted information:\n\n**Root cause of vulnerability:**\n\nThe plugin lacks CSRF checks in certain areas and also lacks proper sanitization and escaping of user input.\n\n**Weaknesses/vulnerabilities present:**\n\n*   Stored Cross-Site Scripting (XSS) via Cross-Site Request Forgery (CSRF)\n*   Missing CSRF protection\n*   Insufficient input sanitization\n*   Insufficient output escaping\n\n**Impact of exploitation:**\n\nAttackers can inject and store malicious XSS payloads, potentially compromising logged-in administrator accounts.\n\n**Attack vectors:**\n\n*   CSRF attack: An attacker can trick a logged-in administrator into submitting a malicious form.\n*   The provided Proof of Concept (PoC) demonstrates how to craft a malicious HTML form that, when submitted by a logged-in admin, injects a script that triggers an alert.\n\n**Required attacker capabilities/position:**\n\n*   The attacker needs to be able to craft a malicious HTML form.\n*   The attacker needs to be able to induce a logged-in administrator to visit a page containing the malicious form (CSRF).\n\n**Mitigation or fix:**\n\n*   The content states \"No known fix\" as of the provided information.  Implementing CSRF protection and proper input sanitization and output escaping are the recommended mitigations.\n\n**Additional Details (more than official CVE description):**\n\n*   **CVSS Score:** 7.1 (High)\n*   **Researcher:** Vuln Seeker Cybersecurity Team\n*   **WPVDB ID:** 0346b62c-a856-4554-a24a-ef2c2943bda9\n*   **Proof of Concept:** A detailed HTML form is provided to demonstrate the vulnerability.\n*   **Timeline:** Publicly published on 2024-06-05, added to the database on 2024-07-23, and last updated on 2024-07-23.\n*   **OWASP Top 10 & CWE:**  The vulnerability is categorized under OWASP A7: Cross-Site Scripting (XSS) and CWE-79.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID  | CWE Name                                                                      | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :---------------------------------------------------------------------------- | :--------- | :-------------------- | :------------------------------ | :------------------------------ |\n| CWE-352   | Cross-Site Request Forgery (CSRF)                                           | 0.90       | Compound              | Primary                         | Allowed                         |\n| CWE-79    | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 0.90       | Base                  | Secondary                       | Allowed                         |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.90\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is identified as CWE-352 Cross-Site Request Forgery (CSRF), which is a Compound weakness. The attack vector exploits the lack of CSRF protection to inject XSS payloads. The secondary weakness is CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'), which is the result of **missing sanitisation** and **escaping**. The combination of these weaknesses allows attackers to perform Stored XSS attacks.\n\n```mermaid\ngraph TD\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n\n    cwe79 -->|CANFOLLOW| cwe352\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe352 primary\n    class cwe79 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with the **missing CSRF check**, which allows an attacker to inject malicious input without proper authorization. The **missing sanitisation** and **escaping** then leads to **Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')**, resulting in the ability to inject **Stored XSS payloads**.\n- **Root Cause**: CWE-352 Cross-Site Request Forgery (CSRF) (**does not have CSRF check in some places**)\n- **Weakness**: CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') (**missing sanitisation** as well as **escaping**)\n- **Impact**: Stored XSS\n\n## Summary of Analysis\nThe analysis is primarily based on the provided vulnerability description, which indicates that the MapFig Studio WordPress plugin **does not have CSRF check in some places** and is **missing sanitisation** as well as **escaping**, leading to Stored XSS.\n\nThe primary CWE is CWE-352 Cross-Site Request Forgery (CSRF), which is the root cause that allows the attacker to inject malicious code. CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') is the secondary weakness, due to **missing sanitisation** and **escaping** of user-supplied input.\n\nThe selected CWEs are at the optimal level of specificity. CWE-352 is a Compound weakness that describes the absence of CSRF protection. CWE-79 is a Base weakness that describes the **improper neutralization** of input, leading to cross-site scripting.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-425: Direct Request ('Forced Browsing')\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\n**Abstraction Level**: Variant\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as \"<\", \">\", and \"&\" that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-352: Cross-Site Request Forgery (CSRF)\n**Abstraction Level**: Compound\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This is a well-known Composite of multiple weaknesses that must all occur simultaneously, although it is attack-oriented in nature.\n\n\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n\n\n## CWE-472: External Control of Assumed-Immutable Web Parameter\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-434: Unrestricted Upload of File with Dangerous Type\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product allows the upload or transfer of dangerous file types that are automatically processed within its environment.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-807: Reliance on Untrusted Inputs in a Security Decision\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product uses a protection mechanism that relies on the existence or values of an input, but the input can be modified by an untrusted actor in a way that bypasses the protection mechanism.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-184: Incomplete List of Disallowed Inputs\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-138: Improper Neutralization of Special Elements\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 3752.92\n**Source**: sparse\n\n**Description**:\nThe product prepares a structured message for communication with another component, but encoding or",
  "analysis_with_relationships": "# Summary\n| CWE ID  | CWE Name                                                                      | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :---------------------------------------------------------------------------- | :--------- | :-------------------- | :------------------------------ | :------------------------------ |\n| CWE-352   | Cross-Site Request Forgery (CSRF)                                           | 0.90       | Compound              | Primary                         | Allowed                         |\n| CWE-79    | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 0.90       | Base                  | Secondary                       | Allowed                         |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.90\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is identified as CWE-352 Cross-Site Request Forgery (CSRF), which is a Compound weakness. The attack vector exploits the lack of CSRF protection to inject XSS payloads. The secondary weakness is CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'), which is the result of **missing sanitisation** and **escaping**. The combination of these weaknesses allows attackers to perform Stored XSS attacks.\n\n```mermaid\ngraph TD\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n\n    cwe79 -->|CANFOLLOW| cwe352\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe352 primary\n    class cwe79 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with the **missing CSRF check**, which allows an attacker to inject malicious input without proper authorization. The **missing sanitisation** and **escaping** then leads to **Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')**, resulting in the ability to inject **Stored XSS payloads**.\n- **Root Cause**: CWE-352 Cross-Site Request Forgery (CSRF) (**does not have CSRF check in some places**)\n- **Weakness**: CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') (**missing sanitisation** as well as **escaping**)\n- **Impact**: Stored XSS\n\n## Summary of Analysis\nThe analysis is primarily based on the provided vulnerability description, which indicates that the MapFig Studio WordPress plugin **does not have CSRF check in some places** and is **missing sanitisation** as well as **escaping**, leading to Stored XSS.\n\nThe primary CWE is CWE-352 Cross-Site Request Forgery (CSRF), which is the root cause that allows the attacker to inject malicious code. CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') is the secondary weakness, due to **missing sanitisation** and **escaping** of user-supplied input.\n\nThe selected CWEs are at the optimal level of specificity. CWE-352 is a Compound weakness that describes the absence of CSRF protection. CWE-79 is a Base weakness that describes the **improper neutralization** of input, leading to cross-site scripting.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-425: Direct Request ('Forced Browsing')\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\n**Abstraction Level**: Variant\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as \"<\", \">\", and \"&\" that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-352: Cross-Site Request Forgery (CSRF)\n**Abstraction Level**: Compound\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This is a well-known Composite of multiple weaknesses that must all occur simultaneously, although it is attack-oriented in nature.\n\n\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n\n\n## CWE-472: External Control of Assumed-Immutable Web Parameter\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-434: Unrestricted Upload of File with Dangerous Type\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product allows the upload or transfer of dangerous file types that are automatically processed within its environment.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-807: Reliance on Untrusted Inputs in a Security Decision\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product uses a protection mechanism that relies on the existence or values of an input, but the input can be modified by an untrusted actor in a way that bypasses the protection mechanism.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-184: Incomplete List of Disallowed Inputs\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-138: Improper Neutralization of Special Elements\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 3752.92\n**Source**: sparse\n\n**Description**:\nThe product prepares a structured message for communication with another component, but encoding or\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-116:**\n- 116 (Improper Encoding or Escaping of Output) - ROOT\n\n\n**Chain starting from CWE-80:**\n- 80 (Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse",
        "original_content": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
        "keyphrase_sources": [
          {
            "id": "rootcause:does not have CSRF check in some places",
            "keyphrase": "does not have CSRF check in some places",
            "type": "rootcause"
          },
          {
            "id": "rootcause:missing sanitisation",
            "keyphrase": "missing sanitisation",
            "type": "rootcause"
          },
          {
            "id": "rootcause:escaping",
            "keyphrase": "escaping",
            "type": "rootcause"
          },
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "impact:Stored XSS payloads",
            "keyphrase": "Stored XSS payloads",
            "type": "impact"
          },
          {
            "id": "vector:CSRF attack",
            "keyphrase": "CSRF attack",
            "type": "vector"
          },
          {
            "id": "attacker:attackers",
            "keyphrase": "attackers",
            "type": "attacker"
          },
          {
            "id": "product:MapFig Studio WordPress plugin",
            "keyphrase": "MapFig Studio WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:through 0.2.1",
            "keyphrase": "through 0.2.1",
            "type": "version"
          }
        ]
      },
      "similarity": 564.3490523192854
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse",
        "original_content": "The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.",
        "keyphrase_sources": [
          {
            "id": "rootcause:does not have CSRF check in some places",
            "keyphrase": "does not have CSRF check in some places",
            "type": "rootcause"
          },
          {
            "id": "rootcause:missing sanitisation",
            "keyphrase": "missing sanitisation",
            "type": "rootcause"
          },
          {
            "id": "rootcause:escaping",
            "keyphrase": "escaping",
            "type": "rootcause"
          },
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "impact:Stored XSS payloads",
            "keyphrase": "Stored XSS payloads",
            "type": "impact"
          },
          {
            "id": "vector:CSRF attack",
            "keyphrase": "CSRF attack",
            "type": "vector"
          },
          {
            "id": "attacker:attackers",
            "keyphrase": "attackers",
            "type": "attacker"
          },
          {
            "id": "product:MapFig Studio WordPress plugin",
            "keyphrase": "MapFig Studio WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:through 0.2.1",
            "keyphrase": "through 0.2.1",
            "type": "version"
          }
        ]
      },
      "similarity": 430.49813440189166
    },
    {
      "metadata": {
        "doc_id": "862",
        "name": "Missing Authorization",
        "source": "sparse",
        "original_content": "The product does not perform an authorization check when an actor attempts to access a resource or perform an action.",
        "keyphrase_sources": [
          {
            "id": "rootcause:does not have CSRF check in some places",
            "keyphrase": "does not have CSRF check in some places",
            "type": "rootcause"
          },
          {
            "id": "rootcause:missing sanitisation",
            "keyphrase": "missing sanitisation",
            "type": "rootcause"
          },
          {
            "id": "rootcause:escaping",
            "keyphrase": "escaping",
            "type": "rootcause"
          },
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "impact:Stored XSS payloads",
            "keyphrase": "Stored XSS payloads",
            "type": "impact"
          },
          {
            "id": "vector:CSRF attack",
            "keyphrase": "CSRF attack",
            "type": "vector"
          },
          {
            "id": "attacker:attackers",
            "keyphrase": "attackers",
            "type": "attacker"
          },
          {
            "id": "product:MapFig Studio WordPress plugin",
            "keyphrase": "MapFig Studio WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:through 0.2.1",
            "keyphrase": "through 0.2.1",
            "type": "version"
          }
        ]
      },
      "similarity": 412.5101995926525
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "source": "sparse",
        "original_content": "The product allows the upload or transfer of dangerous file types that are automatically processed within its environment.",
        "keyphrase_sources": [
          {
            "id": "rootcause:does not have CSRF check in some places",
            "keyphrase": "does not have CSRF check in some places",
            "type": "rootcause"
          },
          {
            "id": "rootcause:missing sanitisation",
            "keyphrase": "missing sanitisation",
            "type": "rootcause"
          },
          {
            "id": "rootcause:escaping",
            "keyphrase": "escaping",
            "type": "rootcause"
          },
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "impact:Stored XSS payloads",
            "keyphrase": "Stored XSS payloads",
            "type": "impact"
          },
          {
            "id": "vector:CSRF attack",
            "keyphrase": "CSRF attack",
            "type": "vector"
          },
          {
            "id": "attacker:attackers",
            "keyphrase": "attackers",
            "type": "attacker"
          },
          {
            "id": "product:MapFig Studio WordPress plugin",
            "keyphrase": "MapFig Studio WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:through 0.2.1",
            "keyphrase": "through 0.2.1",
            "type": "version"
          }
        ]
      },
      "similarity": 366.00353029393625
    },
    {
      "metadata": {
        "doc_id": "425",
        "name": "Direct Request ('Forced Browsing')",
        "source": "sparse",
        "original_content": "The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.",
        "keyphrase_sources": [
          {
            "id": "rootcause:does not have CSRF check in some places",
            "keyphrase": "does not have CSRF check in some places",
            "type": "rootcause"
          },
          {
            "id": "attacker:attackers",
            "keyphrase": "attackers",
            "type": "attacker"
          },
          {
            "id": "product:MapFig Studio WordPress plugin",
            "keyphrase": "MapFig Studio WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:through 0.2.1",
            "keyphrase": "through 0.2.1",
            "type": "version"
          }
        ]
      },
      "similarity": 318.8290443496765
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse",
        "original_content": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
        "keyphrase_sources": [
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "impact:Stored XSS payloads",
            "keyphrase": "Stored XSS payloads",
            "type": "impact"
          },
          {
            "id": "vector:CSRF attack",
            "keyphrase": "CSRF attack",
            "type": "vector"
          }
        ]
      },
      "similarity": 307.77041295811705
    },
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "sparse",
        "original_content": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
        "keyphrase_sources": [
          {
            "id": "rootcause:missing sanitisation",
            "keyphrase": "missing sanitisation",
            "type": "rootcause"
          },
          {
            "id": "rootcause:escaping",
            "keyphrase": "escaping",
            "type": "rootcause"
          }
        ]
      },
      "similarity": 243.12482880027022
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-116",
      "CWE-80",
      "CWE-79",
      "CWE-472",
      "CWE-352",
      "CWE-74",
      "CWE-138",
      "CWE-184",
      "CWE-807",
      "CWE-425",
      "CWE-434"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {
    "352": [
      {
        "id": "rootcause:does not have CSRF check in some places",
        "keyphrase": "does not have CSRF check in some places",
        "type": "rootcause"
      },
      {
        "id": "rootcause:missing sanitisation",
        "keyphrase": "missing sanitisation",
        "type": "rootcause"
      },
      {
        "id": "rootcause:escaping",
        "keyphrase": "escaping",
        "type": "rootcause"
      },
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "impact:Stored XSS payloads",
        "keyphrase": "Stored XSS payloads",
        "type": "impact"
      },
      {
        "id": "vector:CSRF attack",
        "keyphrase": "CSRF attack",
        "type": "vector"
      },
      {
        "id": "attacker:attackers",
        "keyphrase": "attackers",
        "type": "attacker"
      },
      {
        "id": "product:MapFig Studio WordPress plugin",
        "keyphrase": "MapFig Studio WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:through 0.2.1",
        "keyphrase": "through 0.2.1",
        "type": "version"
      }
    ],
    "116": [
      {
        "id": "rootcause:does not have CSRF check in some places",
        "keyphrase": "does not have CSRF check in some places",
        "type": "rootcause"
      },
      {
        "id": "rootcause:missing sanitisation",
        "keyphrase": "missing sanitisation",
        "type": "rootcause"
      },
      {
        "id": "rootcause:escaping",
        "keyphrase": "escaping",
        "type": "rootcause"
      },
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "impact:Stored XSS payloads",
        "keyphrase": "Stored XSS payloads",
        "type": "impact"
      },
      {
        "id": "vector:CSRF attack",
        "keyphrase": "CSRF attack",
        "type": "vector"
      },
      {
        "id": "attacker:attackers",
        "keyphrase": "attackers",
        "type": "attacker"
      },
      {
        "id": "product:MapFig Studio WordPress plugin",
        "keyphrase": "MapFig Studio WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:through 0.2.1",
        "keyphrase": "through 0.2.1",
        "type": "version"
      }
    ],
    "862": [
      {
        "id": "rootcause:does not have CSRF check in some places",
        "keyphrase": "does not have CSRF check in some places",
        "type": "rootcause"
      },
      {
        "id": "rootcause:missing sanitisation",
        "keyphrase": "missing sanitisation",
        "type": "rootcause"
      },
      {
        "id": "rootcause:escaping",
        "keyphrase": "escaping",
        "type": "rootcause"
      },
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "impact:Stored XSS payloads",
        "keyphrase": "Stored XSS payloads",
        "type": "impact"
      },
      {
        "id": "vector:CSRF attack",
        "keyphrase": "CSRF attack",
        "type": "vector"
      },
      {
        "id": "attacker:attackers",
        "keyphrase": "attackers",
        "type": "attacker"
      },
      {
        "id": "product:MapFig Studio WordPress plugin",
        "keyphrase": "MapFig Studio WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:through 0.2.1",
        "keyphrase": "through 0.2.1",
        "type": "version"
      }
    ],
    "434": [
      {
        "id": "rootcause:does not have CSRF check in some places",
        "keyphrase": "does not have CSRF check in some places",
        "type": "rootcause"
      },
      {
        "id": "rootcause:missing sanitisation",
        "keyphrase": "missing sanitisation",
        "type": "rootcause"
      },
      {
        "id": "rootcause:escaping",
        "keyphrase": "escaping",
        "type": "rootcause"
      },
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "impact:Stored XSS payloads",
        "keyphrase": "Stored XSS payloads",
        "type": "impact"
      },
      {
        "id": "vector:CSRF attack",
        "keyphrase": "CSRF attack",
        "type": "vector"
      },
      {
        "id": "attacker:attackers",
        "keyphrase": "attackers",
        "type": "attacker"
      },
      {
        "id": "product:MapFig Studio WordPress plugin",
        "keyphrase": "MapFig Studio WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:through 0.2.1",
        "keyphrase": "through 0.2.1",
        "type": "version"
      }
    ],
    "425": [
      {
        "id": "rootcause:does not have CSRF check in some places",
        "keyphrase": "does not have CSRF check in some places",
        "type": "rootcause"
      },
      {
        "id": "attacker:attackers",
        "keyphrase": "attackers",
        "type": "attacker"
      },
      {
        "id": "product:MapFig Studio WordPress plugin",
        "keyphrase": "MapFig Studio WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:through 0.2.1",
        "keyphrase": "through 0.2.1",
        "type": "version"
      }
    ],
    "89": [
      {
        "id": "rootcause:missing sanitisation",
        "keyphrase": "missing sanitisation",
        "type": "rootcause"
      },
      {
        "id": "rootcause:escaping",
        "keyphrase": "escaping",
        "type": "rootcause"
      }
    ],
    "79": [
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "impact:Stored XSS payloads",
        "keyphrase": "Stored XSS payloads",
        "type": "impact"
      },
      {
        "id": "vector:CSRF attack",
        "keyphrase": "CSRF attack",
        "type": "vector"
      }
    ]
  }
}