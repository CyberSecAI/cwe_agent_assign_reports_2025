{
  "cve_id": "CVE-2024-52517",
  "description": "Nextcloud Server is a self hosted personal cloud system. After **storing Global credentials on the server**, the API returns them and adds them into the frontend again, allowing to read them in plain text when an attacker already has access to an active session of a user. It is recommended that the Nextcloud Server is upgraded to 28.0.11, 29.0.8 or 30.0.1 and Nextcloud Enterprise Server is upgraded to 25.0.13.13, 26.0.13.9, 27.1.11.9, 28.0.11, 29.0.8 or 30.0.1.",
  "key_phrases": {
    "rootcause": "storing Global credentials on the server",
    "weakness": "",
    "impact": "read them in plain text",
    "vector": "",
    "attacker": "attacker",
    "product": "Nextcloud Server",
    "version": "",
    "component": ""
  },
  "reference_content": "Based on the provided content, here's an analysis of CVE-2024-52517:\n\n**Root Cause of Vulnerability:**\nThe vulnerability stems from the fact that after storing \"Global credentials\" for external storage on the server, the API returns these credentials and adds them back to the frontend. This allows the credentials to be read in plain text.\n\n**Weaknesses/Vulnerabilities Present:**\n- Exposure of sensitive information (passwords) in plain text.\n- Insecure handling of credentials by sending them to the frontend.\n- Lack of proper masking or placeholder usage when returning credentials via API.\n\n**Impact of Exploitation:**\n- An attacker who has already gained access to an active user session can read the global credentials in plain text.\n- This allows for potential unauthorized access to external storage systems linked to the Nextcloud instance.\n- Compromise of external systems and data.\n\n**Attack Vectors:**\n- An attacker needs to have an active session in Nextcloud to exploit the vulnerability.\n- The vulnerability is triggered when the API returns the stored \"Global credentials\" for external storage.\n\n**Required Attacker Capabilities/Position:**\n- The attacker needs to be logged into an active user session of Nextcloud.\n- Access to the web browser and the Nextcloud frontend is required to intercept the credentials returned by the API.\n- The attacker does not need any specific technical knowledge, besides being able to use the developer tools of the browser.\n\n**Additional Notes**\n- The fix implemented involved using a placeholder for the password when returning the credentials via the API.\n- The vulnerability is assigned a CVSS score of 4.6, which is considered Moderate.\n- The vulnerability was reported by Bundesamt f\u00fcr Sicherheit in der Informationstechnik (BSI) and mgm-sp.\n- Patched versions include Nextcloud Server 28.0.11, 29.0.8, 30.0.1 and Nextcloud Enterprise Server versions 25.0.13.13, 26.0.13.9, 27.1.11.9, 28.0.11, 29.0.8, and 30.0.1\n- The vulnerability is tracked as GHSA-x9q3-c7f8-3rcg.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-256 | Plaintext Storage of a Password | 1.0 | Base | Allowed | Primary CWE. The credentials are stored in plain text and then exposed. |\n| CWE-319 | Cleartext Transmission of Sensitive Information | 0.7 | Base | Allowed | Secondary CWE. The credentials are sent to the frontend in plaintext. |\n| CWE-201 | Insertion of Sensitive Information Into Sent Data | 0.6 | Base | Allowed | Secondary CWE. Sensitive information is sent to the frontend. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is **CWE-256 Plaintext Storage of a Password** because the credentials are **stored in plain text** on the server. This leads to the secondary weakness of **CWE-319 Cleartext Transmission of Sensitive Information** as the credentials are then sent to the frontend without encryption or proper protection. **CWE-201 Insertion of Sensitive Information Into Sent Data** is also applicable, as the credentials are being sent to an actor (the frontend) that should not have access to them in plaintext.\n\n```mermaid\ngraph TD\n    cwe256[\"CWE-256: Plaintext Storage of a Password\"]\n    cwe319[\"CWE-319: Cleartext Transmission of Sensitive Information\"]\n    cwe201[\"CWE-201: Insertion of Sensitive Information Into Sent Data\"]\n\n    cwe319 -->|CANFOLLOW| cwe201\n    cwe256 -->|CANPRECEDE| cwe319\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe256 primary\n    class cwe319,cwe201 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **CWE-256 Plaintext Storage of a Password**. Because the global credentials are **stored in plain text**, they are then exposed via the API. This leads to **CWE-319 Cleartext Transmission of Sensitive Information**, as the credentials are sent to the frontend in plaintext. Finally, **CWE-201 Insertion of Sensitive Information Into Sent Data** occurs, as the credentials are sent to an actor that should not have access to them.\n\n## Summary of Analysis\nThe analysis is based on the provided evidence, specifically the description stating that after **storing Global credentials on the server**, the API returns them and adds them into the frontend again, allowing to **read them in plain text**.\n\nThe graph relationships highlight the flow of the vulnerability: the initial **storage in plain text** directly leads to the exposure and transmission of the sensitive data.\n\nThe selected CWEs are at the optimal level of specificity because they accurately represent the specific weaknesses present in the vulnerability: **plaintext storage**, **cleartext transmission**, and **insertion of sensitive information** into sent data.\n\n**CWE-256: Plaintext Storage of a Password** is the most specific and accurate representation of the root cause, as it directly addresses the **storage of credentials in plain text**.\n\n**CWE-319: Cleartext Transmission of Sensitive Information** is included because the vulnerability involves sending the **stored credentials in plaintext to the frontend**.\n\n**CWE-201: Insertion of Sensitive Information Into Sent Data** is included because the vulnerability description indicates that the API returns the stored \"Global credentials\", so sending them to the frontend is inappropriate.\n\nOther CWEs Considered but Not Used:\n\n*   CWE-532: Insertion of Sensitive Information into Log File - While sensitive information is exposed, it's not explicitly stated that it's being logged.\n*   CWE-209: Generation of Error Message Containing Sensitive Information - The vulnerability is not about error messages.\n*   CWE-1390: Weak Authentication - The vulnerability is not about weak authentication mechanisms.\n*   CWE-522: Insufficiently Protected Credentials - While related, the core issue is the **plaintext storage** and transmission, making **CWE-256** and **CWE-319** more specific.\n*   CWE-639: Authorization Bypass Through User-Controlled Key - The vulnerability is not about authorization bypass.\n*   CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection') - This is not relevant to the vulnerability.\n*   CWE-117: Improper Output Neutralization for Logs - The vulnerability doesn't explicitly involve logging.",
  "analysis_with_relationships": "# Summary\n\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-256 | Plaintext Storage of a Password | 1.0 | Base | Allowed | Primary CWE. The credentials are stored in plain text and then exposed. |\n| CWE-319 | Cleartext Transmission of Sensitive Information | 0.7 | Base | Allowed | Secondary CWE. The credentials are sent to the frontend in plaintext. |\n| CWE-201 | Insertion of Sensitive Information Into Sent Data | 0.6 | Base | Allowed | Secondary CWE. Sensitive information is sent to the frontend. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is **CWE-256 Plaintext Storage of a Password** because the credentials are **stored in plain text** on the server. This leads to the secondary weakness of **CWE-319 Cleartext Transmission of Sensitive Information** as the credentials are then sent to the frontend without encryption or proper protection. **CWE-201 Insertion of Sensitive Information Into Sent Data** is also applicable, as the credentials are being sent to an actor (the frontend) that should not have access to them in plaintext.\n\n```mermaid\ngraph TD\n    cwe256[\"CWE-256: Plaintext Storage of a Password\"]\n    cwe319[\"CWE-319: Cleartext Transmission of Sensitive Information\"]\n    cwe201[\"CWE-201: Insertion of Sensitive Information Into Sent Data\"]\n\n    cwe319 -->|CANFOLLOW| cwe201\n    cwe256 -->|CANPRECEDE| cwe319\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe256 primary\n    class cwe319,cwe201 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **CWE-256 Plaintext Storage of a Password**. Because the global credentials are **stored in plain text**, they are then exposed via the API. This leads to **CWE-319 Cleartext Transmission of Sensitive Information**, as the credentials are sent to the frontend in plaintext. Finally, **CWE-201 Insertion of Sensitive Information Into Sent Data** occurs, as the credentials are sent to an actor that should not have access to them.\n\n## Summary of Analysis\nThe analysis is based on the provided evidence, specifically the description stating that after **storing Global credentials on the server**, the API returns them and adds them into the frontend again, allowing to **read them in plain text**.\n\nThe graph relationships highlight the flow of the vulnerability: the initial **storage in plain text** directly leads to the exposure and transmission of the sensitive data.\n\nThe selected CWEs are at the optimal level of specificity because they accurately represent the specific weaknesses present in the vulnerability: **plaintext storage**, **cleartext transmission**, and **insertion of sensitive information** into sent data.\n\n**CWE-256: Plaintext Storage of a Password** is the most specific and accurate representation of the root cause, as it directly addresses the **storage of credentials in plain text**.\n\n**CWE-319: Cleartext Transmission of Sensitive Information** is included because the vulnerability involves sending the **stored credentials in plaintext to the frontend**.\n\n**CWE-201: Insertion of Sensitive Information Into Sent Data** is included because the vulnerability description indicates that the API returns the stored \"Global credentials\", so sending them to the frontend is inappropriate.\n\nOther CWEs Considered but Not Used:\n\n*   CWE-532: Insertion of Sensitive Information into Log File - While sensitive information is exposed, it's not explicitly stated that it's being logged.\n*   CWE-209: Generation of Error Message Containing Sensitive Information - The vulnerability is not about error messages.\n*   CWE-1390: Weak Authentication - The vulnerability is not about weak authentication mechanisms.\n*   CWE-522: Insufficiently Protected Credentials - While related, the core issue is the **plaintext storage** and transmission, making **CWE-256** and **CWE-319** more specific.\n*   CWE-639: Authorization Bypass Through User-Controlled Key - The vulnerability is not about authorization bypass.\n*   CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection') - This is not relevant to the vulnerability.\n*   CWE-117: Improper Output Neutralization for Logs - The vulnerability doesn't explicitly involve logging.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-1390:**\n- 1390 (Weak Authentication) - ROOT\n\n\n**Chain starting from CWE-93:**\n- 93 (Improper Neutralization of CRLF Sequences ('CRLF Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "532",
        "name": "Insertion of Sensitive Information into Log File",
        "source": "sparse"
      },
      "similarity": 620.6124797257266
    },
    {
      "metadata": {
        "doc_id": "209",
        "name": "Generation of Error Message Containing Sensitive Information",
        "source": "sparse"
      },
      "similarity": 588.9965264995798
    },
    {
      "metadata": {
        "doc_id": "256",
        "name": "Plaintext Storage of a Password",
        "source": "sparse"
      },
      "similarity": 576.2792539853565
    },
    {
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "source": "sparse"
      },
      "similarity": 569.5984308254965
    },
    {
      "metadata": {
        "doc_id": "1390",
        "name": "Weak Authentication",
        "source": "sparse"
      },
      "similarity": 559.7711542208735
    },
    {
      "metadata": {
        "doc_id": "522",
        "name": "Insufficiently Protected Credentials",
        "source": "sparse"
      },
      "similarity": 556.2455891981954
    },
    {
      "metadata": {
        "doc_id": "639",
        "name": "Authorization Bypass Through User-Controlled Key",
        "source": "sparse"
      },
      "similarity": 556.2186483168076
    },
    {
      "metadata": {
        "doc_id": "93",
        "name": "Improper Neutralization of CRLF Sequences ('CRLF Injection')",
        "source": "sparse"
      },
      "similarity": 531.9631687592141
    },
    {
      "metadata": {
        "doc_id": "312",
        "name": "Cleartext Storage of Sensitive Information",
        "type": "Base",
        "original_content": "The product stores sensitive information in cleartext within a resource that might be accessible to another control sphere.",
        "keyphrase_source": "rootcause:storing Global credentials on the server",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.4383487348060306,
            "graph": 1.7671873088003052
          }
        }
      },
      "similarity": 0.4383487348060306
    },
    {
      "doc_id": "117",
      "text": "CWE-117: Improper Output Neutralization for Logs",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "117",
        "name": "Improper Output Neutralization for Logs",
        "type": "base",
        "original_content": "CWE-117: Improper Output Neutralization for Logs",
        "relationships": [
          {
            "source_id": "117",
            "target_id": "93",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "117",
            "target_id": "20",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "700"
            }
          },
          {
            "source_id": "117",
            "target_id": "116",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "93",
            "target_id": "117",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "20",
            "target_id": "117",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "700"
            }
          },
          {
            "source_id": "116",
            "target_id": "117",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "93",
                  "117",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "93"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "93",
                  "117",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_forward",
              "source": "93"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-1390",
      "CWE-93",
      "CWE-639",
      "CWE-319",
      "CWE-201",
      "CWE-209",
      "CWE-256",
      "CWE-117",
      "CWE-522",
      "CWE-532"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}