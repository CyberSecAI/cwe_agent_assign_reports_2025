{
  "cve_id": "CVE-2025-31382",
  "description": "Cross-Site Request Forgery (CSRF) vulnerability in theode Language Field allows Stored **XSS**. This issue affects Language Field from n/a through 0.9.",
  "key_phrases": {
    "rootcause": "",
    "weakness": [
      "cross-site request forgery",
      "XSS"
    ],
    "impact": "cross-site scripting",
    "vector": "",
    "attacker": "",
    "product": "theode Language Field",
    "version": "n/a through 0.9",
    "component": ""
  },
  "reference_content": "Here's an analysis of the provided content:\n\n**1. Verification:**\n\nThe content explicitly mentions the CVE ID CVE-2025-31382.\n\n**2. Relevant Content Extraction:**\n\n*   **Weaknesses/vulnerabilities present:** Cross-Site Request Forgery (CSRF).\n*   **Impact of exploitation:** Could allow a malicious actor to force higher privileged users to execute unwanted actions under their current authentication.\n*   **Attack vectors:** Not explicitly mentioned, but CSRF generally involves tricking a user into submitting a request to a vulnerable site.\n*   **Required attacker capabilities/position:** Unauthenticated.\n*   **Mitigation or fix:** No official fix available.\n*   **Vulnerable software:** WordPress Language Field plugin.\n*   **Vulnerable versions:** <= 0.9\n*   **Severity:** Low (CVSS 7.1)\n*   **Classification:** Cross Site Request Forgery (CSRF)\n\n**3. Additional Detail:**\n\nThis content provides details beyond a standard CVE description, including the specific plugin, affected versions, and impact details.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 1.0 | Base | Primary | Allowed |\n| CWE-352 | Cross-Site Request Forgery (CSRF) | 0.9 | Compound | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.95\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is **CWE-79** Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'), which is a Base level CWE. **CWE-79** can be caused by **CWE-113** (Improper Neutralization of CRLF Sequences in HTTP Headers) as a prerequisite. The other weakness is **CWE-352** Cross-Site Request Forgery (CSRF), which is a Compound level CWE. **CWE-352** Requires **CWE-613**, **CWE-642**, **CWE-441**, and **CWE-346**.\n\n```mermaid\ngraph TD\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n    cwe113[\"CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers\"]\n    cwe613[\"CWE-613: Insufficient Session Expiration\"]\n    cwe642[\"CWE-642: External Control of Critical State Data\"]\n    cwe441[\"CWE-441: Unintended Proxy or Intermediary (Confused Deputy)\"]\n    cwe346[\"CWE-346: Origin Validation Error\"]\n    \n    cwe113 -->|CANPRECEDE| cwe79\n    cwe352 -->|REQUIRES| cwe613\n    cwe352 -->|REQUIRES| cwe642\n    cwe352 -->|REQUIRES| cwe441\n    cwe352 -->|REQUIRES| cwe346\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe79 primary\n    class cwe352 secondary\n    class cwe113,cwe613,cwe642,cwe441,cwe346 tertiary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **CWE-352** (Cross-Site Request Forgery) and **CWE-79** (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')).\n\n## Summary of Analysis\nThe vulnerability description clearly states a Cross-Site Request Forgery (CSRF) vulnerability allows for Stored Cross-Site Scripting (**XSS**). This means that the application is vulnerable to both **CWE-352** and **CWE-79**.\n\nThe primary weakness is **CWE-79** because the **XSS** is stored, meaning the input is not being properly neutralized before being stored and displayed to other users. The **CWE-352** is a secondary weakness because it is allowing the attacker to inject the malicious code into the application.\n\nThe selection of **CWE-79** and **CWE-352** is based on the vulnerability description and the keyphrase analysis. The retriever scores also support this selection. **CWE-79** is at the optimal level of specificity because it is a Base level CWE. **CWE-352** is at the optimal level of specificity because it is a Compound level CWE.\n\n# Relevant CWE Information:\n\n## CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n**Technical Explanation:** The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.\n**Security Implications:** An attacker can inject malicious scripts into the web page, which will be executed by other users who visit the page. This can lead to a variety of attacks, including stealing cookies, redirecting users to malicious websites, and defacing the website.\n**Relationship:** Base level CWE.\n**Mapping Guidance Influence:** The mapping guidance suggests that **CWE-79** is an Allowed mapping.\n\n## CWE-352: Cross-Site Request Forgery (CSRF)\n**Technical Explanation:** The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.\n**Security Implications:** An attacker can trick a user into performing an action on the web application without the user's knowledge or consent. This can lead to a variety of attacks, including changing the user's password, making purchases, or transferring funds.\n**Relationship:** Compound level CWE.\n**Mapping Guidance Influence:** The mapping guidance suggests that **CWE-352** is an Allowed mapping.\n\nOther CWEs Considered but Not Used:\n\n*   **CWE-89 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')**: While SQL injection is possible given that a CSRF exists, the vulnerability description specifies Stored **XSS** is possible. There is no evidence to indicate this is occurring.\n*   **CWE-918 Server-Side Request Forgery (SSRF)**: There is no evidence to indicate this is occurring.\n*   **CWE-601 URL Redirection to Untrusted Site ('Open Redirect')**: There is no evidence to indicate this is occurring.\n*   **CWE-434 Unrestricted Upload of File with Dangerous Type**: There is no evidence to indicate this is occurring.\n*   **CWE-1004 Sensitive Cookie Without 'HttpOnly' Flag**: There is no evidence to indicate this is occurring.\n*   **CWE-116 Improper Encoding or Escaping of Output**: While encoding/escaping is related to **XSS**, the vulnerability description specifies **XSS** is possible. There is no evidence to indicate improper encoding is the rootcause.\n*   **CWE-80 Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)**: **CWE-79** is the more general case of **XSS**. The description does not state that neutralization of HTML tags is a specific problem.\n*   **CWE-22 Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')**: There is no evidence to indicate this is occurring.\n*   **CWE-642 External Control of Critical State Data**: There is no evidence to indicate this is occurring.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 1.0 | Base | Primary | Allowed |\n| CWE-352 | Cross-Site Request Forgery (CSRF) | 0.9 | Compound | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.95\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is **CWE-79** Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'), which is a Base level CWE. **CWE-79** can be caused by **CWE-113** (Improper Neutralization of CRLF Sequences in HTTP Headers) as a prerequisite. The other weakness is **CWE-352** Cross-Site Request Forgery (CSRF), which is a Compound level CWE. **CWE-352** Requires **CWE-613**, **CWE-642**, **CWE-441**, and **CWE-346**.\n\n```mermaid\ngraph TD\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n    cwe113[\"CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers\"]\n    cwe613[\"CWE-613: Insufficient Session Expiration\"]\n    cwe642[\"CWE-642: External Control of Critical State Data\"]\n    cwe441[\"CWE-441: Unintended Proxy or Intermediary (Confused Deputy)\"]\n    cwe346[\"CWE-346: Origin Validation Error\"]\n    \n    cwe113 -->|CANPRECEDE| cwe79\n    cwe352 -->|REQUIRES| cwe613\n    cwe352 -->|REQUIRES| cwe642\n    cwe352 -->|REQUIRES| cwe441\n    cwe352 -->|REQUIRES| cwe346\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe79 primary\n    class cwe352 secondary\n    class cwe113,cwe613,cwe642,cwe441,cwe346 tertiary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **CWE-352** (Cross-Site Request Forgery) and **CWE-79** (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')).\n\n## Summary of Analysis\nThe vulnerability description clearly states a Cross-Site Request Forgery (CSRF) vulnerability allows for Stored Cross-Site Scripting (**XSS**). This means that the application is vulnerable to both **CWE-352** and **CWE-79**.\n\nThe primary weakness is **CWE-79** because the **XSS** is stored, meaning the input is not being properly neutralized before being stored and displayed to other users. The **CWE-352** is a secondary weakness because it is allowing the attacker to inject the malicious code into the application.\n\nThe selection of **CWE-79** and **CWE-352** is based on the vulnerability description and the keyphrase analysis. The retriever scores also support this selection. **CWE-79** is at the optimal level of specificity because it is a Base level CWE. **CWE-352** is at the optimal level of specificity because it is a Compound level CWE.\n\n# Relevant CWE Information:\n\n## CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n**Technical Explanation:** The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.\n**Security Implications:** An attacker can inject malicious scripts into the web page, which will be executed by other users who visit the page. This can lead to a variety of attacks, including stealing cookies, redirecting users to malicious websites, and defacing the website.\n**Relationship:** Base level CWE.\n**Mapping Guidance Influence:** The mapping guidance suggests that **CWE-79** is an Allowed mapping.\n\n## CWE-352: Cross-Site Request Forgery (CSRF)\n**Technical Explanation:** The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.\n**Security Implications:** An attacker can trick a user into performing an action on the web application without the user's knowledge or consent. This can lead to a variety of attacks, including changing the user's password, making purchases, or transferring funds.\n**Relationship:** Compound level CWE.\n**Mapping Guidance Influence:** The mapping guidance suggests that **CWE-352** is an Allowed mapping.\n\nOther CWEs Considered but Not Used:\n\n*   **CWE-89 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')**: While SQL injection is possible given that a CSRF exists, the vulnerability description specifies Stored **XSS** is possible. There is no evidence to indicate this is occurring.\n*   **CWE-918 Server-Side Request Forgery (SSRF)**: There is no evidence to indicate this is occurring.\n*   **CWE-601 URL Redirection to Untrusted Site ('Open Redirect')**: There is no evidence to indicate this is occurring.\n*   **CWE-434 Unrestricted Upload of File with Dangerous Type**: There is no evidence to indicate this is occurring.\n*   **CWE-1004 Sensitive Cookie Without 'HttpOnly' Flag**: There is no evidence to indicate this is occurring.\n*   **CWE-116 Improper Encoding or Escaping of Output**: While encoding/escaping is related to **XSS**, the vulnerability description specifies **XSS** is possible. There is no evidence to indicate improper encoding is the rootcause.\n*   **CWE-80 Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)**: **CWE-79** is the more general case of **XSS**. The description does not state that neutralization of HTML tags is a specific problem.\n*   **CWE-22 Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')**: There is no evidence to indicate this is occurring.\n*   **CWE-642 External Control of Critical State Data**: There is no evidence to indicate this is occurring.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-89:**\n- 89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')) - ROOT\n\n\n**Chain starting from CWE-116:**\n- 116 (Improper Encoding or Escaping of Output) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse",
        "original_content": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
        "keyphrase_sources": [
          {
            "id": "weakness:cross-site request forgery",
            "keyphrase": "cross-site request forgery",
            "type": "weakness"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "impact:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "impact"
          },
          {
            "id": "product:theode Language Field",
            "keyphrase": "theode Language Field",
            "type": "product"
          },
          {
            "id": "version:n/a through 0.9",
            "keyphrase": "n/a through 0.9",
            "type": "version"
          }
        ]
      },
      "similarity": 278.9516191485266
    },
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "sparse",
        "original_content": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
        "keyphrase_sources": [
          {
            "id": "weakness:cross-site request forgery",
            "keyphrase": "cross-site request forgery",
            "type": "weakness"
          },
          {
            "id": "impact:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "impact"
          },
          {
            "id": "product:theode Language Field",
            "keyphrase": "theode Language Field",
            "type": "product"
          },
          {
            "id": "version:n/a through 0.9",
            "keyphrase": "n/a through 0.9",
            "type": "version"
          }
        ]
      },
      "similarity": 235.96962424738894
    },
    {
      "metadata": {
        "doc_id": "918",
        "name": "Server-Side Request Forgery (SSRF)",
        "source": "sparse",
        "original_content": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
        "keyphrase_sources": [
          {
            "id": "weakness:cross-site request forgery",
            "keyphrase": "cross-site request forgery",
            "type": "weakness"
          }
        ]
      },
      "similarity": 220.14583486766384
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse",
        "original_content": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
        "keyphrase_sources": [
          {
            "id": "weakness:cross-site request forgery",
            "keyphrase": "cross-site request forgery",
            "type": "weakness"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "impact:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "impact"
          },
          {
            "id": "product:theode Language Field",
            "keyphrase": "theode Language Field",
            "type": "product"
          },
          {
            "id": "version:n/a through 0.9",
            "keyphrase": "n/a through 0.9",
            "type": "version"
          }
        ]
      },
      "similarity": 213.9330402049695
    },
    {
      "metadata": {
        "doc_id": "601",
        "name": "URL Redirection to Untrusted Site ('Open Redirect')",
        "source": "sparse",
        "original_content": "The web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a redirect.",
        "keyphrase_sources": [
          {
            "id": "weakness:cross-site request forgery",
            "keyphrase": "cross-site request forgery",
            "type": "weakness"
          }
        ]
      },
      "similarity": 210.63975416408996
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "source": "sparse",
        "original_content": "The product allows the upload or transfer of dangerous file types that are automatically processed within its environment.",
        "keyphrase_sources": [
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "product:theode Language Field",
            "keyphrase": "theode Language Field",
            "type": "product"
          },
          {
            "id": "version:n/a through 0.9",
            "keyphrase": "n/a through 0.9",
            "type": "version"
          }
        ]
      },
      "similarity": 146.94583866330666
    },
    {
      "metadata": {
        "doc_id": "1004",
        "name": "Sensitive Cookie Without 'HttpOnly' Flag",
        "source": "sparse",
        "original_content": "The product uses a cookie to store sensitive information, but the cookie is not marked with the HttpOnly flag.",
        "keyphrase_sources": [
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "impact:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "impact"
          }
        ]
      },
      "similarity": 143.30311754698513
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse",
        "original_content": "The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.",
        "keyphrase_sources": [
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          }
        ]
      },
      "similarity": 138.85504175336052
    },
    {
      "metadata": {
        "doc_id": "80",
        "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
        "source": "sparse",
        "original_content": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as \"<\", \">\", and \"&\" that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.",
        "keyphrase_sources": [
          {
            "id": "impact:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "impact"
          }
        ]
      },
      "similarity": 69.67371394499169
    },
    {
      "metadata": {
        "doc_id": "22",
        "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
        "source": "sparse",
        "original_content": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
        "keyphrase_sources": [
          {
            "id": "version:n/a through 0.9",
            "keyphrase": "n/a through 0.9",
            "type": "version"
          }
        ]
      },
      "similarity": 62.419783506422384
    },
    {
      "metadata": {
        "doc_id": "642",
        "name": "External Control of Critical State Data",
        "source": "sparse",
        "original_content": "The product stores security-critical state information about its users, or the product itself, in a location that is accessible to unauthorized actors.",
        "keyphrase_sources": [
          {
            "id": "product:theode Language Field",
            "keyphrase": "theode Language Field",
            "type": "product"
          }
        ]
      },
      "similarity": 46.823446939710685
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-89",
      "CWE-116",
      "CWE-346",
      "CWE-601",
      "CWE-80",
      "CWE-22",
      "CWE-79",
      "CWE-113",
      "CWE-441",
      "CWE-613",
      "CWE-1004",
      "CWE-642",
      "CWE-352",
      "CWE-918",
      "CWE-434"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {
    "352": [
      {
        "id": "weakness:cross-site request forgery",
        "keyphrase": "cross-site request forgery",
        "type": "weakness"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "impact:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "impact"
      },
      {
        "id": "product:theode Language Field",
        "keyphrase": "theode Language Field",
        "type": "product"
      },
      {
        "id": "version:n/a through 0.9",
        "keyphrase": "n/a through 0.9",
        "type": "version"
      }
    ],
    "89": [
      {
        "id": "weakness:cross-site request forgery",
        "keyphrase": "cross-site request forgery",
        "type": "weakness"
      },
      {
        "id": "impact:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "impact"
      },
      {
        "id": "product:theode Language Field",
        "keyphrase": "theode Language Field",
        "type": "product"
      },
      {
        "id": "version:n/a through 0.9",
        "keyphrase": "n/a through 0.9",
        "type": "version"
      }
    ],
    "918": [
      {
        "id": "weakness:cross-site request forgery",
        "keyphrase": "cross-site request forgery",
        "type": "weakness"
      }
    ],
    "79": [
      {
        "id": "weakness:cross-site request forgery",
        "keyphrase": "cross-site request forgery",
        "type": "weakness"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "impact:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "impact"
      },
      {
        "id": "product:theode Language Field",
        "keyphrase": "theode Language Field",
        "type": "product"
      },
      {
        "id": "version:n/a through 0.9",
        "keyphrase": "n/a through 0.9",
        "type": "version"
      }
    ],
    "601": [
      {
        "id": "weakness:cross-site request forgery",
        "keyphrase": "cross-site request forgery",
        "type": "weakness"
      }
    ],
    "434": [
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "product:theode Language Field",
        "keyphrase": "theode Language Field",
        "type": "product"
      },
      {
        "id": "version:n/a through 0.9",
        "keyphrase": "n/a through 0.9",
        "type": "version"
      }
    ],
    "1004": [
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "impact:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "impact"
      }
    ],
    "116": [
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      }
    ],
    "80": [
      {
        "id": "impact:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "impact"
      }
    ],
    "642": [
      {
        "id": "product:theode Language Field",
        "keyphrase": "theode Language Field",
        "type": "product"
      }
    ],
    "22": [
      {
        "id": "version:n/a through 0.9",
        "keyphrase": "n/a through 0.9",
        "type": "version"
      }
    ]
  }
}