{
  "retriever": "sparse",
  "query": "In the Linux kernel, the following vulnerability has been resolved gtp Suppress list corruption splat in gtp_net_exit_batch_rtnl(). Brad Spengler reported the list_del() corruption splat in gtp_net_exit_batch_rtnl(). [0] Commit eb28fd76c0a0 (gtp Destroy device along with udp sockets netns dismantle.) added the for_each_netdev() loop in gtp_net_exit_batch_rtnl() to destroy devices in each netns as done in geneve and ip tunnels. However, this could trigger ->dellink() twice for the same device during ->exit_batch_rtnl(). Say we have two netns A & B and gtp device B that resides in netns B but whose UDP socket is in netns A. 1. cleanup_net() processes netns A and then B. 2. gtp_net_exit_batch_rtnl() finds the device B while iterating netns As gn->gtp_dev_list and calls ->dellink(). [ device B is not yet unlinked from netns B as unregister_netdevice_many() has not been called. ] 3. gtp_net_exit_batch_rtnl() finds the device B while iterating netns Bs for_each_netdev() and calls ->dellink(). gtp_dellink() cleans up the devices hash table, unlinks the dev from gn->gtp_dev_list, and calls unregister_netdevice_queue(). Basically, calling gtp_dellink() multiple times is fine unless CONFIG_DEBUG_LIST is enabled. Lets remove for_each_netdev() in gtp_net_exit_batch_rtnl() and delegate the destruction to default_device_exit_batch() as done in bareudp. [0] list_del corruption, ffff8880aaa62c00->next (autoslab_size_M_dev_P_net_core_dev_11127_8_1328_8_S_4096_A_64_n_139+0xc00/0x1000 [slab object]) is LIST_POISON1 (ffffffffffffff02) (prev is 0xffffffffffffff04) kernel BUG at lib/list_debug.c58! Oops invalid opcode 0000",
  "keyphrases": {},
  "timestamp": "2025-07-12 09:56:42",
  "cve_id": "CVE-2025-21865",
  "result_count": 10,
  "results": [
    {
      "cwe_id": "415",
      "name": "Double Free",
      "score": 263.9351151762064,
      "search_source": "base_query"
    },
    {
      "cwe_id": "120",
      "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
      "score": 261.68356806691827,
      "search_source": "base_query"
    },
    {
      "cwe_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "score": 258.2788410518758,
      "search_source": "base_query"
    },
    {
      "cwe_id": "203",
      "name": "Observable Discrepancy",
      "score": 256.58148497069965,
      "search_source": "base_query"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 256.5667813857952,
      "search_source": "base_query"
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "score": 248.39433322250784,
      "search_source": "base_query"
    },
    {
      "cwe_id": "335",
      "name": "Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG)",
      "score": 247.18352011153453,
      "search_source": "base_query"
    },
    {
      "cwe_id": "787",
      "name": "Out-of-bounds Write",
      "score": 244.81358593079605,
      "search_source": "base_query"
    },
    {
      "cwe_id": "755",
      "name": "Improper Handling of Exceptional Conditions",
      "score": 244.60798417759423,
      "search_source": "base_query"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 242.68732534163976,
      "search_source": "base_query"
    }
  ]
}