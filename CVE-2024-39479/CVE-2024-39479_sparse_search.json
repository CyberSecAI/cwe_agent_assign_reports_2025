{
  "retriever": "sparse",
  "query": "In the Linux kernel, the following vulnerability has been resolved drm/i915/hwmon Get rid of devm When both hwmon and hwmon drvdata (on which hwmon depends) are device managed resources, the expectation, on device unbind, is that hwmon will be released before drvdata. However, in i915 there are two separate code paths, which both release either drvdata or hwmon and either can be released before the other. These code paths (for device unbind) are as follows (see also the bug referenced below) Call Trace release_nodes+0x11/0x70 devres_release_group+0xb2/0x110 component_unbind_all+0x8d/0xa0 component_del+0xa5/0x140 intel_pxp_tee_component_fini+0x29/0x40 [i915] intel_pxp_fini+0x33/0x80 [i915] i915_driver_remove+0x4c/0x120 [i915] i915_pci_remove+0x19/0x30 [i915] pci_device_remove+0x32/0xa0 device_release_driver_internal+0x19c/0x200 unbind_store+0x9c/0xb0 and Call Trace release_nodes+0x11/0x70 devres_release_all+0x8a/0xc0 device_unbind_cleanup+0x9/0x70 device_release_driver_internal+0x1c1/0x200 unbind_store+0x9c/0xb0 This means that in i915, if use devm, we cannot gurantee that hwmon will always be released before drvdata. Which means that we have a uaf if hwmon sysfs is accessed when drvdata has been released but hwmon hasnt. The only way out of this seems to be do get rid of devm_ and release/free everything explicitly during device unbind. v2 Change commit message and other minor code changes v3 Cleanup from i915_hwmon_register on error (Armin Wolf) v4 Eliminate",
  "keyphrases": {
    "weakness": [
      "Use-After-Free"
    ]
  },
  "timestamp": "2025-07-12 02:55:44",
  "cve_id": "CVE-2024-39479",
  "result_count": 11,
  "results": [
    {
      "cwe_id": "416",
      "name": "Use After Free",
      "score": 1000.0,
      "search_source": "alternate_term_match"
    },
    {
      "cwe_id": "401",
      "name": "Missing Release of Memory after Effective Lifetime",
      "score": 680.3688618273618,
      "search_source": "weakness:Use-After-Free"
    },
    {
      "cwe_id": "61",
      "name": "UNIX Symbolic Link (Symlink) Following",
      "score": 664.986964286286,
      "search_source": "weakness:Use-After-Free"
    },
    {
      "cwe_id": "203",
      "name": "Observable Discrepancy",
      "score": 662.6970594377622,
      "search_source": "weakness:Use-After-Free"
    },
    {
      "cwe_id": "415",
      "name": "Double Free",
      "score": 659.54236913431,
      "search_source": "weakness:Use-After-Free"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 652.2204382639881,
      "search_source": "weakness:Use-After-Free"
    },
    {
      "cwe_id": "347",
      "name": "Improper Verification of Cryptographic Signature",
      "score": 651.767146167889,
      "search_source": "weakness:Use-After-Free"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 646.1673759245867,
      "search_source": "weakness:Use-After-Free"
    },
    {
      "cwe_id": "863",
      "name": "Incorrect Authorization",
      "score": 644.2864425064106,
      "search_source": "weakness:Use-After-Free"
    },
    {
      "cwe_id": "22",
      "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
      "score": 632.2769582678021,
      "search_source": "weakness:Use-After-Free"
    },
    {
      "cwe_id": "201",
      "name": "Insertion of Sensitive Information Into Sent Data",
      "score": 626.4402212493793,
      "search_source": "weakness:Use-After-Free"
    }
  ]
}