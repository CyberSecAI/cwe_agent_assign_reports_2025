{
  "cve_id": "CVE-2024-6551",
  "description": "The GiveWP - Donation Plugin and Fundraising Platform plugin for WordPress is vulnerable to Full Path Disclosure in all versions up to, and including, 3.15.1. This is due to the plugin **utilizing Symfony and leaving display_errors on within test files**. This makes it possible for unauthenticated attackers to retrieve the full path of the web application, which can be used to aid other attacks. The information displayed is not useful on its own, and requires another vulnerability to be present for damage to an affected website.",
  "key_phrases": {
    "rootcause": "utilizing Symfony and leaving display_errors on within test files",
    "weakness": "",
    "impact": "Full Path Disclosure",
    "vector": "",
    "attacker": "unauthenticated attackers",
    "product": "GiveWP - Donation Plugin and Fundraising Platform",
    "version": "up to and including 3.15.1",
    "component": ""
  },
  "reference_content": "Based on the provided content, here's the vulnerability information for CVE-2024-6551:\n\n**Root Cause:**\n- The vulnerability is due to the GiveWP WordPress plugin using Symfony and having `display_errors` enabled within test files. Specifically, the `common.inc` file used in testing includes the line `ini_set('display_errors', 1);`.\n\n**Weaknesses/Vulnerabilities Present:**\n- Full Path Disclosure: The enabled `display_errors` setting in the test file causes the full server path of the web application to be displayed when accessing the file through a web request.\n\n**Impact of Exploitation:**\n- Exposure of the web application's full path. This information, while not directly exploitable, can assist attackers in planning more complex attacks. It can be used to map the directory structure of a website.\n- Information leakage is the primary impact. The vulnerability is considered medium severity because it requires an additional vulnerability to be present for significant damage.\n\n**Attack Vectors:**\n- Unauthenticated attackers can access the vulnerable test file directly through a web request. This file is located in a publicly accessible directory within the plugin's structure.\n\n**Required Attacker Capabilities/Position:**\n- The attacker needs to be able to send an HTTP request to a vulnerable endpoint. No prior authentication is required, making it remotely exploitable by anyone with network access to the web server.\n\n**Additional Notes:**\n- The vulnerability exists in GiveWP plugin versions up to and including 3.15.1.\n- The issue was fixed in version 3.16.0 by presumably disabling the `display_errors` setting in the test file.\n- The file `common.inc` is located at `/vendor/vendor-prefixed/symfony/http-foundation/Tests/Fixtures/response-functional/common.inc`.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-200 | Exposure of Sensitive Information to an Unauthorized Actor | 1.0 | Class | Primary | Allowed |\n| CWE-201 | Insertion of Sensitive Information Into Sent Data | 0.7 | Base | Secondary Candidate | Allowed |\n| CWE-209 | Generation of Error Message Containing Sensitive Information | 0.6 | Base | Secondary Candidate | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-200 [Exposure of Sensitive Information to an Unauthorized Actor], which is a class-level CWE. The retriever results suggested CWE-201 [Insertion of Sensitive Information Into Sent Data] and CWE-209 [Generation of Error Message Containing Sensitive Information] as possibilities. Since the vulnerability involves the exposure of the full path due to error messages being displayed, these CWEs are related. CWE-201 is a base CWE and a parent of CWE-200. CWE-209 is a base CWE.\n```mermaid\ngraph TD\n    cwe200[\"CWE-200: Exposure of Sensitive Information to an Unauthorized Actor\"]\n    cwe201[\"CWE-201: Insertion of Sensitive Information Into Sent Data\"]\n    cwe209[\"CWE-209: Generation of Error Message Containing Sensitive Information\"]\n    \n    cwe201 -->|CHILDOF| cwe200\n    cwe209 -->|PEEROF| cwe200\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe200 primary\n    class cwe201,cwe209 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **incorrect configuration of `display_errors` being turned on in the test files**. This leads to the **exposure of the full path of the web application** when the test file is accessed, resulting in **sensitive information being disclosed to unauthorized actors**.\n  - Initial Flaw: **utilizing Symfony and leaving display_errors on within test files**\n  - Resulting Weakness: Full Path Disclosure\n  - Final Impact: Exposure of sensitive information to unauthorized actors.\n\n## Summary of Analysis\nThe primary assessment is based on the provided evidence, which clearly indicates that the root cause is the **incorrect configuration** (`display_errors` enabled), leading to the **exposure of sensitive information**. The vulnerability description and CVE reference links content summary explicitly state that the **full path of the web application is disclosed** due to this misconfiguration.\n\n> Vulnerability Description Key Phrases:\n> - **rootcause:** **utilizing Symfony and leaving display_errors on within test files**\n> - **impact:** Full Path Disclosure\n\n> CVE Reference Links Content Summary:\n> - The vulnerability is due to the GiveWP WordPress plugin using Symfony and having `display_errors` enabled within test files. Specifically, the `common.inc` file used in testing includes the line `ini_set('display_errors', 1);`.\n> - Full Path Disclosure: The enabled `display_errors` setting in the test file causes the full server path of the web application to be displayed when accessing the file through a web request.\n\nThe selection of CWE-200 [Exposure of Sensitive Information to an Unauthorized Actor] is based on the fact that the vulnerability results in the exposure of the full path, which is sensitive information. The relationship graph highlights that CWE-201 [Insertion of Sensitive Information Into Sent Data] is a child of CWE-200 [Exposure of Sensitive Information to an Unauthorized Actor] and a secondary candidate.\n\nCWE-200 [Exposure of Sensitive Information to an Unauthorized Actor] is at the class level, which is appropriate as there isn't a more specific base or variant that perfectly captures the scenario. While CWE-209 [Generation of Error Message Containing Sensitive Information] is also relevant, CWE-200 [Exposure of Sensitive Information to an Unauthorized Actor] is a more encompassing classification because the error message is just the means by which the sensitive information is exposed.\n\n*   **CWE-200: Exposure of Sensitive Information to an Unauthorized Actor**\n    *   **Technical Explanation:** The plugin **incorrectly configures error reporting**, leading to the **disclosure of the web application's full path**. This path is sensitive information that should not be exposed to unauthorized actors.\n    *   **Security Implications:** Exposure of the full path can aid attackers in reconnaissance, helping them map the directory structure and potentially identify other vulnerabilities.\n    *   **Relationship and Chain:** This is the final impact in the vulnerability chain.\n    *   **Mapping Guidance:** The CWE is allowed and is a class level.\n*   **CWE-201: Insertion of Sensitive Information Into Sent Data**\n    *   **Technical Explanation:** The web server, due to misconfiguration, **inserts sensitive information (the full path)** into the data it sends back to the client in the form of an error message.\n    *   **Security Implications:** Similar to CWE-200 [Exposure of Sensitive Information to an Unauthorized Actor], this can aid attackers.\n    *   **Relationship and Chain:** This is a child of CWE-200 [Exposure of Sensitive Information to an Unauthorized Actor].\n    *   **Mapping Guidance:** The CWE is allowed and is at the Base level of abstraction, which is a preferred level.\n*   **CWE-209: Generation of Error Message Containing Sensitive Information**\n    *   **Technical Explanation:** The product **generates an error message that includes sensitive information**, which in this case is the full path of the web application.\n    *   **Security Implications:** This allows attackers to glean sensitive information from the error messages.\n    *   **Relationship and Chain:** This is related to CWE-200 [Exposure of Sensitive Information to an Unauthorized Actor] as the error message is the means by which the information is exposed.\n    *   **Mapping Guidance:** The CWE is allowed and is at the Base level of abstraction, which is a preferred level.\n\nCWEs considered but not used:\n\n*   CWE-22 [Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')]: While full path disclosure is related to paths, this CWE is about path traversal, which is not the case here. The vulnerability is simply exposing the full path, not allowing traversal outside of restricted directories.\n*   CWE-306 [Missing Authentication for Critical Function]: This is not relevant because the vulnerability is about information disclosure, not a missing authentication check.\n*   CWE-434 [Unrestricted Upload of File with Dangerous Type]: This CWE is not relevant as it deals with unrestricted uploads, which is not part of this vulnerability.\n*   CWE-862 [Missing Authorization]: The vulnerability involves exposure of information due to error messages, not missing authorization checks.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-200 | Exposure of Sensitive Information to an Unauthorized Actor | 1.0 | Class | Primary | Allowed |\n| CWE-201 | Insertion of Sensitive Information Into Sent Data | 0.7 | Base | Secondary Candidate | Allowed |\n| CWE-209 | Generation of Error Message Containing Sensitive Information | 0.6 | Base | Secondary Candidate | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-200 [Exposure of Sensitive Information to an Unauthorized Actor], which is a class-level CWE. The retriever results suggested CWE-201 [Insertion of Sensitive Information Into Sent Data] and CWE-209 [Generation of Error Message Containing Sensitive Information] as possibilities. Since the vulnerability involves the exposure of the full path due to error messages being displayed, these CWEs are related. CWE-201 is a base CWE and a parent of CWE-200. CWE-209 is a base CWE.\n```mermaid\ngraph TD\n    cwe200[\"CWE-200: Exposure of Sensitive Information to an Unauthorized Actor\"]\n    cwe201[\"CWE-201: Insertion of Sensitive Information Into Sent Data\"]\n    cwe209[\"CWE-209: Generation of Error Message Containing Sensitive Information\"]\n    \n    cwe201 -->|CHILDOF| cwe200\n    cwe209 -->|PEEROF| cwe200\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe200 primary\n    class cwe201,cwe209 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **incorrect configuration of `display_errors` being turned on in the test files**. This leads to the **exposure of the full path of the web application** when the test file is accessed, resulting in **sensitive information being disclosed to unauthorized actors**.\n  - Initial Flaw: **utilizing Symfony and leaving display_errors on within test files**\n  - Resulting Weakness: Full Path Disclosure\n  - Final Impact: Exposure of sensitive information to unauthorized actors.\n\n## Summary of Analysis\nThe primary assessment is based on the provided evidence, which clearly indicates that the root cause is the **incorrect configuration** (`display_errors` enabled), leading to the **exposure of sensitive information**. The vulnerability description and CVE reference links content summary explicitly state that the **full path of the web application is disclosed** due to this misconfiguration.\n\n> Vulnerability Description Key Phrases:\n> - **rootcause:** **utilizing Symfony and leaving display_errors on within test files**\n> - **impact:** Full Path Disclosure\n\n> CVE Reference Links Content Summary:\n> - The vulnerability is due to the GiveWP WordPress plugin using Symfony and having `display_errors` enabled within test files. Specifically, the `common.inc` file used in testing includes the line `ini_set('display_errors', 1);`.\n> - Full Path Disclosure: The enabled `display_errors` setting in the test file causes the full server path of the web application to be displayed when accessing the file through a web request.\n\nThe selection of CWE-200 [Exposure of Sensitive Information to an Unauthorized Actor] is based on the fact that the vulnerability results in the exposure of the full path, which is sensitive information. The relationship graph highlights that CWE-201 [Insertion of Sensitive Information Into Sent Data] is a child of CWE-200 [Exposure of Sensitive Information to an Unauthorized Actor] and a secondary candidate.\n\nCWE-200 [Exposure of Sensitive Information to an Unauthorized Actor] is at the class level, which is appropriate as there isn't a more specific base or variant that perfectly captures the scenario. While CWE-209 [Generation of Error Message Containing Sensitive Information] is also relevant, CWE-200 [Exposure of Sensitive Information to an Unauthorized Actor] is a more encompassing classification because the error message is just the means by which the sensitive information is exposed.\n\n*   **CWE-200: Exposure of Sensitive Information to an Unauthorized Actor**\n    *   **Technical Explanation:** The plugin **incorrectly configures error reporting**, leading to the **disclosure of the web application's full path**. This path is sensitive information that should not be exposed to unauthorized actors.\n    *   **Security Implications:** Exposure of the full path can aid attackers in reconnaissance, helping them map the directory structure and potentially identify other vulnerabilities.\n    *   **Relationship and Chain:** This is the final impact in the vulnerability chain.\n    *   **Mapping Guidance:** The CWE is allowed and is a class level.\n*   **CWE-201: Insertion of Sensitive Information Into Sent Data**\n    *   **Technical Explanation:** The web server, due to misconfiguration, **inserts sensitive information (the full path)** into the data it sends back to the client in the form of an error message.\n    *   **Security Implications:** Similar to CWE-200 [Exposure of Sensitive Information to an Unauthorized Actor], this can aid attackers.\n    *   **Relationship and Chain:** This is a child of CWE-200 [Exposure of Sensitive Information to an Unauthorized Actor].\n    *   **Mapping Guidance:** The CWE is allowed and is at the Base level of abstraction, which is a preferred level.\n*   **CWE-209: Generation of Error Message Containing Sensitive Information**\n    *   **Technical Explanation:** The product **generates an error message that includes sensitive information**, which in this case is the full path of the web application.\n    *   **Security Implications:** This allows attackers to glean sensitive information from the error messages.\n    *   **Relationship and Chain:** This is related to CWE-200 [Exposure of Sensitive Information to an Unauthorized Actor] as the error message is the means by which the information is exposed.\n    *   **Mapping Guidance:** The CWE is allowed and is at the Base level of abstraction, which is a preferred level.\n\nCWEs considered but not used:\n\n*   CWE-22 [Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')]: While full path disclosure is related to paths, this CWE is about path traversal, which is not the case here. The vulnerability is simply exposing the full path, not allowing traversal outside of restricted directories.\n*   CWE-306 [Missing Authentication for Critical Function]: This is not relevant because the vulnerability is about information disclosure, not a missing authentication check.\n*   CWE-434 [Unrestricted Upload of File with Dangerous Type]: This CWE is not relevant as it deals with unrestricted uploads, which is not part of this vulnerability.\n*   CWE-862 [Missing Authorization]: The vulnerability involves exposure of information due to error messages, not missing authorization checks.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-862:**\n- 862 (Missing Authorization) - ROOT\n\n\n**Chain starting from CWE-22:**\n- 22 (Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "862",
        "name": "Missing Authorization",
        "source": "sparse"
      },
      "similarity": 553.635417737007
    },
    {
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "source": "sparse"
      },
      "similarity": 543.702087150026
    },
    {
      "metadata": {
        "doc_id": "306",
        "name": "Missing Authentication for Critical Function",
        "source": "sparse"
      },
      "similarity": 543.4773960320922
    },
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse"
      },
      "similarity": 541.4368452964638
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 538.5649918339177
    },
    {
      "metadata": {
        "doc_id": "22",
        "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
        "source": "sparse"
      },
      "similarity": 536.2403570635637
    },
    {
      "metadata": {
        "doc_id": "639",
        "name": "Authorization Bypass Through User-Controlled Key",
        "source": "sparse"
      },
      "similarity": 533.1553734928195
    },
    {
      "metadata": {
        "doc_id": "200",
        "name": "Exposure of Sensitive Information to an Unauthorized Actor",
        "source": "sparse"
      },
      "similarity": 525.2922731419249
    },
    {
      "metadata": {
        "doc_id": "425",
        "name": "Direct Request ('Forced Browsing')",
        "type": "Base",
        "original_content": "The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.",
        "keyphrase_source": "rootcause:leaving display_errors on within test files",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5335995926857546,
            "graph": 2.074452155808528
          }
        }
      },
      "similarity": 0.5335995926857546
    },
    {
      "doc_id": "434",
      "text": "The product allows the upload or transfer of dangerous file types that are automatically processed within its environment.",
      "score": 0.5728479399396668,
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "type": "Base",
        "extended_description": null,
        "alternate_terms": [
          "Unrestricted File Upload"
        ],
        "original_content": "The product allows the upload or transfer of dangerous file types that are automatically processed within its environment.",
        "relationships": [
          {
            "source_id": "434",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "183",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "430",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "436",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "351",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "669",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "434",
            "target_id": "669",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "434",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "669",
            "target_id": "434",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "430",
            "target_id": "434",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "434",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "183",
            "target_id": "434",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "source": "graph",
        "sources": [
          "vector",
          "graph"
        ],
        "vector_score": 0.5728479399396668,
        "graph_score": 3.4866,
        "score_components": {
          "relationship_chain": 0.6,
          "explicit_mention": 1.0,
          "abstraction_path": 0.9,
          "sequence_path": 0.6400000000000001
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "863",
                  "942",
                  "PARENTOF"
                ],
                [
                  "942",
                  "183",
                  "CHILDOF"
                ],
                [
                  "183",
                  "434",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.6,
              "type": "relationship_chain",
              "source": "863"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "425",
                  "98",
                  "CANPRECEDE"
                ],
                [
                  "98",
                  "73",
                  "CANFOLLOW"
                ],
                [
                  "73",
                  "434",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.6400000000000001,
              "type": "vulnerability_sequence_forward",
              "source": "425"
            }
          }
        },
        "is_explicit": true,
        "abstraction_level": "base",
        "position": "after",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5258316640798526,
            "graph": 2.3210991759758666
          }
        }
      },
      "similarity": 2.3210991759758666
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-862",
      "CWE-22",
      "CWE-306",
      "CWE-201",
      "CWE-200",
      "CWE-209",
      "CWE-434"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}