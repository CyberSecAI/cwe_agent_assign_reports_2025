{
  "retriever": "sparse",
  "query": "Keystone is a content management system for Node.js. Prior to version 6.5.0, `{field}.isFilterable` access control can be bypassed in `update` and `delete` mutations by adding additional unique filters. These filters can be used as an oracle to probe the existence or value of otherwise unreadable fields. Specifically, when a mutation includes a `where` clause with multiple unique filters (e.g. `id` and `email`), Keystone will attempt to match records even if filtering by the latter fields would normally be rejected by `field.isFilterable` or `list.defaultIsFilterable`. This can allow malicious actors to infer the presence of a particular field value when a filter is successful in returning a result. This affects any project relying on the default or dynamic `isFilterable` behavior (at the list or field level) to prevent external users from using the filtering of fields as a discovery mechanism. While this access control is respected during `findMany` operations, it was not completely enforced during `update` and `delete` mutations when accepting more than one unique `where` values in filters. This has no impact on projects using `isFilterable false` or `defaultIsFilterable false` for sensitive fields, or for those who have otherwise omitted filtering by these fields from their GraphQL schema. This issue has been patched in `@keystone-6/core` version 6.5.0. To mitigate this issue in older versions where patching is not a viable pathway, set `isFilterable false` statically for relevant fields to prevent filtering by them earlier in the access control pipeline (that is, dont use functions) set `{field}.graphql.omit.read true` for relevant fields, which implicitly removes filtering by these fields from the GraphQL schema and/or deny `update` and `delete` operations for the relevant lists completely.",
  "keyphrases": {
    "rootcause": [
      "bypass Keystone access control by adding additional unique filters"
    ],
    "weakness": [
      "access control bypass"
    ]
  },
  "timestamp": "2025-07-15 01:34:14",
  "cve_id": "CVE-2025-46720",
  "result_count": 10,
  "results": [
    {
      "cwe_id": "863",
      "name": "Incorrect Authorization",
      "score": 1502.325368859748,
      "search_source": "rootcause:bypass Keystone access control by adding additional unique filters"
    },
    {
      "cwe_id": "79",
      "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
      "score": 1410.5202341213824,
      "search_source": "rootcause:bypass Keystone access control by adding additional unique filters"
    },
    {
      "cwe_id": "472",
      "name": "External Control of Assumed-Immutable Web Parameter",
      "score": 1381.6074046918172,
      "search_source": "rootcause:bypass Keystone access control by adding additional unique filters"
    },
    {
      "cwe_id": "639",
      "name": "Authorization Bypass Through User-Controlled Key",
      "score": 1371.0455883427744,
      "search_source": "rootcause:bypass Keystone access control by adding additional unique filters"
    },
    {
      "cwe_id": "201",
      "name": "Insertion of Sensitive Information Into Sent Data",
      "score": 1362.3178780771077,
      "search_source": "rootcause:bypass Keystone access control by adding additional unique filters"
    },
    {
      "cwe_id": "200",
      "name": "Exposure of Sensitive Information to an Unauthorized Actor",
      "score": 1349.3841851755758,
      "search_source": "rootcause:bypass Keystone access control by adding additional unique filters"
    },
    {
      "cwe_id": "285",
      "name": "Improper Authorization",
      "score": 1347.951429179595,
      "search_source": "rootcause:bypass Keystone access control by adding additional unique filters"
    },
    {
      "cwe_id": "862",
      "name": "Missing Authorization",
      "score": 1346.476988460125,
      "search_source": "rootcause:bypass Keystone access control by adding additional unique filters"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 1345.8911913183078,
      "search_source": "rootcause:bypass Keystone access control by adding additional unique filters"
    },
    {
      "cwe_id": "918",
      "name": "Server-Side Request Forgery (SSRF)",
      "score": 1340.0275474578227,
      "search_source": "rootcause:bypass Keystone access control by adding additional unique filters"
    }
  ]
}