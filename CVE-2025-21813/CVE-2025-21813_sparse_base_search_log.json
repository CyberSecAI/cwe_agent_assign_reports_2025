{
  "method": "sparse_base",
  "query": "In the Linux kernel, the following vulnerability has been resolved timers/migration Fix off-by-one root mis-connection Before attaching a new root to the old root, the children counter of the new root is checked to verify that only the upcoming CPUs top group have been connected to it. However since the recently added commit b729cc1ec21a (timers/migration Fix another race between hotplug and idle entry/exit) this check is not valid anymore because the old root is pre-accounted as a child to the new root. Therefore after connecting the upcoming CPUs top group to the new root, the children count to be expected must be 2 and not 1 anymore. This omission results in the old root to not be connected to the new root. Then eventually the system may run with more than one top level, which defeats the purpose of a single idle migrator. Also the old root is pre-accounted but not connected upon the new root creation. But it can be connected to the new root later on. Therefore the old root may be accounted twice to the new root. The propagation of such overcommit can end up creating a double final top-level root with a groupmask incorrectly initialized. Although harmless given that the final top level roots will never have a parent to walk up to, this oddity opportunistically reported the core issue WARNING CPU 8 PID 0 at kernel/time/timer_migration.c543 tmigr_requires_handle_remote CPU 8 UID 0 PID 0 Comm swapper/8 RIP 0010tmigr_requires_handle_remote Call Trace ? tmigr_requires_handle_remote ? hrtimer_run_queues update_process_times tick_periodic tick_handle_periodic __sysvec_apic_timer_interrupt sysvec_apic_timer_interrupt Fix the problem by taking the old root into account in the children count of the new root so the connection is not omitted. Also warn when more than one top level group exists to better detect similar issues in the future.",
  "keyphrases": {
    "base_query": "In the Linux kernel, the following vulnerability has been resolved timers/migration Fix off-by-one root mis-connection Before attaching a new root to the old root, the children counter of the new root is checked to verify that only the upcoming CPUs top group have been connected to it. However since the recently added commit b729cc1ec21a (timers/migration Fix another race between hotplug and idle entry/exit) this check is not valid anymore because the old root is pre-accounted as a child to the new root. Therefore after connecting the upcoming CPUs top group to the new root, the children count to be expected must be 2 and not 1 anymore. This omission results in the old root to not be connected to the new root. Then eventually the system may run with more than one top level, which defeats the purpose of a single idle migrator. Also the old root is pre-accounted but not connected upon the new root creation. But it can be connected to the new root later on. Therefore the old root may be accounted twice to the new root. The propagation of such overcommit can end up creating a double final top-level root with a groupmask incorrectly initialized. Although harmless given that the final top level roots will never have a parent to walk up to, this oddity opportunistically reported the core issue WARNING CPU 8 PID 0 at kernel/time/timer_migration.c543 tmigr_requires_handle_remote CPU 8 UID 0 PID 0 Comm swapper/8 RIP 0010tmigr_requires_handle_remote Call Trace ? tmigr_requires_handle_remote ? hrtimer_run_queues update_process_times tick_periodic tick_handle_periodic __sysvec_apic_timer_interrupt sysvec_apic_timer_interrupt Fix the problem by taking the old root into account in the children count of the new root so the connection is not omitted. Also warn when more than one top level group exists to better detect similar issues in the future."
  },
  "timestamp": "2025-07-12T09:55:30.370175",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "226",
      "name": "Sensitive Information in Resource Not Removed Before Reuse",
      "score": 476.1141072053014
    },
    {
      "doc_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "score": 475.19475622681733
    },
    {
      "doc_id": "250",
      "name": "Execution with Unnecessary Privileges",
      "score": 469.27662782504234
    },
    {
      "doc_id": "835",
      "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
      "score": 463.343494133412
    },
    {
      "doc_id": "863",
      "name": "Incorrect Authorization",
      "score": 461.56861494019546
    }
  ]
}