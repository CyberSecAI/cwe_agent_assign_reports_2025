{
  "cve_id": "CVE-2024-41063",
  "description": "In the Linux kernel, the following vulnerability has been resolved Bluetooth hci_core cancel all works upon hci_unregister_dev() syzbot is reporting that calling hci_release_dev() from hci_error_reset() due to hci_dev_put() from hci_error_reset() can cause **deadlock** at destroy_workqueue(), for hci_error_reset() is called from hdev->req_workqueue which destroy_workqueue() needs to flush. We need to make sure that hdev->{rx_work,cmd_work,tx_work} which are queued into hdev->workqueue and hdev->{power_on,error_reset} which are queued into hdev->req_workqueue are no longer running by the moment destroy_workqueue(hdev->workqueue) destroy_workqueue(hdev->req_workqueue) are called from hci_release_dev(). Call cancel_work_sync() on these work items from hci_unregister_dev() as soon as hdev->list is removed from hci_dev_list.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "deadlock",
    "impact": "",
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": "Bluetooth hci_core"
  },
  "reference_content": "Based on the provided content, here's an analysis of the vulnerability:\n\n**Root Cause:**\n\nThe root cause is a potential deadlock in the Bluetooth HCI core driver during device unregistration. The `hci_error_reset()` function can call `hci_release_dev()` due to `hci_dev_put()`. However, `hci_error_reset()` is executed from a workqueue (`hdev->req_workqueue`) that needs to be flushed before it is destroyed by `destroy_workqueue()` in `hci_release_dev()`, leading to a deadlock.\n\n**Weaknesses/Vulnerabilities Present:**\n\nThe core weakness lies in the race condition between work items queued to different workqueues associated with the Bluetooth device (`hdev`). Specifically:\n   - `hdev->rx_work`, `hdev->cmd_work`, and `hdev->tx_work` are queued into `hdev->workqueue`.\n   - `hdev->power_on` and `hdev->error_reset` are queued into `hdev->req_workqueue`.\n   - The `hci_release_dev()` function, which is called during unregistration, attempts to destroy these workqueues which requires the work items to be flushed/cancelled. However, `hci_error_reset()` can be running as a work item in the `hdev->req_workqueue` when `hci_release_dev` tries to destroy it causing a deadlock.\n   - The core issue is that the work items are not cancelled/stopped before `destroy_workqueue` is called.\n\n**Impact of Exploitation:**\n\nThe impact is a denial-of-service (DoS) condition due to a deadlock. The system would become unresponsive while waiting for the workqueues to be flushed and destroyed, making the Bluetooth functionality unusable.\n\n**Attack Vectors:**\n\nThe attack vector involves triggering a specific sequence of events that leads to the execution of `hci_error_reset()` while a Bluetooth device is being unregistered, forcing the problematic code path in `hci_release_dev()` leading to the deadlock. This can be done through normal Bluetooth operations which leads to device error/reset.\n\n**Required Attacker Capabilities/Position:**\n\nAn attacker would need to have the ability to interact with Bluetooth devices on the system and cause an error that results in the device being reset and unregistered. This would likely require a local or adjacent network position that allows interaction with the Bluetooth hardware.\n\n**Mitigation:**\nThe fix introduces calls to `cancel_work_sync()` for all relevant work items (`hdev->rx_work`, `hdev->cmd_work`, `hdev->tx_work`, `hdev->power_on`, and `hdev->error_reset`) within `hci_unregister_dev()` immediately after removing `hdev->list` from the `hci_dev_list` . This ensures that the work items are no longer running before the workqueues are destroyed.\n\n**Additional notes:**\n- All the provided content comes from patches addressing the same underlying issue, which indicates that the vulnerability was present in multiple versions of the Linux kernel, requiring backports of the fix.\n- The patches were reported by syzbot, a Linux kernel fuzzer which identified the deadlock scenario.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-833 | Deadlock | 1.0 | Base | Primary | Allowed |\n| CWE-667 | Improper Locking | 0.7 | Class | Secondary Candidate | Allowed-with-Review |\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.6 | Class | Secondary Candidate | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE, CWE-833 (Deadlock), is a Base-level CWE that directly describes the vulnerability. CWE-667 (Improper Locking) and CWE-362 (Race Condition) are Class-level CWEs that could be related to the deadlock situation, but are less specific. The hierarchical and chain relationships were not as influential as the direct match of the vulnerability description to the definition of CWE-833.\n\n```mermaid\ngraph TD\n    cwe833[\"CWE-833: Deadlock\"]\n    cwe667[\"CWE-667: Improper Locking\"]\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n\n    cwe833\n    cwe667\n    cwe362\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe833 primary\n    class cwe667,cwe362 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a race condition due to concurrent execution of tasks using shared resources (workqueues) without proper synchronization. This leads to a deadlock when the system tries to destroy the workqueues while tasks are still running in them, waiting for each other.\n  - **Root Cause:** **Deadlock** due to race condition during workqueue destruction\n  - **Weakness:** Improper handling of work items leading to tasks waiting for each other.\n  - **Impact:** Denial of Service due to system unresponsiveness\n\n## Summary of Analysis\nThe primary CWE is CWE-833 (Deadlock). The vulnerability description clearly states that the issue is a **deadlock** in the Linux kernel's Bluetooth HCI core driver. The evidence supports this with the description of how `hci_error_reset()` is called from `hdev->req_workqueue`, leading to a **deadlock** when `destroy_workqueue()` is called.\n\nThe Retriever Results also list CWE-833 as a highly relevant CWE.\n\nOther CWEs like CWE-667 (Improper Locking) and CWE-362 (Race Condition) were considered, as they are often related to deadlocks, but they are less specific than CWE-833 in this context. CWE-667 could be considered as the locking was not handled correctly, but the end result was a **deadlock**.\nThe provided fix of calling `cancel_work_sync()` confirms that the issue was related to improper handling/synchronization of work items, which resulted in a deadlock.\n\nBased on the evidence, the primary CWE is CWE-833, which is at the optimal level of specificity (Base).\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\n\n## CWE-833: Deadlock\n**Abstraction Level**: Base\n**Similarity Score**: 0.78\n**Source**: dense\n\n**Description**:\nThe product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-833 | Deadlock | 1.0 | Base | Primary | Allowed |\n| CWE-667 | Improper Locking | 0.7 | Class | Secondary Candidate | Allowed-with-Review |\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.6 | Class | Secondary Candidate | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE, CWE-833 (Deadlock), is a Base-level CWE that directly describes the vulnerability. CWE-667 (Improper Locking) and CWE-362 (Race Condition) are Class-level CWEs that could be related to the deadlock situation, but are less specific. The hierarchical and chain relationships were not as influential as the direct match of the vulnerability description to the definition of CWE-833.\n\n```mermaid\ngraph TD\n    cwe833[\"CWE-833: Deadlock\"]\n    cwe667[\"CWE-667: Improper Locking\"]\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n\n    cwe833\n    cwe667\n    cwe362\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe833 primary\n    class cwe667,cwe362 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a race condition due to concurrent execution of tasks using shared resources (workqueues) without proper synchronization. This leads to a deadlock when the system tries to destroy the workqueues while tasks are still running in them, waiting for each other.\n  - **Root Cause:** **Deadlock** due to race condition during workqueue destruction\n  - **Weakness:** Improper handling of work items leading to tasks waiting for each other.\n  - **Impact:** Denial of Service due to system unresponsiveness\n\n## Summary of Analysis\nThe primary CWE is CWE-833 (Deadlock). The vulnerability description clearly states that the issue is a **deadlock** in the Linux kernel's Bluetooth HCI core driver. The evidence supports this with the description of how `hci_error_reset()` is called from `hdev->req_workqueue`, leading to a **deadlock** when `destroy_workqueue()` is called.\n\nThe Retriever Results also list CWE-833 as a highly relevant CWE.\n\nOther CWEs like CWE-667 (Improper Locking) and CWE-362 (Race Condition) were considered, as they are often related to deadlocks, but they are less specific than CWE-833 in this context. CWE-667 could be considered as the locking was not handled correctly, but the end result was a **deadlock**.\nThe provided fix of calling `cancel_work_sync()` confirms that the issue was related to improper handling/synchronization of work items, which resulted in a deadlock.\n\nBased on the evidence, the primary CWE is CWE-833, which is at the optimal level of specificity (Base).\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\n\n## CWE-833: Deadlock\n**Abstraction Level**: Base\n**Similarity Score**: 0.78\n**Source**: dense\n\n**Description**:\nThe product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-667:**\n- 667 (Improper Locking) - ROOT\n\n\n**Chain starting from CWE-833:**\n- 833 (Deadlock) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "212",
        "name": "Improper Removal of Sensitive Information Before Storage or Transfer",
        "source": "sparse"
      },
      "similarity": 372.29569620164995
    },
    {
      "metadata": {
        "doc_id": "833",
        "name": "Deadlock",
        "source": "sparse"
      },
      "similarity": 370.27733402552917
    },
    {
      "metadata": {
        "doc_id": "667",
        "name": "Improper Locking",
        "source": "sparse"
      },
      "similarity": 366.94006559851863
    },
    {
      "metadata": {
        "doc_id": "1333",
        "name": "Inefficient Regular Expression Complexity",
        "source": "sparse"
      },
      "similarity": 363.18443163472045
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 363.12724817721664
    },
    {
      "metadata": {
        "doc_id": "138",
        "name": "Improper Neutralization of Special Elements",
        "source": "sparse"
      },
      "similarity": 358.8446503530095
    },
    {
      "metadata": {
        "doc_id": "61",
        "name": "UNIX Symbolic Link (Symlink) Following",
        "source": "sparse"
      },
      "similarity": 356.7428192960138
    },
    {
      "metadata": {
        "doc_id": "364",
        "name": "Signal Handler Race Condition",
        "source": "sparse"
      },
      "similarity": 354.791111040272
    },
    {
      "metadata": {
        "doc_id": "820",
        "name": "Missing Synchronization",
        "type": "Base",
        "original_content": "The product utilizes a shared resource in a concurrent manner but does not attempt to synchronize access to the resource.",
        "keyphrase_source": "weakness:deadlock",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.4356905962653121,
            "graph": 1.6386018213151237
          }
        }
      },
      "similarity": 0.4356905962653121
    },
    {
      "doc_id": "201",
      "text": "CWE-201: Insertion of Sensitive Information Into Sent Data",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "type": "base",
        "original_content": "CWE-201: Insertion of Sensitive Information Into Sent Data",
        "relationships": [
          {
            "source_id": "201",
            "target_id": "598",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "201",
            "target_id": "226",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "201",
            "target_id": "212",
            "label": "CANFOLLOW",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "201",
            "target_id": "202",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "201",
            "target_id": "209",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "201",
            "target_id": "200",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "598",
            "target_id": "201",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "226",
            "target_id": "201",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "212",
            "target_id": "201",
            "label": "CANPRECEDE",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "200",
            "target_id": "201",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "212",
                  "201",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "212"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "212",
                  "201",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_forward",
              "source": "212"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-667",
      "CWE-833",
      "CWE-362"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}