{
  "cve_id": "CVE-2024-11719",
  "description": "The tarteaucitron-wp WordPress plugin before 0.3.0 **does not have CSRF check** in some places, and is **missing sanitisation** as well as escaping, which could allow attackers to make logged in admin add **Stored XSS** payloads via a CSRF attack.",
  "key_phrases": {
    "rootcause": [
      "does not have CSRF check",
      "missing sanitisation",
      "CSRF check missing",
      "missing escaping"
    ],
    "weakness": [
      "cross-site scripting",
      "Stored XSS"
    ],
    "impact": "Stored XSS payloads",
    "vector": "",
    "attacker": "attackers",
    "product": "tarteaucitron-wp WordPress plugin",
    "version": "before 0.3.0",
    "component": ""
  },
  "reference_content": "## Analysis of CVE-2024-11719 Content\n\nThe provided content is **RELEVANT** to CVE-2024-11719. It details a Stored Cross-Site Scripting (XSS) vulnerability in the tarteaucitron.js plugin for WordPress. Here's a breakdown of the information extracted:\n\n**Root cause of vulnerability:**\n\nThe plugin lacks CSRF checks in certain areas and is missing proper sanitization and escaping of user-supplied data.\n\n**Weaknesses/vulnerabilities present:**\n\n*   Cross-Site Scripting (XSS) - Stored XSS via CSRF.\n*   Missing CSRF protection.\n*   Insufficient input sanitization and output escaping.\n\n**Impact of exploitation:**\n\nAttackers can inject and store malicious JavaScript payloads, which will be executed when other logged-in administrators access affected pages (e.g., the Privacy Policy page).\n\n**Attack vectors:**\n\n*   CSRF attack: An attacker can trick a logged-in administrator into submitting a malicious form.\n*   The provided Proof of Concept (PoC) demonstrates how to craft an HTML file that, when opened by a logged-in admin, submits a form with a malicious payload.\n\n**Required attacker capabilities/position:**\n\n*   The attacker needs to be able to induce a logged-in administrator to perform an action (e.g., open a malicious HTML file).\n*   No authentication is required to *deliver* the attack, but it relies on a logged-in administrator being tricked.\n\n**Mitigation or fix:**\n\n*   The vulnerability is fixed in version 0.3.0 of the plugin.  Updating to this version or later resolves the issue.\n\n**Additional Details (more than official CVE description):**\n\n*   **Proof of Concept:** A detailed HTML payload is provided, demonstrating the exploitation process.\n*   **CVSS Score:** The vulnerability has a CVSS score of 7.1 (High).\n*   **Researcher:** The vulnerability was originally researched by Bob Matyas.\n*   **Multiple Vulnerabilities:** The plugin has another vulnerability listed (CVE-2024-11719 also references a second vulnerability: Author+ Stored XSS)\n*   **Timeline:** The vulnerability was publicly published on 2024-10-27.\n*   **WPVDB ID:** 64c2a296-5fc6-450e-a12d-75cbf8b73e3a",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID  | CWE Name                                                                              | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :------------------------------------------------------------------------------------ | :--------- | :---------------------- | :------------------------------ | :------------------------------ |\n| CWE-352   | Cross-Site Request Forgery (CSRF)                                                  | 1.0        | Compound                | Primary                         | Allowed                         |\n| CWE-79    | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 1.0        | Base                    | Secondary                       | Allowed                         |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is the **missing CSRF check**, which directly corresponds to CWE-352. The secondary weakness is **missing sanitization and escaping**, which leads to stored XSS. CWE-79 is a base level CWE that is a PARENTOF many other XSS related CWEs. The relationship analysis shows that the **missing CSRF check** allows for the **stored XSS** to happen.\n\n```mermaid\ngraph TD\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    \n    cwe352 -->|CANPRECEDE| cwe79\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe352 primary\n    class cwe79 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **missing CSRF check** (CWE-352), which allows attackers to inject malicious payloads into the system. Due to the **missing sanitisation and escaping** (CWE-79), these payloads are not properly neutralized and are stored in the web page, leading to stored XSS.\n\n## Summary of Analysis\nThe analysis is based on the provided evidence, which includes the vulnerability description and the keyphrase-specific CWE analysis. The vulnerability description clearly states that the plugin **does not have CSRF check** and is **missing sanitisation** as well as escaping, which could allow attackers to make logged in admin add **Stored XSS** payloads via a CSRF attack.\n\nThe graph relationships influenced the final selection by highlighting the connection between the **missing CSRF check** and the stored XSS vulnerability. The selected CWEs are at the optimal level of specificity because they directly represent the weaknesses described in the vulnerability description.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-425: Direct Request ('Forced Browsing')\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-352: Cross-Site Request Forgery (CSRF)\n**Abstraction Level**: Compound\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This is a well-known Composite of multiple weaknesses that must all occur simultaneously, although it is attack-oriented in nature.\n\n\n\n## CWE-472: External Control of Assumed-Immutable Web Parameter\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\n**Abstraction Level**: Variant\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as \"<\", \">\", and \"&\" that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-434: Unrestricted Upload of File with Dangerous Type\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product allows the upload or transfer of dangerous file types that are automatically processed within its environment.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-138: Improper Neutralization of Special Elements\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n\n\n## CWE-184: Incomplete List of Disallowed Inputs\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-923: Improper Restriction of Communication Channel to Intended Endpoints\n**Abstraction Level**: Class\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product establishes a communication channel to (or from) an endpoint for privileged or protected operations, but it does not properly ensure that it is communicating with the correct endpoint.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 3892.06\n**Source**: sparse\n\n**Description**:\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-352: Cross-Site Request Forgery (CSRF)\n**Abstraction Level**: Compound\n**Similarity Score**: 3833.38\n**Source**: sparse\n\n**Description**:\nThe web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted",
  "analysis_with_relationships": "# Summary\n| CWE ID  | CWE Name                                                                              | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :------------------------------------------------------------------------------------ | :--------- | :---------------------- | :------------------------------ | :------------------------------ |\n| CWE-352   | Cross-Site Request Forgery (CSRF)                                                  | 1.0        | Compound                | Primary                         | Allowed                         |\n| CWE-79    | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 1.0        | Base                    | Secondary                       | Allowed                         |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is the **missing CSRF check**, which directly corresponds to CWE-352. The secondary weakness is **missing sanitization and escaping**, which leads to stored XSS. CWE-79 is a base level CWE that is a PARENTOF many other XSS related CWEs. The relationship analysis shows that the **missing CSRF check** allows for the **stored XSS** to happen.\n\n```mermaid\ngraph TD\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    \n    cwe352 -->|CANPRECEDE| cwe79\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe352 primary\n    class cwe79 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **missing CSRF check** (CWE-352), which allows attackers to inject malicious payloads into the system. Due to the **missing sanitisation and escaping** (CWE-79), these payloads are not properly neutralized and are stored in the web page, leading to stored XSS.\n\n## Summary of Analysis\nThe analysis is based on the provided evidence, which includes the vulnerability description and the keyphrase-specific CWE analysis. The vulnerability description clearly states that the plugin **does not have CSRF check** and is **missing sanitisation** as well as escaping, which could allow attackers to make logged in admin add **Stored XSS** payloads via a CSRF attack.\n\nThe graph relationships influenced the final selection by highlighting the connection between the **missing CSRF check** and the stored XSS vulnerability. The selected CWEs are at the optimal level of specificity because they directly represent the weaknesses described in the vulnerability description.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-425: Direct Request ('Forced Browsing')\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-352: Cross-Site Request Forgery (CSRF)\n**Abstraction Level**: Compound\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This is a well-known Composite of multiple weaknesses that must all occur simultaneously, although it is attack-oriented in nature.\n\n\n\n## CWE-472: External Control of Assumed-Immutable Web Parameter\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\n**Abstraction Level**: Variant\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as \"<\", \">\", and \"&\" that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-434: Unrestricted Upload of File with Dangerous Type\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product allows the upload or transfer of dangerous file types that are automatically processed within its environment.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-138: Improper Neutralization of Special Elements\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n\n\n## CWE-184: Incomplete List of Disallowed Inputs\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-923: Improper Restriction of Communication Channel to Intended Endpoints\n**Abstraction Level**: Class\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product establishes a communication channel to (or from) an endpoint for privileged or protected operations, but it does not properly ensure that it is communicating with the correct endpoint.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 3892.06\n**Source**: sparse\n\n**Description**:\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-352: Cross-Site Request Forgery (CSRF)\n**Abstraction Level**: Compound\n**Similarity Score**: 3833.38\n**Source**: sparse\n\n**Description**:\nThe web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-116:**\n- 116 (Improper Encoding or Escaping of Output) - ROOT\n\n\n**Chain starting from CWE-80:**\n- 80 (Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse",
        "original_content": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
        "keyphrase_sources": [
          {
            "id": "rootcause:does not have CSRF check",
            "keyphrase": "does not have CSRF check",
            "type": "rootcause"
          },
          {
            "id": "rootcause:missing sanitisation",
            "keyphrase": "missing sanitisation",
            "type": "rootcause"
          },
          {
            "id": "rootcause:CSRF check missing",
            "keyphrase": "CSRF check missing",
            "type": "rootcause"
          },
          {
            "id": "rootcause:missing escaping",
            "keyphrase": "missing escaping",
            "type": "rootcause"
          },
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "weakness:Stored XSS",
            "keyphrase": "Stored XSS",
            "type": "weakness"
          },
          {
            "id": "impact:Stored XSS payloads",
            "keyphrase": "Stored XSS payloads",
            "type": "impact"
          },
          {
            "id": "attacker:attackers",
            "keyphrase": "attackers",
            "type": "attacker"
          },
          {
            "id": "product:tarteaucitron-wp WordPress plugin",
            "keyphrase": "tarteaucitron-wp WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:before 0.3.0",
            "keyphrase": "before 0.3.0",
            "type": "version"
          }
        ]
      },
      "similarity": 548.9938386319491
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse",
        "original_content": "The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.",
        "keyphrase_sources": [
          {
            "id": "rootcause:does not have CSRF check",
            "keyphrase": "does not have CSRF check",
            "type": "rootcause"
          },
          {
            "id": "rootcause:missing sanitisation",
            "keyphrase": "missing sanitisation",
            "type": "rootcause"
          },
          {
            "id": "rootcause:CSRF check missing",
            "keyphrase": "CSRF check missing",
            "type": "rootcause"
          },
          {
            "id": "rootcause:missing escaping",
            "keyphrase": "missing escaping",
            "type": "rootcause"
          },
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "weakness:Stored XSS",
            "keyphrase": "Stored XSS",
            "type": "weakness"
          },
          {
            "id": "impact:Stored XSS payloads",
            "keyphrase": "Stored XSS payloads",
            "type": "impact"
          },
          {
            "id": "attacker:attackers",
            "keyphrase": "attackers",
            "type": "attacker"
          },
          {
            "id": "product:tarteaucitron-wp WordPress plugin",
            "keyphrase": "tarteaucitron-wp WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:before 0.3.0",
            "keyphrase": "before 0.3.0",
            "type": "version"
          }
        ]
      },
      "similarity": 398.36790354710905
    },
    {
      "metadata": {
        "doc_id": "862",
        "name": "Missing Authorization",
        "source": "sparse",
        "original_content": "The product does not perform an authorization check when an actor attempts to access a resource or perform an action.",
        "keyphrase_sources": [
          {
            "id": "rootcause:does not have CSRF check",
            "keyphrase": "does not have CSRF check",
            "type": "rootcause"
          },
          {
            "id": "rootcause:missing sanitisation",
            "keyphrase": "missing sanitisation",
            "type": "rootcause"
          },
          {
            "id": "rootcause:CSRF check missing",
            "keyphrase": "CSRF check missing",
            "type": "rootcause"
          },
          {
            "id": "rootcause:missing escaping",
            "keyphrase": "missing escaping",
            "type": "rootcause"
          },
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "weakness:Stored XSS",
            "keyphrase": "Stored XSS",
            "type": "weakness"
          },
          {
            "id": "impact:Stored XSS payloads",
            "keyphrase": "Stored XSS payloads",
            "type": "impact"
          },
          {
            "id": "attacker:attackers",
            "keyphrase": "attackers",
            "type": "attacker"
          },
          {
            "id": "product:tarteaucitron-wp WordPress plugin",
            "keyphrase": "tarteaucitron-wp WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:before 0.3.0",
            "keyphrase": "before 0.3.0",
            "type": "version"
          }
        ]
      },
      "similarity": 392.7000080934551
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "source": "sparse",
        "original_content": "The product allows the upload or transfer of dangerous file types that are automatically processed within its environment.",
        "keyphrase_sources": [
          {
            "id": "rootcause:does not have CSRF check",
            "keyphrase": "does not have CSRF check",
            "type": "rootcause"
          },
          {
            "id": "rootcause:missing sanitisation",
            "keyphrase": "missing sanitisation",
            "type": "rootcause"
          },
          {
            "id": "rootcause:CSRF check missing",
            "keyphrase": "CSRF check missing",
            "type": "rootcause"
          },
          {
            "id": "rootcause:missing escaping",
            "keyphrase": "missing escaping",
            "type": "rootcause"
          },
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "weakness:Stored XSS",
            "keyphrase": "Stored XSS",
            "type": "weakness"
          },
          {
            "id": "impact:Stored XSS payloads",
            "keyphrase": "Stored XSS payloads",
            "type": "impact"
          },
          {
            "id": "attacker:attackers",
            "keyphrase": "attackers",
            "type": "attacker"
          },
          {
            "id": "product:tarteaucitron-wp WordPress plugin",
            "keyphrase": "tarteaucitron-wp WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:before 0.3.0",
            "keyphrase": "before 0.3.0",
            "type": "version"
          }
        ]
      },
      "similarity": 360.127317642867
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse",
        "original_content": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
        "keyphrase_sources": [
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "weakness:Stored XSS",
            "keyphrase": "Stored XSS",
            "type": "weakness"
          },
          {
            "id": "impact:Stored XSS payloads",
            "keyphrase": "Stored XSS payloads",
            "type": "impact"
          }
        ]
      },
      "similarity": 311.5662480686157
    },
    {
      "metadata": {
        "doc_id": "425",
        "name": "Direct Request ('Forced Browsing')",
        "source": "sparse",
        "original_content": "The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.",
        "keyphrase_sources": [
          {
            "id": "rootcause:does not have CSRF check",
            "keyphrase": "does not have CSRF check",
            "type": "rootcause"
          },
          {
            "id": "rootcause:missing sanitisation",
            "keyphrase": "missing sanitisation",
            "type": "rootcause"
          },
          {
            "id": "rootcause:CSRF check missing",
            "keyphrase": "CSRF check missing",
            "type": "rootcause"
          },
          {
            "id": "rootcause:missing escaping",
            "keyphrase": "missing escaping",
            "type": "rootcause"
          },
          {
            "id": "attacker:attackers",
            "keyphrase": "attackers",
            "type": "attacker"
          },
          {
            "id": "product:tarteaucitron-wp WordPress plugin",
            "keyphrase": "tarteaucitron-wp WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:before 0.3.0",
            "keyphrase": "before 0.3.0",
            "type": "version"
          }
        ]
      },
      "similarity": 306.87744963924155
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-116",
      "CWE-80",
      "CWE-79",
      "CWE-923",
      "CWE-472",
      "CWE-352",
      "CWE-74",
      "CWE-138",
      "CWE-184",
      "CWE-425",
      "CWE-434"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {
    "352": [
      {
        "id": "rootcause:does not have CSRF check",
        "keyphrase": "does not have CSRF check",
        "type": "rootcause"
      },
      {
        "id": "rootcause:missing sanitisation",
        "keyphrase": "missing sanitisation",
        "type": "rootcause"
      },
      {
        "id": "rootcause:CSRF check missing",
        "keyphrase": "CSRF check missing",
        "type": "rootcause"
      },
      {
        "id": "rootcause:missing escaping",
        "keyphrase": "missing escaping",
        "type": "rootcause"
      },
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "weakness:Stored XSS",
        "keyphrase": "Stored XSS",
        "type": "weakness"
      },
      {
        "id": "impact:Stored XSS payloads",
        "keyphrase": "Stored XSS payloads",
        "type": "impact"
      },
      {
        "id": "attacker:attackers",
        "keyphrase": "attackers",
        "type": "attacker"
      },
      {
        "id": "product:tarteaucitron-wp WordPress plugin",
        "keyphrase": "tarteaucitron-wp WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:before 0.3.0",
        "keyphrase": "before 0.3.0",
        "type": "version"
      }
    ],
    "116": [
      {
        "id": "rootcause:does not have CSRF check",
        "keyphrase": "does not have CSRF check",
        "type": "rootcause"
      },
      {
        "id": "rootcause:missing sanitisation",
        "keyphrase": "missing sanitisation",
        "type": "rootcause"
      },
      {
        "id": "rootcause:CSRF check missing",
        "keyphrase": "CSRF check missing",
        "type": "rootcause"
      },
      {
        "id": "rootcause:missing escaping",
        "keyphrase": "missing escaping",
        "type": "rootcause"
      },
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "weakness:Stored XSS",
        "keyphrase": "Stored XSS",
        "type": "weakness"
      },
      {
        "id": "impact:Stored XSS payloads",
        "keyphrase": "Stored XSS payloads",
        "type": "impact"
      },
      {
        "id": "attacker:attackers",
        "keyphrase": "attackers",
        "type": "attacker"
      },
      {
        "id": "product:tarteaucitron-wp WordPress plugin",
        "keyphrase": "tarteaucitron-wp WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:before 0.3.0",
        "keyphrase": "before 0.3.0",
        "type": "version"
      }
    ],
    "862": [
      {
        "id": "rootcause:does not have CSRF check",
        "keyphrase": "does not have CSRF check",
        "type": "rootcause"
      },
      {
        "id": "rootcause:missing sanitisation",
        "keyphrase": "missing sanitisation",
        "type": "rootcause"
      },
      {
        "id": "rootcause:CSRF check missing",
        "keyphrase": "CSRF check missing",
        "type": "rootcause"
      },
      {
        "id": "rootcause:missing escaping",
        "keyphrase": "missing escaping",
        "type": "rootcause"
      },
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "weakness:Stored XSS",
        "keyphrase": "Stored XSS",
        "type": "weakness"
      },
      {
        "id": "impact:Stored XSS payloads",
        "keyphrase": "Stored XSS payloads",
        "type": "impact"
      },
      {
        "id": "attacker:attackers",
        "keyphrase": "attackers",
        "type": "attacker"
      },
      {
        "id": "product:tarteaucitron-wp WordPress plugin",
        "keyphrase": "tarteaucitron-wp WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:before 0.3.0",
        "keyphrase": "before 0.3.0",
        "type": "version"
      }
    ],
    "434": [
      {
        "id": "rootcause:does not have CSRF check",
        "keyphrase": "does not have CSRF check",
        "type": "rootcause"
      },
      {
        "id": "rootcause:missing sanitisation",
        "keyphrase": "missing sanitisation",
        "type": "rootcause"
      },
      {
        "id": "rootcause:CSRF check missing",
        "keyphrase": "CSRF check missing",
        "type": "rootcause"
      },
      {
        "id": "rootcause:missing escaping",
        "keyphrase": "missing escaping",
        "type": "rootcause"
      },
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "weakness:Stored XSS",
        "keyphrase": "Stored XSS",
        "type": "weakness"
      },
      {
        "id": "impact:Stored XSS payloads",
        "keyphrase": "Stored XSS payloads",
        "type": "impact"
      },
      {
        "id": "attacker:attackers",
        "keyphrase": "attackers",
        "type": "attacker"
      },
      {
        "id": "product:tarteaucitron-wp WordPress plugin",
        "keyphrase": "tarteaucitron-wp WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:before 0.3.0",
        "keyphrase": "before 0.3.0",
        "type": "version"
      }
    ],
    "425": [
      {
        "id": "rootcause:does not have CSRF check",
        "keyphrase": "does not have CSRF check",
        "type": "rootcause"
      },
      {
        "id": "rootcause:missing sanitisation",
        "keyphrase": "missing sanitisation",
        "type": "rootcause"
      },
      {
        "id": "rootcause:CSRF check missing",
        "keyphrase": "CSRF check missing",
        "type": "rootcause"
      },
      {
        "id": "rootcause:missing escaping",
        "keyphrase": "missing escaping",
        "type": "rootcause"
      },
      {
        "id": "attacker:attackers",
        "keyphrase": "attackers",
        "type": "attacker"
      },
      {
        "id": "product:tarteaucitron-wp WordPress plugin",
        "keyphrase": "tarteaucitron-wp WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:before 0.3.0",
        "keyphrase": "before 0.3.0",
        "type": "version"
      }
    ],
    "79": [
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "weakness:Stored XSS",
        "keyphrase": "Stored XSS",
        "type": "weakness"
      },
      {
        "id": "impact:Stored XSS payloads",
        "keyphrase": "Stored XSS payloads",
        "type": "impact"
      }
    ]
  }
}