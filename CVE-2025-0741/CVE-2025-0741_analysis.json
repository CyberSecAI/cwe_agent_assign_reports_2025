{
  "cve_id": "CVE-2025-0741",
  "description": "An **Improper Access Control** vulnerability has been found in EmbedAI 2.1 and below. This vulnerability allows an authenticated attacker to write messages into other users chat by changing the parameter chat_id of the POST request /embedai/chats/send_message.",
  "key_phrases": {
    "rootcause": "Improper Access Control",
    "weakness": "",
    "impact": "write messages into other users chat",
    "vector": "changing the parameter chat_id",
    "attacker": "authenticated attacker",
    "product": "EmbedAI",
    "version": "2.1 and below",
    "component": "/embedai/chats/send_message POST request"
  },
  "reference_content": "## Analysis of CVE-2025-0741 Content\n\nThis content is **RELEVANT** to CVE-2025-0741. It provides details beyond the placeholder description.\n\n**Root cause of vulnerability:**\n\nThe root cause is an Improper Access Control vulnerability.\n\n**Weaknesses/vulnerabilities present:**\n\n*   Improper Access Control (CWE-284)\n\n**Impact of exploitation:**\n\nAn authenticated attacker can write messages into other users' chats.\n\n**Attack vectors:**\n\n*   Changing the \"chat\\_id\" parameter in a POST request to \"/embedai/chats/send\\_message\".\n\n**Required attacker capabilities/position:**\n\n*   Authenticated attacker.\n\n**Mitigation or fix:**\n\n*   The vulnerability has been resolved in EmbedAI version 2.1.\n\n**Details from the advisory:**\n\n*   **CVE-2025-0741**: an Improper Access Control vulnerability has been found in EmbedAI. This vulnerability allows an authenticated attacker to write messages into other users chat by changing the parameter \"chat\\_id\" of the POST request \"/embedai/chats/send\\_message\".\n*   CVSS v3.1: 5.8 | CVSS AV:N/AC:L/PR:N/UI:N/S:C/C:N/I:L/A:N.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-639 | Authorization Bypass Through User-Controlled Key | 0.9 | Base | Allowed | Primary CWE. The application allows an attacker to modify a key value (chat_id) to access another user's data. |\n| CWE-284 | Improper Access Control | 0.6 | Class | Discouraged | Secondary candidate. While the description states **Improper Access Control**, CWE-639 is a more specific Base level CWE that describes the vulnerability more precisely. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-639, which is a Base level CWE. CWE-284 is a more general Class level CWE, and while it's mentioned in the description, CWE-639 provides a more specific description of the vulnerability. There are no direct parent-child relationships apparent in the retriever results that change the mapping.\n\n```mermaid\ngraph TD\n    cwe639[\"CWE-639: Authorization Bypass Through User-Controlled Key\"]\n    cwe284[\"CWE-284: Improper Access Control\"]\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe639 primary\n    class cwe284 secondary\n```\n\n## Vulnerability Chain\nThe chain of events is as follows:\n1.  **Root Cause:** CWE-639 - Authorization Bypass Through User-Controlled Key: The application allows the authenticated attacker to modify the `chat_id` parameter.\n2.  **Impact:** An authenticated attacker can write messages into other users' chats.\n\n## Summary of Analysis\nThe initial assessment identified CWE-639 as the most suitable primary CWE, given the ability to modify the `chat_id` parameter to gain unauthorized access, which directly aligns with the CWE's description. The vulnerability description explicitly mentions **Improper Access Control**, but the more specific weakness lies in the authorization bypass.\n\nThe decision is based on the evidence from the vulnerability description and the CVE Reference Links Content Summary, which both indicate that an authenticated attacker can write messages into other users' chats by manipulating the `chat_id` parameter. This aligns perfectly with the definition of CWE-639, where the system's authorization functionality fails to prevent one user from accessing another user's data by modifying the key value identifying the data.\n\nThe selected CWEs are at the optimal level of specificity, with CWE-639 being a Base level CWE that accurately represents the vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-639: Authorization Bypass Through User-Controlled Key\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-284: Improper Access Control\n**Abstraction Level**: Class\n**Similarity Score**: 1444.55\n**Source**: sparse\n\n**Description**:\nThe product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-285 is high-level and lower-level CWEs can frequently be used instead. It is a level-1 Class (i.e., a child of a Pillar).",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-639 | Authorization Bypass Through User-Controlled Key | 0.9 | Base | Allowed | Primary CWE. The application allows an attacker to modify a key value (chat_id) to access another user's data. |\n| CWE-284 | Improper Access Control | 0.6 | Class | Discouraged | Secondary candidate. While the description states **Improper Access Control**, CWE-639 is a more specific Base level CWE that describes the vulnerability more precisely. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-639, which is a Base level CWE. CWE-284 is a more general Class level CWE, and while it's mentioned in the description, CWE-639 provides a more specific description of the vulnerability. There are no direct parent-child relationships apparent in the retriever results that change the mapping.\n\n```mermaid\ngraph TD\n    cwe639[\"CWE-639: Authorization Bypass Through User-Controlled Key\"]\n    cwe284[\"CWE-284: Improper Access Control\"]\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe639 primary\n    class cwe284 secondary\n```\n\n## Vulnerability Chain\nThe chain of events is as follows:\n1.  **Root Cause:** CWE-639 - Authorization Bypass Through User-Controlled Key: The application allows the authenticated attacker to modify the `chat_id` parameter.\n2.  **Impact:** An authenticated attacker can write messages into other users' chats.\n\n## Summary of Analysis\nThe initial assessment identified CWE-639 as the most suitable primary CWE, given the ability to modify the `chat_id` parameter to gain unauthorized access, which directly aligns with the CWE's description. The vulnerability description explicitly mentions **Improper Access Control**, but the more specific weakness lies in the authorization bypass.\n\nThe decision is based on the evidence from the vulnerability description and the CVE Reference Links Content Summary, which both indicate that an authenticated attacker can write messages into other users' chats by manipulating the `chat_id` parameter. This aligns perfectly with the definition of CWE-639, where the system's authorization functionality fails to prevent one user from accessing another user's data by modifying the key value identifying the data.\n\nThe selected CWEs are at the optimal level of specificity, with CWE-639 being a Base level CWE that accurately represents the vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-639: Authorization Bypass Through User-Controlled Key\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-284: Improper Access Control\n**Abstraction Level**: Class\n**Similarity Score**: 1444.55\n**Source**: sparse\n\n**Description**:\nThe product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-285 is high-level and lower-level CWEs can frequently be used instead. It is a level-1 Class (i.e., a child of a Pillar).\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-284:**\n- 284 (Improper Access Control) - ROOT\n\n\n**Chain starting from CWE-285:**\n- 285 (Improper Authorization) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "639",
        "name": "Authorization Bypass Through User-Controlled Key",
        "source": "sparse"
      },
      "similarity": 231.48520939631845
    },
    {
      "metadata": {
        "doc_id": "287",
        "name": "Improper Authentication",
        "source": "sparse"
      },
      "similarity": 218.09783001173957
    },
    {
      "metadata": {
        "doc_id": "472",
        "name": "External Control of Assumed-Immutable Web Parameter",
        "source": "sparse"
      },
      "similarity": 216.91279459372743
    },
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "sparse"
      },
      "similarity": 215.339238055698
    },
    {
      "metadata": {
        "doc_id": "78",
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "source": "sparse"
      },
      "similarity": 214.29545731567038
    },
    {
      "metadata": {
        "doc_id": "285",
        "name": "Improper Authorization",
        "source": "sparse"
      },
      "similarity": 213.62740241494294
    },
    {
      "metadata": {
        "doc_id": "306",
        "name": "Missing Authentication for Critical Function",
        "source": "sparse"
      },
      "similarity": 212.09937065938348
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 211.60278865526553
    },
    {
      "metadata": {
        "doc_id": "1426",
        "name": "Improper Validation of Generative AI Output",
        "type": "Base",
        "original_content": "The product invokes a generative AI/ML\n\t\t\tcomponent whose behaviors and outputs cannot be directly\n\t\t\tcontrolled, but the product does not validate or\n\t\t\tinsufficiently validates the outputs to ensure that they\n\t\t\talign with the intended security, content, or privacy\n\t\t\tpolicy.",
        "keyphrase_source": "rootcause:Improper Access Control",
        "source": "dense",
        "mapping_notes": {
          "usage": "Discouraged",
          "rationale": "There is potential for this CWE entry to be modified in the future for further clarification as the research community continues to better understand weaknesses in this domain.",
          "comments": "\n\nThis CWE entry is only related to \"validation\" of output and might be used mistakenly for other kinds of output-related weaknesses. Careful attention should be paid to whether this CWE should be used for vulnerabilities related to \"prompt injection,\" which is an attack that works against many different weaknesses. See Maintenance Notes and Research Gaps. Analysts should closely investigate the root cause to ensure it is not ultimately due to other well-known weaknesses. The following suggestions are not comprehensive.\n",
          "reasons": [
            "Potential Major Changes",
            "Frequent Misinterpretation"
          ],
          "suggestions": [
            {
              "CweID": "77",
              "Comment": "Command Injection. Use this CWE for most cases of 'prompt injection' attacks in which additional prompts are added to input to, or output from, the model. If OS command injection, consider CWE-78."
            },
            {
              "CweID": "94",
              "Comment": "Code Injection. Use this CWE for cases in which output from genAI components is directly fed into components that parse and execute code."
            },
            {
              "CweID": "116",
              "Comment": "Improper Encoding or Escaping of Output. Use this CWE when the product is expected to encode or escape genAI outputs."
            }
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5111556631239939,
            "graph": 1.616456094383967
          }
        }
      },
      "similarity": 0.5111556631239939
    },
    {
      "doc_id": "79",
      "text": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
      "score": 0.5174107411337551,
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "type": "Base",
        "extended_description": "\n\nCross-site scripting (XSS) vulnerabilities occur when:\n\n\n  1. Untrusted data enters a web application, typically from a web request.\n\n  1. The web application dynamically generates a web page that contains this untrusted data.\n\n  1. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc.\n\n  1. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data.\n\n  1. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain.\n\n  1. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain.\n\nThere are three main kinds of XSS:\n\n  -  **Type 1: Reflected XSS (or Non-Persistent)**  - The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.\n\n  -  **Type 2: Stored XSS (or Persistent)**  - The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs. \n\n  -  **Type 0: DOM-Based XSS**  - In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible. \n\nOnce the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as \"drive-by hacking.\"\n\nIn many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.\n",
        "alternate_terms": [
          "XSS",
          "HTML Injection",
          "CSS"
        ],
        "original_content": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
        "relationships": [
          {
            "source_id": "79",
            "target_id": "87",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "86",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "85",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "84",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "83",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "81",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "80",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "113",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "352",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "494",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "74",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "79",
            "target_id": "74",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "87",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "86",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "85",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "84",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "83",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "81",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "80",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "74",
            "target_id": "79",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "494",
            "target_id": "79",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "79",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "113",
            "target_id": "79",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "source": "graph",
        "sources": [
          "vector",
          "graph"
        ],
        "vector_score": 0.5174107411337551,
        "graph_score": 3.4424,
        "score_components": {
          "relationship_chain": 0.42,
          "explicit_mention": 1.0,
          "abstraction_path": 0.9,
          "sequence_path": 0.8
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "287",
                  "613",
                  "CANFOLLOW"
                ],
                [
                  "613",
                  "352",
                  "REQUIREDBY"
                ],
                [
                  "79",
                  "352",
                  "PEEROF"
                ]
              ],
              "score": 0.42,
              "type": "relationship_chain",
              "source": "287"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "78",
                  "184",
                  "CANFOLLOW"
                ],
                [
                  "184",
                  "79",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "vulnerability_sequence_forward",
              "source": "78"
            }
          }
        },
        "is_explicit": true,
        "abstraction_level": "base",
        "position": "after",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse",
            "graph"
          ],
          "retriever_count": 3,
          "normalized_scores": {
            "dense": 0.4852479437253901,
            "sparse": 65.89109178546342,
            "graph": 2.272404296453502
          }
        }
      },
      "similarity": 2.272404296453502
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-284",
      "CWE-285",
      "CWE-639"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}