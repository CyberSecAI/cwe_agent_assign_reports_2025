{
  "cve_id": "CVE-2024-53858",
  "description": "The gh cli is GitHubs official command line tool. A security vulnerability has been identified in the GitHub CLI that could leak authentication tokens when cloning repositories containing `git` submodules hosted outside of GitHub.com and ghe.com. This vulnerability stems from several `gh` commands used to clone a repository with submodules from a non-GitHub host including `gh repo clone`, `gh repo fork`, and `gh pr checkout`. These GitHub CLI commands invoke git with instructions to retrieve authentication tokens using the `credential.helper` configuration variable for any host encountered. Prior to version `2.63.0`, hosts other than GitHub.com and ghe.com are treated as GitHub Enterprise Server hosts and have tokens sourced from the following environment variables before falling back to host-specific tokens stored within system-specific secured storage 1. `GITHUB_ENTERPRISE_TOKEN`, 2. `GH_ENTERPRISE_TOKEN` and 3. `GITHUB_TOKEN` when the `CODESPACES` environment variable is set. The result being `git` sending authentication tokens when cloning submodules. In version `2.63.0`, these GitHub CLI commands will limit the hosts for which `gh` acts as a credential helper to source authentication tokens. Additionally, `GITHUB_TOKEN` will only be used for GitHub.com and ghe.com. Users are advised to upgrade. Additionally users are advised to revoke authentication tokens used with the GitHub CLI and to review their personal security log and any relevant audit logs for actions associated with their account or enterprise",
  "key_phrases": {
    "rootcause": "improper access control",
    "weakness": "",
    "impact": "leak authentication tokens",
    "vector": "",
    "attacker": "",
    "product": "GitHub CLI",
    "version": "prior to 2.63.0",
    "component": ""
  },
  "reference_content": "Based on the provided content, here's a breakdown of the vulnerability described:\n\n**Root cause of vulnerability:**\n- The GitHub CLI (`gh`) incorrectly treats non-GitHub.com and non-ghe.com hosts as GitHub Enterprise Server hosts when cloning repositories with submodules, leading to the exposure of authentication tokens.\n\n**Weaknesses/vulnerabilities present:**\n- The `gh` CLI commands `gh repo clone`, `gh repo fork`, and `gh pr checkout` invoke `git` with instructions to retrieve authentication tokens using the `credential.helper` configuration for any encountered host, including non-GitHub hosts.\n- Prior to version `2.63.0`, `gh` incorrectly sourced tokens from environment variables (`GITHUB_ENTERPRISE_TOKEN`, `GH_ENTERPRISE_TOKEN`, and `GITHUB_TOKEN` when `CODESPACES` is set) for non-GitHub hosts, treating them as GitHub Enterprise Server instances.\n- Git may then send these tokens to the submodule host during cloning.\n\n**Impact of exploitation:**\n- Leaked authentication tokens could be used by a third party to access privileged resources on the non-GitHub submodule host.\n\n**Attack vectors:**\n- Cloning a repository with a submodule hosted on a non-GitHub domain using the vulnerable `gh` commands.\n- The attacker would need to control or compromise a git repository, with a submodule pointing to a server under their control.\n\n**Required attacker capabilities/position:**\n- Ability to create or control a git repository with submodules hosted on a non-GitHub server.\n- The attacker needs a victim to clone the repository using vulnerable versions of the `gh` tool.\n\n**Additional Details:**\n- The vulnerability is fixed in `gh` version `2.63.0` by limiting the hosts for which `gh` acts as a credential helper and by restricting the usage of `GITHUB_TOKEN` to GitHub.com and ghe.com.\n- The vulnerability has a CVSS score of 6.5 (Moderate severity).\n- The attack vector is local, but the impact involves high confidentiality and integrity issues.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-214 | Invocation of Process Using Visible Sensitive Information | 0.8 | Base | Primary | Allowed |\n| CWE-306 | Missing Authentication for Critical Function | 0.7 | Base | Secondary Candidate | Allowed |\n| CWE-201 | Insertion of Sensitive Information Into Sent Data | 0.6 | Base | Secondary Candidate | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE selected is CWE-214, which focuses on the exposure of sensitive information through process invocation. While other CWEs like CWE-306 (Missing Authentication) and CWE-201 (Data Leak) were considered, CWE-214 best captures the core issue of authentication tokens being visibly exposed to external processes. CWE-214 is a base level CWE, providing sufficient specificity. The weakness here is that the sensitive information is being passed to git, which will use it with submodules and potentially leak it to third parties.\n\n```mermaid\ngraph TD\n    cwe214[\"CWE-214: Invocation of Process Using Visible Sensitive Information\"]\n    cwe306[\"CWE-306: Missing Authentication for Critical Function\"]\n    cwe201[\"CWE-201: Insertion of Sensitive Information Into Sent Data\"]\n\n    cwe214 -->|PEEROF| cwe201\n    cwe306 -->|CHILDOF| cwe287[\"CWE-287: Improper Authentication\"]\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe214 primary\n    class cwe306,cwe201 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with the **improper access control** in the GitHub CLI, leading to the exposure of authentication tokens. The GitHub CLI invokes `git` and passes along the credentials, which are then potentially leaked.\n1.  **Root Cause:** **Improper Access Control**: The GitHub CLI does not properly restrict which hosts are treated as GitHub Enterprise Server instances, leading to the inclusion of authentication tokens for external hosts.\n2.  **Mid-Chain Weakness:** CWE-214 (Invocation of Process Using Visible Sensitive Information): The authentication tokens are passed visibly to the `git` process.\n3.  **Impact:** Leak of Authentication Tokens: The authentication tokens are sent to external hosts, potentially leading to unauthorized access to resources.\n\n## Summary of Analysis\nThe primary classification is CWE-214 (Invocation of Process Using Visible Sensitive Information). This is supported by the vulnerability description, which states that the `gh` command invokes `git` with instructions to retrieve authentication tokens. The vulnerability lies in how the CLI makes authentication tokens available to external processes, specifically `git`, without proper validation of the host.\n\nThe **rootcause** is **improper access control** related to how `gh` handles authentication tokens for non-GitHub hosts. This results in the tokens being made available to external processes (git), which can then transmit them to third-party servers when cloning submodules.\n\nCWE-306 (Missing Authentication for Critical Function) was considered because the CLI **does not properly** authenticate the host before providing the tokens, but it is not a case of completely missing authentication. CWE-201 (Insertion of Sensitive Information Into Sent Data) was also considered, but CWE-214 better represents the specific scenario of invoking a process with visible sensitive information.\n\nThe evidence supporting CWE-214 is found in the \"CVE Reference Links Content Summary\": \"The `gh` CLI commands invoke `git` with instructions to retrieve authentication tokens using the `credential.helper` configuration for any encountered host, including non-GitHub hosts.\"\n\nThe selection of CWE-214 is at the appropriate level of specificity, as it directly addresses the vulnerability's mechanism of action, which is the exposure of sensitive information through process invocation.\n\nRelevant CWE Information:\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer\n**Abstraction Level**: Base\n**Similarity Score**: 0.79\n**Source**: dense\n\n**Description**:\nThe product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-88: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nThe product constructs a string for a command to be executed by a separate component\nin another control sphere, but it does not properly delimit the\nintended arguments, options, or switches within that command string.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n\n\n## CWE-267: Privilege Defined With Unsafe Actions\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nA particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-538: Insertion of Sensitive Information into Externally-Accessible File or Directory\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product places sensitive information into files or directories that are accessible to actors who are allowed to have access to the files, but not to the sensitive information.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-639: Authorization Bypass Through User-Controlled Key\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-1390: Weak Authentication\n**Abstraction Level**: Class\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product uses an authentication mechanism to restrict access to specific users or identities, but the mechanism does not sufficiently prove that the claimed identity is correct.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-1286: Improper Validation of Syntactic Correctness of Input\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product receives input that is expected to be well-formed - i.e., to comply with a certain syntax - but it does not validate or incorrectly validates that the input complies with the syntax.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-668: Exposure of Resource to Wrong Sphere\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-668 is high-level and is often misused as a catch-all when lower-level CWE IDs might be applicable. It is sometimes used for low-information vulnerability reports [REF-1287]. It is a level-1 Class (i",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-214 | Invocation of Process Using Visible Sensitive Information | 0.8 | Base | Primary | Allowed |\n| CWE-306 | Missing Authentication for Critical Function | 0.7 | Base | Secondary Candidate | Allowed |\n| CWE-201 | Insertion of Sensitive Information Into Sent Data | 0.6 | Base | Secondary Candidate | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE selected is CWE-214, which focuses on the exposure of sensitive information through process invocation. While other CWEs like CWE-306 (Missing Authentication) and CWE-201 (Data Leak) were considered, CWE-214 best captures the core issue of authentication tokens being visibly exposed to external processes. CWE-214 is a base level CWE, providing sufficient specificity. The weakness here is that the sensitive information is being passed to git, which will use it with submodules and potentially leak it to third parties.\n\n```mermaid\ngraph TD\n    cwe214[\"CWE-214: Invocation of Process Using Visible Sensitive Information\"]\n    cwe306[\"CWE-306: Missing Authentication for Critical Function\"]\n    cwe201[\"CWE-201: Insertion of Sensitive Information Into Sent Data\"]\n\n    cwe214 -->|PEEROF| cwe201\n    cwe306 -->|CHILDOF| cwe287[\"CWE-287: Improper Authentication\"]\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe214 primary\n    class cwe306,cwe201 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with the **improper access control** in the GitHub CLI, leading to the exposure of authentication tokens. The GitHub CLI invokes `git` and passes along the credentials, which are then potentially leaked.\n1.  **Root Cause:** **Improper Access Control**: The GitHub CLI does not properly restrict which hosts are treated as GitHub Enterprise Server instances, leading to the inclusion of authentication tokens for external hosts.\n2.  **Mid-Chain Weakness:** CWE-214 (Invocation of Process Using Visible Sensitive Information): The authentication tokens are passed visibly to the `git` process.\n3.  **Impact:** Leak of Authentication Tokens: The authentication tokens are sent to external hosts, potentially leading to unauthorized access to resources.\n\n## Summary of Analysis\nThe primary classification is CWE-214 (Invocation of Process Using Visible Sensitive Information). This is supported by the vulnerability description, which states that the `gh` command invokes `git` with instructions to retrieve authentication tokens. The vulnerability lies in how the CLI makes authentication tokens available to external processes, specifically `git`, without proper validation of the host.\n\nThe **rootcause** is **improper access control** related to how `gh` handles authentication tokens for non-GitHub hosts. This results in the tokens being made available to external processes (git), which can then transmit them to third-party servers when cloning submodules.\n\nCWE-306 (Missing Authentication for Critical Function) was considered because the CLI **does not properly** authenticate the host before providing the tokens, but it is not a case of completely missing authentication. CWE-201 (Insertion of Sensitive Information Into Sent Data) was also considered, but CWE-214 better represents the specific scenario of invoking a process with visible sensitive information.\n\nThe evidence supporting CWE-214 is found in the \"CVE Reference Links Content Summary\": \"The `gh` CLI commands invoke `git` with instructions to retrieve authentication tokens using the `credential.helper` configuration for any encountered host, including non-GitHub hosts.\"\n\nThe selection of CWE-214 is at the appropriate level of specificity, as it directly addresses the vulnerability's mechanism of action, which is the exposure of sensitive information through process invocation.\n\nRelevant CWE Information:\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer\n**Abstraction Level**: Base\n**Similarity Score**: 0.79\n**Source**: dense\n\n**Description**:\nThe product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-88: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nThe product constructs a string for a command to be executed by a separate component\nin another control sphere, but it does not properly delimit the\nintended arguments, options, or switches within that command string.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n\n\n## CWE-267: Privilege Defined With Unsafe Actions\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nA particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-538: Insertion of Sensitive Information into Externally-Accessible File or Directory\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product places sensitive information into files or directories that are accessible to actors who are allowed to have access to the files, but not to the sensitive information.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-639: Authorization Bypass Through User-Controlled Key\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-1390: Weak Authentication\n**Abstraction Level**: Class\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product uses an authentication mechanism to restrict access to specific users or identities, but the mechanism does not sufficiently prove that the claimed identity is correct.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n\n\n## CWE-1286: Improper Validation of Syntactic Correctness of Input\n**Abstraction Level**: Base\n**Similarity Score**: 0.76\n**Source**: dense\n\n**Description**:\nThe product receives input that is expected to be well-formed - i.e., to comply with a certain syntax - but it does not validate or incorrectly validates that the input complies with the syntax.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n\n## CWE-668: Exposure of Resource to Wrong Sphere\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-668 is high-level and is often misused as a catch-all when lower-level CWE IDs might be applicable. It is sometimes used for low-information vulnerability reports [REF-1287]. It is a level-1 Class (i\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-1390:**\n- 1390 (Weak Authentication) - ROOT\n\n\n**Chain starting from CWE-88:**\n- 88 (Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "214",
        "name": "Invocation of Process Using Visible Sensitive Information",
        "source": "sparse"
      },
      "similarity": 1198.6323429032732
    },
    {
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "source": "sparse"
      },
      "similarity": 1176.2785433438225
    },
    {
      "metadata": {
        "doc_id": "88",
        "name": "Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
        "source": "sparse"
      },
      "similarity": 1069.1781170706206
    },
    {
      "metadata": {
        "doc_id": "918",
        "name": "Server-Side Request Forgery (SSRF)",
        "source": "sparse"
      },
      "similarity": 1025.218963160889
    },
    {
      "metadata": {
        "doc_id": "285",
        "name": "Improper Authorization",
        "source": "sparse"
      },
      "similarity": 1016.6983601553784
    },
    {
      "metadata": {
        "doc_id": "269",
        "name": "Improper Privilege Management",
        "source": "sparse"
      },
      "similarity": 1015.6624496814169
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 1008.7497213461397
    },
    {
      "metadata": {
        "doc_id": "639",
        "name": "Authorization Bypass Through User-Controlled Key",
        "source": "sparse"
      },
      "similarity": 999.9466414496862
    },
    {
      "metadata": {
        "doc_id": "522",
        "name": "Insufficiently Protected Credentials",
        "type": "Class",
        "original_content": "The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.",
        "keyphrase_source": "rootcause:improper access control",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate",
          "comments": "Examine children of this entry to see if there is a better fit",
          "reasons": [
            "Abstraction"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "sparse"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.45682347948506874,
            "sparse": 990.536384039732
          }
        }
      },
      "similarity": 0.45682347948506874
    },
    {
      "doc_id": "226",
      "text": "CWE-226: Sensitive Information in Resource Not Removed Before Reuse",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "226",
        "name": "Sensitive Information in Resource Not Removed Before Reuse",
        "type": "base",
        "original_content": "CWE-226: Sensitive Information in Resource Not Removed Before Reuse",
        "relationships": [
          {
            "source_id": "226",
            "target_id": "244",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "226",
            "target_id": "1342",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "226",
            "target_id": "1301",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "226",
            "target_id": "1272",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "226",
            "target_id": "1239",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "226",
            "target_id": "201",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "226",
            "target_id": "212",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "226",
            "target_id": "459",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "459",
            "target_id": "226",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "244",
            "target_id": "226",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "212",
            "target_id": "226",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "201",
            "target_id": "226",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1342",
            "target_id": "226",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1194"
            }
          },
          {
            "source_id": "1342",
            "target_id": "226",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1301",
            "target_id": "226",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1272",
            "target_id": "226",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1239",
            "target_id": "226",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1194"
            }
          },
          {
            "source_id": "1239",
            "target_id": "226",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "201",
                  "226",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "201"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "201",
                  "226",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "201"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "226",
                  "201",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "201"
            }
          }
        },
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-1390",
      "CWE-88",
      "CWE-639",
      "CWE-1286",
      "CWE-306",
      "CWE-201",
      "CWE-538",
      "CWE-74",
      "CWE-668",
      "CWE-267",
      "CWE-287",
      "CWE-214",
      "CWE-212"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}