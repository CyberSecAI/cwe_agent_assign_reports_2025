{
  "retriever": "graph",
  "query": "GitHub Desktop is an open-source, Electron-based GitHub app designed for git development. Prior to version 3.4.20-beta3, an attacker convincing a user to view a file in a commit of their making in the history view can cause information disclosure by means of Git attempting to access a network share. This affects GitHub Desktop users on Windows that view malicious commits in the history view. macOS users are not affected. When viewing a file diff in the history view GitHub Desktop will call `git log` or `git diff` with the object id (SHA) of the commit, the name of the file, and the old name of the file if the file has been renamed. As a security precaution Git will attempt to fully resolve the old and new path via `realpath`, traversing symlinks, to ensure that the resolved paths reside within the repository working directory. This can lead to Git attempting to access a path that resides on a network share (UNC path) and in doing so Windows will attempt to perform NTLM authentication which passes information such as the computer name, the currently signed in (Windows) user name, and an NTLM hash. GitHub Desktop 3.4.20 and later fix this vulnerability. The beta channel includes the fix in 3.4.20-beta3. As a workaround to use until upgrading is possible, only browse commits in the history view that comes from trusted sources. Consider specifically these CWEs: CWE-201 CWE-212 CWE-451 CWE-427 CWE-378 CWE-88 CWE-285 CWE-863",
  "keyphrases": {
    "original_query": "GitHub Desktop is an open-source, Electron-based GitHub app designed for git development. Prior to version 3.4.20-beta3, an attacker convincing a user to view a file in a commit of their making in the history view can cause information disclosure by means of Git attempting to access a network share. This affects GitHub Desktop users on Windows that view malicious commits in the history view. macOS users are not affected. When viewing a file diff in the history view GitHub Desktop will call `git log` or `git diff` with the object id (SHA) of the commit, the name of the file, and the old name of the file if the file has been renamed. As a security precaution Git will attempt to fully resolve the old and new path via `realpath`, traversing symlinks, to ensure that the resolved paths reside within the repository working directory. This can lead to Git attempting to access a path that resides on a network share (UNC path) and in doing so Windows will attempt to perform NTLM authentication which passes information such as the computer name, the currently signed in (Windows) user name, and an NTLM hash. GitHub Desktop 3.4.20 and later fix this vulnerability. The beta channel includes the fix in 3.4.20-beta3. As a workaround to use until upgrading is possible, only browse commits in the history view that comes from trusted sources.",
    "enhanced_query": "GitHub Desktop is an open-source, Electron-based GitHub app designed for git development. Prior to version 3.4.20-beta3, an attacker convincing a user to view a file in a commit of their making in the history view can cause information disclosure by means of Git attempting to access a network share. This affects GitHub Desktop users on Windows that view malicious commits in the history view. macOS users are not affected. When viewing a file diff in the history view GitHub Desktop will call `git log` or `git diff` with the object id (SHA) of the commit, the name of the file, and the old name of the file if the file has been renamed. As a security precaution Git will attempt to fully resolve the old and new path via `realpath`, traversing symlinks, to ensure that the resolved paths reside within the repository working directory. This can lead to Git attempting to access a path that resides on a network share (UNC path) and in doing so Windows will attempt to perform NTLM authentication which passes information such as the computer name, the currently signed in (Windows) user name, and an NTLM hash. GitHub Desktop 3.4.20 and later fix this vulnerability. The beta channel includes the fix in 3.4.20-beta3. As a workaround to use until upgrading is possible, only browse commits in the history view that comes from trusted sources. Consider specifically these CWEs: CWE-201 CWE-212 CWE-451 CWE-427 CWE-378 CWE-88 CWE-285 CWE-863",
    "cwe_mentions": [
      "CWE-201",
      "CWE-212",
      "CWE-451",
      "CWE-427",
      "CWE-378",
      "CWE-88",
      "CWE-285",
      "CWE-863"
    ],
    "search_time": 3.5338690280914307
  },
  "timestamp": "2025-07-12 14:50:49",
  "cve_id": "CVE-2025-48064",
  "result_count": 20,
  "results": [
    {
      "cwe_id": "226",
      "name": "Sensitive Information in Resource Not Removed Before Reuse",
      "type": "base",
      "score": 2.8651999999999997,
      "relationship_count": 0
    },
    {
      "cwe_id": "212",
      "name": "Improper Removal of Sensitive Information Before Storage or Transfer",
      "type": "Base",
      "score": 2.7878204852222908,
      "relationship_count": 0
    },
    {
      "cwe_id": "201",
      "name": "Insertion of Sensitive Information Into Sent Data",
      "type": "Base",
      "score": 2.7800273062164083,
      "relationship_count": 0
    },
    {
      "cwe_id": "378",
      "name": "Creation of Temporary File With Insecure Permissions",
      "type": "base",
      "score": 2.3295999999999997,
      "relationship_count": 0
    },
    {
      "cwe_id": "202",
      "name": "Exposure of Sensitive Information Through Data Queries",
      "type": "base",
      "score": 2.04516,
      "relationship_count": 0
    },
    {
      "cwe_id": "427",
      "name": "Uncontrolled Search Path Element",
      "type": "Base",
      "score": 1.5938397216956157,
      "relationship_count": 0
    },
    {
      "cwe_id": "426",
      "name": "Untrusted Search Path",
      "type": "base",
      "score": 1.521,
      "relationship_count": 0
    },
    {
      "cwe_id": "78",
      "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
      "type": "base",
      "score": 1.521,
      "relationship_count": 0
    },
    {
      "cwe_id": "942",
      "name": "Permissive Cross-domain Policy with Untrusted Domains",
      "type": "variant",
      "score": 1.5024,
      "relationship_count": 0
    },
    {
      "cwe_id": "88",
      "name": "Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
      "type": "Base",
      "score": 1.4544479328559725,
      "relationship_count": 0
    },
    {
      "cwe_id": "244",
      "name": "Improper Clearing of Heap Memory Before Release ('Heap Inspection')",
      "type": "variant",
      "score": 1.3747200000000002,
      "relationship_count": 0
    },
    {
      "cwe_id": "425",
      "name": "Direct Request ('Forced Browsing')",
      "type": "base",
      "score": 1.2261600000000001,
      "relationship_count": 0
    },
    {
      "cwe_id": "1295",
      "name": "Debug Messages Revealing Unnecessary Information",
      "type": "base",
      "score": 1.1466,
      "relationship_count": 0
    },
    {
      "cwe_id": "98",
      "name": "Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')",
      "type": "variant",
      "score": 1.1016,
      "relationship_count": 0
    },
    {
      "cwe_id": "209",
      "name": "Generation of Error Message Containing Sensitive Information",
      "type": "Base",
      "score": 1.0913415958353392,
      "relationship_count": 0
    },
    {
      "cwe_id": "81",
      "name": "Improper Neutralization of Script in an Error Message Web Page",
      "type": "variant",
      "score": 1.0584,
      "relationship_count": 0
    },
    {
      "cwe_id": "863",
      "name": "Incorrect Authorization",
      "type": "Class",
      "score": 1.033827092883789,
      "relationship_count": 0
    },
    {
      "cwe_id": "285",
      "name": "Improper Authorization",
      "type": "Class",
      "score": 1.0309516733399096,
      "relationship_count": 0
    },
    {
      "cwe_id": "1258",
      "name": "Exposure of Sensitive System Information Due to Uncleared Debug Information",
      "type": "base",
      "score": 1.0062,
      "relationship_count": 0
    },
    {
      "cwe_id": "1230",
      "name": "Exposure of Sensitive Information Through Metadata",
      "type": "base",
      "score": 1.0062,
      "relationship_count": 0
    }
  ]
}