{
  "vulnerability_info": "VulnerabilityInfo(cve_id='CVE-2024-31228', description='Redis is an open source, in-memory database that persists on disk. Authenticated users can trigger a denial-of-service by using specially crafted, long string match patterns on supported commands such as `KEYS`, `SCAN`, `PSUBSCRIBE`, `FUNCTION LIST`, `COMMAND LIST` and ACL definitions. Matching of extremely long patterns may result in **unbounded recursion**, leading to **stack overflow** and process crash. This problem has been fixed in Redis versions 6.2.16, 7.2.6, and 7.4.1. Users are advised to upgrade. There are no known workarounds for this vulnerability.', key_phrases={'rootcause': '', 'weakness': ['stack overflow', 'unbounded recursion'], 'impact': 'stack overflow and process crash', 'vector': ['specially crafted', 'long string match patterns on supported commands'], 'attacker': 'Authenticated users', 'product': 'Redis', 'version': ['prior to 6.2.16', '7.2.6', 'and 7.4.1'], 'component': ''}, reference_content='Based on the provided information, this content is related to CVE-2024-31228.\\n\\n**Root cause of vulnerability:**\\nThe vulnerability stems from unbounded recursion in the `stringmatchlen_impl` function, which is used for glob-style pattern matching within Redis. Specially crafted, long string match patterns can cause excessive recursion.\\n\\n**Weaknesses/vulnerabilities present:**\\n- Unbounded recursion in the `stringmatchlen_impl` function during pattern matching.\\n- Inefficient handling of nested wildcard characters, leading to excessive stack usage.\\n\\n**Impact of exploitation:**\\n- Denial of service (DoS) via stack overflow, causing the Redis process to crash.\\n\\n**Attack vectors:**\\n- Authenticated users can trigger the vulnerability.\\n- Exploitable through commands such as `KEYS`, `SCAN`, `PSUBSCRIBE`, `FUNCTION LIST`, `COMMAND LIST`, and ACL definitions which use pattern matching.\\n\\n**Required attacker capabilities/position:**\\n- An attacker needs to be an authenticated user of the Redis server.\\n- The attacker needs to be able to execute commands that utilize the vulnerable pattern matching functionality.\\n\\n**Additional Details:**\\n- The issue affects all versions of Redis prior to the patched versions.\\n- The fix implemented in the provided commit introduces a nesting limit to prevent excessive recursion.\\n- The vulnerability is classified as moderate severity with a CVSS score of 5.5 (CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H).\\n- The vulnerability is tracked under CWE-674 (Improper Handling of Recursive Calls)', similar_info={'cwe_distribution': {}, 'cwe_consensus': '', 'similarity_stats': {'thresholds': [], 'total_samples_by_threshold': {}, 'top_cwes_by_threshold': {}}}, similarity_summary=SimilarityInsight(consensus_cwe='', top_cwes=[], confidence_levels={}, total_samples=0), analysis='', analysis_with_relationships='', criticism='', resolution='', relevant_cwes=[{'metadata': {'doc_id': '674', 'name': 'Uncontrolled Recursion', 'source': 'sparse', 'original_content': 'The product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack.', 'keyphrase_sources': [{'id': 'weakness:stack overflow', 'keyphrase': 'stack overflow', 'type': 'weakness'}, {'id': 'weakness:unbounded recursion', 'keyphrase': 'unbounded recursion', 'type': 'weakness'}, {'id': 'impact:stack overflow and process crash', 'keyphrase': 'stack overflow and process crash', 'type': 'impact'}, {'id': 'vector:specially crafted', 'keyphrase': 'specially crafted', 'type': 'vector'}, {'id': 'vector:long string match patterns on supported commands', 'keyphrase': 'long string match patterns on supported commands', 'type': 'vector'}, {'id': 'attacker:Authenticated users', 'keyphrase': 'Authenticated users', 'type': 'attacker'}, {'id': 'product:Redis', 'keyphrase': 'Redis', 'type': 'product'}, {'id': 'version:prior to 6.2.16', 'keyphrase': 'prior to 6.2.16', 'type': 'version'}, {'id': 'version:7.2.6', 'keyphrase': '7.2.6', 'type': 'version'}, {'id': 'version:and 7.4.1', 'keyphrase': 'and 7.4.1', 'type': 'version'}]}, 'similarity': np.float64(547.4059720973111)}, {'metadata': {'doc_id': '190', 'name': 'Integer Overflow or Wraparound', 'source': 'sparse', 'original_content': 'The product performs a calculation that can\\n         produce an integer overflow or wraparound when the logic\\n         assumes that the resulting value will always be larger than\\n         the original value. This occurs when an integer value is\\n         incremented to a value that is too large to store in the\\n         associated representation. When this occurs, the value may\\n         become a very small or negative number.', 'keyphrase_sources': [{'id': 'weakness:stack overflow', 'keyphrase': 'stack overflow', 'type': 'weakness'}, {'id': 'weakness:unbounded recursion', 'keyphrase': 'unbounded recursion', 'type': 'weakness'}, {'id': 'impact:stack overflow and process crash', 'keyphrase': 'stack overflow and process crash', 'type': 'impact'}, {'id': 'vector:specially crafted', 'keyphrase': 'specially crafted', 'type': 'vector'}, {'id': 'vector:long string match patterns on supported commands', 'keyphrase': 'long string match patterns on supported commands', 'type': 'vector'}, {'id': 'attacker:Authenticated users', 'keyphrase': 'Authenticated users', 'type': 'attacker'}, {'id': 'product:Redis', 'keyphrase': 'Redis', 'type': 'product'}, {'id': 'version:prior to 6.2.16', 'keyphrase': 'prior to 6.2.16', 'type': 'version'}, {'id': 'version:7.2.6', 'keyphrase': '7.2.6', 'type': 'version'}, {'id': 'version:and 7.4.1', 'keyphrase': 'and 7.4.1', 'type': 'version'}]}, 'similarity': np.float64(521.0106517050202)}, {'metadata': {'doc_id': '125', 'name': 'Out-of-bounds Read', 'source': 'sparse', 'original_content': 'The product reads data past the end, or before the beginning, of the intended buffer.', 'keyphrase_sources': [{'id': 'weakness:stack overflow', 'keyphrase': 'stack overflow', 'type': 'weakness'}, {'id': 'impact:stack overflow and process crash', 'keyphrase': 'stack overflow and process crash', 'type': 'impact'}, {'id': 'vector:specially crafted', 'keyphrase': 'specially crafted', 'type': 'vector'}, {'id': 'product:Redis', 'keyphrase': 'Redis', 'type': 'product'}, {'id': 'version:and 7.4.1', 'keyphrase': 'and 7.4.1', 'type': 'version'}]}, 'similarity': np.float64(490.0832418676668)}, {'metadata': {'doc_id': '789', 'name': 'Memory Allocation with Excessive Size Value', 'source': 'sparse', 'original_content': 'The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated.', 'keyphrase_sources': [{'id': 'weakness:stack overflow', 'keyphrase': 'stack overflow', 'type': 'weakness'}, {'id': 'impact:stack overflow and process crash', 'keyphrase': 'stack overflow and process crash', 'type': 'impact'}, {'id': 'vector:specially crafted', 'keyphrase': 'specially crafted', 'type': 'vector'}, {'id': 'attacker:Authenticated users', 'keyphrase': 'Authenticated users', 'type': 'attacker'}, {'id': 'version:prior to 6.2.16', 'keyphrase': 'prior to 6.2.16', 'type': 'version'}, {'id': 'version:7.2.6', 'keyphrase': '7.2.6', 'type': 'version'}, {'id': 'version:and 7.4.1', 'keyphrase': 'and 7.4.1', 'type': 'version'}]}, 'similarity': np.float64(489.3905469346435)}, {'metadata': {'doc_id': '1284', 'name': 'Improper Validation of Specified Quantity in Input', 'source': 'sparse', 'original_content': 'The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.', 'keyphrase_sources': [{'id': 'weakness:stack overflow', 'keyphrase': 'stack overflow', 'type': 'weakness'}, {'id': 'vector:long string match patterns on supported commands', 'keyphrase': 'long string match patterns on supported commands', 'type': 'vector'}, {'id': 'version:prior to 6.2.16', 'keyphrase': 'prior to 6.2.16', 'type': 'version'}, {'id': 'version:7.2.6', 'keyphrase': '7.2.6', 'type': 'version'}]}, 'similarity': np.float64(485.62793469915687)}, {'metadata': {'doc_id': '407', 'name': 'Inefficient Algorithmic Complexity', 'source': 'sparse', 'original_content': 'An algorithm in a product has an inefficient worst-case computational complexity that may be detrimental to system performance and can be triggered by an attacker, typically using crafted manipulations that ensure that the worst case is being reached.', 'keyphrase_sources': [{'id': 'weakness:unbounded recursion', 'keyphrase': 'unbounded recursion', 'type': 'weakness'}]}, 'similarity': np.float64(477.48061193212794)}, {'metadata': {'doc_id': '770', 'name': 'Allocation of Resources Without Limits or Throttling', 'source': 'sparse', 'original_content': 'The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.', 'keyphrase_sources': [{'id': 'weakness:unbounded recursion', 'keyphrase': 'unbounded recursion', 'type': 'weakness'}, {'id': 'impact:stack overflow and process crash', 'keyphrase': 'stack overflow and process crash', 'type': 'impact'}, {'id': 'attacker:Authenticated users', 'keyphrase': 'Authenticated users', 'type': 'attacker'}]}, 'similarity': np.float64(462.92229012057663)}, {'metadata': {'doc_id': '1333', 'name': 'Inefficient Regular Expression Complexity', 'source': 'sparse', 'original_content': 'The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles.', 'keyphrase_sources': [{'id': 'weakness:unbounded recursion', 'keyphrase': 'unbounded recursion', 'type': 'weakness'}, {'id': 'vector:specially crafted', 'keyphrase': 'specially crafted', 'type': 'vector'}, {'id': 'vector:long string match patterns on supported commands', 'keyphrase': 'long string match patterns on supported commands', 'type': 'vector'}, {'id': 'attacker:Authenticated users', 'keyphrase': 'Authenticated users', 'type': 'attacker'}, {'id': 'product:Redis', 'keyphrase': 'Redis', 'type': 'product'}, {'id': 'version:prior to 6.2.16', 'keyphrase': 'prior to 6.2.16', 'type': 'version'}, {'id': 'version:7.2.6', 'keyphrase': '7.2.6', 'type': 'version'}, {'id': 'version:and 7.4.1', 'keyphrase': 'and 7.4.1', 'type': 'version'}]}, 'similarity': np.float64(461.34527200317035)}, {'metadata': {'doc_id': '193', 'name': 'Off-by-one Error', 'source': 'sparse', 'original_content': 'A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.', 'keyphrase_sources': [{'id': 'vector:long string match patterns on supported commands', 'keyphrase': 'long string match patterns on supported commands', 'type': 'vector'}]}, 'similarity': np.float64(179.32286057988014)}, {'metadata': {'doc_id': '94', 'name': \"Improper Control of Generation of Code ('Code Injection')\", 'source': 'sparse', 'original_content': 'The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.', 'keyphrase_sources': [{'id': 'product:Redis', 'keyphrase': 'Redis', 'type': 'product'}]}, 'similarity': np.float64(159.65712412327295)}], identified_cwes={'analyzer': [], 'critic_additional': []})",
  "retrieval_results": {
    "has_multiple_keyphrases": true,
    "keyphrase_cwe_sets": {
      "weakness:stack overflow": {
        "keyphrase": "stack overflow",
        "type": "weakness",
        "cwes": [
          {
            "metadata": {
              "doc_id": "674",
              "name": "Uncontrolled Recursion",
              "source": "sparse",
              "original_content": "The product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack.",
              "keyphrase_sources": [
                {
                  "id": "weakness:stack overflow",
                  "keyphrase": "stack overflow",
                  "type": "weakness"
                },
                {
                  "id": "weakness:unbounded recursion",
                  "keyphrase": "unbounded recursion",
                  "type": "weakness"
                },
                {
                  "id": "impact:stack overflow and process crash",
                  "keyphrase": "stack overflow and process crash",
                  "type": "impact"
                },
                {
                  "id": "vector:specially crafted",
                  "keyphrase": "specially crafted",
                  "type": "vector"
                },
                {
                  "id": "vector:long string match patterns on supported commands",
                  "keyphrase": "long string match patterns on supported commands",
                  "type": "vector"
                },
                {
                  "id": "attacker:Authenticated users",
                  "keyphrase": "Authenticated users",
                  "type": "attacker"
                },
                {
                  "id": "product:Redis",
                  "keyphrase": "Redis",
                  "type": "product"
                },
                {
                  "id": "version:prior to 6.2.16",
                  "keyphrase": "prior to 6.2.16",
                  "type": "version"
                },
                {
                  "id": "version:7.2.6",
                  "keyphrase": "7.2.6",
                  "type": "version"
                },
                {
                  "id": "version:and 7.4.1",
                  "keyphrase": "and 7.4.1",
                  "type": "version"
                }
              ]
            },
            "similarity": 547.4059720973111
          },
          {
            "metadata": {
              "doc_id": "190",
              "name": "Integer Overflow or Wraparound",
              "source": "sparse",
              "original_content": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number.",
              "keyphrase_sources": [
                {
                  "id": "weakness:stack overflow",
                  "keyphrase": "stack overflow",
                  "type": "weakness"
                },
                {
                  "id": "weakness:unbounded recursion",
                  "keyphrase": "unbounded recursion",
                  "type": "weakness"
                },
                {
                  "id": "impact:stack overflow and process crash",
                  "keyphrase": "stack overflow and process crash",
                  "type": "impact"
                },
                {
                  "id": "vector:specially crafted",
                  "keyphrase": "specially crafted",
                  "type": "vector"
                },
                {
                  "id": "vector:long string match patterns on supported commands",
                  "keyphrase": "long string match patterns on supported commands",
                  "type": "vector"
                },
                {
                  "id": "attacker:Authenticated users",
                  "keyphrase": "Authenticated users",
                  "type": "attacker"
                },
                {
                  "id": "product:Redis",
                  "keyphrase": "Redis",
                  "type": "product"
                },
                {
                  "id": "version:prior to 6.2.16",
                  "keyphrase": "prior to 6.2.16",
                  "type": "version"
                },
                {
                  "id": "version:7.2.6",
                  "keyphrase": "7.2.6",
                  "type": "version"
                },
                {
                  "id": "version:and 7.4.1",
                  "keyphrase": "and 7.4.1",
                  "type": "version"
                }
              ]
            },
            "similarity": 521.0106517050202
          },
          {
            "metadata": {
              "doc_id": "125",
              "name": "Out-of-bounds Read",
              "source": "sparse",
              "original_content": "The product reads data past the end, or before the beginning, of the intended buffer.",
              "keyphrase_sources": [
                {
                  "id": "weakness:stack overflow",
                  "keyphrase": "stack overflow",
                  "type": "weakness"
                },
                {
                  "id": "impact:stack overflow and process crash",
                  "keyphrase": "stack overflow and process crash",
                  "type": "impact"
                },
                {
                  "id": "vector:specially crafted",
                  "keyphrase": "specially crafted",
                  "type": "vector"
                },
                {
                  "id": "product:Redis",
                  "keyphrase": "Redis",
                  "type": "product"
                },
                {
                  "id": "version:and 7.4.1",
                  "keyphrase": "and 7.4.1",
                  "type": "version"
                }
              ]
            },
            "similarity": 490.0832418676668
          },
          {
            "metadata": {
              "doc_id": "789",
              "name": "Memory Allocation with Excessive Size Value",
              "source": "sparse",
              "original_content": "The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated.",
              "keyphrase_sources": [
                {
                  "id": "weakness:stack overflow",
                  "keyphrase": "stack overflow",
                  "type": "weakness"
                },
                {
                  "id": "impact:stack overflow and process crash",
                  "keyphrase": "stack overflow and process crash",
                  "type": "impact"
                },
                {
                  "id": "vector:specially crafted",
                  "keyphrase": "specially crafted",
                  "type": "vector"
                },
                {
                  "id": "attacker:Authenticated users",
                  "keyphrase": "Authenticated users",
                  "type": "attacker"
                },
                {
                  "id": "version:prior to 6.2.16",
                  "keyphrase": "prior to 6.2.16",
                  "type": "version"
                },
                {
                  "id": "version:7.2.6",
                  "keyphrase": "7.2.6",
                  "type": "version"
                },
                {
                  "id": "version:and 7.4.1",
                  "keyphrase": "and 7.4.1",
                  "type": "version"
                }
              ]
            },
            "similarity": 489.3905469346435
          },
          {
            "metadata": {
              "doc_id": "1284",
              "name": "Improper Validation of Specified Quantity in Input",
              "source": "sparse",
              "original_content": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.",
              "keyphrase_sources": [
                {
                  "id": "weakness:stack overflow",
                  "keyphrase": "stack overflow",
                  "type": "weakness"
                },
                {
                  "id": "vector:long string match patterns on supported commands",
                  "keyphrase": "long string match patterns on supported commands",
                  "type": "vector"
                },
                {
                  "id": "version:prior to 6.2.16",
                  "keyphrase": "prior to 6.2.16",
                  "type": "version"
                },
                {
                  "id": "version:7.2.6",
                  "keyphrase": "7.2.6",
                  "type": "version"
                }
              ]
            },
            "similarity": 485.62793469915687
          }
        ]
      },
      "weakness:unbounded recursion": {
        "keyphrase": "unbounded recursion",
        "type": "weakness",
        "cwes": [
          {
            "metadata": {
              "doc_id": "674",
              "name": "Uncontrolled Recursion",
              "source": "sparse",
              "original_content": "The product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack."
            },
            "similarity": 572.2366517606799
          },
          {
            "metadata": {
              "doc_id": "190",
              "name": "Integer Overflow or Wraparound",
              "source": "sparse",
              "original_content": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number."
            },
            "similarity": 491.1770592943897
          },
          {
            "metadata": {
              "doc_id": "407",
              "name": "Inefficient Algorithmic Complexity",
              "source": "sparse",
              "original_content": "An algorithm in a product has an inefficient worst-case computational complexity that may be detrimental to system performance and can be triggered by an attacker, typically using crafted manipulations that ensure that the worst case is being reached.",
              "keyphrase_sources": [
                {
                  "id": "weakness:unbounded recursion",
                  "keyphrase": "unbounded recursion",
                  "type": "weakness"
                }
              ]
            },
            "similarity": 477.48061193212794
          },
          {
            "metadata": {
              "doc_id": "770",
              "name": "Allocation of Resources Without Limits or Throttling",
              "source": "sparse",
              "original_content": "The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.",
              "keyphrase_sources": [
                {
                  "id": "weakness:unbounded recursion",
                  "keyphrase": "unbounded recursion",
                  "type": "weakness"
                },
                {
                  "id": "impact:stack overflow and process crash",
                  "keyphrase": "stack overflow and process crash",
                  "type": "impact"
                },
                {
                  "id": "attacker:Authenticated users",
                  "keyphrase": "Authenticated users",
                  "type": "attacker"
                }
              ]
            },
            "similarity": 462.92229012057663
          },
          {
            "metadata": {
              "doc_id": "1333",
              "name": "Inefficient Regular Expression Complexity",
              "source": "sparse",
              "original_content": "The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles.",
              "keyphrase_sources": [
                {
                  "id": "weakness:unbounded recursion",
                  "keyphrase": "unbounded recursion",
                  "type": "weakness"
                },
                {
                  "id": "vector:specially crafted",
                  "keyphrase": "specially crafted",
                  "type": "vector"
                },
                {
                  "id": "vector:long string match patterns on supported commands",
                  "keyphrase": "long string match patterns on supported commands",
                  "type": "vector"
                },
                {
                  "id": "attacker:Authenticated users",
                  "keyphrase": "Authenticated users",
                  "type": "attacker"
                },
                {
                  "id": "product:Redis",
                  "keyphrase": "Redis",
                  "type": "product"
                },
                {
                  "id": "version:prior to 6.2.16",
                  "keyphrase": "prior to 6.2.16",
                  "type": "version"
                },
                {
                  "id": "version:7.2.6",
                  "keyphrase": "7.2.6",
                  "type": "version"
                },
                {
                  "id": "version:and 7.4.1",
                  "keyphrase": "and 7.4.1",
                  "type": "version"
                }
              ]
            },
            "similarity": 461.34527200317035
          }
        ]
      },
      "impact:stack overflow and process crash": {
        "keyphrase": "stack overflow and process crash",
        "type": "impact",
        "cwes": [
          {
            "metadata": {
              "doc_id": "674",
              "name": "Uncontrolled Recursion",
              "source": "sparse",
              "original_content": "The product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack."
            },
            "similarity": 213.4749894615986
          },
          {
            "metadata": {
              "doc_id": "190",
              "name": "Integer Overflow or Wraparound",
              "source": "sparse",
              "original_content": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number."
            },
            "similarity": 200.96307516756474
          },
          {
            "metadata": {
              "doc_id": "789",
              "name": "Memory Allocation with Excessive Size Value",
              "source": "sparse",
              "original_content": "The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated."
            },
            "similarity": 191.83447813015516
          },
          {
            "metadata": {
              "doc_id": "125",
              "name": "Out-of-bounds Read",
              "source": "sparse",
              "original_content": "The product reads data past the end, or before the beginning, of the intended buffer."
            },
            "similarity": 190.95419282231478
          },
          {
            "metadata": {
              "doc_id": "770",
              "name": "Allocation of Resources Without Limits or Throttling",
              "source": "sparse",
              "original_content": "The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor."
            },
            "similarity": 188.86257636938177
          }
        ]
      },
      "vector:specially crafted": {
        "keyphrase": "specially crafted",
        "type": "vector",
        "cwes": [
          {
            "metadata": {
              "doc_id": "190",
              "name": "Integer Overflow or Wraparound",
              "source": "sparse",
              "original_content": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number."
            },
            "similarity": 184.0465234935121
          },
          {
            "metadata": {
              "doc_id": "674",
              "name": "Uncontrolled Recursion",
              "source": "sparse",
              "original_content": "The product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack."
            },
            "similarity": 182.37337080041547
          },
          {
            "metadata": {
              "doc_id": "1333",
              "name": "Inefficient Regular Expression Complexity",
              "source": "sparse",
              "original_content": "The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles."
            },
            "similarity": 173.94747253138502
          },
          {
            "metadata": {
              "doc_id": "125",
              "name": "Out-of-bounds Read",
              "source": "sparse",
              "original_content": "The product reads data past the end, or before the beginning, of the intended buffer."
            },
            "similarity": 170.48665525469318
          },
          {
            "metadata": {
              "doc_id": "789",
              "name": "Memory Allocation with Excessive Size Value",
              "source": "sparse",
              "original_content": "The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated."
            },
            "similarity": 168.03102652955465
          }
        ]
      },
      "vector:long string match patterns on supported commands": {
        "keyphrase": "long string match patterns on supported commands",
        "type": "vector",
        "cwes": [
          {
            "metadata": {
              "doc_id": "1333",
              "name": "Inefficient Regular Expression Complexity",
              "source": "sparse",
              "original_content": "The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles."
            },
            "similarity": 195.4564509420673
          },
          {
            "metadata": {
              "doc_id": "674",
              "name": "Uncontrolled Recursion",
              "source": "sparse",
              "original_content": "The product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack."
            },
            "similarity": 191.74036079894213
          },
          {
            "metadata": {
              "doc_id": "190",
              "name": "Integer Overflow or Wraparound",
              "source": "sparse",
              "original_content": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number."
            },
            "similarity": 183.09776108097702
          },
          {
            "metadata": {
              "doc_id": "1284",
              "name": "Improper Validation of Specified Quantity in Input",
              "source": "sparse",
              "original_content": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties."
            },
            "similarity": 179.82791137203063
          },
          {
            "metadata": {
              "doc_id": "193",
              "name": "Off-by-one Error",
              "source": "sparse",
              "original_content": "A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.",
              "keyphrase_sources": [
                {
                  "id": "vector:long string match patterns on supported commands",
                  "keyphrase": "long string match patterns on supported commands",
                  "type": "vector"
                }
              ]
            },
            "similarity": 179.32286057988014
          }
        ]
      },
      "attacker:Authenticated users": {
        "keyphrase": "Authenticated users",
        "type": "attacker",
        "cwes": [
          {
            "metadata": {
              "doc_id": "674",
              "name": "Uncontrolled Recursion",
              "source": "sparse",
              "original_content": "The product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack."
            },
            "similarity": 178.61380701768806
          },
          {
            "metadata": {
              "doc_id": "190",
              "name": "Integer Overflow or Wraparound",
              "source": "sparse",
              "original_content": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number."
            },
            "similarity": 175.4709315280084
          },
          {
            "metadata": {
              "doc_id": "1333",
              "name": "Inefficient Regular Expression Complexity",
              "source": "sparse",
              "original_content": "The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles."
            },
            "similarity": 169.27140461915008
          },
          {
            "metadata": {
              "doc_id": "789",
              "name": "Memory Allocation with Excessive Size Value",
              "source": "sparse",
              "original_content": "The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated."
            },
            "similarity": 166.0692903472568
          },
          {
            "metadata": {
              "doc_id": "770",
              "name": "Allocation of Resources Without Limits or Throttling",
              "source": "sparse",
              "original_content": "The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor."
            },
            "similarity": 164.50045357367765
          }
        ]
      },
      "product:Redis": {
        "keyphrase": "Redis",
        "type": "product",
        "cwes": [
          {
            "metadata": {
              "doc_id": "190",
              "name": "Integer Overflow or Wraparound",
              "source": "sparse",
              "original_content": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number."
            },
            "similarity": 184.9834511928717
          },
          {
            "metadata": {
              "doc_id": "674",
              "name": "Uncontrolled Recursion",
              "source": "sparse",
              "original_content": "The product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack."
            },
            "similarity": 173.7204449724497
          },
          {
            "metadata": {
              "doc_id": "125",
              "name": "Out-of-bounds Read",
              "source": "sparse",
              "original_content": "The product reads data past the end, or before the beginning, of the intended buffer."
            },
            "similarity": 170.3958014708299
          },
          {
            "metadata": {
              "doc_id": "1333",
              "name": "Inefficient Regular Expression Complexity",
              "source": "sparse",
              "original_content": "The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles."
            },
            "similarity": 168.2820793930577
          },
          {
            "metadata": {
              "doc_id": "94",
              "name": "Improper Control of Generation of Code ('Code Injection')",
              "source": "sparse",
              "original_content": "The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.",
              "keyphrase_sources": [
                {
                  "id": "product:Redis",
                  "keyphrase": "Redis",
                  "type": "product"
                }
              ]
            },
            "similarity": 159.65712412327295
          }
        ]
      },
      "version:prior to 6.2.16": {
        "keyphrase": "prior to 6.2.16",
        "type": "version",
        "cwes": [
          {
            "metadata": {
              "doc_id": "674",
              "name": "Uncontrolled Recursion",
              "source": "sparse",
              "original_content": "The product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack."
            },
            "similarity": 190.11272503792551
          },
          {
            "metadata": {
              "doc_id": "190",
              "name": "Integer Overflow or Wraparound",
              "source": "sparse",
              "original_content": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number."
            },
            "similarity": 188.13642123454434
          },
          {
            "metadata": {
              "doc_id": "1333",
              "name": "Inefficient Regular Expression Complexity",
              "source": "sparse",
              "original_content": "The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles."
            },
            "similarity": 183.27382583183118
          },
          {
            "metadata": {
              "doc_id": "789",
              "name": "Memory Allocation with Excessive Size Value",
              "source": "sparse",
              "original_content": "The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated."
            },
            "similarity": 178.8707984905202
          },
          {
            "metadata": {
              "doc_id": "1284",
              "name": "Improper Validation of Specified Quantity in Input",
              "source": "sparse",
              "original_content": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties."
            },
            "similarity": 177.66580003021087
          }
        ]
      },
      "version:7.2.6": {
        "keyphrase": "7.2.6",
        "type": "version",
        "cwes": [
          {
            "metadata": {
              "doc_id": "674",
              "name": "Uncontrolled Recursion",
              "source": "sparse",
              "original_content": "The product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack."
            },
            "similarity": 181.57769958667885
          },
          {
            "metadata": {
              "doc_id": "190",
              "name": "Integer Overflow or Wraparound",
              "source": "sparse",
              "original_content": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number."
            },
            "similarity": 180.19971699023785
          },
          {
            "metadata": {
              "doc_id": "1333",
              "name": "Inefficient Regular Expression Complexity",
              "source": "sparse",
              "original_content": "The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles."
            },
            "similarity": 174.16159766235728
          },
          {
            "metadata": {
              "doc_id": "789",
              "name": "Memory Allocation with Excessive Size Value",
              "source": "sparse",
              "original_content": "The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated."
            },
            "similarity": 167.832948153021
          },
          {
            "metadata": {
              "doc_id": "1284",
              "name": "Improper Validation of Specified Quantity in Input",
              "source": "sparse",
              "original_content": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties."
            },
            "similarity": 167.57050324660443
          }
        ]
      },
      "version:and 7.4.1": {
        "keyphrase": "and 7.4.1",
        "type": "version",
        "cwes": [
          {
            "metadata": {
              "doc_id": "674",
              "name": "Uncontrolled Recursion",
              "source": "sparse",
              "original_content": "The product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack."
            },
            "similarity": 188.51065808879716
          },
          {
            "metadata": {
              "doc_id": "190",
              "name": "Integer Overflow or Wraparound",
              "source": "sparse",
              "original_content": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number."
            },
            "similarity": 186.30296739729846
          },
          {
            "metadata": {
              "doc_id": "1333",
              "name": "Inefficient Regular Expression Complexity",
              "source": "sparse",
              "original_content": "The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles."
            },
            "similarity": 180.0972247477547
          },
          {
            "metadata": {
              "doc_id": "125",
              "name": "Out-of-bounds Read",
              "source": "sparse",
              "original_content": "The product reads data past the end, or before the beginning, of the intended buffer."
            },
            "similarity": 173.30090048079217
          },
          {
            "metadata": {
              "doc_id": "789",
              "name": "Memory Allocation with Excessive Size Value",
              "source": "sparse",
              "original_content": "The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated."
            },
            "similarity": 173.15378834990247
          }
        ]
      }
    },
    "keyphrase_mapping": {
      "674": [
        {
          "id": "weakness:stack overflow",
          "keyphrase": "stack overflow",
          "type": "weakness"
        },
        {
          "id": "weakness:unbounded recursion",
          "keyphrase": "unbounded recursion",
          "type": "weakness"
        },
        {
          "id": "impact:stack overflow and process crash",
          "keyphrase": "stack overflow and process crash",
          "type": "impact"
        },
        {
          "id": "vector:specially crafted",
          "keyphrase": "specially crafted",
          "type": "vector"
        },
        {
          "id": "vector:long string match patterns on supported commands",
          "keyphrase": "long string match patterns on supported commands",
          "type": "vector"
        },
        {
          "id": "attacker:Authenticated users",
          "keyphrase": "Authenticated users",
          "type": "attacker"
        },
        {
          "id": "product:Redis",
          "keyphrase": "Redis",
          "type": "product"
        },
        {
          "id": "version:prior to 6.2.16",
          "keyphrase": "prior to 6.2.16",
          "type": "version"
        },
        {
          "id": "version:7.2.6",
          "keyphrase": "7.2.6",
          "type": "version"
        },
        {
          "id": "version:and 7.4.1",
          "keyphrase": "and 7.4.1",
          "type": "version"
        }
      ],
      "190": [
        {
          "id": "weakness:stack overflow",
          "keyphrase": "stack overflow",
          "type": "weakness"
        },
        {
          "id": "weakness:unbounded recursion",
          "keyphrase": "unbounded recursion",
          "type": "weakness"
        },
        {
          "id": "impact:stack overflow and process crash",
          "keyphrase": "stack overflow and process crash",
          "type": "impact"
        },
        {
          "id": "vector:specially crafted",
          "keyphrase": "specially crafted",
          "type": "vector"
        },
        {
          "id": "vector:long string match patterns on supported commands",
          "keyphrase": "long string match patterns on supported commands",
          "type": "vector"
        },
        {
          "id": "attacker:Authenticated users",
          "keyphrase": "Authenticated users",
          "type": "attacker"
        },
        {
          "id": "product:Redis",
          "keyphrase": "Redis",
          "type": "product"
        },
        {
          "id": "version:prior to 6.2.16",
          "keyphrase": "prior to 6.2.16",
          "type": "version"
        },
        {
          "id": "version:7.2.6",
          "keyphrase": "7.2.6",
          "type": "version"
        },
        {
          "id": "version:and 7.4.1",
          "keyphrase": "and 7.4.1",
          "type": "version"
        }
      ],
      "125": [
        {
          "id": "weakness:stack overflow",
          "keyphrase": "stack overflow",
          "type": "weakness"
        },
        {
          "id": "impact:stack overflow and process crash",
          "keyphrase": "stack overflow and process crash",
          "type": "impact"
        },
        {
          "id": "vector:specially crafted",
          "keyphrase": "specially crafted",
          "type": "vector"
        },
        {
          "id": "product:Redis",
          "keyphrase": "Redis",
          "type": "product"
        },
        {
          "id": "version:and 7.4.1",
          "keyphrase": "and 7.4.1",
          "type": "version"
        }
      ],
      "789": [
        {
          "id": "weakness:stack overflow",
          "keyphrase": "stack overflow",
          "type": "weakness"
        },
        {
          "id": "impact:stack overflow and process crash",
          "keyphrase": "stack overflow and process crash",
          "type": "impact"
        },
        {
          "id": "vector:specially crafted",
          "keyphrase": "specially crafted",
          "type": "vector"
        },
        {
          "id": "attacker:Authenticated users",
          "keyphrase": "Authenticated users",
          "type": "attacker"
        },
        {
          "id": "version:prior to 6.2.16",
          "keyphrase": "prior to 6.2.16",
          "type": "version"
        },
        {
          "id": "version:7.2.6",
          "keyphrase": "7.2.6",
          "type": "version"
        },
        {
          "id": "version:and 7.4.1",
          "keyphrase": "and 7.4.1",
          "type": "version"
        }
      ],
      "1284": [
        {
          "id": "weakness:stack overflow",
          "keyphrase": "stack overflow",
          "type": "weakness"
        },
        {
          "id": "vector:long string match patterns on supported commands",
          "keyphrase": "long string match patterns on supported commands",
          "type": "vector"
        },
        {
          "id": "version:prior to 6.2.16",
          "keyphrase": "prior to 6.2.16",
          "type": "version"
        },
        {
          "id": "version:7.2.6",
          "keyphrase": "7.2.6",
          "type": "version"
        }
      ],
      "407": [
        {
          "id": "weakness:unbounded recursion",
          "keyphrase": "unbounded recursion",
          "type": "weakness"
        }
      ],
      "770": [
        {
          "id": "weakness:unbounded recursion",
          "keyphrase": "unbounded recursion",
          "type": "weakness"
        },
        {
          "id": "impact:stack overflow and process crash",
          "keyphrase": "stack overflow and process crash",
          "type": "impact"
        },
        {
          "id": "attacker:Authenticated users",
          "keyphrase": "Authenticated users",
          "type": "attacker"
        }
      ],
      "1333": [
        {
          "id": "weakness:unbounded recursion",
          "keyphrase": "unbounded recursion",
          "type": "weakness"
        },
        {
          "id": "vector:specially crafted",
          "keyphrase": "specially crafted",
          "type": "vector"
        },
        {
          "id": "vector:long string match patterns on supported commands",
          "keyphrase": "long string match patterns on supported commands",
          "type": "vector"
        },
        {
          "id": "attacker:Authenticated users",
          "keyphrase": "Authenticated users",
          "type": "attacker"
        },
        {
          "id": "product:Redis",
          "keyphrase": "Redis",
          "type": "product"
        },
        {
          "id": "version:prior to 6.2.16",
          "keyphrase": "prior to 6.2.16",
          "type": "version"
        },
        {
          "id": "version:7.2.6",
          "keyphrase": "7.2.6",
          "type": "version"
        },
        {
          "id": "version:and 7.4.1",
          "keyphrase": "and 7.4.1",
          "type": "version"
        }
      ],
      "193": [
        {
          "id": "vector:long string match patterns on supported commands",
          "keyphrase": "long string match patterns on supported commands",
          "type": "vector"
        }
      ],
      "94": [
        {
          "id": "product:Redis",
          "keyphrase": "Redis",
          "type": "product"
        }
      ]
    },
    "relevant_cwes": [
      {
        "metadata": {
          "doc_id": "674",
          "name": "Uncontrolled Recursion",
          "source": "sparse",
          "original_content": "The product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack.",
          "keyphrase_sources": [
            {
              "id": "weakness:stack overflow",
              "keyphrase": "stack overflow",
              "type": "weakness"
            },
            {
              "id": "weakness:unbounded recursion",
              "keyphrase": "unbounded recursion",
              "type": "weakness"
            },
            {
              "id": "impact:stack overflow and process crash",
              "keyphrase": "stack overflow and process crash",
              "type": "impact"
            },
            {
              "id": "vector:specially crafted",
              "keyphrase": "specially crafted",
              "type": "vector"
            },
            {
              "id": "vector:long string match patterns on supported commands",
              "keyphrase": "long string match patterns on supported commands",
              "type": "vector"
            },
            {
              "id": "attacker:Authenticated users",
              "keyphrase": "Authenticated users",
              "type": "attacker"
            },
            {
              "id": "product:Redis",
              "keyphrase": "Redis",
              "type": "product"
            },
            {
              "id": "version:prior to 6.2.16",
              "keyphrase": "prior to 6.2.16",
              "type": "version"
            },
            {
              "id": "version:7.2.6",
              "keyphrase": "7.2.6",
              "type": "version"
            },
            {
              "id": "version:and 7.4.1",
              "keyphrase": "and 7.4.1",
              "type": "version"
            }
          ]
        },
        "similarity": 547.4059720973111
      },
      {
        "metadata": {
          "doc_id": "190",
          "name": "Integer Overflow or Wraparound",
          "source": "sparse",
          "original_content": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number.",
          "keyphrase_sources": [
            {
              "id": "weakness:stack overflow",
              "keyphrase": "stack overflow",
              "type": "weakness"
            },
            {
              "id": "weakness:unbounded recursion",
              "keyphrase": "unbounded recursion",
              "type": "weakness"
            },
            {
              "id": "impact:stack overflow and process crash",
              "keyphrase": "stack overflow and process crash",
              "type": "impact"
            },
            {
              "id": "vector:specially crafted",
              "keyphrase": "specially crafted",
              "type": "vector"
            },
            {
              "id": "vector:long string match patterns on supported commands",
              "keyphrase": "long string match patterns on supported commands",
              "type": "vector"
            },
            {
              "id": "attacker:Authenticated users",
              "keyphrase": "Authenticated users",
              "type": "attacker"
            },
            {
              "id": "product:Redis",
              "keyphrase": "Redis",
              "type": "product"
            },
            {
              "id": "version:prior to 6.2.16",
              "keyphrase": "prior to 6.2.16",
              "type": "version"
            },
            {
              "id": "version:7.2.6",
              "keyphrase": "7.2.6",
              "type": "version"
            },
            {
              "id": "version:and 7.4.1",
              "keyphrase": "and 7.4.1",
              "type": "version"
            }
          ]
        },
        "similarity": 521.0106517050202
      },
      {
        "metadata": {
          "doc_id": "125",
          "name": "Out-of-bounds Read",
          "source": "sparse",
          "original_content": "The product reads data past the end, or before the beginning, of the intended buffer.",
          "keyphrase_sources": [
            {
              "id": "weakness:stack overflow",
              "keyphrase": "stack overflow",
              "type": "weakness"
            },
            {
              "id": "impact:stack overflow and process crash",
              "keyphrase": "stack overflow and process crash",
              "type": "impact"
            },
            {
              "id": "vector:specially crafted",
              "keyphrase": "specially crafted",
              "type": "vector"
            },
            {
              "id": "product:Redis",
              "keyphrase": "Redis",
              "type": "product"
            },
            {
              "id": "version:and 7.4.1",
              "keyphrase": "and 7.4.1",
              "type": "version"
            }
          ]
        },
        "similarity": 490.0832418676668
      },
      {
        "metadata": {
          "doc_id": "789",
          "name": "Memory Allocation with Excessive Size Value",
          "source": "sparse",
          "original_content": "The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated.",
          "keyphrase_sources": [
            {
              "id": "weakness:stack overflow",
              "keyphrase": "stack overflow",
              "type": "weakness"
            },
            {
              "id": "impact:stack overflow and process crash",
              "keyphrase": "stack overflow and process crash",
              "type": "impact"
            },
            {
              "id": "vector:specially crafted",
              "keyphrase": "specially crafted",
              "type": "vector"
            },
            {
              "id": "attacker:Authenticated users",
              "keyphrase": "Authenticated users",
              "type": "attacker"
            },
            {
              "id": "version:prior to 6.2.16",
              "keyphrase": "prior to 6.2.16",
              "type": "version"
            },
            {
              "id": "version:7.2.6",
              "keyphrase": "7.2.6",
              "type": "version"
            },
            {
              "id": "version:and 7.4.1",
              "keyphrase": "and 7.4.1",
              "type": "version"
            }
          ]
        },
        "similarity": 489.3905469346435
      },
      {
        "metadata": {
          "doc_id": "1284",
          "name": "Improper Validation of Specified Quantity in Input",
          "source": "sparse",
          "original_content": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.",
          "keyphrase_sources": [
            {
              "id": "weakness:stack overflow",
              "keyphrase": "stack overflow",
              "type": "weakness"
            },
            {
              "id": "vector:long string match patterns on supported commands",
              "keyphrase": "long string match patterns on supported commands",
              "type": "vector"
            },
            {
              "id": "version:prior to 6.2.16",
              "keyphrase": "prior to 6.2.16",
              "type": "version"
            },
            {
              "id": "version:7.2.6",
              "keyphrase": "7.2.6",
              "type": "version"
            }
          ]
        },
        "similarity": 485.62793469915687
      },
      {
        "metadata": {
          "doc_id": "407",
          "name": "Inefficient Algorithmic Complexity",
          "source": "sparse",
          "original_content": "An algorithm in a product has an inefficient worst-case computational complexity that may be detrimental to system performance and can be triggered by an attacker, typically using crafted manipulations that ensure that the worst case is being reached.",
          "keyphrase_sources": [
            {
              "id": "weakness:unbounded recursion",
              "keyphrase": "unbounded recursion",
              "type": "weakness"
            }
          ]
        },
        "similarity": 477.48061193212794
      },
      {
        "metadata": {
          "doc_id": "770",
          "name": "Allocation of Resources Without Limits or Throttling",
          "source": "sparse",
          "original_content": "The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.",
          "keyphrase_sources": [
            {
              "id": "weakness:unbounded recursion",
              "keyphrase": "unbounded recursion",
              "type": "weakness"
            },
            {
              "id": "impact:stack overflow and process crash",
              "keyphrase": "stack overflow and process crash",
              "type": "impact"
            },
            {
              "id": "attacker:Authenticated users",
              "keyphrase": "Authenticated users",
              "type": "attacker"
            }
          ]
        },
        "similarity": 462.92229012057663
      },
      {
        "metadata": {
          "doc_id": "1333",
          "name": "Inefficient Regular Expression Complexity",
          "source": "sparse",
          "original_content": "The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles.",
          "keyphrase_sources": [
            {
              "id": "weakness:unbounded recursion",
              "keyphrase": "unbounded recursion",
              "type": "weakness"
            },
            {
              "id": "vector:specially crafted",
              "keyphrase": "specially crafted",
              "type": "vector"
            },
            {
              "id": "vector:long string match patterns on supported commands",
              "keyphrase": "long string match patterns on supported commands",
              "type": "vector"
            },
            {
              "id": "attacker:Authenticated users",
              "keyphrase": "Authenticated users",
              "type": "attacker"
            },
            {
              "id": "product:Redis",
              "keyphrase": "Redis",
              "type": "product"
            },
            {
              "id": "version:prior to 6.2.16",
              "keyphrase": "prior to 6.2.16",
              "type": "version"
            },
            {
              "id": "version:7.2.6",
              "keyphrase": "7.2.6",
              "type": "version"
            },
            {
              "id": "version:and 7.4.1",
              "keyphrase": "and 7.4.1",
              "type": "version"
            }
          ]
        },
        "similarity": 461.34527200317035
      },
      {
        "metadata": {
          "doc_id": "193",
          "name": "Off-by-one Error",
          "source": "sparse",
          "original_content": "A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.",
          "keyphrase_sources": [
            {
              "id": "vector:long string match patterns on supported commands",
              "keyphrase": "long string match patterns on supported commands",
              "type": "vector"
            }
          ]
        },
        "similarity": 179.32286057988014
      },
      {
        "metadata": {
          "doc_id": "94",
          "name": "Improper Control of Generation of Code ('Code Injection')",
          "source": "sparse",
          "original_content": "The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.",
          "keyphrase_sources": [
            {
              "id": "product:Redis",
              "keyphrase": "Redis",
              "type": "product"
            }
          ]
        },
        "similarity": 159.65712412327295
      }
    ],
    "enhanced_query": "# Vulnerability Description\n\n    Redis is an open source, in-memory database that persists on disk. Authenticated users can trigger a denial-of-service by using specially crafted, long string match patterns on supported commands such as `KEYS`, `SCAN`, `PSUBSCRIBE`, `FUNCTION LIST`, `COMMAND LIST` and ACL definitions. Matching of extremely long patterns may result in **unbounded recursion**, leading to **stack overflow** and process crash. This problem has been fixed in Redis versions 6.2.16, 7.2.6, and 7.4.1. Users are advised to upgrade. There are no known workarounds for this vulnerability.\n\n    # Keyphrase-Specific CWE Analysis\n    This vulnerability contains multiple keyphrases that may map to different CWEs. \n    Please analyze each keyphrase separately and determine the most appropriate CWE(s) for each.\n\n    ## WEAKNESS: 'stack overflow'\n\nRelevant CWEs for this WEAKNESS:\n\n### 1. CWE-674: Uncontrolled Recursion (Score: 547.41)\n\nThe product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack....\n\n### 2. CWE-190: Integer Overflow or Wraparound (Score: 521.01)\n\nThe product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to st...\n\n### 3. CWE-125: Out-of-bounds Read (Score: 490.08)\n\nThe product reads data past the end, or before the beginning, of the intended buffer....\n\n### 4. CWE-789: Memory Allocation with Excessive Size Value (Score: 489.39)\n\nThe product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated....\n\n### 5. CWE-1284: Improper Validation of Specified Quantity in Input (Score: 485.63)\n\nThe product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties....\n\n## WEAKNESS: 'unbounded recursion'\n\nRelevant CWEs for this WEAKNESS:\n\n### 1. CWE-674: Uncontrolled Recursion (Score: 547.41)\n\nThe product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack....\n\n### 2. CWE-190: Integer Overflow or Wraparound (Score: 521.01)\n\nThe product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to st...\n\n### 3. CWE-407: Inefficient Algorithmic Complexity (Score: 477.48)\n\nAn algorithm in a product has an inefficient worst-case computational complexity that may be detrimental to system performance and can be triggered by an attacker, typically using crafted manipulations that ensure that the worst case is being reached....\n\n### 4. CWE-770: Allocation of Resources Without Limits or Throttling (Score: 462.92)\n\nThe product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor....\n\n### 5. CWE-1333: Inefficient Regular Expression Complexity (Score: 461.35)\n\nThe product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles....\n\n## IMPACT: 'stack overflow and process crash'\n\nRelevant CWEs for this IMPACT:\n\n### 1. CWE-674: Uncontrolled Recursion (Score: 547.41)\n\nThe product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack....\n\n### 2. CWE-190: Integer Overflow or Wraparound (Score: 521.01)\n\nThe product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to st...\n\n### 3. CWE-125: Out-of-bounds Read (Score: 490.08)\n\nThe product reads data past the end, or before the beginning, of the intended buffer....\n\n### 4. CWE-789: Memory Allocation with Excessive Size Value (Score: 489.39)\n\nThe product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated....\n\n### 5. CWE-770: Allocation of Resources Without Limits or Throttling (Score: 462.92)\n\nThe product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor....\n\n## VECTOR: 'specially crafted'\n\nRelevant CWEs for this VECTOR:\n\n### 1. CWE-674: Uncontrolled Recursion (Score: 547.41)\n\nThe product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack....\n\n### 2. CWE-190: Integer Overflow or Wraparound (Score: 521.01)\n\nThe product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to st...\n\n### 3. CWE-125: Out-of-bounds Read (Score: 490.08)\n\nThe product reads data past the end, or before the beginning, of the intended buffer....\n\n### 4. CWE-789: Memory Allocation with Excessive Size Value (Score: 489.39)\n\nThe product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated....\n\n### 5. CWE-1333: Inefficient Regular Expression Complexity (Score: 461.35)\n\nThe product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles....\n\n## VECTOR: 'long string match patterns on supported commands'\n\nRelevant CWEs for this VECTOR:\n\n### 1. CWE-674: Uncontrolled Recursion (Score: 547.41)\n\nThe product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack....\n\n### 2. CWE-190: Integer Overflow or Wraparound (Score: 521.01)\n\nThe product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to st...\n\n### 3. CWE-1284: Improper Validation of Specified Quantity in Input (Score: 485.63)\n\nThe product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties....\n\n### 4. CWE-1333: Inefficient Regular Expression Complexity (Score: 461.35)\n\nThe product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles....\n\n### 5. CWE-193: Off-by-one Error (Score: 179.32)\n\nA product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value....\n\n## ATTACKER: 'Authenticated users'\n\nRelevant CWEs for this ATTACKER:\n\n### 1. CWE-674: Uncontrolled Recursion (Score: 547.41)\n\nThe product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack....\n\n### 2. CWE-190: Integer Overflow or Wraparound (Score: 521.01)\n\nThe product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to st...\n\n### 3. CWE-789: Memory Allocation with Excessive Size Value (Score: 489.39)\n\nThe product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated....\n\n### 4. CWE-770: Allocation of Resources Without Limits or Throttling (Score: 462.92)\n\nThe product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor....\n\n### 5. CWE-1333: Inefficient Regular Expression Complexity (Score: 461.35)\n\nThe product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles....\n\n## PRODUCT: 'Redis'\n\nRelevant CWEs for this PRODUCT:\n\n### 1. CWE-674: Uncontrolled Recursion (Score: 547.41)\n\nThe product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack....\n\n### 2. CWE-190: Integer Overflow or Wraparound (Score: 521.01)\n\nThe product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to st...\n\n### 3. CWE-125: Out-of-bounds Read (Score: 490.08)\n\nThe product reads data past the end, or before the beginning, of the intended buffer....\n\n### 4. CWE-1333: Inefficient Regular Expression Complexity (Score: 461.35)\n\nThe product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles....\n\n### 5. CWE-94: Improper Control of Generation of Code ('Code Injection') (Score: 159.66)\n\nThe product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment....\n\n## VERSION: 'prior to 6.2.16'\n\nRelevant CWEs for this VERSION:\n\n### 1. CWE-674: Uncontrolled Recursion (Score: 547.41)\n\nThe product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack....\n\n### 2. CWE-190: Integer Overflow or Wraparound (Score: 521.01)\n\nThe product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to st...\n\n### 3. CWE-789: Memory Allocation with Excessive Size Value (Score: 489.39)\n\nThe product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated....\n\n### 4. CWE-1284: Improper Validation of Specified Quantity in Input (Score: 485.63)\n\nThe product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties....\n\n### 5. CWE-1333: Inefficient Regular Expression Complexity (Score: 461.35)\n\nThe product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles....\n\n## VERSION: '7.2.6'\n\nRelevant CWEs for this VERSION:\n\n### 1. CWE-674: Uncontrolled Recursion (Score: 547.41)\n\nThe product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack....\n\n### 2. CWE-190: Integer Overflow or Wraparound (Score: 521.01)\n\nThe product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to st...\n\n### 3. CWE-789: Memory Allocation with Excessive Size Value (Score: 489.39)\n\nThe product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated....\n\n### 4. CWE-1284: Improper Validation of Specified Quantity in Input (Score: 485.63)\n\nThe product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties....\n\n### 5. CWE-1333: Inefficient Regular Expression Complexity (Score: 461.35)\n\nThe product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles....\n\n## VERSION: 'and 7.4.1'\n\nRelevant CWEs for this VERSION:\n\n### 1. CWE-674: Uncontrolled Recursion (Score: 547.41)\n\nThe product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack....\n\n### 2. CWE-190: Integer Overflow or Wraparound (Score: 521.01)\n\nThe product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to st...\n\n### 3. CWE-125: Out-of-bounds Read (Score: 490.08)\n\nThe product reads data past the end, or before the beginning, of the intended buffer....\n\n### 4. CWE-789: Memory Allocation with Excessive Size Value (Score: 489.39)\n\nThe product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated....\n\n### 5. CWE-1333: Inefficient Regular Expression Complexity (Score: 461.35)\n\nThe product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles....\n\n\n    # Analysis Instructions\n    1. For each keyphrase, identify the most appropriate CWE(s) that represent the weakness.\n    2. Consider how the different keyphrases might relate to each other in the vulnerability chain.\n    3. Provide a final determination of primary CWE(s) and any secondary CWEs.\n    4. Format your response using the standard analysis template.\n\n    Please analyze how these different weaknesses interact and provide a comprehensive CWE classification.\n    "
  },
  "retrieval_time": 3.37864351272583
}