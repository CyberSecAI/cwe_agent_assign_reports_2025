{
  "retriever": "dense",
  "query": "In the Linux kernel, the following vulnerability has been resolved net/tcp Disable TCP-AO static key after RCU grace period The lifetime of TCP-AO static_key is the same as the last tcp_ao_info. On the socket destruction tcp_ao_info ceases to be with RCU grace period, while tcp-ao static branch is currently deferred destructed. The static key definition is DEFINE_STATIC_KEY_DEFERRED_FALSE(tcp_ao_needed, HZ) which means that if RCU grace period is delayed by more than a second and tcp_ao_needed is in the process of disablement, other CPUs may yet see tcp_ao_info which atent dead, but soon-to-be. And that breaks the assumption of static_key_fast_inc_not_disabled(). See the comment near the definition > * The caller must make sure that the static key cant get disabled while > * in this function. It doesnt patch jump labels, only adds a user to > * an already enabled static key. Originally it was introduced in commit eb8c507296f6 (jump_label Prevent key->enabled int overflow), which is needed for the atomic contexts, one of which would be the creation of a full socket from a request socket. In that atomic context, its known by the presence of the key (md5/ao) that the static branch is already enabled. So, the ref counter for that static branch is just incremented instead of holding the proper mutex. static_key_fast_inc_not_disabled() is just a helper for such usage case. But it must not be used if the static branch could get disabled in parallel as its not prote",
  "keyphrases": {
    "rootcause": [
      "improper use of static key"
    ],
    "weakness": [
      "overflow"
    ]
  },
  "timestamp": "2025-07-13 15:19:21",
  "cve_id": "CVE-2024-43887",
  "result_count": 20,
  "results": [
    {
      "cwe_id": "911",
      "name": "Improper Update of Reference Count",
      "type": "Base",
      "score": 0.43599423264352655
    },
    {
      "cwe_id": "1233",
      "name": "Security-Sensitive Hardware Controls with Missing Lock Bit Protection",
      "type": "Base",
      "score": 0.42552167694034115
    },
    {
      "cwe_id": "775",
      "name": "Missing Release of File Descriptor or Handle after Effective Lifetime",
      "type": "Variant",
      "score": 0.41946842506224175
    },
    {
      "cwe_id": "606",
      "name": "Unchecked Input for Loop Condition",
      "type": "Base",
      "score": 0.4181154165134683
    },
    {
      "cwe_id": "1231",
      "name": "Improper Prevention of Lock Bit Modification",
      "type": "Base",
      "score": 0.41635756226228476
    },
    {
      "cwe_id": "1422",
      "name": "Exposure of Sensitive Information caused by Incorrect Data Forwarding during Transient Execution",
      "type": "Base",
      "score": 0.41541330906866547
    },
    {
      "cwe_id": "1394",
      "name": "Use of Default Cryptographic Key",
      "type": "Base",
      "score": 0.414957495512162
    },
    {
      "cwe_id": "1421",
      "name": "Exposure of Sensitive Information in Shared Microarchitectural Structures during Transient Execution",
      "type": "Base",
      "score": 0.41487527924688616
    },
    {
      "cwe_id": "833",
      "name": "Deadlock",
      "type": "Base",
      "score": 0.41230408619763337
    },
    {
      "cwe_id": "1264",
      "name": "Hardware Logic with Insecure De-Synchronization between Control and Data Channels",
      "type": "Base",
      "score": 0.4088247484531149
    },
    {
      "cwe_id": "401",
      "name": "Missing Release of Memory after Effective Lifetime",
      "type": "Variant",
      "score": 0.40458332198932645
    },
    {
      "cwe_id": "1299",
      "name": "Missing Protection Mechanism for Alternate Hardware Interface",
      "type": "Base",
      "score": 0.3968217575283919
    },
    {
      "cwe_id": "321",
      "name": "Use of Hard-coded Cryptographic Key",
      "type": "Variant",
      "score": 0.392150671410321
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "type": "Class",
      "score": 0.3914244648366123
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "type": "Class",
      "score": 0.3903110286540954
    },
    {
      "cwe_id": "394",
      "name": "Unexpected Status Code or Return Value",
      "type": "Base",
      "score": 0.3900082003258575
    },
    {
      "cwe_id": "413",
      "name": "Improper Resource Locking",
      "type": "Base",
      "score": 0.3899235584121934
    },
    {
      "cwe_id": "1256",
      "name": "Improper Restriction of Software Interfaces to Hardware Features",
      "type": "Base",
      "score": 0.389090360352894
    },
    {
      "cwe_id": "1204",
      "name": "Generation of Weak Initialization Vector (IV)",
      "type": "Base",
      "score": 0.38854620723043953
    },
    {
      "cwe_id": "1423",
      "name": "Exposure of Sensitive Information caused by Shared Microarchitectural Predictor State that Influences Transient Execution",
      "type": "Base",
      "score": 0.3871522603284134
    }
  ]
}