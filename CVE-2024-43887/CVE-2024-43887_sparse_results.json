{
  "query": "In the Linux kernel, the following vulnerability has been resolved net/tcp Disable TCP-AO static key after RCU grace period The lifetime of TCP-AO static_key is the same as the last tcp_ao_info. On the socket destruction tcp_ao_info ceases to be with RCU grace period, while tcp-ao static branch is currently deferred destructed. The static key definition is DEFINE_STATIC_KEY_DEFERRED_FALSE(tcp_ao_needed, HZ) which means that if RCU grace period is delayed by more than a second and tcp_ao_needed is in the process of disablement, other CPUs may yet see tcp_ao_info which atent dead, but soon-to-be. And that breaks the assumption of static_key_fast_inc_not_disabled(). See the comment near the definition > * The caller must make sure that the static key cant get disabled while > * in this function. It doesnt patch jump labels, only adds a user to > * an already enabled static key. Originally it was introduced in commit eb8c507296f6 (jump_label Prevent key->enabled int overflow), which is needed for the atomic contexts, one of which would be the creation of a full socket from a request socket. In that atomic context, its known by the presence of the key (md5/ao) that the static branch is already enabled. So, the ref counter for that static branch is just incremented instead of holding the proper mutex. static_key_fast_inc_not_disabled() is just a helper for such usage case. But it must not be used if the static branch could get disabled in parallel as its not prote",
  "count": 15,
  "results": [
    {
      "cwe_id": "321",
      "name": "Use of Hard-coded Cryptographic Key",
      "abstraction": "Variant",
      "score": 1179.832743943562,
      "original_score": 1179.832743943562,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1204",
      "name": "Generation of Weak Initialization Vector (IV)",
      "abstraction": "Base",
      "score": 1175.5223349749735,
      "original_score": 1175.5223349749735,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1391",
      "name": "Use of Weak Credentials",
      "abstraction": "Class",
      "score": 1167.6684134803918,
      "original_score": 1167.6684134803918,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "639",
      "name": "Authorization Bypass Through User-Controlled Key",
      "abstraction": "Base",
      "score": 1150.29338731353,
      "original_score": 1150.29338731353,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "327",
      "name": "Use of a Broken or Risky Cryptographic Algorithm",
      "abstraction": "Class",
      "score": 1141.249933586768,
      "original_score": 1141.249933586768,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "863",
      "name": "Incorrect Authorization",
      "abstraction": "Class",
      "score": 1138.9629192734656,
      "original_score": 1138.9629192734656,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "287",
      "name": "Improper Authentication",
      "abstraction": "Class",
      "score": 1136.460533792231,
      "original_score": 1136.460533792231,
      "mapping_usage": "Discouraged"
    },
    {
      "cwe_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "abstraction": "Base",
      "score": 1130.8504340839359,
      "original_score": 1130.8504340839359,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "203",
      "name": "Observable Discrepancy",
      "abstraction": "Base",
      "score": 1120.7079780206618,
      "original_score": 1120.7079780206618,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "201",
      "name": "Insertion of Sensitive Information Into Sent Data",
      "abstraction": "Base",
      "score": 1118.6492964238364,
      "original_score": 1118.6492964238364,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "923",
      "name": "Improper Restriction of Communication Channel to Intended Endpoints",
      "abstraction": "Class",
      "score": 1024.8622319441208,
      "original_score": 1024.8622319441208,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "190",
      "name": "Integer Overflow or Wraparound",
      "abstraction": "Base",
      "score": 1000.0,
      "original_score": 1000.0,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "119",
      "name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
      "abstraction": "Class",
      "score": 700.0,
      "original_score": 700.0,
      "mapping_usage": "Discouraged"
    },
    {
      "cwe_id": "120",
      "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
      "abstraction": "Base",
      "score": 700.0,
      "original_score": 700.0,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "121",
      "name": "Stack-based Buffer Overflow",
      "abstraction": "Variant",
      "score": 700.0,
      "original_score": 700.0,
      "mapping_usage": "Allowed"
    }
  ],
  "statistics": {
    "min": 700.0,
    "max": 1179.832743943562,
    "mean": 1039.0040137891651,
    "median": 1130.8504340839359,
    "count": 15
  }
}