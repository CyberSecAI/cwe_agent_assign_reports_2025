{
  "cve_id": "CVE-2025-21767",
  "description": "In the Linux kernel, the following vulnerability has been resolved clocksource Use migrate_disable() to avoid calling get_random_u32() in atomic context The following bug report happened with a PREEMPT_RT kernel BUG **sleeping function called from invalid context** at kernel/locking/spinlock_rt.c48 in_atomic() 1, irqs_disabled() 0, non_block 0, pid 2012, name kwatchdog preempt_count 1, expected 0 RCU nest depth 0, expected 0 get_random_u32+0x4f/0x110 clocksource_verify_choose_cpus+0xab/0x1a0 clocksource_verify_percpu.part.0+0x6b/0x330 clocksource_watchdog_kthread+0x193/0x1a0 It is due to the fact that clocksource_verify_choose_cpus() is invoked with preemption disabled. This function invokes get_random_u32() to obtain random numbers for choosing CPUs. The batched_entropy_32 local lock and/or the base_crng.lock spinlock in driver/char/random.c will be acquired during the call. In PREEMPT_RT kernel, they are both sleeping locks and so **cannot be acquired in atomic context**. Fix this problem by using migrate_disable() to allow smp_processor_id() to be reliably used without introducing atomic context. preempt_disable() is then called after clocksource_verify_choose_cpus() but before the clocksource measurement is being run to avoid introducing unexpected latency.",
  "key_phrases": {
    "rootcause": "sleeping function called from invalid context",
    "weakness": "cannot be acquired in atomic context",
    "impact": "kernel BUG",
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": "clocksource"
  },
  "reference_content": null,
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-667 | Improper Locking | 0.85 | Class | Primary CWE | Allowed-with-Review |\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.70 | Class | Secondary Candidate | Allowed-with-Review |\n| CWE-367 | Time-of-check Time-of-use (TOCTOU) Race Condition | 0.60 | Base | Secondary Candidate | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.80\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE identified is CWE-667 (Improper Locking), a Class-level CWE. The vulnerability description indicates that a **sleeping function is called from an invalid context** because locks **cannot be acquired in atomic context**. This directly relates to improper locking mechanisms. CWE-362 (Race Condition) is a related Class-level CWE, as improper locking often leads to race conditions. CWE-367 (TOCTOU) is a Base-level CWE and a child of CWE-362. These relationships highlight a potential chain where improper locking (CWE-667) could contribute to race conditions (CWE-362), and in specific scenarios, TOCTOU vulnerabilities (CWE-367).\n\n```mermaid\ngraph TD\n    cwe667[\"CWE-667: Improper Locking\"]\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    cwe367[\"CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\"]\n    \n    cwe362 -->|CHILDOF| cwe667\n    cwe367 -->|CHILDOF| cwe362\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe667 primary\n    class cwe362,cwe367 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **root cause** of **improper locking (CWE-667)** due to calling `get_random_u32()` in an atomic context, where sleeping locks are acquired. This leads to a kernel bug because the locks **cannot be acquired in atomic context**. This can cause a race condition scenario **(CWE-362)**.\n\n## Summary of Analysis\nThe assessment is based on the provided evidence, specifically the phrases \"**sleeping function called from invalid context**\" and \"**cannot be acquired in atomic context**.\" The Retriever Results also support CWE-667 as the top candidate.\n\nThe graph relationships show how improper locking can lead to race conditions and potentially TOCTOU vulnerabilities.\n\nCWE-667 is selected as the primary CWE because it directly addresses the **root cause** of the locking issue. While CWE-362 and CWE-367 are related and potentially present, CWE-667 represents the initial flaw that triggers the subsequent issues.\n\nThe level of specificity is appropriate, as CWE-667 is a Class-level CWE that captures the general issue of improper locking. Lower-level CWEs could be considered if more specific information about the locking mechanism was available, but the current evidence points to a general locking problem.\n\nRelevant CWE Information:\nCWE-787 (Out-of-bounds Write), CWE-415 (Double Free), and CWE-190 (Integer Overflow or Wraparound) were considered but deemed less relevant as the vulnerability description does not provide evidence of memory corruption or arithmetic errors.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-667 | Improper Locking | 0.85 | Class | Primary CWE | Allowed-with-Review |\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.70 | Class | Secondary Candidate | Allowed-with-Review |\n| CWE-367 | Time-of-check Time-of-use (TOCTOU) Race Condition | 0.60 | Base | Secondary Candidate | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.80\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE identified is CWE-667 (Improper Locking), a Class-level CWE. The vulnerability description indicates that a **sleeping function is called from an invalid context** because locks **cannot be acquired in atomic context**. This directly relates to improper locking mechanisms. CWE-362 (Race Condition) is a related Class-level CWE, as improper locking often leads to race conditions. CWE-367 (TOCTOU) is a Base-level CWE and a child of CWE-362. These relationships highlight a potential chain where improper locking (CWE-667) could contribute to race conditions (CWE-362), and in specific scenarios, TOCTOU vulnerabilities (CWE-367).\n\n```mermaid\ngraph TD\n    cwe667[\"CWE-667: Improper Locking\"]\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    cwe367[\"CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\"]\n    \n    cwe362 -->|CHILDOF| cwe667\n    cwe367 -->|CHILDOF| cwe362\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe667 primary\n    class cwe362,cwe367 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **root cause** of **improper locking (CWE-667)** due to calling `get_random_u32()` in an atomic context, where sleeping locks are acquired. This leads to a kernel bug because the locks **cannot be acquired in atomic context**. This can cause a race condition scenario **(CWE-362)**.\n\n## Summary of Analysis\nThe assessment is based on the provided evidence, specifically the phrases \"**sleeping function called from invalid context**\" and \"**cannot be acquired in atomic context**.\" The Retriever Results also support CWE-667 as the top candidate.\n\nThe graph relationships show how improper locking can lead to race conditions and potentially TOCTOU vulnerabilities.\n\nCWE-667 is selected as the primary CWE because it directly addresses the **root cause** of the locking issue. While CWE-362 and CWE-367 are related and potentially present, CWE-667 represents the initial flaw that triggers the subsequent issues.\n\nThe level of specificity is appropriate, as CWE-667 is a Class-level CWE that captures the general issue of improper locking. Lower-level CWEs could be considered if more specific information about the locking mechanism was available, but the current evidence points to a general locking problem.\n\nRelevant CWE Information:\nCWE-787 (Out-of-bounds Write), CWE-415 (Double Free), and CWE-190 (Integer Overflow or Wraparound) were considered but deemed less relevant as the vulnerability description does not provide evidence of memory corruption or arithmetic errors.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-667:**\n- 667 (Improper Locking) - ROOT\n\n\n**Chain starting from CWE-787:**\n- 787 (Out-of-bounds Write) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "667",
        "name": "Improper Locking",
        "source": "sparse"
      },
      "similarity": 701.0819805417036
    },
    {
      "metadata": {
        "doc_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "source": "sparse"
      },
      "similarity": 683.058949523283
    },
    {
      "metadata": {
        "doc_id": "367",
        "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
        "source": "sparse"
      },
      "similarity": 646.5335612335255
    },
    {
      "metadata": {
        "doc_id": "415",
        "name": "Double Free",
        "source": "sparse"
      },
      "similarity": 637.9384481451157
    },
    {
      "metadata": {
        "doc_id": "457",
        "name": "Use of Uninitialized Variable",
        "source": "sparse"
      },
      "similarity": 637.1102552964661
    },
    {
      "metadata": {
        "doc_id": "787",
        "name": "Out-of-bounds Write",
        "source": "sparse"
      },
      "similarity": 635.3274186698391
    },
    {
      "metadata": {
        "doc_id": "828",
        "name": "Signal Handler with Functionality that is not Asynchronous-Safe",
        "source": "sparse"
      },
      "similarity": 635.324377012442
    },
    {
      "metadata": {
        "doc_id": "190",
        "name": "Integer Overflow or Wraparound",
        "source": "sparse"
      },
      "similarity": 623.8384699217289
    },
    {
      "metadata": {
        "doc_id": "413",
        "name": "Improper Resource Locking",
        "type": "Base",
        "original_content": "The product does not lock or does not correctly lock a resource when the product must have exclusive access to the resource.",
        "keyphrase_source": "weakness:cannot be acquired in atomic context",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5648575334605646,
            "graph": 1.718644129454461
          }
        }
      },
      "similarity": 0.5648575334605646
    },
    {
      "doc_id": "609",
      "text": "CWE-609: Double-Checked Locking",
      "score": 2.8651999999999997,
      "metadata": {
        "doc_id": "609",
        "name": "Double-Checked Locking",
        "type": "base",
        "original_content": "CWE-609: Double-Checked Locking",
        "relationships": [
          {
            "source_id": "609",
            "target_id": "367",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "609",
            "target_id": "667",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "667",
            "target_id": "609",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "367",
            "target_id": "609",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "abstraction_path": 0.7200000000000001,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "367",
                  "609",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "367"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "667",
                  "609",
                  "PARENTOF"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "abstraction_path_down",
              "source": "667"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "367",
                  "609",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "367"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "609",
                  "367",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "367"
            }
          }
        },
        "abstraction_level": "base",
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.8651999999999997
          }
        }
      },
      "similarity": 2.8651999999999997
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-667",
      "CWE-787",
      "CWE-190",
      "CWE-362",
      "CWE-367",
      "CWE-415"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}