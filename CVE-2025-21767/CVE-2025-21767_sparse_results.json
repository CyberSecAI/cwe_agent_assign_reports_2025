{
  "query": "In the Linux kernel, the following vulnerability has been resolved clocksource Use migrate_disable() to avoid calling get_random_u32() in atomic context The following bug report happened with a PREEMPT_RT kernel BUG sleeping function called from invalid context at kernel/locking/spinlock_rt.c48 in_atomic() 1, irqs_disabled() 0, non_block 0, pid 2012, name kwatchdog preempt_count 1, expected 0 RCU nest depth 0, expected 0 get_random_u32+0x4f/0x110 clocksource_verify_choose_cpus+0xab/0x1a0 clocksource_verify_percpu.part.0+0x6b/0x330 clocksource_watchdog_kthread+0x193/0x1a0 It is due to the fact that clocksource_verify_choose_cpus() is invoked with preemption disabled. This function invokes get_random_u32() to obtain random numbers for choosing CPUs. The batched_entropy_32 local lock and/or the base_crng.lock spinlock in driver/char/random.c will be acquired during the call. In PREEMPT_RT kernel, they are both sleeping locks and so cannot be acquired in atomic context. Fix this problem by using migrate_disable() to allow smp_processor_id() to be reliably used without introducing atomic context. preempt_disable() is then called after clocksource_verify_choose_cpus() but before the clocksource measurement is being run to avoid introducing unexpected latency.",
  "count": 13,
  "results": [
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "abstraction": "Class",
      "score": 701.0819805417036,
      "original_score": 701.0819805417036,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "abstraction": "Class",
      "score": 683.058949523283,
      "original_score": 683.058949523283,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "abstraction": "Base",
      "score": 646.5335612335255,
      "original_score": 646.5335612335255,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "415",
      "name": "Double Free",
      "abstraction": "Variant",
      "score": 637.9384481451157,
      "original_score": 637.9384481451157,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "457",
      "name": "Use of Uninitialized Variable",
      "abstraction": "Variant",
      "score": 637.1102552964661,
      "original_score": 637.1102552964661,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "787",
      "name": "Out-of-bounds Write",
      "abstraction": "Base",
      "score": 635.3274186698391,
      "original_score": 635.3274186698391,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "828",
      "name": "Signal Handler with Functionality that is not Asynchronous-Safe",
      "abstraction": "Variant",
      "score": 635.324377012442,
      "original_score": 635.324377012442,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "190",
      "name": "Integer Overflow or Wraparound",
      "abstraction": "Base",
      "score": 623.8384699217289,
      "original_score": 623.8384699217289,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "abstraction": "Base",
      "score": 623.2219717750497,
      "original_score": 623.2219717750497,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "122",
      "name": "Heap-based Buffer Overflow",
      "abstraction": "Variant",
      "score": 622.970719031551,
      "original_score": 622.970719031551,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "909",
      "name": "Missing Initialization of Resource",
      "abstraction": "Class",
      "score": 581.8881162439748,
      "original_score": 581.8881162439748,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "abstraction": "Base",
      "score": 200.18847032241914,
      "original_score": 200.18847032241914,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "833",
      "name": "Deadlock",
      "abstraction": "Base",
      "score": 199.90830345807393,
      "original_score": 199.90830345807393,
      "mapping_usage": "Allowed"
    }
  ],
  "statistics": {
    "min": 199.90830345807393,
    "max": 701.0819805417036,
    "mean": 571.4146954750132,
    "median": 635.324377012442,
    "count": 13
  }
}