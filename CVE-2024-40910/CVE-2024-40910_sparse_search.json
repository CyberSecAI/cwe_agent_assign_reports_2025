{
  "retriever": "sparse",
  "query": "In the Linux kernel, the following vulnerability has been resolved ax25 Fix refcount imbalance on inbound connections When releasing a socket in ax25_release(), we call netdev_put() to decrease the refcount on the associated ax.25 device. However, the execution path for accepting an incoming connection never calls netdev_hold(). This imbalance leads to refcount errors, and ultimately to kernel crashes. A typical call trace for the above situation will start with one of the following errors refcount_t decrement hit 0 leaking memory. refcount_t underflow use-after-free. And will then have a trace like Call Trace ? show_regs+0x64/0x70 ? __warn+0x83/0x120 ? refcount_warn_saturate+0xb2/0x100 ? report_bug+0x158/0x190 ? prb_read_valid+0x20/0x30 ? handle_bug+0x3e/0x70 ? exc_invalid_op+0x1c/0x70 ? asm_exc_invalid_op+0x1f/0x30 ? refcount_warn_saturate+0xb2/0x100 ? refcount_warn_saturate+0xb2/0x100 ax25_release+0x2ad/0x360 __sock_release+0x35/0xa0 sock_close+0x19/0x20 [...] On reboot (or any attempt to remove the interface), the kernel gets stuck in an infinite loop unregister_netdevice waiting for ax0 to become free. Usage count = 0 This patch corrects these issues by ensuring that we call netdev_hold() and ax25_dev_hold() for new connections in ax25_accept(). This makes the logic leading to ax25_accept() match the logic for ax25_bind() in both cases we increment the refcount, which",
  "keyphrases": {
    "rootcause": [
      "refcount imbalance"
    ]
  },
  "timestamp": "2025-07-13 12:41:23",
  "cve_id": "CVE-2024-40910",
  "result_count": 10,
  "results": [
    {
      "cwe_id": "415",
      "name": "Double Free",
      "score": 830.4607728933208,
      "search_source": "rootcause:refcount imbalance"
    },
    {
      "cwe_id": "401",
      "name": "Missing Release of Memory after Effective Lifetime",
      "score": 762.7395120610826,
      "search_source": "rootcause:refcount imbalance"
    },
    {
      "cwe_id": "835",
      "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
      "score": 755.0522701509262,
      "search_source": "rootcause:refcount imbalance"
    },
    {
      "cwe_id": "911",
      "name": "Improper Update of Reference Count",
      "score": 754.7662620180477,
      "search_source": "rootcause:refcount imbalance"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 745.8975736996626,
      "search_source": "rootcause:refcount imbalance"
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "score": 720.7958603163668,
      "search_source": "rootcause:refcount imbalance"
    },
    {
      "cwe_id": "617",
      "name": "Reachable Assertion",
      "score": 715.1996858456132,
      "search_source": "rootcause:refcount imbalance"
    },
    {
      "cwe_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "score": 710.9083830606562,
      "search_source": "rootcause:refcount imbalance"
    },
    {
      "cwe_id": "191",
      "name": "Integer Underflow (Wrap or Wraparound)",
      "score": 706.9481560510487,
      "search_source": "rootcause:refcount imbalance"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 706.6279752894545,
      "search_source": "rootcause:refcount imbalance"
    }
  ]
}