{
  "cve_id": "CVE-2025-22023",
  "description": "In the Linux kernel, the following vulnerability has been resolved usb xhci Dont skip on Stopped - Length Invalid Up until commit d56b0b2ab142 (usb xhci ensure skipped isoc TDs are returned when isoc ring is stopped) in v6.11, the driver didnt skip missed isochronous TDs when handling Stoppend and Stopped - Length Invalid events. Instead, it erroneously cleared the skip flag, which would cause the ring to get stuck, as future events wont match the missed TD which is never removed from the queue until its cancelled. This buggy logic seems to have been in place substantially unchanged since the 3.x series over 10 years ago, which probably speaks first and foremost about relative rarity of this case in normal usage, but by the spec I see no reason why it shouldnt be possible. After d56b0b2ab142, TDs are immediately skipped when handling those Stopped events. This poses a potential problem in case of Stopped - Length Invalid, which occurs either on completed TDs (likely already given back) or Link and No-Op TRBs. Such event wont be recognized as matching any TD (unless its the rare Link TRB inside a TD) and will result in skipping all pending TDs, giving them back possibly before they are done, risking isoc data loss and maybe **UAF** by HW. As a compromise, dont skip and dont clear the skip flag on this kind of event. Then the next event will skip missed TDs. A downside of not handling Stopped - Length Invalid on a Link inside a TD is that if the TD is cancelled, its actual length will not be updated to account for TRBs (silently) completed before the TD was stopped. I had no luck producing this sequence of completion events so there is no compelling demonstration of any resulting disaster. It may be a very rare, obscure condition. The sole motivation for this patch is that if such unlikely event does occur, Id rather risk reporting a cancelled partially done isoc frame as empty than gamble with **UAF**. This will be fixed more properly by looking at Stopped events TRB pointer when making skipping decisions, but such rework is unlikely to be backported to v6.12, which will stay around for a few years.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "UAF",
    "impact": "data loss",
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "v6.11",
    "component": "usb xhci"
  },
  "reference_content": null,
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-416 | Use After Free | 0.9 | Variant | Allowed | Primary CWE |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary relationship influencing the decision is the direct match of the vulnerability description to **CWE-416 (Use After Free)**. The retriever results also strongly suggest this CWE. The other relationships (CANFOLLOW, CANPRECEDE) are less relevant as they describe potential sequences rather than the root cause itself. The variant level of abstraction is appropriate since the description details a specific instance of UAF within the Linux kernel's USB XHCI driver.\n\n```mermaid\ngraph TD\n    cwe416[\"CWE-416: Use After Free\"]\n    cwe754[\"CWE-754: Improper Check for Unusual or Exceptional Conditions\"]\n    cwe364[\"CWE-364: Signal Handler Race Condition\"]\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    cwe1265[\"CWE-1265: Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls\"]\n    cwe123[\"CWE-123: Write-what-where Condition\"]\n\n    cwe416 -->|CANFOLLOW| cwe754\n    cwe416 -->|CANFOLLOW| cwe364\n    cwe416 -->|CANFOLLOW| cwe362\n    cwe416 -->|CANFOLLOW| cwe1265\n    cwe123 -->|CANPRECEDE| cwe416\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe416 primary\n    class cwe754,cwe364,cwe362,cwe1265,cwe123 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a flawed logic in handling \"Stopped - Length Invalid\" events in the USB XHCI driver. This leads to premature skipping of pending TDs and giving them back before completion, ultimately resulting in a **UAF**.\n\n## Summary of Analysis\nThe analysis strongly points to **CWE-416 (Use After Free)** as the primary weakness. The vulnerability description explicitly mentions the risk of **UAF** by HW.\n\nThe evidence is from the \"Vulnerability Description Key Phrases\" section:\n*   **weakness:** **UAF**\n\nThe retriever results also prioritize **CWE-416 (Use After Free)** with a score of 1.0.\n\nOther CWEs were considered but ultimately deemed less relevant:\n\n*   **CWE-789 (Memory Allocation with Excessive Size Value)** and **CWE-1284 (Improper Validation of Specified Quantity in Input)**: While memory management is involved, the core issue isn't excessive allocation or improper validation of input size but rather the incorrect handling of events leading to a **UAF**.\n*   **CWE-362 (Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'))**: Concurrency might play a role in the timing of the **UAF**, but it's not the primary cause.\n*   **CWE-754 (Improper Check for Unusual or Exceptional Conditions)**: This is a higher-level class that is less specific than **CWE-416 (Use After Free)**.\n\nThe selection of **CWE-416 (Use After Free)** at the Variant level is optimal because it precisely describes the vulnerability, which is triggered by a specific sequence of events related to USB XHCI driver's handling of stopped isochronous transfers.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-416 | Use After Free | 0.9 | Variant | Allowed | Primary CWE |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary relationship influencing the decision is the direct match of the vulnerability description to **CWE-416 (Use After Free)**. The retriever results also strongly suggest this CWE. The other relationships (CANFOLLOW, CANPRECEDE) are less relevant as they describe potential sequences rather than the root cause itself. The variant level of abstraction is appropriate since the description details a specific instance of UAF within the Linux kernel's USB XHCI driver.\n\n```mermaid\ngraph TD\n    cwe416[\"CWE-416: Use After Free\"]\n    cwe754[\"CWE-754: Improper Check for Unusual or Exceptional Conditions\"]\n    cwe364[\"CWE-364: Signal Handler Race Condition\"]\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    cwe1265[\"CWE-1265: Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls\"]\n    cwe123[\"CWE-123: Write-what-where Condition\"]\n\n    cwe416 -->|CANFOLLOW| cwe754\n    cwe416 -->|CANFOLLOW| cwe364\n    cwe416 -->|CANFOLLOW| cwe362\n    cwe416 -->|CANFOLLOW| cwe1265\n    cwe123 -->|CANPRECEDE| cwe416\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe416 primary\n    class cwe754,cwe364,cwe362,cwe1265,cwe123 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a flawed logic in handling \"Stopped - Length Invalid\" events in the USB XHCI driver. This leads to premature skipping of pending TDs and giving them back before completion, ultimately resulting in a **UAF**.\n\n## Summary of Analysis\nThe analysis strongly points to **CWE-416 (Use After Free)** as the primary weakness. The vulnerability description explicitly mentions the risk of **UAF** by HW.\n\nThe evidence is from the \"Vulnerability Description Key Phrases\" section:\n*   **weakness:** **UAF**\n\nThe retriever results also prioritize **CWE-416 (Use After Free)** with a score of 1.0.\n\nOther CWEs were considered but ultimately deemed less relevant:\n\n*   **CWE-789 (Memory Allocation with Excessive Size Value)** and **CWE-1284 (Improper Validation of Specified Quantity in Input)**: While memory management is involved, the core issue isn't excessive allocation or improper validation of input size but rather the incorrect handling of events leading to a **UAF**.\n*   **CWE-362 (Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'))**: Concurrency might play a role in the timing of the **UAF**, but it's not the primary cause.\n*   **CWE-754 (Improper Check for Unusual or Exceptional Conditions)**: This is a higher-level class that is less specific than **CWE-416 (Use After Free)**.\n\nThe selection of **CWE-416 (Use After Free)** at the Variant level is optimal because it precisely describes the vulnerability, which is triggered by a specific sequence of events related to USB XHCI driver's handling of stopped isochronous transfers.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-123:**\n- 123 (Write-what-where Condition) - ROOT\n\n\n**Chain starting from CWE-1284:**\n- 1284 (Improper Validation of Specified Quantity in Input) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "416",
        "name": "Use After Free",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: UAF",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "1284",
        "name": "Improper Validation of Specified Quantity in Input",
        "source": "sparse"
      },
      "similarity": 1423.9127770478499
    },
    {
      "metadata": {
        "doc_id": "789",
        "name": "Memory Allocation with Excessive Size Value",
        "source": "sparse"
      },
      "similarity": 1409.1929988809482
    },
    {
      "metadata": {
        "doc_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "source": "sparse"
      },
      "similarity": 1391.7505463100886
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 1365.62783664737
    },
    {
      "metadata": {
        "doc_id": "1333",
        "name": "Inefficient Regular Expression Complexity",
        "source": "sparse"
      },
      "similarity": 1357.6272617373
    },
    {
      "metadata": {
        "doc_id": "754",
        "name": "Improper Check for Unusual or Exceptional Conditions",
        "source": "sparse"
      },
      "similarity": 1355.347473479807
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 1338.570422475883
    },
    {
      "metadata": {
        "doc_id": "1332",
        "name": "Improper Handling of Faults that Lead to Instruction Skips",
        "type": "Base",
        "original_content": "The device is missing or incorrectly implements circuitry or sensors that detect and mitigate the skipping of security-critical CPU instructions when they occur.",
        "keyphrase_source": "weakness:UAF",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.5351414552313589
          }
        }
      },
      "similarity": 0.5351414552313589
    },
    {
      "doc_id": "130",
      "text": "The product parses a formatted message or structure, but it does not handle or incorrectly handles a length field that is inconsistent with the actual length of the associated data.",
      "score": 0.5639945679690664,
      "metadata": {
        "doc_id": "130",
        "name": "Improper Handling of Length Parameter Inconsistency",
        "type": "Base",
        "extended_description": "If an attacker can manipulate the length parameter associated with an input such that it is inconsistent with the actual length of the input, this can be leveraged to cause the target application to behave in unexpected, and possibly, malicious ways. One of the possible motives for doing so is to pass in arbitrarily large input to the application. Another possible motivation is the modification of application state by including invalid data for subsequent properties of the application. Such weaknesses commonly lead to attacks such as buffer overflows and execution of arbitrary code.",
        "alternate_terms": [
          "length manipulation",
          "length tampering"
        ],
        "original_content": "The product parses a formatted message or structure, but it does not handle or incorrectly handles a length field that is inconsistent with the actual length of the associated data.",
        "relationships": [
          {
            "source_id": "130",
            "target_id": "805",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "130",
            "target_id": "119",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1340"
            }
          },
          {
            "source_id": "130",
            "target_id": "119",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1305"
            }
          },
          {
            "source_id": "130",
            "target_id": "240",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "805",
            "target_id": "130",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "240",
            "target_id": "130",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "119",
            "target_id": "130",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1305"
            }
          }
        ],
        "source": "graph",
        "sources": [
          "vector",
          "graph"
        ],
        "vector_score": 0.5639945679690664,
        "graph_score": 4.329000000000001,
        "score_components": {
          "relationship_chain": 1.0,
          "explicit_mention": 1.0,
          "abstraction_path": 0.9,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "805",
                  "130",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "805"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "805",
                  "130",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "805"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "130",
                  "805",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "805"
            }
          }
        },
        "is_explicit": true,
        "abstraction_level": "base",
        "position": "before",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5175969363473831,
            "graph": 2.822997827187627
          }
        }
      },
      "similarity": 2.822997827187627
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-123",
      "CWE-1284",
      "CWE-416",
      "CWE-1265",
      "CWE-364",
      "CWE-362",
      "CWE-789",
      "CWE-754"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}