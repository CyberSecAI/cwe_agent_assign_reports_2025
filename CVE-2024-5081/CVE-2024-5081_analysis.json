{
  "cve_id": "CVE-2024-5081",
  "description": "The wp-eMember WordPress plugin before v10.7.0 **does not have CSRF check** in some places, and is missing sanitisation as well as escaping, which could allow attackers to make logged in admin add Stored **XSS** payloads via a CSRF attack",
  "key_phrases": {
    "rootcause": [
      "does not have CSRF check",
      "lack of CSRF check",
      "missing sanitisation and escaping"
    ],
    "weakness": [
      "XSS",
      "cross-site scripting"
    ],
    "impact": "Stored XSS payloads",
    "vector": "",
    "attacker": "attackers",
    "product": "wp-eMember WordPress plugin",
    "version": "before v10.7.0",
    "component": ""
  },
  "reference_content": "- **Root cause of vulnerability:** The WP eMember plugin lacks CSRF (Cross-Site Request Forgery) protection in certain areas and fails to sanitize and escape user inputs. This allows an attacker to inject malicious scripts.\n- **Weaknesses/vulnerabilities present:**\n    - **Stored XSS:** The plugin is vulnerable to stored Cross-Site Scripting (XSS) due to the lack of sanitization and escaping.\n    - **CSRF:** The absence of CSRF protection allows attackers to manipulate logged-in administrators.\n- **Impact of exploitation:** An attacker can execute arbitrary JavaScript code in the context of the victim's browser, which can lead to:\n    - Account takeover\n    - Data theft\n    - Defacement\n    - Other malicious activities\n- **Attack vectors:**\n    - The attacker crafts a malicious HTML page containing a form that submits a crafted payload to the vulnerable plugin settings page.\n    - The attacker tricks a logged-in administrator into opening the HTML page, triggering the form submission.\n- **Required attacker capabilities/position:**\n    - The attacker needs to be able to craft HTML.\n    - The attacker needs to trick a logged-in administrator of the WordPress site to open a malicious HTML page.\n    - The attacker does not need to be authenticated to the wordpress site.",
  "similar_info": {
    "cwe_distribution": {
      "95": {
        "cwe_counts": {},
        "total_samples": 2,
        "distribution": [
          {
            "cwes": [],
            "frequency": 2,
            "proportion": 1.0
          }
        ]
      },
      "90": {
        "cwe_counts": {
          "CWE-352": 2
        },
        "total_samples": 5,
        "distribution": [
          {
            "cwes": [],
            "frequency": 3,
            "proportion": 0.6
          },
          {
            "cwes": [
              "CWE-352"
            ],
            "frequency": 2,
            "proportion": 0.4
          }
        ]
      },
      "85": {
        "cwe_counts": {
          "CWE-352": 2
        },
        "total_samples": 6,
        "distribution": [
          {
            "cwes": [],
            "frequency": 4,
            "proportion": 0.667
          },
          {
            "cwes": [
              "CWE-352"
            ],
            "frequency": 2,
            "proportion": 0.333
          }
        ]
      },
      "80": {
        "cwe_counts": {
          "CWE-352": 2
        },
        "total_samples": 6,
        "distribution": [
          {
            "cwes": [],
            "frequency": 4,
            "proportion": 0.667
          },
          {
            "cwes": [
              "CWE-352"
            ],
            "frequency": 2,
            "proportion": 0.333
          }
        ]
      },
      "75": {
        "cwe_counts": {
          "CWE-352": 3
        },
        "total_samples": 7,
        "distribution": [
          {
            "cwes": [],
            "frequency": 4,
            "proportion": 0.571
          },
          {
            "cwes": [
              "CWE-352"
            ],
            "frequency": 3,
            "proportion": 0.429
          }
        ]
      },
      "70": {
        "cwe_counts": {
          "CWE-352": 2
        },
        "total_samples": 6,
        "distribution": [
          {
            "cwes": [],
            "frequency": 4,
            "proportion": 0.667
          },
          {
            "cwes": [
              "CWE-352"
            ],
            "frequency": 2,
            "proportion": 0.333
          }
        ]
      }
    },
    "cwe_consensus": "CWE-352",
    "similarity_stats": {
      "thresholds": [
        95,
        90,
        85,
        80,
        75,
        70
      ],
      "total_samples_by_threshold": {
        "95": 2,
        "90": 5,
        "85": 6,
        "80": 6,
        "75": 7,
        "70": 6
      },
      "top_cwes_by_threshold": {
        "95": [],
        "90": [
          [
            "CWE-352",
            2
          ]
        ],
        "85": [
          [
            "CWE-352",
            2
          ]
        ],
        "80": [
          [
            "CWE-352",
            2
          ]
        ],
        "75": [
          [
            "CWE-352",
            3
          ]
        ],
        "70": [
          [
            "CWE-352",
            2
          ]
        ]
      }
    },
    "raw_matches": [
      {
        "similarity": 95,
        "cwes": [],
        "total": 2,
        "frequency": 2,
        "proportion": 1.0
      },
      {
        "similarity": 90,
        "cwes": [],
        "total": 5,
        "frequency": 3,
        "proportion": 0.6
      },
      {
        "similarity": 90,
        "cwes": [
          "352"
        ],
        "total": 5,
        "frequency": 2,
        "proportion": 0.4
      },
      {
        "similarity": 85,
        "cwes": [],
        "total": 6,
        "frequency": 4,
        "proportion": 0.667
      },
      {
        "similarity": 85,
        "cwes": [
          "352"
        ],
        "total": 6,
        "frequency": 2,
        "proportion": 0.333
      },
      {
        "similarity": 80,
        "cwes": [],
        "total": 6,
        "frequency": 4,
        "proportion": 0.667
      },
      {
        "similarity": 80,
        "cwes": [
          "352"
        ],
        "total": 6,
        "frequency": 2,
        "proportion": 0.333
      },
      {
        "similarity": 75,
        "cwes": [],
        "total": 7,
        "frequency": 4,
        "proportion": 0.571
      },
      {
        "similarity": 75,
        "cwes": [
          "352"
        ],
        "total": 7,
        "frequency": 3,
        "proportion": 0.429
      },
      {
        "similarity": 70,
        "cwes": [],
        "total": 6,
        "frequency": 4,
        "proportion": 0.667
      },
      {
        "similarity": 70,
        "cwes": [
          "352"
        ],
        "total": 6,
        "frequency": 2,
        "proportion": 0.333
      }
    ]
  },
  "similarity_summary": {
    "consensus_cwe": "CWE-352",
    "top_cwes": [
      [
        "CWE-352",
        11
      ]
    ],
    "confidence_levels": {
      "high": [],
      "medium": [],
      "low": []
    },
    "total_samples": 32
  },
  "analysis": "# Summary\n| CWE ID    | CWE Name                                                                      | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :---------- | :---------------------------------------------------------------------------- | :--------- | :---------------------- | :------------------------------ | :------------------------------ |\n| CWE-352     | Cross-Site Request Forgery (CSRF)                                           | 0.9        | Compound                | Primary CWE                     | Allowed                         |\n| CWE-79      | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 0.9        | Base                    | Secondary Candidate             | Allowed                         |\n| CWE-116     | Improper Encoding or Escaping of Output                                       | 0.7        | Class                   | Secondary Candidate             | Allowed-with-Review             |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is the **missing CSRF check**, which directly leads to the possibility of Cross-Site Request Forgery (CSRF) attacks. The secondary weakness is **missing sanitisation and escaping**, which leads to Cross-Site Scripting (XSS). The relationship between CWE-352 and CWE-79 is that the lack of CSRF protection allows attackers to inject malicious scripts, which are then executed due to the **lack of proper sanitization and escaping**. CWE-116 is a more general class that could encompass the specific sanitization/escaping issues that lead to XSS, but CWE-79 is more specific and therefore more appropriate.\n\n```mermaid\ngraph TD\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    cwe116[\"CWE-116: Improper Encoding or Escaping of Output\"]\n\n    cwe79 -->|PEEROF| cwe116\n    cwe79 -- CANFOLLOW --> cwe352\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe352 primary\n    class cwe79,cwe116 secondary\n```\n\n## Vulnerability Chain\n1.  **Missing CSRF Check (CWE-352):** The application **does not have CSRF check**, allowing unauthorized requests.\n2.  **Missing Sanitisation and Escaping:** Input is not properly sanitized or escaped, which allows injection of malicious code.\n3.  **Stored XSS (CWE-79):** Attackers inject **XSS** payloads due to the **missing sanitisation and escaping**, leading to stored XSS.\n\n## Summary of Analysis\nThe primary root cause is the **lack of CSRF protection**, which enables attackers to perform actions on behalf of logged-in users. The secondary weakness is the **missing sanitisation and escaping**, which allows for the injection of **XSS** payloads.\n\nThe vulnerability description explicitly states that the plugin **does not have CSRF check** and is **missing sanitisation as well as escaping**, allowing attackers to inject **Stored XSS payloads**. This directly supports the mapping to CWE-352 and CWE-79.\n\nCWE-352 is chosen as the primary CWE because the **lack of CSRF protection** is the initial flaw that allows the attack to occur. CWE-79 is a consequence of **missing sanitisation and escaping**, enabling the **Stored XSS**.\n\nCWE-116 was considered but not selected as the primary CWE because it is a more general class. The vulnerability description provides specific details about **missing sanitisation and escaping** leading to **XSS**, making CWE-79 a more precise and relevant classification.\n\nRelevant CWE Information:\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-352: Cross-Site Request Forgery (CSRF)\n**Abstraction Level**: Compound\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This is a well-known Composite of multiple weaknesses that must all occur simultaneously, although it is attack-oriented in nature.\n\n## CWE-425: Direct Request ('Forced Browsing')\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\n**Abstraction Level**: Variant\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as \"<\", \">\", and \"&\" that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-472: External Control of Assumed-Immutable Web Parameter\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-434: Unrestricted Upload of File with Dangerous Type\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product allows the upload or transfer of dangerous file types that are automatically processed within its environment.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n## CWE-178: Improper Handling of Case Sensitivity\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product does not properly account for differences in case sensitivity when accessing or determining the properties of a resource, leading to inconsistent results.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-184: Incomplete List of Disallowed Inputs\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-807: Reliance on Untrusted Inputs in a Security Decision\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product uses a protection mechanism that relies on the existence or values of an input, but the input can be modified by an untrusted actor in a way that bypasses the protection",
  "analysis_with_relationships": "# Summary\n| CWE ID    | CWE Name                                                                      | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :---------- | :---------------------------------------------------------------------------- | :--------- | :---------------------- | :------------------------------ | :------------------------------ |\n| CWE-352     | Cross-Site Request Forgery (CSRF)                                           | 0.9        | Compound                | Primary CWE                     | Allowed                         |\n| CWE-79      | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 0.9        | Base                    | Secondary Candidate             | Allowed                         |\n| CWE-116     | Improper Encoding or Escaping of Output                                       | 0.7        | Class                   | Secondary Candidate             | Allowed-with-Review             |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is the **missing CSRF check**, which directly leads to the possibility of Cross-Site Request Forgery (CSRF) attacks. The secondary weakness is **missing sanitisation and escaping**, which leads to Cross-Site Scripting (XSS). The relationship between CWE-352 and CWE-79 is that the lack of CSRF protection allows attackers to inject malicious scripts, which are then executed due to the **lack of proper sanitization and escaping**. CWE-116 is a more general class that could encompass the specific sanitization/escaping issues that lead to XSS, but CWE-79 is more specific and therefore more appropriate.\n\n```mermaid\ngraph TD\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    cwe116[\"CWE-116: Improper Encoding or Escaping of Output\"]\n\n    cwe79 -->|PEEROF| cwe116\n    cwe79 -- CANFOLLOW --> cwe352\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe352 primary\n    class cwe79,cwe116 secondary\n```\n\n## Vulnerability Chain\n1.  **Missing CSRF Check (CWE-352):** The application **does not have CSRF check**, allowing unauthorized requests.\n2.  **Missing Sanitisation and Escaping:** Input is not properly sanitized or escaped, which allows injection of malicious code.\n3.  **Stored XSS (CWE-79):** Attackers inject **XSS** payloads due to the **missing sanitisation and escaping**, leading to stored XSS.\n\n## Summary of Analysis\nThe primary root cause is the **lack of CSRF protection**, which enables attackers to perform actions on behalf of logged-in users. The secondary weakness is the **missing sanitisation and escaping**, which allows for the injection of **XSS** payloads.\n\nThe vulnerability description explicitly states that the plugin **does not have CSRF check** and is **missing sanitisation as well as escaping**, allowing attackers to inject **Stored XSS payloads**. This directly supports the mapping to CWE-352 and CWE-79.\n\nCWE-352 is chosen as the primary CWE because the **lack of CSRF protection** is the initial flaw that allows the attack to occur. CWE-79 is a consequence of **missing sanitisation and escaping**, enabling the **Stored XSS**.\n\nCWE-116 was considered but not selected as the primary CWE because it is a more general class. The vulnerability description provides specific details about **missing sanitisation and escaping** leading to **XSS**, making CWE-79 a more precise and relevant classification.\n\nRelevant CWE Information:\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-352: Cross-Site Request Forgery (CSRF)\n**Abstraction Level**: Compound\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This is a well-known Composite of multiple weaknesses that must all occur simultaneously, although it is attack-oriented in nature.\n\n## CWE-425: Direct Request ('Forced Browsing')\n**Abstraction Level**: Base\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\n**Abstraction Level**: Variant\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as \"<\", \">\", and \"&\" that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-472: External Control of Assumed-Immutable Web Parameter\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-434: Unrestricted Upload of File with Dangerous Type\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product allows the upload or transfer of dangerous file types that are automatically processed within its environment.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-116: Improper Encoding or Escaping of Output\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: CWE-74 is high-level and often misused when lower-level weaknesses are more appropriate.\n\n## CWE-178: Improper Handling of Case Sensitivity\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product does not properly account for differences in case sensitivity when accessing or determining the properties of a resource, leading to inconsistent results.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-184: Incomplete List of Disallowed Inputs\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-807: Reliance on Untrusted Inputs in a Security Decision\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product uses a protection mechanism that relies on the existence or values of an input, but the input can be modified by an untrusted actor in a way that bypasses the protection\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-116:**\n- 116 (Improper Encoding or Escaping of Output) - ROOT\n\n\n**Chain starting from CWE-80:**\n- 80 (Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse",
        "original_content": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
        "keyphrase_sources": [
          {
            "id": "rootcause:does not have CSRF check",
            "keyphrase": "does not have CSRF check",
            "type": "rootcause"
          },
          {
            "id": "rootcause:lack of CSRF check",
            "keyphrase": "lack of CSRF check",
            "type": "rootcause"
          },
          {
            "id": "rootcause:missing sanitisation and escaping",
            "keyphrase": "missing sanitisation and escaping",
            "type": "rootcause"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "impact:Stored XSS payloads",
            "keyphrase": "Stored XSS payloads",
            "type": "impact"
          },
          {
            "id": "attacker:attackers",
            "keyphrase": "attackers",
            "type": "attacker"
          },
          {
            "id": "product:wp-eMember WordPress plugin",
            "keyphrase": "wp-eMember WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:before v10.7.0",
            "keyphrase": "before v10.7.0",
            "type": "version"
          }
        ]
      },
      "similarity": 543.1830552713783
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse",
        "original_content": "The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.",
        "keyphrase_sources": [
          {
            "id": "rootcause:does not have CSRF check",
            "keyphrase": "does not have CSRF check",
            "type": "rootcause"
          },
          {
            "id": "rootcause:lack of CSRF check",
            "keyphrase": "lack of CSRF check",
            "type": "rootcause"
          },
          {
            "id": "rootcause:missing sanitisation and escaping",
            "keyphrase": "missing sanitisation and escaping",
            "type": "rootcause"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "impact:Stored XSS payloads",
            "keyphrase": "Stored XSS payloads",
            "type": "impact"
          },
          {
            "id": "attacker:attackers",
            "keyphrase": "attackers",
            "type": "attacker"
          },
          {
            "id": "product:wp-eMember WordPress plugin",
            "keyphrase": "wp-eMember WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:before v10.7.0",
            "keyphrase": "before v10.7.0",
            "type": "version"
          }
        ]
      },
      "similarity": 397.50162341878115
    },
    {
      "metadata": {
        "doc_id": "862",
        "name": "Missing Authorization",
        "source": "sparse",
        "original_content": "The product does not perform an authorization check when an actor attempts to access a resource or perform an action.",
        "keyphrase_sources": [
          {
            "id": "rootcause:does not have CSRF check",
            "keyphrase": "does not have CSRF check",
            "type": "rootcause"
          },
          {
            "id": "rootcause:lack of CSRF check",
            "keyphrase": "lack of CSRF check",
            "type": "rootcause"
          },
          {
            "id": "rootcause:missing sanitisation and escaping",
            "keyphrase": "missing sanitisation and escaping",
            "type": "rootcause"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "impact:Stored XSS payloads",
            "keyphrase": "Stored XSS payloads",
            "type": "impact"
          },
          {
            "id": "attacker:attackers",
            "keyphrase": "attackers",
            "type": "attacker"
          },
          {
            "id": "product:wp-eMember WordPress plugin",
            "keyphrase": "wp-eMember WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:before v10.7.0",
            "keyphrase": "before v10.7.0",
            "type": "version"
          }
        ]
      },
      "similarity": 392.24272163015
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "source": "sparse",
        "original_content": "The product allows the upload or transfer of dangerous file types that are automatically processed within its environment.",
        "keyphrase_sources": [
          {
            "id": "rootcause:does not have CSRF check",
            "keyphrase": "does not have CSRF check",
            "type": "rootcause"
          },
          {
            "id": "rootcause:lack of CSRF check",
            "keyphrase": "lack of CSRF check",
            "type": "rootcause"
          },
          {
            "id": "rootcause:missing sanitisation and escaping",
            "keyphrase": "missing sanitisation and escaping",
            "type": "rootcause"
          },
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "impact:Stored XSS payloads",
            "keyphrase": "Stored XSS payloads",
            "type": "impact"
          },
          {
            "id": "attacker:attackers",
            "keyphrase": "attackers",
            "type": "attacker"
          },
          {
            "id": "product:wp-eMember WordPress plugin",
            "keyphrase": "wp-eMember WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:before v10.7.0",
            "keyphrase": "before v10.7.0",
            "type": "version"
          }
        ]
      },
      "similarity": 359.939401076878
    },
    {
      "metadata": {
        "doc_id": "425",
        "name": "Direct Request ('Forced Browsing')",
        "source": "sparse",
        "original_content": "The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.",
        "keyphrase_sources": [
          {
            "id": "rootcause:does not have CSRF check",
            "keyphrase": "does not have CSRF check",
            "type": "rootcause"
          },
          {
            "id": "rootcause:lack of CSRF check",
            "keyphrase": "lack of CSRF check",
            "type": "rootcause"
          },
          {
            "id": "attacker:attackers",
            "keyphrase": "attackers",
            "type": "attacker"
          },
          {
            "id": "product:wp-eMember WordPress plugin",
            "keyphrase": "wp-eMember WordPress plugin",
            "type": "product"
          },
          {
            "id": "version:before v10.7.0",
            "keyphrase": "before v10.7.0",
            "type": "version"
          }
        ]
      },
      "similarity": 305.9979270375668
    },
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "sparse",
        "original_content": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
        "keyphrase_sources": [
          {
            "id": "rootcause:missing sanitisation and escaping",
            "keyphrase": "missing sanitisation and escaping",
            "type": "rootcause"
          }
        ]
      },
      "similarity": 284.3291846220659
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse",
        "original_content": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
        "keyphrase_sources": [
          {
            "id": "weakness:XSS",
            "keyphrase": "XSS",
            "type": "weakness"
          },
          {
            "id": "weakness:cross-site scripting",
            "keyphrase": "cross-site scripting",
            "type": "weakness"
          },
          {
            "id": "impact:Stored XSS payloads",
            "keyphrase": "Stored XSS payloads",
            "type": "impact"
          }
        ]
      },
      "similarity": 249.37495657237704
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-116",
      "CWE-80",
      "CWE-79",
      "CWE-472",
      "CWE-352",
      "CWE-178",
      "CWE-74",
      "CWE-184",
      "CWE-807",
      "CWE-425",
      "CWE-434"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {
    "352": [
      {
        "id": "rootcause:does not have CSRF check",
        "keyphrase": "does not have CSRF check",
        "type": "rootcause"
      },
      {
        "id": "rootcause:lack of CSRF check",
        "keyphrase": "lack of CSRF check",
        "type": "rootcause"
      },
      {
        "id": "rootcause:missing sanitisation and escaping",
        "keyphrase": "missing sanitisation and escaping",
        "type": "rootcause"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "impact:Stored XSS payloads",
        "keyphrase": "Stored XSS payloads",
        "type": "impact"
      },
      {
        "id": "attacker:attackers",
        "keyphrase": "attackers",
        "type": "attacker"
      },
      {
        "id": "product:wp-eMember WordPress plugin",
        "keyphrase": "wp-eMember WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:before v10.7.0",
        "keyphrase": "before v10.7.0",
        "type": "version"
      }
    ],
    "116": [
      {
        "id": "rootcause:does not have CSRF check",
        "keyphrase": "does not have CSRF check",
        "type": "rootcause"
      },
      {
        "id": "rootcause:lack of CSRF check",
        "keyphrase": "lack of CSRF check",
        "type": "rootcause"
      },
      {
        "id": "rootcause:missing sanitisation and escaping",
        "keyphrase": "missing sanitisation and escaping",
        "type": "rootcause"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "impact:Stored XSS payloads",
        "keyphrase": "Stored XSS payloads",
        "type": "impact"
      },
      {
        "id": "attacker:attackers",
        "keyphrase": "attackers",
        "type": "attacker"
      },
      {
        "id": "product:wp-eMember WordPress plugin",
        "keyphrase": "wp-eMember WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:before v10.7.0",
        "keyphrase": "before v10.7.0",
        "type": "version"
      }
    ],
    "862": [
      {
        "id": "rootcause:does not have CSRF check",
        "keyphrase": "does not have CSRF check",
        "type": "rootcause"
      },
      {
        "id": "rootcause:lack of CSRF check",
        "keyphrase": "lack of CSRF check",
        "type": "rootcause"
      },
      {
        "id": "rootcause:missing sanitisation and escaping",
        "keyphrase": "missing sanitisation and escaping",
        "type": "rootcause"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "impact:Stored XSS payloads",
        "keyphrase": "Stored XSS payloads",
        "type": "impact"
      },
      {
        "id": "attacker:attackers",
        "keyphrase": "attackers",
        "type": "attacker"
      },
      {
        "id": "product:wp-eMember WordPress plugin",
        "keyphrase": "wp-eMember WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:before v10.7.0",
        "keyphrase": "before v10.7.0",
        "type": "version"
      }
    ],
    "434": [
      {
        "id": "rootcause:does not have CSRF check",
        "keyphrase": "does not have CSRF check",
        "type": "rootcause"
      },
      {
        "id": "rootcause:lack of CSRF check",
        "keyphrase": "lack of CSRF check",
        "type": "rootcause"
      },
      {
        "id": "rootcause:missing sanitisation and escaping",
        "keyphrase": "missing sanitisation and escaping",
        "type": "rootcause"
      },
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "impact:Stored XSS payloads",
        "keyphrase": "Stored XSS payloads",
        "type": "impact"
      },
      {
        "id": "attacker:attackers",
        "keyphrase": "attackers",
        "type": "attacker"
      },
      {
        "id": "product:wp-eMember WordPress plugin",
        "keyphrase": "wp-eMember WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:before v10.7.0",
        "keyphrase": "before v10.7.0",
        "type": "version"
      }
    ],
    "425": [
      {
        "id": "rootcause:does not have CSRF check",
        "keyphrase": "does not have CSRF check",
        "type": "rootcause"
      },
      {
        "id": "rootcause:lack of CSRF check",
        "keyphrase": "lack of CSRF check",
        "type": "rootcause"
      },
      {
        "id": "attacker:attackers",
        "keyphrase": "attackers",
        "type": "attacker"
      },
      {
        "id": "product:wp-eMember WordPress plugin",
        "keyphrase": "wp-eMember WordPress plugin",
        "type": "product"
      },
      {
        "id": "version:before v10.7.0",
        "keyphrase": "before v10.7.0",
        "type": "version"
      }
    ],
    "89": [
      {
        "id": "rootcause:missing sanitisation and escaping",
        "keyphrase": "missing sanitisation and escaping",
        "type": "rootcause"
      }
    ],
    "79": [
      {
        "id": "weakness:XSS",
        "keyphrase": "XSS",
        "type": "weakness"
      },
      {
        "id": "weakness:cross-site scripting",
        "keyphrase": "cross-site scripting",
        "type": "weakness"
      },
      {
        "id": "impact:Stored XSS payloads",
        "keyphrase": "Stored XSS payloads",
        "type": "impact"
      }
    ]
  }
}