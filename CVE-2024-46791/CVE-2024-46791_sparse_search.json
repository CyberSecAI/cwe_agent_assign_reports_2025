{
  "retriever": "sparse",
  "query": "In the Linux kernel, the following vulnerability has been resolved can mcp251x fix deadlock if an interrupt occurs during mcp251x_open The mcp251x_hw_wake() function is called with the mpc_lock mutex held and disables the interrupt handler so that no interrupts can be processed while waking the device. If an interrupt has already occurred then waiting for the interrupt handler to complete will deadlock because it will be trying to acquire the same mutex. CPU0 CPU1 ---- ---- mcp251x_open() mutex_lock(&priv->mcp_lock) request_threaded_irq() mcp251x_can_ist() mutex_lock(&priv->mcp_lock) mcp251x_hw_wake() disable_irq() <-- deadlock Use disable_irq_nosync() instead because the interrupt handler does everything while holding the mutex so it doesnt matter if its still running.",
  "keyphrases": {
    "rootcause": [
      "improper use of disable_irq() function"
    ],
    "weakness": [
      "deadlock"
    ]
  },
  "timestamp": "2025-07-13 17:37:59",
  "cve_id": "CVE-2024-46791",
  "result_count": 11,
  "results": [
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "score": 564.71277972994,
      "search_source": "rootcause:improper use of disable_irq() function"
    },
    {
      "cwe_id": "833",
      "name": "Deadlock",
      "score": 529.8188709917852,
      "search_source": "rootcause:improper use of disable_irq() function"
    },
    {
      "cwe_id": "364",
      "name": "Signal Handler Race Condition",
      "score": 527.637387161212,
      "search_source": "rootcause:improper use of disable_irq() function"
    },
    {
      "cwe_id": "828",
      "name": "Signal Handler with Functionality that is not Asynchronous-Safe",
      "score": 502.90019304983525,
      "search_source": "rootcause:improper use of disable_irq() function"
    },
    {
      "cwe_id": "831",
      "name": "Signal Handler Function Associated with Multiple Signals",
      "score": 486.2481005857369,
      "search_source": "rootcause:improper use of disable_irq() function"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 461.62465710601964,
      "search_source": "rootcause:improper use of disable_irq() function"
    },
    {
      "cwe_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "score": 460.28848280340867,
      "search_source": "rootcause:improper use of disable_irq() function"
    },
    {
      "cwe_id": "459",
      "name": "Incomplete Cleanup",
      "score": 446.70104433201476,
      "search_source": "rootcause:improper use of disable_irq() function"
    },
    {
      "cwe_id": "346",
      "name": "Origin Validation Error",
      "score": 426.6233581331773,
      "search_source": "rootcause:improper use of disable_irq() function"
    },
    {
      "cwe_id": "79",
      "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
      "score": 424.6328267019992,
      "search_source": "rootcause:improper use of disable_irq() function"
    },
    {
      "cwe_id": "1233",
      "name": "Security-Sensitive Hardware Controls with Missing Lock Bit Protection",
      "score": 384.2895171246631,
      "search_source": "weakness:deadlock"
    }
  ]
}