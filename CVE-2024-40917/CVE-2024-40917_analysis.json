{
  "cve_id": "CVE-2024-40917",
  "description": "In the Linux kernel, the following vulnerability has been resolved memblock make memblock_set_node() also warn about use of MAX_NUMNODES On an (old) x86 system with SRAT just covering space above 4Gb ACPI SRAT Node 0 PXM 0 [mem 0x100000000-0xfffffffff] hotplug the commit referenced below leads to this NUMA configuration no longer being refused by a CONFIG_NUMA=y kernel (previously NUMA nodes only cover 6144MB of your 8185MB e820 RAM. Not used. No NUMA configuration found Faking a node at [mem 0x0000000000000000-0x000000027fffffff] was seen in the log directly after the message quoted above), because of memblock_validate_numa_coverage() checking for NUMA_NO_NODE (only). This in turn led to memblock_alloc_range_nid()s warning about MAX_NUMNODES triggering, followed by a NULL deref in memmap_init() when trying to access node 64s (NODE_SHIFT=6) node data. To compensate said change, make memblock_set_node() warn on and adjust a passed in value of MAX_NUMNODES, just like various other functions already do.",
  "key_phrases": {
    "rootcause": "faking a node at [mem 0x0000000000000000-0x000000027fffffff] was seen",
    "weakness": "",
    "impact": "NULL dereference",
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": "memblock_set_node()"
  },
  "reference_content": "Based on the provided information, here's an analysis of the vulnerability:\n\n**Root Cause:**\nThe vulnerability arises from a flaw in how the Linux kernel handles NUMA (Non-Uniform Memory Access) configurations on x86 systems with SRAT (System Resource Affinity Table) configurations. Specifically, a recent change (commit ff6c3d81f2e8) optimized NUMA memory detection. This change caused the `memblock_validate_numa_coverage()` to only check for `NUMA_NO_NODE`. In cases where SRAT only covers memory above 4GB, the previous mechanism to refuse this configuration no longer happens, resulting in `memblock_alloc_range_nid()` warning about `MAX_NUMNODES`. Subsequently, this leads to a NULL pointer dereference in `memmap_init()` when it attempts to access node data for the node that has id `MAX_NUMNODES`, which is beyond the valid node ids.\n\n**Weaknesses/Vulnerabilities:**\n-   **Incorrect NUMA node assignment:** The kernel incorrectly interprets the NUMA configuration when SRAT only describes memory regions above 4GB. It proceeds with a configuration using a node ID equal to `MAX_NUMNODES` which is not valid.\n-   **Lack of proper bounds checking:** There is insufficient validation in `memblock_set_node` when a node id equals `MAX_NUMNODES` is used.\n-   **NULL Pointer Dereference:** The vulnerability leads to a NULL pointer dereference when `memmap_init()` tries to access the memory map for the invalid node.\n\n**Impact of Exploitation:**\n-   **Kernel crash:** The NULL pointer dereference in `memmap_init()` results in a kernel crash, leading to a denial of service (DoS).\n\n**Attack Vectors:**\n-   **System configuration:** The vulnerability is triggered by a specific system configuration: an older x86 system with an SRAT that only covers memory above 4GB.\n\n**Required Attacker Capabilities/Position:**\n-   **No direct attacker action is needed**. The vulnerability is triggered by the system's configuration, and arises during the kernel's initialization process.\n\n**Additional Notes:**\n- The provided patches address the vulnerability by making `memblock_set_node()` issue a warning and adjust the passed-in `MAX_NUMNODES` value to `NUMA_NO_NODE`, thus preventing the use of the invalid node id.\n- The fix aims to prevent the crash and maintain compatibility with the optimized NUMA memory detection logic.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-476 | NULL Pointer Dereference | 1.0 | Base | Primary | Allowed |\n| CWE-909 | Missing Initialization of Resource | 0.7 | Class | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-476 **(NULL Pointer Dereference)**, which directly results from the kernel attempting to access node data for an invalid node ID (`MAX_NUMNODES`). CWE-909 **(Missing Initialization of Resource)** is a potential contributing factor, as the failure to properly initialize the memory management structures could lead to the condition where an invalid node ID is used. While several other CWEs were considered, these two provide the most accurate and specific representation of the vulnerability based on the provided description and context.\n\n```mermaid\ngraph TD\n    cwe476[\"CWE-476: NULL Pointer Dereference\"]\n    cwe909[\"CWE-909: Missing Initialization of Resource\"]\n    cwe754[\"CWE-754: Improper Check for Unusual or Exceptional Conditions\"]\n    cwe665[\"CWE-665: Improper Initialization\"]\n\n    cwe476 -->|CHILDOF| cwe754\n    cwe909 -->|CHILDOF| cwe665\n    cwe909 -->|CANPRECEDE| cwe476\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe476 primary\n    class cwe909 secondary\n    class cwe754,cwe665 tertiary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with an **incorrect NUMA node assignment**, potentially due to **Missing Initialization of Resource (CWE-909)**. The kernel then attempts to access the memory map for the invalid node, leading to **NULL Pointer Dereference (CWE-476)**, which ultimately causes a kernel crash and denial of service.\n\n## Summary of Analysis\nThe analysis indicates a high confidence in mapping the vulnerability to **CWE-476 (NULL Pointer Dereference)** as the primary weakness. The vulnerability description explicitly mentions a NULL dereference in `memmap_init()` when accessing node data for node 64. This aligns perfectly with the definition of CWE-476. The evidence supporting this is: \"This in turn led to memblock_alloc_range_nid()s warning about MAX_NUMNODES triggering, followed by a **NULL deref** in memmap_init() when trying to access node 64s (NODE_SHIFT=6) node data.\"\n\nAdditionally, the analysis considers **CWE-909 (Missing Initialization of Resource)** as a secondary weakness. The root cause involves the kernel not correctly interpreting the NUMA configuration. Specifically, \"**faking a node** at [mem 0x0000000000000000-0x000000027fffffff] was seen\", implying a possible failure in proper resource initialization which leads to the out-of-bounds access.\n\nOther CWEs were considered but deemed less relevant. For example, CWE-252 (Unchecked Return Value) might seem relevant because the kernel might not be checking return values from memory allocation functions, but the primary issue is the access of an invalid memory location, not the failure to check a return value.\n\nThe selected CWEs are at the optimal level of specificity. **CWE-476** is a Base-level CWE and directly describes the observed vulnerability. **CWE-909** is a Class-level CWE and describes a possible underlying cause for the vulnerability. Selecting more general CWEs like CWE-754 (Improper Check for Unusual or Exceptional Conditions) or CWE-665 (Improper Initialization) would not be as precise or informative.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-476 | NULL Pointer Dereference | 1.0 | Base | Primary | Allowed |\n| CWE-909 | Missing Initialization of Resource | 0.7 | Class | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-476 **(NULL Pointer Dereference)**, which directly results from the kernel attempting to access node data for an invalid node ID (`MAX_NUMNODES`). CWE-909 **(Missing Initialization of Resource)** is a potential contributing factor, as the failure to properly initialize the memory management structures could lead to the condition where an invalid node ID is used. While several other CWEs were considered, these two provide the most accurate and specific representation of the vulnerability based on the provided description and context.\n\n```mermaid\ngraph TD\n    cwe476[\"CWE-476: NULL Pointer Dereference\"]\n    cwe909[\"CWE-909: Missing Initialization of Resource\"]\n    cwe754[\"CWE-754: Improper Check for Unusual or Exceptional Conditions\"]\n    cwe665[\"CWE-665: Improper Initialization\"]\n\n    cwe476 -->|CHILDOF| cwe754\n    cwe909 -->|CHILDOF| cwe665\n    cwe909 -->|CANPRECEDE| cwe476\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe476 primary\n    class cwe909 secondary\n    class cwe754,cwe665 tertiary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with an **incorrect NUMA node assignment**, potentially due to **Missing Initialization of Resource (CWE-909)**. The kernel then attempts to access the memory map for the invalid node, leading to **NULL Pointer Dereference (CWE-476)**, which ultimately causes a kernel crash and denial of service.\n\n## Summary of Analysis\nThe analysis indicates a high confidence in mapping the vulnerability to **CWE-476 (NULL Pointer Dereference)** as the primary weakness. The vulnerability description explicitly mentions a NULL dereference in `memmap_init()` when accessing node data for node 64. This aligns perfectly with the definition of CWE-476. The evidence supporting this is: \"This in turn led to memblock_alloc_range_nid()s warning about MAX_NUMNODES triggering, followed by a **NULL deref** in memmap_init() when trying to access node 64s (NODE_SHIFT=6) node data.\"\n\nAdditionally, the analysis considers **CWE-909 (Missing Initialization of Resource)** as a secondary weakness. The root cause involves the kernel not correctly interpreting the NUMA configuration. Specifically, \"**faking a node** at [mem 0x0000000000000000-0x000000027fffffff] was seen\", implying a possible failure in proper resource initialization which leads to the out-of-bounds access.\n\nOther CWEs were considered but deemed less relevant. For example, CWE-252 (Unchecked Return Value) might seem relevant because the kernel might not be checking return values from memory allocation functions, but the primary issue is the access of an invalid memory location, not the failure to check a return value.\n\nThe selected CWEs are at the optimal level of specificity. **CWE-476** is a Base-level CWE and directly describes the observed vulnerability. **CWE-909** is a Class-level CWE and describes a possible underlying cause for the vulnerability. Selecting more general CWEs like CWE-754 (Improper Check for Unusual or Exceptional Conditions) or CWE-665 (Improper Initialization) would not be as precise or informative.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-476:**\n- 476 (NULL Pointer Dereference) - ROOT\n\n\n**Chain starting from CWE-909:**\n- 909 (Missing Initialization of Resource) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "source": "sparse"
      },
      "similarity": 608.6075929589678
    },
    {
      "metadata": {
        "doc_id": "401",
        "name": "Missing Release of Memory after Effective Lifetime",
        "source": "sparse"
      },
      "similarity": 602.9117372267854
    },
    {
      "metadata": {
        "doc_id": "214",
        "name": "Invocation of Process Using Visible Sensitive Information",
        "source": "sparse"
      },
      "similarity": 601.5648601355913
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 584.551579141565
    },
    {
      "metadata": {
        "doc_id": "400",
        "name": "Uncontrolled Resource Consumption",
        "source": "sparse"
      },
      "similarity": 570.6483101434306
    },
    {
      "metadata": {
        "doc_id": "1390",
        "name": "Weak Authentication",
        "source": "sparse"
      },
      "similarity": 564.9393004729994
    },
    {
      "metadata": {
        "doc_id": "476",
        "name": "NULL Pointer Dereference",
        "source": "sparse"
      },
      "similarity": 560.2671262252461
    },
    {
      "metadata": {
        "doc_id": "1333",
        "name": "Inefficient Regular Expression Complexity",
        "source": "sparse"
      },
      "similarity": 559.730738862045
    },
    {
      "metadata": {
        "doc_id": "1260",
        "name": "Improper Handling of Overlap Between Protected Memory Ranges",
        "type": "Base",
        "original_content": "The product allows address regions to overlap, which can result in the bypassing of intended memory protection.",
        "keyphrase_source": "rootcause:faking a node at [mem 0x0000000000000000-0x000000027fffffff] was seen",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.49194239269131246,
            "graph": 1.6548380838088181
          }
        }
      },
      "similarity": 0.49194239269131246
    },
    {
      "doc_id": "410",
      "text": "CWE-410: Insufficient Resource Pool",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "410",
        "name": "Insufficient Resource Pool",
        "type": "base",
        "original_content": "CWE-410: Insufficient Resource Pool",
        "relationships": [
          {
            "source_id": "410",
            "target_id": "400",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "410",
            "target_id": "664",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "664",
            "target_id": "410",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "412",
            "target_id": "410",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "400",
            "target_id": "410",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "400",
                  "410",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "400"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "400",
                  "410",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "400"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "410",
                  "400",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "400"
            }
          }
        },
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-476",
      "CWE-909",
      "CWE-252",
      "CWE-754",
      "CWE-665"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}