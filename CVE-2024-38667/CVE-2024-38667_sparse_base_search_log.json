{
  "method": "sparse_base",
  "query": "In the Linux kernel, the following vulnerability has been resolved riscv prevent pt_regs corruption for secondary idle threads Top of the kernel thread stack should be reserved for pt_regs. However this is not the case for the idle threads of the secondary boot harts. Their stacks overlap with their pt_regs, so both may get corrupted. Similar issue has been fixed for the primary hart, see c7cdd96eca28 (riscv prevent stack corruption by reserving task_pt_regs(p) early). However that fix was not propagated to the secondary harts. The problem has been noticed in some CPU hotplug tests with V enabled. The function smp_callin stored several registers on stack, corrupting top of pt_regs structure including status field. As a result, kernel attempted to save or restore inexistent V context.",
  "keyphrases": {
    "base_query": "In the Linux kernel, the following vulnerability has been resolved riscv prevent pt_regs corruption for secondary idle threads Top of the kernel thread stack should be reserved for pt_regs. However this is not the case for the idle threads of the secondary boot harts. Their stacks overlap with their pt_regs, so both may get corrupted. Similar issue has been fixed for the primary hart, see c7cdd96eca28 (riscv prevent stack corruption by reserving task_pt_regs(p) early). However that fix was not propagated to the secondary harts. The problem has been noticed in some CPU hotplug tests with V enabled. The function smp_callin stored several registers on stack, corrupting top of pt_regs structure including status field. As a result, kernel attempted to save or restore inexistent V context."
  },
  "timestamp": "2025-07-12T02:42:32.701946",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "667",
      "name": "Improper Locking",
      "score": 189.26484560710304
    },
    {
      "doc_id": "674",
      "name": "Uncontrolled Recursion",
      "score": 188.2242884428077
    },
    {
      "doc_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 181.07487486492317
    },
    {
      "doc_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 178.25756284227978
    },
    {
      "doc_id": "457",
      "name": "Use of Uninitialized Variable",
      "score": 175.0537019833728
    }
  ]
}