{
  "method": "sparse_base",
  "query": "In the Linux kernel, the following vulnerability has been resolved drm/amdkfd Use dynamic allocation for CU occupancy array in kfd_get_cu_occupancy() The `kfd_get_cu_occupancy` function previously declared a large `cu_occupancy` array as a local variable, which could lead to stack overflows due to excessive stack usage. This commit replaces the static array allocation with dynamic memory allocation using `kcalloc`, thereby reducing the stack size. This change avoids the risk of stack overflows in kernel space, in scenarios where `AMDGPU_MAX_QUEUES` is large. The allocated memory is freed using `kfree` before the function returns to prevent memory leaks. Fixes the below with gcc W=1 drivers/gpu/drm/amd/amdgpu/../amdkfd/kfd_process.c In function kfd_get_cu_occupancy drivers/gpu/drm/amd/amdgpu/../amdkfd/kfd_process.c3221 warning the frame size of 1056 bytes is larger than 1024 bytes [-Wframe-larger-than=] 322 | } | ^",
  "keyphrases": {
    "base_query": "In the Linux kernel, the following vulnerability has been resolved drm/amdkfd Use dynamic allocation for CU occupancy array in kfd_get_cu_occupancy() The `kfd_get_cu_occupancy` function previously declared a large `cu_occupancy` array as a local variable, which could lead to stack overflows due to excessive stack usage. This commit replaces the static array allocation with dynamic memory allocation using `kcalloc`, thereby reducing the stack size. This change avoids the risk of stack overflows in kernel space, in scenarios where `AMDGPU_MAX_QUEUES` is large. The allocated memory is freed using `kfree` before the function returns to prevent memory leaks. Fixes the below with gcc W=1 drivers/gpu/drm/amd/amdgpu/../amdkfd/kfd_process.c In function kfd_get_cu_occupancy drivers/gpu/drm/amd/amdgpu/../amdkfd/kfd_process.c3221 warning the frame size of 1056 bytes is larger than 1024 bytes [-Wframe-larger-than=] 322 | } | ^"
  },
  "timestamp": "2025-07-13T23:55:16.818091",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "789",
      "name": "Memory Allocation with Excessive Size Value",
      "score": 240.76042140528992
    },
    {
      "doc_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 221.5836983639373
    },
    {
      "doc_id": "190",
      "name": "Integer Overflow or Wraparound",
      "score": 213.85347253812412
    },
    {
      "doc_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "score": 211.06349794139177
    },
    {
      "doc_id": "1325",
      "name": "Improperly Controlled Sequential Memory Allocation",
      "score": 206.40698177968153
    }
  ]
}