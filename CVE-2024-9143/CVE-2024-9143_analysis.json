{
  "cve_id": "CVE-2024-9143",
  "description": "Issue summary Use of the low-level GF(2^m) elliptic curve APIs with untrusted explicit values for the field polynomial can lead to **out-of-bounds memory reads or writes**. Impact summary Out of bound memory writes can lead to an application crash or even a possibility of a remote code execution, however, in all the protocols involving Elliptic Curve Cryptography that were aware of, either only named curves are supported, or, if explicit curve parameters are supported, they specify an X9.62 encoding of binary (GF(2^m)) curves that cant represent problematic input values. Thus the likelihood of existence of a vulnerable application is low. In particular, the X9.62 encoding is used for ECC keys in X.509 certificates, so problematic inputs cannot occur in the context of processing X.509 certificates. Any problematic use-cases would have to be using an exotic curve encoding. The affected APIs include EC_GROUP_new_curve_GF2m(), EC_GROUP_new_from_params(), and various supporting BN_GF2m_*() functions. Applications working with exotic explicit binary (GF(2^m)) curve parameters, that make it possible to represent invalid field polynomials with a zero constant term, via the above or similar APIs, may terminate abruptly as a result of reading or writing outside of array bounds. Remote code execution cannot easily be ruled out. The FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue.",
  "key_phrases": {
    "rootcause": "use of low-level GF(2^m) elliptic curve APIs with untrusted explicit values",
    "weakness": "out-of-bounds memory reads or writes",
    "impact": "application crash, remote code execution",
    "vector": "",
    "attacker": "",
    "product": "FIPS modules",
    "version": "3.3, 3.2, 3.1 and 3.0",
    "component": "EC_GROUP_new_curve_GF2m(), EC_GROUP_new_from_params(), BN_GF2m_*() functions"
  },
  "reference_content": "```\n{\n  \"vulnerability\": {\n    \"root_cause\": \"The `BN_GF2m_poly2arr()` function in OpenSSL does not properly validate the input polynomial, allowing an attacker to provide an invalid polynomial with a zero constant term. This leads to an out-of-bounds memory access in the `BN_GF2m_mod_arr()` function, which relies on the polynomial having a non-zero constant term.\",\n    \"weaknesses\": [\n      \"Improper input validation\",\n      \"Out-of-bounds memory access\"\n    ],\n    \"impact\": \"Successful exploitation can lead to a denial of service (application crash) and potentially remote code execution. However, the likelihood of exploitation is low because the vulnerability is only present when using explicit curve parameters that do not conform to the X9.62 standard.\",\n    \"attack_vectors\": \"An attacker would need to supply specially crafted, invalid GF(2^m) parameters to the vulnerable OpenSSL APIs `EC_GROUP_new_curve_GF2m()`, `EC_GROUP_new_from_params()`, or other functions that use `BN_GF2m_*()`, specifically crafting a polynomial with a zero constant term.\",\n    \"required_capabilities\": \"The attacker needs to be able to supply explicit elliptic curve parameters. This is generally not possible when using named curves which are usually used with X.509 certificates and TLS.\",\n\t\"additional_details\": \"The vulnerability exists in OpenSSL versions 3.3, 3.2, 3.1, 3.0, 1.1.1 and 1.0.2. Patches for this issue are included in the upcoming releases of each affected branch. The vulnerability was reported by Google OSS-Fuzz-Gen on 16th September 2024. The fix implemented in the vulnerable function now returns a failure when the constant term is zero, the leading exponent exceeds `OPENSSL_ECC_MAX_FIELD_BITS` or if there is not enough space to pad the array with the `-1` sentinel value. Tests were also added to check for correct handling of invalid GF2m field parameters.\"\n  }\n}\n```",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-787 | Out-of-bounds Write | 0.9 | Base | Allowed | Primary CWE. The vulnerability description and CVE reference links explicitly mention out-of-bounds writes as a potential impact. |\n| CWE-125 | Out-of-bounds Read | 0.8 | Base | Allowed | Secondary CWE. The vulnerability description mentions out-of-bounds memory reads, making this a relevant, though secondary, classification. |\n| CWE-1284 | Improper Validation of Specified Quantity in Input | 0.7 | Base | Allowed | Secondary CWE. The root cause is the **use of low-level GF(2^m) elliptic curve APIs with untrusted explicit values**, implying the specified quantity (field polynomial) was not properly validated. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is an out-of-bounds write (CWE-787), which can be caused by improper input validation (CWE-1284). An out-of-bounds read (CWE-125) can also occur due to the same root cause. CWE-1284 can precede CWE-787.\n\n```mermaid\ngraph TD\n    cwe787[\"CWE-787: Out-of-bounds Write\"]\n    cwe125[\"CWE-125: Out-of-bounds Read\"]\n    cwe1284[\"CWE-1284: Improper Validation of Specified Quantity in Input\"]\n\n    cwe1284 -->|CANPRECEDE| cwe787\n    cwe1284 -->|CANPRECEDE| cwe125\n    cwe787 -->|PEEROF| cwe125\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe787 primary\n    class cwe125,cwe1284 secondary\n```\n\n## Vulnerability Chain\n1.  **Improper Input Validation (CWE-1284):** The product does not properly validate the provided GF(2^m) field polynomial.\n2.  **Out-of-bounds Write (CWE-787) / Out-of-bounds Read (CWE-125):** Due to the **improperly validated input**, the product attempts to write data outside the bounds of allocated memory (or read from outside the bounds).\n3.  **Impact:** Application crash, potential remote code execution.\n\n## Summary of Analysis\nThe primary weakness is clearly identified as CWE-787 (Out-of-bounds Write) due to the explicit mention in the vulnerability description and CVE reference. The root cause is the **improper validation** of the field polynomial (CWE-1284), which leads to the out-of-bounds write (CWE-787) and potentially an out-of-bounds read (CWE-125).\n\nThe evidence supporting CWE-787 is strong: \"Use of the low-level GF(2^m) elliptic curve APIs with untrusted explicit values for the field polynomial can lead to **out-of-bounds memory reads or writes**.\" From the CVE Reference Links Content Summary: \"\"The `BN_GF2m_poly2arr()` function in OpenSSL does not properly validate the input polynomial, allowing an attacker to provide an invalid polynomial with a zero constant term. This leads to an out-of-bounds memory access in the `BN_GF2m_mod_arr()` function, which relies on the polynomial having a non-zero constant term.\"\n\nCWE-1284 is also a strong candidate, as the root cause involves **untrusted explicit values** for the field polynomial, which is a specified quantity in the input. From the CVE Reference Links Content Summary: \"The `BN_GF2m_poly2arr()` function in OpenSSL **does not properly validate the input polynomial**...\".\n\nCWE-125 (Out-of-bounds Read) is also relevant because the vulnerability description mentions \"**out-of-bounds memory reads or writes**\".\n\nThe selected CWEs are at the Base level of abstraction, which is the preferred level.\n\nThe other CWEs from the **Retriever Results** were not selected because they were not as directly relevant to the **rootcause** and **weakness** described in the vulnerability. CWE-20 (Improper Input Validation) is too general. CWE-190 (Integer Overflow or Wraparound) and CWE-823 (Use of Out-of-range Pointer Offset) do not fit the specific details of the vulnerability.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-787 | Out-of-bounds Write | 0.9 | Base | Allowed | Primary CWE. The vulnerability description and CVE reference links explicitly mention out-of-bounds writes as a potential impact. |\n| CWE-125 | Out-of-bounds Read | 0.8 | Base | Allowed | Secondary CWE. The vulnerability description mentions out-of-bounds memory reads, making this a relevant, though secondary, classification. |\n| CWE-1284 | Improper Validation of Specified Quantity in Input | 0.7 | Base | Allowed | Secondary CWE. The root cause is the **use of low-level GF(2^m) elliptic curve APIs with untrusted explicit values**, implying the specified quantity (field polynomial) was not properly validated. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is an out-of-bounds write (CWE-787), which can be caused by improper input validation (CWE-1284). An out-of-bounds read (CWE-125) can also occur due to the same root cause. CWE-1284 can precede CWE-787.\n\n```mermaid\ngraph TD\n    cwe787[\"CWE-787: Out-of-bounds Write\"]\n    cwe125[\"CWE-125: Out-of-bounds Read\"]\n    cwe1284[\"CWE-1284: Improper Validation of Specified Quantity in Input\"]\n\n    cwe1284 -->|CANPRECEDE| cwe787\n    cwe1284 -->|CANPRECEDE| cwe125\n    cwe787 -->|PEEROF| cwe125\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe787 primary\n    class cwe125,cwe1284 secondary\n```\n\n## Vulnerability Chain\n1.  **Improper Input Validation (CWE-1284):** The product does not properly validate the provided GF(2^m) field polynomial.\n2.  **Out-of-bounds Write (CWE-787) / Out-of-bounds Read (CWE-125):** Due to the **improperly validated input**, the product attempts to write data outside the bounds of allocated memory (or read from outside the bounds).\n3.  **Impact:** Application crash, potential remote code execution.\n\n## Summary of Analysis\nThe primary weakness is clearly identified as CWE-787 (Out-of-bounds Write) due to the explicit mention in the vulnerability description and CVE reference. The root cause is the **improper validation** of the field polynomial (CWE-1284), which leads to the out-of-bounds write (CWE-787) and potentially an out-of-bounds read (CWE-125).\n\nThe evidence supporting CWE-787 is strong: \"Use of the low-level GF(2^m) elliptic curve APIs with untrusted explicit values for the field polynomial can lead to **out-of-bounds memory reads or writes**.\" From the CVE Reference Links Content Summary: \"\"The `BN_GF2m_poly2arr()` function in OpenSSL does not properly validate the input polynomial, allowing an attacker to provide an invalid polynomial with a zero constant term. This leads to an out-of-bounds memory access in the `BN_GF2m_mod_arr()` function, which relies on the polynomial having a non-zero constant term.\"\n\nCWE-1284 is also a strong candidate, as the root cause involves **untrusted explicit values** for the field polynomial, which is a specified quantity in the input. From the CVE Reference Links Content Summary: \"The `BN_GF2m_poly2arr()` function in OpenSSL **does not properly validate the input polynomial**...\".\n\nCWE-125 (Out-of-bounds Read) is also relevant because the vulnerability description mentions \"**out-of-bounds memory reads or writes**\".\n\nThe selected CWEs are at the Base level of abstraction, which is the preferred level.\n\nThe other CWEs from the **Retriever Results** were not selected because they were not as directly relevant to the **rootcause** and **weakness** described in the vulnerability. CWE-20 (Improper Input Validation) is too general. CWE-190 (Integer Overflow or Wraparound) and CWE-823 (Use of Out-of-range Pointer Offset) do not fit the specific details of the vulnerability.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-1284:**\n- 1284 (Improper Validation of Specified Quantity in Input) - ROOT\n\n\n**Chain starting from CWE-823:**\n- 823 (Use of Out-of-range Pointer Offset) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "125",
        "name": "Out-of-bounds Read",
        "source": "sparse"
      },
      "similarity": 1188.2345230555768
    },
    {
      "metadata": {
        "doc_id": "1284",
        "name": "Improper Validation of Specified Quantity in Input",
        "source": "sparse"
      },
      "similarity": 1071.529972762472
    },
    {
      "metadata": {
        "doc_id": "203",
        "name": "Observable Discrepancy",
        "source": "sparse"
      },
      "similarity": 1063.688526125145
    },
    {
      "metadata": {
        "doc_id": "200",
        "name": "Exposure of Sensitive Information to an Unauthorized Actor",
        "source": "sparse"
      },
      "similarity": 1049.125925030944
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 1046.9249143432542
    },
    {
      "metadata": {
        "doc_id": "190",
        "name": "Integer Overflow or Wraparound",
        "source": "sparse"
      },
      "similarity": 1038.8038424532767
    },
    {
      "metadata": {
        "doc_id": "787",
        "name": "Out-of-bounds Write",
        "source": "sparse"
      },
      "similarity": 1030.1698601935723
    },
    {
      "metadata": {
        "doc_id": "20",
        "name": "Improper Input Validation",
        "source": "sparse"
      },
      "similarity": 1027.8754497164412
    },
    {
      "metadata": {
        "doc_id": "823",
        "name": "Use of Out-of-range Pointer Offset",
        "type": "Base",
        "original_content": "The product performs pointer arithmetic on a valid pointer, but it uses an offset that can point outside of the intended range of valid memory locations for the resulting pointer.",
        "keyphrase_source": "weakness:out-of-bounds memory reads",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5663215714238088,
            "graph": 2.8290120758539485
          }
        }
      },
      "similarity": 0.5663215714238088
    },
    {
      "doc_id": "170",
      "text": "CWE-170: Improper Null Termination",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "170",
        "name": "Improper Null Termination",
        "type": "base",
        "original_content": "CWE-170: Improper Null Termination",
        "relationships": [
          {
            "source_id": "170",
            "target_id": "682",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "170",
            "target_id": "193",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "170",
            "target_id": "20",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "700"
            }
          },
          {
            "source_id": "170",
            "target_id": "463",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "170",
            "target_id": "464",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "170",
            "target_id": "147",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "170",
            "target_id": "126",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "170",
            "target_id": "120",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "170",
            "target_id": "707",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "707",
            "target_id": "170",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "682",
            "target_id": "170",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "20",
            "target_id": "170",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "700"
            }
          },
          {
            "source_id": "193",
            "target_id": "170",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "126",
            "target_id": "170",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "120",
            "target_id": "170",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "126",
                  "170",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "126"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "126",
                  "170",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "126"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "170",
                  "126",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "126"
            }
          }
        },
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-1284",
      "CWE-823",
      "CWE-125",
      "CWE-787",
      "CWE-190",
      "CWE-20"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}