{
  "cve_id": "CVE-2025-37920",
  "description": "In the Linux kernel, the following vulnerability has been resolved xsk Fix **race condition** in AF_XDP generic RX path Move rx_lock from xsk_socket to xsk_buff_pool. Fix synchronization for shared umem mode in generic RX path where multiple sockets share single xsk_buff_pool. RX queue is exclusive to xsk_socket, while FILL queue can be shared between multiple sockets. This could result in **race condition** where two CPU cores access RX path of two different sockets sharing the same umem. Protect both queues by acquiring spinlock in shared xsk_buff_pool. Lock contention may be minimized in the future by some per-thread FQ buffering. Its safe and necessary to move spin_lock_bh(rx_lock) after xsk_rcv_check() * xs->pool and spinlock_init is synchronized by xsk_bind() -> xsk_is_bound() memory barriers. * xsk_rcv_check() may return true at the moment of xsk_release() or xsk_unbind_dev(), however this will not cause any data races or **race condition**s. xsk_unbind_dev() removes xdp socket from all maps and waits for completion of all outstanding rx operations. Packets in RX path will either complete safely or drop.",
  "key_phrases": {
    "rootcause": "race condition",
    "weakness": "",
    "impact": "",
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": "AF_XDP generic RX path"
  },
  "reference_content": null,
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| **CWE-362** | Concurrent Execution using Shared Resource with Improper Synchronization ('**Race Condition**') | 0.9 | Class | Primary | Allowed-with-Review |\n| CWE-366 | **Race Condition** within a Thread | 0.7 | Base | Secondary Candidate | Allowed |\n| CWE-662 | Improper Synchronization | 0.6 | Class | Secondary Candidate | Discouraged |\n| CWE-367 | Time-of-check Time-of-use (TOCTOU) **Race Condition** | 0.5 | Base | Secondary Candidate | Allowed |\n| CWE-667 | Improper Locking | 0.5 | Class | Secondary Candidate | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-362, which is a Class-level CWE. More specific Base-level CWEs like CWE-366, CWE-364, and CWE-367 are considered but ultimately not chosen as primary due to the evidence best aligning with the general concept of concurrent execution with improper synchronization. CWE-662 and CWE-667 are also considered because synchronization issues are related. CWE-362 is a parent of CWE-367.\n\n```mermaid\ngraph TD\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    cwe366[\"CWE-366: Race Condition within a Thread\"]\n    cwe367[\"CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\"]\n    cwe662[\"CWE-662: Improper Synchronization\"]\n    cwe667[\"CWE-667: Improper Locking\"]\n    \n    cwe367 -->|CHILDOF| cwe362\n    cwe366 -->|PEEROF| cwe362\n    cwe662 -->|PEEROF| cwe362\n    cwe667 -->|PEEROF| cwe362\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe362 primary\n    class cwe366,cwe367,cwe662,cwe667 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a **race condition** in the AF_XDP generic RX path due to multiple sockets sharing a single xsk_buff_pool without proper synchronization. This leads to potential data corruption or other undefined behaviors when two CPU cores access the RX path of different sockets concurrently. The final impact is data corruption or system instability. The **root cause** is the **improper synchronization** in a concurrent execution environment.\n\n## Summary of Analysis\nThe vulnerability description clearly states a **race condition** in the Linux kernel's AF_XDP generic RX path. The core issue is that multiple sockets sharing the same umem are not properly synchronized, leading to concurrent access and potential data races.\n\nThe primary CWE selected is CWE-362 Concurrent Execution using Shared Resource with Improper Synchronization ('**Race Condition**'). This aligns directly with the vulnerability description and the key phrase \"**race condition**\". The vulnerability occurs because multiple CPU cores can access the RX path of different sockets that share the same umem, highlighting concurrent execution with improper synchronization.\n\nOther CWEs were considered but not selected as primary:\n\n*   CWE-366 (**Race Condition** within a Thread): While the vulnerability does involve threads (CPU cores), it is more broadly about concurrent execution and shared resources, making CWE-362 a better fit.\n*   CWE-662 Improper Synchronization: This is a related CWE, but CWE-362 is more specific in the context of a **race condition**.\n*   CWE-367 Time-of-check Time-of-use (TOCTOU) **Race Condition**: This is a specific type of **race condition** that doesn't fully capture the described vulnerability. The description doesn't explicitly mention a check-then-use scenario.\n*   CWE-667 Improper Locking: The fix involves acquiring a spinlock, suggesting a locking issue, but the broader problem is the lack of synchronization across concurrent executions, making CWE-362 more appropriate.\n\nThe decision to use CWE-362 is strongly supported by the vulnerability description, which explicitly mentions a **race condition** in the AF_XDP generic RX path due to shared resources and lack of synchronization. The fix of using spinlocks further indicates a synchronization issue. The retriever results also rank CWE-362 as the top candidate. The abstraction level of Class is acceptable as it captures the general weakness, and there isn't a more specific Base or Variant CWE that fully aligns with all aspects of the vulnerability.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| **CWE-362** | Concurrent Execution using Shared Resource with Improper Synchronization ('**Race Condition**') | 0.9 | Class | Primary | Allowed-with-Review |\n| CWE-366 | **Race Condition** within a Thread | 0.7 | Base | Secondary Candidate | Allowed |\n| CWE-662 | Improper Synchronization | 0.6 | Class | Secondary Candidate | Discouraged |\n| CWE-367 | Time-of-check Time-of-use (TOCTOU) **Race Condition** | 0.5 | Base | Secondary Candidate | Allowed |\n| CWE-667 | Improper Locking | 0.5 | Class | Secondary Candidate | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE is CWE-362, which is a Class-level CWE. More specific Base-level CWEs like CWE-366, CWE-364, and CWE-367 are considered but ultimately not chosen as primary due to the evidence best aligning with the general concept of concurrent execution with improper synchronization. CWE-662 and CWE-667 are also considered because synchronization issues are related. CWE-362 is a parent of CWE-367.\n\n```mermaid\ngraph TD\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    cwe366[\"CWE-366: Race Condition within a Thread\"]\n    cwe367[\"CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\"]\n    cwe662[\"CWE-662: Improper Synchronization\"]\n    cwe667[\"CWE-667: Improper Locking\"]\n    \n    cwe367 -->|CHILDOF| cwe362\n    cwe366 -->|PEEROF| cwe362\n    cwe662 -->|PEEROF| cwe362\n    cwe667 -->|PEEROF| cwe362\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe362 primary\n    class cwe366,cwe367,cwe662,cwe667 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a **race condition** in the AF_XDP generic RX path due to multiple sockets sharing a single xsk_buff_pool without proper synchronization. This leads to potential data corruption or other undefined behaviors when two CPU cores access the RX path of different sockets concurrently. The final impact is data corruption or system instability. The **root cause** is the **improper synchronization** in a concurrent execution environment.\n\n## Summary of Analysis\nThe vulnerability description clearly states a **race condition** in the Linux kernel's AF_XDP generic RX path. The core issue is that multiple sockets sharing the same umem are not properly synchronized, leading to concurrent access and potential data races.\n\nThe primary CWE selected is CWE-362 Concurrent Execution using Shared Resource with Improper Synchronization ('**Race Condition**'). This aligns directly with the vulnerability description and the key phrase \"**race condition**\". The vulnerability occurs because multiple CPU cores can access the RX path of different sockets that share the same umem, highlighting concurrent execution with improper synchronization.\n\nOther CWEs were considered but not selected as primary:\n\n*   CWE-366 (**Race Condition** within a Thread): While the vulnerability does involve threads (CPU cores), it is more broadly about concurrent execution and shared resources, making CWE-362 a better fit.\n*   CWE-662 Improper Synchronization: This is a related CWE, but CWE-362 is more specific in the context of a **race condition**.\n*   CWE-367 Time-of-check Time-of-use (TOCTOU) **Race Condition**: This is a specific type of **race condition** that doesn't fully capture the described vulnerability. The description doesn't explicitly mention a check-then-use scenario.\n*   CWE-667 Improper Locking: The fix involves acquiring a spinlock, suggesting a locking issue, but the broader problem is the lack of synchronization across concurrent executions, making CWE-362 more appropriate.\n\nThe decision to use CWE-362 is strongly supported by the vulnerability description, which explicitly mentions a **race condition** in the AF_XDP generic RX path due to shared resources and lack of synchronization. The fix of using spinlocks further indicates a synchronization issue. The retriever results also rank CWE-362 as the top candidate. The abstraction level of Class is acceptable as it captures the general weakness, and there isn't a more specific Base or Variant CWE that fully aligns with all aspects of the vulnerability.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-662:**\n- 662 (Improper Synchronization) - ROOT\n\n\n**Chain starting from CWE-667:**\n- 667 (Improper Locking) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Race Condition",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "662",
        "name": "Improper Synchronization",
        "source": "sparse"
      },
      "similarity": 840.0246936409558
    },
    {
      "metadata": {
        "doc_id": "667",
        "name": "Improper Locking",
        "source": "sparse"
      },
      "similarity": 716.6701354427429
    },
    {
      "metadata": {
        "doc_id": "364",
        "name": "Signal Handler Race Condition",
        "source": "sparse"
      },
      "similarity": 707.3859205452069
    },
    {
      "metadata": {
        "doc_id": "367",
        "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
        "source": "sparse"
      },
      "similarity": 698.7451130388876
    },
    {
      "metadata": {
        "doc_id": "789",
        "name": "Memory Allocation with Excessive Size Value",
        "source": "sparse"
      },
      "similarity": 666.7489400540314
    },
    {
      "metadata": {
        "doc_id": "835",
        "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
        "source": "sparse"
      },
      "similarity": 605.3925887746477
    },
    {
      "metadata": {
        "doc_id": "400",
        "name": "Uncontrolled Resource Consumption",
        "source": "sparse"
      },
      "similarity": 602.7850971395567
    },
    {
      "metadata": {
        "doc_id": "366",
        "name": "Race Condition within a Thread",
        "type": "Base",
        "original_content": "If two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.",
        "keyphrase_source": "rootcause:race condition",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.48889611741169914,
            "graph": 1.6895942344020145
          }
        }
      },
      "similarity": 0.48889611741169914
    },
    {
      "doc_id": "609",
      "text": "CWE-609: Double-Checked Locking",
      "score": 2.8651999999999997,
      "metadata": {
        "doc_id": "609",
        "name": "Double-Checked Locking",
        "type": "base",
        "original_content": "CWE-609: Double-Checked Locking",
        "relationships": [
          {
            "source_id": "609",
            "target_id": "367",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "609",
            "target_id": "667",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "667",
            "target_id": "609",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "367",
            "target_id": "609",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "abstraction_path": 0.7200000000000001,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "367",
                  "609",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "367"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "667",
                  "609",
                  "PARENTOF"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "abstraction_path_down",
              "source": "667"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "367",
                  "609",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "367"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "609",
                  "367",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "367"
            }
          }
        },
        "abstraction_level": "base",
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.8651999999999997
          }
        }
      },
      "similarity": 2.8651999999999997
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-662",
      "CWE-667",
      "CWE-364",
      "CWE-362",
      "CWE-366",
      "CWE-367"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}