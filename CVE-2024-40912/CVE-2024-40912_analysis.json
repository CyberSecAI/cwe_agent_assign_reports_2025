{
  "cve_id": "CVE-2024-40912",
  "description": "In the Linux kernel, the following vulnerability has been resolvedwifi mac80211 Fix deadlock in ieee80211_sta_ps_deliver_wakeup()The ieee80211_sta_ps_deliver_wakeup() function takes sta->ps_lock tosynchronizes with ieee80211_tx_h_unicast_ps_buf() which is called fromsoftirq context. However using only spin_lock() to get sta->ps_lock inieee80211_sta_ps_deliver_wakeup() does not prevent softirq to executeon this same CPU, to run ieee80211_tx_h_unicast_ps_buf() and try totake this same lock ending in deadlock. Below is an example of rcu stallthat arises in such situation. rcu INFO rcu_sched self-detected stall on CPU rcu 2-.... (42413413 ticks this GP) idle=b154/1/0x4000000000000000 softirq=1763/1765 fqs=21206996 rcu (t=42586894 jiffies g=2057 q=362405 ncpus=4) CPU 2 PID 719 Comm wpa_supplicant Tainted G W 6.4.0-02158-g1b062f552873 #742 Hardware name RPT (r1) (DT) pstate 00000005 (nzcv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--) pc queued_spin_lock_slowpath+0x58/0x2d0 lr invoke_tx_handlers_early+0x5b4/0x5c0 sp ffff00001ef64660 x29 ffff00001ef64660 x28 ffff000009bc1070 x27 ffff000009bc0ad8 x26 ffff000009bc0900 x25 ffff00001ef647a8 x24 0000000000000000 x23 ffff000009bc0900 x22 ffff000009bc0900 x21 ffff00000ac0e000 x20 ffff00000a279e00 x19 ffff00001ef646e8 x18 0000000000000000 x17 ffff800016468000 x16 ffff00001ef608c0 x15 0010533c93f64f80 x14 0010395c9faa3946 x13 0000000000000000 x12 00000000fa83b2da x11 000000012edeceea x10 ffff0000010fbe00 x9 0000000000895440 x8 000000000010533c x7 ffff00000ad8b740 x6 ffff00000c350880 x5 0000000000000007 x4 0000000000000001 x3 0000000000000000 x2 0000000000000000 x1 0000000000000001 x0 ffff00000ac0e0e8 Call trace queued_spin_lock_slowpath+0x58/0x2d0 ieee80211_tx+0x80/0x12c ieee80211_tx_pending+0x110/0x278 tasklet_action_common.constprop.0+0x10c/0x144 tasklet_action+0x20/0x28 _stext+0x11c/0x284 ____do_softirq+0xc/0x14 call_on_irq_stack+0x24/0x34 do_softirq_own_stack+0x18/0x20 do_softirq+0x74/0x7c __local_bh_enable_ip+0xa0/0xa4 _ieee80211_wake_txqs+0x3b0/0x4b8 __ieee80211_wake_queue+0x12c/0x168 ieee80211_add_pending_skbs+0xec/0x138 ieee80211_sta_ps_deliver_wakeup+0x2a4/0x480 ieee80211_mps_sta_status_update.part.0+0xd8/0x11c ieee80211_mps_sta_status_update+0x18/0x24 sta_apply_parameters+0x3bc/0x4c0 ieee80211_change_station+0x1b8/0x2dc nl80211_set_station+0x444/0x49c genl_family_rcv_msg_doit.isra.0+0xa4/0xfc genl_rcv_msg+0x1b0/0x244 netlink_rcv_skb+0x38/0x10c genl_rcv+0x34/0x48 netlink_unicast+0x254/0x2bc netlink_sendmsg+0x190/0x3b4 ____sys_sendmsg+0x1e8/0x218 ___sys_sendmsg+0x68/0x8c __sys_sendmsg+0x44/0x84 __arm64_sys_sendmsg+0x20/0x28 do_el0_svc+0x6c/0xe8 el0_svc+0x14/0x48 el0t_64_sync_handler+0xb0/0xb4 el0t_64_sync+0x14c/0x150Using spin_lock_bh()/spin_unlock_bh() instead prevents softirq to raiseon the same CPU that is holding the lock.",
  "key_phrases": {
    "rootcause": "The function ieee80211_sta_ps_deliver_wakeup() uses spin_lock() to synchronize with ieee80211_tx_h_unicast_ps_buf(), but does not prevent softirq from executing on the same CPU, leading to a deadlock.",
    "weakness": "The usage of spin_lock() in ieee80211_sta_ps_deliver_wakeup() does not prevent softirqs from interrupting the critical section on the same CPU, which leads to a deadlock when the softirq context attempts to acquire the same lock.",
    "impact": "Deadlock, causing the system to become unresponsive.",
    "vector": "Local",
    "attacker": "Local attacker, through a crafted netlink message.",
    "product": "Linux Kernel",
    "version": "6.4.0-02158-g1b062f552873",
    "component": "mac80211"
  },
  "reference_content": "Based on the provided information, here's an analysis of the vulnerability:\n\n**Root cause of vulnerability:**\n- The `ieee80211_sta_ps_deliver_wakeup()` function, responsible for delivering frames to a station in power-save mode, uses `spin_lock(&sta->ps_lock)` to synchronize with `ieee80211_tx_h_unicast_ps_buf()`. The latter is called from a softirq context.\n- Using a plain `spin_lock()` does not prevent a softirq from executing on the same CPU that holds the lock, leading to a deadlock when `ieee80211_tx_h_unicast_ps_buf()` tries to acquire the same lock.\n\n**Weaknesses/vulnerabilities present:**\n- **Deadlock:** A classic deadlock scenario occurs when two execution contexts (in this case, the main function and a softirq) try to acquire the same spinlock, leading to a complete system freeze.\n- **Incorrect Locking:** The initial use of `spin_lock()` instead of `spin_lock_bh()` in `ieee80211_sta_ps_deliver_wakeup()` creates the potential for a deadlock, because it doesn't disable bottom halves (softirqs) from running on the same CPU.\n\n**Impact of exploitation:**\n- **System Hang/Stall:** The deadlock prevents the system from making progress, causing an RCU stall and effectively freezing the system, making it unresponsive. The provided call trace shows a stall detected by the RCU mechanism.\n\n**Attack vectors:**\n- This is not directly an \"attack\" in the sense of external exploitation. It is a concurrency issue that is triggered by normal WiFi operations involving power-saving features.\n- Specifically, the scenario requires an interaction where `ieee80211_sta_ps_deliver_wakeup()` is called while a softirq attempts to transmit data to the same station using `ieee80211_tx_h_unicast_ps_buf()`.\n\n**Required attacker capabilities/position:**\n- No specific attacker capability is required. This deadlock can occur in normal use when a station is using power saving and the access point needs to deliver buffered frames.\n- An attacker could potentially trigger the deadlock more easily by manipulating the station's power-saving behavior via crafted wireless packets, although this is not explicitly discussed in the provided text.\n\n**Fix:**\n- The fix is to replace `spin_lock(&sta->ps_lock)` and `spin_unlock(&sta->ps_lock)` with `spin_lock_bh(&sta->ps_lock)` and `spin_unlock_bh(&sta->ps_lock)` respectively. This ensures that softirqs are disabled while the lock is held, preventing the deadlock.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-833 | Deadlock | 1.0 | Base | Allowed | Primary CWE: The vulnerability description explicitly mentions a deadlock scenario, making this the most accurate primary CWE. |\n| CWE-413 | Improper Resource Locking | 0.8 | Base | Allowed | Secondary Candidate: The root cause involves using the wrong type of lock, leading to the deadlock. |\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.6 | Class | Allowed-with-Review | Secondary Candidate: This is a more general classification that applies because the **improper locking** leads to a race condition.|\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship is between **CWE-833** Deadlock and **CWE-413** Improper Resource Locking. The **improper locking** (specifically, using `spin_lock` instead of `spin_lock_bh`) **caused** the deadlock. **CWE-362** is a more general class that encompasses the concurrency issue.\n\n```mermaid\ngraph TD\n    cwe833[\"CWE-833: Deadlock\"]\n    cwe413[\"CWE-413: Improper Resource Locking\"]\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n\n    cwe833 <--|CAUSED_BY| cwe413\n    cwe413 -->|PART_OF| cwe362\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe833 primary\n    class cwe413,cwe362 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **CWE-413** (Improper Resource Locking), which leads directly to **CWE-833** (Deadlock). The use of the wrong spinlock primitive allowed a softirq to interrupt the critical section, causing the deadlock.\n  - **CWE-413**: The **root cause** is the **incorrect usage of `spin_lock()` instead of `spin_lock_bh()`**, which doesn't prevent softirqs from running.\n  - **CWE-833**: The direct **impact** of the incorrect locking is a **deadlock** when the softirq attempts to acquire the same lock.\n\n## Summary of Analysis\nThe analysis is based on the vulnerability description and CVE reference summary, which clearly outline the **root cause** as an **improper locking** mechanism leading to a deadlock. The description states, \"The function ieee80211_sta_ps_deliver_wakeup() uses spin_lock() to synchronize with ieee80211_tx_h_unicast_ps_buf(), but does not prevent softirq from executing on the same CPU, leading to a deadlock.\"\n\nThe relationship graph shows that **CWE-413** contributes to **CWE-833**. While **CWE-362** is related, it is less specific than **CWE-413** and **CWE-833**.\n\nThe selected CWEs are at the optimal level of specificity because they directly address the root cause (improper locking) and the resulting impact (deadlock). The use of `spin_lock()` instead of `spin_lock_bh()` is a clear instance of **improper resource locking**.\n\n**CWEs Considered But Not Used:**\n\n*   **CWE-119 Improper Restriction of Operations within the Bounds of a Memory Buffer**: This CWE is not appropriate because the vulnerability is not related to memory buffer boundaries.\n*   **CWE-400 Uncontrolled Resource Consumption**: This CWE is not appropriate because the vulnerability does not involve the uncontrolled consumption of resources.\n*   **CWE-125 Out-of-bounds Read** and **CWE-787 Out-of-bounds Write**: These CWEs are not appropriate as they are memory corruption issues and not directly related to the described deadlock.\n*   **CWE-416 Use After Free**: This CWE is not relevant as the vulnerability doesn't involve using memory after it has been freed.\n*   **CWE-770 Allocation of Resources Without Limits or Throttling**: This is not relevant because the issue isn't related to allocating resources without limits.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-833 | Deadlock | 1.0 | Base | Allowed | Primary CWE: The vulnerability description explicitly mentions a deadlock scenario, making this the most accurate primary CWE. |\n| CWE-413 | Improper Resource Locking | 0.8 | Base | Allowed | Secondary Candidate: The root cause involves using the wrong type of lock, leading to the deadlock. |\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.6 | Class | Allowed-with-Review | Secondary Candidate: This is a more general classification that applies because the **improper locking** leads to a race condition.|\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship is between **CWE-833** Deadlock and **CWE-413** Improper Resource Locking. The **improper locking** (specifically, using `spin_lock` instead of `spin_lock_bh`) **caused** the deadlock. **CWE-362** is a more general class that encompasses the concurrency issue.\n\n```mermaid\ngraph TD\n    cwe833[\"CWE-833: Deadlock\"]\n    cwe413[\"CWE-413: Improper Resource Locking\"]\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n\n    cwe833 <--|CAUSED_BY| cwe413\n    cwe413 -->|PART_OF| cwe362\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe833 primary\n    class cwe413,cwe362 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **CWE-413** (Improper Resource Locking), which leads directly to **CWE-833** (Deadlock). The use of the wrong spinlock primitive allowed a softirq to interrupt the critical section, causing the deadlock.\n  - **CWE-413**: The **root cause** is the **incorrect usage of `spin_lock()` instead of `spin_lock_bh()`**, which doesn't prevent softirqs from running.\n  - **CWE-833**: The direct **impact** of the incorrect locking is a **deadlock** when the softirq attempts to acquire the same lock.\n\n## Summary of Analysis\nThe analysis is based on the vulnerability description and CVE reference summary, which clearly outline the **root cause** as an **improper locking** mechanism leading to a deadlock. The description states, \"The function ieee80211_sta_ps_deliver_wakeup() uses spin_lock() to synchronize with ieee80211_tx_h_unicast_ps_buf(), but does not prevent softirq from executing on the same CPU, leading to a deadlock.\"\n\nThe relationship graph shows that **CWE-413** contributes to **CWE-833**. While **CWE-362** is related, it is less specific than **CWE-413** and **CWE-833**.\n\nThe selected CWEs are at the optimal level of specificity because they directly address the root cause (improper locking) and the resulting impact (deadlock). The use of `spin_lock()` instead of `spin_lock_bh()` is a clear instance of **improper resource locking**.\n\n**CWEs Considered But Not Used:**\n\n*   **CWE-119 Improper Restriction of Operations within the Bounds of a Memory Buffer**: This CWE is not appropriate because the vulnerability is not related to memory buffer boundaries.\n*   **CWE-400 Uncontrolled Resource Consumption**: This CWE is not appropriate because the vulnerability does not involve the uncontrolled consumption of resources.\n*   **CWE-125 Out-of-bounds Read** and **CWE-787 Out-of-bounds Write**: These CWEs are not appropriate as they are memory corruption issues and not directly related to the described deadlock.\n*   **CWE-416 Use After Free**: This CWE is not relevant as the vulnerability doesn't involve using memory after it has been freed.\n*   **CWE-770 Allocation of Resources Without Limits or Throttling**: This is not relevant because the issue isn't related to allocating resources without limits.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-400:**\n- 400 (Uncontrolled Resource Consumption) - ROOT\n\n\n**Chain starting from CWE-416:**\n- 416 (Use After Free) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "833",
        "name": "Deadlock",
        "source": "sparse"
      },
      "similarity": 577.2320454760306
    },
    {
      "metadata": {
        "doc_id": "667",
        "name": "Improper Locking",
        "source": "sparse"
      },
      "similarity": 576.1051311664125
    },
    {
      "metadata": {
        "doc_id": "400",
        "name": "Uncontrolled Resource Consumption",
        "source": "sparse"
      },
      "similarity": 523.9590990221501
    },
    {
      "metadata": {
        "doc_id": "119",
        "name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
        "source": "sparse"
      },
      "similarity": 521.851899312146
    },
    {
      "metadata": {
        "doc_id": "328",
        "name": "Use of Weak Hash",
        "source": "sparse"
      },
      "similarity": 518.8175293200005
    },
    {
      "metadata": {
        "doc_id": "212",
        "name": "Improper Removal of Sensitive Information Before Storage or Transfer",
        "source": "sparse"
      },
      "similarity": 506.43753447504446
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 503.1849100277782
    },
    {
      "metadata": {
        "doc_id": "674",
        "name": "Uncontrolled Recursion",
        "source": "sparse"
      },
      "similarity": 501.8288679954786
    },
    {
      "metadata": {
        "doc_id": "413",
        "name": "Improper Resource Locking",
        "type": "Base",
        "original_content": "The product does not lock or does not correctly lock a resource when the product must have exclusive access to the resource.",
        "keyphrase_source": "weakness:which leads to a deadlock when the softirq context attempts to acquire the same lock.",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.5248907319622068
          }
        }
      },
      "similarity": 0.5248907319622068
    },
    {
      "doc_id": "129",
      "text": "CWE-129: Improper Validation of Array Index",
      "score": 2.6784000000000003,
      "metadata": {
        "doc_id": "129",
        "name": "Improper Validation of Array Index",
        "type": "variant",
        "original_content": "CWE-129: Improper Validation of Array Index",
        "relationships": [
          {
            "source_id": "129",
            "target_id": "789",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "129",
            "target_id": "823",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "129",
            "target_id": "119",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "129",
            "target_id": "20",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "129",
            "target_id": "1285",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "823",
            "target_id": "129",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "789",
            "target_id": "129",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "20",
            "target_id": "129",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "1285",
            "target_id": "129",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "119",
            "target_id": "129",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "abstraction_path": 0.76,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.2,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "119",
                  "129",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "119"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "1285",
                  "129",
                  "PARENTOF"
                ]
              ],
              "score": 0.76,
              "type": "abstraction_path_down",
              "source": "1285"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "119",
                  "129",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "119"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "129",
                  "119",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "119"
            }
          }
        },
        "abstraction_level": "variant",
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.6784000000000003
          }
        }
      },
      "similarity": 2.6784000000000003
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-400",
      "CWE-416",
      "CWE-770",
      "CWE-125",
      "CWE-787",
      "CWE-833",
      "CWE-413",
      "CWE-362",
      "CWE-119"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}