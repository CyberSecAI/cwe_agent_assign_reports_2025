{
  "cve_id": "CVE-2025-24360",
  "description": "Nuxt is an open-source web development framework for Vue.js. Starting in version 3.8.1 and prior to version 3.15.3, Nuxt allows any websites to send any requests to the development server and read the response due to **default CORS settings**. Users with the default server.cors option using Vite builder may get the source code stolen by malicious websites. Version 3.15.3 fixes the vulnerability.",
  "key_phrases": {
    "rootcause": "default CORS settings",
    "weakness": "",
    "impact": "read response",
    "vector": "",
    "attacker": "",
    "product": "Nuxt",
    "version": "3.8.1 to 3.15.3",
    "component": ""
  },
  "reference_content": "CVE-2025-24360 - Nuxt allows any websites to send any requests to the development server and read the response due to default CORS settings.\n\n**Root cause of vulnerability:**\n\n*   Permissive default CORS settings (`Access-Control-Allow-Origin: *`).\n*   Lack of validation on the Origin header for WebSocket connections.\n*   Lack of validation on the Host header for HTTP requests (mitigated by Chrome 94+ or HTTPS).\n\n**Weaknesses/vulnerabilities present:**\n\n*   Cross-Origin Resource Sharing (CORS) misconfiguration.\n*   Cross-Site WebSocket Hijacking (CSWSH).\n*   DNS rebinding vulnerability.\n\n**Impact of exploitation:**\n\n*   Source code theft by malicious websites.\n*   Access to functionalities not intended for external exposure.\n*   Potential exploitation of plugins sending messages over WebSocket.\n\n**Attack vectors:**\n\n*   Malicious website sending requests to the development server.\n*   Exploiting WebSocket connections without Origin validation.\n*   DNS rebinding attacks (for HTTP servers).\n\n**Required attacker capabilities/position:**\n\n*   Ability to serve a malicious web page.\n*   User accessing the malicious web page.\n\n**Mitigation or fix:**\n\n*   Upgrade to Nuxt version >=3.15.3.\n*   For affected versions:\n    *   Set `server.cors` to `false` or limit `server.cors.origin` to trusted origins.\n    *   For backend integration, set `server.origin` and `server.cors.origin`.\n    *   For reverse proxies, use `server.allowedHosts`.\n    *   For accessing via a domain other than `localhost`, use `server.allowedHosts`.\n    *   For plugins connecting to WebSocket, upgrade the plugin or set `legacy.skipWebSocketTokenCheck: true` (with security implications).\n*   Use HTTPS for the development server.\n\n**Additional Details:**\n\nThe content provides more detail than the official CVE description, including specific file locations and code snippets related to the vulnerability and its fix. It also details the impact on different components (Vite, Nitro, plugins).",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-942 | Permissive Cross-domain Policy with Untrusted Domains | 0.9 | Variant | Allowed | Primary CWE |\n| CWE-1385 | Missing Origin Validation in WebSockets | 0.7 | Variant | Allowed | Secondary Candidate |\n| CWE-918 | Server-Side Request Forgery (SSRF) | 0.6 | Base | Allowed | Secondary Candidate |\n| CWE-923 | Improper Restriction of Communication Channel to Intended Endpoints | 0.5 | Class | Allowed-with-Review | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE selected, CWE-942, is a Variant of the broader Class CWE-923 (Improper Restriction of Communication Channel to Intended Endpoints). CWE-942 directly addresses the specific issue of permissive cross-domain policies, which is the **root cause** described in the vulnerability. CWE-1385 (Missing Origin Validation in WebSockets) is also a Variant that is relevant due to the mention of WebSocket connections. Both CWE-942 and CWE-1385 are related to the broader issue of improper restriction of communication, but CWE-942 more precisely captures the **default CORS settings** issue.\n\n```mermaid\ngraph TD\n    cwe942[\"CWE-942: Permissive Cross-domain Policy with Untrusted Domains\"]\n    cwe923[\"CWE-923: Improper Restriction of Communication Channel to Intended Endpoints\"]\n    cwe1385[\"CWE-1385: Missing Origin Validation in WebSockets\"]\n    cwe918[\"CWE-918: Server-Side Request Forgery (SSRF)\"]\n    \n    cwe942 -->|CHILDOF| cwe923\n    cwe1385 -->|CHILDOF| cwe923\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe942 primary\n    class cwe1385,cwe918,cwe923 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **default CORS settings** being overly permissive (CWE-942). This leads to the ability of malicious websites to send requests to the development server and read the response. The lack of origin validation in WebSockets (CWE-1385) and Host header validation contributes to the problem. The impact is source code theft and potential exploitation of other functionalities.\n\n## Summary of Analysis\nThe analysis indicates that the **root cause** of the vulnerability is the **default CORS settings** in Nuxt, which allows any website to send requests to the development server and read the response. This aligns directly with CWE-942 (Permissive Cross-domain Policy with Untrusted Domains).\n\nThe evidence includes:\n- The Vulnerability Description Key Phrases stating: \"**rootcause:** **default CORS settings**\"\n- The CVE Reference Links Content Summary stating: \"Nuxt allows any websites to send any requests to the development server and read the response due to default CORS settings.\"\n\nThe relationship analysis confirms that CWE-942 is the most specific and appropriate CWE, being a Variant of CWE-923. While other CWEs like CWE-918 (Server-Side Request Forgery) and CWE-1385 (Missing Origin Validation in WebSockets) are relevant, CWE-942 best represents the primary weakness.\n\nCWEs considered but not used:\n- CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') - While XSS could be a consequence of the vulnerability, it's not the direct **root cause**. The vulnerability is about the misconfiguration of CORS allowing external access.\n- CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection') and CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting') - These are related to HTTP header manipulation, which is not the primary issue. The core problem is the permissive CORS policy.\n- CWE-306: Missing Authentication for Critical Function - While authentication is related to security, the core issue is not missing authentication, but rather the misconfiguration of CORS.\n- CWE-425: Direct Request ('Forced Browsing') - This is more about unauthorized access due to lack of authorization checks, whereas the identified issue is about the misconfiguration of CORS allowing the requests in the first place.\n- CWE-863: Incorrect Authorization - This is too general. CWE-942 is more specific to the CORS misconfiguration.\n- CWE-1390: Weak Authentication - Authentication is not the primary problem.\n- CWE-269: Improper Privilege Management - Privilege management is not the primary problem.\n\nThe selected CWEs are at the optimal level of specificity because they directly address the **root cause** and contributing factors of the vulnerability, as evidenced by the vulnerability description and CVE summary.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-942 | Permissive Cross-domain Policy with Untrusted Domains | 0.9 | Variant | Allowed | Primary CWE |\n| CWE-1385 | Missing Origin Validation in WebSockets | 0.7 | Variant | Allowed | Secondary Candidate |\n| CWE-918 | Server-Side Request Forgery (SSRF) | 0.6 | Base | Allowed | Secondary Candidate |\n| CWE-923 | Improper Restriction of Communication Channel to Intended Endpoints | 0.5 | Class | Allowed-with-Review | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary CWE selected, CWE-942, is a Variant of the broader Class CWE-923 (Improper Restriction of Communication Channel to Intended Endpoints). CWE-942 directly addresses the specific issue of permissive cross-domain policies, which is the **root cause** described in the vulnerability. CWE-1385 (Missing Origin Validation in WebSockets) is also a Variant that is relevant due to the mention of WebSocket connections. Both CWE-942 and CWE-1385 are related to the broader issue of improper restriction of communication, but CWE-942 more precisely captures the **default CORS settings** issue.\n\n```mermaid\ngraph TD\n    cwe942[\"CWE-942: Permissive Cross-domain Policy with Untrusted Domains\"]\n    cwe923[\"CWE-923: Improper Restriction of Communication Channel to Intended Endpoints\"]\n    cwe1385[\"CWE-1385: Missing Origin Validation in WebSockets\"]\n    cwe918[\"CWE-918: Server-Side Request Forgery (SSRF)\"]\n    \n    cwe942 -->|CHILDOF| cwe923\n    cwe1385 -->|CHILDOF| cwe923\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe942 primary\n    class cwe1385,cwe918,cwe923 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **default CORS settings** being overly permissive (CWE-942). This leads to the ability of malicious websites to send requests to the development server and read the response. The lack of origin validation in WebSockets (CWE-1385) and Host header validation contributes to the problem. The impact is source code theft and potential exploitation of other functionalities.\n\n## Summary of Analysis\nThe analysis indicates that the **root cause** of the vulnerability is the **default CORS settings** in Nuxt, which allows any website to send requests to the development server and read the response. This aligns directly with CWE-942 (Permissive Cross-domain Policy with Untrusted Domains).\n\nThe evidence includes:\n- The Vulnerability Description Key Phrases stating: \"**rootcause:** **default CORS settings**\"\n- The CVE Reference Links Content Summary stating: \"Nuxt allows any websites to send any requests to the development server and read the response due to default CORS settings.\"\n\nThe relationship analysis confirms that CWE-942 is the most specific and appropriate CWE, being a Variant of CWE-923. While other CWEs like CWE-918 (Server-Side Request Forgery) and CWE-1385 (Missing Origin Validation in WebSockets) are relevant, CWE-942 best represents the primary weakness.\n\nCWEs considered but not used:\n- CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') - While XSS could be a consequence of the vulnerability, it's not the direct **root cause**. The vulnerability is about the misconfiguration of CORS allowing external access.\n- CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection') and CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting') - These are related to HTTP header manipulation, which is not the primary issue. The core problem is the permissive CORS policy.\n- CWE-306: Missing Authentication for Critical Function - While authentication is related to security, the core issue is not missing authentication, but rather the misconfiguration of CORS.\n- CWE-425: Direct Request ('Forced Browsing') - This is more about unauthorized access due to lack of authorization checks, whereas the identified issue is about the misconfiguration of CORS allowing the requests in the first place.\n- CWE-863: Incorrect Authorization - This is too general. CWE-942 is more specific to the CORS misconfiguration.\n- CWE-1390: Weak Authentication - Authentication is not the primary problem.\n- CWE-269: Improper Privilege Management - Privilege management is not the primary problem.\n\nThe selected CWEs are at the optimal level of specificity because they directly address the **root cause** and contributing factors of the vulnerability, as evidenced by the vulnerability description and CVE summary.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-1390:**\n- 1390 (Weak Authentication) - ROOT\n\n\n**Chain starting from CWE-863:**\n- 863 (Incorrect Authorization) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "942",
        "name": "Permissive Cross-domain Policy with Untrusted Domains",
        "source": "sparse"
      },
      "similarity": 377.8409152340606
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 370.88546739446826
    },
    {
      "metadata": {
        "doc_id": "93",
        "name": "Improper Neutralization of CRLF Sequences ('CRLF Injection')",
        "source": "sparse"
      },
      "similarity": 367.6506510901312
    },
    {
      "metadata": {
        "doc_id": "1390",
        "name": "Weak Authentication",
        "source": "sparse"
      },
      "similarity": 366.16695877810406
    },
    {
      "metadata": {
        "doc_id": "306",
        "name": "Missing Authentication for Critical Function",
        "source": "sparse"
      },
      "similarity": 361.8579297313786
    },
    {
      "metadata": {
        "doc_id": "918",
        "name": "Server-Side Request Forgery (SSRF)",
        "source": "sparse"
      },
      "similarity": 359.77519256243045
    },
    {
      "metadata": {
        "doc_id": "923",
        "name": "Improper Restriction of Communication Channel to Intended Endpoints",
        "source": "sparse"
      },
      "similarity": 357.21635220231656
    },
    {
      "metadata": {
        "doc_id": "269",
        "name": "Improper Privilege Management",
        "source": "sparse"
      },
      "similarity": 356.60455267580437
    },
    {
      "metadata": {
        "doc_id": "1385",
        "name": "Missing Origin Validation in WebSockets",
        "type": "Variant",
        "original_content": "The product uses a WebSocket, but it does not properly verify that the source of data or communication is valid.",
        "keyphrase_source": "rootcause:default CORS settings",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.3805831822632218
          }
        }
      },
      "similarity": 0.3805831822632218
    },
    {
      "doc_id": "79",
      "text": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
      "score": 0.43044778252882976,
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "type": "Base",
        "extended_description": "\n\nCross-site scripting (XSS) vulnerabilities occur when:\n\n\n  1. Untrusted data enters a web application, typically from a web request.\n\n  1. The web application dynamically generates a web page that contains this untrusted data.\n\n  1. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc.\n\n  1. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data.\n\n  1. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain.\n\n  1. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain.\n\nThere are three main kinds of XSS:\n\n  -  **Type 1: Reflected XSS (or Non-Persistent)**  - The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.\n\n  -  **Type 2: Stored XSS (or Persistent)**  - The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs. \n\n  -  **Type 0: DOM-Based XSS**  - In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible. \n\nOnce the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as \"drive-by hacking.\"\n\nIn many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.\n",
        "alternate_terms": [
          "XSS",
          "HTML Injection",
          "CSS"
        ],
        "original_content": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
        "relationships": [
          {
            "source_id": "79",
            "target_id": "87",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "86",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "85",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "84",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "83",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "81",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "80",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "113",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "352",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "494",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "74",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "79",
            "target_id": "74",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "87",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "86",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "85",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "84",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "83",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "81",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "80",
            "target_id": "79",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "74",
            "target_id": "79",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "494",
            "target_id": "79",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "79",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "113",
            "target_id": "79",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "source": "graph",
        "sources": [
          "vector",
          "graph"
        ],
        "vector_score": 0.43044778252882976,
        "graph_score": 3.757,
        "score_components": {
          "relationship_chain": 0.8,
          "explicit_mention": 1.0,
          "abstraction_path": 0.9,
          "peer_group": 0.9
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "93",
                  "113",
                  "PARENTOF"
                ],
                [
                  "113",
                  "79",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "relationship_chain",
              "source": "93"
            },
            "peer_relationship": {
              "path": [
                [
                  "79",
                  "352",
                  "PEEROF"
                ]
              ],
              "score": 0.9,
              "type": "peer_relationship",
              "source": "352"
            }
          }
        },
        "is_explicit": true,
        "abstraction_level": "base",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.3495433863321668,
            "graph": 2.426379113011532
          }
        }
      },
      "similarity": 2.426379113011532
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-1390",
      "CWE-863",
      "CWE-93",
      "CWE-79",
      "CWE-113",
      "CWE-923",
      "CWE-306",
      "CWE-269",
      "CWE-1385",
      "CWE-918",
      "CWE-942",
      "CWE-425"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}