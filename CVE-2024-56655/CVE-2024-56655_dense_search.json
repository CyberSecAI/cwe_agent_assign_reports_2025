{
  "retriever": "dense",
  "query": "In the Linux kernel, the following vulnerability has been resolved netfilter nf_tables do not defer rule destruction via call_rcu nf_tables_chain_destroy can sleep, it cant be used from call_rcu callbacks. Moreover, nf_tables_rule_release() is only safe for error unwinding, while transaction mutex is held and the to-be-desroyed rule was not exposed to either dataplane or dumps, as it deactives+frees without the required synchronize_rcu() in-between. nft_rule_expr_deactivate() callbacks will change ->use counters of other chains/sets, see e.g. nft_lookup .deactivate callback, these must be serialized via transaction mutex. Also add a few lockdep asserts to make this more explicit. Calling synchronize_rcu() isnt ideal, but fixing this without is hard and way more intrusive. As-is, we can get WARNING .. net/netfilter/nf_tables_api.c5515 nft_set_destroy+0x.. Workqueue events nf_tables_trans_destroy_work RIP 0010nft_set_destroy+0x3fe/0x5c0 Call Trace nf_tables_trans_destroy_work+0x6b7/0xad0 process_one_work+0x64a/0xce0 worker_thread+0x613/0x10d0 In case the synchronize_rcu becomes an issue, we can explore alternatives. One way would be to allocate nft_trans_rule objects + one nft_trans_chain object, deactivate the rules + the chain and then defer the freeing to the nft destroy workqueue. Wed still need to keep the synchronize_rcu path as a fallback to handle -ENOMEM corner cases though.",
  "keyphrases": {
    "rootcause": [
      "nf_tables_chain_destroy can sleep"
    ]
  },
  "timestamp": "2025-07-12 06:42:37",
  "cve_id": "CVE-2024-56655",
  "result_count": 20,
  "results": [
    {
      "cwe_id": "833",
      "name": "Deadlock",
      "type": "Base",
      "score": 0.4557425744466966
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "type": "Class",
      "score": 0.4513053498091737
    },
    {
      "cwe_id": "835",
      "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
      "type": "Base",
      "score": 0.4510476399431961
    },
    {
      "cwe_id": "775",
      "name": "Missing Release of File Descriptor or Handle after Effective Lifetime",
      "type": "Variant",
      "score": 0.4456030762496736
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "type": "Class",
      "score": 0.44500627009411314
    },
    {
      "cwe_id": "401",
      "name": "Missing Release of Memory after Effective Lifetime",
      "type": "Variant",
      "score": 0.4421188520854271
    },
    {
      "cwe_id": "617",
      "name": "Reachable Assertion",
      "type": "Base",
      "score": 0.4396668106193671
    },
    {
      "cwe_id": "909",
      "name": "Missing Initialization of Resource",
      "type": "Class",
      "score": 0.4389683855951553
    },
    {
      "cwe_id": "911",
      "name": "Improper Update of Reference Count",
      "type": "Base",
      "score": 0.43537368865867754
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "type": "Base",
      "score": 0.4340491191991268
    },
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "type": "Base",
      "score": 0.4227988710424903
    },
    {
      "cwe_id": "763",
      "name": "Release of Invalid Pointer or Reference",
      "type": "Base",
      "score": 0.4213729174450068
    },
    {
      "cwe_id": "366",
      "name": "Race Condition within a Thread",
      "type": "Base",
      "score": 0.41855506680524834
    },
    {
      "cwe_id": "606",
      "name": "Unchecked Input for Loop Condition",
      "type": "Base",
      "score": 0.41667420404016137
    },
    {
      "cwe_id": "772",
      "name": "Missing Release of Resource after Effective Lifetime",
      "type": "Base",
      "score": 0.41218375956796816
    },
    {
      "cwe_id": "663",
      "name": "Use of a Non-reentrant Function in a Concurrent Context",
      "type": "Base",
      "score": 0.40973238642495685
    },
    {
      "cwe_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "type": "Base",
      "score": 0.40918444620293726
    },
    {
      "cwe_id": "404",
      "name": "Improper Resource Shutdown or Release",
      "type": "Class",
      "score": 0.40868649419256653
    },
    {
      "cwe_id": "413",
      "name": "Improper Resource Locking",
      "type": "Base",
      "score": 0.4085167202978335
    },
    {
      "cwe_id": "252",
      "name": "Unchecked Return Value",
      "type": "Base",
      "score": 0.40477284076142356
    }
  ]
}