{
  "method": "sparse_rootcause_1",
  "query": "In the Linux kernel, the following vulnerability has been resolved netfilter nf_tables do not defer rule destruction via call_rcu nf_tables_chain_destroy can sleep, it cant be used from call_rcu callbacks. Moreover, nf_tables_rule_release() is only safe for error unwinding, while transaction mutex is held and the to-be-desroyed rule was not exposed to either dataplane or dumps, as it deactives+frees without the required synchronize_rcu() in-between. nft_rule_expr_deactivate() callbacks will change ->use counters of other chains/sets, see e.g. nft_lookup .deactivate callback, these must be serialized via transaction mutex. Also add a few lockdep asserts to make this more explicit. Calling synchronize_rcu() isnt ideal, but fixing this without is hard and way more intrusive. As-is, we can get WARNING .. net/netfilter/nf_tables_api.c5515 nft_set_destroy+0x.. Workqueue events nf_tables_trans_destroy_work RIP 0010nft_set_destroy+0x3fe/0x5c0 Call Trace nf_tables_trans_destroy_work+0x6b7/0xad0 process_one_work+0x64a/0xce0 worker_thread+0x613/0x10d0 In case the synchronize_rcu becomes an issue, we can explore alternatives. One way would be to allocate nft_trans_rule objects + one nft_trans_chain object, deactivate the rules + the chain and then defer the freeing to the nft destroy workqueue. Wed still need to keep the synchronize_rcu path as a fallback to handle -ENOMEM corner cases though.",
  "keyphrases": {
    "rootcause": "nf_tables_chain_destroy can sleep"
  },
  "timestamp": "2025-07-12T06:42:37.863570",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 736.1668527981228
    },
    {
      "doc_id": "909",
      "name": "Missing Initialization of Resource",
      "score": 725.5962716276531
    },
    {
      "doc_id": "863",
      "name": "Incorrect Authorization",
      "score": 701.3426661211433
    },
    {
      "doc_id": "502",
      "name": "Deserialization of Untrusted Data",
      "score": 699.532513868372
    },
    {
      "doc_id": "201",
      "name": "Insertion of Sensitive Information Into Sent Data",
      "score": 688.6518266897401
    }
  ]
}