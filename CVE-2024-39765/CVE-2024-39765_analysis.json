{
  "cve_id": "CVE-2024-39765",
  "description": "Multiple **OS command injection** vulnerabilities exist in the internet.cgi set_add_routing() functionality of Wavlink AC3000 M33A8.V5030.210505. A specially crafted HTTP request can lead to arbitrary command execution. An attacker can make an authenticated HTTP request to trigger these vulnerabilities.A command injection vulnerability exists in the `custom_interface` POST parameter.",
  "key_phrases": {
    "component": "internet.cgi set_add_routing() functionality",
    "rootcause": "",
    "vector": "specially crafted HTTP request",
    "weakness": "OS command injection",
    "product": "Wavlink AC3000 M33A8",
    "impact": "command execution, arbitrary command execution",
    "attacker": "",
    "version": "V5030.210505"
  },
  "reference_content": "Root cause of vulnerability:\nThe Wavlink AC3000 router's `internet.cgi` script does not properly sanitize user-supplied input from HTTP POST requests before using it in system commands executed via `popen`. Specifically, the `netmask`, `gateway`, `dest`, `custom_interface`, `interface`, `hostnet`, and `comment` parameters are vulnerable.\n\nWeaknesses/vulnerabilities present:\n- Improper Neutralization of Special Elements used in a Command (\u2018Command Injection\u2019) - CWE-77\n- Lack of input validation/sanitization in the `internet.cgi` script.\n- Use of `popen` with unsanitized input.\n\nImpact of exploitation:\n- Arbitrary command execution on the router.\n\nAttack vectors:\n- An attacker can send a crafted HTTP POST request to the `internet.cgi` script with malicious input in the vulnerable parameters.\n- Requires network access to the device.\n- Requires authentication (a valid session cookie).\n\nRequired attacker capabilities/position:\n- Authenticated network access to the Wavlink AC3000 router (i.e., a valid session cookie).\n- Knowledge of the vulnerable parameters and how to craft a malicious HTTP POST request.\n\nMitigation or fix:\n- The report does not specify a fix, but implies that proper input validation and sanitization are required to prevent command injection. The vendor was contacted and is working on patches, but the product has been discontinued.\n\nThis content provides more detail than the official CVE description. It details the specific vulnerable parameters, the functions involved, and the exact locations in the code where the vulnerability exists. It also provides a timeline of vendor communication.\n\n\n\nCVE-2024-39765 is one of several CVEs (CVE-2024-39762, CVE-2024-39763, CVE-2024-39764) reported in the same Talos vulnerability report.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-78 | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | 1.0 | Base | Allowed | Primary CWE: This CWE directly addresses the **OS command injection** vulnerability. |\n| CWE-20 | Improper Input Validation | 0.7 | Class | Discouraged | Secondary candidate: There is a **lack of input validation/sanitization** |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary relationship influencing the CWE selection is the hierarchical relationship between CWE-78 (Base) and its parent CWEs. While CWE-20 (Improper Input Validation) could be considered a broader cause, CWE-78 provides a more specific classification of the vulnerability. The chain relationship highlights the progression from **improper input validation** to **OS command injection**, ultimately leading to arbitrary command execution.\n\n```mermaid\ngraph TD\n    cwe78[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"]\n    cwe20[\"CWE-20: Improper Input Validation\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n\n    cwe78 -->|CHILDOF| cwe74\n    cwe74 -->|CHILDOF| cwe20\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe78 primary\n    class cwe20 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with the **lack of input validation** which results in **OS Command Injection**, leading to arbitrary command execution.\n\n*   **Root Cause:** **Lack of input validation/sanitization**\n*   **Weakness:** **OS Command Injection** (CWE-78)\n*   **Impact:** Arbitrary command execution\n\n## Summary of Analysis\n\nThe initial analysis strongly points to CWE-78 (Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')) as the primary CWE due to the explicit mention of \"**OS command injection**\" in the vulnerability description and the CVE Reference Links Content Summary. The summary states the `internet.cgi` script **does not properly sanitize user-supplied input** before using it in system commands executed via `popen`. Specifically, the `netmask`, `gateway`, `dest`, `custom_interface`, `interface`, `hostnet`, and `comment` parameters are vulnerable.\n\nThe retriever results also list CWE-78 as the top candidate.\n\nThe relationships between CWEs helped to confirm this assessment. While CWE-20 (Improper Input Validation) is a valid consideration, it's a broader class. CWE-78 provides a more specific and accurate representation of the vulnerability.\n\nThe chosen CWEs are at the optimal level of specificity, focusing on the root cause (**OS command injection**) and a contributing factor (**lack of input validation**).\n\nRelevant CWE Information:\n\n*   CWE-78 directly matches the vulnerability description, focusing on **improper neutralization** leading to **OS command injection**.\n*   CWE-20 represents the **lack of input validation**, which contributes to the **OS command injection** vulnerability.",
  "analysis_with_relationships": "# Summary\n\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-78 | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | 1.0 | Base | Allowed | Primary CWE: This CWE directly addresses the **OS command injection** vulnerability. |\n| CWE-20 | Improper Input Validation | 0.7 | Class | Discouraged | Secondary candidate: There is a **lack of input validation/sanitization** |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary relationship influencing the CWE selection is the hierarchical relationship between CWE-78 (Base) and its parent CWEs. While CWE-20 (Improper Input Validation) could be considered a broader cause, CWE-78 provides a more specific classification of the vulnerability. The chain relationship highlights the progression from **improper input validation** to **OS command injection**, ultimately leading to arbitrary command execution.\n\n```mermaid\ngraph TD\n    cwe78[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"]\n    cwe20[\"CWE-20: Improper Input Validation\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n\n    cwe78 -->|CHILDOF| cwe74\n    cwe74 -->|CHILDOF| cwe20\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe78 primary\n    class cwe20 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with the **lack of input validation** which results in **OS Command Injection**, leading to arbitrary command execution.\n\n*   **Root Cause:** **Lack of input validation/sanitization**\n*   **Weakness:** **OS Command Injection** (CWE-78)\n*   **Impact:** Arbitrary command execution\n\n## Summary of Analysis\n\nThe initial analysis strongly points to CWE-78 (Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')) as the primary CWE due to the explicit mention of \"**OS command injection**\" in the vulnerability description and the CVE Reference Links Content Summary. The summary states the `internet.cgi` script **does not properly sanitize user-supplied input** before using it in system commands executed via `popen`. Specifically, the `netmask`, `gateway`, `dest`, `custom_interface`, `interface`, `hostnet`, and `comment` parameters are vulnerable.\n\nThe retriever results also list CWE-78 as the top candidate.\n\nThe relationships between CWEs helped to confirm this assessment. While CWE-20 (Improper Input Validation) is a valid consideration, it's a broader class. CWE-78 provides a more specific and accurate representation of the vulnerability.\n\nThe chosen CWEs are at the optimal level of specificity, focusing on the root cause (**OS command injection**) and a contributing factor (**lack of input validation**).\n\nRelevant CWE Information:\n\n*   CWE-78 directly matches the vulnerability description, focusing on **improper neutralization** leading to **OS command injection**.\n*   CWE-20 represents the **lack of input validation**, which contributes to the **OS command injection** vulnerability.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-74:**\n- 74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')) - ROOT\n\n\n**Chain starting from CWE-78:**\n- 78 (Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "78",
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: OS Command Injection",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "77",
        "name": "Improper Neutralization of Special Elements used in a Command ('Command Injection')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: Command injection",
        "match_reason": "term_in_phrase_whole_phrase"
      },
      "similarity": 800.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "sparse"
      },
      "similarity": 355.3766633737242
    },
    {
      "metadata": {
        "doc_id": "1287",
        "name": "Improper Validation of Specified Type of Input",
        "source": "sparse"
      },
      "similarity": 341.5728623246737
    },
    {
      "metadata": {
        "doc_id": "134",
        "name": "Use of Externally-Controlled Format String",
        "source": "sparse"
      },
      "similarity": 339.84369185698733
    },
    {
      "metadata": {
        "doc_id": "138",
        "name": "Improper Neutralization of Special Elements",
        "source": "sparse"
      },
      "similarity": 321.4454766333775
    },
    {
      "metadata": {
        "doc_id": "120",
        "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
        "source": "sparse"
      },
      "similarity": 308.48632804666863
    },
    {
      "metadata": {
        "doc_id": "790",
        "name": "Improper Filtering of Special Elements",
        "source": "sparse"
      },
      "similarity": 306.85361504928403
    },
    {
      "metadata": {
        "doc_id": "121",
        "name": "Stack-based Buffer Overflow",
        "type": "Variant",
        "original_content": "A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).",
        "keyphrase_source": "weakness:OS command injection",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.6267265267339786
          }
        }
      },
      "similarity": 0.6267265267339786
    },
    {
      "doc_id": "123",
      "text": "CWE-123: Write-what-where Condition",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "123",
        "name": "Write-what-where Condition",
        "type": "base",
        "original_content": "CWE-123: Write-what-where Condition",
        "relationships": [
          {
            "source_id": "123",
            "target_id": "590",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "479",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "416",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "364",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "134",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "120",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "119",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1340"
            }
          },
          {
            "source_id": "123",
            "target_id": "119",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1305"
            }
          },
          {
            "source_id": "123",
            "target_id": "787",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "787",
            "target_id": "123",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "590",
            "target_id": "123",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "479",
            "target_id": "123",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "416",
            "target_id": "123",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "415",
            "target_id": "123",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "364",
            "target_id": "123",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "134",
            "target_id": "123",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "120",
            "target_id": "123",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "119",
            "target_id": "123",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1305"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "134",
                  "123",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "134"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "134",
                  "123",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_forward",
              "source": "134"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-74",
      "CWE-78",
      "CWE-20"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}