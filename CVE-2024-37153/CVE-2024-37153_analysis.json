{
  "cve_id": "CVE-2024-37153",
  "description": "Evmos is the Ethereum Virtual Machine (EVM) Hub on the Cosmos Network. There is an issue with how to liquid stake using Safe which itself is a contract. The bug only appears when there is a local state change together with an ICS20 transfer in the same function and uses the contracts balance, that is using the contract address as the sender parameter in an ICS20 transfer using the ICS20 precompile. This is in essence the **infinite money glitch** allowing contracts to double the supply of Evmos after each transaction.The issue has been patched in versions >=V18.1.0.",
  "key_phrases": {
    "rootcause": "infinite money glitch",
    "weakness": "improper local state change handling",
    "impact": "double Evmos supply",
    "vector": "",
    "attacker": "",
    "product": "Evmos",
    "version": "<V18.1.0",
    "component": ""
  },
  "reference_content": "Based on the provided content, here's an analysis of CVE-2024-37153:\n\n**Root Cause of Vulnerability:**\nThe vulnerability stems from an incorrect balance update when a smart contract makes an Inter-Blockchain Communication (IBC) transfer via the ICS20 precompile. Specifically, when a contract initiates an ICS20 transfer using its own address as the sender, combined with a local state change within the same function, the contract's balance is not correctly reduced in the EVM state. This leads to a discrepancy between the actual funds held by the contract and its tracked balance, due to the changes not being mirrored to the EVM stateDB.\n\n**Weaknesses/Vulnerabilities Present:**\n- Incorrect balance handling in the EVM state when a contract uses the ICS20 precompile for transfers while also making local state changes.\n- The contract's balance in the EVM state isn't correctly reduced, which does not reflect the actual funds being transferred out via the ICS20 precompile.\n- Lack of proper synchronization between the bank keeper and EVM stateDB when transferring tokens from a contract's balance using the ICS20 precompile.\n\n**Impact of Exploitation:**\n- **\"Infinite money glitch\":** By exploiting this vulnerability, contracts could effectively duplicate the supply of tokens (EVMOS in this case) each time a transfer is made, as the contract balance is not being reduced.\n- **Direct loss of funds' value:** The ability to generate new supply of tokens can lead to a loss in the value of existing tokens.\n- **Potential for arbitrary inflation:** Repeated exploitation could lead to uncontrolled inflation of the EVMOS token.\n\n**Attack Vectors:**\n- Smart contracts utilizing the ICS20 precompile and transferring tokens from their own balance.\n- Requires a function that both updates local state and performs an ICS20 transfer using the contract's address as the sender.\n\n**Required Attacker Capabilities/Position:**\n- The attacker needs to deploy and control a smart contract on the Evmos blockchain.\n- The smart contract must interact with the ICS20 precompile.\n- The attacker has to trigger the vulnerable function, causing an ICS20 transfer and a local state change.\n- The attacker does not need any special privileges beyond the ability to deploy and call a smart contract on the blockchain.\n\n**Additional Notes:**\n- The vulnerability was identified when interacting with a contract through Safe, which is itself a contract.\n- The issue is triggered when there's a local state change alongside an ICS20 transfer where the contract is the sender.\n- The vulnerability has been patched in versions >=V18.1.0.\n- The provided code includes a detailed proof-of-concept and test case for the vulnerability using a custom smart contract.\n- The patch includes a fix where the `StateDB.SubBalance` is correctly called to update the balance in the stateDB when the contract is the caller and the token being transferred is the native bond denom. Also, the commit fixes the sender address to be the origin address.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-770 | Allocation of Resources Without Limits or Throttling | 0.9 | Base | Allowed | Primary CWE |\n| CWE-789 | Memory Allocation with Excessive Size Value | 0.7 | Variant | Allowed | Secondary Candidate |\n| CWE-400 | Uncontrolled Resource Consumption | 0.6 | Class | Allowed | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary CWE selected is CWE-770, which addresses the **allocation of resources without limits or throttling**. This is a Base-level CWE. CWE-789 is a Variant of CWE-770 and represents a more specific case of allocating memory with an excessive size value. CWE-400 is a parent Class of CWE-770 and represents a more general case of uncontrolled resource consumption. The relationships between these CWEs influenced the decision to select CWE-770 as the primary, as it best captures the specific vulnerability described.\n\n```mermaid\ngraph TD\n    cwe770[\"CWE-770: Allocation of Resources Without Limits or Throttling\"]\n    cwe789[\"CWE-789: Memory Allocation with Excessive Size Value\"]\n    cwe400[\"CWE-400: Uncontrolled Resource Consumption\"]\n    \n    cwe789 -->|CHILDOF| cwe770\n    cwe770 -->|CHILDOF| cwe400\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe770 primary\n    class cwe789,cwe400 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with the **improper handling of local state changes** in conjunction with ICS20 transfers. This leads to an **incorrect balance update**, which allows for the allocation of more resources (tokens) than intended, resulting in an **infinite money glitch**.\n\nRoot Cause: **Improper local state change handling** leading to **incorrect balance update**\nWeakness: **Allocation of Resources Without Limits or Throttling (CWE-770)**\nImpact: **\"Infinite money glitch\"**, leading to a doubled Evmos supply.\n\n## Summary of Analysis\nThe primary assessment focuses on the **allocation of resources without limits or throttling (CWE-770)** because the vulnerability enables contracts to effectively double the supply of Evmos tokens after each transaction due to **incorrect balance handling** when making inter-blockchain communication transfers. This aligns well with the description of CWE-770, which emphasizes the absence of restrictions on the size or number of resources allocated. The \"CVE Reference Links Content Summary\" section explicitly mentions this **incorrect balance handling** as a key weakness.\n\nThe retriever results and graph relationships supported this choice by highlighting the connection between CWE-770 and its related CWEs, such as CWE-789 (Memory Allocation with Excessive Size Value) and CWE-400 (Uncontrolled Resource Consumption). While CWE-789 is a more specific variant, the description focuses on the general lack of limits on resource allocation, making CWE-770 the more appropriate primary classification.\n\nCWE-1284 (Improper Validation of Specified Quantity in Input) was considered but not selected because the core issue is not about the validation of the input quantity itself, but rather the **improper handling of state changes** that leads to the incorrect balance, therefore the focus should be on the uncontrolled allocation enabled by this flaw. Similarly, CWE-835 (Loop with Unreachable Exit Condition ('Infinite Loop')) was not chosen because the vulnerability doesn't involve an infinite loop in the traditional sense, but rather the ability to repeatedly generate tokens due to the **incorrect balance update**.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-770: Allocation of Resources Without Limits or Throttling\n**Abstraction Level**: Base\n**Similarity Score**: 1213.72\n**Source**: sparse\n\n**Description**:\nThe product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-789: Memory Allocation with Excessive Size Value\n**Abstraction Level**: Variant\n**Similarity Score**: 1194.37\n**Source**: sparse\n\n**Description**:\nThe product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-770 | Allocation of Resources Without Limits or Throttling | 0.9 | Base | Allowed | Primary CWE |\n| CWE-789 | Memory Allocation with Excessive Size Value | 0.7 | Variant | Allowed | Secondary Candidate |\n| CWE-400 | Uncontrolled Resource Consumption | 0.6 | Class | Allowed | Secondary Candidate |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** MEDIUM\n\n## Relationship Analysis\nThe primary CWE selected is CWE-770, which addresses the **allocation of resources without limits or throttling**. This is a Base-level CWE. CWE-789 is a Variant of CWE-770 and represents a more specific case of allocating memory with an excessive size value. CWE-400 is a parent Class of CWE-770 and represents a more general case of uncontrolled resource consumption. The relationships between these CWEs influenced the decision to select CWE-770 as the primary, as it best captures the specific vulnerability described.\n\n```mermaid\ngraph TD\n    cwe770[\"CWE-770: Allocation of Resources Without Limits or Throttling\"]\n    cwe789[\"CWE-789: Memory Allocation with Excessive Size Value\"]\n    cwe400[\"CWE-400: Uncontrolled Resource Consumption\"]\n    \n    cwe789 -->|CHILDOF| cwe770\n    cwe770 -->|CHILDOF| cwe400\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe770 primary\n    class cwe789,cwe400 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with the **improper handling of local state changes** in conjunction with ICS20 transfers. This leads to an **incorrect balance update**, which allows for the allocation of more resources (tokens) than intended, resulting in an **infinite money glitch**.\n\nRoot Cause: **Improper local state change handling** leading to **incorrect balance update**\nWeakness: **Allocation of Resources Without Limits or Throttling (CWE-770)**\nImpact: **\"Infinite money glitch\"**, leading to a doubled Evmos supply.\n\n## Summary of Analysis\nThe primary assessment focuses on the **allocation of resources without limits or throttling (CWE-770)** because the vulnerability enables contracts to effectively double the supply of Evmos tokens after each transaction due to **incorrect balance handling** when making inter-blockchain communication transfers. This aligns well with the description of CWE-770, which emphasizes the absence of restrictions on the size or number of resources allocated. The \"CVE Reference Links Content Summary\" section explicitly mentions this **incorrect balance handling** as a key weakness.\n\nThe retriever results and graph relationships supported this choice by highlighting the connection between CWE-770 and its related CWEs, such as CWE-789 (Memory Allocation with Excessive Size Value) and CWE-400 (Uncontrolled Resource Consumption). While CWE-789 is a more specific variant, the description focuses on the general lack of limits on resource allocation, making CWE-770 the more appropriate primary classification.\n\nCWE-1284 (Improper Validation of Specified Quantity in Input) was considered but not selected because the core issue is not about the validation of the input quantity itself, but rather the **improper handling of state changes** that leads to the incorrect balance, therefore the focus should be on the uncontrolled allocation enabled by this flaw. Similarly, CWE-835 (Loop with Unreachable Exit Condition ('Infinite Loop')) was not chosen because the vulnerability doesn't involve an infinite loop in the traditional sense, but rather the ability to repeatedly generate tokens due to the **incorrect balance update**.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-770: Allocation of Resources Without Limits or Throttling\n**Abstraction Level**: Base\n**Similarity Score**: 1213.72\n**Source**: sparse\n\n**Description**:\nThe product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-789: Memory Allocation with Excessive Size Value\n**Abstraction Level**: Variant\n**Similarity Score**: 1194.37\n**Source**: sparse\n\n**Description**:\nThe product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-1284:**\n- 1284 (Improper Validation of Specified Quantity in Input) - ROOT\n\n\n**Chain starting from CWE-400:**\n- 400 (Uncontrolled Resource Consumption) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "674",
        "name": "Uncontrolled Recursion",
        "source": "sparse"
      },
      "similarity": 510.0329928799432
    },
    {
      "metadata": {
        "doc_id": "212",
        "name": "Improper Removal of Sensitive Information Before Storage or Transfer",
        "source": "sparse"
      },
      "similarity": 506.89121811010773
    },
    {
      "metadata": {
        "doc_id": "1284",
        "name": "Improper Validation of Specified Quantity in Input",
        "source": "sparse"
      },
      "similarity": 503.7876810662392
    },
    {
      "metadata": {
        "doc_id": "770",
        "name": "Allocation of Resources Without Limits or Throttling",
        "source": "sparse"
      },
      "similarity": 498.31494693275545
    },
    {
      "metadata": {
        "doc_id": "345",
        "name": "Insufficient Verification of Data Authenticity",
        "source": "sparse"
      },
      "similarity": 496.40346769948223
    },
    {
      "metadata": {
        "doc_id": "789",
        "name": "Memory Allocation with Excessive Size Value",
        "source": "sparse"
      },
      "similarity": 494.15701327874
    },
    {
      "metadata": {
        "doc_id": "835",
        "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
        "source": "sparse"
      },
      "similarity": 493.12286531737834
    },
    {
      "metadata": {
        "doc_id": "200",
        "name": "Exposure of Sensitive Information to an Unauthorized Actor",
        "source": "sparse"
      },
      "similarity": 486.5450925021698
    },
    {
      "metadata": {
        "doc_id": "1245",
        "name": "Improper Finite State Machines (FSMs) in Hardware Logic",
        "type": "Base",
        "original_content": "Faulty finite state machines (FSMs) in the hardware logic allow an attacker to put the system in an undefined state, to cause a denial of service (DoS) or gain privileges on the victim's system.",
        "keyphrase_source": "weakness:improper local state change handling",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.4191679896921856,
            "graph": 1.451043176401818
          }
        }
      },
      "similarity": 0.4191679896921856
    },
    {
      "doc_id": "201",
      "text": "CWE-201: Insertion of Sensitive Information Into Sent Data",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "201",
        "name": "Insertion of Sensitive Information Into Sent Data",
        "type": "base",
        "original_content": "CWE-201: Insertion of Sensitive Information Into Sent Data",
        "relationships": [
          {
            "source_id": "201",
            "target_id": "598",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "201",
            "target_id": "226",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "201",
            "target_id": "212",
            "label": "CANFOLLOW",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "201",
            "target_id": "202",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "201",
            "target_id": "209",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "201",
            "target_id": "200",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "598",
            "target_id": "201",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "226",
            "target_id": "201",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "212",
            "target_id": "201",
            "label": "CANPRECEDE",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "200",
            "target_id": "201",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "212",
                  "201",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "212"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "212",
                  "201",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_forward",
              "source": "212"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-1284",
      "CWE-400",
      "CWE-770",
      "CWE-835",
      "CWE-789"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}