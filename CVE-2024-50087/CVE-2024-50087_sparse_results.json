{
  "query": "In the Linux kernel, the following vulnerability has been resolved btrfs fix uninitialized pointer free on read_alloc_one_name() error The function read_alloc_one_name() does not initialize the name field of the passed fscrypt_str struct if kmalloc fails to allocate the corresponding buffer. Thus, it is not guaranteed that fscrypt_str.name is initialized when freeing it. This is a follow-up to the linked patch that fixes the remaining instances of the bug introduced by commit e43eec81c516 (btrfs use struct qstr instead of name and namelen pairs).",
  "count": 12,
  "results": [
    {
      "cwe_id": "909",
      "name": "Missing Initialization of Resource",
      "abstraction": "Class",
      "score": 548.1062742587462,
      "original_score": 548.1062742587462,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "252",
      "name": "Unchecked Return Value",
      "abstraction": "Base",
      "score": 489.0454821770687,
      "original_score": 489.0454821770687,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "824",
      "name": "Access of Uninitialized Pointer",
      "abstraction": "Base",
      "score": 484.4768876512218,
      "original_score": 484.4768876512218,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "abstraction": "Class",
      "score": 483.84777312686845,
      "original_score": 483.84777312686845,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "908",
      "name": "Use of Uninitialized Resource",
      "abstraction": "Base",
      "score": 468.3318615250007,
      "original_score": 468.3318615250007,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "abstraction": "Class",
      "score": 467.0835318079776,
      "original_score": 467.0835318079776,
      "mapping_usage": "Allowed-with-Review"
    },
    {
      "cwe_id": "457",
      "name": "Use of Uninitialized Variable",
      "abstraction": "Variant",
      "score": 459.1405888604973,
      "original_score": 459.1405888604973,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "665",
      "name": "Improper Initialization",
      "abstraction": "Class",
      "score": 455.9680439779828,
      "original_score": 455.9680439779828,
      "mapping_usage": "Discouraged"
    },
    {
      "cwe_id": "833",
      "name": "Deadlock",
      "abstraction": "Base",
      "score": 446.0940506788095,
      "original_score": 446.0940506788095,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "415",
      "name": "Double Free",
      "abstraction": "Variant",
      "score": 444.90353129789173,
      "original_score": 444.90353129789173,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "125",
      "name": "Out-of-bounds Read",
      "abstraction": "Base",
      "score": 146.19735187093994,
      "original_score": 146.19735187093994,
      "mapping_usage": "Allowed"
    },
    {
      "cwe_id": "401",
      "name": "Missing Release of Memory after Effective Lifetime",
      "abstraction": "Variant",
      "score": 140.9227024235602,
      "original_score": 140.9227024235602,
      "mapping_usage": "Allowed"
    }
  ],
  "statistics": {
    "min": 140.9227024235602,
    "max": 548.1062742587462,
    "mean": 419.5098399713805,
    "median": 463.1120603342374,
    "count": 12
  }
}