{
  "cve_id": "CVE-2025-5364",
  "description": "A vulnerability was found in Campcodes Online Hospital Management System 1.0 and classified as critical. Affected by this issue is some unknown functionality of the file /doctor/add-patient.php. The manipulation of the argument patname leads to **sql injection**. The attack may be launched remotely. The exploit has been disclosed to the public and may be used.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "sql injection",
    "impact": "",
    "vector": "manipulation of patname argument",
    "attacker": "",
    "product": "Campcodes Online Hospital Management System",
    "version": "1",
    "component": "/doctor/add-patient.php"
  },
  "reference_content": "The content relates to CVE-2025-5364. Here's the extracted information:\n\n**Root cause of vulnerability:**\n\n*   A SQL injection vulnerability was found in the '/hms/doctor/add-patient.php' file of the 'Online Hospital Management System' project. The reason for this issue is that attackers inject malicious code from the parameter 'patname' and use it directly in SQL queries without the need for appropriate cleaning or validation.\n\n**Weaknesses/vulnerabilities present:**\n\n*   SQL injection\n\n**Impact of exploitation:**\n\n*   Attackers can exploit this SQL injection vulnerability to achieve unauthorized database access, sensitive data leakage, data tampering, comprehensive system control, and even service interruption.\n\n**Attack vectors:**\n\n*   The vulnerability exists in the `/hms/doctor/add-patient.php` file.\n*   The 'patname' parameter is vulnerable.\n*   No login or authorization is required to exploit this vulnerability.\n\n**Required attacker capabilities/position:**\n\n*   An attacker needs to be able to send a crafted POST request to `/hms/doctor/add-patient.php` with a malicious payload in the 'patname' parameter.\n\n**Mitigation or fix:**\n\n*   Use prepared statements and parameter binding.\n*   Input validation and filtering.\n*   Minimize database user permissions.\n*   Regular security audits.\n\n**Payload Example:**\n\n```\nParameter: patname (POST)\n    Type: time-based blind\n    Title: MySQL >= 5.0.12 AND time-based blind (query SLEEP)\n    Payload: patname=1' AND (SELECT 4228 FROM (SELECT(SLEEP(5)))akBg) AND 'hfBq'='hfBq&patcontact=1&patemail=111@qq.com&pataddress=1&patage=1&medhis=1&submit=\n```\n\n**Additional Details (more than official CVE description):**\n\n*   The vulnerable software is campcodes Online Hospital Management System V1.0.\n*   A link to the software download is provided: <https://www.campcodes.com/downloads/complete-online-hospital-management-system-using-php-and-mysql-source-code/?wpdmdl=5553&ind=0>\n*   The issue was reported by \u8881\u8d85 (Yuan Chao).\n*   SQLmap was used to verify the vulnerability.\n*   Screenshots of SQLmap output are included.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-89 | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | 1.0 | Base | Allowed | Primary CWE |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship impacting the CWE selection is that CWE-89 is a base-level weakness that directly addresses the root cause described in the vulnerability. While CWE-74 is a parent class, CWE-89 provides a more specific and accurate representation of the **SQL Injection** vulnerability.\n\n```mermaid\ngraph TD\n    cwe89[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n\n    cwe89 -->|CHILDOF| cwe74\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe89 primary\n    class cwe74 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain consists of the following:\n1.  **Root Cause:** Improper neutralization of special elements in SQL commands (CWE-89).\n2.  **Impact:** Unauthorized database access, sensitive data leakage, data tampering, comprehensive system control, and even service interruption.\n\n## Summary of Analysis\nThe analysis is based on direct evidence from the vulnerability description and CVE reference. The key phrase \"**sql injection**\" and the description of how the `patname` argument is manipulated to inject malicious code directly into SQL queries clearly indicate CWE-89. The CVE reference summary explicitly states the **root cause** as a SQL injection vulnerability due to the lack of proper input cleaning or validation. The recommended mitigations (prepared statements, input validation) further support this classification. The retriever results also strongly suggest CWE-89 as the primary weakness.\n\nCWE-74 was considered but not selected as the primary CWE because it is a more general \"Injection\" class, while CWE-89 specifically addresses the SQL Injection vulnerability described. The MITRE mapping guidance discourages using CWE-74 when a lower-level weakness is more appropriate.\nCWE-79 was considered as it is also a common web vulnerability, but is a \"Cross-site Scripting\" vulnerability, and does not fit the description.\nCWE-434 was considered, but is an \"Unrestricted Upload of File with Dangerous Type\" vulnerability, and does not fit the description.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.79\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## Vulnerability Description\nA vulnerability was found in Campcodes Online Hospital Management System 1.0 and classified as critical. Affected by this issue is some unknown functionality of the file /doctor/add-patient.php. The manipulation of the argument patname leads to **sql injection**. The attack may be launched remotely. The exploit has been disclosed to the public and may be used.\n\n### Vulnerability Description Key Phrases\n- **weakness:** **sql injection**\n- **vector:** manipulation of patname argument\n- **product:** Campcodes Online Hospital Management System\n- **version:** 1\n- **component:** /doctor/add-patient.php\n\n## CVE Reference Links Content Summary\nThe content relates to CVE-2025-5364. Here's the extracted information:\n\n**Root cause of vulnerability:**\n\n*   A SQL injection vulnerability was found in the '/hms/doctor/add-patient.php' file of the 'Online Hospital Management System' project. The reason for this issue is that attackers inject malicious code from the parameter 'patname' and use it directly in SQL queries without the need for appropriate cleaning or validation.\n\n**Weaknesses/vulnerabilities present:**\n\n*   SQL injection\n\n**Impact of exploitation:**\n\n*   Attackers can exploit this SQL injection vulnerability to achieve unauthorized database access, sensitive data leakage, data tampering, comprehensive system control, and even service interruption.\n\n**Attack vectors:**\n\n*   The vulnerability exists in the `/hms/doctor/add-patient.php` file.\n*   The 'patname' parameter is vulnerable.\n*   No login or authorization is required to exploit this vulnerability.\n\n**Required attacker capabilities/position:**\n\n*   An attacker needs to be able to send a crafted POST request to `/hms/doctor/add-patient.php` with a malicious payload in the 'patname' parameter.\n\n**Mitigation or fix:**\n\n*   Use prepared statements and parameter binding.\n*   Input validation and filtering.\n*   Minimize database user permissions.\n*   Regular security audits.\n\n**Payload Example:**\n\n```\nParameter: patname (POST)\n    Type: time-based blind\n    Title: MySQL >= 5.0.12 AND time-based blind (query SLEEP)\n    Payload: patname=1' AND (SELECT 4228 FROM (SELECT(SLEEP(5)))akBg) AND 'hfBq'='hfBq&patcontact=1&patemail=111@qq.com&pataddress=1&patage=1&medhis=1&submit=\n```\n\n**Additional Details (more than official CVE description):**\n\n*   The vulnerable software is campcodes Online Hospital Management System V1.0.\n*   A link to the software download is provided: <https://www.campcodes.com/downloads/complete-online-hospital-management-system-using-php-and-mysql-source-code/?wpdmdl=5553&ind=0>\n*   The issue was reported by \u8881\u8d85 (Yuan Chao).\n*   SQLmap was used to verify the vulnerability.\n*   Screenshots of SQLmap output are included.",
  "analysis_with_relationships": "# Summary\n\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-89 | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | 1.0 | Base | Allowed | Primary CWE |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship impacting the CWE selection is that CWE-89 is a base-level weakness that directly addresses the root cause described in the vulnerability. While CWE-74 is a parent class, CWE-89 provides a more specific and accurate representation of the **SQL Injection** vulnerability.\n\n```mermaid\ngraph TD\n    cwe89[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n\n    cwe89 -->|CHILDOF| cwe74\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe89 primary\n    class cwe74 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain consists of the following:\n1.  **Root Cause:** Improper neutralization of special elements in SQL commands (CWE-89).\n2.  **Impact:** Unauthorized database access, sensitive data leakage, data tampering, comprehensive system control, and even service interruption.\n\n## Summary of Analysis\nThe analysis is based on direct evidence from the vulnerability description and CVE reference. The key phrase \"**sql injection**\" and the description of how the `patname` argument is manipulated to inject malicious code directly into SQL queries clearly indicate CWE-89. The CVE reference summary explicitly states the **root cause** as a SQL injection vulnerability due to the lack of proper input cleaning or validation. The recommended mitigations (prepared statements, input validation) further support this classification. The retriever results also strongly suggest CWE-89 as the primary weakness.\n\nCWE-74 was considered but not selected as the primary CWE because it is a more general \"Injection\" class, while CWE-89 specifically addresses the SQL Injection vulnerability described. The MITRE mapping guidance discourages using CWE-74 when a lower-level weakness is more appropriate.\nCWE-79 was considered as it is also a common web vulnerability, but is a \"Cross-site Scripting\" vulnerability, and does not fit the description.\nCWE-434 was considered, but is an \"Unrestricted Upload of File with Dangerous Type\" vulnerability, and does not fit the description.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.79\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## Vulnerability Description\nA vulnerability was found in Campcodes Online Hospital Management System 1.0 and classified as critical. Affected by this issue is some unknown functionality of the file /doctor/add-patient.php. The manipulation of the argument patname leads to **sql injection**. The attack may be launched remotely. The exploit has been disclosed to the public and may be used.\n\n### Vulnerability Description Key Phrases\n- **weakness:** **sql injection**\n- **vector:** manipulation of patname argument\n- **product:** Campcodes Online Hospital Management System\n- **version:** 1\n- **component:** /doctor/add-patient.php\n\n## CVE Reference Links Content Summary\nThe content relates to CVE-2025-5364. Here's the extracted information:\n\n**Root cause of vulnerability:**\n\n*   A SQL injection vulnerability was found in the '/hms/doctor/add-patient.php' file of the 'Online Hospital Management System' project. The reason for this issue is that attackers inject malicious code from the parameter 'patname' and use it directly in SQL queries without the need for appropriate cleaning or validation.\n\n**Weaknesses/vulnerabilities present:**\n\n*   SQL injection\n\n**Impact of exploitation:**\n\n*   Attackers can exploit this SQL injection vulnerability to achieve unauthorized database access, sensitive data leakage, data tampering, comprehensive system control, and even service interruption.\n\n**Attack vectors:**\n\n*   The vulnerability exists in the `/hms/doctor/add-patient.php` file.\n*   The 'patname' parameter is vulnerable.\n*   No login or authorization is required to exploit this vulnerability.\n\n**Required attacker capabilities/position:**\n\n*   An attacker needs to be able to send a crafted POST request to `/hms/doctor/add-patient.php` with a malicious payload in the 'patname' parameter.\n\n**Mitigation or fix:**\n\n*   Use prepared statements and parameter binding.\n*   Input validation and filtering.\n*   Minimize database user permissions.\n*   Regular security audits.\n\n**Payload Example:**\n\n```\nParameter: patname (POST)\n    Type: time-based blind\n    Title: MySQL >= 5.0.12 AND time-based blind (query SLEEP)\n    Payload: patname=1' AND (SELECT 4228 FROM (SELECT(SLEEP(5)))akBg) AND 'hfBq'='hfBq&patcontact=1&patemail=111@qq.com&pataddress=1&patage=1&medhis=1&submit=\n```\n\n**Additional Details (more than official CVE description):**\n\n*   The vulnerable software is campcodes Online Hospital Management System V1.0.\n*   A link to the software download is provided: <https://www.campcodes.com/downloads/complete-online-hospital-management-system-using-php-and-mysql-source-code/?wpdmdl=5553&ind=0>\n*   The issue was reported by \u8881\u8d85 (Yuan Chao).\n*   SQLmap was used to verify the vulnerability.\n*   Screenshots of SQLmap output are included.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-89:**\n- 89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')) - ROOT\n\n\n**Chain starting from CWE-79:**\n- 79 (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: SQL injection",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 419.41753672424414
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "source": "sparse"
      },
      "similarity": 348.21441960336443
    },
    {
      "metadata": {
        "doc_id": "1336",
        "name": "Improper Neutralization of Special Elements Used in a Template Engine",
        "source": "sparse"
      },
      "similarity": 336.53090434980584
    },
    {
      "metadata": {
        "doc_id": "117",
        "name": "Improper Output Neutralization for Logs",
        "source": "sparse"
      },
      "similarity": 326.37450305270016
    },
    {
      "metadata": {
        "doc_id": "99",
        "name": "Improper Control of Resource Identifiers ('Resource Injection')",
        "source": "sparse"
      },
      "similarity": 325.13919939342804
    },
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse"
      },
      "similarity": 323.40039062124475
    },
    {
      "metadata": {
        "doc_id": "74",
        "name": "Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')",
        "source": "sparse"
      },
      "similarity": 320.2104172651284
    },
    {
      "metadata": {
        "doc_id": "96",
        "name": "Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')",
        "type": "Base",
        "original_content": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.",
        "keyphrase_source": "weakness:sql injection",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5719125807612919,
            "graph": 1.68254018422666
          }
        }
      },
      "similarity": 0.5719125807612919
    },
    {
      "doc_id": "93",
      "text": "CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "93",
        "name": "Improper Neutralization of CRLF Sequences ('CRLF Injection')",
        "type": "base",
        "original_content": "CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')",
        "relationships": [
          {
            "source_id": "93",
            "target_id": "113",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "93",
            "target_id": "117",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "93",
            "target_id": "74",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "74",
            "target_id": "93",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "145",
            "target_id": "93",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "144",
            "target_id": "93",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "117",
            "target_id": "93",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "113",
            "target_id": "93",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "117",
                  "93",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "117"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "117",
                  "93",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "117"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "93",
                  "117",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "117"
            }
          }
        },
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-89",
      "CWE-79",
      "CWE-74",
      "CWE-434"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}