{
  "retriever": "dense",
  "query": "In the Linux kernel, the following vulnerability has been resolved bpf Fail bpf_timer_cancel when callback is being cancelled Given a schedule timer1 cbtimer2 cb bpf_timer_cancel(timer2)bpf_timer_cancel(timer1) Both bpf_timer_cancel calls would wait for the other callback to finish executing, introducing a lockup. Add an atomic_t count named cancelling in bpf_hrtimer. This keeps track of all in-flight cancellation requests for a given BPF timer. Whenever cancelling a BPF timer, we must check if we have outstanding cancellation requests, and if so, we must fail the operation with an error (-EDEADLK) since cancellation is synchronous and waits for the callback to finish executing. This implies that we can enter a deadlock situation involving two or more timer callbacks executing in parallel and attempting to cancel one another. Note that we avoid incrementing the cancelling counter for the target timer (the one being cancelled) if bpf_timer_cancel is not invoked from a callback, to avoid spurious errors. The whole point of detecting cur->cancelling and returning -EDEADLK is to not enter a busy wait loop (which may or may not lead to a lockup). This does not apply in case the caller is in a non-callback context, the other side can continue to cancel as it sees fit without running into errors. Background on prior attempts Earlier versions of this patch used a bool cancelling bit and used the following pattern under timer->lock to publish cancellation status. l",
  "keyphrases": {
    "weakness": [
      "deadlock"
    ]
  },
  "timestamp": "2025-07-12 03:41:06",
  "cve_id": "CVE-2024-42239",
  "result_count": 20,
  "results": [
    {
      "cwe_id": "833",
      "name": "Deadlock",
      "type": "Base",
      "score": 0.4268775837822191
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "type": "Class",
      "score": 0.39623838737263717
    },
    {
      "cwe_id": "364",
      "name": "Signal Handler Race Condition",
      "type": "Base",
      "score": 0.39000294825262927
    },
    {
      "cwe_id": "828",
      "name": "Signal Handler with Functionality that is not Asynchronous-Safe",
      "type": "Variant",
      "score": 0.3878474556517979
    },
    {
      "cwe_id": "606",
      "name": "Unchecked Input for Loop Condition",
      "type": "Base",
      "score": 0.38465834466541027
    },
    {
      "cwe_id": "765",
      "name": "Multiple Unlocks of a Critical Resource",
      "type": "Base",
      "score": 0.376106956106128
    },
    {
      "cwe_id": "1322",
      "name": "Use of Blocking Code in Single-threaded, Non-blocking Context",
      "type": "Base",
      "score": 0.3752632159895601
    },
    {
      "cwe_id": "413",
      "name": "Improper Resource Locking",
      "type": "Base",
      "score": 0.3745270544484647
    },
    {
      "cwe_id": "663",
      "name": "Use of a Non-reentrant Function in a Concurrent Context",
      "type": "Base",
      "score": 0.37073208456293355
    },
    {
      "cwe_id": "1264",
      "name": "Hardware Logic with Insecure De-Synchronization between Control and Data Channels",
      "type": "Base",
      "score": 0.3700487729678174
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "type": "Class",
      "score": 0.3601823031979746
    },
    {
      "cwe_id": "385",
      "name": "Covert Timing Channel",
      "type": "Base",
      "score": 0.35700271797442806
    },
    {
      "cwe_id": "479",
      "name": "Signal Handler Use of a Non-reentrant Function",
      "type": "Variant",
      "score": 0.35398849299190205
    },
    {
      "cwe_id": "775",
      "name": "Missing Release of File Descriptor or Handle after Effective Lifetime",
      "type": "Variant",
      "score": 0.3507655670129058
    },
    {
      "cwe_id": "820",
      "name": "Missing Synchronization",
      "type": "Base",
      "score": 0.3505390962983679
    },
    {
      "cwe_id": "834",
      "name": "Excessive Iteration",
      "type": "Class",
      "score": 0.3490156877409719
    },
    {
      "cwe_id": "764",
      "name": "Multiple Locks of a Critical Resource",
      "type": "Base",
      "score": 0.3489039409678616
    },
    {
      "cwe_id": "911",
      "name": "Improper Update of Reference Count",
      "type": "Base",
      "score": 0.3488717417803031
    },
    {
      "cwe_id": "1341",
      "name": "Multiple Releases of Same Resource or Handle",
      "type": "Base",
      "score": 0.3477099562685322
    },
    {
      "cwe_id": "1281",
      "name": "Sequence of Processor Instructions Leads to Unexpected Behavior",
      "type": "Base",
      "score": 0.34693450372895884
    }
  ]
}