{
  "cve_id": "CVE-2025-30788",
  "description": "Cross-Site Request Forgery (CSRF) vulnerability in Eli EZ SQL Reports Shortcode Widget and DB Backup allows SQL Injection. This issue affects EZ SQL Reports Shortcode Widget and DB Backup from n/a through 5.25.08.",
  "key_phrases": {
    "component": "",
    "rootcause": "",
    "vector": "",
    "weakness": "SQL injection, Cross-Site Request Forgery",
    "product": "['Eli EZ SQL Reports Shortcode Widget', 'DB Backup']",
    "impact": "",
    "attacker": "",
    "version": "n/a through 5.25.08"
  },
  "reference_content": "## Analysis of CVE-2025-30788 Content\n\nThe content relates to CVE-2025-30788 as indicated by the CVE ID present in the document.\n\n**Root cause of vulnerability:**\n\nThe vulnerability is a Cross-Site Request Forgery (CSRF) issue. The root cause isn't explicitly stated, but it implies a lack of proper CSRF protection mechanisms in the plugin.\n\n**Weaknesses/vulnerabilities present:**\n\n*   Cross-Site Request Forgery (CSRF) - allowing malicious actors to execute unwanted actions on behalf of authenticated users.\n*   Broken Access Control (OWASP Top 10 - A1)\n\n**Impact of exploitation:**\n\nA malicious actor can force higher privileged users to execute unwanted actions while they are authenticated. The specific impact varies depending on the actions available to the compromised user.\n\n**Attack vectors:**\n\nThe attack vector is through Cross-Site Request Forgery. This involves tricking an authenticated user into unknowingly submitting a malicious request.\n\n**Required attacker capabilities/position:**\n\n*   Unauthenticated - The attacker does not need to be authenticated.\n*   Ability to craft a malicious request and deliver it to an authenticated user (e.g., through a phishing email or malicious website).\n\n**Mitigation or fix:**\n\n*   Update to version 5.25.10 or later.\n*   Patchstack offers auto-updates for vulnerable plugins.\n\n**Additional Details (more than official CVE description):**\n\n*   **Affected Software:** EZ SQL Reports Shortcode Widget and DB Backup plugin\n*   **Vulnerable Versions:** <= 5.25.08\n*   **Fixed Version:** 5.25.10\n*   **CVSS Score:** 8.2 (Low severity)\n*   **Reported by:** Nabil Irawan\n*   **Published by:** Patchstack\n*   **PSID:** f936bc0584ff\n*   The content provides information about Patchstack's vulnerability disclosure process and virtual patching capabilities.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-352 | Cross-Site Request Forgery (CSRF) | 0.9 | Compound | Primary | Allowed |\n| CWE-89 | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | 0.9 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is **CWE-352 [Cross-Site Request Forgery (CSRF)]**, which is a compound weakness. It can lead to other vulnerabilities if successfully exploited. The secondary weakness is **CWE-89 [Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')]**, which can be a consequence of successful **CWE-352 [Cross-Site Request Forgery (CSRF)]** if the forged request is crafted to inject malicious SQL code. **CWE-89 [Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')]** is a child of **CWE-74 [Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')]**. The abstraction level of **CWE-352 [Cross-Site Request Forgery (CSRF)]** is Compound, while **CWE-89 [Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')]** is Base. Choosing the base level is preferred when it accurately represents the weakness.\n\n```mermaid\ngraph TD\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n    cwe89[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n    \n    cwe89 -->|CHILDOF| cwe74\n    cwe352 -->|CANLEADTO| cwe89\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe352 primary\n    class cwe89 secondary\n    class cwe74 tertiary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with **CWE-352 [Cross-Site Request Forgery (CSRF)]**, due to the **lack of CSRF protection**. An attacker can then leverage the forged request to perform **SQL injection**, leading to **CWE-89 [Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')]**. The root cause is the missing CSRF protection.\n\n## Summary of Analysis\nThe initial assessment, based on the vulnerability description, identifies **Cross-Site Request Forgery** and **SQL Injection** as the main weaknesses. The retriever results support these findings, with **CWE-89 [Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')]** and **CWE-352 [Cross-Site Request Forgery (CSRF)]** having high relevance scores. The evidence from the CVE reference link content summary confirms the **lack of proper CSRF protection** as a root cause. The graph relationships show that **CWE-89 [Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')]** is a child of **CWE-74 [Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')]**, but **CWE-89 [Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')]** is more specific. **CWE-352 [Cross-Site Request Forgery (CSRF)]** is the primary weakness, as it enables the **SQL Injection** vulnerability. Both CWEs are at the appropriate level of specificity.\n\nRelevant CWE Information:\n\n*   **CWE-352 [Cross-Site Request Forgery (CSRF)]**: The **web application does not sufficiently verify** whether a request was intentionally provided by the user. The vulnerability description and CVE reference link content summary confirm the **lack of CSRF protection**.\n*   **CWE-89 [Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')]**: The product does not neutralize special elements that could modify the intended SQL command. The vulnerability description explicitly mentions **SQL Injection**.\n\nThe following CWEs were considered but not used:\n\n*   **CWE-918 [Server-Side Request Forgery (SSRF)]**, **CWE-601 [URL Redirection to Untrusted Site ('Open Redirect')]**, **CWE-116 [Improper Encoding or Escaping of Output]**, **CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')]**, **CWE-138 [Improper Neutralization of Special Elements]**, **CWE-502 [Deserialization of Untrusted Data]**, **CWE-95 [Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')]**, **CWE-613 [Insufficient Session Expiration]**, **CWE-425 [Direct Request ('Forced Browsing')]**, **CWE-94 [Improper Control of Generation of Code ('Code Injection')]**, **CWE-184 [Incomplete List of Disallowed Inputs]**, **CWE-494 [Download of Code Without Integrity Check]**, **CWE-471 [Modification of Assumed-Immutable Data (MAID)]**: These CWEs were not selected because they do not directly relate to the **Cross-Site Request Forgery** and **SQL Injection** vulnerabilities described. They represent different types of weaknesses or attack vectors.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-352 | Cross-Site Request Forgery (CSRF) | 0.9 | Compound | Primary | Allowed |\n| CWE-89 | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | 0.9 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is **CWE-352 [Cross-Site Request Forgery (CSRF)]**, which is a compound weakness. It can lead to other vulnerabilities if successfully exploited. The secondary weakness is **CWE-89 [Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')]**, which can be a consequence of successful **CWE-352 [Cross-Site Request Forgery (CSRF)]** if the forged request is crafted to inject malicious SQL code. **CWE-89 [Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')]** is a child of **CWE-74 [Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')]**. The abstraction level of **CWE-352 [Cross-Site Request Forgery (CSRF)]** is Compound, while **CWE-89 [Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')]** is Base. Choosing the base level is preferred when it accurately represents the weakness.\n\n```mermaid\ngraph TD\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n    cwe89[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"]\n    cwe74[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\"]\n    \n    cwe89 -->|CHILDOF| cwe74\n    cwe352 -->|CANLEADTO| cwe89\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe352 primary\n    class cwe89 secondary\n    class cwe74 tertiary\n```\n\n## Vulnerability Chain\nThe vulnerability chain begins with **CWE-352 [Cross-Site Request Forgery (CSRF)]**, due to the **lack of CSRF protection**. An attacker can then leverage the forged request to perform **SQL injection**, leading to **CWE-89 [Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')]**. The root cause is the missing CSRF protection.\n\n## Summary of Analysis\nThe initial assessment, based on the vulnerability description, identifies **Cross-Site Request Forgery** and **SQL Injection** as the main weaknesses. The retriever results support these findings, with **CWE-89 [Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')]** and **CWE-352 [Cross-Site Request Forgery (CSRF)]** having high relevance scores. The evidence from the CVE reference link content summary confirms the **lack of proper CSRF protection** as a root cause. The graph relationships show that **CWE-89 [Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')]** is a child of **CWE-74 [Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')]**, but **CWE-89 [Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')]** is more specific. **CWE-352 [Cross-Site Request Forgery (CSRF)]** is the primary weakness, as it enables the **SQL Injection** vulnerability. Both CWEs are at the appropriate level of specificity.\n\nRelevant CWE Information:\n\n*   **CWE-352 [Cross-Site Request Forgery (CSRF)]**: The **web application does not sufficiently verify** whether a request was intentionally provided by the user. The vulnerability description and CVE reference link content summary confirm the **lack of CSRF protection**.\n*   **CWE-89 [Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')]**: The product does not neutralize special elements that could modify the intended SQL command. The vulnerability description explicitly mentions **SQL Injection**.\n\nThe following CWEs were considered but not used:\n\n*   **CWE-918 [Server-Side Request Forgery (SSRF)]**, **CWE-601 [URL Redirection to Untrusted Site ('Open Redirect')]**, **CWE-116 [Improper Encoding or Escaping of Output]**, **CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')]**, **CWE-138 [Improper Neutralization of Special Elements]**, **CWE-502 [Deserialization of Untrusted Data]**, **CWE-95 [Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')]**, **CWE-613 [Insufficient Session Expiration]**, **CWE-425 [Direct Request ('Forced Browsing')]**, **CWE-94 [Improper Control of Generation of Code ('Code Injection')]**, **CWE-184 [Incomplete List of Disallowed Inputs]**, **CWE-494 [Download of Code Without Integrity Check]**, **CWE-471 [Modification of Assumed-Immutable Data (MAID)]**: These CWEs were not selected because they do not directly relate to the **Cross-Site Request Forgery** and **SQL Injection** vulnerabilities described. They represent different types of weaknesses or attack vectors.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-89:**\n- 89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')) - ROOT\n\n\n**Chain starting from CWE-502:**\n- 502 (Deserialization of Untrusted Data) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: SQL injection",
        "match_reason": "exact_match_compound_part_0"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse"
      },
      "similarity": 257.49037282409944
    },
    {
      "metadata": {
        "doc_id": "918",
        "name": "Server-Side Request Forgery (SSRF)",
        "source": "sparse"
      },
      "similarity": 184.35715707355354
    },
    {
      "metadata": {
        "doc_id": "601",
        "name": "URL Redirection to Untrusted Site ('Open Redirect')",
        "source": "sparse"
      },
      "similarity": 182.6516272985134
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse"
      },
      "similarity": 182.11350347903596
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 173.10230478294102
    },
    {
      "metadata": {
        "doc_id": "138",
        "name": "Improper Neutralization of Special Elements",
        "source": "sparse"
      },
      "similarity": 163.25038600933942
    },
    {
      "metadata": {
        "doc_id": "502",
        "name": "Deserialization of Untrusted Data",
        "source": "sparse"
      },
      "similarity": 160.9801319824583
    },
    {
      "metadata": {
        "doc_id": "95",
        "name": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
        "type": "Variant",
        "original_content": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. \"eval\").",
        "keyphrase_source": "weakness:SQL injection",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.5791827313458151
          }
        }
      },
      "similarity": 0.5791827313458151
    },
    {
      "doc_id": "613",
      "text": "CWE-613: Insufficient Session Expiration",
      "score": 2.0930000000000004,
      "metadata": {
        "doc_id": "613",
        "name": "Insufficient Session Expiration",
        "type": "base",
        "original_content": "CWE-613: Insufficient Session Expiration",
        "relationships": [
          {
            "source_id": "613",
            "target_id": "352",
            "label": "REQUIREDBY",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "613",
            "target_id": "287",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "613",
            "target_id": "672",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "613",
            "target_id": "672",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "672",
            "target_id": "613",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "352",
            "target_id": "613",
            "label": "REQUIRES",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "287",
            "target_id": "613",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 0.9,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "352",
                  "613",
                  "REQUIRES"
                ]
              ],
              "score": 0.9,
              "type": "relationship_chain",
              "source": "352"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "352",
                  "613",
                  "REQUIRES"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_forward",
              "source": "352"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.0930000000000004
          }
        }
      },
      "similarity": 2.0930000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-89",
      "CWE-502",
      "CWE-471",
      "CWE-116",
      "CWE-94",
      "CWE-494",
      "CWE-601",
      "CWE-79",
      "CWE-613",
      "CWE-95",
      "CWE-352",
      "CWE-74",
      "CWE-138",
      "CWE-184",
      "CWE-918",
      "CWE-425"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}