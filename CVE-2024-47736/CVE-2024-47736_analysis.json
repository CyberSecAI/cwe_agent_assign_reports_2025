{
  "cve_id": "CVE-2024-47736",
  "description": "In the Linux kernel, the following vulnerability has been resolved erofs handle overlapped pclusters out of crafted images properly syzbot reported a task hang issue due to a deadlock case where it is waiting for the folio lock of a cached folio that will be used for cache I/Os. After looking into the crafted fuzzed image, I found its formed with several overlapped big pclusters as below Ext logical offset | length physical offset | length 0 0.. 16384 | 16384 151552.. 167936 | 16384 1 16384.. 32768 | 16384 155648.. 172032 | 16384 2 32768.. 49152 | 16384 537223168.. 537239552 | 16384 ... Here, extent 0/1 are physically overlapped although its entirely _impossible_ for normal filesystem images generated by mkfs. First, managed folios containing compressed data will be marked as up-to-date and then unlocked immediately (unlike in-place folios) when compressed I/Os are complete. If physical blocks are not submitted in the incremental order, there should be separate BIOs to avoid dependency issues. However, the current code mis-arranges z_erofs_fill_bio_vec() and BIO submission which causes unexpected BIO waits. Second, managed folios will be connected to their own pclusters for efficient inter-queries. However, this is somewhat hard to implement easily if overlapped big pclusters exist. Again, these only appear in fuzzed images so lets simply fall back to temporary short-lived pages",
  "key_phrases": {
    "rootcause": "task hang due to deadlock",
    "weakness": "",
    "impact": "hang",
    "vector": "crafted images",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": ""
  },
  "reference_content": "Based on the provided information, here's an analysis of the vulnerability:\n\n**Root Cause:**\n\nThe vulnerability stems from the way the erofs filesystem handles specially crafted images containing overlapping physical pclusters (physical clusters).  These overlapping pclusters are not something that would occur in normally generated erofs images, but can be created by fuzzers. This overlap leads to issues in how the filesystem manages cached folios and submits I/O operations, leading to deadlocks.\n\n**Weaknesses/Vulnerabilities:**\n\n1.  **Incorrect BIO submission:** The `z_erofs_fill_bio_vec()` function and the BIO submission logic are not correctly handling the out-of-order nature of physical blocks when there are overlapping pclusters. This mis-arrangement causes unexpected waits on BIOs, leading to a deadlock.\n\n2.  **Managed Folio Handling with Overlaps:** The system attempts to connect managed folios to their respective pclusters for efficient access.  However, with overlapping pclusters, this becomes complex. The code doesn't handle the case when a managed folio might be associated with multiple overlapping pclusters, leading to incorrect folio management.\n\n3. **Reusing truncated folios**: The code was attempting to reuse truncated folios, which is unsafe.\n\n**Impact of Exploitation:**\n\n*   **Task Hang (Deadlock):**  A task attempting to access data within the crafted erofs image will hang indefinitely due to a deadlock condition. This is because the task waits for a folio lock on a cached folio that will be used for cache I/Os but is never released due to the issue described. This can lead to denial of service.\n\n**Attack Vectors:**\n\n*   **Crafted Filesystem Image:** An attacker would need to provide a specially crafted erofs filesystem image containing overlapping physical pclusters. This crafted image would then need to be mounted by the vulnerable system.\n\n**Required Attacker Capabilities/Position:**\n\n*   An attacker needs the ability to create a malicious erofs image.\n*   The attacker needs to be able to mount this image. This could be done through local access or potentially if the image is made accessible through another service.\n\n**Additional Notes:**\n* The provided diffstat shows a fix for `fs/erofs/zdata.c` file with changes in the  `z_erofs_fill_bio_vec()` and  `z_erofs_submit_queue()` functions to address the issues.\n\nThe fix includes:\n    *  Using temporary short-lived pages when overlapped pclusters are detected.\n    * Changes in submission of BIOs to avoid deadlock condition\n    * Prevention of reusing truncated folios\n\nThis commit addresses the task hang issue by ensuring the correct management of folios and submission of BIOs with overlapped pclusters.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-833 | Deadlock | 1.0 | Base | Primary | Allowed |\n| CWE-667 | Improper Locking | 0.7 | Class | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship that influenced the decision was the direct match of the vulnerability description to the definition of CWE-833 (Deadlock). CWE-667 (Improper Locking) was considered as a broader class, as deadlocks are often a consequence of improper locking, making it a potential, though less specific, secondary consideration. The Abstraction levels guided us to select the Base level CWE-833 where possible instead of Class level CWE-667.\n\n```mermaid\ngraph TD\n    cwe833[\"CWE-833: Deadlock\"]\n    cwe667[\"CWE-667: Improper Locking\"]\n\n    cwe833 -->|CHILDOF| cwe667\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe833 primary\n    class cwe667 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a **specially crafted erofs image with overlapping physical pclusters**. This leads to **incorrect BIO submission** and **managed folio handling issues**. This incorrect handling results in a **task hang due to deadlock**, which is the final impact. The root cause is the file system's inability to properly manage the overlapping pclusters and thus to manage the locks correctly on the associated folios during I/O operations.\n\n## Summary of Analysis\nThe initial analysis identified a **task hang due to deadlock** stemming from the handling of crafted images with overlapped pclusters. The primary CWE identified is CWE-833 (Deadlock), as the vulnerability description explicitly mentions a deadlock condition.\n\nThe evidence from the \"CVE Reference Links Content Summary\" section supports this: \"The vulnerability stems from the way the erofs filesystem handles specially crafted images containing overlapping physical pclusters... This overlap leads to issues in how the filesystem manages cached folios and submits I/O operations, leading to deadlocks.\"\n\nThe retriever results also list CWE-833 as the top candidate.\n\nCWE-667 (Improper Locking) was considered as a secondary CWE because deadlocks are often caused by improper locking mechanisms. However, since the description focuses on the deadlock itself, CWE-833 is the more direct and specific classification.\n\nThe selection of CWE-833 as the primary CWE is at the optimal level of specificity because it directly reflects the described vulnerability (a deadlock). It is a Base level CWE, which is preferred.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-833: Deadlock\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-789: Memory Allocation with Excessive Size Value\n**Abstraction Level**: Variant\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-129: Improper Validation of Array Index\n**Abstraction Level**: Variant\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product uses untrusted input when calculating or using an array index, but the product does not validate or incorrectly validates the index to ensure the index references a valid position within the array.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-125: Out-of-bounds Read\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product reads data past the end, or before the beginning, of the intended buffer.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-824: Access of Uninitialized Pointer\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product accesses or uses a pointer that has not been initialized.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-404: Improper Resource Shutdown or Release\n**Abstraction Level**: Class\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product does not release or incorrectly releases a resource before it is made available for re-use.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-193: Off-by-one Error\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nA product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-833: Deadlock\n**Abstraction Level**: Base\n**Similarity Score**: 1161.01\n**Source**: sparse\n\n**Description**:\nThe product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 1159.07\n**Source**: sparse\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 1126.85\n**Source**: sparse\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-833 | Deadlock | 1.0 | Base | Primary | Allowed |\n| CWE-667 | Improper Locking | 0.7 | Class | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship that influenced the decision was the direct match of the vulnerability description to the definition of CWE-833 (Deadlock). CWE-667 (Improper Locking) was considered as a broader class, as deadlocks are often a consequence of improper locking, making it a potential, though less specific, secondary consideration. The Abstraction levels guided us to select the Base level CWE-833 where possible instead of Class level CWE-667.\n\n```mermaid\ngraph TD\n    cwe833[\"CWE-833: Deadlock\"]\n    cwe667[\"CWE-667: Improper Locking\"]\n\n    cwe833 -->|CHILDOF| cwe667\n\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe833 primary\n    class cwe667 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a **specially crafted erofs image with overlapping physical pclusters**. This leads to **incorrect BIO submission** and **managed folio handling issues**. This incorrect handling results in a **task hang due to deadlock**, which is the final impact. The root cause is the file system's inability to properly manage the overlapping pclusters and thus to manage the locks correctly on the associated folios during I/O operations.\n\n## Summary of Analysis\nThe initial analysis identified a **task hang due to deadlock** stemming from the handling of crafted images with overlapped pclusters. The primary CWE identified is CWE-833 (Deadlock), as the vulnerability description explicitly mentions a deadlock condition.\n\nThe evidence from the \"CVE Reference Links Content Summary\" section supports this: \"The vulnerability stems from the way the erofs filesystem handles specially crafted images containing overlapping physical pclusters... This overlap leads to issues in how the filesystem manages cached folios and submits I/O operations, leading to deadlocks.\"\n\nThe retriever results also list CWE-833 as the top candidate.\n\nCWE-667 (Improper Locking) was considered as a secondary CWE because deadlocks are often caused by improper locking mechanisms. However, since the description focuses on the deadlock itself, CWE-833 is the more direct and specific classification.\n\nThe selection of CWE-833 as the primary CWE is at the optimal level of specificity because it directly reflects the described vulnerability (a deadlock). It is a Base level CWE, which is preferred.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-833: Deadlock\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-789: Memory Allocation with Excessive Size Value\n**Abstraction Level**: Variant\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-129: Improper Validation of Array Index\n**Abstraction Level**: Variant\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product uses untrusted input when calculating or using an array index, but the product does not validate or incorrectly validates the index to ensure the index references a valid position within the array.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-125: Out-of-bounds Read\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product reads data past the end, or before the beginning, of the intended buffer.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-824: Access of Uninitialized Pointer\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product accesses or uses a pointer that has not been initialized.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-404: Improper Resource Shutdown or Release\n**Abstraction Level**: Class\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nThe product does not release or incorrectly releases a resource before it is made available for re-use.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-193: Off-by-one Error\n**Abstraction Level**: Base\n**Similarity Score**: 0.70\n**Source**: dense\n\n**Description**:\nA product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-833: Deadlock\n**Abstraction Level**: Base\n**Similarity Score**: 1161.01\n**Source**: sparse\n\n**Description**:\nThe product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 1159.07\n**Source**: sparse\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 1126.85\n**Source**: sparse\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-125:**\n- 125 (Out-of-bounds Read) - ROOT\n\n\n**Chain starting from CWE-404:**\n- 404 (Improper Resource Shutdown or Release) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "833",
        "name": "Deadlock",
        "source": "sparse"
      },
      "similarity": 776.4095337724485
    },
    {
      "metadata": {
        "doc_id": "667",
        "name": "Improper Locking",
        "source": "sparse"
      },
      "similarity": 752.5924661529974
    },
    {
      "metadata": {
        "doc_id": "770",
        "name": "Allocation of Resources Without Limits or Throttling",
        "source": "sparse"
      },
      "similarity": 749.885143686351
    },
    {
      "metadata": {
        "doc_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "source": "sparse"
      },
      "similarity": 748.392927176151
    },
    {
      "metadata": {
        "doc_id": "120",
        "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
        "source": "sparse"
      },
      "similarity": 741.3601197480627
    },
    {
      "metadata": {
        "doc_id": "125",
        "name": "Out-of-bounds Read",
        "source": "sparse"
      },
      "similarity": 737.7824338086107
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 736.1071480026231
    },
    {
      "metadata": {
        "doc_id": "347",
        "name": "Improper Verification of Cryptographic Signature",
        "source": "sparse"
      },
      "similarity": 732.730262578018
    },
    {
      "metadata": {
        "doc_id": "1260",
        "name": "Improper Handling of Overlap Between Protected Memory Ranges",
        "type": "Base",
        "original_content": "The product allows address regions to overlap, which can result in the bypassing of intended memory protection.",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5438128543216075,
            "graph": 2.521552120585862
          }
        }
      },
      "similarity": 0.5438128543216075
    },
    {
      "doc_id": "364",
      "text": "CWE-364: Signal Handler Race Condition",
      "score": 2.4232000000000005,
      "metadata": {
        "doc_id": "364",
        "name": "Signal Handler Race Condition",
        "type": "base",
        "original_content": "CWE-364: Signal Handler Race Condition",
        "relationships": [
          {
            "source_id": "364",
            "target_id": "831",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "364",
            "target_id": "828",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "364",
            "target_id": "432",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "364",
            "target_id": "123",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "364",
            "target_id": "416",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "364",
            "target_id": "415",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "364",
            "target_id": "362",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "831",
            "target_id": "364",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "828",
            "target_id": "364",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "432",
            "target_id": "364",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "416",
            "target_id": "364",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "415",
            "target_id": "364",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "368",
            "target_id": "364",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "362",
            "target_id": "364",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "123",
            "target_id": "364",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 0.8,
          "abstraction_path": 0.7200000000000001,
          "sequence_path": 0.8
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "362",
                  "416",
                  "CANPRECEDE"
                ],
                [
                  "416",
                  "364",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.8,
              "type": "relationship_chain",
              "source": "362"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "362",
                  "364",
                  "PARENTOF"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "abstraction_path_down",
              "source": "362"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "362",
                  "416",
                  "CANPRECEDE"
                ],
                [
                  "416",
                  "364",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "vulnerability_sequence_forward",
              "source": "362"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "416",
                  "120",
                  "CANPRECEDE"
                ],
                [
                  "364",
                  "416",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "vulnerability_sequence_backward",
              "source": "120"
            }
          }
        },
        "abstraction_level": "base",
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.4232000000000005
          }
        }
      },
      "similarity": 2.4232000000000005
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-125",
      "CWE-404",
      "CWE-667",
      "CWE-833",
      "CWE-193",
      "CWE-824",
      "CWE-362",
      "CWE-129",
      "CWE-367",
      "CWE-789"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}