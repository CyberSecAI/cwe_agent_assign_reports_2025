{
  "method": "sparse_weakness_1",
  "query": "In the Linux kernel, the following vulnerability has been resolved pinmux Use sequential access to access desc->pinmux data When two client of the same gpio call pinctrl_select_state() for the same functionality, we are seeing NULL pointer issue while accessing desc->mux_owner. Lets say two processes A, B executing in pin_request() for the same pin and process A updates the desc->mux_usecount but not yet updated the desc->mux_owner while process B see the desc->mux_usecount which got updated by A path and further executes strcmp and while accessing desc->mux_owner it crashes with NULL pointer. Serialize the access to mux related setting with a mutex lock. cpu0 (process A) cpu1(process B) pinctrl_select_state() { pinctrl_select_state() { pin_request() { pin_request() { ... .... } else { desc->mux_usecount++ desc->mux_usecount && strcmp(desc->mux_owner, owner)) { if (desc->mux_usecount > 1) return 0 desc->mux_owner = owner } }",
  "keyphrases": {
    "weakness": "NULL pointer issue"
  },
  "timestamp": "2025-07-12T04:53:33.885219",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "score": 551.8720918512677
    },
    {
      "doc_id": "476",
      "name": "NULL Pointer Dereference",
      "score": 531.1680649283732
    },
    {
      "doc_id": "667",
      "name": "Improper Locking",
      "score": 515.0909188722432
    },
    {
      "doc_id": "121",
      "name": "Stack-based Buffer Overflow",
      "score": 514.6846078538532
    },
    {
      "doc_id": "252",
      "name": "Unchecked Return Value",
      "score": 503.0307440778607
    }
  ]
}