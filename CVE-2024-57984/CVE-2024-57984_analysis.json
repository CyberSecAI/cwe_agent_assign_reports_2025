{
  "cve_id": "CVE-2024-57984",
  "description": "In the Linux kernel, the following vulnerability has been resolved i3c dw Fix **use-after-free** in dw_i3c_master driver due to **race condition** In dw_i3c_common_probe, &master->hj_work is bound with dw_i3c_hj_work. And dw_i3c_master_irq_handler can call dw_i3c_master_irq_handle_ibis function to start the work. If we remove the module which will call dw_i3c_common_remove to make cleanup, it will free master->base through i3c_master_unregister while the work mentioned above will be used. The sequence of operations that may lead to a UAF bug is as follows CPU0 CPU1 | dw_i3c_hj_work dw_i3c_common_remove | i3c_master_unregister(&master->base) | device_unregister(&master->dev) | device_release | //free master->base | | i3c_master_do_daa(&master->base) | //use master->base Fix it by ensuring that the work is canceled before proceeding with the cleanup in dw_i3c_common_remove.",
  "key_phrases": {
    "rootcause": [
      "race condition",
      "use-after-free"
    ],
    "weakness": "",
    "impact": "",
    "vector": "race condition",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": "dw_i3c_master driver"
  },
  "reference_content": null,
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID  | CWE Name  | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|----------------|--------------------------------------------------------------------------------------------------------------------|----------------|--------------------------|-----------------------------------|---------------------------------------------------------------|\n| CWE-416 | Use After Free | 0.9  | Variant | Primary | Allowed |\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.8 | Class | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.85\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is **CWE-416 (Use After Free)**, which occurs because of a **race condition** **CWE-362 (Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'))**. **CWE-416 (Use After Free)** is a variant of a more general class of memory safety violations. **CWE-362 (Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'))** is a Class level that could have Base-level children that would be more appropriate.\n\n```mermaid\ngraph TD\n    cwe416[\"CWE-416: Use After Free\"]\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    \n    cwe416 -->|CANFOLLOW| cwe362\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe416 primary\n    class cwe362 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a **race condition** **CWE-362 (Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'))** that allows memory to be freed while another thread is still using it, leading to a **use-after-free** **CWE-416 (Use After Free)**.\n\n## Summary of Analysis\nThe vulnerability is a **use-after-free** condition caused by a **race condition** in the dw_i3c_master driver in the Linux kernel. The **race condition** allows memory to be freed while it is still being accessed, leading to the **use-after-free**.\n\nThe primary CWE is **CWE-416 (Use After Free)** because it represents the direct cause of the vulnerability. The **race condition** **CWE-362 (Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'))** is a contributing factor.\n\nThe evidence is strong, as the description clearly states the sequence of events leading to the **use-after-free** and the involvement of a **race condition**.\n\nRelevant CWE Information:\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*This CWE was considered but not selected as the description indicates a race condition, not specifically an issue of improper locking.*\n\n## CWE-366: Race Condition within a Thread\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nIf two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*This CWE was considered but not selected as the description indicates the broader class of  **CWE-362 (Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'))** is more appropriate.*\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*This CWE has been selected as a secondary CWE as the evidence supports it.*\n\n## CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*This CWE was considered but not selected as there is no evidence to suggest a Time-of-check Time-of-use condition. The core issue is a broader race condition leading to use-after-free.*\n\n## CWE-824: Access of Uninitialized Pointer\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product accesses or uses a pointer that has not been initialized.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*This CWE was considered but not selected as the vulnerability involves a use-after-free, not an access of an uninitialized pointer.*\n\n## CWE-703: Improper Check or Handling of Exceptional Conditions\n**Abstraction Level**: Pillar\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is extremely high-level, a Pillar.\n\n*This CWE was considered but not selected as it is too abstract and does not accurately represent the specific vulnerability.*\n\n## CWE-754: Improper Check for Unusual or Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*This CWE was considered but not selected as it is too abstract and does not accurately represent the specific vulnerability.*\n\n## CWE-833: Deadlock\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*This CWE was considered but not selected as the issue is not a deadlock, but a race condition leading to a use-after-free.*\n\n## CWE-665: Improper Initialization\n**Abstraction Level**: Class\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n*This CWE was considered but not selected as it does not pertain to initialization issues.*\n\n## CWE-662: Improper Synchronization\n**Abstraction Level**: Class\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product utilizes multiple threads or processes to allow temporary access to a shared resource that can only be exclusive to one process at a time, but it does not properly synchronize these actions, which might cause simultaneous accesses of this resource by multiple threads or processes.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n*This CWE was considered but not selected as the description indicates the broader class of **CWE-36",
  "analysis_with_relationships": "# Summary\n| CWE ID  | CWE Name  | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|----------------|--------------------------------------------------------------------------------------------------------------------|----------------|--------------------------|-----------------------------------|---------------------------------------------------------------|\n| CWE-416 | Use After Free | 0.9  | Variant | Primary | Allowed |\n| CWE-362 | Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') | 0.8 | Class | Secondary | Allowed-with-Review |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.85\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is **CWE-416 (Use After Free)**, which occurs because of a **race condition** **CWE-362 (Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'))**. **CWE-416 (Use After Free)** is a variant of a more general class of memory safety violations. **CWE-362 (Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'))** is a Class level that could have Base-level children that would be more appropriate.\n\n```mermaid\ngraph TD\n    cwe416[\"CWE-416: Use After Free\"]\n    cwe362[\"CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\"]\n    \n    cwe416 -->|CANFOLLOW| cwe362\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe416 primary\n    class cwe362 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with a **race condition** **CWE-362 (Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'))** that allows memory to be freed while another thread is still using it, leading to a **use-after-free** **CWE-416 (Use After Free)**.\n\n## Summary of Analysis\nThe vulnerability is a **use-after-free** condition caused by a **race condition** in the dw_i3c_master driver in the Linux kernel. The **race condition** allows memory to be freed while it is still being accessed, leading to the **use-after-free**.\n\nThe primary CWE is **CWE-416 (Use After Free)** because it represents the direct cause of the vulnerability. The **race condition** **CWE-362 (Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'))** is a contributing factor.\n\nThe evidence is strong, as the description clearly states the sequence of events leading to the **use-after-free** and the involvement of a **race condition**.\n\nRelevant CWE Information:\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-667: Improper Locking\n**Abstraction Level**: Class\n**Similarity Score**: 0.75\n**Source**: dense\n\n**Description**:\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*This CWE was considered but not selected as the description indicates a race condition, not specifically an issue of improper locking.*\n\n## CWE-366: Race Condition within a Thread\n**Abstraction Level**: Base\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nIf two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*This CWE was considered but not selected as the description indicates the broader class of  **CWE-362 (Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'))** is more appropriate.*\n\n## CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n**Abstraction Level**: Class\n**Similarity Score**: 0.74\n**Source**: dense\n\n**Description**:\nThe product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*This CWE has been selected as a secondary CWE as the evidence supports it.*\n\n## CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\n**Abstraction Level**: Base\n**Similarity Score**: 0.73\n**Source**: dense\n\n**Description**:\nThe product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*This CWE was considered but not selected as there is no evidence to suggest a Time-of-check Time-of-use condition. The core issue is a broader race condition leading to use-after-free.*\n\n## CWE-824: Access of Uninitialized Pointer\n**Abstraction Level**: Base\n**Similarity Score**: 0.72\n**Source**: dense\n\n**Description**:\nThe product accesses or uses a pointer that has not been initialized.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*This CWE was considered but not selected as the vulnerability involves a use-after-free, not an access of an uninitialized pointer.*\n\n## CWE-703: Improper Check or Handling of Exceptional Conditions\n**Abstraction Level**: Pillar\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is extremely high-level, a Pillar.\n\n*This CWE was considered but not selected as it is too abstract and does not accurately represent the specific vulnerability.*\n\n## CWE-754: Improper Check for Unusual or Exceptional Conditions\n**Abstraction Level**: Class\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product.\n\n**Mapping Guidance**:\n- Usage: Allowed-with-Review\n- Rationale: This CWE entry is a Class and might have Base-level children that would be more appropriate\n\n*This CWE was considered but not selected as it is too abstract and does not accurately represent the specific vulnerability.*\n\n## CWE-833: Deadlock\n**Abstraction Level**: Base\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n*This CWE was considered but not selected as the issue is not a deadlock, but a race condition leading to a use-after-free.*\n\n## CWE-665: Improper Initialization\n**Abstraction Level**: Class\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n*This CWE was considered but not selected as it does not pertain to initialization issues.*\n\n## CWE-662: Improper Synchronization\n**Abstraction Level**: Class\n**Similarity Score**: 0.71\n**Source**: dense\n\n**Description**:\nThe product utilizes multiple threads or processes to allow temporary access to a shared resource that can only be exclusive to one process at a time, but it does not properly synchronize these actions, which might cause simultaneous accesses of this resource by multiple threads or processes.\n\n**Mapping Guidance**:\n- Usage: Discouraged\n- Rationale: This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n\n*This CWE was considered but not selected as the description indicates the broader class of **CWE-36\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-665:**\n- 665 (Improper Initialization) - ROOT\n\n\n**Chain starting from CWE-662:**\n- 662 (Improper Synchronization) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "362",
        "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "source": "sparse",
        "original_content": "The product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.",
        "keyphrase_sources": [
          {
            "id": "rootcause:race condition",
            "keyphrase": "race condition",
            "type": "rootcause"
          },
          {
            "id": "rootcause:use-after-free",
            "keyphrase": "use-after-free",
            "type": "rootcause"
          },
          {
            "id": "vector:race condition",
            "keyphrase": "race condition",
            "type": "vector"
          },
          {
            "id": "product:Linux kernel",
            "keyphrase": "Linux kernel",
            "type": "product"
          },
          {
            "id": "component:dw_i3c_master driver",
            "keyphrase": "dw_i3c_master driver",
            "type": "component"
          }
        ]
      },
      "similarity": 640.9567259360203
    },
    {
      "metadata": {
        "doc_id": "415",
        "name": "Double Free",
        "source": "sparse",
        "original_content": "The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations.",
        "keyphrase_sources": [
          {
            "id": "rootcause:race condition",
            "keyphrase": "race condition",
            "type": "rootcause"
          },
          {
            "id": "rootcause:use-after-free",
            "keyphrase": "use-after-free",
            "type": "rootcause"
          },
          {
            "id": "vector:race condition",
            "keyphrase": "race condition",
            "type": "vector"
          },
          {
            "id": "product:Linux kernel",
            "keyphrase": "Linux kernel",
            "type": "product"
          },
          {
            "id": "component:dw_i3c_master driver",
            "keyphrase": "dw_i3c_master driver",
            "type": "component"
          }
        ]
      },
      "similarity": 576.6404062920228
    },
    {
      "metadata": {
        "doc_id": "61",
        "name": "UNIX Symbolic Link (Symlink) Following",
        "source": "sparse",
        "original_content": "The product, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.",
        "keyphrase_sources": [
          {
            "id": "rootcause:race condition",
            "keyphrase": "race condition",
            "type": "rootcause"
          },
          {
            "id": "rootcause:use-after-free",
            "keyphrase": "use-after-free",
            "type": "rootcause"
          },
          {
            "id": "vector:race condition",
            "keyphrase": "race condition",
            "type": "vector"
          },
          {
            "id": "product:Linux kernel",
            "keyphrase": "Linux kernel",
            "type": "product"
          },
          {
            "id": "component:dw_i3c_master driver",
            "keyphrase": "dw_i3c_master driver",
            "type": "component"
          }
        ]
      },
      "similarity": 576.553415688177
    },
    {
      "metadata": {
        "doc_id": "367",
        "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
        "source": "sparse",
        "original_content": "The product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.",
        "keyphrase_sources": [
          {
            "id": "rootcause:race condition",
            "keyphrase": "race condition",
            "type": "rootcause"
          },
          {
            "id": "rootcause:use-after-free",
            "keyphrase": "use-after-free",
            "type": "rootcause"
          },
          {
            "id": "vector:race condition",
            "keyphrase": "race condition",
            "type": "vector"
          },
          {
            "id": "product:Linux kernel",
            "keyphrase": "Linux kernel",
            "type": "product"
          },
          {
            "id": "component:dw_i3c_master driver",
            "keyphrase": "dw_i3c_master driver",
            "type": "component"
          }
        ]
      },
      "similarity": 575.5583300975203
    },
    {
      "metadata": {
        "doc_id": "667",
        "name": "Improper Locking",
        "source": "sparse",
        "original_content": "The product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.",
        "keyphrase_sources": [
          {
            "id": "rootcause:race condition",
            "keyphrase": "race condition",
            "type": "rootcause"
          },
          {
            "id": "rootcause:use-after-free",
            "keyphrase": "use-after-free",
            "type": "rootcause"
          },
          {
            "id": "vector:race condition",
            "keyphrase": "race condition",
            "type": "vector"
          },
          {
            "id": "product:Linux kernel",
            "keyphrase": "Linux kernel",
            "type": "product"
          },
          {
            "id": "component:dw_i3c_master driver",
            "keyphrase": "dw_i3c_master driver",
            "type": "component"
          }
        ]
      },
      "similarity": 567.5679315322615
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-665",
      "CWE-662",
      "CWE-416",
      "CWE-667",
      "CWE-833",
      "CWE-362",
      "CWE-36",
      "CWE-824",
      "CWE-366",
      "CWE-367",
      "CWE-703",
      "CWE-754"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {
    "362": [
      {
        "id": "rootcause:race condition",
        "keyphrase": "race condition",
        "type": "rootcause"
      },
      {
        "id": "rootcause:use-after-free",
        "keyphrase": "use-after-free",
        "type": "rootcause"
      },
      {
        "id": "vector:race condition",
        "keyphrase": "race condition",
        "type": "vector"
      },
      {
        "id": "product:Linux kernel",
        "keyphrase": "Linux kernel",
        "type": "product"
      },
      {
        "id": "component:dw_i3c_master driver",
        "keyphrase": "dw_i3c_master driver",
        "type": "component"
      }
    ],
    "415": [
      {
        "id": "rootcause:race condition",
        "keyphrase": "race condition",
        "type": "rootcause"
      },
      {
        "id": "rootcause:use-after-free",
        "keyphrase": "use-after-free",
        "type": "rootcause"
      },
      {
        "id": "vector:race condition",
        "keyphrase": "race condition",
        "type": "vector"
      },
      {
        "id": "product:Linux kernel",
        "keyphrase": "Linux kernel",
        "type": "product"
      },
      {
        "id": "component:dw_i3c_master driver",
        "keyphrase": "dw_i3c_master driver",
        "type": "component"
      }
    ],
    "61": [
      {
        "id": "rootcause:race condition",
        "keyphrase": "race condition",
        "type": "rootcause"
      },
      {
        "id": "rootcause:use-after-free",
        "keyphrase": "use-after-free",
        "type": "rootcause"
      },
      {
        "id": "vector:race condition",
        "keyphrase": "race condition",
        "type": "vector"
      },
      {
        "id": "product:Linux kernel",
        "keyphrase": "Linux kernel",
        "type": "product"
      },
      {
        "id": "component:dw_i3c_master driver",
        "keyphrase": "dw_i3c_master driver",
        "type": "component"
      }
    ],
    "367": [
      {
        "id": "rootcause:race condition",
        "keyphrase": "race condition",
        "type": "rootcause"
      },
      {
        "id": "rootcause:use-after-free",
        "keyphrase": "use-after-free",
        "type": "rootcause"
      },
      {
        "id": "vector:race condition",
        "keyphrase": "race condition",
        "type": "vector"
      },
      {
        "id": "product:Linux kernel",
        "keyphrase": "Linux kernel",
        "type": "product"
      },
      {
        "id": "component:dw_i3c_master driver",
        "keyphrase": "dw_i3c_master driver",
        "type": "component"
      }
    ],
    "667": [
      {
        "id": "rootcause:race condition",
        "keyphrase": "race condition",
        "type": "rootcause"
      },
      {
        "id": "rootcause:use-after-free",
        "keyphrase": "use-after-free",
        "type": "rootcause"
      },
      {
        "id": "vector:race condition",
        "keyphrase": "race condition",
        "type": "vector"
      },
      {
        "id": "product:Linux kernel",
        "keyphrase": "Linux kernel",
        "type": "product"
      },
      {
        "id": "component:dw_i3c_master driver",
        "keyphrase": "dw_i3c_master driver",
        "type": "component"
      }
    ]
  }
}