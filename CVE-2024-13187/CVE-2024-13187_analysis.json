{
  "cve_id": "CVE-2024-13187",
  "description": "A vulnerability was found in Kingsoft WPS Office 6.14.0 on macOS. It has been declared as critical. Affected by this vulnerability is an unknown functionality of the component TCC Handler. The manipulation leads to code injection. It is possible to launch the attack on the local host. The exploit has been disclosed to the public and may be used. The vendor was contacted early about this disclosure but did not respond in any way.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "",
    "impact": "code injection",
    "vector": "manipulation",
    "attacker": "",
    "product": "Kingsoft WPS Office",
    "version": "6.14.0",
    "component": "TCC Handler"
  },
  "reference_content": "## Analysis of CVE-2024-13187 Content\n\nThe provided content details a vulnerability in the WPS Office application for macOS. It relates to the lack of Hardened Runtime enabling, leading to a TCC bypass via DYLD_INSERT_LIBRARY injection.\n\n**Root cause of vulnerability:**\n\nThe Mac version of WPS app does not enable the `Hardened Runtime` signing option, which is a security mechanism designed to prevent code injection attacks.\n\n**Weaknesses/vulnerabilities present:**\n\n*   Lack of Hardened Runtime protection.\n*   Vulnerable to DYLD\\_INSERT\\_LIBRARY injection.\n*   TCC bypass.\n\n**Impact of exploitation:**\n\n*   Privacy Leakage: Access to user's camera, microphone, and other hardware components. Reading contents of protected directories (e.g., Downloads).\n*   Intrusion Threats: Malicious code injection into the WPS process with WPS's permissions.\n*   Data Security: Leakage of business sensitive information and personal user data. Unauthorized access to hardware.\n\n**Attack vectors:**\n\n*   DYLD\\_INSERT\\_LIBRARY injection.\n*   Exploitation requires the attacker to load a malicious dylib into the WPS process.\n\n**Required attacker capabilities/position:**\n\n*   The attacker needs to be able to inject a malicious dylib into the WPS process. This could be achieved through various means, such as controlling the victim's Mac device through a reverse shell or C2.\n*   Knowledge of creating and compiling a malicious dylib.\n*   Understanding of LaunchAgent configuration.\n\n**Mitigation or fix:**\n\n*   Enable the Hardened Runtime option. This will significantly reduce the risk of code injection and improve the application's overall security.\n\n**Additional Details (more than official CVE description):**\n\n*   The content provides detailed reproduction steps, including code examples for creating a malicious dylib and a LaunchAgent plist file.\n*   It references similar vulnerabilities in other applications (Signal and Telegram) with assigned CVE numbers.\n*   It explains the implications of WPS having multiple powerful TCC permissions, making it a prime target for attackers.\n*   The content includes screenshots illustrating the vulnerability and exploitation process.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-787 | Out-of-bounds Write | 0.8 | Base | Allowed | Primary CWE |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship identified is that CWE-787 (Out-of-bounds Write) is a child of CWE-119 (Improper Restriction of Operations Within the Bounds of a Memory Buffer). The vulnerability involves **code injection**, suggesting a memory corruption issue. The evidence points to the lack of Hardened Runtime allowing for DYLD_INSERT_LIBRARY injection, which implies an out-of-bounds write scenario. The graph shows that CWE-787 can be preceded by CWE-823 (Use of Out-of-range Pointer Offset), which is also related to memory access violations.\n\n```mermaid\ngraph TD\n    cwe787[\"CWE-787: Out-of-bounds Write\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations\"]\n    cwe823[\"CWE-823: Use of Out-of-range Pointer Offset\"]\n    \n    cwe787 -->|CHILDOF| cwe119\n    cwe823 -->|CANPRECEDE| cwe787\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe787 primary\n    class cwe119,cwe823 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **missing** Hardened Runtime protection, leading to a vulnerability to DYLD_INSERT_LIBRARY injection. This allows for **code injection**, resulting in potential privacy leakage, intrusion threats, and data security breaches. The chain is as follows:\n1.  **Missing** Hardened Runtime (Implicit weakness, not explicitly CWE mapped).\n2.  DYLD_INSERT_LIBRARY injection leading to **Out-of-bounds Write** (CWE-787)\n3.  **Code Injection** leading to Privacy Leakage, Intrusion Threats, and Data Security Breaches (Impact).\n\n## Summary of Analysis\nThe initial assessment focused on the **code injection** aspect, considering CWEs related to injection vulnerabilities. However, the root cause analysis, particularly the \"Analysis of CVE-2024-13187 Content\" section, highlighted the absence of Hardened Runtime, enabling DYLD\\_INSERT\\_LIBRARY injection. This pointed toward a memory corruption issue, specifically an **out-of-bounds write** (CWE-787). The relationship graph confirms that CWE-787 is related to memory access violations and can be preceded by CWE-823, which involves out-of-range pointer offsets. Given the evidence and the hierarchical relationships, CWE-787 is the most appropriate and specific classification. The \"Vulnerability Description Key Phrases\" mention \"code injection\" as the impact, but the \"CVE Reference Links Content Summary\" points to the root cause as a **lack of** Hardened Runtime protection, which leads to an out-of-bounds write. Therefore, the assessment relies heavily on the \"CVE Reference Links Content Summary\" section, giving it a higher confidence score.\n\nCWEs like CWE-78 (Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')), CWE-79 (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')), CWE-89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')), and CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')) were considered due to the term \"code injection.\" However, these CWEs focus on improper neutralization of inputs, which is not the primary issue here. The primary issue is the lack of Hardened Runtime, leading to memory corruption via out-of-bounds write. Other CWEs like CWE-306 (Missing Authentication for Critical Function) and CWE-285 (Improper Authorization) were also considered but deemed less relevant as the vulnerability's core issue is not related to authentication or authorization.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-787 | Out-of-bounds Write | 0.8 | Base | Allowed | Primary CWE |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship identified is that CWE-787 (Out-of-bounds Write) is a child of CWE-119 (Improper Restriction of Operations Within the Bounds of a Memory Buffer). The vulnerability involves **code injection**, suggesting a memory corruption issue. The evidence points to the lack of Hardened Runtime allowing for DYLD_INSERT_LIBRARY injection, which implies an out-of-bounds write scenario. The graph shows that CWE-787 can be preceded by CWE-823 (Use of Out-of-range Pointer Offset), which is also related to memory access violations.\n\n```mermaid\ngraph TD\n    cwe787[\"CWE-787: Out-of-bounds Write\"]\n    cwe119[\"CWE-119: Improper Restriction of Operations\"]\n    cwe823[\"CWE-823: Use of Out-of-range Pointer Offset\"]\n    \n    cwe787 -->|CHILDOF| cwe119\n    cwe823 -->|CANPRECEDE| cwe787\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe787 primary\n    class cwe119,cwe823 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **missing** Hardened Runtime protection, leading to a vulnerability to DYLD_INSERT_LIBRARY injection. This allows for **code injection**, resulting in potential privacy leakage, intrusion threats, and data security breaches. The chain is as follows:\n1.  **Missing** Hardened Runtime (Implicit weakness, not explicitly CWE mapped).\n2.  DYLD_INSERT_LIBRARY injection leading to **Out-of-bounds Write** (CWE-787)\n3.  **Code Injection** leading to Privacy Leakage, Intrusion Threats, and Data Security Breaches (Impact).\n\n## Summary of Analysis\nThe initial assessment focused on the **code injection** aspect, considering CWEs related to injection vulnerabilities. However, the root cause analysis, particularly the \"Analysis of CVE-2024-13187 Content\" section, highlighted the absence of Hardened Runtime, enabling DYLD\\_INSERT\\_LIBRARY injection. This pointed toward a memory corruption issue, specifically an **out-of-bounds write** (CWE-787). The relationship graph confirms that CWE-787 is related to memory access violations and can be preceded by CWE-823, which involves out-of-range pointer offsets. Given the evidence and the hierarchical relationships, CWE-787 is the most appropriate and specific classification. The \"Vulnerability Description Key Phrases\" mention \"code injection\" as the impact, but the \"CVE Reference Links Content Summary\" points to the root cause as a **lack of** Hardened Runtime protection, which leads to an out-of-bounds write. Therefore, the assessment relies heavily on the \"CVE Reference Links Content Summary\" section, giving it a higher confidence score.\n\nCWEs like CWE-78 (Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')), CWE-79 (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')), CWE-89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')), and CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')) were considered due to the term \"code injection.\" However, these CWEs focus on improper neutralization of inputs, which is not the primary issue here. The primary issue is the lack of Hardened Runtime, leading to memory corruption via out-of-bounds write. Other CWEs like CWE-306 (Missing Authentication for Critical Function) and CWE-285 (Improper Authorization) were also considered but deemed less relevant as the vulnerability's core issue is not related to authentication or authorization.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-89:**\n- 89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')) - ROOT\n\n\n**Chain starting from CWE-823:**\n- 823 (Use of Out-of-range Pointer Offset) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "sparse"
      },
      "similarity": 169.20130447056334
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 166.3300852295621
    },
    {
      "metadata": {
        "doc_id": "1336",
        "name": "Improper Neutralization of Special Elements Used in a Template Engine",
        "source": "sparse"
      },
      "similarity": 141.37314696063845
    },
    {
      "metadata": {
        "doc_id": "285",
        "name": "Improper Authorization",
        "source": "sparse"
      },
      "similarity": 141.34743905523024
    },
    {
      "metadata": {
        "doc_id": "74",
        "name": "Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')",
        "source": "sparse"
      },
      "similarity": 140.47189513604025
    },
    {
      "metadata": {
        "doc_id": "306",
        "name": "Missing Authentication for Critical Function",
        "source": "sparse"
      },
      "similarity": 139.88922589761685
    },
    {
      "metadata": {
        "doc_id": "125",
        "name": "Out-of-bounds Read",
        "source": "sparse"
      },
      "similarity": 136.86144467689573
    },
    {
      "metadata": {
        "doc_id": "705",
        "name": "Incorrect Control Flow Scoping",
        "source": "sparse"
      },
      "similarity": 136.07204708856312
    },
    {
      "metadata": {
        "doc_id": "121",
        "name": "Stack-based Buffer Overflow",
        "type": "Variant",
        "original_content": "A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "dense": 0.5426206539416939
          }
        }
      },
      "similarity": 0.5426206539416939
    },
    {
      "doc_id": "78",
      "text": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
      "score": 0.550499608356259,
      "metadata": {
        "doc_id": "78",
        "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "type": "Base",
        "extended_description": "\n\nThis weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications. Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage.\n\n\nThere are at least two subtypes of OS command injection:\n\n\n  - The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system(\"nslookup [HOSTNAME]\") to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing.\n\n  - The application accepts an input that it uses to fully select which program to run, as well as which commands to use. The application simply redirects this entire command to the operating system. For example, the program might use \"exec([COMMAND])\" to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line.\n\nFrom a weakness standpoint, these variants represent distinct programmer errors. In the first variant, the programmer clearly intends that input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input.",
        "alternate_terms": [
          "Shell injection",
          "Shell metacharacters",
          "OS Command Injection"
        ],
        "original_content": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
        "relationships": [
          {
            "source_id": "78",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "78",
            "target_id": "88",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "78",
            "target_id": "77",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1340"
            }
          },
          {
            "source_id": "78",
            "target_id": "77",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1305"
            }
          },
          {
            "source_id": "78",
            "target_id": "74",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "78",
            "target_id": "77",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "77",
            "target_id": "78",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "74",
            "target_id": "78",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "184",
            "target_id": "78",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "source": "graph",
        "sources": [
          "vector",
          "graph"
        ],
        "vector_score": 0.550499608356259,
        "graph_score": 3.8870000000000005,
        "score_components": {
          "relationship_chain": 0.8,
          "explicit_mention": 1.0,
          "abstraction_path": 0.9,
          "sequence_path": 0.8
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "abstraction_path_down",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "79",
                  "184",
                  "CANFOLLOW"
                ],
                [
                  "184",
                  "78",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "relationship_chain",
              "source": "79"
            },
            "abstraction_path_down": {
              "path": [
                [
                  "74",
                  "78",
                  "PARENTOF"
                ]
              ],
              "score": 0.7200000000000001,
              "type": "abstraction_path_down",
              "source": "74"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "79",
                  "184",
                  "CANFOLLOW"
                ],
                [
                  "184",
                  "78",
                  "CANPRECEDE"
                ]
              ],
              "score": 0.8,
              "type": "vulnerability_sequence_forward",
              "source": "79"
            }
          }
        },
        "is_explicit": true,
        "abstraction_level": "base",
        "position": "after",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.535699556060399,
            "graph": 2.5523998433425037
          }
        }
      },
      "similarity": 2.5523998433425037
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-89",
      "CWE-823",
      "CWE-787",
      "CWE-79",
      "CWE-306",
      "CWE-74",
      "CWE-285",
      "CWE-78",
      "CWE-119"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}