{
  "cve_id": "CVE-2024-5650",
  "description": "**DLL Hijacking vulnerability** has been found in CENTUM CAMS Log server provided by Yokogawa Electric Corporation. If an attacker is somehow able to intrude into a computer that installed affected product or access to a shared folder, by replacing the DLL file with a tampered one, it is possible to execute arbitrary programs with the authority of the SYSTEM account. The affected products and versions are as follows CENTUM CS 3000 R3.08.10 to R3.09.50 CENTUM VP R4.01.00 to R4.03.00, R5.01.00 to R5.04.20, R6.01.00 to R6.11.10.",
  "key_phrases": {
    "rootcause": "DLL Hijacking vulnerability",
    "weakness": "DLL hijacking",
    "impact": [
      "arbitrary code execution",
      "execute arbitrary programs"
    ],
    "vector": "replacing DLL file",
    "attacker": "",
    "product": [
      "['CENTUM CS'",
      "'CENTUM VP']"
    ],
    "version": [
      "['R3.08.10 to R3.09.50'",
      "'R4.01.00 to R4.03.00'",
      "'R5.01.00 to R5.04.20'",
      "'R6.01.00 to R6.11.10']"
    ],
    "component": "CAMS Log server"
  },
  "reference_content": "- **Root cause of vulnerability**: The vulnerability is due to a DLL hijacking issue in the CENTUM CAMS Log server. An attacker can replace a legitimate DLL file with a malicious one.\n- **Weaknesses/vulnerabilities present**: Improper access control (CWE-284) is present, as the system loads DLLs from untrusted locations. This allows for DLL hijacking.\n- **Impact of exploitation**: Successful exploitation allows an attacker to execute arbitrary programs with SYSTEM privileges. This can lead to complete system compromise, including data theft, system manipulation, and denial of service.\n- **Attack vectors**: The attack vector involves an attacker gaining access to a computer with the affected product installed or accessing a shared folder. The attacker then replaces a legitimate DLL file with a tampered one.\n- **Required attacker capabilities/position**: The attacker requires the ability to write to the file system where the vulnerable application loads DLLs, either by having local access to the machine or by having access to a network share. They also need to be able to craft a malicious DLL.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-427 | Uncontrolled Search Path Element | 0.9 | Base | Allowed | Primary CWE: The vulnerability is due to **DLL hijacking**, which occurs because the application **loads DLLs from an uncontrolled search path**. An attacker can place a malicious DLL in a directory that is searched before the legitimate DLL directory, leading to arbitrary code execution. |\n| CWE-114 | Process Injection | 0.7 | Base | Allowed | Secondary Candidate: The **DLL Hijacking vulnerability** leads to the injection of malicious code into the process. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary CWE, CWE-427, is a base-level CWE that directly addresses the **uncontrolled search path** issue that leads to **DLL hijacking**. CWE-114 is related because DLL hijacking is a form of process injection.\n\n```mermaid\ngraph TD\n    cwe427[\"CWE-427: Uncontrolled Search Path Element\"]\n    cwe114[\"CWE-114: Process Injection\"]\n    \n    cwe114 <--|RESULT_OF| cwe427\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe427 primary\n    class cwe114 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with the **uncontrolled search path** (CWE-427), which allows an attacker to inject a malicious DLL. This leads to the execution of arbitrary code within the context of the application (CWE-114).\n  - CWE-427 (Root Cause): The application uses an **uncontrolled search path** when loading DLLs.\n  - CWE-114 (Impact): An attacker places a malicious DLL in a searched directory allowing for **process injection** and **arbitrary code execution**.\n\n## Summary of Analysis\n\nThe analysis is based on the provided vulnerability description and CVE reference. The core issue is **DLL hijacking**, resulting from the application loading DLLs from an **uncontrolled search path**. This directly maps to CWE-427. The consequence of this **DLL hijacking** is the ability to inject code into the running process, which can be categorized as CWE-114.\n\nThe evidence clearly indicates that the **root cause** is the **uncontrolled search path**, enabling the attacker to replace a legitimate DLL with a malicious one. The description states, \"If an attacker is somehow able to intrude into a computer that installed affected product or access to a shared folder, by replacing the DLL file with a tampered one, it is possible to execute arbitrary programs with the authority of the SYSTEM account.\"\n\nThe selection of CWE-427 is at the optimal level of specificity because it directly addresses the **root cause** of the **DLL hijacking** vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-427: Uncontrolled Search Path Element\n**Abstraction Level**: Base\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nThe product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n### Alternative Considerations\n\n*   CWE-798 (Use of Hard-coded Credentials): While the attacker needs to craft a malicious DLL, the core issue isn't about credentials, but rather the **uncontrolled loading of DLLs**. Therefore, this CWE is not applicable.\n*   CWE-287 (Improper Authentication): This is not related to authentication bypass.\n*   CWE-732 (Incorrect Permission Assignment for Critical Resource): While permissions are involved in writing the malicious DLL, the core issue is the **uncontrolled search path**, not the permission assignment itself.\n*   CWE-94 (Improper Control of Generation of Code ('Code Injection')): This is a consequence of the DLL injection but not the root cause. The root cause is the **uncontrolled search path**.\n*   CWE-114 (Process Injection): This is a potential consequence but not the root cause of the **DLL hijacking vulnerability**.",
  "analysis_with_relationships": "# Summary\n\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-427 | Uncontrolled Search Path Element | 0.9 | Base | Allowed | Primary CWE: The vulnerability is due to **DLL hijacking**, which occurs because the application **loads DLLs from an uncontrolled search path**. An attacker can place a malicious DLL in a directory that is searched before the legitimate DLL directory, leading to arbitrary code execution. |\n| CWE-114 | Process Injection | 0.7 | Base | Allowed | Secondary Candidate: The **DLL Hijacking vulnerability** leads to the injection of malicious code into the process. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.9\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\n\nThe primary CWE, CWE-427, is a base-level CWE that directly addresses the **uncontrolled search path** issue that leads to **DLL hijacking**. CWE-114 is related because DLL hijacking is a form of process injection.\n\n```mermaid\ngraph TD\n    cwe427[\"CWE-427: Uncontrolled Search Path Element\"]\n    cwe114[\"CWE-114: Process Injection\"]\n    \n    cwe114 <--|RESULT_OF| cwe427\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe427 primary\n    class cwe114 secondary\n```\n\n## Vulnerability Chain\n\nThe vulnerability chain starts with the **uncontrolled search path** (CWE-427), which allows an attacker to inject a malicious DLL. This leads to the execution of arbitrary code within the context of the application (CWE-114).\n  - CWE-427 (Root Cause): The application uses an **uncontrolled search path** when loading DLLs.\n  - CWE-114 (Impact): An attacker places a malicious DLL in a searched directory allowing for **process injection** and **arbitrary code execution**.\n\n## Summary of Analysis\n\nThe analysis is based on the provided vulnerability description and CVE reference. The core issue is **DLL hijacking**, resulting from the application loading DLLs from an **uncontrolled search path**. This directly maps to CWE-427. The consequence of this **DLL hijacking** is the ability to inject code into the running process, which can be categorized as CWE-114.\n\nThe evidence clearly indicates that the **root cause** is the **uncontrolled search path**, enabling the attacker to replace a legitimate DLL with a malicious one. The description states, \"If an attacker is somehow able to intrude into a computer that installed affected product or access to a shared folder, by replacing the DLL file with a tampered one, it is possible to execute arbitrary programs with the authority of the SYSTEM account.\"\n\nThe selection of CWE-427 is at the optimal level of specificity because it directly addresses the **root cause** of the **DLL hijacking** vulnerability.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-427: Uncontrolled Search Path Element\n**Abstraction Level**: Base\n**Similarity Score**: 0.77\n**Source**: dense\n\n**Description**:\nThe product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n### Alternative Considerations\n\n*   CWE-798 (Use of Hard-coded Credentials): While the attacker needs to craft a malicious DLL, the core issue isn't about credentials, but rather the **uncontrolled loading of DLLs**. Therefore, this CWE is not applicable.\n*   CWE-287 (Improper Authentication): This is not related to authentication bypass.\n*   CWE-732 (Incorrect Permission Assignment for Critical Resource): While permissions are involved in writing the malicious DLL, the core issue is the **uncontrolled search path**, not the permission assignment itself.\n*   CWE-94 (Improper Control of Generation of Code ('Code Injection')): This is a consequence of the DLL injection but not the root cause. The root cause is the **uncontrolled search path**.\n*   CWE-114 (Process Injection): This is a potential consequence but not the root cause of the **DLL hijacking vulnerability**.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-427:**\n- 427 (Uncontrolled Search Path Element) - ROOT\n\n\n**Chain starting from CWE-94:**\n- 94 (Improper Control of Generation of Code ('Code Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "657",
        "name": "Violation of Secure Design Principles",
        "source": "sparse"
      },
      "similarity": 983.4634653267444
    },
    {
      "metadata": {
        "doc_id": "302",
        "name": "Authentication Bypass by Assumed-Immutable Data",
        "source": "sparse"
      },
      "similarity": 886.582301214632
    },
    {
      "metadata": {
        "doc_id": "732",
        "name": "Incorrect Permission Assignment for Critical Resource",
        "source": "sparse"
      },
      "similarity": 732.6458700404733
    },
    {
      "metadata": {
        "doc_id": "287",
        "name": "Improper Authentication",
        "source": "sparse"
      },
      "similarity": 576.0401088642762
    },
    {
      "metadata": {
        "doc_id": "427",
        "name": "Uncontrolled Search Path Element",
        "source": "sparse"
      },
      "similarity": 567.2988006214885
    },
    {
      "metadata": {
        "doc_id": "400",
        "name": "Uncontrolled Resource Consumption",
        "source": "sparse"
      },
      "similarity": 549.0978466581175
    },
    {
      "metadata": {
        "doc_id": "294",
        "name": "Authentication Bypass by Capture-replay",
        "source": "sparse"
      },
      "similarity": 549.0116906437853
    },
    {
      "metadata": {
        "doc_id": "603",
        "name": "Use of Client-Side Authentication",
        "source": "sparse"
      },
      "similarity": 535.8781271739889
    },
    {
      "metadata": {
        "doc_id": "94",
        "name": "Improper Control of Generation of Code ('Code Injection')",
        "type": "Base",
        "original_content": "The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed-with-Review",
          "rationale": "This entry is frequently misused for vulnerabilities with a technical impact of \"code execution,\" which does not by itself indicate a root cause weakness, since dozens of weaknesses can enable code execution.",
          "comments": "This weakness only applies when the product's functionality intentionally constructs all or part of a code segment. It could be that executing code could be the result of other weaknesses that do not involve the construction of code segments.",
          "reasons": [
            "Frequent Misuse",
            "Frequent Misinterpretation"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5219793117545662,
            "graph": 2.06197955091694
          }
        }
      },
      "similarity": 0.5219793117545662
    },
    {
      "doc_id": "98",
      "text": "CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')",
      "score": 2.4936000000000003,
      "metadata": {
        "doc_id": "98",
        "name": "Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')",
        "type": "variant",
        "original_content": "CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')",
        "relationships": [
          {
            "source_id": "98",
            "target_id": "73",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "473",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "456",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "425",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "426",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "94",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "829",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "706",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "94",
            "target_id": "98",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "829",
            "target_id": "98",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "73",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "706",
            "target_id": "98",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "473",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "456",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "425",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0,
          "peer_group": 0.63
        },
        "abstraction_factor": 1.2,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward",
            "peer_relationship"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "94",
                  "98",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "94"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "94",
                  "98",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "94"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "98",
                  "94",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "94"
            },
            "peer_relationship": {
              "path": [
                [
                  "426",
                  "427",
                  "PEEROF"
                ],
                [
                  "98",
                  "426",
                  "CANALSOBE"
                ]
              ],
              "score": 0.63,
              "type": "peer_relationship",
              "source": "427"
            }
          }
        },
        "position": "before",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.4936000000000003
          }
        }
      },
      "similarity": 2.4936000000000003
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-427",
      "CWE-94",
      "CWE-732",
      "CWE-798",
      "CWE-114",
      "CWE-287"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}