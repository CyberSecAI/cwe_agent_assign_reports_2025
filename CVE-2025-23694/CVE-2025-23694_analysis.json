{
  "cve_id": "CVE-2025-23694",
  "description": "Cross-Site Request Forgery (CSRF) vulnerability in Shabbos Commerce Shabbos and Yom Tov allows Stored XSS.This issue affects Shabbos and Yom Tov from n/a through 1.9.",
  "key_phrases": {
    "component": "",
    "rootcause": "weakness",
    "vector": "",
    "weakness": "cross-site scripting, XSS",
    "product": "Shabbos Commerce Shabbos and Yom Tov",
    "impact": "",
    "attacker": "",
    "version": "through 1.9"
  },
  "reference_content": "Root cause of vulnerability:\nThe WordPress Shabbos and Yom Tov Plugin is vulnerable to Cross Site Request Forgery (CSRF).\n\nWeaknesses/vulnerabilities present:\nCross Site Request Forgery (CSRF) - allows a malicious actor to force higher privileged users to execute unwanted actions under their current authentication.\n\nImpact of exploitation:\nA malicious actor can force higher privileged users to execute unwanted actions. The specific impact varies case by case.\n\nAttack vectors:\nNot specified beyond the general nature of CSRF.\n\nRequired attacker capabilities/position:\nUnauthenticated.\n\nMitigation or fix:\nNo official fix available. Patchstack vPatching can auto-mitigate the vulnerability.\n\nAdditional details:\n- CVSS score: 7.1 (Low severity)\n- Affected versions: <= 1.9\n- OWASP Top 10: A1: Broken Access Control\n- Reported by: SOPROBRO\n- Published by Patchstack: January 16, 2025\n- Plugin: Shabbos and Yom Tov",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID  | CWE Name                                                                                                                                     | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :------------------------------------------------------------------------------------------------------------------------------------------- | :---------- | :---------------------- | :------------------------------ | :------------------------------ |\n| CWE-352   | Cross-Site Request Forgery (CSRF)                                                                                                          | 1.0         | Compound                | Primary CWE                     | Allowed                       |\n| CWE-79    | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')                                                        | 1.0         | Base                    | Secondary Candidate              | Allowed                       |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is CWE-352 [Cross-Site Request Forgery (CSRF)]. The vulnerability description indicates that a malicious actor can force higher privileged users to execute unwanted actions. This aligns directly with the description of CSRF. CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')] is a secondary weakness because the CSRF vulnerability is exploited to inject a Stored XSS. The CSRF attack allows an attacker to inject malicious scripts that are then stored and executed when other users view the affected content.\n\n```mermaid\ngraph TD\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    \n    cwe79 -- CANFOLLOW --> cwe352\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe352 primary\n    class cwe79 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **CWE-352 [Cross-Site Request Forgery (CSRF)]**, which allows an attacker to force a user to perform unwanted actions. This leads to **CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')]** because the attacker uses the CSRF vulnerability to inject malicious scripts that are not properly neutralized, resulting in stored XSS.\n\n## Summary of Analysis\nThe analysis is based on the provided evidence. The **Vulnerability Description** states \"Cross-Site Request Forgery (CSRF) vulnerability in Shabbos Commerce Shabbos and Yom Tov allows Stored XSS\". The **CVE Reference Links Content Summary** confirms that the root cause is a CSRF vulnerability. The description aligns with the definition of CWE-352 [Cross-Site Request Forgery (CSRF)], which involves forcing a user to execute unwanted actions. In this specific case, the action is the injection of malicious code, which leads to CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')]. The selected CWEs are at the optimal level of specificity. CWE-352 [Cross-Site Request Forgery (CSRF)] is a Compound weakness, representing the broader category of the attack, while CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')] is a Base weakness, representing the specific coding error that allows the XSS to occur.\n\nRelevant CWE Information:\n- CWE-352 [Cross-Site Request Forgery (CSRF)]: The web application does not sufficiently verify whether a well-formed request was intentionally provided by the user.\n- CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')]: The product does not neutralize user-controllable input before it is placed in output that is used as a web page.\n\nCWEs Considered but Not Used:\n\n*   CWE-89 [Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')]: This was considered due to the possibility of injecting SQL code through the CSRF vulnerability, but the description specifically mentions XSS, not SQL injection.\n*   CWE-434 [Unrestricted Upload of File with Dangerous Type]: This was considered because the CSRF could potentially be used to upload malicious files, but the description focuses on XSS.\n*   CWE-425 [Direct Request ('Forced Browsing')]: This was considered because CSRF involves making requests, but the key aspect of CSRF is the forced action by a user, which is not the primary characteristic of CWE-425 [Direct Request ('Forced Browsing')].\n*   CWE-918 [Server-Side Request Forgery (SSRF)]: This was considered because the CSRF could potentially be used to make server-side requests, but there's no direct evidence of this.\n*   CWE-116 [Improper Encoding or Escaping of Output]: This was considered as it relates to outputting data, but CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')] is a better fit for XSS.\n*   CWE-80 [Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)]: While related to XSS, CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')] is more general and fits the description better.\n*   CWE-184 [Incomplete List of Disallowed Inputs]: This was considered but it is not specific enough, as the core issue is the CSRF leading to XSS.\n*   CWE-472 [External Control of Assumed-Immutable Web Parameter]: This was considered because CSRF attacks involve manipulating parameters, but the core issue is the lack of CSRF protection, not the immutability of parameters.\n*   CWE-639 [Authorization Bypass Through User-Controlled Key]: This was considered because CSRF attacks can bypass authorization, but CSRF is the primary issue, not the user-controlled key.\n*   CWE-201 [Insertion of Sensitive Information Into Sent Data]: This was not considered as there is no evidence to suggest that any sensitive information is being inserted into data that is being sent.\n*   CWE-183 [Permissive List of Allowed Inputs]: This was considered but it is not specific enough, as the core issue is the CSRF leading to XSS.\n*   CWE-494 [Download of Code Without Integrity Check]: This was not considered as there is no evidence to suggest that code is being downloaded without integrity check.\n*   CWE-78 [Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')]: This was not considered as there is no evidence to suggest that OS commands are being injected.\n*   CWE-73 [External Control of File Name or Path]: This was not considered as there is no evidence to suggest that file names or paths are being controlled externally.\n*   CWE-471 [Modification of Assumed-Immutable Data (MAID)]: This was not considered as there is no evidence to suggest that data is being modified.",
  "analysis_with_relationships": "# Summary\n| CWE ID  | CWE Name                                                                                                                                     | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n| :-------- | :------------------------------------------------------------------------------------------------------------------------------------------- | :---------- | :---------------------- | :------------------------------ | :------------------------------ |\n| CWE-352   | Cross-Site Request Forgery (CSRF)                                                                                                          | 1.0         | Compound                | Primary CWE                     | Allowed                       |\n| CWE-79    | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')                                                        | 1.0         | Base                    | Secondary Candidate              | Allowed                       |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary weakness is CWE-352 [Cross-Site Request Forgery (CSRF)]. The vulnerability description indicates that a malicious actor can force higher privileged users to execute unwanted actions. This aligns directly with the description of CSRF. CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')] is a secondary weakness because the CSRF vulnerability is exploited to inject a Stored XSS. The CSRF attack allows an attacker to inject malicious scripts that are then stored and executed when other users view the affected content.\n\n```mermaid\ngraph TD\n    cwe352[\"CWE-352: Cross-Site Request Forgery (CSRF)\"]\n    cwe79[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"]\n    \n    cwe79 -- CANFOLLOW --> cwe352\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    class cwe352 primary\n    class cwe79 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with **CWE-352 [Cross-Site Request Forgery (CSRF)]**, which allows an attacker to force a user to perform unwanted actions. This leads to **CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')]** because the attacker uses the CSRF vulnerability to inject malicious scripts that are not properly neutralized, resulting in stored XSS.\n\n## Summary of Analysis\nThe analysis is based on the provided evidence. The **Vulnerability Description** states \"Cross-Site Request Forgery (CSRF) vulnerability in Shabbos Commerce Shabbos and Yom Tov allows Stored XSS\". The **CVE Reference Links Content Summary** confirms that the root cause is a CSRF vulnerability. The description aligns with the definition of CWE-352 [Cross-Site Request Forgery (CSRF)], which involves forcing a user to execute unwanted actions. In this specific case, the action is the injection of malicious code, which leads to CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')]. The selected CWEs are at the optimal level of specificity. CWE-352 [Cross-Site Request Forgery (CSRF)] is a Compound weakness, representing the broader category of the attack, while CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')] is a Base weakness, representing the specific coding error that allows the XSS to occur.\n\nRelevant CWE Information:\n- CWE-352 [Cross-Site Request Forgery (CSRF)]: The web application does not sufficiently verify whether a well-formed request was intentionally provided by the user.\n- CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')]: The product does not neutralize user-controllable input before it is placed in output that is used as a web page.\n\nCWEs Considered but Not Used:\n\n*   CWE-89 [Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')]: This was considered due to the possibility of injecting SQL code through the CSRF vulnerability, but the description specifically mentions XSS, not SQL injection.\n*   CWE-434 [Unrestricted Upload of File with Dangerous Type]: This was considered because the CSRF could potentially be used to upload malicious files, but the description focuses on XSS.\n*   CWE-425 [Direct Request ('Forced Browsing')]: This was considered because CSRF involves making requests, but the key aspect of CSRF is the forced action by a user, which is not the primary characteristic of CWE-425 [Direct Request ('Forced Browsing')].\n*   CWE-918 [Server-Side Request Forgery (SSRF)]: This was considered because the CSRF could potentially be used to make server-side requests, but there's no direct evidence of this.\n*   CWE-116 [Improper Encoding or Escaping of Output]: This was considered as it relates to outputting data, but CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')] is a better fit for XSS.\n*   CWE-80 [Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)]: While related to XSS, CWE-79 [Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')] is more general and fits the description better.\n*   CWE-184 [Incomplete List of Disallowed Inputs]: This was considered but it is not specific enough, as the core issue is the CSRF leading to XSS.\n*   CWE-472 [External Control of Assumed-Immutable Web Parameter]: This was considered because CSRF attacks involve manipulating parameters, but the core issue is the lack of CSRF protection, not the immutability of parameters.\n*   CWE-639 [Authorization Bypass Through User-Controlled Key]: This was considered because CSRF attacks can bypass authorization, but CSRF is the primary issue, not the user-controlled key.\n*   CWE-201 [Insertion of Sensitive Information Into Sent Data]: This was not considered as there is no evidence to suggest that any sensitive information is being inserted into data that is being sent.\n*   CWE-183 [Permissive List of Allowed Inputs]: This was considered but it is not specific enough, as the core issue is the CSRF leading to XSS.\n*   CWE-494 [Download of Code Without Integrity Check]: This was not considered as there is no evidence to suggest that code is being downloaded without integrity check.\n*   CWE-78 [Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')]: This was not considered as there is no evidence to suggest that OS commands are being injected.\n*   CWE-73 [External Control of File Name or Path]: This was not considered as there is no evidence to suggest that file names or paths are being controlled externally.\n*   CWE-471 [Modification of Assumed-Immutable Data (MAID)]: This was not considered as there is no evidence to suggest that data is being modified.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-183:**\n- 183 (Permissive List of Allowed Inputs) - ROOT\n\n\n**Chain starting from CWE-89:**\n- 89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: XSS",
        "match_reason": "exact_match_compound_part_1"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse"
      },
      "similarity": 220.45104835457147
    },
    {
      "metadata": {
        "doc_id": "1004",
        "name": "Sensitive Cookie Without 'HttpOnly' Flag",
        "source": "sparse"
      },
      "similarity": 171.54516002088516
    },
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "sparse"
      },
      "similarity": 169.73112143898084
    },
    {
      "metadata": {
        "doc_id": "116",
        "name": "Improper Encoding or Escaping of Output",
        "source": "sparse"
      },
      "similarity": 169.60967887856575
    },
    {
      "metadata": {
        "doc_id": "80",
        "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
        "source": "sparse"
      },
      "similarity": 168.76074016910542
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "source": "sparse"
      },
      "similarity": 166.39107164017645
    },
    {
      "metadata": {
        "doc_id": "918",
        "name": "Server-Side Request Forgery (SSRF)",
        "source": "sparse"
      },
      "similarity": 165.3698154358137
    },
    {
      "metadata": {
        "doc_id": "425",
        "name": "Direct Request ('Forced Browsing')",
        "type": "Base",
        "original_content": "The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.",
        "keyphrase_source": "rootcause:weakness",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.541129394354144,
            "graph": 2.2820392915944665
          }
        }
      },
      "similarity": 0.541129394354144
    },
    {
      "doc_id": "184",
      "text": "CWE-184: Incomplete List of Disallowed Inputs",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "184",
        "name": "Incomplete List of Disallowed Inputs",
        "type": "base",
        "original_content": "CWE-184: Incomplete List of Disallowed Inputs",
        "relationships": [
          {
            "source_id": "184",
            "target_id": "692",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "434",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "78",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "79",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "1023",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "184",
            "target_id": "693",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "86",
            "target_id": "184",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "79",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "78",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "693",
            "target_id": "184",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "692",
            "target_id": "184",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "692",
            "target_id": "184",
            "label": "STARTSWITH",
            "properties": {
              "view_id": "709"
            }
          },
          {
            "source_id": "625",
            "target_id": "184",
            "label": "PEEROF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "434",
            "target_id": "184",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "186",
            "target_id": "184",
            "label": "CANALSOBE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1023",
            "target_id": "184",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward",
            "vulnerability_sequence_backward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "79",
                  "184",
                  "CANFOLLOW"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "79"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "79",
                  "184",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.9,
              "type": "vulnerability_sequence_forward",
              "source": "79"
            },
            "vulnerability_sequence_backward": {
              "path": [
                [
                  "184",
                  "79",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_backward",
              "source": "79"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-183",
      "CWE-89",
      "CWE-471",
      "CWE-116",
      "CWE-494",
      "CWE-80",
      "CWE-639",
      "CWE-79",
      "CWE-201",
      "CWE-73",
      "CWE-472",
      "CWE-352",
      "CWE-78",
      "CWE-184",
      "CWE-918",
      "CWE-425",
      "CWE-434"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}