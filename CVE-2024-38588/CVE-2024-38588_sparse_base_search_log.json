{
  "method": "sparse_base",
  "query": "In the Linux kernel, the following vulnerability has been resolved ftrace Fix possible use-after-free issue in ftrace_location() KASAN reports a bug BUG KASAN use-after-free in ftrace_location+0x90/0x120 Read of size 8 at addr ffff888141d40010 by task insmod/424 CPU 8 PID 424 Comm insmod Tainted G W 6.9.0-rc2+ [...] Call Trace dump_stack_lvl+0x68/0xa0 print_report+0xcf/0x610 kasan_report+0xb5/0xe0 ftrace_location+0x90/0x120 register_kprobe+0x14b/0xa40 kprobe_init+0x2d/0xff0 [kprobe_example] do_one_initcall+0x8f/0x2d0 do_init_module+0x13a/0x3c0 load_module+0x3082/0x33d0 init_module_from_file+0xd2/0x130 __x64_sys_finit_module+0x306/0x440 do_syscall_64+0x68/0x140 entry_SYSCALL_64_after_hwframe+0x71/0x79 The root cause is that, in lookup_rec(), ftrace record of some address is being searched in ftrace pages of some module, but those ftrace pages at the same time is being freed in ftrace_release_mod() as the corresponding module is being deleted CPU1 | CPU2 register_kprobes() { | delete_module() { check_kprobe_address_safe() { | arch_check_ftrace_location() { | ftrace_location() { | lookup_rec() // USE! | ftrace_release_mod() // Free! To fix this issue 1. Hold rcu lock as accessing ftrace pages in ftrace_location_range() 2. Use ftrace_location_range() instead of lookup_rec() in",
  "keyphrases": {
    "base_query": "In the Linux kernel, the following vulnerability has been resolved ftrace Fix possible use-after-free issue in ftrace_location() KASAN reports a bug BUG KASAN use-after-free in ftrace_location+0x90/0x120 Read of size 8 at addr ffff888141d40010 by task insmod/424 CPU 8 PID 424 Comm insmod Tainted G W 6.9.0-rc2+ [...] Call Trace dump_stack_lvl+0x68/0xa0 print_report+0xcf/0x610 kasan_report+0xb5/0xe0 ftrace_location+0x90/0x120 register_kprobe+0x14b/0xa40 kprobe_init+0x2d/0xff0 [kprobe_example] do_one_initcall+0x8f/0x2d0 do_init_module+0x13a/0x3c0 load_module+0x3082/0x33d0 init_module_from_file+0xd2/0x130 __x64_sys_finit_module+0x306/0x440 do_syscall_64+0x68/0x140 entry_SYSCALL_64_after_hwframe+0x71/0x79 The root cause is that, in lookup_rec(), ftrace record of some address is being searched in ftrace pages of some module, but those ftrace pages at the same time is being freed in ftrace_release_mod() as the corresponding module is being deleted CPU1 | CPU2 register_kprobes() { | delete_module() { check_kprobe_address_safe() { | arch_check_ftrace_location() { | ftrace_location() { | lookup_rec() // USE! | ftrace_release_mod() // Free! To fix this issue 1. Hold rcu lock as accessing ftrace pages in ftrace_location_range() 2. Use ftrace_location_range() instead of lookup_rec() in"
  },
  "timestamp": "2025-07-12T02:41:00.533631",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 191.88230270159676
    },
    {
      "doc_id": "667",
      "name": "Improper Locking",
      "score": 175.0738015423321
    },
    {
      "doc_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "score": 169.05020664559223
    },
    {
      "doc_id": "401",
      "name": "Missing Release of Memory after Effective Lifetime",
      "score": 162.96328870408658
    },
    {
      "doc_id": "1390",
      "name": "Weak Authentication",
      "score": 159.28413796951492
    }
  ]
}