{
  "retriever": "sparse",
  "query": "In the Linux kernel, the following vulnerability has been resolved ftrace Fix possible use-after-free issue in ftrace_location() KASAN reports a bug BUG KASAN use-after-free in ftrace_location+0x90/0x120 Read of size 8 at addr ffff888141d40010 by task insmod/424 CPU 8 PID 424 Comm insmod Tainted G W 6.9.0-rc2+ [...] Call Trace dump_stack_lvl+0x68/0xa0 print_report+0xcf/0x610 kasan_report+0xb5/0xe0 ftrace_location+0x90/0x120 register_kprobe+0x14b/0xa40 kprobe_init+0x2d/0xff0 [kprobe_example] do_one_initcall+0x8f/0x2d0 do_init_module+0x13a/0x3c0 load_module+0x3082/0x33d0 init_module_from_file+0xd2/0x130 __x64_sys_finit_module+0x306/0x440 do_syscall_64+0x68/0x140 entry_SYSCALL_64_after_hwframe+0x71/0x79 The root cause is that, in lookup_rec(), ftrace record of some address is being searched in ftrace pages of some module, but those ftrace pages at the same time is being freed in ftrace_release_mod() as the corresponding module is being deleted CPU1 | CPU2 register_kprobes() { | delete_module() { check_kprobe_address_safe() { | arch_check_ftrace_location() { | ftrace_location() { | lookup_rec() // USE! | ftrace_release_mod() // Free! To fix this issue 1. Hold rcu lock as accessing ftrace pages in ftrace_location_range() 2. Use ftrace_location_range() instead of lookup_rec() in",
  "keyphrases": {
    "rootcause": [
      "race condition"
    ],
    "weakness": [
      "use-after-free"
    ]
  },
  "timestamp": "2025-07-12 02:41:00",
  "cve_id": "CVE-2024-38588",
  "result_count": 11,
  "results": [
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 1000.0,
      "search_source": "alternate_term_match"
    },
    {
      "cwe_id": "416",
      "name": "Use After Free",
      "score": 1000.0,
      "search_source": "alternate_term_match"
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "score": 550.2901402954495,
      "search_source": "rootcause:race condition"
    },
    {
      "cwe_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "score": 537.9748906821212,
      "search_source": "rootcause:race condition"
    },
    {
      "cwe_id": "401",
      "name": "Missing Release of Memory after Effective Lifetime",
      "score": 497.69613766738485,
      "search_source": "rootcause:race condition"
    },
    {
      "cwe_id": "364",
      "name": "Signal Handler Race Condition",
      "score": 489.1254581071509,
      "search_source": "rootcause:race condition"
    },
    {
      "cwe_id": "415",
      "name": "Double Free",
      "score": 486.12160991976936,
      "search_source": "rootcause:race condition"
    },
    {
      "cwe_id": "1390",
      "name": "Weak Authentication",
      "score": 477.85241390854475,
      "search_source": "rootcause:race condition"
    },
    {
      "cwe_id": "639",
      "name": "Authorization Bypass Through User-Controlled Key",
      "score": 477.5491335679309,
      "search_source": "rootcause:race condition"
    },
    {
      "cwe_id": "863",
      "name": "Incorrect Authorization",
      "score": 475.43958702216855,
      "search_source": "rootcause:race condition"
    },
    {
      "cwe_id": "131",
      "name": "Incorrect Calculation of Buffer Size",
      "score": 459.75566572861965,
      "search_source": "weakness:use-after-free"
    }
  ]
}