{
  "cve_id": "CVE-2025-5362",
  "description": "A vulnerability, which was classified as critical, was found in Campcodes Online Hospital Management System 1.0. Affected is an unknown function of the file /admin/doctor-specilization.php. The manipulation of the argument doctorspecilization leads to **sql injection**. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "sql injection",
    "impact": "",
    "vector": "manipulation of argument doctorspecilization",
    "attacker": "",
    "product": "Campcodes Online Hospital Management System",
    "version": "1",
    "component": "/admin/doctor-specilization.php"
  },
  "reference_content": "The content relates to CVE-2025-5362. Here's the extracted information:\n\n**Root cause of vulnerability:**\n\n*   A SQL injection vulnerability was found in the '/hms/admin/doctor-specilization.php' file of the 'Online Hospital Management System' project. The reason for this issue is that attackers inject malicious code from the parameter 'doctorspecilization' and use it directly in SQL queries without the need for appropriate cleaning or validation.\n\n**Weaknesses/vulnerabilities present:**\n\n*   SQL injection\n\n**Impact of exploitation:**\n\n*   Attackers can exploit this SQL injection vulnerability to achieve unauthorized database access, sensitive data leakage, data tampering, comprehensive system control, and even service interruption.\n\n**Attack vectors:**\n\n*   The '/hms/admin/doctor-specilization.php' file is vulnerable via the 'doctorspecilization' parameter.\n*   No login or authorization is required to exploit this vulnerability.\n\n**Required attacker capabilities/position:**\n\n*   An attacker needs to be able to send crafted HTTP POST requests to the vulnerable file. No authentication is required.\n\n**Mitigation or fix:**\n\n*   Use prepared statements and parameter binding.\n*   Input validation and filtering.\n*   Minimize database user permissions.\n*   Regular security audits.\n\n**Payload Example:**\n\n```\nParameter: doctorspecilization (POST)\n    Type: time-based blind\n    Title: MySQL >= 5.0.12 AND time-based blind (query SLEEP)\n    Payload: doctorspecilization=111' AND (SELECT 4662 FROM (SELECT(SLEEP(5)))PFML) AND 'ziXa'='ziXa&submit=\n```\n\n**Additional Details (more than official CVE description):**\n\n*   The vulnerable software is campcodes Online Hospital Management System V1.0.\n*   A link to the software download is provided: <https://www.campcodes.com/downloads/complete-online-hospital-management-system-using-php-and-mysql-source-code/?wpdmdl=5553&ind=0>\n*   The issue was reported by ASantsSec.\n*   SQLmap was used to verify the vulnerability.\n*   Screenshots of SQLmap output are included.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-89 | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | 1.0 | Base | Allowed | Primary CWE. The **root cause** is the **improper neutralization** of special elements in an SQL command. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship that influenced the decision was the direct match of the vulnerability description to the CWE-89 description. There were no other relationships needed to arrive at this decision.\n\n```mermaid\ngraph TD\n    cwe89[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"]\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    class cwe89 primary\n```\n\n## Vulnerability Chain\nThe vulnerability chain consists of a single step:\n\n1.  **Root Cause:** **Improper neutralization** of special elements used in an SQL command (CWE-89) leading directly to the **SQL Injection**.\n\n## Summary of Analysis\nThe initial analysis strongly pointed towards CWE-89 due to the clear description of an **SQL injection vulnerability**. The CVE Reference Links Content Summary explicitly states that the **root cause** is the **lack of appropriate cleaning or validation** of the 'doctorspecilization' parameter, which is then directly used in SQL queries. The provided payload example further solidifies this assessment. The retriever results also listed CWE-89 as the top match. Therefore, CWE-89 is the most appropriate and specific classification.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.81\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## Vulnerability Description\nA vulnerability, which was classified as critical, was found in Campcodes Online Hospital Management System 1.0. Affected is an unknown function of the file /admin/doctor-specilization.php. The manipulation of the argument doctorspecilization leads to **sql injection**. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used.\n\n### Vulnerability Description Key Phrases\n- **weakness:** **sql injection**\n- **vector:** manipulation of argument doctorspecilization\n- **product:** Campcodes Online Hospital Management System\n- **version:** 1\n- **component:** /admin/doctor-specilization.php\n\n## CVE Reference Links Content Summary\nThe content relates to CVE-2025-5362. Here's the extracted information:\n\n**Root cause of vulnerability:**\n\n*   A SQL injection vulnerability was found in the '/hms/admin/doctor-specilization.php' file of the 'Online Hospital Management System' project. The reason for this issue is that attackers inject malicious code from the parameter 'doctorspecilization' and use it directly in SQL queries without the need for appropriate cleaning or validation.\n\n**Weaknesses/vulnerabilities present:**\n\n*   SQL injection\n\n**Impact of exploitation:**\n\n*   Attackers can exploit this SQL injection vulnerability to achieve unauthorized database access, sensitive data leakage, data tampering, comprehensive system control, and even service interruption.\n\n**Attack vectors:**\n\n*   The '/hms/admin/doctor-specilization.php' file is vulnerable via the 'doctorspecilization' parameter.\n*   No login or authorization is required to exploit this vulnerability.\n\n**Required attacker capabilities/position:**\n\n*   An attacker needs to be able to send crafted HTTP POST requests to the vulnerable file. No authentication is required.\n\n**Mitigation or fix:**\n\n*   Use prepared statements and parameter binding.\n*   Input validation and filtering.\n*   Minimize database user permissions.\n*   Regular security audits.\n\n**Payload Example:**\n\n```\nParameter: doctorspecilization (POST)\n    Type: time-based blind\n    Title: MySQL >= 5.0.12 AND time-based blind (query SLEEP)\n    Payload: doctorspecilization=111' AND (SELECT 4662 FROM (SELECT(SLEEP(5)))PFML) AND 'ziXa'='ziXa&submit=\n```\n\n**Additional Details (more than official CVE description):**\n\n*   The vulnerable software is campcodes Online Hospital Management System V1.0.\n*   A link to the software download is provided: <https://www.campcodes.com/downloads/complete-online-hospital-management-system-using-php-and-mysql-source-code/?wpdmdl=5553&ind=0>\n*   The issue was reported by ASantsSec.\n*   SQLmap was used to verify the vulnerability.\n*   Screenshots of SQLmap output are included.\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 89 | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | Base | Allowed | alternate_terms | 1.000 |\n| 2 | 79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | Base | Allowed | sparse | 0.421 |\n| 3 | 434 | Unrestricted Upload of File with Dangerous Type | Base | Allowed | sparse | 0.360 |\n| 4 | 1336 | Improper Neutralization of Special Elements Used in a Template Engine | Base | Allowed | sparse | 0.347 |\n| 5 | 705 | Incorrect Control Flow Scoping | Class | Allowed-with-Review | sparse | 0.332 |\n| 6 | 352 | Cross-Site Request Forgery (CSRF) | Compound | Allowed | sparse | 0.329 |\n| 7 | 99 | Improper Control of Resource Identifiers ('Resource Injection') | Class | Allowed-with-Review | sparse | 0.325 |\n| 8 | 117 | Improper Output Neutralization for Logs | Base | Allowed | sparse | 0.325 |\n| 9 | 96 | Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') | Base | Allowed | dense | 0.597 |\n| 10 | 425 | Direct Request ('Forced Browsing') | Base | Allowed | graph | 0.002 |",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-89 | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | 1.0 | Base | Allowed | Primary CWE. The **root cause** is the **improper neutralization** of special elements in an SQL command. |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 1.0\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship that influenced the decision was the direct match of the vulnerability description to the CWE-89 description. There were no other relationships needed to arrive at this decision.\n\n```mermaid\ngraph TD\n    cwe89[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"]\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    class cwe89 primary\n```\n\n## Vulnerability Chain\nThe vulnerability chain consists of a single step:\n\n1.  **Root Cause:** **Improper neutralization** of special elements used in an SQL command (CWE-89) leading directly to the **SQL Injection**.\n\n## Summary of Analysis\nThe initial analysis strongly pointed towards CWE-89 due to the clear description of an **SQL injection vulnerability**. The CVE Reference Links Content Summary explicitly states that the **root cause** is the **lack of appropriate cleaning or validation** of the 'doctorspecilization' parameter, which is then directly used in SQL queries. The provided payload example further solidifies this assessment. The retriever results also listed CWE-89 as the top match. Therefore, CWE-89 is the most appropriate and specific classification.\n\nRelevant CWE Information:\n\n# Enhanced Context (25 CWEs)\nThe following CWEs were identified as potentially relevant to this vulnerability:\n\n## CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\n**Abstraction Level**: Base\n**Similarity Score**: 0.81\n**Source**: dense\n\n**Description**:\nThe product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.\n\n**Mapping Guidance**:\n- Usage: Allowed\n- Rationale: This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\n## Vulnerability Description\nA vulnerability, which was classified as critical, was found in Campcodes Online Hospital Management System 1.0. Affected is an unknown function of the file /admin/doctor-specilization.php. The manipulation of the argument doctorspecilization leads to **sql injection**. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used.\n\n### Vulnerability Description Key Phrases\n- **weakness:** **sql injection**\n- **vector:** manipulation of argument doctorspecilization\n- **product:** Campcodes Online Hospital Management System\n- **version:** 1\n- **component:** /admin/doctor-specilization.php\n\n## CVE Reference Links Content Summary\nThe content relates to CVE-2025-5362. Here's the extracted information:\n\n**Root cause of vulnerability:**\n\n*   A SQL injection vulnerability was found in the '/hms/admin/doctor-specilization.php' file of the 'Online Hospital Management System' project. The reason for this issue is that attackers inject malicious code from the parameter 'doctorspecilization' and use it directly in SQL queries without the need for appropriate cleaning or validation.\n\n**Weaknesses/vulnerabilities present:**\n\n*   SQL injection\n\n**Impact of exploitation:**\n\n*   Attackers can exploit this SQL injection vulnerability to achieve unauthorized database access, sensitive data leakage, data tampering, comprehensive system control, and even service interruption.\n\n**Attack vectors:**\n\n*   The '/hms/admin/doctor-specilization.php' file is vulnerable via the 'doctorspecilization' parameter.\n*   No login or authorization is required to exploit this vulnerability.\n\n**Required attacker capabilities/position:**\n\n*   An attacker needs to be able to send crafted HTTP POST requests to the vulnerable file. No authentication is required.\n\n**Mitigation or fix:**\n\n*   Use prepared statements and parameter binding.\n*   Input validation and filtering.\n*   Minimize database user permissions.\n*   Regular security audits.\n\n**Payload Example:**\n\n```\nParameter: doctorspecilization (POST)\n    Type: time-based blind\n    Title: MySQL >= 5.0.12 AND time-based blind (query SLEEP)\n    Payload: doctorspecilization=111' AND (SELECT 4662 FROM (SELECT(SLEEP(5)))PFML) AND 'ziXa'='ziXa&submit=\n```\n\n**Additional Details (more than official CVE description):**\n\n*   The vulnerable software is campcodes Online Hospital Management System V1.0.\n*   A link to the software download is provided: <https://www.campcodes.com/downloads/complete-online-hospital-management-system-using-php-and-mysql-source-code/?wpdmdl=5553&ind=0>\n*   The issue was reported by ASantsSec.\n*   SQLmap was used to verify the vulnerability.\n*   Screenshots of SQLmap output are included.\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 89 | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | Base | Allowed | alternate_terms | 1.000 |\n| 2 | 79 | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | Base | Allowed | sparse | 0.421 |\n| 3 | 434 | Unrestricted Upload of File with Dangerous Type | Base | Allowed | sparse | 0.360 |\n| 4 | 1336 | Improper Neutralization of Special Elements Used in a Template Engine | Base | Allowed | sparse | 0.347 |\n| 5 | 705 | Incorrect Control Flow Scoping | Class | Allowed-with-Review | sparse | 0.332 |\n| 6 | 352 | Cross-Site Request Forgery (CSRF) | Compound | Allowed | sparse | 0.329 |\n| 7 | 99 | Improper Control of Resource Identifiers ('Resource Injection') | Class | Allowed-with-Review | sparse | 0.325 |\n| 8 | 117 | Improper Output Neutralization for Logs | Base | Allowed | sparse | 0.325 |\n| 9 | 96 | Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') | Base | Allowed | dense | 0.597 |\n| 10 | 425 | Direct Request ('Forced Browsing') | Base | Allowed | graph | 0.002 |\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-89:**\n- 89 (Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "89",
        "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "source": "alternate_terms",
        "original_matched_text": "AlternateTerms: SQL injection",
        "match_reason": "exact_match_whole_phrase"
      },
      "similarity": 1000.0,
      "alternate_term_match": true
    },
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 420.61698936401825
    },
    {
      "metadata": {
        "doc_id": "434",
        "name": "Unrestricted Upload of File with Dangerous Type",
        "source": "sparse"
      },
      "similarity": 360.11546623460373
    },
    {
      "metadata": {
        "doc_id": "1336",
        "name": "Improper Neutralization of Special Elements Used in a Template Engine",
        "source": "sparse"
      },
      "similarity": 346.93225639897577
    },
    {
      "metadata": {
        "doc_id": "705",
        "name": "Incorrect Control Flow Scoping",
        "source": "sparse"
      },
      "similarity": 332.1684020988241
    },
    {
      "metadata": {
        "doc_id": "352",
        "name": "Cross-Site Request Forgery (CSRF)",
        "source": "sparse"
      },
      "similarity": 329.18998163102793
    },
    {
      "metadata": {
        "doc_id": "99",
        "name": "Improper Control of Resource Identifiers ('Resource Injection')",
        "source": "sparse"
      },
      "similarity": 325.3220089744653
    },
    {
      "metadata": {
        "doc_id": "117",
        "name": "Improper Output Neutralization for Logs",
        "source": "sparse"
      },
      "similarity": 324.7048701336678
    },
    {
      "metadata": {
        "doc_id": "96",
        "name": "Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')",
        "type": "Base",
        "original_content": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.",
        "keyphrase_source": "weakness:sql injection",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5967713933421106,
            "graph": 1.6933459618611413
          }
        }
      },
      "similarity": 0.5967713933421106
    },
    {
      "doc_id": "425",
      "text": "The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.",
      "score": 0.61373713805422,
      "metadata": {
        "doc_id": "425",
        "name": "Direct Request ('Forced Browsing')",
        "type": "Base",
        "extended_description": "Web applications susceptible to direct request attacks often make the false assumption that such resources can only be reached through a given navigation path and so only apply authorization at certain points in the path.",
        "alternate_terms": [
          "forced browsing"
        ],
        "original_content": "The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.",
        "relationships": [
          {
            "source_id": "425",
            "target_id": "98",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "425",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "425",
            "target_id": "424",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "425",
            "target_id": "288",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "425",
            "target_id": "862",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1003"
            }
          },
          {
            "source_id": "425",
            "target_id": "862",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "98",
            "target_id": "425",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "862",
            "target_id": "425",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "425",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "424",
            "target_id": "425",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "288",
            "target_id": "425",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "source": "graph",
        "sources": [
          "vector",
          "graph"
        ],
        "vector_score": 0.61373713805422,
        "graph_score": 3.4200400000000006,
        "score_components": {
          "relationship_chain": 0.6,
          "explicit_mention": 1.0,
          "abstraction_path": 0.9,
          "sequence_path": 0.5760000000000002
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "89",
                  "456",
                  "CANFOLLOW"
                ],
                [
                  "456",
                  "98",
                  "CANPRECEDE"
                ],
                [
                  "98",
                  "425",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.6,
              "type": "relationship_chain",
              "source": "89"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "79",
                  "184",
                  "CANFOLLOW"
                ],
                [
                  "184",
                  "98",
                  "CANPRECEDE"
                ],
                [
                  "98",
                  "425",
                  "CANFOLLOW"
                ]
              ],
              "score": 0.5760000000000002,
              "type": "vulnerability_sequence_forward",
              "source": "79"
            }
          }
        },
        "is_explicit": true,
        "abstraction_level": "base",
        "position": "after",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.5664437613465211,
            "graph": 2.2975188552216883
          }
        }
      },
      "similarity": 2.2975188552216883
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-89"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}