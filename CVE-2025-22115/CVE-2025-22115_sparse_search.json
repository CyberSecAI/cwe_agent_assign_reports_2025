{
  "retriever": "sparse",
  "query": "In the Linux kernel, the following vulnerability has been resolved btrfs fix block group refcount race in btrfs_create_pending_block_groups() Block group creation is done in two phases, which results in a slightly unintuitive property a block group can be allocated/deallocated from after btrfs_make_block_group() adds it to the space_info with btrfs_add_bg_to_space_info(), but before creation is completely completed in btrfs_create_pending_block_groups(). As a result, it is possible for a block group to go unused and have btrfs_mark_bg_unused called on it concurrently with btrfs_create_pending_block_groups. This causes a number of issues, which were fixed with the block group flag BLOCK_GROUP_FLAG_NEW. However, this fix is not quite complete. Since it does not use the unused_bg_lock, it is possible for the following race to occur btrfs_create_pending_block_groups btrfs_mark_bg_unused if list_empty // false list_del_init clear_bit else if (test_bit) // true list_move_tail And we get into the exact same broken ref count and invalid new_bgs state for transaction cleanup that BLOCK_GROUP_FLAG_NEW was designed to prevent. The broken refcount aspect will result in a warning like",
  "keyphrases": {
    "weakness": [
      "block group refcount race"
    ]
  },
  "timestamp": "2025-07-12 10:03:10",
  "cve_id": "CVE-2025-22115",
  "result_count": 11,
  "results": [
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 766.6147854666563,
      "search_source": "weakness:block group refcount race"
    },
    {
      "cwe_id": "863",
      "name": "Incorrect Authorization",
      "score": 759.923310585451,
      "search_source": "weakness:block group refcount race"
    },
    {
      "cwe_id": "415",
      "name": "Double Free",
      "score": 753.2459180757328,
      "search_source": "weakness:block group refcount race"
    },
    {
      "cwe_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "score": 739.7437895478018,
      "search_source": "weakness:block group refcount race"
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "score": 712.3365738861335,
      "search_source": "weakness:block group refcount race"
    },
    {
      "cwe_id": "327",
      "name": "Use of a Broken or Risky Cryptographic Algorithm",
      "score": 711.764785078352,
      "search_source": "weakness:block group refcount race"
    },
    {
      "cwe_id": "923",
      "name": "Improper Restriction of Communication Channel to Intended Endpoints",
      "score": 706.0260216883703,
      "search_source": "weakness:block group refcount race"
    },
    {
      "cwe_id": "1390",
      "name": "Weak Authentication",
      "score": 701.7529135763883,
      "search_source": "weakness:block group refcount race"
    },
    {
      "cwe_id": "212",
      "name": "Improper Removal of Sensitive Information Before Storage or Transfer",
      "score": 700.5831343282434,
      "search_source": "weakness:block group refcount race"
    },
    {
      "cwe_id": "364",
      "name": "Signal Handler Race Condition",
      "score": 699.6829738184533,
      "search_source": "weakness:block group refcount race"
    },
    {
      "cwe_id": "287",
      "name": "Improper Authentication",
      "score": 246.0834388470193,
      "search_source": "base_query"
    }
  ]
}