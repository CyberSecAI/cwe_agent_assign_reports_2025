{
  "method": "sparse_base",
  "query": "In the Linux kernel, the following vulnerability has been resolved btrfs fix block group refcount race in btrfs_create_pending_block_groups() Block group creation is done in two phases, which results in a slightly unintuitive property a block group can be allocated/deallocated from after btrfs_make_block_group() adds it to the space_info with btrfs_add_bg_to_space_info(), but before creation is completely completed in btrfs_create_pending_block_groups(). As a result, it is possible for a block group to go unused and have btrfs_mark_bg_unused called on it concurrently with btrfs_create_pending_block_groups. This causes a number of issues, which were fixed with the block group flag BLOCK_GROUP_FLAG_NEW. However, this fix is not quite complete. Since it does not use the unused_bg_lock, it is possible for the following race to occur btrfs_create_pending_block_groups btrfs_mark_bg_unused if list_empty // false list_del_init clear_bit else if (test_bit) // true list_move_tail And we get into the exact same broken ref count and invalid new_bgs state for transaction cleanup that BLOCK_GROUP_FLAG_NEW was designed to prevent. The broken refcount aspect will result in a warning like",
  "keyphrases": {
    "base_query": "In the Linux kernel, the following vulnerability has been resolved btrfs fix block group refcount race in btrfs_create_pending_block_groups() Block group creation is done in two phases, which results in a slightly unintuitive property a block group can be allocated/deallocated from after btrfs_make_block_group() adds it to the space_info with btrfs_add_bg_to_space_info(), but before creation is completely completed in btrfs_create_pending_block_groups(). As a result, it is possible for a block group to go unused and have btrfs_mark_bg_unused called on it concurrently with btrfs_create_pending_block_groups. This causes a number of issues, which were fixed with the block group flag BLOCK_GROUP_FLAG_NEW. However, this fix is not quite complete. Since it does not use the unused_bg_lock, it is possible for the following race to occur btrfs_create_pending_block_groups btrfs_mark_bg_unused if list_empty // false list_del_init clear_bit else if (test_bit) // true list_move_tail And we get into the exact same broken ref count and invalid new_bgs state for transaction cleanup that BLOCK_GROUP_FLAG_NEW was designed to prevent. The broken refcount aspect will result in a warning like"
  },
  "timestamp": "2025-07-12T10:03:10.145652",
  "results_count": 10,
  "results_summary": [
    {
      "doc_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 267.30593769330545
    },
    {
      "doc_id": "863",
      "name": "Incorrect Authorization",
      "score": 266.41747795710944
    },
    {
      "doc_id": "415",
      "name": "Double Free",
      "score": 258.96015603861076
    },
    {
      "doc_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "score": 256.650735674371
    },
    {
      "doc_id": "327",
      "name": "Use of a Broken or Risky Cryptographic Algorithm",
      "score": 251.83917611399372
    }
  ]
}