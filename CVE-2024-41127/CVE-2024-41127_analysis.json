{
  "cve_id": "CVE-2024-41127",
  "description": "Monkeytype is a minimalistic and customizable typing test. Monkeytype is vulnerable to Poisoned Pipeline Execution through **Code Injection** in its ci-failure-comment.yml GitHub Workflow, enabling attackers to gain pull-requests write access. The ci-failure-comment.yml workflow is triggered when the Monkey CI workflow completes. When it runs, it will download an artifact uploaded by the triggering workflow and assign the contents of ./pr_num/pr_num.txt artifact to the steps.pr_num_reader.outputs.content WorkFlow variable. It is not validated that the variable is actually a number and later it is interpolated into a JS script allowing an attacker to change the code to be executed. This issue leads to pull-requests write access. This vulnerability is fixed in 24.30.0.",
  "key_phrases": {
    "rootcause": "",
    "weakness": "Code Injection",
    "impact": "gain pull-requests write access",
    "vector": "",
    "attacker": "attackers",
    "product": "Monkeytype",
    "version": "before 24.30.0",
    "component": "ci-failure-comment.yml GitHub Workflow"
  },
  "reference_content": "Based on the provided content, here's a breakdown of the vulnerability:\n\n**Root Cause:**\n\n*   The vulnerability stems from a code injection flaw in the `ci-failure-comment.yml` GitHub workflow of the `monkeytype` project. This workflow is triggered upon completion of the `Monkey CI` workflow.\n\n**Weaknesses/Vulnerabilities:**\n\n*   **Unvalidated Input:** The `ci-failure-comment.yml` workflow downloads an artifact from the triggering workflow. It then reads the content of a file (`pr_num.txt`) from this artifact and assigns it to the `steps.pr_num_reader.outputs.content` workflow variable. Critically, it does not validate if this content is actually a number.\n*   **Code Injection:** The unvalidated content of the variable is directly interpolated into a JavaScript script used by the `actions/github-script` action. This allows an attacker to inject arbitrary JavaScript code, leading to Poisoned Pipeline Execution.\n\n**Impact of Exploitation:**\n\n*   **Pull Request Write Access:** Successful exploitation allows an attacker to gain `pull-requests` write access within the repository. This level of access allows modification to pull requests.\n*   **Arbitrary Code Execution:** The injected JavaScript code executes within the GitHub Actions environment, effectively granting the attacker code execution within the context of the workflow.\n\n**Attack Vectors:**\n\n*   **Pull Request Triggered Workflow:** The attack is initiated by creating a pull request that modifies the `monkey-ci.yml` workflow to upload a malicious payload in the `pr_num.txt` artifact.\n*   **Workflow Chaining:**  The `Monkey CI` workflow uploads the malicious payload artifact, which then triggers the vulnerable `ci-failure-comment.yml` workflow, which then downloads and uses the malicious payload.\n\n**Required Attacker Capabilities/Position:**\n\n*   **Forked Repository:** The attacker needs to fork the target repository (`monkeytype`).\n*   **Create a Branch:** The attacker needs to create a branch within their fork.\n*   **Modify Workflow File:** The attacker needs to modify the `monkey-ci.yml` workflow file to include steps to create and upload a malicious artifact.\n*   **Create Pull Request:** The attacker needs to create a pull request to the main branch of the target repository with the modified workflow file.\n\n**Additional Notes:**\n\n*   The vulnerability is present in versions `<=v24.29.0` and was fixed in versions `>=v24.30.0`.\n*   The fix replaces the vulnerable `github-script` action with `peter-evans/create-or-update-comment@v4`, and passes the issue number through an environment variable rather than directly interpolating it into a script, mitigating the injection vulnerability.\n*   The provided content included a proof-of-concept demonstrating the vulnerability and the fix commit.\n*   The content also references resources about expression injection and keeping github actions secure, showing additional information than the CVE description alone.",
  "similar_info": {
    "cwe_distribution": {},
    "cwe_consensus": "",
    "similarity_stats": {
      "thresholds": [],
      "total_samples_by_threshold": {},
      "top_cwes_by_threshold": {}
    }
  },
  "similarity_summary": {
    "consensus_cwe": "",
    "top_cwes": [],
    "confidence_levels": {},
    "total_samples": 0
  },
  "analysis": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-96 | Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') | 0.9 | Base | Primary | Allowed |\n| CWE-1286 | Improper Validation of Syntactic Correctness of Input | 0.7 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship influencing the decision is the hierarchical relationship between CWE-94 (Improper Control of Generation of Code ('Code Injection')) and its child CWE-96 (Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')). CWE-96 is more specific, as the vulnerability involves injecting code into a statically saved file (the GitHub workflow). The secondary relationship that influenced the decision is that CWE-96 can be preceded by CWE-1286, **Improper Validation of Syntactic Correctness of Input**, further mapping the lack of validation.\n\n```mermaid\ngraph TD\n    cwe96[\"CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')\"]\n    cwe94[\"CWE-94: Improper Control of Generation of Code ('Code Injection')\"]\n    cwe1286[\"CWE-1286: Improper Validation of Syntactic Correctness of Input\"]\n    \n    cwe96 -->|CHILDOF| cwe94\n    cwe1286 -->|CANPRECEDE| cwe96\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe96 primary\n    class cwe94,cwe1286 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **improper validation** of the input (`pr_num.txt`) leading to **code injection** into a statically saved file, and culminating in the attacker gaining pull request write access.\n\n`CWE-1286` -> `CWE-96` -> Impact (Pull Request Write Access)\n\n## Summary of Analysis\nThe vulnerability is clearly a **code injection** issue, as the description states. The `ci-failure-comment.yml` workflow downloads an artifact, reads the content of `pr_num.txt`, and assigns it to a workflow variable without validation. This variable is then interpolated into a JavaScript script, allowing an attacker to inject arbitrary code.\n\nThe choice of CWE-96 (Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')) over the more general CWE-94 (Improper Control of Generation of Code ('Code Injection')) is based on the fact that the code is injected into a statically saved file (the GitHub workflow). This makes CWE-96 a more specific and accurate representation of the vulnerability. The evidence is the description statement, \"It is not validated that the variable is actually a number and later it is interpolated into a JS script allowing an attacker to change the code to be executed.\"\n\nCWE-1286 is added as a secondary weakness because the root cause of the vulnerability is that the input is not validated.\n\nCWE-79 (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')) was considered because the input is not neutralized. However, the injection occurs in a GitHub workflow file, not a web page, making CWE-96 a more appropriate choice.\n\nCWE-88 (Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')) was considered because of the similarity of the term \"injection\", but the injected code is not being used as arguments to a command.\n\nCWE-917 (Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')) was considered because the injected code is an expression. However, the code is being injected into a JavaScript script, not an expression language statement.\n\nCWE-78 (Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')) was considered because of the term \"injection\". However, the injected code is not being used as an OS command.\n\nThe selected CWEs are at the optimal level of specificity. CWE-96 accurately reflects the code injection into a statically saved file, and CWE-1286 highlights the lack of input validation that enables the vulnerability.",
  "analysis_with_relationships": "# Summary\n| CWE ID | CWE Name | Confidence | CWE Abstraction Level | CWE Vulnerability Mapping Label | CWE-Vulnerability Mapping Notes |\n|---|---|---|---|---|---|\n| CWE-96 | Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') | 0.9 | Base | Primary | Allowed |\n| CWE-1286 | Improper Validation of Syntactic Correctness of Input | 0.7 | Base | Secondary | Allowed |\n\n## Evidence and Confidence\n\n*   **Confidence Score:** 0.8\n*   **Evidence Strength:** HIGH\n\n## Relationship Analysis\nThe primary relationship influencing the decision is the hierarchical relationship between CWE-94 (Improper Control of Generation of Code ('Code Injection')) and its child CWE-96 (Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')). CWE-96 is more specific, as the vulnerability involves injecting code into a statically saved file (the GitHub workflow). The secondary relationship that influenced the decision is that CWE-96 can be preceded by CWE-1286, **Improper Validation of Syntactic Correctness of Input**, further mapping the lack of validation.\n\n```mermaid\ngraph TD\n    cwe96[\"CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')\"]\n    cwe94[\"CWE-94: Improper Control of Generation of Code ('Code Injection')\"]\n    cwe1286[\"CWE-1286: Improper Validation of Syntactic Correctness of Input\"]\n    \n    cwe96 -->|CHILDOF| cwe94\n    cwe1286 -->|CANPRECEDE| cwe96\n    \n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n    class cwe96 primary\n    class cwe94,cwe1286 secondary\n```\n\n## Vulnerability Chain\nThe vulnerability chain starts with the **improper validation** of the input (`pr_num.txt`) leading to **code injection** into a statically saved file, and culminating in the attacker gaining pull request write access.\n\n`CWE-1286` -> `CWE-96` -> Impact (Pull Request Write Access)\n\n## Summary of Analysis\nThe vulnerability is clearly a **code injection** issue, as the description states. The `ci-failure-comment.yml` workflow downloads an artifact, reads the content of `pr_num.txt`, and assigns it to a workflow variable without validation. This variable is then interpolated into a JavaScript script, allowing an attacker to inject arbitrary code.\n\nThe choice of CWE-96 (Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')) over the more general CWE-94 (Improper Control of Generation of Code ('Code Injection')) is based on the fact that the code is injected into a statically saved file (the GitHub workflow). This makes CWE-96 a more specific and accurate representation of the vulnerability. The evidence is the description statement, \"It is not validated that the variable is actually a number and later it is interpolated into a JS script allowing an attacker to change the code to be executed.\"\n\nCWE-1286 is added as a secondary weakness because the root cause of the vulnerability is that the input is not validated.\n\nCWE-79 (Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')) was considered because the input is not neutralized. However, the injection occurs in a GitHub workflow file, not a web page, making CWE-96 a more appropriate choice.\n\nCWE-88 (Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')) was considered because of the similarity of the term \"injection\", but the injected code is not being used as arguments to a command.\n\nCWE-917 (Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')) was considered because the injected code is an expression. However, the code is being injected into a JavaScript script, not an expression language statement.\n\nCWE-78 (Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')) was considered because of the term \"injection\". However, the injected code is not being used as an OS command.\n\nThe selected CWEs are at the optimal level of specificity. CWE-96 accurately reflects the code injection into a statically saved file, and CWE-1286 highlights the lack of input validation that enables the vulnerability.\n\n\n## CWE Relationship Analysis\n\nCurrent CWEs represent these abstraction levels: .\n\n\n### Vulnerability Chain Analysis\n\n**Chain starting from CWE-94:**\n- 94 (Improper Control of Generation of Code ('Code Injection')) - ROOT\n\n\n**Chain starting from CWE-88:**\n- 88 (Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')) - ROOT\n\n\n\n### CWE Relationship Diagram\n\n```mermaid\ngraph TD\n    classDef primary fill:#f96,stroke:#333,stroke-width:2px\n    classDef secondary fill:#69f,stroke:#333\n    classDef tertiary fill:#9e9,stroke:#333\n```",
  "criticism": "",
  "resolution": "",
  "relevant_cwes": [
    {
      "metadata": {
        "doc_id": "79",
        "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "source": "sparse"
      },
      "similarity": 588.1180919123532
    },
    {
      "metadata": {
        "doc_id": "863",
        "name": "Incorrect Authorization",
        "source": "sparse"
      },
      "similarity": 571.6745151221662
    },
    {
      "metadata": {
        "doc_id": "285",
        "name": "Improper Authorization",
        "source": "sparse"
      },
      "similarity": 571.2636183344772
    },
    {
      "metadata": {
        "doc_id": "214",
        "name": "Invocation of Process Using Visible Sensitive Information",
        "source": "sparse"
      },
      "similarity": 569.9523253576424
    },
    {
      "metadata": {
        "doc_id": "526",
        "name": "Cleartext Storage of Sensitive Information in an Environment Variable",
        "source": "sparse"
      },
      "similarity": 569.6676740573881
    },
    {
      "metadata": {
        "doc_id": "88",
        "name": "Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
        "source": "sparse"
      },
      "similarity": 568.8719295457887
    },
    {
      "metadata": {
        "doc_id": "306",
        "name": "Missing Authentication for Critical Function",
        "source": "sparse"
      },
      "similarity": 563.3612414597158
    },
    {
      "metadata": {
        "doc_id": "639",
        "name": "Authorization Bypass Through User-Controlled Key",
        "source": "sparse"
      },
      "similarity": 562.620496065144
    },
    {
      "metadata": {
        "doc_id": "96",
        "name": "Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')",
        "type": "Base",
        "original_content": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.",
        "keyphrase_source": "weakness:Code Injection",
        "source": "dense",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "dense",
            "graph"
          ],
          "retriever_count": 2,
          "normalized_scores": {
            "dense": 0.503029474495986,
            "graph": 1.6097552432878366
          }
        }
      },
      "similarity": 0.503029474495986
    },
    {
      "doc_id": "471",
      "text": "CWE-471: Modification of Assumed-Immutable Data (MAID)",
      "score": 2.2100000000000004,
      "metadata": {
        "doc_id": "471",
        "name": "Modification of Assumed-Immutable Data (MAID)",
        "type": "base",
        "original_content": "CWE-471: Modification of Assumed-Immutable Data (MAID)",
        "relationships": [
          {
            "source_id": "471",
            "target_id": "621",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "607",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "602",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "473",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "472",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "425",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "291",
            "label": "PARENTOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "1321",
            "label": "CANFOLLOW",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "1282",
            "label": "CANFOLLOW",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "471",
            "target_id": "664",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "664",
            "target_id": "471",
            "label": "PARENTOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "621",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "607",
            "target_id": "471",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "602",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "473",
            "target_id": "471",
            "label": "CHILDOF",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "472",
            "target_id": "471",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "425",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "291",
            "target_id": "471",
            "label": "CHILDOF",
            "properties": {
              "view_id": "1000"
            }
          },
          {
            "source_id": "1321",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "ordinal": "Primary",
              "view_id": "1000"
            }
          },
          {
            "source_id": "1282",
            "target_id": "471",
            "label": "CANPRECEDE",
            "properties": {
              "view_id": "1000"
            }
          }
        ],
        "score_components": {
          "relationship_chain": 1.0,
          "sequence_path": 1.0
        },
        "abstraction_factor": 1.3,
        "graph_path_info": {
          "path_types": [
            "relationship_chain",
            "vulnerability_sequence_forward"
          ],
          "best_paths": {
            "relationship_chain": {
              "path": [
                [
                  "1321",
                  "471",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "relationship_chain",
              "source": "1321"
            },
            "vulnerability_sequence_forward": {
              "path": [
                [
                  "1321",
                  "471",
                  "CANPRECEDE"
                ]
              ],
              "score": 1.0,
              "type": "vulnerability_sequence_forward",
              "source": "1321"
            }
          }
        },
        "position": "after",
        "sources": [
          "graph"
        ],
        "source": "graph",
        "mapping_notes": {
          "usage": "Allowed",
          "rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
          "comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
          "reasons": [
            "Acceptable-Use"
          ]
        },
        "score_info": {
          "retrievers": [
            "graph"
          ],
          "retriever_count": 1,
          "normalized_scores": {
            "graph": 2.2100000000000004
          }
        }
      },
      "similarity": 2.2100000000000004
    }
  ],
  "identified_cwes": {
    "analyzer": [
      "CWE-94",
      "CWE-88",
      "CWE-1286",
      "CWE-79",
      "CWE-917",
      "CWE-78",
      "CWE-96"
    ],
    "critic_additional": []
  },
  "keyphrase_cwe_mapping": {}
}