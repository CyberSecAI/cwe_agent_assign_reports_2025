{
  "retriever": "sparse",
  "query": "In the Linux kernel, the following vulnerability has been resolved net phy leds fix memory leak A network restart test on a router led to an out-of-memory condition, which was traced to a memory leak in the PHY LED trigger code. The root cause is misuse of the devm API. The registration function (phy_led_triggers_register) is called from phy_attach_direct, not phy_probe, and the unregister function (phy_led_triggers_unregister) is called from phy_detach, not phy_remove. This means the register and unregister functions can be called multiple times for the same PHY device, but devm-allocated memory is not freed until the driver is unbound. This also prevents kmemleak from detecting the leak, as the devm API internally stores the allocated pointer. Fix this by replacing devm_kzalloc/devm_kcalloc with standard kzalloc/kcalloc, and add the corresponding kfree calls in the unregister path.",
  "keyphrases": {
    "rootcause": [
      "misuse of the devm API"
    ],
    "weakness": [
      "memory leak"
    ]
  },
  "timestamp": "2025-07-12 13:33:31",
  "cve_id": "CVE-2025-37989",
  "result_count": 12,
  "results": [
    {
      "cwe_id": "401",
      "name": "Missing Release of Memory after Effective Lifetime",
      "score": 1000.0,
      "search_source": "alternate_term_match"
    },
    {
      "cwe_id": "362",
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "score": 756.5163237257804,
      "search_source": "rootcause:misuse of the devm API"
    },
    {
      "cwe_id": "415",
      "name": "Double Free",
      "score": 731.7173204268693,
      "search_source": "rootcause:misuse of the devm API"
    },
    {
      "cwe_id": "789",
      "name": "Memory Allocation with Excessive Size Value",
      "score": 728.4290538334063,
      "search_source": "rootcause:misuse of the devm API"
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "score": 719.1622402346327,
      "search_source": "rootcause:misuse of the devm API"
    },
    {
      "cwe_id": "364",
      "name": "Signal Handler Race Condition",
      "score": 712.899105026333,
      "search_source": "rootcause:misuse of the devm API"
    },
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "score": 711.6184670385787,
      "search_source": "rootcause:misuse of the devm API"
    },
    {
      "cwe_id": "20",
      "name": "Improper Input Validation",
      "score": 709.5567991999569,
      "search_source": "rootcause:misuse of the devm API"
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "score": 709.4756933213815,
      "search_source": "rootcause:misuse of the devm API"
    },
    {
      "cwe_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "score": 706.208669256911,
      "search_source": "rootcause:misuse of the devm API"
    },
    {
      "cwe_id": "909",
      "name": "Missing Initialization of Resource",
      "score": 659.1750784221932,
      "search_source": "weakness:memory leak"
    },
    {
      "cwe_id": "125",
      "name": "Out-of-bounds Read",
      "score": 653.7524125052827,
      "search_source": "weakness:memory leak"
    }
  ]
}